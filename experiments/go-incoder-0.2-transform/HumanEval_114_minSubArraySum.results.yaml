language: go_test.go
name: HumanEval_114_minSubArraySum
results:
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    sum\
    \ := nums[0]\n    for _, v := range nums[1:] {\n        sum += v\n    }\n    return\
    \ sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpolj30dd3_test.go:51: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpolj30dd3_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpolj30dd3_test.go:51: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpolj30dd3_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpolj30dd3_test.go:51: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpolj30dd3_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpolj30dd3_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return nums[0]\n \
    \   }\n    min := nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n\
    \        if nums[i] < min {\n            min = nums[i]\n        }\n        if\
    \ nums[i] > max {\n            max = nums[i]\n        }\n    }\n    return min\
    \ + minSubArraySum(nums[1 : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc00011bd08?, 0x0?, 0x0?})\n\
    \t/tmp/tmp2dz0mp1s_test.go:18 +0x4f\ncommand-line-arguments_test.minSubArraySum({0xc00011bd00?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc00011bcf8?,\
    \ 0x4?, 0x5?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc0000784f0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp2dz0mp1s_test.go:40 +0xb4\ntesting.tRunner(0xc0001031e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums {\n        if v < min {\n            min = v\n   \
    \     }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp7bg0emml_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp7bg0emml_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp7bg0emml_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp7bg0emml_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums[1:] {\n   \
    \     if n < min {\n            min = n\n        }\n        if n > max {\n   \
    \         max = n\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpn3447mbw_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpn3447mbw_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpn3447mbw_test.go:43 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums {\n        if v <\
    \ min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    \n    for _, v := range nums {\n        if v < min\
    \ {\n            min = v\n        }\n        if v > max {\n            max = v\n\
    \        }\n    }\n    \n    return min + minSubArraySum(nums[len(nums)-1:])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160370\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520348?, 0x5e3ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?,\
    \ 0x1?, 0x1?})\n\t/tmp/tmptqnk6zcs_test.go:15 +0xbb fp=0xc020160380 sp=0xc020160378\
    \ pc=0x4ef71b\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc0201603b0 sp=0xc020160380\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc0201603e0 sp=0xc0201603b0\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc020160410 sp=0xc0201603e0\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc020160440 sp=0xc020160410\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc020160470 sp=0xc020160440\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc0201604a0 sp=0xc020160470\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc0201604d0 sp=0xc0201604a0\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc020160500 sp=0xc0201604d0\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?,\
    \ 0x0?})\n\t/tmp/tmptqnk6zcs_test.go:40 +0x95 fp=0xc020160530 sp=0xc020160500\
    \ pc=0x4ef6f5\ncommand-line-arguments_test.minSubArraySum({0xc04015fd18?, 0x0?, "
  timestamp: 1660075497
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, num := range nums[1:] {\n        if min > num {\n            min =\
    \ num\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpe39dbi3f_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpe39dbi3f_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpe39dbi3f_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpe39dbi3f_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here.\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl9edome3_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, v := range nums[1:] {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpwoxwgdug_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpwoxwgdug_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpwoxwgdug_test.go:43 +0x112\ntesting.tRunner(0xc0000d04e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    start := 0\n    end := len(nums) - 1\n  \
    \  for start < end {\n        result := nums[start] + nums[end]\n        if result\
    \ < result {\n            start = start + 1\n        } else {\n            end\
    \ = end - 1\n        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpkb80prug_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpkb80prug_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpkb80prug_test.go:54: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpkb80prug_test.go:54:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpkb80prug_test.go:54: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpkb80prug_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpkb80prug_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpkb80prug_test.go:54:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpkb80prug_test.go:54: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpkb80prug_test.go:54:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpkb80prug_test.go:54: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm64fbgz8_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    min := nums[0]\n    for _, v := range nums {\n\
    \        sum += v\n        if sum < min {\n            min = sum\n        }\n\
    \    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpuhfw4udd_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpuhfw4udd_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpuhfw4udd_test.go:51: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpuhfw4udd_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpuhfw4udd_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    start := 0\n    end := len(nums) - 1\n  \
    \  for start < end {\n        result := nums[start] + nums[end]\n        if result\
    \ < 0 {\n            result *= -1\n        }\n        if result > result {\n \
    \           end = start - 1\n        } else {\n            start = end + 1\n \
    \       }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp3s06xk8z_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp3s06xk8z_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp3s06xk8z_test.go:57: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp3s06xk8z_test.go:57:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp3s06xk8z_test.go:57: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp3s06xk8z_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp3s06xk8z_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp3s06xk8z_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp3s06xk8z_test.go:57: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp3s06xk8z_test.go:57:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp3s06xk8z_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        min = min(v, min+v)\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ei82j4__test.go:20:12: v declared but not used

    /tmp/tmp5ei82j4__test.go:21:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    max := nums[n-1]\n    for i := 1; i < n; i++ {\n    \
    \    if nums[i] < min {\n            min = nums[i]\n        }\n        if nums[i]\
    \ > max {\n            max = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[:n-1])\
    \ + max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=1)', got '%!s(int=30)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-14)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=203)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=3)', got '%!s(int=117)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=130)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, num := range nums[1:] {\n \
    \       if num < min {\n            min = num\n        }\n        if num > max\
    \ {\n            max = num\n        }\n    }\n    \n    return min + minSubArraySum(nums[2:])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc78?, 0x4?, 0x4?})\n\
    \t/tmp/tmp39vzu90o_test.go:32 +0xaf\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp39vzu90o_test.go:32 +0x90\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp39vzu90o_test.go:43 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, v := range nums[1:] {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpwoxwgdug_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpwoxwgdug_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpwoxwgdug_test.go:43 +0x112\ntesting.tRunner(0xc0000d04e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums {\n        if v < min {\n            min = v\n   \
    \     }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp7bg0emml_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp7bg0emml_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp7bg0emml_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp7bg0emml_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums[1:] {\n   \
    \     if n < min {\n            min = n\n        }\n        if n > max {\n   \
    \         max = n\n        }\n    }\n    \n    return min + minSubArraySum(nums[0\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4zx03aa2_test.go:59: expected '%!s(int=1)', got '%!s(int=9)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp4zx03aa2_test.go:59:\
    \ expected '%!s(int=-14)', got '%!s(int=-19)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4zx03aa2_test.go:59: expected '%!s(int=-6)', got '%!s(int=-14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4zx03aa2_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=86)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4zx03aa2_test.go:59: expected '%!s(int=3)', got '%!s(int=44)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4zx03aa2_test.go:59:\
    \ expected '%!s(int=-33)', got '%!s(int=-65)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp4zx03aa2_test.go:59: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n\n    return min + minSubArraySum(nums[2:])\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc78?, 0x4?, 0x4?})\n\
    \t/tmp/tmpvqsak8lg_test.go:31 +0xaf\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpvqsak8lg_test.go:31 +0x90\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpvqsak8lg_test.go:42 +0x112\ntesting.tRunner(0xc0000cc4e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    min := nums[0]\n    for _, num := range nums {\n        if\
    \ num < min {\n            min = num\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp9_uj4pl5_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp9_uj4pl5_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9_uj4pl5_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9_uj4pl5_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here.\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl9edome3_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, v := range nums[1:] {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpwoxwgdug_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpwoxwgdug_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpwoxwgdug_test.go:43 +0x112\ntesting.tRunner(0xc0000d04e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, n := range nums[1:] {\n        if\
    \ n > max {\n            max = n\n        }\n        if n < min {\n          \
    \  min = n\n        }\n    }\n    \n    return min + minSubArraySum(nums[1 : len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpoqps8o1b_test.go:31 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpoqps8o1b_test.go:31 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpoqps8o1b_test.go:42 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return -1\n    }\n\
    \    min := nums[0]\n    max := nums[n-1]\n    for i := 1; i < n; i++ {\n    \
    \    current := nums[i]\n        if current < min {\n            min = current\n\
    \        }\n        if current > max {\n            max = current\n        }\n\
    \    }\n    return min + max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n \
    \ candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp6_6s81ph_test.go:58: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp6_6s81ph_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp6_6s81ph_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp6_6s81ph_test.go:58:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp6_6s81ph_test.go:58: expected '%!s(int=0)', got '%!s(int=1000000)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp6_6s81ph_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=5)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp6_6s81ph_test.go:58: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp6_6s81ph_test.go:58:\
    \ expected '%!s(int=3)', got '%!s(int=16)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp6_6s81ph_test.go:58: expected '%!s(int=-33)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp6_6s81ph_test.go:58:\
    \ expected '%!s(int=-10)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp6_6s81ph_test.go:58: expected '%!s(int=7)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp6_6s81ph_test.go:58:\
    \ expected '%!s(int=-1)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return -1\n    }\n\
    \    min := nums[0]\n    max := nums[n-1]\n    for i := 1; i < n; i++ {\n    \
    \    if nums[i] < min {\n            min = nums[i]\n        }\n        if nums[i]\
    \ > max {\n            max = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[:n-1])\
    \ + max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpg3a935sy_test.go:57: expected '%!s(int=1)', got '%!s(int=25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpg3a935sy_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpg3a935sy_test.go:57: expected '%!s(int=-14)', got '%!s(int=-19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpg3a935sy_test.go:57:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmpg3a935sy_test.go:57: expected '%!s(int=0)', got '%!s(int=1000029)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmpg3a935sy_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=2)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpg3a935sy_test.go:57: expected '%!s(int=-6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmpg3a935sy_test.go:57:\
    \ expected '%!s(int=3)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmpg3a935sy_test.go:57: expected '%!s(int=-33)', got '%!s(int=-71)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmpg3a935sy_test.go:57:\
    \ expected '%!s(int=-10)', got '%!s(int=-1)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpg3a935sy_test.go:57: expected '%!s(int=7)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpg3a935sy_test.go:57:\
    \ expected '%!s(int=-1)', got '%!s(int=-3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075497
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    sum := nums[0]\n\
    \    for _, num := range nums[1:] {\n        sum += num\n    }\n    return sum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmphv1jurhf_test.go:50: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmphv1jurhf_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmphv1jurhf_test.go:50: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmphv1jurhf_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmphv1jurhf_test.go:50: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmphv1jurhf_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmphv1jurhf_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075497
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums {\n      \
    \  result = min(result, num + result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsavs0rbd_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075497
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here.\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl9edome3_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    max := nums[0]\n    for _, v := range nums[1:] {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    return min + minSubArraySum(nums[2:])\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc78?, 0x4?, 0x4?})\n\
    \t/tmp/tmpsm6hevgr_test.go:29 +0xaf\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpsm6hevgr_test.go:29 +0x90\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpsm6hevgr_test.go:40 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums {\n        if v < min {\n            min = v\n   \
    \     }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp7bg0emml_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp7bg0emml_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp7bg0emml_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp7bg0emml_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    for _, v := range nums {\n        if v < min {\n            min\
    \ = v\n        }\n    }\n\n    for _, v := range nums {\n        if v == min {\n\
    \            min += v\n        }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp714rffrn_test.go:60: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp714rffrn_test.go:60:\
    \ expected '%!s(int=-14)', got '%!s(int=-20)'\n    --- FAIL: TestMinsubarraysum/test_num__3\
    \ (0.00s)\n        tmp714rffrn_test.go:60: expected '%!s(int=-9999999999999999)',\
    \ got '%!s(int=-19999999999999998)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp714rffrn_test.go:60: expected '%!s(int=-6)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp714rffrn_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp714rffrn_test.go:60: expected '%!s(int=3)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp714rffrn_test.go:60:\
    \ expected '%!s(int=-33)', got '%!s(int=-66)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp714rffrn_test.go:60: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp714rffrn_test.go:60:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp714rffrn_test.go:60: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    for i := 1; i < n; i++ {\n        if nums[i] < min {\n\
    \            min = nums[i]\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp8aict_bf_test.go:53: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp8aict_bf_test.go:53:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp8aict_bf_test.go:53: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8aict_bf_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return nums[0]\n \
    \   }\n    min := nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n\
    \        if nums[i] < min {\n            min = nums[i]\n        }\n        if\
    \ nums[i] > max {\n            max = nums[i]\n        }\n    }\n    return min\
    \ + minSubArraySum(nums[1 : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc00011bd08?, 0x0?, 0x0?})\n\
    \t/tmp/tmp2dz0mp1s_test.go:18 +0x4f\ncommand-line-arguments_test.minSubArraySum({0xc00011bd00?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc00011bcf8?,\
    \ 0x4?, 0x5?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc0000784f0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp2dz0mp1s_test.go:40 +0xb4\ntesting.tRunner(0xc0001031e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    \n    for _, v := range nums {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9ggs516u_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp9ggs516u_test.go:67:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp9ggs516u_test.go:67: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp9ggs516u_test.go:67:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9ggs516u_test.go:67:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9ggs516u_test.go:67: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9ggs516u_test.go:67:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9ggs516u_test.go:67: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9ggs516u_test.go:67:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp9ggs516u_test.go:67: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp9ggs516u_test.go:67:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9ggs516u_test.go:67: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    min := nums[0]\n    for _, num := range nums\
    \ {\n        if num < min {\n            min = num\n        }\n    }\n    for\
    \ _, num := range nums {\n        if num == min {\n            result += num\n\
    \        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpzgk6zrpf_test.go:55: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpzgk6zrpf_test.go:55:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpzgk6zrpf_test.go:55: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpzgk6zrpf_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums {\n       \
    \ if n > max {\n            max = n\n        }\n        if n < min {\n       \
    \     min = n\n        }\n    }\n    \n    for i := 0; i < len(nums); i++ {\n\
    \        if nums[i] > max {\n            max = nums[i]\n        }\n        if\
    \ nums[i] < min {\n            min = nums[i]\n        }\n    }\n    \n    return\
    \ min + max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpxsv_5geu_test.go:68: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpxsv_5geu_test.go:68:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpxsv_5geu_test.go:68: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpxsv_5geu_test.go:68:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpxsv_5geu_test.go:68:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxsv_5geu_test.go:68: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxsv_5geu_test.go:68:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpxsv_5geu_test.go:68: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpxsv_5geu_test.go:68:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpxsv_5geu_test.go:68: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpxsv_5geu_test.go:68:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpxsv_5geu_test.go:68: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, n := range nums[1:] {\n        if\
    \ n > max {\n            max = n\n        }\n        if n < min {\n          \
    \  min = n\n        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp6x2ffzvo_test.go:58: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp6x2ffzvo_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp6x2ffzvo_test.go:58: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp6x2ffzvo_test.go:58:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp6x2ffzvo_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp6x2ffzvo_test.go:58: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp6x2ffzvo_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp6x2ffzvo_test.go:58: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp6x2ffzvo_test.go:58:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp6x2ffzvo_test.go:58: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp6x2ffzvo_test.go:58:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp6x2ffzvo_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return nums[0]\n \
    \   }\n    min := nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n\
    \        if nums[i] < min {\n            min = nums[i]\n        }\n        if\
    \ nums[i] > max {\n            max = nums[i]\n        }\n    }\n    return min\
    \ + minSubArraySum(nums[1 : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc00011bd08?, 0x0?, 0x0?})\n\
    \t/tmp/tmp2dz0mp1s_test.go:18 +0x4f\ncommand-line-arguments_test.minSubArraySum({0xc00011bd00?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc00011bcf8?,\
    \ 0x4?, 0x5?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc0000784f0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp2dz0mp1s_test.go:40 +0xb4\ntesting.tRunner(0xc0001031e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    max := nums[n-1]\n    for i := 1; i < n; i++ {\n    \
    \    if nums[i] < min {\n            min = nums[i]\n        }\n        if nums[i]\
    \ > max {\n            max = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[:n-1])\
    \ + max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=1)', got '%!s(int=30)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-14)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=203)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=3)', got '%!s(int=117)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=130)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    sum := 0\n    for _, v := range\
    \ nums {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpvskgb3fn_test.go:48: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpvskgb3fn_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvskgb3fn_test.go:48: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvskgb3fn_test.go:48:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpvskgb3fn_test.go:48: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpvskgb3fn_test.go:48:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpvskgb3fn_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    sum := nums[0]\n    for i := 1; i < n;\
    \ i++ {\n        sum += nums[i]\n        if sum < 0 {\n            sum = 0\n \
    \       }\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmphm4fm4jl_test.go:51: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmphm4fm4jl_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmphm4fm4jl_test.go:51: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmphm4fm4jl_test.go:51:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmphm4fm4jl_test.go:51: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmphm4fm4jl_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmphm4fm4jl_test.go:51: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmphm4fm4jl_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmphm4fm4jl_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    \n    sum := 0\n    for _, v := range nums {\n\
    \        sum += v\n        if sum < min {\n            min = sum\n        }\n\
    \        if sum > max {\n            max = sum\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmppz0e59kk_test.go:68: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n      \
    \  if nums[i] < min {\n            min = nums[i]\n        }\n        if nums[i]\
    \ > max {\n            max = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[1\
    \ : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpql929h3z_test.go:30 +0xab\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpql929h3z_test.go:30 +0x8c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpql929h3z_test.go:41 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums {\n      \
    \  result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpra4qcjpk_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075499
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    for _, v := range nums {\n        result\
    \ = min(result, v+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr4475kv8_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    min := nums[0]\n    for _, v := range nums {\n        if v\
    \ < min {\n            min = v\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpuxoxriez_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpuxoxriez_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpuxoxriez_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpuxoxriez_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums {\n        if v <\
    \ min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n    \n    min -= max\n    \n    for _, v := range nums\
    \ {\n        if v < min {\n            min = v\n        }\n    }\n    \n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpjswtbg53_test.go:66: expected '%!s(int=1)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpjswtbg53_test.go:66:\
    \ expected '%!s(int=-6)', got '%!s(int=-3)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpjswtbg53_test.go:66: expected '%!s(int=-14)', got '%!s(int=-12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpjswtbg53_test.go:66:\
    \ expected '%!s(int=0)', got '%!s(int=-1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpjswtbg53_test.go:66: expected '%!s(int=-6)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpjswtbg53_test.go:66:\
    \ expected '%!s(int=-6)', got '%!s(int=-105)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpjswtbg53_test.go:66: expected '%!s(int=3)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpjswtbg53_test.go:66:\
    \ expected '%!s(int=-33)', got '%!s(int=-133)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmpjswtbg53_test.go:66: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmpjswtbg53_test.go:66:\
    \ expected '%!s(int=-1)', got '%!s(int=-2)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    max := nums[0]\n    for _, n := range nums {\n        if n < min\
    \ {\n            min = n\n        }\n        if n > max {\n            max = n\n\
    \        }\n    }\n\n    for _, n := range nums {\n        if n < min {\n    \
    \        min = n\n        }\n        if n > max {\n            max = n\n     \
    \   }\n    }\n\n    return min + max\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpzdsblrfu_test.go:67: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpzdsblrfu_test.go:67:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpzdsblrfu_test.go:67: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpzdsblrfu_test.go:67:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpzdsblrfu_test.go:67:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpzdsblrfu_test.go:67: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpzdsblrfu_test.go:67:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpzdsblrfu_test.go:67: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpzdsblrfu_test.go:67:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpzdsblrfu_test.go:67: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpzdsblrfu_test.go:67:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpzdsblrfu_test.go:67: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    min := nums[0]\n    for _, v := range nums {\n        if v\
    \ < min {\n            min = v\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpuxoxriez_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpuxoxriez_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpuxoxriez_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpuxoxriez_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    for _, n := range nums[1:] {\n        if n < min {\n          \
    \  min = n\n        }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmphky7dyyo_test.go:54: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmphky7dyyo_test.go:54:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmphky7dyyo_test.go:54: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmphky7dyyo_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    for _, v := range nums[1:] {\n        if v < min {\n          \
    \  min = v\n        }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpvkfk03t0_test.go:54: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpvkfk03t0_test.go:54:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvkfk03t0_test.go:54: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvkfk03t0_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := nums[0]\n    for _, num := range nums {\n        sum\
    \ += num\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=-14)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=199)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=196)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    max := nums[n-1]\n    for i := 1; i < n; i++ {\n    \
    \    if nums[i] < min {\n            min = nums[i]\n        }\n        if nums[i]\
    \ > max {\n            max = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[:n-1])\
    \ + max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=1)', got '%!s(int=30)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-14)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=203)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=3)', got '%!s(int=117)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=130)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := nums[0]\n    for _, num := range nums[1:] {\n     \
    \   sum += num\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp92zgjemc_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp92zgjemc_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp92zgjemc_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp92zgjemc_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp92zgjemc_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp92zgjemc_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp92zgjemc_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, num := range nums[1:] {\n        min = min(num, min)\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnrqjl59o_test.go:20:12: num declared but not used

    /tmp/tmpnrqjl59o_test.go:21:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    max := nums[0]\n    for _, n := range nums[1:] {\n        if n\
    \ < min {\n            min = n\n        }\n        if n > max {\n            max\
    \ = n\n        }\n    }\n\n    return min + minSubArraySum(nums[2:])\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc78?, 0x4?, 0x4?})\n\
    \t/tmp/tmp5y6vmohw_test.go:31 +0xaf\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp5y6vmohw_test.go:31 +0x90\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp5y6vmohw_test.go:42 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    for _, num := range nums {\n        result\
    \ += num\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmps1dnl9gi_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmps1dnl9gi_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmps1dnl9gi_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmps1dnl9gi_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmps1dnl9gi_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmps1dnl9gi_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmps1dnl9gi_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, num := range nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075500
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := nums[0]\n    for _, v := range nums {\n        sum\
    \ += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmps8xh5ekt_test.go:47: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmps8xh5ekt_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmps8xh5ekt_test.go:47: expected '%!s(int=-14)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmps8xh5ekt_test.go:47:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmps8xh5ekt_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmps8xh5ekt_test.go:47: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmps8xh5ekt_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=199)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmps8xh5ekt_test.go:47: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmps8xh5ekt_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=196)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmps8xh5ekt_test.go:47: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmps8xh5ekt_test.go:47:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmps8xh5ekt_test.go:47: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075500
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n\n    for _, v := range nums {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n\n    return min + minSubArraySum(nums[2:])\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc78?, 0x4?, 0x4?})\n\
    \t/tmp/tmpaj97jvmg_test.go:40 +0xca\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpaj97jvmg_test.go:40 +0xab\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpaj97jvmg_test.go:51 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    start := 0\n    end := len(nums) - 1\n  \
    \  for start < end {\n        result += nums[start]\n        if result < 0 {\n\
    \            result -= nums[end]\n            end -= 1\n        } else {\n   \
    \         start += 1\n        }\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp033j27_e_test.go:55: expected '%!s(int=1)', got '%!s(int=12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp033j27_e_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=1)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp033j27_e_test.go:55: expected '%!s(int=-14)', got '%!s(int=3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp033j27_e_test.go:55:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__4\
    \ (0.00s)\n        tmp033j27_e_test.go:55: expected '%!s(int=0)', got '%!s(int=30)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__5 (0.00s)\n        tmp033j27_e_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=-12)'\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmp033j27_e_test.go:55: expected '%!s(int=-6)', got '%!s(int=104)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__7 (0.00s)\n        tmp033j27_e_test.go:55:\
    \ expected '%!s(int=3)', got '%!s(int=45)'\n    --- FAIL: TestMinsubarraysum/test_num__8\
    \ (0.00s)\n        tmp033j27_e_test.go:55: expected '%!s(int=-33)', got '%!s(int=98)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__9 (0.00s)\n        tmp033j27_e_test.go:55:\
    \ expected '%!s(int=-10)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__10\
    \ (0.00s)\n        tmp033j27_e_test.go:55: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__11 (0.00s)\n        tmp033j27_e_test.go:55:\
    \ expected '%!s(int=-1)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    max := nums[n-1]\n    for i := 1; i < n; i++ {\n    \
    \    if nums[i] < min {\n            min = nums[i]\n        }\n        if nums[i]\
    \ > max {\n            max = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[:n-1])\
    \ + max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=1)', got '%!s(int=30)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-14)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=203)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=3)', got '%!s(int=117)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=130)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp98f_z9of_test.go:57:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp98f_z9of_test.go:57: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    for i := 1; i < n; i++ {\n        if nums[i] < min {\n\
    \            min = nums[i]\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp8aict_bf_test.go:53: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp8aict_bf_test.go:53:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp8aict_bf_test.go:53: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8aict_bf_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, v := range nums[1:] {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpwoxwgdug_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpwoxwgdug_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpwoxwgdug_test.go:43 +0x112\ntesting.tRunner(0xc0000d04e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    min := nums[0]\n    for _, n := range nums {\n        if n\
    \ < min {\n            min = n\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpsvgxysm6_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpsvgxysm6_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpsvgxysm6_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpsvgxysm6_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, num := range nums {\n        if min > num {\n            min = num\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpxwxa828d_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpxwxa828d_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxwxa828d_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxwxa828d_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    sum := 0\n    for _, num := range\
    \ nums {\n        sum += num\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpq8ejrvxp_test.go:48: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpq8ejrvxp_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpq8ejrvxp_test.go:48: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpq8ejrvxp_test.go:48:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpq8ejrvxp_test.go:48: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpq8ejrvxp_test.go:48:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpq8ejrvxp_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, n := range nums {\n        if n < min {\n            min = n\n   \
    \     }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpqdkj5hs0_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpqdkj5hs0_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpqdkj5hs0_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpqdkj5hs0_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums {\n       \
    \ if n > max {\n            max = n\n        }\n        if n < min {\n       \
    \     min = n\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmp0lk75och_test.go:32 +0x89\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp0lk75och_test.go:32 +0x6a\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp0lk75och_test.go:43 +0x112\ntesting.tRunner(0xc0000da1a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    for i := 1; i < n; i++ {\n        if nums[i] < min {\n\
    \            min = nums[i]\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmp8aict_bf_test.go:53: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp8aict_bf_test.go:53:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp8aict_bf_test.go:53: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8aict_bf_test.go:53:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, n := range nums[1:] {\n        if n < min {\n            min = n\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpxmdizpty_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpxmdizpty_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxmdizpty_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxmdizpty_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, num := range nums[1:] {\n        min = min(num, min)\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnrqjl59o_test.go:20:12: num declared but not used

    /tmp/tmpnrqjl59o_test.go:21:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, num := range nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075500
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums {\n       \
    \ if n > max {\n            max = n\n        }\n        if n < min {\n       \
    \     min = n\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmp0lk75och_test.go:32 +0x89\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp0lk75och_test.go:32 +0x6a\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp0lk75och_test.go:43 +0x112\ntesting.tRunner(0xc0000da1a0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums[1:] {\n   \
    \     if n < min {\n            min = n\n        }\n        if n > max {\n   \
    \         max = n\n        }\n    }\n    \n    return min + minSubArraySum(nums[0\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4zx03aa2_test.go:59: expected '%!s(int=1)', got '%!s(int=9)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmp4zx03aa2_test.go:59:\
    \ expected '%!s(int=-14)', got '%!s(int=-19)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4zx03aa2_test.go:59: expected '%!s(int=-6)', got '%!s(int=-14)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4zx03aa2_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=86)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4zx03aa2_test.go:59: expected '%!s(int=3)', got '%!s(int=44)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4zx03aa2_test.go:59:\
    \ expected '%!s(int=-33)', got '%!s(int=-65)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp4zx03aa2_test.go:59: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n == 0 {\n        return 0\n    }\n\
    \    min := nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n      \
    \  if nums[i] < min {\n            min = nums[i]\n        }\n        if nums[i]\
    \ > max {\n            max = nums[i]\n        }\n    }\n    return min + minSubArraySum(nums[1\
    \ : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpql929h3z_test.go:30 +0xab\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpql929h3z_test.go:30 +0x8c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpql929h3z_test.go:41 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here.\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl9edome3_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, num := range nums {\n        if num < min {\n            min = num\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpuaqgbpga_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpuaqgbpga_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpuaqgbpga_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpuaqgbpga_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, n := range nums[1:] {\n        if n < min {\n            min = n\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpxmdizpty_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpxmdizpty_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpxmdizpty_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpxmdizpty_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return nums[0]\n \
    \   }\n    min := nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n\
    \        if nums[i] < min {\n            min = nums[i]\n        }\n        if\
    \ nums[i] > max {\n            max = nums[i]\n        }\n    }\n    sum := 0\n\
    \    for i := 0; i < n; i++ {\n        sum += nums[i]\n        if sum < min {\n\
    \            sum += nums[i]\n        }\n        if sum > max {\n            sum\
    \ -= nums[i]\n        }\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp7qlchso__test.go:67: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp7qlchso__test.go:67:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp7qlchso__test.go:67: expected '%!s(int=-14)', got '%!s(int=-24)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp7qlchso__test.go:67:\
    \ expected '%!s(int=0)', got '%!s(int=30)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp7qlchso__test.go:67: expected '%!s(int=-6)', got '%!s(int=-4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp7qlchso__test.go:67:\
    \ expected '%!s(int=-6)', got '%!s(int=89)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp7qlchso__test.go:67: expected '%!s(int=3)', got '%!s(int=13)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp7qlchso__test.go:67:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp7qlchso__test.go:67: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    return 0\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=-14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=-6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=-6)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=-33)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=-10)', got '%!s(int=0)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpbc7sahwp_test.go:45:\
    \ expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpbc7sahwp_test.go:45: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if v\
    \ < min {\n            min = v\n        }\n        if v > max {\n            max\
    \ = v\n        }\n    }\n\n    return min + minSubArraySum(nums[1 : len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmp43_xcxg6_test.go:31 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp43_xcxg6_test.go:31 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp43_xcxg6_test.go:42 +0x112\ntesting.tRunner(0xc0000cc4e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return nums[0]\n \
    \   }\n    min := nums[0]\n    max := nums[n-1]\n    for i := 1; i < n; i++ {\n\
    \        if nums[i] < min {\n            min = nums[i]\n        }\n        if\
    \ nums[i] > max {\n            max = nums[i]\n        }\n    }\n    return min\
    \ + minSubArraySum(nums[:n-1]) + max\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4q_gyb69_test.go:57: expected '%!s(int=1)', got '%!s(int=28)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp4q_gyb69_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp4q_gyb69_test.go:57: expected '%!s(int=-14)', got '%!s(int=-19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp4q_gyb69_test.go:57:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4q_gyb69_test.go:57: expected '%!s(int=-6)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4q_gyb69_test.go:57:\
    \ expected '%!s(int=-6)', got '%!s(int=103)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4q_gyb69_test.go:57: expected '%!s(int=3)', got '%!s(int=107)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4q_gyb69_test.go:57:\
    \ expected '%!s(int=-33)', got '%!s(int=30)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    //\
    \ Initialize min and max to first and last element\n    min := nums[0]\n    max\
    \ := nums[len(nums)-1]\n    \n    // Initialize sum to first element\n    sum\
    \ := nums[0]\n    \n    // Initialize sum to first element and min to first element\n\
    \    for i := 0; i < len(nums); i++ {\n        sum += nums[i]\n        if sum\
    \ < min {\n            min = sum\n        }\n        if sum > max {\n        \
    \    max = sum\n        }\n    }\n    \n    // Initialize sum to last element\n\
    \    sum = nums[len(nums)-1]\n    \n    // Initialize sum to last element and\
    \ max to last element\n    for i := len(nums)-1; i >= 0; i-- {\n        sum +=\
    \ nums[i]\n        if sum < min {\n            min = sum\n        }\n        if\
    \ sum > max {\n            max = sum\n        }\n    }\n    \n    return min +\
    \ max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpkko5_hcp_test.go:79: expected '%!s(int=1)', got '%!s(int=22)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpkko5_hcp_test.go:79:\
    \ expected '%!s(int=-6)', got '%!s(int=-11)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpkko5_hcp_test.go:79: expected '%!s(int=-14)', got '%!s(int=-26)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpkko5_hcp_test.go:79:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-29999999999999997)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpkko5_hcp_test.go:79:\
    \ expected '%!s(int=0)', got '%!s(int=2000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpkko5_hcp_test.go:79: expected '%!s(int=-6)', got '%!s(int=-7)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpkko5_hcp_test.go:79:\
    \ expected '%!s(int=-6)', got '%!s(int=194)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpkko5_hcp_test.go:79: expected '%!s(int=3)', got '%!s(int=67)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpkko5_hcp_test.go:79:\
    \ expected '%!s(int=-33)', got '%!s(int=194)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpkko5_hcp_test.go:79: expected '%!s(int=-10)', got '%!s(int=-30)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpkko5_hcp_test.go:79:\
    \ expected '%!s(int=7)', got '%!s(int=21)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpkko5_hcp_test.go:79: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    start := 0\n    end := len(nums) - 1\n  \
    \  for start <= end {\n        result := nums[start] + minSubArraySum(nums[start+1:end])\n\
    \        if result < nums[start] {\n            start = start + 1\n        } else\
    \ {\n            end = end - 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afd00, 0x2, 0x4})\n\
    \t/tmp/tmp31hpx6vz_test.go:20 +0x105\ncommand-line-arguments_test.minSubArraySum({0xc00008dcf8,\
    \ 0x4, 0x5})\n\t/tmp/tmp31hpx6vz_test.go:20 +0xa5\ncommand-line-arguments_test.minSubArraySum({0xc00008dcf0,\
    \ 0x6, 0x6})\n\t/tmp/tmp31hpx6vz_test.go:20 +0xa5\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp31hpx6vz_test.go:37 +0xb4\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums {\n      \
    \  result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpra4qcjpk_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075499
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    \n    sum := 0\n    for _, v := range nums {\n\
    \        sum += v\n        if sum < min {\n            min = sum\n        }\n\
    \        if sum > max {\n            max = sum\n        }\n    }\n    return min\
    \ + max\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpg9hqk8x__test.go:68: expected '%!s(int=1)', got '%!s(int=17)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpg9hqk8x__test.go:68:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpg9hqk8x__test.go:68: expected '%!s(int=-14)', got '%!s(int=-12)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmpg9hqk8x__test.go:68:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpg9hqk8x__test.go:68:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpg9hqk8x__test.go:68: expected '%!s(int=-6)', got '%!s(int=4)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpg9hqk8x__test.go:68:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpg9hqk8x__test.go:68: expected '%!s(int=3)', got '%!s(int=52)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpg9hqk8x__test.go:68:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpg9hqk8x__test.go:68: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpg9hqk8x__test.go:68:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpg9hqk8x__test.go:68: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    min := nums[0]\n    for _, v := range nums {\n        if v\
    \ < min {\n            min = v\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpuxoxriez_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpuxoxriez_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpuxoxriez_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpuxoxriez_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.009s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    min := nums[0]\n    for _, num := range nums {\n        if\
    \ min > num {\n            min = num\n        }\n    }\n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpoxf5ejdk_test.go:49: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpoxf5ejdk_test.go:49:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpoxf5ejdk_test.go:49: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpoxf5ejdk_test.go:49:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    for _, num := range nums {\n        result\
    \ += num\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmps1dnl9gi_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmps1dnl9gi_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmps1dnl9gi_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmps1dnl9gi_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmps1dnl9gi_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmps1dnl9gi_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmps1dnl9gi_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, num := range nums {\n        sum += num\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp8g9yxbzd_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp8g9yxbzd_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075500
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here.\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl9edome3_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return nums[0]\n \
    \   }\n    min := nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n\
    \        if nums[i] < min {\n            min = nums[i]\n        }\n        if\
    \ nums[i] > max {\n            max = nums[i]\n        }\n    }\n    return min\
    \ + minSubArraySum(nums[1 : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc00011bd08?, 0x0?, 0x0?})\n\
    \t/tmp/tmp2dz0mp1s_test.go:18 +0x4f\ncommand-line-arguments_test.minSubArraySum({0xc00011bd00?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc00011bcf8?,\
    \ 0x4?, 0x5?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc0000784f0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp2dz0mp1s_test.go:40 +0xb4\ntesting.tRunner(0xc0001031e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    sum := 0\n    for _, num := range nums {\n        sum += num\n\
    \        if sum < min {\n            min = sum\n        }\n    }\n    return min\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpfqen7g38_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpfqen7g38_test.go:55:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpfqen7g38_test.go:55: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpfqen7g38_test.go:55:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpfqen7g38_test.go:55: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    min := nums[0]\n    for _, num := range nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n \
    \ candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp613mv_h8_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp613mv_h8_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp613mv_h8_test.go:51: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp613mv_h8_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp613mv_h8_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        min = min(v, min+v)\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ei82j4__test.go:20:12: v declared but not used

    /tmp/tmp5ei82j4__test.go:21:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    n := len(nums)\n    if n < 2 {\n        return nums[0]\n \
    \   }\n    min := nums[0]\n    max := nums[0]\n    for i := 1; i < n; i++ {\n\
    \        if nums[i] < min {\n            min = nums[i]\n        }\n        if\
    \ nums[i] > max {\n            max = nums[i]\n        }\n    }\n    return min\
    \ + minSubArraySum(nums[1 : n-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: index out of\
    \ range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range\
    \ [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc00011bd08?, 0x0?, 0x0?})\n\
    \t/tmp/tmp2dz0mp1s_test.go:18 +0x4f\ncommand-line-arguments_test.minSubArraySum({0xc00011bd00?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc00011bcf8?,\
    \ 0x4?, 0x5?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.minSubArraySum({0xc0000784f0?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp2dz0mp1s_test.go:30 +0x93\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp2dz0mp1s_test.go:40 +0xb4\ntesting.tRunner(0xc0001031e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    max := nums[0]\n    for _, n := range nums[1:] {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    return min + minSubArraySum(nums[1 : len(nums)-1])\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000160000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc00011bc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmp9s0w8vhf_test.go:29 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc00011bc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmp9s0w8vhf_test.go:29 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmp9s0w8vhf_test.go:40 +0x112\ntesting.tRunner(0xc0001031e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums[1:] {\n   \
    \     if n < min {\n            min = n\n        }\n        if n > max {\n   \
    \         max = n\n        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmphspyaeem_test.go:59: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmphspyaeem_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmphspyaeem_test.go:59: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmphspyaeem_test.go:59:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmphspyaeem_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmphspyaeem_test.go:59: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmphspyaeem_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmphspyaeem_test.go:59: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmphspyaeem_test.go:59:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmphspyaeem_test.go:59: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmphspyaeem_test.go:59:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmphspyaeem_test.go:59: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1 : len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc000109c70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpl64k5407_test.go:31 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc000109c68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpl64k5407_test.go:31 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpl64k5407_test.go:42 +0x112\ntesting.tRunner(0xc00011b040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    for _, v := range nums {\n        if v < min {\n           \
    \ min = v\n        }\n    }\n    \n    for _, v := range nums {\n        if v\
    \ == min {\n            min += v\n        }\n    }\n    \n    return min\n}\n\n\
    func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpgp7twc6a_test.go:60: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpgp7twc6a_test.go:60:\
    \ expected '%!s(int=-14)', got '%!s(int=-20)'\n    --- FAIL: TestMinsubarraysum/test_num__3\
    \ (0.00s)\n        tmpgp7twc6a_test.go:60: expected '%!s(int=-9999999999999999)',\
    \ got '%!s(int=-19999999999999998)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpgp7twc6a_test.go:60: expected '%!s(int=-6)', got '%!s(int=-10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpgp7twc6a_test.go:60:\
    \ expected '%!s(int=-6)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpgp7twc6a_test.go:60: expected '%!s(int=3)', got '%!s(int=6)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpgp7twc6a_test.go:60:\
    \ expected '%!s(int=-33)', got '%!s(int=-66)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmpgp7twc6a_test.go:60: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmpgp7twc6a_test.go:60:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpgp7twc6a_test.go:60: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    sum := nums[0]\n\
    \    for _, v := range nums[1:] {\n        sum += v\n    }\n    return sum\n}\n\
    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n\
    \     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4kv5wu3l_test.go:50: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp4kv5wu3l_test.go:50:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4kv5wu3l_test.go:50: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4kv5wu3l_test.go:50:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4kv5wu3l_test.go:50: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4kv5wu3l_test.go:50:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp4kv5wu3l_test.go:50: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, v := range nums[1:] {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpwoxwgdug_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpwoxwgdug_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpwoxwgdug_test.go:43 +0x112\ntesting.tRunner(0xc0000d04e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here.\n    sum := 0\n    for _, v := range\
    \ nums {\n        sum += v\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp4elha9wd_test.go:48: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp4elha9wd_test.go:48:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp4elha9wd_test.go:48: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp4elha9wd_test.go:48:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp4elha9wd_test.go:48: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp4elha9wd_test.go:48:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp4elha9wd_test.go:48: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums[1:] {\n   \
    \     if n > max {\n            max = n\n        }\n        if n < min {\n   \
    \         min = n\n        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp2pusbqzn_test.go:59: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp2pusbqzn_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp2pusbqzn_test.go:59: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp2pusbqzn_test.go:59:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp2pusbqzn_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp2pusbqzn_test.go:59: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp2pusbqzn_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp2pusbqzn_test.go:59: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp2pusbqzn_test.go:59:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp2pusbqzn_test.go:59: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp2pusbqzn_test.go:59:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp2pusbqzn_test.go:59: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    min := nums[0]\n    for _, num := range nums\
    \ {\n        sum += num\n        if sum < min {\n            min = sum\n     \
    \   }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n \
    \ candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp613mv_h8_test.go:51: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp613mv_h8_test.go:51:\
    \ expected '%!s(int=-6)', got '%!s(int=94)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp613mv_h8_test.go:51: expected '%!s(int=3)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp613mv_h8_test.go:51:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp613mv_h8_test.go:51: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1:])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmpp1f7ycap_test.go:58: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmpp1f7ycap_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-9)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmpp1f7ycap_test.go:58: expected '%!s(int=-14)', got '%!s(int=-50)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmpp1f7ycap_test.go:58:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpp1f7ycap_test.go:58: expected '%!s(int=-6)', got '%!s(int=-25)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpp1f7ycap_test.go:58:\
    \ expected '%!s(int=-6)', got '%!s(int=-30)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmpp1f7ycap_test.go:58: expected '%!s(int=3)', got '%!s(int=19)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmpp1f7ycap_test.go:58:\
    \ expected '%!s(int=-33)', got '%!s(int=-74)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmpp1f7ycap_test.go:58: expected '%!s(int=-1)', got '%!s(int=-2)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        min = min(v, min+v)\n    }\n    return\
    \ min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5ei82j4__test.go:20:12: v declared but not used

    /tmp/tmp5ei82j4__test.go:21:15: invalid operation: cannot call non-function min
    (variable of type int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := 0\n    for _, v := range nums {\n        result\
    \ += v\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1kmt3bx2_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp1kmt3bx2_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1kmt3bx2_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1kmt3bx2_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1kmt3bx2_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1kmt3bx2_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1kmt3bx2_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, n := range nums {\n        if n < min {\n            min = n\n   \
    \     }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpqdkj5hs0_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpqdkj5hs0_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpqdkj5hs0_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpqdkj5hs0_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, v := range nums[1:] {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpwoxwgdug_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpwoxwgdug_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpwoxwgdug_test.go:43 +0x112\ntesting.tRunner(0xc0000d04e0, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, num := range nums[1:] {\n \
    \       if num > max {\n            max = num\n        }\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpjps77sr0_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpjps77sr0_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpjps77sr0_test.go:43 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, n := range nums {\n       \
    \ if n > max {\n            max = n\n        }\n        if n < min {\n       \
    \     min = n\n        }\n    }\n    \n    return min + max\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp1dkn_paz_test.go:59: expected '%!s(int=1)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmp1dkn_paz_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=-4)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmp1dkn_paz_test.go:59: expected '%!s(int=-14)', got '%!s(int=-8)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmp1dkn_paz_test.go:59:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp1dkn_paz_test.go:59:\
    \ expected '%!s(int=0)', got '%!s(int=1000000)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp1dkn_paz_test.go:59: expected '%!s(int=-6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp1dkn_paz_test.go:59:\
    \ expected '%!s(int=-6)', got '%!s(int=95)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp1dkn_paz_test.go:59: expected '%!s(int=3)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp1dkn_paz_test.go:59:\
    \ expected '%!s(int=-33)', got '%!s(int=67)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmp1dkn_paz_test.go:59: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmp1dkn_paz_test.go:59:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp1dkn_paz_test.go:59: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := nums[0]\n    for _, num := range nums {\n        sum\
    \ += num\n    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n\
    \  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=1)', got '%!s(int=18)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__1 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=-7)'\n    --- FAIL: TestMinsubarraysum/test_num__2\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=-14)', got '%!s(int=-15)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__3 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=-9999999999999999)', got '%!s(int=-19999999999999998)'\n \
    \   --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=-6)', got '%!s(int=-2)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=199)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=3)', got '%!s(int=59)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=196)'\n    --- FAIL: TestMinsubarraysum/test_num__9\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=-10)', got '%!s(int=-20)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__10 (0.00s)\n        tmph48t76bj_test.go:47:\
    \ expected '%!s(int=7)', got '%!s(int=14)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmph48t76bj_test.go:47: expected '%!s(int=-1)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, v := range nums[1:] {\n   \
    \     if v < min {\n            min = v\n        }\n        if v > max {\n   \
    \         max = v\n        }\n    }\n    \n    sum := 0\n    for _, v := range\
    \ nums {\n        sum += v\n        if sum < min {\n            min = sum\n  \
    \      }\n        if sum > max {\n            max = sum\n        }\n    }\n  \
    \  \n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__6\
    \ (0.00s)\n        tmpymwd8joy_test.go:70: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, n := range nums {\n        if n <\
    \ min {\n            min = n\n        }\n        if n > max {\n            max\
    \ = n\n        }\n    }\n    \n    sum := 0\n    for _, n := range nums {\n  \
    \      if n == min {\n            sum += n\n        }\n    }\n    return sum\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpuxioal0s_test.go:64: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpuxioal0s_test.go:64:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpuxioal0s_test.go:64: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpuxioal0s_test.go:64:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm64fbgz8_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n\n    min :=\
    \ nums[0]\n    for _, v := range nums[1:] {\n        if v < min {\n          \
    \  min = v\n        }\n    }\n\n    return min\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpvkfk03t0_test.go:54: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpvkfk03t0_test.go:54:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpvkfk03t0_test.go:54: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpvkfk03t0_test.go:54:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075499
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums {\n      \
    \  result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpra4qcjpk_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075499
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, v := range nums[1:] {\n        if v < min {\n            min = v\n\
    \        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpx6vqh0y8_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpx6vqh0y8_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075501
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    \n    for _, num := range nums[1:] {\n \
    \       if num > max {\n            max = num\n        }\n        if num < min\
    \ {\n            min = num\n        }\n    }\n    \n    return min + minSubArraySum(nums[1\
    \ : len(nums)-1])\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate :=\
    \ minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpjps77sr0_test.go:32 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpjps77sr0_test.go:32 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpjps77sr0_test.go:43 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    \n    min\
    \ := nums[0]\n    max := nums[0]\n    for _, v := range nums[1:] {\n        if\
    \ v < min {\n            min = v\n        }\n        if v > max {\n          \
    \  max = v\n        }\n    }\n    \n    return min + minSubArraySum(nums[1 : len(nums)-1])\n\
    }\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [1:0] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [1:0]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc00014e000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc000109c70?, 0x4?, 0x5?})\n\
    \t/tmp/tmpl64k5407_test.go:31 +0x98\ncommand-line-arguments_test.minSubArraySum({0xc000109c68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpl64k5407_test.go:31 +0x7c\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpl64k5407_test.go:42 +0x112\ntesting.tRunner(0xc00011b040, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075502
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    max := nums[0]\n    for _, v := range nums[1:] {\n        if v < min {\n\
    \            min = v\n        }\n        if v > max {\n            max = v\n \
    \       }\n    }\n    return min + minSubArraySum(nums[2:])\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.minSubArraySum({0xc0000afc78?, 0x4?, 0x4?})\n\
    \t/tmp/tmpsm6hevgr_test.go:29 +0xaf\ncommand-line-arguments_test.minSubArraySum({0xc0000afc68?,\
    \ 0x0?, 0x0?})\n\t/tmp/tmpsm6hevgr_test.go:29 +0x90\ncommand-line-arguments_test.TestMinsubarraysum(0x0?)\n\
    \t/tmp/tmpsm6hevgr_test.go:40 +0x112\ntesting.tRunner(0xc0000da340, 0x528f48)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075498
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    for _, num := range nums[1:] {\n        if num < min {\n            min =\
    \ num\n        }\n    }\n    return min\n}\n\nfunc TestMinsubarraysum(t *testing.T)\
    \ {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}),\
    \ expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected:\
    \ -14 },\n     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__1\
    \ (0.00s)\n        tmpe9p95sjq_test.go:52: expected '%!s(int=-6)', got '%!s(int=-3)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__2 (0.00s)\n        tmpe9p95sjq_test.go:52:\
    \ expected '%!s(int=-14)', got '%!s(int=-10)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmpe9p95sjq_test.go:52: expected '%!s(int=-6)', got '%!s(int=-5)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmpe9p95sjq_test.go:52:\
    \ expected '%!s(int=-6)', got '%!s(int=-5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075503
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums[1:] {\n  \
    \      result = min(result, num+result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv_t8q65q_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 2
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    result := nums[0]\n    for _, num := range nums {\n      \
    \  result = min(result, num + result)\n    }\n    return result\n}\n\nfunc TestMinsubarraysum(t\
    \ *testing.T) {\n  candidate := minSubArraySum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{2, 3, 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1,\
    \ -2, -3}), expected: -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}),\
    \ expected: -14 },\n     { actual: candidate([]int{-9999999999999999}), expected:\
    \ -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected:\
    \ 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n\
    \     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n \
    \    { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n     { actual:\
    \ candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     { actual:\
    \ candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsavs0rbd_test.go:18:18: undefined: min

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075497
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here.\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpl9edome3_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    // Write your code here\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nfunc TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
    \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
    \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
    \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
    \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
    \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
    \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n \
    \    { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n \
    \    { actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
    \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpurwrl6by_test.go:271:6: expected ''('', found TestMinsubarraysum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075495
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
- exit_code: 1
  program: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1,\
    \ 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums\
    \ []int) int {\n    sum := 0\n    for _, v := range nums {\n        sum += v\n\
    \    }\n    return sum\n}\n\nfunc TestMinsubarraysum(t *testing.T) {\n  candidate\
    \ := minSubArraySum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3,\
    \ 4, 1, 2, 4}), expected: 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected:\
    \ -6 },\n     { actual: candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n\
    \     { actual: candidate([]int{-9999999999999999}), expected: -9999999999999999\
    \ },\n     { actual: candidate([]int{0, 10, 20, 1000000}), expected: 0 },\n  \
    \   { actual: candidate([]int{-1, -2, -3, 10, -5}), expected: -6 },\n     { actual:\
    \ candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6 },\n     { actual: candidate([]int{10,\
    \ 11, 13, 8, 3, 4}), expected: 3 },\n     { actual: candidate([]int{100, -33,\
    \ 32, -1, 0, -2}), expected: -33 },\n     { actual: candidate([]int{-10}), expected:\
    \ -10 },\n     { actual: candidate([]int{7}), expected: 7 },\n     { actual: candidate([]int{1,\
    \ -1}), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinsubarraysum (0.00s)\n    --- FAIL: TestMinsubarraysum/test_num__0\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=1)', got '%!s(int=16)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__4 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=0)', got '%!s(int=1000030)'\n    --- FAIL: TestMinsubarraysum/test_num__5\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-6)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__6 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-6)', got '%!s(int=99)'\n    --- FAIL: TestMinsubarraysum/test_num__7\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=3)', got '%!s(int=49)'\n\
    \    --- FAIL: TestMinsubarraysum/test_num__8 (0.00s)\n        tmp9z8owsdf_test.go:47:\
    \ expected '%!s(int=-33)', got '%!s(int=96)'\n    --- FAIL: TestMinsubarraysum/test_num__11\
    \ (0.00s)\n        tmp9z8owsdf_test.go:47: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075496
