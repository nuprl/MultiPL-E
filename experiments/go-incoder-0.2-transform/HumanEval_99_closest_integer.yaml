name: HumanEval_99_closest_integer
language: go_test.go
prompt: "package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Create a function that takes a value (string) representing a number\n//\
  \ and returns the closest integer to it. If the number is equidistant\n// from two\
  \ integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\"\
  )\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from\
  \ zero means that if the given number is equidistant\n// from two integers, the\
  \ one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunc closest_integer(value string) int {\n"
tests: "func TestClosest_Integer(t *testing.T) {\n  candidate := closest_integer\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"10\"), expected: 10 },\n     {\
  \ actual: candidate(\"14.5\"), expected: 15 },\n     { actual: candidate(\"-15.5\"\
  ), expected: -16 },\n     { actual: candidate(\"15.3\"), expected: 15 },\n     {\
  \ actual: candidate(\"0\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    num, err := strconv.Atoi(value)\n    if err != nil {\n        panic(err)\n\
    \    }\n    diff := num - closest_integer(value)\n    if diff < 0 {\n        return\
    \ num - diff\n    }\n    return num + diff\n}\n", "    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n\n    // Find the closest integer\
    \ to the given number\n    diff := num - int(num)\n    if diff < 0 {\n       \
    \ diff *= -1\n    }\n\n    // Find the difference between the given number and\
    \ the closest integer\n    diff += int(num)\n\n    // Return the closest integer\n\
    \    return int(diff)\n}\n", "    num := 0\n    sign := 1\n    if value[0] ==\
    \ '-' {\n        sign = -1\n        value := value[1:]\n    }\n    if value[0]\
    \ == '+' {\n        value := value[1:]\n    }\n    for _, c := range value {\n\
    \        num, err := strconv.Atoi(c)\n        if err != nil {\n            fmt.Println(err)\n\
    \        }\n        if num == 0 {\n            continue\n        }\n        if\
    \ num > 0 {\n            if num > num+sign {\n                return num + sign\n\
    \            }\n            return num\n        }\n        if num < 0 {\n    \
    \        if num < num-sign {\n                return num - sign\n            }\n\
    \            return num\n        }\n    }\n    return 0\n}\n", "    value := strings.TrimSpace(value)\n\
    \    if value == \"\" {\n        return 0\n    }\n    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        return -1\n    }\n    if num < 0 {\n        return\
    \ -1\n    }\n    diff := abs(num - int(num))\n    if diff < 1 {\n        return\
    \ int(num)\n    }\n    if diff < 2 {\n        return int(num) + 1\n    }\n   \
    \ if diff < 3 {\n        return int(num) - 1\n    }\n    if diff < 4 {\n     \
    \   return int(num) + 1\n    }\n    if diff < 5 {\n        return int(num) - 1\n\
    \    }\n    if diff < 6 {\n        return int(num) + 1\n    }\n    if diff < 7\
    \ {\n        return int(num) - 1\n    }\n    if diff < 8 {\n        return int(num)\
    \ + 1\n    }\n    if diff < 9 {\n        return int(num) - 1\n    }\n    if diff\
    \ < 10 {\n        return int(num) + 1\n    }\n    if diff < 11 {\n        return\
    \ int(num) - 1\n    }\n    if diff < 12 {\n        return int(num) + 1\n    }\n\
    \    if diff < 13 {\n        return int(num) - 1\n    }\n    if diff < 14 {\n\
    \        return int(num) + 1\n    }\n    if diff < 15 {\n        return int(num)\
    \ - 1\n    }\n    if diff < 16 {\n        return int(num) + 1\n    }\n    if diff\
    \ < 17 {\n        return int(num) - 1\n    }\n    if diff < 18 {\n        return\
    \ int(num) + 1\n    }\n    if diff < 19 {\n        return int(num) - 1\n    }\n\
    \    if diff < 20 {\n        return int(num) + 1\n    }\n    if diff < 21 {\n\
    \        return int(num) - 1\n    }\n    if diff < 22 {\n        return int(num)\
    \ + 1\n    }\n    if diff < 23 {\n        return int(num) - 1\n    }\n    if diff\
    \ < 24 {\n        return int(num) + 1\n    }\n    if diff < 25 {\n        return\
    \ int(num) - 1\n    }\n    if diff < 26 {\n        return int(num) + 1\n    }\n\
    \    if diff < 27 {\n        return int(num) - 1\n    }\n    if diff < 28 {\n\
    \        return int(num) + 1\n    }\n    if diff < 29 {\n        return int(num)\
    \ - 1\n    }\n    if diff < 30 {\n        return int(num) + 1\n    }\n    if diff\
    \ < 31 {\n        return int(num) - 1\n    }\n    if diff < 32 {\n        return\
    \ int(num) + 1\n    }\n    if diff < 33 {\n        return int(num) - 1\n    }\n\
    \    if diff < 34 {\n        return int(num) + 1\n    }\n    if diff < 35 {\n\
    \        return int(num) - 1\n    }\n    if diff ", "    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n    diff := num - math.Floor(num)\n\
    \    if diff < 0 {\n        diff *= -1\n    }\n    return int(math.Floor(num)\
    \ + diff)\n}\n", "    num, err := strconv.Atoi(value)\n    if err != nil {\n \
    \       panic(err)\n    }\n    diff := num - closest_integer(value)\n    if diff\
    \ < 0 {\n        diff *= -1\n    }\n    return num + diff\n}\n", "    num, err\
    \ := strconv.Atoi(value)\n    if err != nil {\n        panic(err)\n    }\n   \
    \ diff := num - closest_integer(value)\n    if diff < 0 {\n        diff *= -1\n\
    \    }\n    return num + diff\n}\n", "    num := 0\n    sign := 1\n    if value[0]\
    \ == '-' {\n        sign = -1\n        value := value[1:]\n    }\n    if value[0]\
    \ == '+' {\n        value := value[1:]\n    }\n    for _, c := range value {\n\
    \        num <<= 1\n        if c == '.' {\n            continue\n        }\n \
    \       num |= int(c) - '0'\n    }\n    if num == 0 {\n        return sign * -1\n\
    \    }\n    if num > 0 {\n        return sign * num\n    }\n    return sign *\
    \ (num + 1)\n}\n", "    value := strings.TrimSpace(value)\n    if value == \"\"\
    \ {\n        return 0\n    }\n    parts := strings.Split(value, \".\")\n    if\
    \ len(parts) == 1 {\n        return int(parts[0])\n    }\n    integerPart := parts[0]\n\
    \    decimalPart := parts[1]\n    integerPartInt, _ := strconv.Atoi(integerPart)\n\
    \    decimalPartInt, _ := strconv.Atoi(decimalPart)\n    if integerPartInt ==\
    \ decimalPartInt {\n        return integerPartInt\n    }\n    if decimalPartInt\
    \ > integerPartInt {\n        return integerPartInt + 1\n    }\n    return integerPartInt\
    \ - 1\n}\n", "    num, err := strconv.Atoi(value)\n    if err != nil {\n     \
    \   panic(err)\n    }\n    if num < 0 {\n        panic(\"negative number\")\n\
    \    }\n    diff := num - math.Floor(num)\n    if diff < 0 {\n        diff +=\
    \ num\n    }\n    return diff\n}\n", "    i, err := strconv.Atoi(value)\n    if\
    \ err != nil {\n        panic(err)\n    }\n    diff := i - i%10\n    if diff <\
    \ 0 {\n        diff += 10\n    }\n    return i%10 + diff\n}\n", "    num, err\
    \ := strconv.Atoi(value)\n    if err != nil {\n        panic(err)\n    }\n   \
    \ diff := num - math.Floor(num)\n    if diff < 0 {\n        diff *= -1\n    }\n\
    \    return int(math.Floor(num) + diff)\n}\n", "    value := strings.TrimSpace(value)\n\
    \    num, err := strconv.Atoi(value)\n    if err != nil {\n        panic(err)\n\
    \    }\n    diff := abs(num - int(num))\n    if diff < 1 {\n        return int(num)\n\
    \    }\n    if diff < 2 {\n        return int(num)\n    }\n    if diff < 3 {\n\
    \        return int(num) + 1\n    }\n    if diff < 4 {\n        return int(num)\
    \ - 1\n    }\n    if diff < 5 {\n        return int(num) + 1\n    }\n    if diff\
    \ < 6 {\n        return int(num) - 1\n    }\n    if diff < 7 {\n        return\
    \ int(num) + 1\n    }\n    if diff < 8 {\n        return int(num) - 1\n    }\n\
    \    if diff < 9 {\n        return int(num) + 1\n    }\n    if diff < 10 {\n \
    \       return int(num) - 1\n    }\n    if diff < 11 {\n        return int(num)\
    \ + 1\n    }\n    if diff < 12 {\n        return int(num) - 1\n    }\n    if diff\
    \ < 13 {\n        return int(num) + 1\n    }\n    if diff < 14 {\n        return\
    \ int(num) - 1\n    }\n    if diff < 15 {\n        return int(num) + 1\n    }\n\
    \    if diff < 16 {\n        return int(num) - 1\n    }\n    if diff < 17 {\n\
    \        return int(num) + 1\n    }\n    if diff < 18 {\n        return int(num)\
    \ - 1\n    }\n    if diff < 19 {\n        return int(num) + 1\n    }\n    if diff\
    \ < 20 {\n        return int(num) - 1\n    }\n    if diff < 21 {\n        return\
    \ int(num) + 1\n    }\n    if diff < 22 {\n        return int(num) - 1\n    }\n\
    \    if diff < 23 {\n        return int(num) + 1\n    }\n    if diff < 24 {\n\
    \        return int(num) - 1\n    }\n    if diff < 25 {\n        return int(num)\
    \ + 1\n    }\n    if diff < 26 {\n        return int(num) - 1\n    }\n    if diff\
    \ < 27 {\n        return int(num) + 1\n    }\n    if diff < 28 {\n        return\
    \ int(num) - 1\n    }\n    if diff < 29 {\n        return int(num) + 1\n    }\n\
    \    if diff < 30 {\n        return int(num) - 1\n    }\n    if diff < 31 {\n\
    \        return int(num) + 1\n    }\n    if diff < 32 {\n        return int(num)\
    \ - 1\n    }\n    if diff < 33 {\n        return int(num) + 1\n    }\n    if diff\
    \ < 34 {\n        return int(num) - 1\n    }\n    if diff < 35 {\n        return\
    \ int(num) + 1\n    }\n    if diff < 36 {\n        return int(num) - 1\n    }\n\
    \    if diff < 37 {\n", "    num, err := strconv.Atoi(value)\n    if err != nil\
    \ {\n        panic(err)\n    }\n    diff := num - math.Floor(num)\n    if diff\
    \ < 0 {\n        diff *= -1\n    }\n    return num + diff\n}\n", "    value :=\
    \ strings.TrimSpace(value)\n    num, err := strconv.Atoi(value)\n    if err !=\
    \ nil {\n        panic(err)\n    }\n    diff := num - math.Floor(num)\n    if\
    \ diff < 0 {\n        diff *= -1\n    }\n    return num + diff\n}\n", "    //\
    \ Convert string to int\n    num, err := strconv.Atoi(value)\n    if err != nil\
    \ {\n        panic(err)\n    }\n\n    // Find closest integer\n    diff := num\
    \ - int(num)\n    if diff < 0 {\n        diff *= -1\n    }\n\n    // Return closest\
    \ integer\n    return int(num + diff)\n}\n", "    num := 0\n    sign := 1\n  \
    \  if value == \"-\" {\n        sign = -1\n    }\n    for _, c := range value\
    \ {\n        num <<= 1\n        if c == '.' {\n            continue\n        }\n\
    \        num |= int(c)\n    }\n    if num == 0 {\n        return sign * (-1)\n\
    \    }\n    if num > 0 {\n        return sign * (num + 1)\n    }\n    return sign\
    \ * (num - 1)\n}\n", "    // Initialize a variable to hold the closest integer\n\
    \    closestInt := 0\n\n    // Iterate through each character in the string\n\
    \    for _, char := range value {\n        // If the character is a digit, add\
    \ it to the closest integer\n        if char >= '0' && char <= '9' {\n       \
    \     closestInt += int(char - '0')\n        }\n    }\n\n    // If the closest\
    \ integer is equidistant from two integers, round it away\n    // from zero\n\
    \    if closestInt == 0 {\n        closestInt = 1\n    }\n\n    // Return the\
    \ closest integer\n    return closestInt\n}\n", "    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n    if num == 0 {\n        return\
    \ 0\n    }\n    diff := num - math.Floor(num)\n    if diff < 0 {\n        diff\
    \ *= -1\n    }\n    return num + diff\n}\n", "    num, err := strconv.Atoi(value)\n\
    \    if err != nil {\n        panic(err)\n    }\n    diff := abs(num - int(num))\n\
    \    if diff > 1 {\n        return int(num)\n    }\n    if diff < 1 {\n      \
    \  return int(num) + 1\n    }\n    return int(num)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
