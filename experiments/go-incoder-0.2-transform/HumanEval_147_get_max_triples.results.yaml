language: go_test.go
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb38shin9_test.go:276:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074451
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaa0knqf_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaa0knqf_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            for k := 1; k <= j; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp1pzw512y_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp1pzw512y_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp1pzw512y_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] {\n                    count++\n                }\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpaflxcgr2_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpaflxcgr2_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            for k := 1; k <= j; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp1pzw512y_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp1pzw512y_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp1pzw512y_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] + a[j] + a[k] == 3 {\n                    count++\n               \
    \ }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpgo2b4ssb_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpgo2b4ssb_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpiifi9bnl_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpiifi9bnl_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000103520, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    n := 0\n    for i := 0; i < n; i++ {\n        if a[i] >\
    \ 0 {\n            n += 3\n        }\n    }\n    return n\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaafqcefr_test.go:23:5: undefined: sort

    /tmp/tmpaafqcefr_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp4yos0264_test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp4yos0264_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp4yos0264_test.go:53: expected '%!s(int=36)', got '%!s(int=112)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp4yos0264_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=161602)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    \n    max := 0\n    i := 0\n    for j := 0; j < n; j++ {\n       \
    \ for k := 0; k < n; k++ {\n            if i+j+k > max {\n                max\
    \ = i+j+k\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp9lsms3ex_test.go:52: expected '%!s(int=1)', got '%!s(int=8)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp9lsms3ex_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp9lsms3ex_test.go:52: expected '%!s(int=36)', got '%!s(int=18)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp9lsms3ex_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=198)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    i := 0\n    for j := 0; j < n; j++ {\n       \
    \ for k := 0; k < n; k++ {\n            if arr[i]+arr[j]+arr[k] == 3 {\n     \
    \           max++\n            }\n        }\n        i++\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpw1f52mzw_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpw1f52mzw_test.go:52:\
    \ expected '%!s(int=36)', got '%!s(int=4)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpw1f52mzw_test.go:52: expected '%!s(int=53361)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if a[i] + a[j]\
    \ + a[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpfp9lk5b8_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpfp9lk5b8_test.go:43\
    \ +0x43\ntesting.tRunner(0xc000003d40, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < n; i++ {\n       \
    \ if a[i] > max {\n            max = a[i]\n        }\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8vz_0pfe_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] + a[j] + a[k] == 3 {\n                    count++\n               \
    \ }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpgo2b4ssb_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpgo2b4ssb_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var triples int\n    for i := 0; i < n; i++ {\n       \
    \ for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n               \
    \     triples++\n                }\n            }\n        }\n    }\n    return\
    \ triples\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgyokde8h_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if a[i] + a[j] + a[k] == 3 {\n                    count++\n          \
    \      }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpdl_n7jwx_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpdl_n7jwx_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpdl_n7jwx_test.go:53: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpdl_n7jwx_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 1; i <= n; i++\
    \ {\n        for j := i + 1; j <= n; j++ {\n            for k := j + 1; k <= n;\
    \ k++ {\n                if a[i] < a[j] && a[j] < a[k] {\n                   \
    \ count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3r0m6be_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i*i - i + 1\n \
    \               a[j] = j*j - j + 1\n                a[k] = k*k - k + 1\n     \
    \           if a[i] < a[j] && a[j] < a[k] {\n                    return 1\n  \
    \              }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp_n1s861a_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp_n1s861a_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    return i + 1\n                }\n\
    \            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_rybcjou_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmptyv1m440_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmptyv1m440_test.go:42\
    \ +0x43\ntesting.tRunner(0xc00019aea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp7wf4z3vr_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp7wf4z3vr_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := i; j < n; j++ {\n \
    \           for k := j; k < n; k++ {\n                a[i] = i * i - i + 1\n \
    \               a[j] = i * i - j + 1\n                a[k] = i * i - k + 1\n \
    \               if a[i] < a[j] && a[j] < a[k] {\n                    return 1\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpa06qxfk6_test.go:23\
    \ +0x29\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpa06qxfk6_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpiifi9bnl_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpiifi9bnl_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000103520, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    count := 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfx6cielw_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var result int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    result++\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpo7b12xph_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpo7b12xph_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    max := 0\n    for i := 0; i < n; i++ {\n        if a[i]\
    \ > max {\n            max = a[i]\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphkqc7t2d_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var result int\n    for i := 1; i <= n; i++ {\n        for j := 1;\
    \ j <= n; j++ {\n            for k := 1; k <= n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    result++\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpr99ml39r_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpr99ml39r_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmptyv1m440_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmptyv1m440_test.go:42\
    \ +0x43\ntesting.tRunner(0xc00019aea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 1; i <= n; i++ {\n        for j :=\
    \ i + 1; j <= n; j++ {\n            for k := j + 1; k <= n; k++ {\n          \
    \      if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpqrd6zh96_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpqrd6zh96_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000119040, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++ {\n   \
    \     if a[i] > 0 {\n            count++\n            for j := i + 1; j < n; j++\
    \ {\n                if a[j] > 0 {\n                    count++\n            \
    \        for k := j + 1; k < n; k++ {\n                        if a[k] > 0 {\n\
    \                            count++\n                            if a[i] - a[j]\
    \ - a[k] == 3 {\n                                return count\n              \
    \              }\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptyb5szqe_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n      \
    \          }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpmkmqzw2e_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpmkmqzw2e_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    max := 0\n    for i := 0; i < n; i++ {\n        if a[i]\
    \ > max {\n            max = a[i]\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphkqc7t2d_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    \n    var result int\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    result++\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpxkxvkxme_test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpxkxvkxme_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpxkxvkxme_test.go:53: expected '%!s(int=36)', got '%!s(int=112)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpxkxvkxme_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=161602)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    max += get_max_triples_helper(arr, n, 0, 0, 0)\n\
    \    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6z_i69c__test.go:24:12: undefined: get_max_triples_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n     \
    \   for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n \
    \               if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxu0fta8_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n     \
    \   for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n \
    \               if a[i] + a[j] + a[k] == 3 {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppqc8mtc2_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmptyv1m440_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmptyv1m440_test.go:42\
    \ +0x43\ntesting.tRunner(0xc00019aea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for _, i := range a {\n        for\
    \ _, j := range a {\n            for _, k := range a {\n                if i+j+k\
    \ == i*i*i {\n                    max++\n                }\n            }\n  \
    \      }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt7dgxyh8_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    n := len(a)\n    var count int\n    for i := 0;\
    \ i < n; i++ {\n        if i > 0 && i < n-1 && i+1 < n {\n            if a[i-1]\
    \ + a[i+1] + a[i] % 3 == 0 {\n                count++\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0t2_7k9l_test.go:23:5: undefined: sort

    /tmp/tmp0t2_7k9l_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < len(a); i++\
    \ {\n        if i+1 < len(a) && a[i]+a[i+1] == a[i+2] {\n            count++\n\
    \        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplfdgw25n_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpiifi9bnl_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpiifi9bnl_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000103520, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 1; i <= n; i++ {\n        for j :=\
    \ i + 1; j <= n; j++ {\n            for k := j + 1; k <= n; k++ {\n          \
    \      if a[i] + a[j] + a[k] == 3 {\n                    count++\n           \
    \     }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp8ucvd_vq_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp8ucvd_vq_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000199040, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    n := 0\n    for i := 0; i < len(a); i++ {\n        if a[i]\
    \ > 0 {\n            n += 1\n            if a[i] > a[i+1] {\n                n\
    \ += 2\n            }\n        }\n    }\n    return n\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnk6pavhi_test.go:23:5: undefined: sort

    /tmp/tmpnk6pavhi_test.go:24:7: no new variables on left side of :=

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var result int\n    for i := 1; i <= n; i++\
    \ {\n        if a[i] > 0 {\n            result += a[i] - 1\n        }\n    }\n\
    \    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp86vb68td_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwkrmk6wy_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return i + 1\n                }\n            }\n    \
    \    }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n \
    \ candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpmhht0kk0_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpmhht0kk0_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp_ccdy5i7_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp_ccdy5i7_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k]\
    \ == 3 {\n                    return 1\n                }\n            }\n   \
    \     }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpy9r4vix2_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpy9r4vix2_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpy9r4vix2_test.go:51: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpy9r4vix2_test.go:51:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i*i - i + 1 //\
    \ a[i] = i * i - i + 1 \n            }\n        }\n    }\n    for i := 1; i <=\
    \ n; i++ {\n        for j := 1; j <= n; j++ {\n            for k := 1; k <= n;\
    \ k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n    \
    \                return 1\n                }\n            }\n        }\n    }\n\
    \    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmppdx05ftv_test.go:23\
    \ +0x76\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmppdx05ftv_test.go:46\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++ {\n   \
    \     for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt25qlh6g_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaa0knqf_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] ==\
    \ 3 {\n                    return 1\n                }\n            }\n      \
    \  }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmphmktg1fd_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmphmktg1fd_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmphmktg1fd_test.go:51: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmphmktg1fd_test.go:51:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    result := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    result++\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp8lknu4ao_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp8lknu4ao_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    max++\n                }\n       \
    \     }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpustkli3s_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpustkli3s_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000199040, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    i, j, k := 0, 0, 0\n    for i := 0; i < n; i++\
    \ {\n        if arr[i] > max {\n            max = arr[i]\n            i, j, k\
    \ = i, i, i\n        }\n        if arr[i] > arr[j] && arr[i] > arr[k] {\n    \
    \        i, j, k = i, j, k\n        }\n    }\n    return k\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptk78edv7_test.go:24:5: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := i; j < n; j++ {\n \
    \           for k := j; k < n; k++ {\n                a[i] = i * i - i + 1\n \
    \               a[j] = i * i - j + 1\n                a[k] = i * i - k + 1\n \
    \               if a[i] > a[j] && a[i] > a[k] {\n                    return 1\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmps1pkzg38_test.go:23\
    \ +0x29\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmps1pkzg38_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] {\n                    count++\n                }\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpaflxcgr2_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpaflxcgr2_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    var result int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    result++\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp_h95vvvb_test.go:52: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp_h95vvvb_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp_h95vvvb_test.go:52: expected '%!s(int=36)', got '%!s(int=112)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp_h95vvvb_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=161602)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] < a[j] && a[i] < a[k] {\n                    return 1\n\
    \                }\n                if a[j] < a[i] && a[j] < a[k] {\n        \
    \            return 1\n                }\n                if a[k] < a[i] && a[k]\
    \ < a[j] {\n                    return 1\n                }\n            }\n \
    \       }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmplj6tb2rl_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmplj6tb2rl_test.go:48\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++ {\n   \
    \     for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt25qlh6g_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for _, v := range a {\n \
    \       if v%3 != 0 {\n            continue\n        }\n        for _, v2 := range\
    \ a {\n            if v2%3 != 0 {\n                continue\n            }\n \
    \           for _, v3 := range a {\n                if v3%3 != 0 {\n         \
    \           continue\n                }\n                count++\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrlrmfj3_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074456
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n     \
    \   if a[i] > 0 {\n            count += 3\n            count += a[i] - a[i] -\
    \ a[i]\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzcks5udi_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074456
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n        \
    \            count++\n                }\n            }\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxclalc4u_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] < a[j] && a[i] < a[k] {\n                    return 1\n\
    \                } else if a[j] < a[k] {\n                    return 2\n     \
    \           } else {\n                    return 3\n                }\n      \
    \      }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpq28xdjya_test.go:23\
    \ +0x30\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpq28xdjya_test.go:46\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] > 0 {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmponh536cv_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    result := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    result++\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp8lknu4ao_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp8lknu4ao_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074456
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    max := 0\n    for i := 0; i < n; i++ {\n        if a[i]\
    \ > max {\n            max = a[i]\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphkqc7t2d_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k < n; k++ {\n                if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k] {\n                    return 1\n                }\n \
    \           }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpnrmy9uln_test.go:51: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpnrmy9uln_test.go:51:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpnrmy9uln_test.go:51: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] == 3\
    \ {\n                    return 1\n                }\n            }\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc0001ce000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmptyv1m440_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmptyv1m440_test.go:42\
    \ +0x43\ntesting.tRunner(0xc00019aea0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if a[i] + a[j]\
    \ + a[k] == 3 {\n                    max++\n                }\n            }\n\
    \        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpg5610k3w_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpg5610k3w_test.go:43\
    \ +0x43\ntesting.tRunner(0xc000103380, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    i := 0\n    for i < n {\n        j := i + 1\n\
    \        for j < n {\n            k := j + 1\n            for k < n {\n      \
    \          if arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n   \
    \             }\n                k++\n            }\n            j++\n       \
    \ }\n        i++\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp51qjeabo_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp51qjeabo_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp51qjeabo_test.go:58: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp51qjeabo_test.go:58:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            for k := 1; k <= j; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp1pzw512y_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp1pzw512y_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp1pzw512y_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k < n; k++ {\n                if a[i] < a[j] && a[i]\
    \ < a[k] && a[j] < a[k] {\n                    return 1\n                }\n \
    \           }\n        }\n    }\n    return 0\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n\
    )\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_a8qyvkm_test.go:34:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] ==\
    \ 3 {\n                    return 1\n                }\n            }\n      \
    \  }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmphmktg1fd_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmphmktg1fd_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmphmktg1fd_test.go:51: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmphmktg1fd_test.go:51:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= i; j++ {\n\
    \            for k := 1; k <= j; k++ {\n                if i*i + j*j + k*k ==\
    \ i*i*k*k {\n                    a = append(a, i*i*k*k)\n                }\n \
    \           }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp3l46yktx_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp3l46yktx_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp3l46yktx_test.go:48: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp3l46yktx_test.go:48:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    var count int = 0\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if arr[i] + arr[j] + arr[k] == 3 {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpxisjtsqt_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpxisjtsqt_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpxisjtsqt_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpxisjtsqt_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k] {\n                    return 1\n                }\n        \
    \    }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmplq3jta32_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmplq3jta32_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 1; i <= n; i++ {\n        for j :=\
    \ 1; j <= n; j++ {\n            for k := 1; k <= n; k++ {\n                if\
    \ i+j+k == 0 {\n                    continue\n                }\n            \
    \    if a[i] < a[j] || a[i] < a[k] || a[j] < a[k] {\n                    continue\n\
    \                }\n                if a[i] < a[j]+a[k] {\n                  \
    \  count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpuawzd2r9_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpuawzd2r9_test.go:50\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var result int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    result++\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpo7b12xph_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpo7b12xph_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    max := 0\n    for i := 0; i < len(a); i++ {\n  \
    \      if a[i] > max {\n            max = a[i]\n        }\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqijxfh9k_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074457
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj9er97ix_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    var count int = 0\n    for _, v := range a {\n        for _, v2 :=\
    \ range a {\n            if v+v2 > 3 {\n                count++\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp7dwxum09_test.go:50: expected '%!s(int=1)', got '%!s(int=24)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp7dwxum09_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=35)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp7dwxum09_test.go:50: expected '%!s(int=36)', got '%!s(int=99)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp7dwxum09_test.go:50:\
    \ expected '%!s(int=53361)', got '%!s(int=9999)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k] {\n                    return 1\n                }\n        \
    \    }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmplq3jta32_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmplq3jta32_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < len(a);\
    \ i++ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1;\
    \ k < len(a); k++ {\n                if a[i] < a[j] && a[i] < a[k] && a[j] < a[k]\
    \ {\n                    count++\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaaa0knqf_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := i; j <= n; j++ {\n\
    \            for k := j; k <= n; k++ {\n                if i+j+k == i*i*i {\n\
    \                    a = append(a, i*i*i)\n                }\n            }\n\
    \        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpk6biflkz_test.go:48: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpk6biflkz_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpk6biflkz_test.go:48: expected '%!s(int=36)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpk6biflkz_test.go:48:\
    \ expected '%!s(int=53361)', got '%!s(int=80)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 1; i <= n; i++ {\n        for j :=\
    \ i + 1; j <= n; j++ {\n            for k := j + 1; k <= n; k++ {\n          \
    \      if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc00014e000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpqrd6zh96_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpqrd6zh96_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000119040, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := i; j < n; j++ {\n \
    \           for k := j; k < n; k++ {\n                a[i] = i * i - i + 1\n \
    \               a[j] = i * i - j + 1\n                a[k] = i * i - k + 1\n \
    \               if a[i] < a[j] && a[j] < a[k] {\n                    return 1\n\
    \                }\n            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpa06qxfk6_test.go:23\
    \ +0x29\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpa06qxfk6_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    max++\n        \
    \        }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmppq13jw3f_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmppq13jw3f_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var result int\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ a[i] + a[j] + a[k] == 3 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpw4bvfc93_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpw4bvfc93_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    \n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    max++\n        \
    \        }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpwuarnqr3_test.go:53: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpwuarnqr3_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpwuarnqr3_test.go:53: expected '%!s(int=36)', got '%!s(int=112)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpwuarnqr3_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=161602)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n   \
    \         for k := 1; k <= n; k++ {\n                if i+j+k == 3*(i+j+k) {\n\
    \                    return len(a)\n                }\n            }\n       \
    \ }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpccoky676_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpccoky676_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpccoky676_test.go:51: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpccoky676_test.go:51:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp_ccdy5i7_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp_ccdy5i7_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwkrmk6wy_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < n; i++ {\n     \
    \   for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n \
    \               if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsxu0fta8_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    max := 0\n    \n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    max++\n   \
    \             }\n            }\n        }\n    }\n    \n    return max\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpl0d4y67v_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpl0d4y67v_test.go:46\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    max++\n        \
    \        }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpphwfjubg_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpphwfjubg_test.go:44\
    \ +0x43\ntesting.tRunner(0xc0001036c0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int = 0\n    for i := 0; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                   \
    \ count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppdvy9eon_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwkrmk6wy_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n          \
    \  for k := 1; k <= n; k++ {\n                if a[i] < a[j] && a[i] < a[k] &&\
    \ a[j] < a[k] {\n                    return 1\n                }\n           \
    \ }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp3xqyckg0_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp3xqyckg0_test.go:42\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    return i + 1\n                }\n\
    \            }\n        }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpctlmtpxq_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    var result int\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if arr[i] + arr[j] + arr[k] == 3 {\n                    result++\n   \
    \             }\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp662zehwq_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp662zehwq_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp662zehwq_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp662zehwq_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp_ccdy5i7_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp_ccdy5i7_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074455
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    var count int = 0\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n       \
    \         if arr[i] + arr[j] + arr[k] == 3 {\n                    count++\n  \
    \              }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpxisjtsqt_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpxisjtsqt_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpxisjtsqt_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpxisjtsqt_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074457
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    \n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if a[i] + a[j] + a[k] == 3 {\n                    count++\n               \
    \ }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpgo6z_x37_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpgo6z_x37_test.go:44\
    \ +0x43\ntesting.tRunner(0xc000103520, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for i := 0; i < len(a); i++\
    \ {\n        for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k\
    \ < len(a); k++ {\n                if a[i] + a[j] + a[k] == 3 {\n            \
    \        count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp841yuveb_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    var count int = 0\n    for _, v := range a {\n \
    \       if v%3 != 0 {\n            continue\n        }\n        for _, v2 := range\
    \ a {\n            if v2%3 != 0 {\n                continue\n            }\n \
    \           for _, v3 := range a {\n                if v3%3 != 0 {\n         \
    \           continue\n                }\n                count++\n           \
    \ }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrlrmfj3_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    i := 0\n    for i < n {\n        if arr[i] > max\
    \ {\n            max = arr[i]\n        }\n        i++\n    }\n    return max\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpiatq1iao_test.go:50: expected '%!s(int=1)', got '%!s(int=13)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpiatq1iao_test.go:50:\
    \ expected '%!s(int=4)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpiatq1iao_test.go:50: expected '%!s(int=36)', got '%!s(int=73)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpiatq1iao_test.go:50:\
    \ expected '%!s(int=53361)', got '%!s(int=9703)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    result := 0\n    for i := 0; i < len(a); i++ {\n\
    \        if a[i] > 0 {\n            result += 3\n        }\n        if a[i] >\
    \ 0 {\n            result += 3\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprww9rbr__test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    sort.Ints(a)\n    \n    var count int\n    for i := 0; i < n; i++ {\n   \
    \     for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] == 3 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpt25qlh6g_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074454
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [100]int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n   \
    \ }\n    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp2tlhs1hz_test.go:52: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp2tlhs1hz_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=16)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp2tlhs1hz_test.go:52: expected '%!s(int=36)', got '%!s(int=112)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp2tlhs1hz_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=161602)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i*i - i + 1)\n\
    \    }\n    sort.Ints(a)\n    \n    var triples int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] == 3 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2p73w4v3_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074458
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] == 3 {\n                    count++\n                }\n     \
    \       }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmp3sfrzqyd_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmp3sfrzqyd_test.go:43\
    \ +0x43\ntesting.tRunner(0xc000103380, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i]+arr[j]+arr[k] == 3 {\n                    max++\n                }\n\
    \            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp6hib7h5c_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp6hib7h5c_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                if i+j+k == i*i*i + j*j*j\
    \ + k*k*k {\n                    a = append(a, i*i*i + j*j*j + k*k*k)\n      \
    \          }\n            }\n        }\n    }\n    return len(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpudbogyv9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpudbogyv9_test.go:48: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    max := 0\n    for i := 1; i <= n; i++ {\n        for j := i + 1; j <= n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if a[i] +\
    \ a[j] + a[k] == 3 {\n                    max++\n                }\n         \
    \   }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpsmnxya7c_test.go:21\
    \ +0x25\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpsmnxya7c_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000cc4e0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n\
    \    max := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if a[i] < a[j]\
    \ && a[i] < a[k] && a[j] < a[k] {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmpq9i71c68_test.go:21\
    \ +0x1d\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmpq9i71c68_test.go:43\
    \ +0x43\ntesting.tRunner(0xc0000da340, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074459
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        for j := 1; j <= n; j++ {\n\
    \            for k := 1; k <= n; k++ {\n                a[i] = i * i - i + 1\n\
    \                a[j] = i * j - j + 1\n                a[k] = i * k - k + 1\n\
    \                if a[i] < a[j] && a[i] < a[k] {\n                    return 1\n\
    \                }\n                if a[j] < a[i] && a[j] < a[k] {\n        \
    \            return 1\n                }\n                if a[k] < a[i] && a[k]\
    \ < a[j] {\n                    return 1\n                }\n            }\n \
    \       }\n    }\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.get_max_triples(0x4b3160?)\n\t/tmp/tmplj6tb2rl_test.go:23\
    \ +0x48\ncommand-line-arguments_test.TestGet_Max_Triples(0x0?)\n\t/tmp/tmplj6tb2rl_test.go:48\
    \ +0x43\ntesting.tRunner(0xc0000da1a0, 0x527f48)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074456
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        arr[i] = i * i - i\
    \ + 1\n    }\n    max := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ arr[i] + arr[j] + arr[k] == 3 {\n                    max++\n               \
    \ }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpky55r1hh_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpky55r1hh_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074452
