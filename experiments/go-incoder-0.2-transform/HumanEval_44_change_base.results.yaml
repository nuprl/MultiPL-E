language: go_test.go
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x < 0 {\n \
    \       fmt.Println(\"Input number must be greater than 0.\")\n        return\
    \ \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpotocnj9w_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvm6o_yy_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x %= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp974twopy_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjxjh87bb_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base*x)\n\
    \    case 3:\n        return strconv.Itoa(base*x*x)\n    case 4:\n        return\
    \ strconv.Itoa(base*x*x*x)\n    case 5:\n        return strconv.Itoa(base*x*x*x*x)\n\
    \    case 6:\n        return strconv.Itoa(base*x*x*x*x*x)\n    case 7:\n     \
    \   return strconv.Itoa(base*x*x*x*x*x*x)\n    case 8:\n        return strconv.Itoa(base*x*x*x*x*x*x*x)\n\
    \    case 9:\n        return strconv.Itoa(base*x*x*x*x*x*x*x*x)\n    case 10:\n\
    \        return strconv.Itoa(base*x*x*x*x*x*x*x*x*x)\n    default:\n        fmt.Println(\"\
    Base must be less than 10\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkt0pes4s_test.go:24:16: undefined: strconv

    /tmp/tmpkt0pes4s_test.go:26:16: undefined: strconv

    /tmp/tmpkt0pes4s_test.go:28:16: undefined: strconv

    /tmp/tmpkt0pes4s_test.go:30:16: undefined: strconv

    /tmp/tmpkt0pes4s_test.go:32:16: undefined: strconv

    /tmp/tmpkt0pes4s_test.go:34:16: undefined: strconv

    /tmp/tmpkt0pes4s_test.go:36:16: undefined: strconv

    /tmp/tmpkt0pes4s_test.go:38:16: undefined: strconv

    /tmp/tmpkt0pes4s_test.go:40:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n    }\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc3m328li_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpanq_k3np_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpzy0supx3_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpzy0supx3_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpzy0supx3_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqul1_9ix_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10.\nBase must be less than 10.\nBase must be less\
    \ than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase must\
    \ be less than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase\
    \ must be less than 10.\nBase must be less than 10.\nBase must be less than 10.\n\
    Base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpv85h6h35_test.go:53: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpv85h6h35_test.go:53: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpv85h6h35_test.go:53:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpv85h6h35_test.go:53: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpv85h6h35_test.go:53: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpv85h6h35_test.go:53: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpv85h6h35_test.go:53:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpv85h6h35_test.go:53: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpv85h6h35_test.go:53: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpv85h6h35_test.go:53: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpv85h6h35_test.go:53:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpv85h6h35_test.go:53: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6dy1yu3k_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6dy1yu3k_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6dy1yu3k_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvm6o_yy_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyk4o2k79_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps0gmvbxq_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdgjkpnl5_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8ylmeg5l_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%v\", x, base)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpre_yo15j_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpre_yo15j_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpre_yo15j_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpre_yo15j_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpre_yo15j_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpre_yo15j_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpifxomtu3_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpifxomtu3_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpifxomtu3_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n\
    \    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n  \
    \  x /= base\n    x %= base\n    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n\
    \        int(base*float64(x))))\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3xyawc7_test.go:28:13: invalid operation: base * float64(x) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp2qb0tvr5_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp2qb0tvr5_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp2qb0tvr5_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp2qb0tvr5_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp2qb0tvr5_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp2qb0tvr5_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp2qb0tvr5_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp2qb0tvr5_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp2qb0tvr5_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp2qb0tvr5_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp2qb0tvr5_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp2qb0tvr5_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n  \
    \  \"math\"\n)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplskjinyr_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n    }\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n     \
    \   return fmt.Sprintf(\"%d\", x/3)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/4)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/5)\n    case 6:\n\
    \        return fmt.Sprintf(\"%d\", x/6)\n    case 7:\n        return fmt.Sprintf(\"\
    %d\", x/7)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/8)\n    case 9:\n\
    \        return fmt.Sprintf(\"%d\", x/9)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    default:\n        fmt.Printf(\"base must be less than 10\\n\"\
    )\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wk9tenl_test.go:43:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjxjh87bb_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n        int(base/x)))\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmps6rzgez9_test.go:51: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmps6rzgez9_test.go:51: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmps6rzgez9_test.go:51:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmps6rzgez9_test.go:51: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmps6rzgez9_test.go:51: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmps6rzgez9_test.go:51: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 2\")\n        return \"\"\n\
    \    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    switch base {\n    case 2:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n\
    \    case 4:\n        return fmt.Sprintf(\"%d\", x*100)\n    case 5:\n       \
    \ return fmt.Sprintf(\"%d\", x*1000)\n    case 6:\n        return fmt.Sprintf(\"\
    %d\", x*10000)\n    case 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n  \
    \  case 8:\n        return fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n     \
    \   return fmt.Sprintf(\"%d\", x*10000000)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x*100000000)\n    case 11:\n        return fmt.Sprintf(\"%d\", x*1000000000)\n\
    \    case 12:\n        return fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n\
    \        return fmt.Sprintf(\"%d\", x*100000000000)\n    case 14:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000000000)\n    case 15:\n        return fmt.Sprintf(\"\
    %d\", x*10000000000000)\n    case 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n\
    \    case 17:\n        return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case\
    \ 18:\n        return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n\
    \        return fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n    \
    \    return fmt.Sprintf(\"%d\", x*1000000000000000000)\n    case 21:\n       \
    \ return fmt.Sprintf(\"%d\", x*10000000000000000000)\n    case 22:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000000000000)\n    case 23:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000000)\n    case 24:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000000000000000000)\n    case 25:\n        return fmt.Sprintf(\"%d\"\
    , x*100000000000000000000000)\n    case 26:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000000000000000000000)\n    case 27:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000000000000000000000)\n    case 28:\n        return fmt.Sprintf(\"%d\"\
    , x*100000000000000000000000000)\n    case 29:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000000000000)\n    case 30:\n        return fmt.Sprintf(\"\
    %d\", x*10000000000000000000000000000)\n    case 31:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000000000000000000000)\n    case 32:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000000000000000)\n    case 33:\n        return fmt.Sprintf(\"\
    %d\", x*10000000000000000000000000000000)\n    case 34:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000000000000000000000000)\n    case 35:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000000000000000000)\n    case 36:\n        return fmt.Sprintf(\"\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn02ldgc4_test.go:96:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpu3bnqbti_test.go:66: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpu3bnqbti_test.go:66: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpu3bnqbti_test.go:66: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpu3bnqbti_test.go:66:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpu3bnqbti_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpu3bnqbti_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpu3bnqbti_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base number must be less than 10\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base number must be less than 10\nBase number must be less than 10\nBase\
    \ number must be less than 10\nBase number must be less than 10\nBase number must\
    \ be less than 10\nBase number must be less than 10\nBase number must be less\
    \ than 10\nBase number must be less than 10\nBase number must be less than 10\n\
    Base number must be less than 10\nBase number must be less than 10\nBase number\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpa5fi2c02_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpa5fi2c02_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpa5fi2c02_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpa5fi2c02_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpa5fi2c02_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpa5fi2c02_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpa5fi2c02_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpa5fi2c02_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpa5fi2c02_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpa5fi2c02_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpa5fi2c02_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpa5fi2c02_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n        int(base*float64(x))))\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2u12mf1u_test.go:24:13: invalid operation: base * float64(x) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 2.\")\n        return \"\
    0\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"0\"\n    }\n    if x == 0 {\n        return \"0\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x \nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_4aqpd4c_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6dy1yu3k_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6dy1yu3k_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6dy1yu3k_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"Base must be less than 10.\\n\")\n        return \"\
    ERROR\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10.\nBase must be less than 10.\nBase must be less\
    \ than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase must\
    \ be less than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase\
    \ must be less than 10.\nBase must be less than 10.\nBase must be less than 10.\n\
    Base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmphz9gdev3_test.go:51: expected '22', got 'ERROR'\n    ---\
    \ FAIL: TestChange_Base/test_num__1 (0.00s)\n        tmphz9gdev3_test.go:51: expected\
    \ '100', got 'ERROR'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n    \
    \    tmphz9gdev3_test.go:51: expected '11101010', got 'ERROR'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmphz9gdev3_test.go:51: expected '10000', got 'ERROR'\n   \
    \ --- FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmphz9gdev3_test.go:51:\
    \ expected '1000', got 'ERROR'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n\
    \        tmphz9gdev3_test.go:51: expected '111', got 'ERROR'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmphz9gdev3_test.go:51: expected '2', got 'ERROR'\n    ---\
    \ FAIL: TestChange_Base/test_num__7 (0.00s)\n        tmphz9gdev3_test.go:51: expected\
    \ '3', got 'ERROR'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n      \
    \  tmphz9gdev3_test.go:51: expected '4', got 'ERROR'\n    --- FAIL: TestChange_Base/test_num__9\
    \ (0.00s)\n        tmphz9gdev3_test.go:51: expected '5', got 'ERROR'\n    ---\
    \ FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmphz9gdev3_test.go:51:\
    \ expected '6', got 'ERROR'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmphz9gdev3_test.go:51: expected '7', got 'ERROR'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp_mk_02n2_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp_mk_02n2_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp_mk_02n2_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp_mk_02n2_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp_mk_02n2_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp_mk_02n2_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%d\", x, base)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpqt6pcvl7_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpqt6pcvl7_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpqt6pcvl7_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpqt6pcvl7_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpqt6pcvl7_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpqt6pcvl7_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpb3rgm5uj_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpb3rgm5uj_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpb3rgm5uj_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n\nfunc TestChange_Base(t *testing.T) {\n  candidate :=\
    \ change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n\
    \     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohz1vone_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgxbgzfx_test.go:104:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpesk8qva1_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp22b48h0c_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp22b48h0c_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp22b48h0c_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp22b48h0c_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp22b48h0c_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp22b48h0c_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp22b48h0c_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp22b48h0c_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp22b48h0c_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp22b48h0c_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp22b48h0c_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp22b48h0c_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgxbgzfx_test.go:104:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpkucy6lze_test.go:56: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpkucy6lze_test.go:56: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpkucy6lze_test.go:56:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpkucy6lze_test.go:56: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpkucy6lze_test.go:56: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpkucy6lze_test.go:56: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpkucy6lze_test.go:56:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpkucy6lze_test.go:56: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpkucy6lze_test.go:56: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpkucy6lze_test.go:56: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpkucy6lze_test.go:56:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpkucy6lze_test.go:56: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgxbgzfx_test.go:104:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdgjkpnl5_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base is less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7bff3uiv_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x < 0 {\n \
    \       fmt.Println(\"Input number must be greater than 0.\")\n        return\
    \ \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Input number must be greater\
    \ than 0.\")\n        return \"\"\n    }\n    if x == 1 {\n        fmt.Println(\"\
    Input number must be greater than 0.\")\n        return \"\"\n    }\n    if x\
    \ == 2 {\n        fmt.Println(\"Input number must be greater than 0.\")\n    \
    \    return \"\"\n    }\n    if x == 3 {\n        fmt.Println(\"Input number must\
    \ be greater than 0.\")\n        return \"\"\n    }\n    if x == 4 {\n       \
    \ fmt.Println(\"Input number must be greater than 0.\")\n        return \"\"\n\
    \    }\n    if x == 5 {\n        fmt.Println(\"Input number must be greater than\
    \ 0.\")\n        return \"\"\n    }\n    if x == 6 {\n        fmt.Println(\"Input\
    \ number must be greater than 0.\")\n        return \"\"\n    }\n    if x == 7\
    \ {\n        fmt.Println(\"Input number must be greater than 0.\")\n        return\
    \ \"\"\n    }\n    if x == 8 {\n        fmt.Println(\"Input number must be greater\
    \ than 0.\")\n        return \"\"\n    }\n    if x == 9 {\n        fmt.Println(\"\
    Input number must be greater than 0.\")\n        return \"\"\n    }\n    if x\
    \ == 10 {\n        fmt.Println(\"Input number must be greater than 0.\")\n   \
    \     return \"\"\n    }\n    if x == 11 {\n        fmt.Println(\"Input number\
    \ must be greater than 0.\")\n        return \"\"\n    }\n    if x == 12 {\n \
    \       fmt.Println(\"Input number must be greater than 0.\")\n        return\
    \ \"\"\n    }\n    if x == 13 {\n        fmt.Println(\"Input number must be greater\
    \ than 0.\")\n        return \"\"\n    }\n    if x == 14 {\n        fmt.Println(\"\
    Input number must be greater than 0.\")\n        return \"\"\n    }\n    if x\
    \ == 15 {\n        fmt.Println(\"Input number must be greater than 0.\")\n   \
    \     return \"\"\n    }\n    if x == 16 {\n        fmt.Println(\"Input number\
    \ must be greater than 0.\")\n        return \"\"\n    }\n    if x == 17 {\n \
    \       fmt.Println(\"Input number must be greater than 0.\")\n        return\
    \ \"\"\n    }\n    if x == 18 {\n        fmt.Println(\"Input number must be greater\
    \ than 0.\")\n        return \"\"\n    }\n    if x == 19 {\n        fmt.Println(\"\
    Input number must be greater than 0.\")\n        return \"\"\n    }\n    if x\
    \ == 20 {\n        fmt.Println(\"Input number must be greater than 0.\")\n   \
    \     return \"\"\n    }\n    if x == 21 {\n        fmt.Println(\"Input number\
    \ \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptkth80_t_test.go:115:21: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074666
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpii0b8nfn_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpii0b8nfn_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpii0b8nfn_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpii0b8nfn_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpii0b8nfn_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpii0b8nfn_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpii0b8nfn_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpii0b8nfn_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpii0b8nfn_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpii0b8nfn_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpii0b8nfn_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpii0b8nfn_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    if x == 0 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    return fmt.Sprintf(\"%d%s\", x, change_base(base-1, base))\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmph0iwp2wp_test.go:54: expected '22', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmph0iwp2wp_test.go:54: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmph0iwp2wp_test.go:54:\
    \ expected '11101010', got '10'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmph0iwp2wp_test.go:54: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmph0iwp2wp_test.go:54: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmph0iwp2wp_test.go:54: expected\
    \ '111', got '10'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n       \
    \ tmph0iwp2wp_test.go:54: expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7\
    \ (0.00s)\n        tmph0iwp2wp_test.go:54: expected '3', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__8 (0.00s)\n        tmph0iwp2wp_test.go:54: expected\
    \ '4', got '0'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n        tmph0iwp2wp_test.go:54:\
    \ expected '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n\
    \        tmph0iwp2wp_test.go:54: expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11\
    \ (0.00s)\n        tmph0iwp2wp_test.go:54: expected '7', got '0'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '22', got '6'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpz41qp145_test.go:46: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '111', got '6'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpz41qp145_test.go:46: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpz41qp145_test.go:46: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpz41qp145_test.go:46: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpz41qp145_test.go:46:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpz41qp145_test.go:46: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpyfu0ohkf_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpyfu0ohkf_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpyfu0ohkf_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpyfu0ohkf_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpyfu0ohkf_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpyfu0ohkf_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpyfu0ohkf_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpyfu0ohkf_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpyfu0ohkf_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpyfu0ohkf_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpyfu0ohkf_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpyfu0ohkf_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    if\
    \ x == 0 {\n        return \"0\"\n    }\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n</code>\n<|/ a tags=go,algorithm |>\n<| a tags=go,algorithm\
    \ |>\n<code>\npackage main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt0g3iud7_test.go:28:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(base,\n        int(base*float64(x))))\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2u12mf1u_test.go:24:13: invalid operation: base * float64(x) (mismatched
    types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074527
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    switch base {\n\
    \    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return strconv.Itoa(x\
    \ / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n    case 5:\n    \
    \    return strconv.Itoa(x / 1000)\n    case 6:\n        return strconv.Itoa(x\
    \ / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n    case 8:\n\
    \        return strconv.Itoa(x / 1000000)\n    case 9:\n        return strconv.Itoa(x\
    \ / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n    default:\n\
    \        fmt.Println(\"Base must be between 2 and 10\")\n        return \"\"\n\
    \    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp285er7ke_test.go:28:16: undefined: strconv

    /tmp/tmp285er7ke_test.go:30:16: undefined: strconv

    /tmp/tmp285er7ke_test.go:32:16: undefined: strconv

    /tmp/tmp285er7ke_test.go:34:16: undefined: strconv

    /tmp/tmp285er7ke_test.go:36:16: undefined: strconv

    /tmp/tmp285er7ke_test.go:38:16: undefined: strconv

    /tmp/tmp285er7ke_test.go:40:16: undefined: strconv

    /tmp/tmp285er7ke_test.go:42:16: undefined: strconv

    /tmp/tmp285er7ke_test.go:44:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\npackage main\n\
    \nimport (\n    \"fmt\"\n    \"strconv\"\n)\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzvg1cvoc_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base numbers are less than 10.\\n\")\n    }\n    switch\
    \ base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n\
    \        return fmt.Sprintf(\"%d\", x/3)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/4)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/5)\n    case 6:\n\
    \        return fmt.Sprintf(\"%d\", x/6)\n    case 7:\n        return fmt.Sprintf(\"\
    %d\", x/7)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/8)\n    case 9:\n\
    \        return fmt.Sprintf(\"%d\", x/9)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    default:\n        fmt.Printf(\"base numbers are less than 10.\\\
    n\")\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpug8fe_3e_test.go:43:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvm6o_yy_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6dy1yu3k_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6dy1yu3k_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6dy1yu3k_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base number should be less than 10\")\n    }\n    if\
    \ base > 10 {\n        fmt.Println(\"Base number should be less than 10\")\n \
    \   }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpb5vrpihr_test.go:119:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"Base must be less than 10.\\n\")\n        return \"\"\
    \n    }\n    if x < 0 {\n        fmt.Printf(\"x must be greater than 0.\\n\")\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnj5k45ry_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(x)\n\
    \    case 3:\n        return strconv.Itoa(x / 10)\n    case 4:\n        return\
    \ strconv.Itoa(x / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n\
    \    case 6:\n        return strconv.Itoa(x / 10000)\n    case 7:\n        return\
    \ strconv.Itoa(x / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n\
    \    case 9:\n        return strconv.Itoa(x / 10000000)\n    case 10:\n      \
    \  return strconv.Itoa(x / 100000000)\n    default:\n        fmt.Println(\"Base\
    \ must be less than or equal to 10.\")\n        return \"\"\n    }\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsat0802f_test.go:24:16: undefined: strconv

    /tmp/tmpsat0802f_test.go:26:16: undefined: strconv

    /tmp/tmpsat0802f_test.go:28:16: undefined: strconv

    /tmp/tmpsat0802f_test.go:30:16: undefined: strconv

    /tmp/tmpsat0802f_test.go:32:16: undefined: strconv

    /tmp/tmpsat0802f_test.go:34:16: undefined: strconv

    /tmp/tmpsat0802f_test.go:36:16: undefined: strconv

    /tmp/tmpsat0802f_test.go:38:16: undefined: strconv

    /tmp/tmpsat0802f_test.go:40:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074668
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n\
    \        fmt.Println(\"Cannot change base of 0.\")\n        return \"\"\n    }\n\
    \    switch base {\n    case 2:\n        return strconv.Itoa(int(math.Floor(float64(x)\
    \ / float64(base))))\n    case 3:\n        return strconv.Itoa(int(math.Floor(float64(x)\
    \ / float64(base))*base))\n    case 4:\n        return strconv.Itoa(int(math.Floor(float64(x)\
    \ / float64(base))*base*base))\n    case 5:\n        return strconv.Itoa(int(math.Floor(float64(x)\
    \ / float64(base))*base*base*base))\n    case 6:\n        return strconv.Itoa(int(math.Floor(float64(x)\
    \ / float64(base))*base*base*base*base))\n    case 7:\n        return strconv.Itoa(int(math.Floor(float64(x)\
    \ / float64(base))*base*base*base*base*base))\n    case 8:\n        return strconv.Itoa(int(math.Floor(float64(x)\
    \ / float64(base))*base*base*base*base*base*base))\n    case 9:\n        return\
    \ strconv.Itoa(int(math.Floor(float64(x) / float64(base))*base*base*base*base*base*base*base))\n\
    \    case 10:\n        return strconv.Itoa(int(math.Floor(float64(x) / float64(base))*base*base*base*base*base*base*base*base))\n\
    \    case 11:\n        return strconv.Itoa(int(math.Floor(float64(x) / float64(base))*base*base*base*base*base*base*base*base*base))\n\
    \    case 12:\n        return strconv.Itoa(int(math.Floor(float64(x) / float64(base))*base*base*base*base*base*base*base*base*base*base))\n\
    \    case 13:\n        return strconv.Itoa(int(math.Floor(float64(x) / float64(base))*base*base*base*base*base*base*base*base*base*base*base))\n\
    \    case 14:\n        return strconv.Itoa(int(math.Floor(float64(x) / float64(base))*base*base*base*base*base*base*base*base*base*base*base*base))\n\
    \    case \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph9py7my1_test.go:58:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x % 10)\n   \
    \ case 5:\n        return strconv.Itoa(x / 100)\n    case 6:\n        return strconv.Itoa(x\
    \ % 100)\n    case 7:\n        return strconv.Itoa(x / 1000)\n    case 8:\n  \
    \      return strconv.Itoa(x % 1000)\n    case 9:\n        return strconv.Itoa(x\
    \ / 10000)\n    case 10:\n        return strconv.Itoa(x % 10000)\n    case 11:\n\
    \        return strconv.Itoa(x / 100000)\n    case 12:\n        return strconv.Itoa(x\
    \ % 100000)\n    case 13:\n        return strconv.Itoa(x / 1000000)\n    case\
    \ 14:\n        return strconv.Itoa(x % 1000000)\n    case 15:\n        return\
    \ strconv.Itoa(x / 10000000)\n    case 16:\n        return strconv.Itoa(x % 10000000)\n\
    \    case 17:\n        return strconv.Itoa(x / 100000000)\n    case 18:\n    \
    \    return strconv.Itoa(x % 100000000)\n    case 19:\n        return strconv.Itoa(x\
    \ / 1000000000)\n    case 20:\n        return strconv.Itoa(x % 1000000000)\n \
    \   case 21:\n        return strconv.Itoa(x / 10000000000)\n    case 22:\n   \
    \     return strconv.Itoa(x % 10000000000)\n    case 23:\n        return strconv.Itoa(x\
    \ / 100000000000)\n    case 24:\n        return strconv.Itoa(x % 100000000000)\n\
    \    case 25:\n        return strconv.Itoa(x / 1000000000000)\n    case 26:\n\
    \        return strconv.Itoa(x % 1000000000000)\n    case 27:\n        return\
    \ strconv.Itoa(x / 10000000000000)\n    case 28:\n        return strconv.Itoa(x\
    \ % 10000000000000)\n    case 29:\n        return strconv.Itoa(x / 100000000000000)\n\
    \    case 30:\n        return strconv.Itoa(x % 100000000000000)\n    case 31:\n\
    \        return strconv.Itoa(x / 1000000000000000)\n    case 32:\n        return\
    \ strconv.Itoa(x % 1000000000000000)\n    case 33:\n        return strconv.Itoa(x\
    \ / 10000000000000000)\n    case 34:\n        return strconv.Itoa(x % 10000000000000000)\n\
    \    case 35:\n        return strconv.Itoa(x / 100000000000000000)\n    case 36:\n\
    \        return strconv.Itoa(x % 100000000000000000)\n    case 37:\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7i93aa01_test.go:91:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\
    Error\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than\
    \ 10.\")\n        return \"Error\"\n    }\n    x /= base\n    x %= base\n    return\
    \ fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpscp9x_hc_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpscp9x_hc_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpscp9x_hc_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpscp9x_hc_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpscp9x_hc_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpscp9x_hc_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpscp9x_hc_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpscp9x_hc_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpscp9x_hc_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpscp9x_hc_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpscp9x_hc_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpscp9x_hc_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n  \
    \  case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n        return\
    \ strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n\
    \    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n        return\
    \ strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n\
    \    case 11:\n        return strconv.Itoa(x / 1000000000)\n    case 12:\n   \
    \     return strconv.Itoa(x / 10000000000)\n    case 13:\n        return strconv.Itoa(x\
    \ / 100000000000)\n    case 14:\n        return strconv.Itoa(x / 1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x / 10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x / 100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x / 1000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ / 10000000000000000)\n    case 19:\n        return strconv.Itoa(x / 100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x / 1000000000000000000)\n    default:\n\
    \        fmt.Println(\"base out of range\")\n    }\n    return \"\"\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7l7bols_test.go:20:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:22:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:24:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:26:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:28:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:30:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:32:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:34:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:36:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:38:16: undefined: strconv

    /tmp/tmpw7l7bols_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n \
    \       return \"\"\n    }\n    x %= base\n    if x < base {\n        x += (base\
    \ - 1)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpil2ps08l_test.go:62: expected '22', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpil2ps08l_test.go:62: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpil2ps08l_test.go:62:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpil2ps08l_test.go:62: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpil2ps08l_test.go:62: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpil2ps08l_test.go:62: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpil2ps08l_test.go:62:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpil2ps08l_test.go:62: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpil2ps08l_test.go:62: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpil2ps08l_test.go:62: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpil2ps08l_test.go:62:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpil2ps08l_test.go:62: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5jtbl8b1_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"%d\", x*1000000000000)\n\
    \    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n    case\
    \ 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case 17:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n       \
    \ return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000)\n    default:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp3plgpr5g_test.go:86: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base numbers are less than 10.\")\n        return \"\
    \"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfqit1w52_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n \
    \       fmt.Println(\"x must be greater than 0\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqtypcc78_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpanq_k3np_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbls2tnwq_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvm6o_yy_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%0*d\", x, x)\n    case 3:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100)\n    case 5:\n        return fmt.Sprintf(\"%0*d\", x, x*1000)\n\
    \    case 6:\n        return fmt.Sprintf(\"%0*d\", x, x*10000)\n    case 7:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%0*d\", x,\
    \ x*100000000)\n    case 11:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000)\n\
    \    case 12:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000)\n    case\
    \ 13:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000)\n    case 15:\n \
    \       return fmt.Sprintf(\"%0*d\", x, x*100000000000000000)\n    case 16:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000)\n    case 17:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000)\n    case 18:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000)\n    case 19:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000)\n    case 20:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000)\n    case\
    \ 21:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000000)\n \
    \   case 22:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000000)\n\
    \    case 23:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000000)\n\
    \    case 24:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000000000)\n\
    \    case 25:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000000000)\n\
    \    case 26:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000000000)\n\
    \    case 27:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000000000000)\n\
    \    case 28:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000000000000000000000000)\n\
    \    case 29:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000000000000000000000000)\n\
    \    case 30:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000000000000000000000000)\n\
    \    case 31:\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpveq8vfww_test.go:79:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base must be less than 10\")\n        return \"\"\n\
    \    }\n    switch base {\n    case 2:\n        return strconv.Itoa(base10(x))\n\
    \    case 3:\n        return strconv.Itoa(base10(x*base))\n    case 4:\n     \
    \   return strconv.Itoa(base10(x*base*base))\n    case 5:\n        return strconv.Itoa(base10(x*base*base*base))\n\
    \    case 6:\n        return strconv.Itoa(base10(x*base*base*base*base))\n   \
    \ case 7:\n        return strconv.Itoa(base10(x*base*base*base*base*base))\n \
    \   case 8:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base))\n\
    \    case 9:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base*base))\n\
    \    case 10:\n        return strconv.Itoa(base10(x*base*base*base*base*base*base*base*base))\n\
    \    default:\n        fmt.Println(\"base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxggepy5g_test.go:24:16: undefined: strconv

    /tmp/tmpxggepy5g_test.go:24:29: undefined: base10

    /tmp/tmpxggepy5g_test.go:26:16: undefined: strconv

    /tmp/tmpxggepy5g_test.go:26:29: undefined: base10

    /tmp/tmpxggepy5g_test.go:28:16: undefined: strconv

    /tmp/tmpxggepy5g_test.go:28:29: undefined: base10

    /tmp/tmpxggepy5g_test.go:30:16: undefined: strconv

    /tmp/tmpxggepy5g_test.go:30:29: undefined: base10

    /tmp/tmpxggepy5g_test.go:32:16: undefined: strconv

    /tmp/tmpxggepy5g_test.go:32:29: undefined: base10

    /tmp/tmpxggepy5g_test.go:32:29: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n\
    \    x /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x\
    \ /= base\n    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n\
    \    x += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x\
    \ += (x % base)\n    x /= base\n    x += (x % base)\n    x /= base\n    x += (x\
    \ % base)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprgxbgzfx_test.go:104:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqul1_9ix_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n  \
    \  case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n        return\
    \ strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n\
    \    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n        return\
    \ strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n\
    \    case 11:\n        return strconv.Itoa(x / 1000000000)\n    case 12:\n   \
    \     return strconv.Itoa(x / 10000000000)\n    case 13:\n        return strconv.Itoa(x\
    \ / 100000000000)\n    case 14:\n        return strconv.Itoa(x / 1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x / 10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x / 100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x / 1000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ / 10000000000000000)\n    case 19:\n        return strconv.Itoa(x / 100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x / 1000000000000000000)\n    default:\n\
    \        fmt.Println(\"Base out of range\")\n    }\n    return \"\"\n}\n\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_3o_h5mz_test.go:20:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:22:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:24:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:26:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:28:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:30:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:32:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:34:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:36:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:38:16: undefined: strconv

    /tmp/tmp_3o_h5mz_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpifxomtu3_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpifxomtu3_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpifxomtu3_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(x , base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7jqlmeac_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7jqlmeac_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp7jqlmeac_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp7jqlmeac_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp7jqlmeac_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp7jqlmeac_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    default:\n \
    \       return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpr_ef_0q2_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpr_ef_0q2_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpr_ef_0q2_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpr_ef_0q2_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpr_ef_0q2_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n     \
    \   return fmt.Sprintf(\"%d\", x/3)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/4)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/5)\n    case 6:\n\
    \        return fmt.Sprintf(\"%d\", x/6)\n    case 7:\n        return fmt.Sprintf(\"\
    %d\", x/7)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/8)\n    case 9:\n\
    \        return fmt.Sprintf(\"%d\", x/9)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpvkh5jqyo_test.go:66: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpvkh5jqyo_test.go:66: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpvkh5jqyo_test.go:66:\
    \ expected '11101010', got '117'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpvkh5jqyo_test.go:66: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpvkh5jqyo_test.go:66: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpvkh5jqyo_test.go:66: expected\
    \ '111', got '3'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpvkh5jqyo_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpvkh5jqyo_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpvkh5jqyo_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpvkh5jqyo_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpvkh5jqyo_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpvkh5jqyo_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0.\")\n        return \"\"\n    }\n    if x < 0 {\n        fmt.Println(\"\
    Cannot change base of negative number.\")\n        return \"\"\n    }\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpf6dwsnup_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvl227nl8_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0.\")\n        return \"\"\n    }\n    if x == 1 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= base\n    x -= int(x*base)\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmph1cp0y0w_test.go:62: expected '22', got '-4'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmph1cp0y0w_test.go:62: expected\
    \ '100', got '-6'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmph1cp0y0w_test.go:62: expected '11101010', got '-117'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmph1cp0y0w_test.go:62: expected '10000', got '-8'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmph1cp0y0w_test.go:62: expected\
    \ '1000', got '-4'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n      \
    \  tmph1cp0y0w_test.go:62: expected '111', got '-3'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmph1cp0y0w_test.go:62: expected '2', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmph1cp0y0w_test.go:62: expected\
    \ '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmph1cp0y0w_test.go:62:\
    \ expected '4', got '0'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n \
    \       tmph1cp0y0w_test.go:62: expected '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmph1cp0y0w_test.go:62: expected '6', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__11 (0.00s)\n        tmph1cp0y0w_test.go:62: expected\
    \ '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp43ctt9e2_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp43ctt9e2_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp43ctt9e2_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp43ctt9e2_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp43ctt9e2_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp43ctt9e2_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp43ctt9e2_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp43ctt9e2_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp43ctt9e2_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp43ctt9e2_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp43ctt9e2_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp43ctt9e2_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpzsnv5z6i_test.go:60: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpzsnv5z6i_test.go:60: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpzsnv5z6i_test.go:60:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpzsnv5z6i_test.go:60: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpzsnv5z6i_test.go:60: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpzsnv5z6i_test.go:60: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpzsnv5z6i_test.go:60:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpzsnv5z6i_test.go:60: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpzsnv5z6i_test.go:60: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpzsnv5z6i_test.go:60: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpzsnv5z6i_test.go:60:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpzsnv5z6i_test.go:60: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"%d\", x*1000000000000)\n\
    \    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n    case\
    \ 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case 17:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n       \
    \ return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000)\n    case 21:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000000000000000)\n    case 22:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000)\n\
    \    case 23:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000)\n\
    \    case 24:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000)\n\
    \    case 25:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000)\n\
    \    case 26:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000)\n\
    \    case 27:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000)\n\
    \    case 28:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000)\n\
    \    case 29:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000)\n\
    \    case 30:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000)\n\
    \    case 31:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000)\n\
    \    case 32:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000)\n\
    \    case 33:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000000)\n\
    \    case 34:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000000)\n\
    \    case 35:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000000)\n\
    \    case 36:\n        return fmt.Sprintf(\"%d\", x*10000000000000000000000000000000000)\n\
    \    case 37:\n        return fmt.Sprintf(\"%d\", x*100000000000000000000000000000000000)\n\
    \    case 38:\n        return fmt.Sprintf(\"%d\", x*1000000000000000000000000000000000000)\n\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmponlm0caz_test.go:94:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n\
    \        return \"\"\n    }\n    x %= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n   \
    \ x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x\
    \ /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /=\
    \ base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n\
    \    x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n \
    \   x /= base\n    x /= base\n    x /= base\n    x /= base\n    x /= base\n  \
    \  x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwqaswqp0_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n \
    \       return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpmamszmhq_test.go:60: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpmamszmhq_test.go:60: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpmamszmhq_test.go:60:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpmamszmhq_test.go:60: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpmamszmhq_test.go:60: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpmamszmhq_test.go:60: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpmamszmhq_test.go:60:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpmamszmhq_test.go:60: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpmamszmhq_test.go:60: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpmamszmhq_test.go:60: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpmamszmhq_test.go:60:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpmamszmhq_test.go:60: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %d\", x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    default:\n        fmt.Println(\"base must be less than 10\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpkyme3hg__test.go:71: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpkyme3hg__test.go:71: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmpkyme3hg__test.go:71: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpkyme3hg__test.go:71: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpkyme3hg__test.go:71: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmpkyme3hg__test.go:71: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmpkyme3hg__test.go:71: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmpkyme3hg__test.go:71: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmpkyme3hg__test.go:71:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmpkyme3hg__test.go:71: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpkyme3hg__test.go:71: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpkyme3hg__test.go:71:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=go,algorithm |>\n<code>\npackage main\n\nimport (\n\
    \    \"fmt\"\n    \"math\"\n)\n\nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjzfwtvfx_test.go:26:1: expected declaration, found ''<''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074669
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x/1000000000)\n    case 12:\n        return\
    \ fmt.Sprintf(\"%d\", x/10000000000)\n    case 13:\n        return fmt.Sprintf(\"\
    %d\", x/100000000000)\n    case 14:\n        return fmt.Sprintf(\"%d\", x/1000000000000)\n\
    \    case 15:\n        return fmt.Sprintf(\"%d\", x/10000000000000)\n    case\
    \ 16:\n        return fmt.Sprintf(\"%d\", x/100000000000000)\n    case 17:\n \
    \       return fmt.Sprintf(\"%d\", x/1000000000000000)\n    case 18:\n       \
    \ return fmt.Sprintf(\"%d\", x/10000000000000000)\n    case 19:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"\
    %d\", x/1000000000000000000)\n    default:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpzx31fmbc_test.go:86: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpzx31fmbc_test.go:86: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpzx31fmbc_test.go:86:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpzx31fmbc_test.go:86: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpzx31fmbc_test.go:86: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpzx31fmbc_test.go:86: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpzx31fmbc_test.go:86:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpzx31fmbc_test.go:86: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpzx31fmbc_test.go:86: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpzx31fmbc_test.go:86: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpzx31fmbc_test.go:86:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpzx31fmbc_test.go:86: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(base10(x))\n    case 3:\n      \
    \  return strconv.Itoa(base16(x))\n    case 4:\n        return strconv.Itoa(base32(x))\n\
    \    case 5:\n        return strconv.Itoa(base64(x))\n    default:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptv98nj1r_test.go:20:16: undefined: strconv

    /tmp/tmptv98nj1r_test.go:20:29: undefined: base10

    /tmp/tmptv98nj1r_test.go:22:16: undefined: strconv

    /tmp/tmptv98nj1r_test.go:22:29: undefined: base16

    /tmp/tmptv98nj1r_test.go:24:16: undefined: strconv

    /tmp/tmptv98nj1r_test.go:24:29: undefined: base32

    /tmp/tmptv98nj1r_test.go:26:16: undefined: strconv

    /tmp/tmptv98nj1r_test.go:26:29: undefined: base64

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base == 10 {\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpcf8ma58t_test.go:54: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpcf8ma58t_test.go:54: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpcf8ma58t_test.go:54:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpcf8ma58t_test.go:54: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpcf8ma58t_test.go:54: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpcf8ma58t_test.go:54: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpcf8ma58t_test.go:54:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpcf8ma58t_test.go:54: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpcf8ma58t_test.go:54: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpcf8ma58t_test.go:54: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpcf8ma58t_test.go:54:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpcf8ma58t_test.go:54: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(int(float64(x) / float64(base)))\n    case 4:\n        return strconv.Itoa(int(float64(x)\
    \ / float64(base*base)))\n    case 5:\n        return strconv.Itoa(int(float64(x)\
    \ / float64(base*base*base)))\n    case 6:\n        return strconv.Itoa(int(float64(x)\
    \ / float64(base*base*base*base)))\n    case 7:\n        return strconv.Itoa(int(float64(x)\
    \ / float64(base*base*base*base*base)))\n    case 8:\n        return strconv.Itoa(int(float64(x)\
    \ / float64(base*base*base*base*base*base)))\n    case 9:\n        return strconv.Itoa(int(float64(x)\
    \ / float64(base*base*base*base*base*base*base)))\n    case 10:\n        return\
    \ strconv.Itoa(int(float64(x) / float64(base*base*base*base*base*base*base*base)))\n\
    \    default:\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qwjkfoh_test.go:20:16: undefined: strconv

    /tmp/tmp4qwjkfoh_test.go:22:16: undefined: strconv

    /tmp/tmp4qwjkfoh_test.go:24:16: undefined: strconv

    /tmp/tmp4qwjkfoh_test.go:26:16: undefined: strconv

    /tmp/tmp4qwjkfoh_test.go:28:16: undefined: strconv

    /tmp/tmp4qwjkfoh_test.go:30:16: undefined: strconv

    /tmp/tmp4qwjkfoh_test.go:32:16: undefined: strconv

    /tmp/tmp4qwjkfoh_test.go:34:16: undefined: strconv

    /tmp/tmp4qwjkfoh_test.go:36:16: undefined: strconv

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base is less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base is less than 10\nbase is less than 10\nbase is less than 10\nbase\
    \ is less than 10\nbase is less than 10\nbase is less than 10\nbase is less than\
    \ 10\nbase is less than 10\nbase is less than 10\nbase is less than 10\nbase is\
    \ less than 10\nbase is less than 10\n--- FAIL: TestChange_Base (0.00s)\n    ---\
    \ FAIL: TestChange_Base/test_num__0 (0.00s)\n        tmpbjkuz1ou_test.go:51: expected\
    \ '22', got ''\n    --- FAIL: TestChange_Base/test_num__1 (0.00s)\n        tmpbjkuz1ou_test.go:51:\
    \ expected '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n\
    \        tmpbjkuz1ou_test.go:51: expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpbjkuz1ou_test.go:51: expected '10000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__4 (0.00s)\n        tmpbjkuz1ou_test.go:51: expected\
    \ '1000', got ''\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmpbjkuz1ou_test.go:51:\
    \ expected '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n\
    \        tmpbjkuz1ou_test.go:51: expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7\
    \ (0.00s)\n        tmpbjkuz1ou_test.go:51: expected '3', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__8 (0.00s)\n        tmpbjkuz1ou_test.go:51: expected\
    \ '4', got ''\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n        tmpbjkuz1ou_test.go:51:\
    \ expected '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n \
    \       tmpbjkuz1ou_test.go:51: expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11\
    \ (0.00s)\n        tmpbjkuz1ou_test.go:51: expected '7', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    switch base {\n    case 2:\n        return strconv.Itoa(x)\n    case\
    \ 3:\n        return strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x\
    \ / 100)\n    case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n  \
    \      return strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x\
    \ / 100000)\n    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n\
    \        return strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x\
    \ / 100000000)\n    case 11:\n        return strconv.Itoa(x / 1000000000)\n  \
    \  case 12:\n        return strconv.Itoa(x / 10000000000)\n    case 13:\n    \
    \    return strconv.Itoa(x / 100000000000)\n    case 14:\n        return strconv.Itoa(x\
    \ / 1000000000000)\n    case 15:\n        return strconv.Itoa(x / 10000000000000)\n\
    \    case 16:\n        return strconv.Itoa(x / 100000000000000)\n    case 17:\n\
    \        return strconv.Itoa(x / 1000000000000000)\n    case 18:\n        return\
    \ strconv.Itoa(x / 10000000000000000)\n    case 19:\n        return strconv.Itoa(x\
    \ / 100000000000000000)\n    case 20:\n        return strconv.Itoa(x / 1000000000000000000)\n\
    \    default:\n        fmt.Println(\"Base must be less than 20\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqs9c4rdk_test.go:24:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:26:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:28:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:30:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:32:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:34:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:36:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:38:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:40:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:42:16: undefined: strconv

    /tmp/tmpqs9c4rdk_test.go:42:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10.\\n\")\n    }\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplmyg9uvm_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n\nfunc TestChange_Base(t *testing.T) {\n  candidate :=\
    \ change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n\
    \     { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpohz1vone_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(x , base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7jqlmeac_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7jqlmeac_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp7jqlmeac_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp7jqlmeac_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp7jqlmeac_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp7jqlmeac_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyk4o2k79_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x/10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x/10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x/100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x/1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x/10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x/100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x/1000000000)\n    default:\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n \
    \ candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpyrhgt9li_test.go:68: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpyrhgt9li_test.go:68: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpyrhgt9li_test.go:68: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpyrhgt9li_test.go:68: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpyrhgt9li_test.go:68:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpyrhgt9li_test.go:68: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdgjkpnl5_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\"\
    , x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4snao951_test.go:20:9:\
    \ not enough return values\n\thave ()\n\twant (string)\n"
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6qtvmj5m_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp6qtvmj5m_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6qtvmj5m_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6qtvmj5m_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6qtvmj5m_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp6qtvmj5m_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg43qf3vm_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg43qf3vm_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg43qf3vm_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg43qf3vm_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg43qf3vm_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg43qf3vm_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpg43qf3vm_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpg43qf3vm_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpg43qf3vm_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpg43qf3vm_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpg43qf3vm_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpg43qf3vm_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074533
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpgdskaru0_test.go:54: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpgdskaru0_test.go:54: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpgdskaru0_test.go:54:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpgdskaru0_test.go:54: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpgdskaru0_test.go:54: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpgdskaru0_test.go:54: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpgdskaru0_test.go:54:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpgdskaru0_test.go:54: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpgdskaru0_test.go:54: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpgdskaru0_test.go:54: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpgdskaru0_test.go:54:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpgdskaru0_test.go:54: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%0*d\",\
    \ x, x)\n    case 3:\n        return fmt.Sprintf(\"%0*d\", x, x/10)\n    case\
    \ 4:\n        return fmt.Sprintf(\"%0*d\", x, x/100)\n    case 5:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x/1000)\n    case 6:\n        return fmt.Sprintf(\"\
    %0*d\", x, x/10000)\n    case 7:\n        return fmt.Sprintf(\"%0*d\", x, x/100000)\n\
    \    case 8:\n        return fmt.Sprintf(\"%0*d\", x, x/1000000)\n    case 9:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x/10000000)\n    case 10:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x/100000000)\n    default:\n        fmt.Println(\"\
    Base must be less than 10.\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp69p4ml0l_test.go:71: expected '22', got '00000000'\n   \
    \ --- FAIL: TestChange_Base/test_num__1 (0.00s)\n        tmp69p4ml0l_test.go:71:\
    \ expected '100', got '000000000'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n\
    \        tmp69p4ml0l_test.go:71: expected '11101010', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000234'\n\
    \    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n        tmp69p4ml0l_test.go:71:\
    \ expected '10000', got '0000000000000016'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp69p4ml0l_test.go:71: expected '1000', got '00000008'\n \
    \   --- FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmp69p4ml0l_test.go:71:\
    \ expected '111', got '0000007'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n\
    \        tmp69p4ml0l_test.go:71: expected '2', got '00'\n    --- FAIL: TestChange_Base/test_num__7\
    \ (0.00s)\n        tmp69p4ml0l_test.go:71: expected '3', got '000'\n    --- FAIL:\
    \ TestChange_Base/test_num__8 (0.00s)\n        tmp69p4ml0l_test.go:71: expected\
    \ '4', got '0000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n       \
    \ tmp69p4ml0l_test.go:71: expected '5', got '00000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp69p4ml0l_test.go:71: expected '6', got '000000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp69p4ml0l_test.go:71:\
    \ expected '7', got '0000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmvm6o_yy_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpzy0supx3_test.go:58: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpzy0supx3_test.go:58: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpzy0supx3_test.go:58: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpzy0supx3_test.go:58: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpzy0supx3_test.go:58:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpzy0supx3_test.go:58: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base number must be less than 10\")\n        return\
    \ \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9s_0mr0u_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074670
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(x / 10)\n    case 4:\n        return strconv.Itoa(x / 100)\n  \
    \  case 5:\n        return strconv.Itoa(x / 1000)\n    case 6:\n        return\
    \ strconv.Itoa(x / 10000)\n    case 7:\n        return strconv.Itoa(x / 100000)\n\
    \    case 8:\n        return strconv.Itoa(x / 1000000)\n    case 9:\n        return\
    \ strconv.Itoa(x / 10000000)\n    case 10:\n        return strconv.Itoa(x / 100000000)\n\
    \    case 11:\n        return strconv.Itoa(x / 1000000000)\n    default:\n   \
    \     fmt.Printf(\"Base %d is not supported\\n\", base)\n    }\n    return \"\"\
    \n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwt4fzfdy_test.go:20:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:22:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:24:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:26:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:28:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:30:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:32:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:34:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:36:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:38:16: undefined: strconv

    /tmp/tmpwt4fzfdy_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6dy1yu3k_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6dy1yu3k_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6dy1yu3k_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d%s\", x, change_base(x , base))\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp7jqlmeac_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp7jqlmeac_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp7jqlmeac_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp7jqlmeac_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp7jqlmeac_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp7jqlmeac_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074534
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8s8mns_f_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp8s8mns_f_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp8s8mns_f_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"\
    %d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp868uhaxp_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp868uhaxp_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp868uhaxp_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp868uhaxp_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp868uhaxp_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp868uhaxp_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp868uhaxp_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp868uhaxp_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp868uhaxp_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp868uhaxp_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp868uhaxp_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp868uhaxp_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    if x == 0 {\n        return \"\"\n    }\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmprttbfqx2_test.go:56: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmprttbfqx2_test.go:56: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmprttbfqx2_test.go:56:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmprttbfqx2_test.go:56: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmprttbfqx2_test.go:56: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmprttbfqx2_test.go:56: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmprttbfqx2_test.go:56:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmprttbfqx2_test.go:56: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmprttbfqx2_test.go:56: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmprttbfqx2_test.go:56: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmprttbfqx2_test.go:56:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmprttbfqx2_test.go:56: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"%d\", x*1000000000000)\n\
    \    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n    case\
    \ 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case 17:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n       \
    \ return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000)\n    default:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp3plgpr5g_test.go:86: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"base must be less than 10\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        return \"\"\n    }\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= \nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnew891n2_test.go:122:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpe1r067tv_test.go:47: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpe1r067tv_test.go:47: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpe1r067tv_test.go:47: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpe1r067tv_test.go:47:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpe1r067tv_test.go:47: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= base\n\
    \    x /= base\n    x += 1\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '2', got '1'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpdgjkpnl5_test.go:49: expected '3', got '1'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdgjkpnl5_test.go:49: expected '4', got '1'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdgjkpnl5_test.go:49: expected\
    \ '5', got '1'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdgjkpnl5_test.go:49:\
    \ expected '6', got '1'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpdgjkpnl5_test.go:49: expected '7', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074531
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%0*d\", x,\
    \ x)\n    case 3:\n        return fmt.Sprintf(\"%0*d\", x, x*10)\n    case 4:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100)\n    case 5:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000)\n    case 6:\n        return fmt.Sprintf(\"%0*d\", x, x*10000)\n\
    \    case 7:\n        return fmt.Sprintf(\"%0*d\", x, x*100000)\n    case 8:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*10000000)\n    case 10:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100000000)\n    default:\n        fmt.Println(\"Base must be less\
    \ than 10\")\n        return \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpxttrspx__test.go:71: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpxttrspx__test.go:71: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpxttrspx__test.go:71:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpxttrspx__test.go:71: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpxttrspx__test.go:71: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpxttrspx__test.go:71: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpxttrspx__test.go:71:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpxttrspx__test.go:71: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpxttrspx__test.go:71: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpxttrspx__test.go:71: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpxttrspx__test.go:71:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpxttrspx__test.go:71: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10.\"\
    )\n        return \"\"\n    }\n    if x == 0 {\n        fmt.Println(\"Cannot change\
    \ base of 0.\")\n        return \"\"\n    }\n    x /= base\n    x %= base\n  \
    \  return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp4nr41s4h_test.go:59: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp4nr41s4h_test.go:59: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp4nr41s4h_test.go:59:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp4nr41s4h_test.go:59: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp4nr41s4h_test.go:59: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp4nr41s4h_test.go:59: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp4nr41s4h_test.go:59:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp4nr41s4h_test.go:59: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp4nr41s4h_test.go:59: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp4nr41s4h_test.go:59: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp4nr41s4h_test.go:59:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp4nr41s4h_test.go:59: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x/2)\n    case 3:\n     \
    \   return fmt.Sprintf(\"%d\", x/3)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x/4)\n    case 5:\n        return fmt.Sprintf(\"%d\", x/5)\n    case 6:\n\
    \        return fmt.Sprintf(\"%d\", x/6)\n    case 7:\n        return fmt.Sprintf(\"\
    %d\", x/7)\n    case 8:\n        return fmt.Sprintf(\"%d\", x/8)\n    case 9:\n\
    \        return fmt.Sprintf(\"%d\", x/9)\n    case 10:\n        return fmt.Sprintf(\"\
    %d\", x/10)\n    default:\n        return fmt.Sprintf(\"%d\", x)\n    }\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpvkh5jqyo_test.go:66: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpvkh5jqyo_test.go:66: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpvkh5jqyo_test.go:66:\
    \ expected '11101010', got '117'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpvkh5jqyo_test.go:66: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpvkh5jqyo_test.go:66: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpvkh5jqyo_test.go:66: expected\
    \ '111', got '3'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpvkh5jqyo_test.go:66:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpvkh5jqyo_test.go:66: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpvkh5jqyo_test.go:66: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpvkh5jqyo_test.go:66: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpvkh5jqyo_test.go:66:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpvkh5jqyo_test.go:66: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074670
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    if x == 0 {\n \
    \       fmt.Println(\"Cannot convert 0 to a number\")\n        return \"\"\n \
    \   }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= \nfunc TestChange_Base(t *testing.T) {\n  candidate\
    \ := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8, 3), expected:\
    \ \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n     { actual:\
    \ candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16, 2),\
    \ expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n\
    \     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsxaio1fp_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 2 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%d\", x*x)\n    case 3:\n        if x\
    \ < 3 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        return\
    \ fmt.Sprintf(\"%d\", x*x*x)\n    case 4:\n        if x < 4 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x*x*x*x)\n\
    \    case 5:\n        if x < 5 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        return fmt.Sprintf(\"%d\", x*x*x*x*x)\n    case 6:\n     \
    \   if x < 6 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n       \
    \ return fmt.Sprintf(\"%d\", x*x*x*x*x*x)\n    case 7:\n        if x < 7 {\n \
    \           return fmt.Sprintf(\"%d\", x)\n        }\n        return fmt.Sprintf(\"\
    %d\", x*x*x*x*x*x*x)\n    case 8:\n        if x < 8 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x*x*x*x*x*x*x*x)\n   \
    \ case 9:\n        if x < 9 {\n            return fmt.Sprintf(\"%d\", x)\n   \
    \     }\n        return fmt.Sprintf(\"%d\", x*x*x*x*x*x*x*x*x)\n    case 10:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%d\", x*x*x*x*x*x*x*x*x*x)\n    default:\n      \
    \  return fmt.Sprintf(\"%d\", x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpctr21p3y_test.go:93: expected '22', got '512'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpctr21p3y_test.go:93: expected\
    \ '100', got '729'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n      \
    \  tmpctr21p3y_test.go:93: expected '11101010', got '54756'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpctr21p3y_test.go:93: expected '10000', got '256'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmpctr21p3y_test.go:93: expected\
    \ '1000', got '64'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n      \
    \  tmpctr21p3y_test.go:93: expected '111', got '49'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"base is less than 10\")\n        return \"\"\n    }\n\
    \    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base is less than 10\nbase is less than 10\nbase is less than 10\nbase\
    \ is less than 10\nbase is less than 10\nbase is less than 10\nbase is less than\
    \ 10\nbase is less than 10\nbase is less than 10\nbase is less than 10\nbase is\
    \ less than 10\nbase is less than 10\n--- FAIL: TestChange_Base (0.00s)\n    ---\
    \ FAIL: TestChange_Base/test_num__0 (0.00s)\n        tmpbjkuz1ou_test.go:51: expected\
    \ '22', got ''\n    --- FAIL: TestChange_Base/test_num__1 (0.00s)\n        tmpbjkuz1ou_test.go:51:\
    \ expected '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n\
    \        tmpbjkuz1ou_test.go:51: expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmpbjkuz1ou_test.go:51: expected '10000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__4 (0.00s)\n        tmpbjkuz1ou_test.go:51: expected\
    \ '1000', got ''\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmpbjkuz1ou_test.go:51:\
    \ expected '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n\
    \        tmpbjkuz1ou_test.go:51: expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7\
    \ (0.00s)\n        tmpbjkuz1ou_test.go:51: expected '3', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__8 (0.00s)\n        tmpbjkuz1ou_test.go:51: expected\
    \ '4', got ''\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n        tmpbjkuz1ou_test.go:51:\
    \ expected '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n \
    \       tmpbjkuz1ou_test.go:51: expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11\
    \ (0.00s)\n        tmpbjkuz1ou_test.go:51: expected '7', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%0*d\", x, x)\n    case 3:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100)\n    case 5:\n        return fmt.Sprintf(\"%0*d\", x, x*1000)\n\
    \    case 6:\n        return fmt.Sprintf(\"%0*d\", x, x*10000)\n    case 7:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%0*d\", x,\
    \ x*100000000)\n    case 11:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000)\n\
    \    case 12:\n        return fmt.Sprintf(\"%0*d\", x, x*10000000000)\n    case\
    \ 13:\n        return fmt.Sprintf(\"%0*d\", x, x*100000000000)\n    case 14:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*1000000000000)\n    case 15:\n    \
    \    return fmt.Sprintf(\"%0*d\", x, x*10000000000000)\n    case 16:\n       \
    \ return fmt.Sprintf(\"%0*d\", x, x*100000000000000)\n    case 17:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*1000000000000000)\n    case 18:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000000000000)\n    case 19:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*1000000000000000000)\n    case 21:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*10000000000000000000)\n    case 22:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*100000000000000000000)\n    case 23:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*1000000000000000000000)\n    case 24:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*10000000000000000000000)\n    case 25:\n        return fmt.Sprintf(\"%0*d\"\
    , x, x*100000000000000000000000)\n    case 26:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000000000000000000000000)\n    case 27:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000000000000000000000)\n    case 28:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100000000000000000000000000)\n    case 29:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*1000000000000000000000000000)\n    case 30:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000000000000000000000000)\n    case 31:\n        return fmt.Sprintf(\"\
    %0\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcx0chcd1_test.go:78:28: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be less than 2\")\n        return \"\"\n\
    \    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_q0o4fn2_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjxjh87bb_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than 2\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpt2zi18xg_test.go:51: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpt2zi18xg_test.go:51: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpt2zi18xg_test.go:51:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpt2zi18xg_test.go:51: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpt2zi18xg_test.go:51: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpt2zi18xg_test.go:51: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpt2zi18xg_test.go:51:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpt2zi18xg_test.go:51: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpt2zi18xg_test.go:51: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpt2zi18xg_test.go:51: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpt2zi18xg_test.go:51:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpt2zi18xg_test.go:51: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpanq_k3np_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1.\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjxjh87bb_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp6dy1yu3k_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmp6dy1yu3k_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp6dy1yu3k_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp6dy1yu3k_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp6dy1yu3k_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmp6dy1yu3k_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074527
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x -= (x % base)\n\
    \    x /= base\n    x += (x % base)\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8rqmbp46_test.go:48: expected '22', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8rqmbp46_test.go:48: expected\
    \ '100', got '3'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8rqmbp46_test.go:48:\
    \ expected '11101010', got '118'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8rqmbp46_test.go:48: expected '10000', got '8'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8rqmbp46_test.go:48: expected '1000', got '4'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8rqmbp46_test.go:48: expected\
    \ '111', got '4'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8rqmbp46_test.go:48:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp8rqmbp46_test.go:48: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8rqmbp46_test.go:48: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8rqmbp46_test.go:48: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8rqmbp46_test.go:48:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp8rqmbp46_test.go:48: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpyk4o2k79_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"Base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    switch base {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n\
    \    case 3:\n        return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return\
    \ fmt.Sprintf(\"%d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\",\
    \ x*1000)\n    case 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case\
    \ 7:\n        return fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%d\", x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\"\
    , x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n\
    \    default:\n        fmt.Printf(\"Base must be less than 10\\n\")\n        return\
    \ \"\"\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10\nBase must be less than 10\nBase must be less\
    \ than 10\nBase must be less than 10\nBase must be less than 10\nBase must be\
    \ less than 10\nBase must be less than 10\nBase must be less than 10\nBase must\
    \ be less than 10\nBase must be less than 10\nBase must be less than 10\nBase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpdl9ygu32_test.go:71: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpdl9ygu32_test.go:71: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpdl9ygu32_test.go:71:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpdl9ygu32_test.go:71: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpdl9ygu32_test.go:71: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpdl9ygu32_test.go:71: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpdl9ygu32_test.go:71:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpdl9ygu32_test.go:71: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpdl9ygu32_test.go:71: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpdl9ygu32_test.go:71: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpdl9ygu32_test.go:71:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpdl9ygu32_test.go:71: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%d\", x)\n    case 3:\n       \
    \ return fmt.Sprintf(\"%d\", x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %d\", x*100)\n    case 5:\n        return fmt.Sprintf(\"%d\", x*1000)\n    case\
    \ 6:\n        return fmt.Sprintf(\"%d\", x*10000)\n    case 7:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000)\n    case 8:\n        return fmt.Sprintf(\"%d\"\
    , x*1000000)\n    case 9:\n        return fmt.Sprintf(\"%d\", x*10000000)\n  \
    \  case 10:\n        return fmt.Sprintf(\"%d\", x*100000000)\n    case 11:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000)\n    case 12:\n        return\
    \ fmt.Sprintf(\"%d\", x*10000000000)\n    case 13:\n        return fmt.Sprintf(\"\
    %d\", x*100000000000)\n    case 14:\n        return fmt.Sprintf(\"%d\", x*1000000000000)\n\
    \    case 15:\n        return fmt.Sprintf(\"%d\", x*10000000000000)\n    case\
    \ 16:\n        return fmt.Sprintf(\"%d\", x*100000000000000)\n    case 17:\n \
    \       return fmt.Sprintf(\"%d\", x*1000000000000000)\n    case 18:\n       \
    \ return fmt.Sprintf(\"%d\", x*10000000000000000)\n    case 19:\n        return\
    \ fmt.Sprintf(\"%d\", x*100000000000000000)\n    case 20:\n        return fmt.Sprintf(\"\
    %d\", x*1000000000000000000)\n    default:\n        return fmt.Sprintf(\"%d\"\
    , x)\n    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '22', got '80'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '100', got '90'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '10000', got '16'\n    ---\
    \ FAIL: TestChange_Base/test_num__4 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '1000', got '8'\n    --- FAIL: TestChange_Base/test_num__5 (0.00s)\n       \
    \ tmp3plgpr5g_test.go:86: expected '111', got '7'\n    --- FAIL: TestChange_Base/test_num__6\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '2', got '20'\n    --- FAIL:\
    \ TestChange_Base/test_num__7 (0.00s)\n        tmp3plgpr5g_test.go:86: expected\
    \ '3', got '300'\n    --- FAIL: TestChange_Base/test_num__8 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n\
    \        tmp3plgpr5g_test.go:86: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmp3plgpr5g_test.go:86: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmp3plgpr5g_test.go:86:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074529
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return strconv.Itoa(x)\n    case 3:\n        return\
    \ strconv.Itoa(x * 10)\n    case 4:\n        return strconv.Itoa(x * 100)\n  \
    \  case 5:\n        return strconv.Itoa(x * 1000)\n    case 6:\n        return\
    \ strconv.Itoa(x * 10000)\n    case 7:\n        return strconv.Itoa(x * 100000)\n\
    \    case 8:\n        return strconv.Itoa(x * 1000000)\n    case 9:\n        return\
    \ strconv.Itoa(x * 10000000)\n    case 10:\n        return strconv.Itoa(x * 100000000)\n\
    \    case 11:\n        return strconv.Itoa(x * 1000000000)\n    case 12:\n   \
    \     return strconv.Itoa(x * 10000000000)\n    case 13:\n        return strconv.Itoa(x\
    \ * 100000000000)\n    case 14:\n        return strconv.Itoa(x * 1000000000000)\n\
    \    case 15:\n        return strconv.Itoa(x * 10000000000000)\n    case 16:\n\
    \        return strconv.Itoa(x * 100000000000000)\n    case 17:\n        return\
    \ strconv.Itoa(x * 1000000000000000)\n    case 18:\n        return strconv.Itoa(x\
    \ * 10000000000000000)\n    case 19:\n        return strconv.Itoa(x * 100000000000000000)\n\
    \    case 20:\n        return strconv.Itoa(x * 1000000000000000000)\n    default:\n\
    \        fmt.Println(\"Base number out of range\")\n    }\n    return \"\"\n}\n\
    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu36ms1eu_test.go:20:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:22:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:24:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:26:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:28:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:30:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:32:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:34:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:36:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:38:16: undefined: strconv

    /tmp/tmpu36ms1eu_test.go:38:16: too many errors

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\",\
    \ x)\n        }\n        return fmt.Sprintf(\"%d\", x/10)\n    case 3:\n     \
    \   if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n      \
    \  return fmt.Sprintf(\"%d\", x/10) + fmt.Sprintf(\"%d\", x%10)\n    case 4:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       return fmt.Sprintf(\"%d\", x/10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10)\n    case 5:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10)\n    case\
    \ 6:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%d\", x/10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10)\n    case\
    \ 7:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%d\", x/10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10)\n    case 8:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        return fmt.Sprintf(\"%d\", x/10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10)\n    case\
    \ 9:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        return fmt.Sprintf(\"%d\", x/10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10)\n    case\
    \ 10:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n      \
    \  }\n        return fmt.Sprintf(\"%d\", x/10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"\
    %d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.Sprintf(\"%d\", x%10) + fmt.S\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc8w88rz4_test.go:64:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074671
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_9zf64tg_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074526
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        return fmt.Sprintf(\"%0*d\", x, x)\n    case 3:\n  \
    \      return fmt.Sprintf(\"%0*d\", x, x*10)\n    case 4:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*100)\n    case 5:\n        return fmt.Sprintf(\"%0*d\", x, x*1000)\n\
    \    case 6:\n        return fmt.Sprintf(\"%0*d\", x, x*10000)\n    case 7:\n\
    \        return fmt.Sprintf(\"%0*d\", x, x*100000)\n    case 8:\n        return\
    \ fmt.Sprintf(\"%0*d\", x, x*1000000)\n    case 9:\n        return fmt.Sprintf(\"\
    %0*d\", x, x*10000000)\n    case 10:\n        return fmt.Sprintf(\"%0*d\", x,\
    \ x*100000000)\n    default:\n        return fmt.Sprintf(\"%0*d\", x, x*1000000000)\n\
    \    }\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpck2b4fm8_test.go:66: expected '22', got '00000080'\n   \
    \ --- FAIL: TestChange_Base/test_num__1 (0.00s)\n        tmpck2b4fm8_test.go:66:\
    \ expected '100', got '000000090'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n\
    \        tmpck2b4fm8_test.go:66: expected '11101010', got '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000234'\n\
    \    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n        tmpck2b4fm8_test.go:66:\
    \ expected '10000', got '0000000000000016'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpck2b4fm8_test.go:66: expected '1000', got '00000008'\n \
    \   --- FAIL: TestChange_Base/test_num__5 (0.00s)\n        tmpck2b4fm8_test.go:66:\
    \ expected '111', got '0000007'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n\
    \        tmpck2b4fm8_test.go:66: expected '2', got '20'\n    --- FAIL: TestChange_Base/test_num__7\
    \ (0.00s)\n        tmpck2b4fm8_test.go:66: expected '3', got '300'\n    --- FAIL:\
    \ TestChange_Base/test_num__8 (0.00s)\n        tmpck2b4fm8_test.go:66: expected\
    \ '4', got '4000'\n    --- FAIL: TestChange_Base/test_num__9 (0.00s)\n       \
    \ tmpck2b4fm8_test.go:66: expected '5', got '50000'\n    --- FAIL: TestChange_Base/test_num__10\
    \ (0.00s)\n        tmpck2b4fm8_test.go:66: expected '6', got '600000'\n    ---\
    \ FAIL: TestChange_Base/test_num__11 (0.00s)\n        tmpck2b4fm8_test.go:66:\
    \ expected '7', got '7000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    x /= base\n    x %= base\n\
    \    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T) {\n\
    \  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '22', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '100', got '9'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpg4w_y9w2_test.go:50:\
    \ expected '11101010', got '234'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpg4w_y9w2_test.go:50: expected '10000', got '16'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpg4w_y9w2_test.go:50: expected '1000', got '8'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpg4w_y9w2_test.go:50: expected\
    \ '111', got '7'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074530
- exit_code: 2
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    switch base\
    \ {\n    case 2:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\",\
    \ x)\n        }\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case\
    \ 3:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n       \
    \ }\n        x /= 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n\
    \    case 4:\n        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n\
    \        }\n        x /= 10\n        x /= 10\n        x /= 10\n        return\
    \ fmt.Sprintf(\"%d\", x)\n    case 5:\n        if x < 10 {\n            return\
    \ fmt.Sprintf(\"%d\", x)\n        }\n        x /= 10\n        x /= 10\n      \
    \  x /= 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 6:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 7:\n        if x < 10\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        x /= 10\n \
    \       x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 8:\n        if x < 10\
    \ {\n            return fmt.Sprintf(\"%d\", x)\n        }\n        x /= 10\n \
    \       x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    case 9:\n\
    \        if x < 10 {\n            return fmt.Sprintf(\"%d\", x)\n        }\n \
    \       x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x\
    \ /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        return fmt.Sprintf(\"\
    %d\", x)\n    case 10:\n        if x < 10 {\n            return fmt.Sprintf(\"\
    %d\", x)\n        }\n        x /= 10\n        x /= 10\n        x /= 10\n     \
    \   x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n        x /= 10\n\
    \        x /= 10\n        return fmt.Sprintf(\"%d\", x)\n    default:\n      \
    \  fmt.Printf(\"base %d is not supported\\n\", base)\n    }\n}\n\nfunc TestChange_Base(t\
    \ *testing.T) {\n  candidate := change_base\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected:\
    \ \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\" },\n  \
    \   { actual: candidate(16, 2), expected: \"10000\" },\n     { actual: candidate(8,\
    \ 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected: \"111\"\
    \ },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual: candidate(3,\
    \ 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected: \"4\" },\n\
    \     { actual: candidate(5, 6), expected: \"5\" },\n     { actual: candidate(6,\
    \ 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected: \"7\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5i770wlw_test.go:112:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n    }\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\nfunc\
    \ TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(8, 3), expected: \"22\" },\n     { actual: candidate(9,\
    \ 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected: \"11101010\"\
    \ },\n     { actual: candidate(16, 2), expected: \"10000\" },\n     { actual:\
    \ candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7, 2), expected:\
    \ \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n     { actual:\
    \ candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4, 5), expected:\
    \ \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n     { actual:\
    \ candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7, 8), expected:\
    \ \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc3m328li_test.go:120:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074530
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    x /= base\n  \
    \  x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp8s8mns_f_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp8s8mns_f_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp8s8mns_f_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp8s8mns_f_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp8s8mns_f_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp8s8mns_f_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074535
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"base must be greater than or equal to 2\")\n      \
    \  return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"base must be\
    \ less than or equal to 10\")\n        return \"\"\n    }\n    x /= base\n   \
    \ x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpb3rgm5uj_test.go:55: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpb3rgm5uj_test.go:55: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpb3rgm5uj_test.go:55: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpb3rgm5uj_test.go:55: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpb3rgm5uj_test.go:55:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpb3rgm5uj_test.go:55: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074528
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Printf(\"base must be less than 10\\n\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "base must be less than 10\nbase must be less than 10\nbase must be less\
    \ than 10\nbase must be less than 10\nbase must be less than 10\nbase must be\
    \ less than 10\nbase must be less than 10\nbase must be less than 10\nbase must\
    \ be less than 10\nbase must be less than 10\nbase must be less than 10\nbase\
    \ must be less than 10\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpifxomtu3_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmpifxomtu3_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpifxomtu3_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpifxomtu3_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpifxomtu3_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmpifxomtu3_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074667
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 2.\")\n        return \"\"\
    \n    }\n    x /= base\n    x %= base\n    if x < 10 {\n        return fmt.Sprintf(\"\
    %d\", x)\n    }\n    x /= 10\n    x %= base\n    return fmt.Sprintf(\"%d%d\",\
    \ x, base)\n}\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmp1nlut_1c_test.go:56: expected '22', got '2'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmp1nlut_1c_test.go:56: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmp1nlut_1c_test.go:56:\
    \ expected '11101010', got '1'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmp1nlut_1c_test.go:56: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmp1nlut_1c_test.go:56: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmp1nlut_1c_test.go:56: expected\
    \ '111', got '1'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmp1nlut_1c_test.go:56:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmp1nlut_1c_test.go:56: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmp1nlut_1c_test.go:56: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmp1nlut_1c_test.go:56: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmp1nlut_1c_test.go:56:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmp1nlut_1c_test.go:56: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than or equal to 2.\")\n     \
    \   return \"\"\n    }\n    if base > 10 {\n        fmt.Println(\"Base must be\
    \ less than or equal to 10.\")\n        return \"\"\n    }\n    if x == 0 {\n\
    \        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= \nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n  \
    \   { actual: candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234,\
    \ 2), expected: \"11101010\" },\n     { actual: candidate(16, 2), expected: \"\
    10000\" },\n     { actual: candidate(8, 2), expected: \"1000\" },\n     { actual:\
    \ candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected:\
    \ \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n     { actual:\
    \ candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected:\
    \ \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n     { actual:\
    \ candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxnv92c5f_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074532
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqvuynpnz_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 2\
    \ {\n        fmt.Println(\"Base must be greater than 1\")\n        return \"\"\
    \n    }\n    if base > 10 {\n        fmt.Println(\"Base must be less than 10\"\
    )\n        return \"\"\n    }\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n \
    \   x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n  \
    \  x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n   \
    \ x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x\
    \ %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /=\
    \ base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n\
    \    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n \
    \   x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n  \
    \  x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n   \
    \ x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x\
    \ /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n    x %=\
    \ base\n    x /= base\n    x %= base\n    x /= base\n    x %= base\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    x \nfunc TestChange_Base(t *testing.T)\
    \ {\n  candidate := change_base\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(8,\
    \ 3), expected: \"22\" },\n     { actual: candidate(9, 3), expected: \"100\" },\n\
    \     { actual: candidate(234, 2), expected: \"11101010\" },\n     { actual: candidate(16,\
    \ 2), expected: \"10000\" },\n     { actual: candidate(8, 2), expected: \"1000\"\
    \ },\n     { actual: candidate(7, 2), expected: \"111\" },\n     { actual: candidate(2,\
    \ 3), expected: \"2\" },\n     { actual: candidate(3, 4), expected: \"3\" },\n\
    \     { actual: candidate(4, 5), expected: \"4\" },\n     { actual: candidate(5,\
    \ 6), expected: \"5\" },\n     { actual: candidate(6, 7), expected: \"6\" },\n\
    \     { actual: candidate(7, 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmporfg_cmx_test.go:121:6: expected ''('', found TestChange_Base

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074529
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if base < 10\
    \ {\n        fmt.Println(\"Base must be less than 10.\")\n        return \"\"\n\
    \    }\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n}\n\n\
    func TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Base must be less than 10.\nBase must be less than 10.\nBase must be less\
    \ than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase must\
    \ be less than 10.\nBase must be less than 10.\nBase must be less than 10.\nBase\
    \ must be less than 10.\nBase must be less than 10.\nBase must be less than 10.\n\
    Base must be less than 10.\n--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmph01nunyn_test.go:51: expected '22', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmph01nunyn_test.go:51: expected\
    \ '100', got ''\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmph01nunyn_test.go:51:\
    \ expected '11101010', got ''\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmph01nunyn_test.go:51: expected '10000', got ''\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmph01nunyn_test.go:51: expected '1000', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmph01nunyn_test.go:51: expected\
    \ '111', got ''\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmph01nunyn_test.go:51:\
    \ expected '2', got ''\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n  \
    \      tmph01nunyn_test.go:51: expected '3', got ''\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmph01nunyn_test.go:51: expected '4', got ''\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmph01nunyn_test.go:51: expected\
    \ '5', got ''\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmph01nunyn_test.go:51:\
    \ expected '6', got ''\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n \
    \       tmph01nunyn_test.go:51: expected '7', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074672
- exit_code: 1
  program: "package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7,\
    \ 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    x /= base\n\
    \    x %= base\n    x /= base\n    x %= base\n    return fmt.Sprintf(\"%d\", x)\n\
    }\n\nfunc TestChange_Base(t *testing.T) {\n  candidate := change_base\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(8, 3), expected: \"22\" },\n     { actual:\
    \ candidate(9, 3), expected: \"100\" },\n     { actual: candidate(234, 2), expected:\
    \ \"11101010\" },\n     { actual: candidate(16, 2), expected: \"10000\" },\n \
    \    { actual: candidate(8, 2), expected: \"1000\" },\n     { actual: candidate(7,\
    \ 2), expected: \"111\" },\n     { actual: candidate(2, 3), expected: \"2\" },\n\
    \     { actual: candidate(3, 4), expected: \"3\" },\n     { actual: candidate(4,\
    \ 5), expected: \"4\" },\n     { actual: candidate(5, 6), expected: \"5\" },\n\
    \     { actual: candidate(6, 7), expected: \"6\" },\n     { actual: candidate(7,\
    \ 8), expected: \"7\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChange_Base (0.00s)\n    --- FAIL: TestChange_Base/test_num__0\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '22', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__1 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '100', got '0'\n    --- FAIL: TestChange_Base/test_num__2 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '11101010', got '0'\n    --- FAIL: TestChange_Base/test_num__3 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '10000', got '0'\n    --- FAIL: TestChange_Base/test_num__4\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '1000', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__5 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '111', got '0'\n    --- FAIL: TestChange_Base/test_num__6 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '2', got '0'\n    --- FAIL: TestChange_Base/test_num__7 (0.00s)\n \
    \       tmpghuth_ic_test.go:49: expected '3', got '0'\n    --- FAIL: TestChange_Base/test_num__8\
    \ (0.00s)\n        tmpghuth_ic_test.go:49: expected '4', got '0'\n    --- FAIL:\
    \ TestChange_Base/test_num__9 (0.00s)\n        tmpghuth_ic_test.go:49: expected\
    \ '5', got '0'\n    --- FAIL: TestChange_Base/test_num__10 (0.00s)\n        tmpghuth_ic_test.go:49:\
    \ expected '6', got '0'\n    --- FAIL: TestChange_Base/test_num__11 (0.00s)\n\
    \        tmpghuth_ic_test.go:49: expected '7', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074528
