language: go_test.go
name: HumanEval_49_modp
results:
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 3, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpdvctaddo_test.go:54: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpdvctaddo_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpdvctaddo_test.go:54: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpdvctaddo_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpdvctaddo_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpdvctaddo_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p) + modp(n\
    \ - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmpnensmeqm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t\
    /tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e5d, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e60,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e63, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e66,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e69, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e6c,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e6f, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e72,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e75, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e78,\
    \ 0x6"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - 1, p) % p\n    }\n    if p\
    \ < n {\n        return modp(n, p - 1) % p\n    }\n    return modp(n / 2, p *\
    \ p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpa4r60_di_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpa4r60_di_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpa4r60_di_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpa4r60_di_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpa4r60_di_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpa4r60_di_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n - p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=2)', got '%!s(int=1000)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=4)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 13 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 15 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 19 {\n        return modp(n / 2, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 25 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 27 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 31 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 35 {\n        return modp(n / 2, p)\n    }\n    if p < 37 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 39 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 41 {\n        return modp(n / 2, p)\n    }\n    if p < 43 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 45 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 47 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 49 {\n        return modp(n / 2, p)\n    }\n    if p < 51 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 53 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 55 {\n        return modp(n / 2, p)\n    }\n    if p < 57 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 59 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 61 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 63 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0r_is6q__test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p) % p\n\
    \    }\n    return modp(n - 2, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp_3eoolkl_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp_3eoolkl_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_3eoolkl_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp_3eoolkl_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmp_3eoolkl_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + 1\n    }\n    if p\
    \ < 3 {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1, p)*(p-1)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpecvznwrn_test.go:57: expected '%!s(int=3)', got '%!s(int=80)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpecvznwrn_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpecvznwrn_test.go:57: expected '%!s(int=8)', got '%!s(int=1100)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpecvznwrn_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpecvznwrn_test.go:57: expected '%!s(int=4)', got '%!s(int=5629499534213120)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpecvznwrn_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=22517998136852480)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmps81uubq3_test.go:19 +0x9f fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ff\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160428 sp=0xc020160408 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160468 sp=0xc020160448 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:3"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n / 2, p)\n    }\n    if p < 7 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 11 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n    if p < 17 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 29 {\n        return modp(n / 2, p)\n    }\n    if p < 31 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 37 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 43 {\n        return modp(n / 2, p)\n    }\n    if p < 49 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 63 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 69 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 73 {\n        return modp(n / 2, p)\n    }\n    if p < 79 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 83 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 89 {\n        return modp(n / 2, p)\n    }\n    if p < 97 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 103 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 109 {\n        return modp(n / 2, p)\n    }\n    if p\
    \ < 115 {\n        return modp(n / 2, p)\n    }\n    if p < 121 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 127 {\n        return modp(n / 2, p)\n   \
    \ }\n    if p < 133 {\n        return modp(n / 2, p)\n    }\n    if p < 139 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 147 {\n        return modp(n\
    \ / 2, p)\n    }\n    if p < 153 {\n        return modp(n / 2, p)\n    }\n   \
    \ if p < 159 {\n        return modp(n / 2, p)\n    }\n    if \nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpk1kwbkt3_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p + p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpytsfim5q_test.go:54: expected '%!s(int=3)', got '%!s(int=1295)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpytsfim5q_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpytsfim5q_test.go:54: expected '%!s(int=8)', got '%!s(int=20735)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpytsfim5q_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=-5757275536129349623)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmpytsfim5q_test.go:54: expected '%!s(int=3)', got '%!s(int=2424274745770365009)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=8)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p > 1 {\n        return modp(n - 1, modp(p, p))\n\
    \    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0x5?, 0x5?)\n\
    \t/tmp/tmpwgr86ncc_test.go:19 +0xa5 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef705\n\
    command-line-arguments_test.modp(0x5, 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef69b\ncommand-line-arguments_test.modp(0x5,\
    \ 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef69b\n\
    command-line-arguments_test.modp(0x5, 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef69b\ncommand-line-arguments_test.modp(0x5,\
    \ 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef69b\n\
    command-line-arguments_test.modp(0x5, 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef69b\ncommand-line-arguments_test.modp(0x5,\
    \ 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef69b\n\
    command-line-arguments_test.modp(0x5, 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef69b\ncommand-line-arguments_test.modp(0x5,\
    \ 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef69b\n\
    command-line-arguments_test.modp(0x5, 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef69b\ncommand-line-arguments_test.modp(0x5,\
    \ 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef69b\n\
    command-line-arguments_test.modp(0x5, 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef69b\ncommand-line-arguments_test.modp(0x5,\
    \ 0x0?)\n\t/tmp/tmpwgr86ncc_test.go:30 +0x3b fp=0xc0201e0528 sp="
  timestamp: 1660075062
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < p {\n        return modp(n\
    \ - 3, p)\n    }\n    return modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmp7hp8w3mb_test.go:19 +0xa9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef709\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38 +0x58\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7hp8w3mb_test.go:38"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p == 1 {\n        return n\n    }\n    if p == 2 {\n      \
    \  return modp(n - 1, p)\n    }\n    if p == 3 {\n        return modp(n - 1, modp(n\
    \ - 1, p))\n    }\n    if p == 4 {\n        return modp(n - 1, modp(n - 1, modp(n\
    \ - 1, p)))\n    }\n    if p == 5 {\n        return modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, p))))\n    }\n    if p == 6 {\n        return modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))\n    }\n    if p == 7 {\n   \
    \     return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, p))))))\n    }\n    if p == 8 {\n        return modp(n - 1, modp(n - 1,\
    \ modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p)))))))\n    }\n\
    \    if p == 9 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n -\
    \ 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))))))\n    }\n    if\
    \ p == 10 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))))))\n    }\n    if\
    \ p == 11 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))))))))\n\
    \    }\n    if p == 12 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ modp(n - 1, p))))))))))\n    }\n    if p == 13 {\n        return modp(n - 1,\
    \ modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n\
    \ - 1, modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1, p))))))))))\n    }\n  \
    \  if p == 14 {\n        return modp(n - 1, modp(n - 1, modp(n - 1, modp(n - 1,\
    \ \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6dv2gnmp_test.go:45:81: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p*p + 2)\n\
    \    }\n    return modp(n - 1, p*p + 3)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpb_dv6qnq_test.go:54: expected '%!s(int=3)', got '%!s(int=787)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpb_dv6qnq_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpb_dv6qnq_test.go:54: expected '%!s(int=8)', got '%!s(int=15379)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpb_dv6qnq_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=-6064299110150597015)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmpb_dv6qnq_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpb_dv6qnq_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpaycqrq4q_test.go:57: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpaycqrq4q_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpaycqrq4q_test.go:57: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpaycqrq4q_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpaycqrq4q_test.go:57: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpaycqrq4q_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ == p {\n        return n\n    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg__qw0nn_test.go:57: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg__qw0nn_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpg__qw0nn_test.go:57: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpg__qw0nn_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpg__qw0nn_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpg__qw0nn_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    if n < p\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmp251uau35_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp251uau35_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp251uau35_test.go:3"
  timestamp: 1660075062
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) % p\n    }\n    if p\
    \ < 3 {\n        return modp(n - 2, p) % p\n    }\n    return modp(n - 3, p) %\
    \ p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpondzp1e9_test.go:57: expected '%!s(int=3)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpondzp1e9_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpondzp1e9_test.go:57: expected '%!s(int=8)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpondzp1e9_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpondzp1e9_test.go:57: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpondzp1e9_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(p, n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p - 1) + modp(n - 1, p - 2)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075073
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p - 1) + p\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpzbah95t2_test.go:54: expected '%!s(int=3)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpzbah95t2_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=6151)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpzbah95t2_test.go:54: expected '%!s(int=8)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpzbah95t2_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=5150)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpzbah95t2_test.go:54: expected '%!s(int=4)', got '%!s(int=40)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpzbah95t2_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=41)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 2, p)\n    }\n\
    \    return modp(n - 3, p) + modp(n - 4, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999a0a?,\
    \ 0x5?)\n\t/tmp/tmp_8keb5i1_test.go:19 +0xf9 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef759\n\
    command-line-arguments_test.modp(0xfffffffffd999a0d, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a10,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a13, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a16,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a19, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a1c,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a1f, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a22,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a25, 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38\
    \ +0x7b fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6db\ncommand-line-arguments_test.modp(0xfffffffffd999a28,\
    \ 0x5)\n\t/tmp/tmp_8keb5i1_test.go:38 +0x7b fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6db\n\
    command-line-arguments_test.modp(0xfffffffffd999a2b, 0x5)\n\t/tmp/tmp"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n - p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=2)', got '%!s(int=1000)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=4)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n-1, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p < 5 {\n        return modp(n-1, p)\n    }\n    if p\
    \ < 6 {\n        return modp(n - 1, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n-1, p)\n    }\n    if p < 8 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 9 {\n        return modp(n-1, p)\n    }\n    if p < 10 {\n       \
    \ return modp(n - 1, p)\n    }\n    if p < 11 {\n        return modp(n-1, p)\n\
    \    }\n    if p < 12 {\n        return modp(n - 1, p)\n    }\n    if p < 13 {\n\
    \        return modp(n-1, p)\n    }\n    if p < 14 {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < 15 {\n        return modp(n-1, p)\n    }\n    if p\
    \ < 16 {\n        return modp(n - 1, p)\n    }\n    if p < 17 {\n        return\
    \ modp(n-1, p)\n    }\n    if p < 18 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 19 {\n        return modp(n-1, p)\n    }\n    if p < 20 {\n      \
    \  return modp(n - 1, p)\n    }\n    if p < 21 {\n        return modp(n-1, p)\n\
    \    }\n    if p < 22 {\n        return modp(n - 1, p)\n    }\n    if p < 23 {\n\
    \        return modp(n-1, p)\n    }\n    if p < 24 {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < 25 {\n        return modp(n-1, p)\n    }\n    if p\
    \ < 26 {\n        return modp(n - 1, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n-1, p)\n    }\n    if p < 28 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 29 {\n        return modp(n-1, p)\n    }\n    if p < 30 {\n      \
    \  return modp(n - 1, p)\n    }\n    if p < 31 {\n        return modp(n-1, p)\n\
    \    }\n    if p < 32 {\n        return modp(n - 1, p)\n    }\n    if p < 33 {\n\
    \        return modp(n-1, p)\n    }\n    if p < 34 {\n        return modp(\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2f8n9he8_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - 1, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - 1)\n    }\n    return modp(n / 2, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7lc0ophw_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7lc0ophw_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=1101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7lc0ophw_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7lc0ophw_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7lc0ophw_test.go:57: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7lc0ophw_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + modp(n - 1, p)\n \
    \   }\n    if p > 2 {\n        return modp(n - 1, p)\n    }\n    if p < p {\n\
    \        return modp(n - 1, p) + modp(n - 1, p)\n    }\n    return modp(n - 1,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpznobkssu_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpznobkssu_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpznobkssu_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpznobkssu_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpznobkssu_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpznobkssu_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n - p + modp(n - p,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp7x2x032v_test.go:48: expected '%!s(int=2)', got '%!s(int=5546)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp7x2x032v_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7x2x032v_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7x2x032v_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7x2x032v_test.go:48: expected '%!s(int=4)', got '%!s(int=75)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7x2x032v_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=82)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n = -n\n\
    \    }\n    if p < 0 {\n        p = -p\n    }\n    if n == 0 {\n        return\
    \ 0\n    }\n    if p == 0 {\n        return n\n    }\n    if p > n {\n       \
    \ p = n\n    }\n    if p > 1 {\n        return modp(n / p, p)\n    }\n    if n\
    \ == 1 {\n        return 1\n    }\n    if n == 2 {\n        return p\n    }\n\
    \    if n == p {\n        return p\n    }\n    if p > p {\n        return modp(n\
    \ / p, p)\n    }\n    if p < p {\n        return modp(n / p, p)\n    }\n    if\
    \ n == p {\n        return p\n    }\n    if n == 1 {\n        return n\n    }\n\
    \    if n == 2 {\n        return n\n    }\n    if n == p {\n        return n\n\
    \    }\n    if n == 1 {\n        return n\n    }\n    if n == 2 {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n == 1 {\n      \
    \  return n\n    }\n    if n == 2 {\n        return n\n    }\n    if n == p {\n\
    \        return n\n    }\n    if n == 1 {\n        return n\n    }\n    if n ==\
    \ 2 {\n        return n\n    }\n    if n == p {\n        return n\n    }\n   \
    \ if n == 1 {\n        return n\n    }\n    if n == 2 {\n        return n\n  \
    \  }\n    if n == p {\n        return n\n    }\n    if n == 1 {\n        return\
    \ n\n    }\n    if n == 2 {\n        return n\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n == 1 {\n        return n\n    }\n    if n == 2 {\n\
    \        return n\n    }\n    if n == p {\n        return n\n    }\n    if n ==\
    \ 1 {\n        return n\n    }\n    if n == 2 {\n        return n\n    }\n   \
    \ if n == p {\n        return n\n    }\n    if n == 1 {\n        return n\n  \
    \  }\n    if n == 2 {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n == 1 {\n        return n\n    }\n    if n == 2 {\n      \
    \  return n\n    }\n    if n == p {\n        return n\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n\n    }\n    if n ==\
    \ p {\n        return n\n    }\n    if n == 1 {\n        return n\n    }\n   \
    \ if n == 2 {\n        return n\n    }\n    if n == p {\n        return n\n  \
    \  }\n    if n == 1 {\n        return n\n    }\n    if n == 2 {\n        return\
    \ n\n    }\n    if n == p {\n        return n\n    }\n    if n == 1 {\n      \
    \  return n\n    }\n    if n == 2 {\n        return n\n    }\n    if n == p {\n\
    \        return n\n    }\n    if n == 1 {\n        return n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp06w0pfv2_test.go:184:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(n,\
    \ p - n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz5pmfd4n_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz5pmfd4n_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz5pmfd4n_test.go:54: expected '%!s(int=8)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpz5pmfd4n_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpz5pmfd4n_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpuffzn5rv_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpuffzn5rv_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpuffzn5rv_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpuffzn5rv_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpuffzn5rv_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpuffzn5rv_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return n - p\n    }\n    return n - p + p\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpz_3wo4h3_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpz_3wo4h3_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz_3wo4h3_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz_3wo4h3_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz_3wo4h3_test.go:54: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz_3wo4h3_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p) + modp(n\
    \ - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmpnensmeqm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t\
    /tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e5d, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e60,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e63, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e66,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e69, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e6c,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e6f, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e72,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e75, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e78,\
    \ 0x6"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 2, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) + p\n    }\n    if p < 7 {\n        return modp(n - 6, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) + p\n    }\n    if p < 11 {\n        return modp(n - 10, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) + p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) + p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) + p\n    }\n    if p < 16 {\n        return modp(n - 15, p) + p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) + p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) + p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) + p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ + p\n    }\n    if p < 21 {\n        return modp(n - 20, p) + p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) + p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) + p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) + p\n    }\n    if p < 25 {\n        return modp(n - 24, p) + p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) + p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) + p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) + p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ + p\n    }\n    if p < 30 {\n        return modp(n - 29, p) + p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptd2pa534_test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=8)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p*p + 2)\n\
    \    }\n    return modp(n - 1, p*p + 4)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpv8uth828_test.go:54: expected '%!s(int=3)', got '%!s(int=845)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpv8uth828_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=491866717644363285)'\n    --- FAIL: TestModp/test_num__3\
    \ (0.00s)\n        tmpv8uth828_test.go:54: expected '%!s(int=8)', got '%!s(int=15629)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpv8uth828_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=-987177158013161047)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmpv8uth828_test.go:54: expected '%!s(int=4)', got '%!s(int=3842956868085289109)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpv8uth828_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=-7079503799015377219)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < 3 {\n        return modp(n - 1, p*2 + 1)\n\
    \    }\n    return modp(n - 1, p*2 + 2)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp91yeenn3_test.go:54: expected '%!s(int=3)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp91yeenn3_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=-55297703936)'\n    --- FAIL: TestModp/test_num__3\
    \ (0.00s)\n        tmp91yeenn3_test.go:54: expected '%!s(int=8)', got '%!s(int=50)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp91yeenn3_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=-7078106103808)'\n    --- FAIL: TestModp/test_num__5\
    \ (0.00s)\n        tmp91yeenn3_test.go:54: expected '%!s(int=4)', got '%!s(int=3758096382)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp91yeenn3_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=7516192766)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n, p - 1) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0x44d?, 0xffffffffff000093?)\n\
    \t/tmp/tmp5xc_91k2_test.go:19 +0x9f fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ff\n\
    command-line-arguments_test.modp(0x0?, 0xffffffffff000094)\n\t/tmp/tmp5xc_91k2_test.go:32\
    \ +0x58 fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0xffffffffff000095)\n\t/tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc0201603e8 sp=0xc0201603c8\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?, 0xffffffffff000096)\n\t\
    /tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0xffffffffff000097)\n\t/tmp/tmp5xc_91k2_test.go:32\
    \ +0x58 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0xffffffffff000098)\n\t/tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc020160448 sp=0xc020160428\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?, 0xffffffffff000099)\n\t\
    /tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0xffffffffff00009a)\n\t/tmp/tmp5xc_91k2_test.go:32\
    \ +0x58 fp=0xc020160488 sp=0xc020160468 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0xffffffffff00009b)\n\t/tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc0201604a8 sp=0xc020160488\
    \ pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?, 0xffffffffff00009c)\n\t\
    /tmp/tmp5xc_91k2_test.go:32 +0x58 fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6b8\n\
    command-line-arguments_test.modp(0x0?, 0xffffffffff00009d)\n\t/tmp/tmp5xc_91k2_test.go:32\
    \ +0x58 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6b8\ncommand-line-arguments_test.modp(0x0?,\
    \ 0xffffffffff0000"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p > p {\n        return\
    \ modp(n - p, p)\n    }\n    if p % 2 == 0 {\n        return modp(n / 2, p)\n\
    \    }\n    return modp(n / 2, p) + modp(n / 2, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmphyc4e35c_test.go:60: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmphyc4e35c_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=103424)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphyc4e35c_test.go:60: expected '%!s(int=8)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphyc4e35c_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=6464)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphyc4e35c_test.go:60: expected '%!s(int=4)', got '%!s(int=80)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphyc4e35c_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=80)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p > n {\n        return modp(n - 1, p)\n    }\n\
    \    if p == 2 {\n        return n\n    }\n    if p == 3 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == n {\n        return p\n    }\n    if p == 1 {\n\
    \        return modp(n - 1, p)\n    }\n    if p == 2 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 3 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p == 4 {\n        return modp(n - 1, p)\n    }\n    if p == 5 || p == 6 {\n\
    \        return modp(n - 1, p)\n    }\n    if p == 7 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 8 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p == 9 {\n        return modp(n - 1, p)\n    }\n    if p == 10 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p == 11 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p == 12 {\n        return modp(n - 1, p)\n    }\n    if p == 13 {\n\
    \        return modp(n - 1, p)\n    }\n    if p == 14 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 15 {\n        return modp(n - 1, p)\n    }\n   \
    \ if p == 16 {\n        return modp(n - 1, p)\n    }\n    if p == 17 {\n     \
    \   return modp(n - 1, p)\n    }\n    if p == 18 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p == 19 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ == 20 {\n        return modp(n - 1, p)\n    }\n    if p == 21 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p == 22 {\n        return modp(n - 1, p)\n   \
    \ }\n    if p == 100 {\n        return modp(n - 1, p)\n    }\n    if p == 101\
    \ {\n        return modp(n - 1, p)\n    }\n    if p == 102 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 103 {\n        return modp(n - 1, p)\n    }\n  \
    \  if p == 104 {\n        return modp(n - 1, p)\n    }\n    if p == 105 {\n  \
    \      return modp(n - 1, p)\n    }\n    if p == 106 {\n        return modp(n\
    \ - 1, p)\n    }\n    if p == 107 {\n        return modp(n - 1, p)\n    }\n  \
    \  if p == 108 {\n        return modp(\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv2tyvljm_test.go:130:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p > 2 {\n        return modp(n / 2, p)\n    }\n\
    \    if n % 2 == 0 {\n        return modp(n / 2, p)\n    }\n    if n % 3 == 0\
    \ {\n        return modp(n / 3, p)\n    }\n    if n % 5 == 0 {\n        return\
    \ modp(n / 5, p)\n    }\n    return modp(n / 5, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp6sw5_v7b_test.go:63: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp6sw5_v7b_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp6sw5_v7b_test.go:63: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp6sw5_v7b_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp6sw5_v7b_test.go:63: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp6sw5_v7b_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n-1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpn7_7q32x_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpn7_7q32x_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpn7_7q32x_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpn7_7q32x_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpn7_7q32x_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpn7_7q32x_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n > p {\n       \
    \ return modp(n - p, p)\n    }\n    if n < p {\n        return modp(n - p, p)\n\
    \    }\n    return 0\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmpcmu5fpvs_test.go:19 +0x9a fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6fa\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65 fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65 fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6c5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:36 +0x65\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6c5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpcmu5fpvs_test.go:3"
  timestamp: 1660075062
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ < p {\n        return modp(n, p - 1) + p\n    }\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz89fpiqb_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ modp(n - 1, p-1)\n    }\n    if p < 2 {\n        return modp(n - 1, p-1)\n \
    \   }\n    if p > p {\n        return modp(n - 1, p-1)\n    }\n    if p == 2 {\n\
    \        return modp(n - 1, p)\n    }\n    if n == p {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p+1 {\n        return modp(n - 1, p)\n    }\n  \
    \  if n == p+2 {\n        return modp(n - 1, p)\n    }\n    if n == p+3 {\n  \
    \      return modp(n - 1, p)\n    }\n    if n == p+4 {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p+5 {\n        return modp(n - 1, p)\n    }\n  \
    \  if n == p+6 {\n        return modp(n - 1, p)\n    }\n    if n == p+7 {\n  \
    \      return modp(n - 1, p)\n    }\n    if n == p+8 {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p+9 {\n        return modp(n - 1, p)\n    }\n  \
    \  if n == p+10 {\n        return modp(n - 1, p)\n    }\n    if n == p+11 {\n\
    \        return modp(n - 1, p)\n    }\n    if n == p+12 {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p+13 {\n        return modp(n - 1, p)\n    }\n \
    \   if n == p+14 {\n        return modp(n - 1, p)\n    }\n    if n == p+15 {\n\
    \        return modp(n - 1, p)\n    }\n    if n == p+16 {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p+17 {\n        return modp(n - 1, p)\n    }\n \
    \   if n == p+18 {\n        return modp(n - 1, p)\n    }\n    if n == p+19 {\n\
    \        return modp(n - 1, p)\n    }\n    if n == p+20 {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p+21 {\n        return modp(n - 1, p)\n    }\n \
    \   if n == p+22 {\n        return modp(n - 1, p)\n    }\n    if n == p+23 {\n\
    \        return modp(n - 1, p)\n    }\n    if n == p+24 {\n        return modp(n\
    \ - 1, p)\n    }\n    if n == p+25 {\n        return modp(n - 1, p)\n    }\n \
    \   if n == p+26 {\n        return modp(n - 1, p)\n    }\n    if n == p+27 {\n\
    \        return modp(n - 1, p)\n\nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2uvc66sw_test.go:122:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075059
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - 1, p) % p\n    }\n    return\
    \ modp(p, n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpxk6_cy2j_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpxk6_cy2j_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpxk6_cy2j_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpxk6_cy2j_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpxk6_cy2j_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpxk6_cy2j_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075061
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    return modp(n - 2, p) + modp(n - 1, p-1)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075074
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n / 2, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 6 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 7 {\n        return modp(n / 2, p)\n    }\n    if p < 8 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n /\
    \ 2, p)\n    }\n    if p < 10 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 14 {\n        return modp(n / 2, p)\n    }\n    if p < 15 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 16 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 18 {\n        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 20 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 21 {\n        return modp(n / 2, p)\n    }\n    if p < 22 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 24 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n / 2, p)\n    }\n    if p < 26 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 27 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 28 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 30 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 31 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 32 {\n        return modp(n / 2, p)\n    }\n    if p \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpddigehnh_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n      \
    \  return p\n    }\n    if n == p {\n        return p\n    }\n    if p < 2 {\n\
    \        return modp(n-1, p)\n    }\n    if p < p {\n        return modp(n - 1,\
    \ p) + p\n    }\n    return modp(n - 1, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp9dyok7la_test.go:66: expected '%!s(int=2)', got '%!s(int=101001)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp9dyok7la_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp9dyok7la_test.go:66: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp9dyok7la_test.go:66: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp9dyok7la_test.go:66: expected '%!s(int=4)', got '%!s(int=126)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp9dyok7la_test.go:66: expected\
    \ '%!s(int=3)', got '%!s(int=131)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n % p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp5vid4clv_test.go:48: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp5vid4clv_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    return n - p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=2)', got '%!s(int=1000)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_vct5z8t_test.go:48: expected '%!s(int=4)', got '%!s(int=25)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_vct5z8t_test.go:48: expected\
    \ '%!s(int=3)', got '%!s(int=26)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(p, n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p > n {\n        return modp(n - 1, p) + p\n    }\n    if p\
    \ < n {\n        return modp(n, p - 1) + p\n    }\n    return modp(n - 1, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkn_zf420_test.go:57: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkn_zf420_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=5151)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkn_zf420_test.go:57: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkn_zf420_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkn_zf420_test.go:57: expected '%!s(int=4)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkn_zf420_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*2)\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*2)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpftgsayh7_test.go:54: expected '%!s(int=3)', got '%!s(int=20)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpftgsayh7_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpftgsayh7_test.go:54: expected '%!s(int=8)', got '%!s(int=44)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpftgsayh7_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpftgsayh7_test.go:54: expected '%!s(int=4)', got '%!s(int=2684354560)'\n\
    \    --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpftgsayh7_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5368709120)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075061
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return n\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n == p+1 {\n        return n\n    }\n    if n == p-1\
    \ {\n        return n\n    }\n    if n >= p {\n        return n\n    }\n    if\
    \ n < p {\n        return modp(n - p, p)\n    }\n    if n == p+2 {\n        return\
    \ n\n    }\n    if n == p+3 {\n        return n\n    }\n    if n == p+4 {\n  \
    \      return n\n    }\n    if n == p+5 {\n        return n\n    }\n    if n ==\
    \ p+6 {\n        return n\n    }\n    if n == p+7 {\n        return n\n    }\n\
    \    if n == p+8 {\n        return n\n    }\n    if n == p+9 {\n        return\
    \ n\n    }\n    if n == p+10 {\n        return n\n    }\n    if n == p+11 {\n\
    \        return n\n    }\n    if n == p+12 {\n        return n\n    }\n    if\
    \ n == p+13 {\n        return n\n    }\n    if n == p+14 {\n        return n\n\
    \    }\n    if n == p+15 {\n        return n\n    }\n    if n == p+16 {\n    \
    \    return n\n    }\n    if n == p+17 {\n        return n\n    }\n    if n ==\
    \ p+18 {\n        return n\n    }\n    if n == p+19 {\n        return n\n    }\n\
    \    if n == p+20 {\n        return n\n    }\n    if n == p+21 {\n        return\
    \ n\n    }\n    if n == p+22 {\n        return n\n    }\n    if n == p+23 {\n\
    \        return n\n    }\n    if n == p+24 {\n        return n\n    }\n    if\
    \ n == p+25 {\n        return n\n    }\n    if n == p+26 {\n        return n\n\
    \    }\n    if n == p+27 {\n        return n\n    }\n    if n == p+28 {\n    \
    \    return n\n    }\n    if n == p+29 {\n        return n\n    }\n    if n ==\
    \ p+30 {\n        return n\n    }\n    if n == p+31 {\n        return n\n    }\n\
    \    if n == p+32 {\n        return n\n    }\n    if n == p+33 {\n        return\
    \ n\n    }\n    if n == p+34 {\n        return n\n    }\n    if n == p+35 {\n\
    \        return n\n    }\n    if n == p+36 {\n        return n\n    }\n    if\
    \ n == p\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjd1u9fla_test.go:153:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 2, p) % p + p\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1ziair7f_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1ziair7f_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1ziair7f_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp1ziair7f_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=102)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp1ziair7f_test.go:54: expected '%!s(int=4)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp1ziair7f_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075062
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 5 {\n        return modp(n - 3, p) % p\n    }\n    return modp(n\
    \ - 4, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5)\n\t/tmp/tmpxphmyydp_test.go:19 +0x115 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef775\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6d5\n\
    command-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6d5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x5)\n\t/tmp/tmpxphmyydp_test.go:35 +0x75 fp=0x"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpw5x2p6x9_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpw5x2p6x9_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return 1\n    }\n    if n == 0 {\n      \
    \  return 0\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n\
    \        return p\n    }\n    if p < 2 {\n        return n\n    }\n    if p <\
    \ 4 {\n        return modp(n - 2, p)\n    }\n    if p < 6 {\n        return modp(n\
    \ - 4, p) + 2\n    }\n    if p < 8 {\n        return modp(n - 6, p) + 4\n    }\n\
    \    if p < 10 {\n        return modp(n - 8, p) + 6\n    }\n    if p < 12 {\n\
    \        return modp(n - 10, p) + 8\n    }\n    if p < 14 {\n        return modp(n\
    \ - 12, p) + 10\n    }\n    if p < 16 {\n        return modp(n - 14, p) + 12\n\
    \    }\n    if p < 18 {\n        return modp(n - 16, p) + 14\n    }\n    if p\
    \ < 20 {\n        return modp(n - 18, p) + 16\n    }\n    if p < 22 {\n      \
    \  return modp(n - 20, p) + 18\n    }\n    if p < 24 {\n        return modp(n\
    \ - 22, p) + 20\n    }\n    if p < 26 {\n        return modp(n - 24, p) + 22\n\
    \    }\n    if p < 28 {\n        return modp(n - 26, p) + 24\n    }\n    if p\
    \ < 30 {\n        return modp(n - 28, p) + 26\n    }\n    if p < 32 {\n      \
    \  return modp(n - 30, p) + 28\n    }\n    if p < 34 {\n        return modp(n\
    \ - 32, p) + 30\n    }\n    if p < 36 {\n        return modp(n - 34, p) + 32\n\
    \    }\n    if p < 38 {\n        return modp(n - 36, p) + 34\n    }\n    if p\
    \ < 40 {\n        return modp(n - 38, p) + 36\n    }\n    if p < 42 {\n      \
    \  return modp(n - 40, p) + 38\n    }\n    if p < 44 {\n        return modp(n\
    \ - 42, p) + 40\n    }\n    if p < 46 {\n        return modp(n - 44, p) + 42\n\
    \    }\n    if p < 48 {\n        return modp(n - 46, p) + 44\n    }\n    if p\
    \ < 50 {\n        return modp(n - 48, p) + 46\n    }\n    if p < 52 {\n      \
    \  return modp(n - 50, p) + 48\n    }\n    if p < 54 {\n        return modp(n\
    \ - 52, p) + 50\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_007iuci_test.go:122:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + modp(n - 1, p)\n \
    \   }\n    if p < 3 {\n        return modp(n - 2, p) + modp(n - 1, p) + modp(n\
    \ - 2, p)\n    }\n    if p < 5 {\n        return modp(n - 3, p) + modp(n - 2,\
    \ p) + modp(n - 1, p) + modp(n - 3, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n -\
    \ 4, p)\n    }\n    if p < 9 {\n        return modp(n - 5, p) + modp(n - 4, p)\
    \ + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n - 5, p)\n    }\n\
    \    if p < 11 {\n        return modp(n - 6, p) + modp(n - 5, p) + modp(n - 4,\
    \ p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p) + modp(n - 6, p)\n   \
    \ }\n    if p < 13 {\n        return modp(n - 7, p) + modp(n - 6, p) + modp(n\
    \ - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p)\
    \ + modp(n - 7, p)\n    }\n    if p < 15 {\n        return modp(n - 8, p) + modp(n\
    \ - 7, p) + modp(n - 6, p) + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p)\
    \ + modp(n - 2, p) + modp(n - 1, p) + modp(n - 8, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 9, p) + modp(n - 8, p) + modp(n - 7, p) + modp(n - 6,\
    \ p) + modp(n - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n\
    \ - 1, p) + modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p) + modp(n - 9, p) + modp(n - 8, p) + modp(n - 7, p) + modp(n - 6, p) + modp(n\
    \ - 5, p) + modp(n - 4, p) + modp(n - 3, p) + modp(n - 2, p) + modp(n - 1, p)\
    \ + modp(n - 10, p)\n    }\n    if p < 23 {\n        return modp(n - 11, p) +\
    \ modp(n - 10, p\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps_judkzg_test.go:60:48: missing '','' before newline in argument list

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p)\n    }\n    if n ==\
    \ p {\n        return n\n    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7wek1dgr_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7wek1dgr_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7wek1dgr_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7wek1dgr_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7wek1dgr_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7wek1dgr_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 2, p) + p\n\
    \    }\n    return modp(n - 2, p) + modp(n - 1, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075075
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return n - p\n    }\n    return p\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmptxoka53o_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmptxoka53o_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmptxoka53o_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmptxoka53o_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmptxoka53o_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmptxoka53o_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < 4 {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp2pzirn4q_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp2pzirn4q_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp2pzirn4q_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp2pzirn4q_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp2pzirn4q_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp2pzirn4q_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074955
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p)\n    }\n    if n ==\
    \ p {\n        return n\n    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7wek1dgr_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7wek1dgr_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7wek1dgr_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7wek1dgr_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7wek1dgr_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7wek1dgr_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + modp(n - 1, p)\n \
    \   }\n    if p < 3 {\n        return modp(n - 2, p) + modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p) + modp(n - 3, p)\n    }\n    if\
    \ p < 5 {\n        return modp(n - 4, p) + modp(n - 4, p)\n    }\n    if p < 6\
    \ {\n        return modp(n - 5, p) + modp(n - 5, p)\n    }\n    if p < 7 {\n \
    \       return modp(n - 6, p) + modp(n - 6, p)\n    }\n    if p < 8 {\n      \
    \  return modp(n - 7, p) + modp(n - 7, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 8, p) + modp(n - 8, p)\n    }\n    if p < 10 {\n        return modp(n\
    \ - 9, p) + modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p) + modp(n - 10, p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\
    \ + modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p) +\
    \ modp(n - 12, p)\n    }\n    if p < 14 {\n        return modp(n - 13, p) + modp(n\
    \ - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p) + modp(n -\
    \ 14, p)\n    }\n    if p < 16 {\n        return modp(n - 15, p) + modp(n - 15,\
    \ p)\n    }\n    if p < 17 {\n        return modp(n - 16, p) + modp(n - 16, p)\n\
    \    }\n    if p < 18 {\n        return modp(n - 17, p) + modp(n - 17, p)\n  \
    \  }\n    if p < 19 {\n        return modp(n - 18, p) + modp(n - 18, p)\n    }\n\
    \    if p < 20 {\n        return modp(n - 19, p) + modp(n - 19, p)\n    }\n  \
    \  if p < 21 {\n        return modp(n - 20, p) + modp(n - 20, p)\n    }\n    if\
    \ p < 22 {\n        return modp(n - 21, p) + modp(n - 21, p)\n    }\n    if p\
    \ < 23 {\n        return modp(n - 22, p) + modp(n - 22, p)\n    }\n    if p <\
    \ 24 {\n        return modp(n - 23, p) + modp(n - 23, p)\n    }\n    if p < 25\
    \ {\n        return \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp05writbw_test.go:100:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p*p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=3)', got '%!s(int=5000)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=8)', got '%!s(int=117128)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + 1\n    }\n    if p\
    \ < 3 {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1, p) + modp(n\
    \ - 1, p - 1)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075075
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > 2 {\n        return modp(n - 1, p - 1)\
    \ + p\n    }\n    return modp(n - 1, p) + modp(n - 1, p - 1)\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=3)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=506651)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=8)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=5150)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmps98r6_e2_test.go:54: expected '%!s(int=4)', got '%!s(int=365)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmps98r6_e2_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=392)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p > p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n / 2, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 6 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 7 {\n        return modp(n / 2, p)\n    }\n    if p < 8 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n /\
    \ 2, p)\n    }\n    if p < 10 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 14 {\n        return modp(n / 2, p)\n    }\n    if p < 15 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 16 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 18 {\n        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 20 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 21 {\n        return modp(n / 2, p)\n    }\n    if p < 22 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 24 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n / 2, p)\n    }\n    if p < 26 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 27 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 28 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 30 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 31 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 32 {\n        return modp(n / 2, p)\n    }\n    if p \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpddigehnh_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(p, n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=111201)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpc4x7ynql_test.go:54: expected '%!s(int=4)', got '%!s(int=150)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpc4x7ynql_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=155)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p > p {\n        return\
    \ modp(n - p, p)\n    }\n    if p % 2 == 1 {\n        return modp(n / 2, p)\n\
    \    }\n    return modp(n / 2, p) + modp(n / 2, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpaqjnfdix_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpaqjnfdix_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpaqjnfdix_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpaqjnfdix_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpaqjnfdix_test.go:60: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpaqjnfdix_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    return modp(n - 3, p) + modp(n\
    \ - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffd999e57?,\
    \ 0x65?)\n\t/tmp/tmpnensmeqm_test.go:19 +0xe5 fp=0xc0201e03a8 sp=0xc0201e03a0\
    \ pc=0x4ef745\ncommand-line-arguments_test.modp(0xfffffffffd999e5a, 0x65)\n\t\
    /tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e03d0 sp=0xc0201e03a8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e5d, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e03f8 sp=0xc0201e03d0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e60,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0420 sp=0xc0201e03f8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e63, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0448 sp=0xc0201e0420 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e66,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0470 sp=0xc0201e0448 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e69, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0498 sp=0xc0201e0470 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e6c,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e04c0 sp=0xc0201e0498 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e6f, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e04e8 sp=0xc0201e04c0 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e72,\
    \ 0x65)\n\t/tmp/tmpnensmeqm_test.go:35 +0x6f fp=0xc0201e0510 sp=0xc0201e04e8 pc=0x4ef6cf\n\
    command-line-arguments_test.modp(0xfffffffffd999e75, 0x65)\n\t/tmp/tmpnensmeqm_test.go:35\
    \ +0x6f fp=0xc0201e0538 sp=0xc0201e0510 pc=0x4ef6cf\ncommand-line-arguments_test.modp(0xfffffffffd999e78,\
    \ 0x6"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 2, p)\n    }\n\
    \    if p < p {\n        return modp(n - 3, p)\n    }\n    return modp(n - 4,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffc0000bb?,\
    \ 0x5?)\n\t/tmp/tmpi03xu7qq_test.go:19 +0x7a fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6da\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpi03xu7qq_test.go:35"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n      \
    \  return modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n\
    \    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n\
    \        return modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n      \
    \  return modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n\
    \    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n\
    \        return modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n      \
    \  return modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n\
    \    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n\
    \        return modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    if p < p {\n      \
    \  return modp(n - 1, p)\n    }\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxkg0avu0_test.go:135:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n \
    \   }\n    if p < 4 {\n        return modp(n - 1, p)\n    }\n    if p < 5 {\n\
    \        return modp(n - 1, p)\n    }\n    if p < 6 {\n        return modp(n -\
    \ 1, p)\n    }\n    if p < 7 {\n        return modp(n - 1, p)\n    }\n    if p\
    \ < 8 {\n        return modp(n - 1, p)\n    }\n    if p < 9 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 10 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 11 {\n        return modp(n - 1, p)\n    }\n    if p < 12 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 13 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 14 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 15 {\n        return modp(n - 1, p)\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 17 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 18 {\n        return modp(n - 1, p)\n    }\n    if p < 19 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 20 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 22 {\n        return modp(n - 1, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 24 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 25 {\n        return modp(n - 1, p)\n    }\n    if p < 26 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 27 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p < 28 {\n        return modp(n - 1, p)\n    }\n    if p <\
    \ 29 {\n        return modp(n - 1, p)\n    }\n    if p < 30 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 31 {\n        return modp(n - 1, p)\n    }\n\
    \    if p < 32 {\n        return modp(n - 1, p)\n    }\n    if p < 33 {\n    \
    \    return modp(n - 1, p)\n    }\n    if p < 34 {\n        return modp(n - 1,\
    \ p)\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7fcxoq_g_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n == (p-1)/2 {\n        return modp(n - 1, p)\n    }\n    return\
    \ modp(n - p + 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpku6sqqh5_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpku6sqqh5_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpku6sqqh5_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpku6sqqh5_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpku6sqqh5_test.go:54: expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 3, p)\n    }\n    if p < 6 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 7 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 8 {\n        return modp(n - 6, p)\n    }\n    if p < 9 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 10 {\n        return modp(n\
    \ - 8, p)\n    }\n    if p < 11 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 12 {\n        return modp(n - 10, p)\n    }\n    if p < 13 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 14 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 15 {\n        return modp(n - 13, p)\n    }\n    if p < 16 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 17 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 18 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 19 {\n        return modp(n - 17, p)\n    }\n    if p < 20 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 21 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 22 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 23 {\n        return modp(n - 21, p)\n    }\n    if p < 24 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 25 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 26 {\n        return modp(n - 24, p)\n    }\n    if p < 27 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 28 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 29 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 30 {\n        return modp(n - 28, p)\n    }\n    if p < 31 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 32 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 34 {\n        return modp(n - 32, p)\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp495f1ihm_test.go:128:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpsbc6wxme_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpkj2ju6lc_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpkj2ju6lc_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p - 1) + 1\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpuk28r9oa_test.go:54: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpuk28r9oa_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074956
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p) + modp(n,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpnen1if80_test.go:19 +0x85 fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc020160428 sp=0xc020160408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc020160468 sp=0xc020160448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45 fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpnen1if80_test.go:33 +0x45\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpnen1if80_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return 1\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    return modp(p, n)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpzhfc_kdh_test.go:57: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpzhfc_kdh_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpzhfc_kdh_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpzhfc_kdh_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpzhfc_kdh_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpzhfc_kdh_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 1 {\n        return\
    \ n\n    }\n    if p > n {\n        return modp(n - p, p)\n    }\n    if p < n\
    \ {\n        return modp(n, p - n)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc020160398\
    \ stack=[0xc020160000, 0xc040160000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 18 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmps81uubq3_test.go:19 +0x9f fp=0xc0201603a8 sp=0xc0201603a0 pc=0x4ef6ff\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201603c8 sp=0xc0201603a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201603e8 sp=0xc0201603c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160408 sp=0xc0201603e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160428 sp=0xc020160408 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160448 sp=0xc020160428 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc020160468 sp=0xc020160448 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160488 sp=0xc020160468 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604a8 sp=0xc020160488 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc0201604c8 sp=0xc0201604a8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f fp=0xc0201604e8 sp=0xc0201604c8 pc=0x4ef6bf\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmps81uubq3_test.go:30 +0x5f\
    \ fp=0xc020160508 sp=0xc0201604e8 pc=0x4ef6bf\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmps81uubq3_test.go:3"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n = -n\n\
    \    }\n    if p < 0 {\n        p = -p\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return 1\n    }\n    if n == 0 || p == 0\
    \ {\n        return 0\n    }\n    if n == p {\n        return n\n    }\n    if\
    \ n == p+1 {\n        return p\n    }\n    if n == p-1 {\n        return p\n \
    \   }\n    if n == p+2 {\n        return p+1\n    }\n    if n == p-2{\n      \
    \  return p-1\n    }\n    if n == p+3 {\n        return p+2\n    }\n    if n ==\
    \ p-3{\n        return p-2\n    }\n    if n == p+4 {\n        return p+3\n   \
    \ }\n    if n == p-4{\n        return p-3\n    }\n    if n == p+5 {\n        return\
    \ p+4\n    }\n    if n == p-5{\n        return p-4\n    }\n    if n == p+6 {\n\
    \        return p+5\n    }\n    if n == p-6{\n        return p-5\n    }\n    if\
    \ n == p+7 {\n        return p+6\n    }\n    if n == p-7{\n        return p-6\n\
    \    }\n    if n == p+8 {\n        return p+7\n    }\n    if n == p-8{\n     \
    \   return p-7\n    }\n    if n == p+9 {\n        return p+8\n    }\n    if n\
    \ == p-9{\n        return p-8\n    }\n    if n == p+10 {\n        return p+9\n\
    \    }\n    if n == p-10{\n        return p-9\n    }\n    if n == p+11 {\n   \
    \     return p+10\n    }\n    if n == p-11{\n        return p-10\n    }\n    if\
    \ n == p+12 {\n        return p+11\n    }\n    if n == p-12{\n        return p-11\n\
    \    }\n    if n == p+13 {\n        return p+12\n    }\n    if n == p-13{\n  \
    \      return p-12\n    }\n    if n == p+14 {\n        return p+13\n    }\n  \
    \  if n == p-14{\n        return p-13\n    }\n    if n == p+15 {\n        return\
    \ p+14\n    }\n    if n == p-15{\n        return p-14\n    }\n    if n == p+16\
    \ {\n        return p+15\n    }\n    if n == p-16{\n        return p-15\n    }\n\
    \    if n == p+17 {\n        return p+16\n    }\n    if n == p-17{\n        return\
    \ p-16\n    }\n    if n == p+18 {\n        return p+17\n    }\n    if n == p-18{\n\
    \        return p-17\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpkocdftqw_test.go:145:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075062
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p*p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=3)', got '%!s(int=5000)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=8)', got '%!s(int=117128)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n = -n\n\
    \    }\n    if p < 0 {\n        p = -p\n    }\n    if n < p {\n        return\
    \ n\n    }\n    if n == p {\n        return 1\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    if n == p {\n        return p\n    }\n   \
    \ return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp3ifoqza7_test.go:60: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp3ifoqza7_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp3ifoqza7_test.go:60: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp3ifoqza7_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp3ifoqza7_test.go:60: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp3ifoqza7_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n-p, p)\n    }\n    return modp(n-(p+1),\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpydirqh5l_test.go:54: expected '%!s(int=2)', got '%!s(int=81)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpydirqh5l_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpydirqh5l_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpydirqh5l_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpydirqh5l_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpydirqh5l_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 1, (p + 3)\
    \ % p) % p\n    }\n    return modp(n - 1, (p + 5) % p) % p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\npanic: runtime error: integer divide by zero\
    \ [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\n\
    testing.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.modp(0x4b3193?, 0x0)\n\t/tmp/tmpiswpcfvl_test.go:27\
    \ +0x106\ncommand-line-arguments_test.modp(0x0?, 0x5)\n\t/tmp/tmpiswpcfvl_test.go:32\
    \ +0x9a\ncommand-line-arguments_test.TestModp(0x0?)\n\t/tmp/tmpiswpcfvl_test.go:42\
    \ +0x48\ntesting.tRunner(0xc0001a0340, 0x527f38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p) + modp(n, p)\n    }\n\
    \    if p > 2 {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1,\
    \ p) + modp(n, p - 1)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpom0u535g_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpom0u535g_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpom0u535g_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpom0u535g_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpom0u535g_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpom0u535g_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=3)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=10)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=8)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmplk70ivvl_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmplk70ivvl_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p > p {\n        return\
    \ modp(n - p, p)\n    }\n    if p % 2 == 0 {\n        return modp(n / 2, p)\n\
    \    }\n    return modp(n / 2, p) + modp(n / 2, p)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmphyc4e35c_test.go:60: expected '%!s(int=3)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmphyc4e35c_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=103424)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphyc4e35c_test.go:60: expected '%!s(int=8)', got '%!s(int=22)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphyc4e35c_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=6464)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphyc4e35c_test.go:60: expected '%!s(int=4)', got '%!s(int=80)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphyc4e35c_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=80)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p > p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpw4esx5rh_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpw4esx5rh_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n-1, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpn7_7q32x_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpn7_7q32x_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpn7_7q32x_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpn7_7q32x_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpn7_7q32x_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpn7_7q32x_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075060
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p == 0 {\n        return\
    \ 0\n    }\n    if p == 1 {\n        return n\n    }\n    if p == 2 {\n      \
    \  return modp(n - 1, p)\n    }\n    if n % p == 0 {\n        return modp(n /\
    \ p, p)\n    }\n    return modp(n / p, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpafp1xers_test.go:60: expected '%!s(int=3)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpafp1xers_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=203)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpafp1xers_test.go:60: expected '%!s(int=8)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpafp1xers_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=102)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpafp1xers_test.go:60: expected '%!s(int=4)', got '%!s(int=10)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpafp1xers_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=15)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p) + p\n    }\n    if p < 5\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 7 {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < 8 {\n        return modp(n - 1, p) + p\n    }\n    if p < 9\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 11 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 1, p) + p\n    }\n    if p < 14 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 15 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 16 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 17 {\n        return modp(n - 1, p) + p\n    }\n    if p < 18 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 19 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p < 20 {\n        return modp(n - 1, p) + p\n   \
    \ }\n    if p < 21 {\n        return modp(n - 1, p) + p\n    }\n    if p < 22\
    \ {\n        return modp(n - 1, p) + p\n    }\n    if p < 23 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 24 {\n        return modp(n - 1, p) +\
    \ p\n    }\n    if p < 25 {\n        return modp(n - 1, p) + p\n    }\n    if\
    \ p < 26 {\n        return modp(n - 1, p) + p\n    }\n    if p < 27 {\n      \
    \  return modp(n - 1, p) + p\n    }\n    if p < 28 {\n        return modp(n -\
    \ 1, p) + p\n    }\n    if p < 29 {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < 30 {\n        return modp(n - 1, p) + p\n    }\n    if p < 31 {\n\
    \        return modp(n - 1, p) + p\n    }\n    if p < 32 {\n        return modp(n\
    \ - 1, p) + p\n    }\n    if p \nfunc TestModp(t *testing.T) {\n  candidate :=\
    \ modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc2tfyn2w_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if p == 0 {\n        return 0\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if n >= p {\n        return modp(n - p, p)\n    }\n  \
    \  if p > n {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmp7eltyb33_test.go:19 +0xae fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef70e\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6cd\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6cd\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6cd\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6cd\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6cd\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6cd\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6cd\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6cd\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6cd\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6cd\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39 +0x6d\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6cd\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmp7eltyb33_test.go:39"
  timestamp: 1660075065
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if p < 2 {\n       \
    \ return n\n    }\n    if p < 3 {\n        return modp(n - 1, p)\n    }\n    if\
    \ p < 5 {\n        return modp(n - 2, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 3, p)\n    }\n    if p < 11 {\n        return modp(n - 4, p)\n    }\n\
    \    if p < 13 {\n        return modp(n - 5, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 6, p)\n    }\n    if p < 19 {\n        return modp(n - 7,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 8, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n - 9, p)\n    }\n    if p < 29 {\n        return\
    \ modp(n - 10, p)\n    }\n    if p < 33 {\n        return modp(n - 11, p)\n  \
    \  }\n    if p < 37 {\n        return modp(n - 12, p)\n    }\n    if p < 41 {\n\
    \        return modp(n - 13, p)\n    }\n    if p < 45 {\n        return modp(n\
    \ - 14, p)\n    }\n    if p < 49 {\n        return modp(n - 15, p)\n    }\n  \
    \  if p < 53 {\n        return modp(n - 16, p)\n    }\n    if p < 57 {\n     \
    \   return modp(n - 17, p)\n    }\n    if p < 61 {\n        return modp(n - 18,\
    \ p)\n    }\n    if p < 65 {\n        return modp(n - 19, p)\n    }\n    if p\
    \ < 69 {\n        return modp(n - 20, p)\n    }\n    if p < 73 {\n        return\
    \ modp(n - 21, p)\n    }\n    if p < 77 {\n        return modp(n - 22, p)\n  \
    \  }\n    if p < 81 {\n        return modp(n - 23, p)\n    }\n    if p < 85 {\n\
    \        return modp(n - 24, p)\n    }\n    if p < 89 {\n        return modp(n\
    \ - 25, p)\n    }\n    if p < 93 {\n        return modp(n - 26, p)\n    }\n  \
    \  if p < 97 {\n        return modp(n - 27, p)\n    }\n    if p < 101 {\n    \
    \    return modp(n - 28, p)\n    }\n    if p < 105 {\n        return modp(n -\
    \ 29, p)\n    }\n    if p < 109 {\n        return modp(n - 30, p)\n    }\n   \
    \ if p < 113 {\n        return modp(n - 31, p)\n    }\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe1_2u5tj_test.go:129:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp_zn5ts0r_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp_zn5ts0r_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp_zn5ts0r_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp_zn5ts0r_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp_zn5ts0r_test.go:54: expected '%!s(int=4)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp_zn5ts0r_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 4 {\n        return modp(n - 3, p) % p\n    }\n    if p < 5\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 6 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 7 {\n        return modp(n - 6, p) % p\n\
    \    }\n    if p < 8 {\n        return modp(n - 7, p) % p\n    }\n    if p < 9\
    \ {\n        return modp(n - 8, p) % p\n    }\n    if p < 10 {\n        return\
    \ modp(n - 9, p) % p\n    }\n    if p < 11 {\n        return modp(n - 10, p) %\
    \ p\n    }\n    if p < 12 {\n        return modp(n - 11, p) % p\n    }\n    if\
    \ p < 13 {\n        return modp(n - 12, p) % p\n    }\n    if p < 14 {\n     \
    \   return modp(n - 13, p) % p\n    }\n    if p < 15 {\n        return modp(n\
    \ - 14, p) % p\n    }\n    if p < 16 {\n        return modp(n - 15, p) % p\n \
    \   }\n    if p < 17 {\n        return modp(n - 16, p) % p\n    }\n    if p <\
    \ 18 {\n        return modp(n - 17, p) % p\n    }\n    if p < 19 {\n        return\
    \ modp(n - 18, p) % p\n    }\n    if p < 20 {\n        return modp(n - 19, p)\
    \ % p\n    }\n    if p < 21 {\n        return modp(n - 20, p) % p\n    }\n   \
    \ if p < 22 {\n        return modp(n - 21, p) % p\n    }\n    if p < 23 {\n  \
    \      return modp(n - 22, p) % p\n    }\n    if p < 24 {\n        return modp(n\
    \ - 23, p) % p\n    }\n    if p < 25 {\n        return modp(n - 24, p) % p\n \
    \   }\n    if p < 26 {\n        return modp(n - 25, p) % p\n    }\n    if p <\
    \ 27 {\n        return modp(n - 26, p) % p\n    }\n    if p < 28 {\n        return\
    \ modp(n - 27, p) % p\n    }\n    if p < 29 {\n        return modp(n - 28, p)\
    \ % p\n    }\n    if p < 30 {\n        return modp(n - 29, p) % p\n    }\n   \
    \ if p < 31 {\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp67dvk43__test.go:115:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ > p {\n        return modp(n - 1, p)\n    }\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn0vlhn43_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp((n - 1) % p, p)\n    }\n    if p < 4 {\n        return\
    \ modp((n - 1) % (p - 1), p)\n    }\n    return modp((n - 1) % (p - 2), p)\n}\n\
    \nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpnfl367wx_test.go:60: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpnfl367wx_test.go:60: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpnfl367wx_test.go:60: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpnfl367wx_test.go:60: expected\
    \ '%!s(int=4)', got '%!s(int=5)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpnfl367wx_test.go:60: expected '%!s(int=3)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpo85f92em_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpo85f92em_test.go:32 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpo85f92em_test.go:32"
  timestamp: 1660074957
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n > p {\n        return modp(n - p, p)\n    }\n    return 0\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpj_cj4og6_test.go:54: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpj_cj4og6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 2, p) + p\n\
    \    }\n    return modp(n - 2, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpghgprbyr_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpghgprbyr_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpghgprbyr_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__5 (0.00s)\n        tmpghgprbyr_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__6 (0.00s)\n\
    \        tmpghgprbyr_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 4 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 5 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 6 {\n        return modp(n - 5, p)\n    }\n    if p < 7 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 8 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 9 {\n        return modp(n - 8, p)\n    }\n    if p < 10 {\n     \
    \   return modp(n - 9, p)\n    }\n    if p < 11 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 12 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 13 {\n        return modp(n - 12, p)\n    }\n    if p < 14 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 15 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 16 {\n        return modp(n - 15, p)\n    }\n    if p < 17 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 19 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 20 {\n        return modp(n - 19, p)\n    }\n    if p < 21 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 22 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 24 {\n        return modp(n - 23, p)\n    }\n    if p < 25 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 26 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 27 {\n        return modp(n - 26, p)\n    }\n    if p < 28 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 29 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 30 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 31 {\n        return modp(n - 30, p)\n    }\n    if p < 32 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 33 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 34 {\n        return modp(\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps48o_gjz_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074948
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p*p + p)\n\
    \    }\n    return modp(n - 1, p*p + p*p)\n}\n\nfunc TestModp(t *testing.T) {\n\
    \  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5), expected:\
    \ 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=3)', got '%!s(int=5000)'\n\
    \    --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=8)', got '%!s(int=117128)'\n\
    \    --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpz_tx4zjn_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpz_tx4zjn_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(n\
    \ - p, p) + p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=2)', got '%!s(int=1101)'\n\
    \    --- FAIL: TestModp/test_num__2 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphy5cvm79_test.go:54: expected '%!s(int=4)', got '%!s(int=26)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphy5cvm79_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=31)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 2, p) % p\n\
    \    }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpyw7g_rs1_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpyw7g_rs1_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + 1\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7a61w_0t_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7a61w_0t_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < 3 {\n        return modp(n - 1, p*p + 2)\n\
    \    }\n    if p < 4 {\n        return modp(n - 1, p*p + 4)\n    }\n    if p <\
    \ 5 {\n        return modp(n - 1, p*p + 6)\n    }\n    if p < 6 {\n        return\
    \ modp(n - 1, p*p + 8)\n    }\n    if p < 7 {\n        return modp(n - 1, p*p\
    \ + 10)\n    }\n    if p < 8 {\n        return modp(n - 1, p*p + 12)\n    }\n\
    \    if p < 9 {\n        return modp(n - 1, p*p + 14)\n    }\n    if p < 10 {\n\
    \        return modp(n - 1, p*p + 16)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 1, p*p + 18)\n    }\n    if p < 12 {\n        return modp(n - 1, p*p\
    \ + 20)\n    }\n    if p < 13 {\n        return modp(n - 1, p*p + 22)\n    }\n\
    \    if p < 14 {\n        return modp(n - 1, p*p + 24)\n    }\n    if p < 15 {\n\
    \        return modp(n - 1, p*p + 26)\n    }\n    if p < 16 {\n        return\
    \ modp(n - 1, p*p + 28)\n    }\n    if p < 17 {\n        return modp(n - 1, p*p\
    \ + 30)\n    }\n    if p < 18 {\n        return modp(n - 1, p*p + 32)\n    }\n\
    \    if p < 19 {\n        return modp(n - 1, p*p + 34)\n    }\n    if p < 20 {\n\
    \        return modp(n - 1, p*p + 36)\n    }\n    if p < 21 {\n        return\
    \ modp(n - 1, p*p + 38)\n    }\n    if p < 22 {\n        return modp(n - 1, p*p\
    \ + 40)\n    }\n    if p < 23 {\n        return modp(n - 1, p*p + 42)\n    }\n\
    \    if p < 24 {\n        return modp(n - 1, p*p + 44)\n    }\n    if p < 25 {\n\
    \        return modp(n - 1, p*p + 46)\n    }\n    if p < 26 {\n        return\
    \ modp(n - 1, p*p + 48)\n    }\n    if p < 27 {\n        return modp(n - 1, p*p\
    \ + 50)\n    }\n    if p < 28 {\n        return modp(n - 1, p*p + 52)\n    }\n\
    \    if p < 29\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0ws8a8mt_test.go:108:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075063
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == p {\n        return n\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    return modp(p, n)\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmp4gu3qmo3_test.go:57: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmp4gu3qmo3_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp4gu3qmo3_test.go:57: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp4gu3qmo3_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp4gu3qmo3_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp4gu3qmo3_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < 3 {\n        return modp(n - 2, p) % p\n\
    \    }\n    if p < 5 {\n        return modp(n - 3, p) % p\n    }\n    if p < 7\
    \ {\n        return modp(n - 4, p) % p\n    }\n    if p < 9 {\n        return\
    \ modp(n - 5, p) % p\n    }\n    if p < 11 {\n        return modp(n - 6, p) %\
    \ p\n    }\n    if p < 13 {\n        return modp(n - 7, p) % p\n    }\n    if\
    \ p < 15 {\n        return modp(n - 8, p) % p\n    }\n    if p < 17 {\n      \
    \  return modp(n - 9, p) % p\n    }\n    if p < 19 {\n        return modp(n -\
    \ 10, p) % p\n    }\n    if p < 23 {\n        return modp(n - 11, p) % p\n   \
    \ }\n    if p < 25 {\n        return modp(n - 12, p) % p\n    }\n    if p < 27\
    \ {\n        return modp(n - 13, p) % p\n    }\n    if p < 29 {\n        return\
    \ modp(n - 14, p) % p\n    }\n    if p < 31 {\n        return modp(n - 15, p)\
    \ % p\n    }\n    if p < 33 {\n        return modp(n - 16, p) % p\n    }\n   \
    \ if p < 35 {\n        return modp(n - 17, p) % p\n    }\n    if p < 37 {\n  \
    \      return modp(n - 18, p) % p\n    }\n    if p < 39 {\n        return modp(n\
    \ - 19, p) % p\n    }\n    if p < 41 {\n        return modp(n - 20, p) % p\n \
    \   }\n    if p < 43 {\n        return modp(n - 21, p) % p\n    }\n    if p <\
    \ 45 {\n        return modp(n - 22, p) % p\n    }\n    if p < 47 {\n        return\
    \ modp(n - 23, p) % p\n    }\n    if p < 49 {\n        return modp(n - 24, p)\
    \ % p\n    }\n    if p < 51 {\n        return modp(n - 25, p) % p\n    }\n   \
    \ if p < 53 {\n        return modp(n - 26, p) % p\n    }\n    if p < 55 {\n  \
    \      return modp(n - 27, p) % p\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p) % p\n    }\n    if p < 59 {\n        return modp(n - 29, p) % p\n \
    \   }\n    if p < 61 {\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxohfq06w_test.go:114:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 2, p)\n    }\n    return modp(n - 3, p + 1) + p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpl1zik9m__test.go:57: expected '%!s(int=3)', got '%!s(int=6)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpl1zik9m__test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=56726)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpl1zik9m__test.go:57: expected '%!s(int=8)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpl1zik9m__test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=3995)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpl1zik9m__test.go:57: expected '%!s(int=4)', got '%!s(int=96)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpl1zik9m__test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=110)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p*p)\n    }\n    if p < p {\n        return modp(n - 1, p)\n   \
    \ }\n    return modp(n - 1, p*p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=625)'\n \
    \   --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp1k10pgly_test.go:54: expected '%!s(int=8)', got '%!s(int=14641)'\n\
    \    --- FAIL: TestModp/test_num__5 (0.00s)\n        tmp1k10pgly_test.go:54: expected\
    \ '%!s(int=4)', got '%!s(int=-5760591215363883007)'\n    --- FAIL: TestModp/test_num__6\
    \ (0.00s)\n        tmp1k10pgly_test.go:54: expected '%!s(int=3)', got '%!s(int=-6909496412300378111)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < p\
    \ {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7eeulpxt_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7eeulpxt_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7eeulpxt_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7eeulpxt_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7eeulpxt_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7eeulpxt_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < n {\n        return modp(n - p, p)\n    }\n    if p > n\
    \ {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n}\n\nfunc\
    \ TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101), expected:\
    \ 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3,\
    \ 11), expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n  \
    \   { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5),\
    \ expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffb0000e9?,\
    \ 0x5?)\n\t/tmp/tmpsbc6wxme_test.go:19 +0x85 fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6e5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6a5\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33 +0x45\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6a5\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmpsbc6wxme_test.go:33"
  timestamp: 1660074950
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpg28bf6tw_test.go:54: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpg28bf6tw_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 3 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n / 2, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n / 2, p)\n    }\n    if p < 6 {\n        return modp(n / 2, p)\n\
    \    }\n    if p < 7 {\n        return modp(n / 2, p)\n    }\n    if p < 8 {\n\
    \        return modp(n / 2, p)\n    }\n    if p < 9 {\n        return modp(n /\
    \ 2, p)\n    }\n    if p < 10 {\n        return modp(n / 2, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n / 2, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 13 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 14 {\n        return modp(n / 2, p)\n    }\n    if p < 15 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 16 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 17 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 18 {\n        return modp(n / 2, p)\n    }\n    if p < 19 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 20 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 21 {\n        return modp(n / 2, p)\n    }\n    if p < 22 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 23 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 24 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 25 {\n        return modp(n / 2, p)\n    }\n    if p < 26 {\n        return\
    \ modp(n / 2, p)\n    }\n    if p < 27 {\n        return modp(n / 2, p)\n    }\n\
    \    if p < 28 {\n        return modp(n / 2, p)\n    }\n    if p < 29 {\n    \
    \    return modp(n / 2, p)\n    }\n    if p < 30 {\n        return modp(n / 2,\
    \ p)\n    }\n    if p < 31 {\n        return modp(n / 2, p)\n    }\n    if p <\
    \ 32 {\n        return modp(n / 2, p)\n    }\n    if p \nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpddigehnh_test.go:120:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n == 0 {\n        return 0\n    }\n    if n < p {\n       \
    \ return modp(n - p, p)\n    }\n    if n < p {\n        return modp(n - p, p)\n\
    \    }\n    return modp(n - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmprv_u2829_test.go:60: expected '%!s(int=2)', got '%!s(int=91)'\n  \
    \  --- FAIL: TestModp/test_num__2 (0.00s)\n        tmprv_u2829_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmprv_u2829_test.go:60: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmprv_u2829_test.go:60: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmprv_u2829_test.go:60: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmprv_u2829_test.go:60: expected\
    \ '%!s(int=3)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - p, p)\n    }\n   \
    \ if p < p {\n        return modp(n - p, p)\n    }\n    return modp(n - p, p)\n\
    }\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0398\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x51f350?, 0x5e2ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 6 [running]:\ncommand-line-arguments_test.modp(0xfffffffffffffffd?,\
    \ 0x5?)\n\t/tmp/tmppy7hdk8c_test.go:19 +0x8b fp=0xc0201e03a8 sp=0xc0201e03a0 pc=0x4ef6eb\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59\
    \ fp=0xc0201e03c8 sp=0xc0201e03a8 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59 fp=0xc0201e03e8 sp=0xc0201e03c8 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59\
    \ fp=0xc0201e0408 sp=0xc0201e03e8 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59 fp=0xc0201e0428 sp=0xc0201e0408 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59\
    \ fp=0xc0201e0448 sp=0xc0201e0428 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59 fp=0xc0201e0468 sp=0xc0201e0448 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59\
    \ fp=0xc0201e0488 sp=0xc0201e0468 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59 fp=0xc0201e04a8 sp=0xc0201e0488 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59\
    \ fp=0xc0201e04c8 sp=0xc0201e04a8 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59 fp=0xc0201e04e8 sp=0xc0201e04c8 pc=0x4ef6b9\n\
    command-line-arguments_test.modp(0x0?, 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41 +0x59\
    \ fp=0xc0201e0508 sp=0xc0201e04e8 pc=0x4ef6b9\ncommand-line-arguments_test.modp(0x0?,\
    \ 0x0?)\n\t/tmp/tmppy7hdk8c_test.go:41"
  timestamp: 1660075065
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p) % p\n\
    \    }\n    if p < p {\n        return modp(n - 1, p) % p\n    }\n    return modp(n\
    \ - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpqsnck0ow_test.go:57: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpqsnck0ow_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpqsnck0ow_test.go:57: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpqsnck0ow_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpqsnck0ow_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpqsnck0ow_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p*p + 2)\n    }\n    if p < 4 {\n        return modp(n - 1, p*p\
    \ + 3)\n    }\n    if p < 5 {\n        return modp(n - 1, p*p + 4)\n    }\n  \
    \  if p < 6 {\n        return modp(n - 1, p*p + 5)\n    }\n    if p < 7 {\n  \
    \      return modp(n - 1, p*p + 6)\n    }\n    if p < 8 {\n        return modp(n\
    \ - 1, p*p + 7)\n    }\n    if p < 9 {\n        return modp(n - 1, p*p + 8)\n\
    \    }\n    if p < 10 {\n        return modp(n - 1, p*p + 9)\n    }\n    if p\
    \ < 11 {\n        return modp(n - 1, p*p + 10)\n    }\n    if p < 12 {\n     \
    \   return modp(n - 1, p*p + 11)\n    }\n    if p < 13 {\n        return modp(n\
    \ - 1, p*p + 12)\n    }\n    if p < 14 {\n        return modp(n - 1, p*p + 13)\n\
    \    }\n    if p < 15 {\n        return modp(n - 1, p*p + 14)\n    }\n    if p\
    \ < 16 {\n        return modp(n - 1, p*p + 15)\n    }\n    if p < 17 {\n     \
    \   return modp(n - 1, p*p + 16)\n    }\n    if p < 18 {\n        return modp(n\
    \ - 1, p*p + 17)\n    }\n    if p < 19 {\n        return modp(n - 1, p*p + 18)\n\
    \    }\n    if p < 20 {\n        return modp(n - 1, p*p + 19)\n    }\n    if p\
    \ < 21 {\n        return modp(n - 1, p*p + 20)\n    }\n    if p < 22 {\n     \
    \   return modp(n - 1, p*p + 21)\n    }\n    if p < 23 {\n        return modp(n\
    \ - 1, p*p + 22)\n    }\n    if p < 24 {\n        return modp(n - 1, p*p + 23)\n\
    \    }\n    if p < 25 {\n        return modp(n - 1, p*p + 24)\n    }\n    if p\
    \ < 26 {\n        return modp(n - 1, p*p + 25)\n    }\n    if p < 27 {\n     \
    \   return modp(n - 1, p*p + 26)\n    }\n    if p < 28 {\n        return modp(n\
    \ - 1, p*p + 27)\n    }\n    if p < 29 {\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpke9evf6y_test.go:112:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    return\
    \ modp(n - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpk0pm4sbm_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpk0pm4sbm_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074949
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - p, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp4t5fc3l6_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp4t5fc3l6_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074954
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n < p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ == p {\n        return n\n    }\n    return modp(n - 1, p) + p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpl2mssmh0_test.go:57: expected '%!s(int=3)', got '%!s(int=15)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpl2mssmh0_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpl2mssmh0_test.go:57: expected '%!s(int=8)', got '%!s(int=33)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpl2mssmh0_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=10100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpl2mssmh0_test.go:57: expected '%!s(int=4)', got '%!s(int=130)'\n \
    \   --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpl2mssmh0_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=135)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) % p\n    }\n    if p < p {\n        return modp(n - 1, p)\n \
    \   }\n    return modp(n - 1, p) % p\n}\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=3)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=8)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpir2w7lip_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpir2w7lip_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075005
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if n < p {\n        return n\n    }\n    if n == p {\n        return\
    \ 1\n    }\n    if n < p {\n        return modp(n - p, p)\n    }\n    return modp(p,\
    \ n)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__1 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=2)', got '%!s(int=101)'\n \
    \   --- FAIL: TestModp/test_num__2 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=8)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestModp/test_num__4 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=100)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmpu51c4itg_test.go:54: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmpu51c4itg_test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074950
- exit_code: null
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < 3 {\n        return modp(n - 1, p) + modp(n\
    \ - 2, p)\n    }\n    return modp(n - 2, p) + modp(n - 1, p) + p\n}\n\nfunc TestModp(t\
    \ *testing.T) {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 5), expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n  \
    \   { actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660075078
- exit_code: 2
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if n > p {\n        return modp(n - 1, p) + p\n    }\n    if n\
    \ < p {\n        return modp(n - 1, p)\n    }\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe45yv18i_test.go:35:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p*p + 2)\n    }\n    if p < 5 {\n        return modp(n - 1, p*p\
    \ + 4)\n    }\n    if p < 7 {\n        return modp(n - 1, p*p + 6)\n    }\n  \
    \  if p < 9 {\n        return modp(n - 1, p*p + 8)\n    }\n    if p < 11 {\n \
    \       return modp(n - 1, p*p + 10)\n    }\n    if p < 13 {\n        return modp(n\
    \ - 1, p*p + 12)\n    }\n    if p < 15 {\n        return modp(n - 1, p*p + 14)\n\
    \    }\n    if p < 17 {\n        return modp(n - 1, p*p + 16)\n    }\n    if p\
    \ < 19 {\n        return modp(n - 1, p*p + 18)\n    }\n    if p < 23 {\n     \
    \   return modp(n - 1, p*p + 20)\n    }\n    if p < 25 {\n        return modp(n\
    \ - 1, p*p + 22)\n    }\n    if p < 27 {\n        return modp(n - 1, p*p + 24)\n\
    \    }\n    if p < 29 {\n        return modp(n - 1, p*p + 26)\n    }\n    if p\
    \ < 31 {\n        return modp(n - 1, p*p + 28)\n    }\n    if p < 33 {\n     \
    \   return modp(n - 1, p*p + 30)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 1, p*p + 32)\n    }\n    if p < 37 {\n        return modp(n - 1, p*p + 34)\n\
    \    }\n    if p < 39 {\n        return modp(n - 1, p*p + 36)\n    }\n    if p\
    \ < 41 {\n        return modp(n - 1, p*p + 38)\n    }\n    if p < 43 {\n     \
    \   return modp(n - 1, p*p + 40)\n    }\n    if p < 45 {\n        return modp(n\
    \ - 1, p*p + 42)\n    }\n    if p < 47 {\n        return modp(n - 1, p*p + 44)\n\
    \    }\n    if p < 49 {\n        return modp(n - 1, p*p + 46)\n    }\n    if p\
    \ < 51 {\n        return modp(n - 1, p*p + 48)\n    }\n    if p < 53 {\n     \
    \   return modp(n - 1, p*p + 50)\n    }\n    if p < 55 {\n        return modp(n\
    \ - 1, p*p + 52)\n    }\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual:\
    \ candidate(1101, 101), expected: 2 },\n     { actual: candidate(0, 101), expected:\
    \ 1 },\n     { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100,\
    \ 101), expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n    \
    \ { actual: candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3leldbow_test.go:110:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 3 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 4 {\n        return modp(n - 3, p)\n    }\n    if p < 5 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 6 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 7 {\n        return modp(n - 6, p)\n    }\n    if p < 8 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 9 {\n        return modp(n -\
    \ 8, p)\n    }\n    if p < 10 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 11 {\n        return modp(n - 10, p)\n    }\n    if p < 12 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 13 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 14 {\n        return modp(n - 13, p)\n    }\n    if p < 15 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 16 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 17 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 18 {\n        return modp(n - 17, p)\n    }\n    if p < 19 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 20 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 21 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 22 {\n        return modp(n - 21, p)\n    }\n    if p < 23 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 24 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 25 {\n        return modp(n - 24, p)\n    }\n    if p < 26 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 27 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 28 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 29 {\n        return modp(n - 28, p)\n    }\n    if p < 30 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 31 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 32 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 33 {\n        return modp(n - 32, p)\n    }\n    if p < 34 {\n        return\
    \ modp(n - 33, p)\n    }\n    if p < \nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzhmr493j_test.go:126:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p > 2 {\n        return modp(n - 1, p - 1)\
    \ + p\n    }\n    return modp(n - 1, p) + p\n}\n\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp7zqftpm__test.go:54: expected '%!s(int=3)', got '%!s(int=12)'\n  \
    \  --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp7zqftpm__test.go:54: expected\
    \ '%!s(int=2)', got '%!s(int=7152)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp7zqftpm__test.go:54: expected '%!s(int=8)', got '%!s(int=30)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp7zqftpm__test.go:54: expected\
    \ '%!s(int=1)', got '%!s(int=5150)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp7zqftpm__test.go:54: expected '%!s(int=4)', got '%!s(int=66)'\n  \
    \  --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp7zqftpm__test.go:54: expected\
    \ '%!s(int=3)', got '%!s(int=68)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return modp(n - 1, p)\n    }\n    if p < 3\
    \ {\n        return modp(n - 2, p)\n    }\n    if p < 5 {\n        return modp(n\
    \ - 3, p)\n    }\n    if p < 7 {\n        return modp(n - 4, p)\n    }\n    if\
    \ p < 9 {\n        return modp(n - 5, p)\n    }\n    if p < 11 {\n        return\
    \ modp(n - 6, p)\n    }\n    if p < 13 {\n        return modp(n - 7, p)\n    }\n\
    \    if p < 15 {\n        return modp(n - 8, p)\n    }\n    if p < 17 {\n    \
    \    return modp(n - 9, p)\n    }\n    if p < 19 {\n        return modp(n - 10,\
    \ p)\n    }\n    if p < 23 {\n        return modp(n - 11, p)\n    }\n    if p\
    \ < 25 {\n        return modp(n - 12, p)\n    }\n    if p < 27 {\n        return\
    \ modp(n - 13, p)\n    }\n    if p < 29 {\n        return modp(n - 14, p)\n  \
    \  }\n    if p < 31 {\n        return modp(n - 15, p)\n    }\n    if p < 33 {\n\
    \        return modp(n - 16, p)\n    }\n    if p < 35 {\n        return modp(n\
    \ - 17, p)\n    }\n    if p < 37 {\n        return modp(n - 18, p)\n    }\n  \
    \  if p < 39 {\n        return modp(n - 19, p)\n    }\n    if p < 41 {\n     \
    \   return modp(n - 20, p)\n    }\n    if p < 43 {\n        return modp(n - 21,\
    \ p)\n    }\n    if p < 45 {\n        return modp(n - 22, p)\n    }\n    if p\
    \ < 47 {\n        return modp(n - 23, p)\n    }\n    if p < 49 {\n        return\
    \ modp(n - 24, p)\n    }\n    if p < 51 {\n        return modp(n - 25, p)\n  \
    \  }\n    if p < 53 {\n        return modp(n - 26, p)\n    }\n    if p < 55 {\n\
    \        return modp(n - 27, p)\n    }\n    if p < 57 {\n        return modp(n\
    \ - 28, p)\n    }\n    if p < 59 {\n        return modp(n - 29, p)\n    }\n  \
    \  if p < 61 {\n        return modp(n - 30, p)\n    }\n    if p < 63 {\n     \
    \   return modp(n - 31, p)\n    }\n    if p < 65 {\n        return modp(n - 32,\
    \ p)\n    }\n    if p < 67 {\n        return mod\nfunc TestModp(t *testing.T)\
    \ {\n  candidate := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 5),\
    \ expected: 3 },\n     { actual: candidate(1101, 101), expected: 2 },\n     {\
    \ actual: candidate(0, 101), expected: 1 },\n     { actual: candidate(3, 11),\
    \ expected: 8 },\n     { actual: candidate(100, 101), expected: 1 },\n     { actual:\
    \ candidate(30, 5), expected: 4 },\n     { actual: candidate(31, 5), expected:\
    \ 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2bvn_sa9_test.go:127:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074951
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n < 0 {\n        n *= -1\n\
    \    }\n    if p < 0 {\n        p *= -1\n    }\n    if n == 0 {\n        return\
    \ 1\n    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n      \
    \  return n\n    }\n    if p > p {\n        return modp(n - 1, p) + p\n    }\n\
    \    if p < p {\n        return modp(n - 1, p)\n    }\n    return modp(n - 1,\
    \ p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmphtdyup_d_test.go:63: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmphtdyup_d_test.go:63: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074952
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if p < 2 {\n        return\
    \ modp(n - 1, p) + p\n    }\n    if p < p {\n        return modp(n - 1, p) + p\n\
    \    }\n    if p < p {\n        return modp(n - 1, p)\n    }\n    return modp(n\
    \ - 1, p)\n}\n\nfunc TestModp(t *testing.T) {\n  candidate := modp\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101,\
    \ 101), expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n   \
    \  { actual: candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101),\
    \ expected: 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual:\
    \ candidate(31, 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestModp (0.00s)\n    --- FAIL: TestModp/test_num__0 (0.00s)\n\
    \        tmp5xfxywkg_test.go:57: expected '%!s(int=3)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__1 (0.00s)\n        tmp5xfxywkg_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__3 (0.00s)\n\
    \        tmp5xfxywkg_test.go:57: expected '%!s(int=8)', got '%!s(int=11)'\n  \
    \  --- FAIL: TestModp/test_num__4 (0.00s)\n        tmp5xfxywkg_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=101)'\n    --- FAIL: TestModp/test_num__5 (0.00s)\n\
    \        tmp5xfxywkg_test.go:57: expected '%!s(int=4)', got '%!s(int=5)'\n   \
    \ --- FAIL: TestModp/test_num__6 (0.00s)\n        tmp5xfxywkg_test.go:57: expected\
    \ '%!s(int=3)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660075064
- exit_code: 1
  program: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
    \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
    \ 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 1\n\
    \    }\n    if n == 1 {\n        return p\n    }\n    if n == p {\n        return\
    \ n\n    }\n    if p < 2 {\n        return n\n    }\n    if p < 3 {\n        return\
    \ modp(n - 1, p)\n    }\n    if p < 4 {\n        return modp(n - 2, p)\n    }\n\
    \    if p < 5 {\n        return modp(n - 3, p)\n    }\n    if p < 6 {\n      \
    \  return modp(n - 4, p)\n    }\n    if p < 7 {\n        return modp(n - 5, p)\n\
    \    }\n    if p < 8 {\n        return modp(n - 6, p)\n    }\n    if p < 9 {\n\
    \        return modp(n - 7, p)\n    }\n    if p < 10 {\n        return modp(n\
    \ - 8, p)\n    }\n    if p < 11 {\n        return modp(n - 9, p)\n    }\n    if\
    \ p < 12 {\n        return modp(n - 10, p)\n    }\n    if p < 13 {\n        return\
    \ modp(n - 11, p)\n    }\n    if p < 14 {\n        return modp(n - 12, p)\n  \
    \  }\n    if p < 15 {\n        return modp(n - 13, p)\n    }\n    if p < 16 {\n\
    \        return modp(n - 14, p)\n    }\n    if p < 17 {\n        return modp(n\
    \ - 15, p)\n    }\n    if p < 18 {\n        return modp(n - 16, p)\n    }\n  \
    \  if p < 19 {\n        return modp(n - 17, p)\n    }\n    if p < 20 {\n     \
    \   return modp(n - 18, p)\n    }\n    if p < 21 {\n        return modp(n - 19,\
    \ p)\n    }\n    if p < 22 {\n        return modp(n - 20, p)\n    }\n    if p\
    \ < 23 {\n        return modp(n - 21, p)\n    }\n    if p < 24 {\n        return\
    \ modp(n - 22, p)\n    }\n    if p < 25 {\n        return modp(n - 23, p)\n  \
    \  }\n    if p < 26 {\n        return modp(n - 24, p)\n    }\n    if p < 27 {\n\
    \        return modp(n - 25, p)\n    }\n    if p < 28 {\n        return modp(n\
    \ - 26, p)\n    }\n    if p < 29 {\n        return modp(n - 27, p)\n    }\n  \
    \  if p < 30 {\n        return modp(n - 28, p)\n    }\n    if p < 31 {\n     \
    \   return modp(n - 29, p)\n    }\n    if p < 32 {\n        return modp(n - 30,\
    \ p)\n    }\n    if p < 33 {\n        return modp(n - 31, p)\n    }\n    if p\
    \ < 34 {\n        return modp(n - 32, p)\n\nfunc TestModp(t *testing.T) {\n  candidate\
    \ := modp\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(3, 5), expected: 3 },\n   \
    \  { actual: candidate(1101, 101), expected: 2 },\n     { actual: candidate(0,\
    \ 101), expected: 1 },\n     { actual: candidate(3, 11), expected: 8 },\n    \
    \ { actual: candidate(100, 101), expected: 1 },\n     { actual: candidate(30,\
    \ 5), expected: 4 },\n     { actual: candidate(31, 5), expected: 3 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp495f1ihm_test.go:128:6: expected ''('', found TestModp

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074953
