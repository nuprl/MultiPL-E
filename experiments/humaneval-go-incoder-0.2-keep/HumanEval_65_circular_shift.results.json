{
  "language": "go_test.go",
  "name": "HumanEval_65_circular_shift",
  "results": [
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += string(x%10)\n        x = x/10\n    }\n    for i := shift; i < x; i++ {\n        s += string(x%10)\n        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmpyexgtoi5_test.go:18:14: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n/tmp/tmpyexgtoi5_test.go:22:14: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * 10)\n    x <<= shift\n    x >>= shift\n    x %= (10 * 10)\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmps9orirk9_test.go:40: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmps9orirk9_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmps9orirk9_test.go:40: expected '21', got '12'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmps9orirk9_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    x %= 10\n    shift %= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpdklcreq0_test.go:90:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838 +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x4b3114?)\n\t/tmp/tmp0iq90frd_test.go:16 +0xe5\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp0iq90frd_test.go:35 +0xde\ntesting.tRunner(0xc0000da340, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486 +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    x %= 10\n    for i := 0; i < shift; i++ {\n        s += x%10\n        x /= 10\n    }\n    s += x\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjyv0rag7_test.go:19:9: invalid operation: s += x % 10 (mismatched types string and int)\n/tmp/tmpjyv0rag7_test.go:22:5: invalid operation: s += x (mismatched types string and int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10 - x)\n    }\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    shift /= 10\n    x -= shift\n    x /= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmplbwex5p0_test.go:116:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074851
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type string\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074808
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%0*d\", i, x)\n    }\n    for i := 0; i < shift; i++ {\n        x = x >> 1\n        if x == 0 {\n            break\n        }\n        s += fmt.Sprintf(\"%0*d\", i, x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpuxu4g8pz_test.go:47: expected '001', got '1001005025'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpuxu4g8pz_test.go:47: expected '12', got '121263'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpuxu4g8pz_test.go:47: expected '79', got '9797970970097000970000970000097482412006000300001'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpuxu4g8pz_test.go:47: expected '21', got '126'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpuxu4g8pz_test.go:47: expected '11', got
      "timestamp": 1660074853
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp09s6ralv_test.go:84:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074807
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n    x >>= shift\n    shift %= len(strconv.Itoa(x))\n    return strconv.Itoa(x) + strconv.Itoa(shift)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmndzxjhs_test.go:17:20: undefined: strconv\n/tmp/tmpmndzxjhs_test.go:18:16: undefined: strconv\n/tmp/tmpmndzxjhs_test.go:21:18: undefined: strconv\n/tmp/tmpmndzxjhs_test.go:22:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return strconv.Itoa(x[:shift])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgwf5imfl_test.go:18:20: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:19:16: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:19:29: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpgwf5imfl_test.go:21:12: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:21:25: invalid operation: cannot slice x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp3f5r3vum_test.go:43: expected '001', got '[0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp3f5r3vum_test.go:43: expected '12', got '[0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp3f5r3vum_test.go:43: expected '79', got '[0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp3f5r3vum_test.go:43: expected '21', got '[0 0]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp3f5r3vum_test.go:43: expected '11', got '[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074810
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type string\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp15sxjo_q_test.go:17:18: undefined: strconv\n/tmp/tmp15sxjo_q_test.go:20:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    shift += x\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x %= 10\n    x /= 10\n    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpvb4jrm3p_test.go:116:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074811
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838 +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x4b3114?)\n\t/tmp/tmp0iq90frd_test.go:16 +0xe5\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp0iq90frd_test.go:35 +0xde\ntesting.tRunner(0xc0000da340, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486 +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwnu0l3rd_test.go:18:20: undefined: strconv\n/tmp/tmpwnu0l3rd_test.go:19:21: undefined: strconv\n/tmp/tmpwnu0l3rd_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp7pobzds_test.go:18:20: undefined: strconv\n/tmp/tmpp7pobzds_test.go:19:16: undefined: strconv\n/tmp/tmpp7pobzds_test.go:19:29: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpp7pobzds_test.go:21:12: undefined: strconv\n/tmp/tmpp7pobzds_test.go:21:25: invalid operation: cannot slice x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074803
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838 +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x4b3114?)\n\t/tmp/tmp0iq90frd_test.go:16 +0xe5\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp0iq90frd_test.go:35 +0xde\ntesting.tRunner(0xc0000da340, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486 +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp54eus7pb_test.go:39: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp54eus7pb_test.go:39: expected '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp54eus7pb_test.go:39: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp54eus7pb_test.go:39: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp54eus7pb_test.go:39: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + circular_shift(x, shift+1)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp7pobzds_test.go:18:20: undefined: strconv\n/tmp/tmpp7pobzds_test.go:19:16: undefined: strconv\n/tmp/tmpp7pobzds_test.go:19:29: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpp7pobzds_test.go:21:12: undefined: strconv\n/tmp/tmpp7pobzds_test.go:21:25: invalid operation: cannot slice x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074803
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result := \"\"\n    for shift > 0 {\n        digit, shift := x/10, shift%10\n        result = string(digit) + result\n        x = x%10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoltiqev2_test.go:18:16: shift declared but not used\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpom8w806j_test.go:43: expected '001', got '[101 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpom8w806j_test.go:43: expected '12', got '[13 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpom8w806j_test.go:43: expected '79', got '[98 1 1 1 1 1 1 1 1]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpom8w806j_test.go:43: expected '21', got '[13 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpom8w806j_test.go:43: expected '11', got '[12 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074814
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n    digits := []string{}\n    for i := len(strconv.Itoa(x)); i > shift; i-- {\n        digits = append(digits, strconv.Itoa(x%10))\n        x /= 10\n    }\n    digits = append(digits, strconv.Itoa(x))\n    return strings.Join(digits, \"\")\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpms0pj5wz_test.go:16:20: undefined: strconv\n/tmp/tmpms0pj5wz_test.go:17:16: undefined: strconv\n/tmp/tmpms0pj5wz_test.go:20:18: undefined: strconv\n/tmp/tmpms0pj5wz_test.go:21:33: undefined: strconv\n/tmp/tmpms0pj5wz_test.go:24:29: undefined: strconv\n/tmp/tmpms0pj5wz_test.go:25:12: undefined: strings\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '001', got '[0 0 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '79', got '[7 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpu8xbwwkd_test.go:45: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074806
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '21', got '0'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = x * 10 + x\n    }\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz5igv94p_test.go:17:18: undefined: strconv\n/tmp/tmpz5igv94p_test.go:18:20: undefined: strconv\n/tmp/tmpz5igv94p_test.go:19:21: undefined: strconv\n/tmp/tmpz5igv94p_test.go:26:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n    }\n    if shift > len(s) {\n        for i := len(s) - 1; i >= shift; i-- {\n            x <<= 1\n            s += string(x)\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmptug_ekpz_test.go:18:14: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n/tmp/tmptug_ekpz_test.go:24:18: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x >>= shift\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsen2hde5_test.go:18:20: undefined: strconv\n/tmp/tmpsen2hde5_test.go:19:16: undefined: strconv\n/tmp/tmpsen2hde5_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074806
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int, len(x))\n    for i := 0; i < len(x); i++ {\n        digits[i] = (digits[i]+1)<<shift\n        if digits[i] >= len(x) {\n            digits[i] -= len(x)\n        }\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl9g_av0e_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmpl9g_av0e_test.go:19:31: invalid argument: x (variable of type int) for len\n/tmp/tmpl9g_av0e_test.go:20:25: invalid argument: x (variable of type int) for len\n/tmp/tmpl9g_av0e_test.go:22:29: invalid argument: x (variable of type int) for len\n/tmp/tmpl9g_av0e_test.go:23:30: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074806
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7wkpn427_test.go:17:20: undefined: strconv\n/tmp/tmp7wkpn427_test.go:18:16: undefined: strconv\n/tmp/tmp7wkpn427_test.go:20:18: undefined: strconv\n/tmp/tmp7wkpn427_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074812
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    result += strconv.Itoa(x)\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp852oovef_test.go:18:20: undefined: strconv\n/tmp/tmp852oovef_test.go:19:21: undefined: strconv\n/tmp/tmp852oovef_test.go:23:19: undefined: strconv\n/tmp/tmp852oovef_test.go:26:15: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp09s6ralv_test.go:84:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074807
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5027e0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838 +0x207\ncommand-line-arguments_test.circular_shift(...)\n\t/tmp/tmpt3g82c8w_test.go:16\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmpt3g82c8w_test.go:33 +0x11a\ntesting.tRunner(0xc0000cc680, 0x527d40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486 +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= 0\n    result := \"\"\n    for i := len(strconv.Itoa(x)); i > 0; i-- {\n        result += strconv.Itoa(x&1)\n        x >>= 1\n    }\n    if shift > 0 {\n        result += strconv.Itoa(x >> shift)\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3ur601tq_test.go:17:18: undefined: strconv\n/tmp/tmp3ur601tq_test.go:21:18: undefined: strconv\n/tmp/tmp3ur601tq_test.go:22:19: undefined: strconv\n/tmp/tmp3ur601tq_test.go:26:19: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n    }\n    if shift < len(x) {\n        for i := len(x) - shift; i < len(x); i++ {\n            s += fmt.Sprintf(\"%d\", x%10)\n            x = x/10\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvjkqd9s_test.go:21:20: invalid argument: x (variable of type int) for len\n/tmp/tmpqvjkqd9s_test.go:22:22: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpo3o1xz43_test.go:93:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpgy1e144l_test.go:45: expected '001', got '[0 0 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpgy1e144l_test.go:45: expected '12', got '[2 1 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpgy1e144l_test.go:45: expected '79', got '[7 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpgy1e144l_test.go:45: expected '21', got '[2 1]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpgy1e144l_test.go:45: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprlc4dlpk_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n/tmp/tmprlc4dlpk_test.go:22:36: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074803
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwnu0l3rd_test.go:18:20: undefined: strconv\n/tmp/tmpwnu0l3rd_test.go:19:21: undefined: strconv\n/tmp/tmpwnu0l3rd_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        if x < 0 {\n            s = string([]byte{x})\n            break\n        }\n        x /= 10\n        s = string([]byte{x})\n    }\n    if shift < len(s) {\n        s = s[len(s)-shift:] + s[:len(s)-shift]\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe1pep1ja_test.go:19:31: cannot use x (variable of type int) as type byte in array or slice literal\n/tmp/tmpe1pep1ja_test.go:23:27: cannot use x (variable of type int) as type byte in array or slice literal\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1wj0b5xh_test.go:17:20: undefined: strconv\n/tmp/tmp1wj0b5xh_test.go:18:22: undefined: strconv\n/tmp/tmp1wj0b5xh_test.go:22:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpzz99aa8l_test.go:107:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiabsbwbn_test.go:18:20: undefined: strconv\n/tmp/tmpiabsbwbn_test.go:19:16: undefined: strconv\n/tmp/tmpiabsbwbn_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return strconv.Itoa(x[:shift])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgwf5imfl_test.go:18:20: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:19:16: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:19:29: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpgwf5imfl_test.go:21:12: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:21:25: invalid operation: cannot slice x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmplrnxmv4x_test.go:90:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074851
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = 10*x + x\n    }\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpio_32bjx_test.go:18:20: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074854
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := 0; i < shift; i++ {\n        digits[len(digits)-i-1]++\n    }\n    return strconv.Itoa(digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4cs7s7h6_test.go:16:31: undefined: strconv\n/tmp/tmp4cs7s7h6_test.go:24:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074854
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3eq1fukz_test.go:16:20: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := make([]int, len(strconv.Itoa(x)))\n    for i := 0; i < len(digits); i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for i := len(digits) - 1; i >= shift; i-- {\n        digits[i] = digits[i+1]\n    }\n    for i := 0; i < shift; i++ {\n        digits[i] = digits[len(digits)-1-i]\n    }\n    return fmt.Sprintf(\"%s\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvs7e4hx0_test.go:16:31: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    x %= 10\n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x /= 10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmpafrmhmil_test.go:19:14: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s := make([]int, len(x))\n    copy(s, x)\n    for i := 0; i < shift; i++ {\n        s[i] = s[i-1]\n    }\n    s[shift] = s[x]\n    for i := 0; i < len(s); i++ {\n        s[i] = s[i+1]\n    }\n    return fmt.Sprintf(\"%v\", s)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm9e913da_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmpm9e913da_test.go:19:26: invalid argument: x (variable of type int) for len\n/tmp/tmpm9e913da_test.go:20:10: invalid argument: copy expects slice arguments; found s (variable of type []int) and x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpo3o1xz43_test.go:93:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n    }\n    if shift > len(s) {\n        for i := len(s) - 1; i >= shift; i-- {\n            s += string(x)\n            x = x >> 1\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmppp12i9nj_test.go:18:14: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n/tmp/tmppp12i9nj_test.go:23:18: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp4smpimle_test.go:87:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074807
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpszn4890z_test.go:17:20: undefined: strconv\n/tmp/tmpszn4890z_test.go:18:21: undefined: strconv\n/tmp/tmpszn4890z_test.go:20:18: undefined: strconv\n/tmp/tmpszn4890z_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n    }\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_lup9sav_test.go:17:20: undefined: strconv\n/tmp/tmp_lup9sav_test.go:18:22: undefined: strconv\n/tmp/tmp_lup9sav_test.go:20:18: undefined: strconv\n/tmp/tmp_lup9sav_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n        x = x/10\n    }\n    if shift < len(s) {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmp_os5ztsx_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type string\n/tmp/tmp_os5ztsx_test.go:22:13: fmt.Sprintf format %c has arg s of wrong type string\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + x%10\n        x = x/10\n    }\n    if x > 0 {\n        s = s + x%10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp293b_60b_test.go:18:13: invalid operation: s + x % 10 (mismatched types string and int)\n/tmp/tmp293b_60b_test.go:22:13: invalid operation: s + x % 10 (mismatched types string and int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '21', got '0'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    digits := make([]int, len(x))\n    copy(digits, x)\n    for i := len(digits) - shift; i < len(digits); i++ {\n        digits[i] = digits[i+shift]\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqudmek81_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmpqudmek81_test.go:19:31: invalid argument: x (variable of type int) for len\n/tmp/tmpqudmek81_test.go:20:10: invalid argument: copy expects slice arguments; found digits (variable of type []int) and x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074814
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp09s6ralv_test.go:84:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074807
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    if x < 0 {\n        x += 10 * shift\n    }\n    x /= 10 * shift\n    x %= 10\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x%10) + circular_shift(x/10, shift)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpxp50ytp8_test.go:45: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpxp50ytp8_test.go:45: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpxp50ytp8_test.go:45: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpxp50ytp8_test.go:45: expected '21', got '0'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpxp50ytp8_test.go:45: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = x << 1\n    }\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6kbg2j1_test.go:18:20: undefined: strconv\n/tmp/tmpb6kbg2j1_test.go:19:21: undefined: strconv\n/tmp/tmpb6kbg2j1_test.go:27:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074803
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpep9gf5yz_test.go:81:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpep9gf5yz_test.go:81:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpg72ktke9_test.go:45: expected '001', got '0010'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpg72ktke9_test.go:45: expected '12', got '2100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpg72ktke9_test.go:45: expected '79', got '7900000000000000'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpg72ktke9_test.go:45: expected '11', got '1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo_os7y_r_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = x * 10 + x\n    }\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp43t968mw_test.go:18:20: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(int(x)%10)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.I\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpvxkjnj77_test.go:95:29: missing ',' before newline in argument list\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074854
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= 10\n    x >>= shift\n    x %= 10\n    x /= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpe246752i_test.go:111:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074854
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + x%10\n        x = x/10\n    }\n    return s + x%10\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ash_j7s_test.go:18:13: invalid operation: s + x % 10 (mismatched types string and int)\n/tmp/tmp8ash_j7s_test.go:21:12: invalid operation: s + x % 10 (mismatched types string and int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        shift = len(string(x))\n    }\n    x >>= shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmps01ra7br_test.go:113:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074807
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpj_2v0djc_test.go:87:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift %= len(x)\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvk6y_4fa_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmpvk6y_4fa_test.go:20:18: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnwee89w9_test.go:17:18: undefined: strconv\n/tmp/tmpnwee89w9_test.go:18:20: undefined: strconv\n/tmp/tmpnwee89w9_test.go:19:21: undefined: strconv\n/tmp/tmpnwee89w9_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074814
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprlc4dlpk_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n/tmp/tmprlc4dlpk_test.go:22:36: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074803
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return strconv.Itoa(x[:shift])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgwf5imfl_test.go:18:20: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:19:16: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:19:29: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpgwf5imfl_test.go:21:12: undefined: strconv\n/tmp/tmpgwf5imfl_test.go:21:25: invalid operation: cannot slice x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpzz99aa8l_test.go:107:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = string([]byte(s[:len(s)-1]) + []byte(x%10))\n        x /= 10\n    }\n    return fmt.Sprintf(\"%v\", s)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpji9kxfcc_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmpji9kxfcc_test.go:21:50: cannot convert x % 10 (value of type int) to type []byte\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result = fmt.Sprintf(\"%c%c\", result, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%c%c\", result, x%10)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpau8ry33e_test.go:18:20: invalid argument: x (variable of type int) for len\n/tmp/tmpau8ry33e_test.go:19:21: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x >>= shift\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8gbce_u8_test.go:18:20: undefined: strconv\n/tmp/tmp8gbce_u8_test.go:19:21: undefined: strconv\n/tmp/tmp8gbce_u8_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074814
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074810
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift /= 10\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3eq1fukz_test.go:16:20: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = 10*x + x\n    }\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmpnhcyxf89_test.go:18:20: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074812
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    s := make([]int, len(x))\n    copy(s, x)\n    for i := len(s) - 1; i >= shift; i-- {\n        s[i] = s[i-1]\n    }\n    s[shift] = 0\n    return fmt.Sprintf(\"%v\", s)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdoytp6an_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmpdoytp6an_test.go:19:26: invalid argument: x (variable of type int) for len\n/tmp/tmpdoytp6an_test.go:20:10: invalid argument: copy expects slice arguments; found s (variable of type []int) and x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp_1mc55t4_test.go:43: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp_1mc55t4_test.go:43: expected '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp_1mc55t4_test.go:43: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp_1mc55t4_test.go:43: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp_1mc55t4_test.go:43: expected '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074810
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%v\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '001', got '[100 100 100]'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '12', got '[12 12 12]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '79', got '[97 97 97 97 97 97 97 97 97]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '21', got '[12 12]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpoc3oj7yi_test.go:40: expected '11', got '[11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074808
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x >>= shift\n    shift /= 10\n    for i := 0; i < shift; i++ {\n        x = 10*x + 1\n    }\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpynnvqowe_test.go:18:20: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpep9gf5yz_test.go:81:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n            shift = len(x)\n        }\n        s += x[len(x)-shift]\n        x >>= shift\n        shift -= len(x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp01v4c6pa_test.go:18:24: invalid argument: x (variable of type int) for len\n/tmp/tmp01v4c6pa_test.go:19:25: invalid argument: x (variable of type int) for len\n/tmp/tmp01v4c6pa_test.go:21:15: invalid operation: cannot index x (variable of type int)\n/tmp/tmp01v4c6pa_test.go:23:22: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074857
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%d\", x%10)\n        x = x/10\n    }\n    if shift < len(s) {\n        s += fmt.Sprintf(\"%d\", x%10)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp9a94qnbl_test.go:44: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp9a94qnbl_test.go:44: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp9a94qnbl_test.go:44: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp9a94qnbl_test.go:44: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp9a94qnbl_test.go:44: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074857
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result := \"\"\n    for shift > 0 {\n        digit, shift := x%10, shift-1\n        result += string(digit) + string(digit)\n        x = x/10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpun2nirmm_test.go:18:16: shift declared but not used\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074857
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmplrnxmv4x_test.go:90:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074851
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x -= shift\n    x /= 10\n    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpt5zq1frr_test.go:116:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074856
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiabsbwbn_test.go:18:20: undefined: strconv\n/tmp/tmpiabsbwbn_test.go:19:16: undefined: strconv\n/tmp/tmpiabsbwbn_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = x << 1\n    }\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb6kbg2j1_test.go:18:20: undefined: strconv\n/tmp/tmpb6kbg2j1_test.go:19:21: undefined: strconv\n/tmp/tmpb6kbg2j1_test.go:27:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074803
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x)) - shift; i < len(strconv.Itoa(x)); i++ {\n        result = result + strconv.Itoa(x>>(i<<1))\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu1oiah00_test.go:17:18: undefined: strconv\n/tmp/tmpu1oiah00_test.go:18:18: undefined: strconv\n/tmp/tmpu1oiah00_test.go:19:27: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = x * 10 + x\n    }\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5_vz_gdd_test.go:18:20: undefined: strconv\n/tmp/tmp5_vz_gdd_test.go:19:21: undefined: strconv\n/tmp/tmp5_vz_gdd_test.go:26:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result := \"\"\n    for shift > 0 {\n        digit, shift := x/10, shift%10\n        result = string(digit) + result\n        x = x%10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoltiqev2_test.go:18:16: shift declared but not used\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphk8vn0aa_test.go:18:20: undefined: strconv\n/tmp/tmphk8vn0aa_test.go:19:21: undefined: strconv\n/tmp/tmphk8vn0aa_test.go:24:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074812
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074812
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpj_2v0djc_test.go:87:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '21', got '0'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmparsihuqk_test.go:110:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074857
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp3c6j84cv_test.go:96:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074857
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(string(x)) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmp4ilo6xvq_test.go:18:20: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := make([]int, len(strconv.Itoa(x)))\n    i := 0\n    for ; i < len(digits); i++ {\n        digits[i] = x%10\n        x /= 10\n    }\n    for ; i < len(digits); i++ {\n        digits[i] = digits[i-1]\n    }\n    for ; i < len(digits)-shift; i++ {\n        digits[i] = digits[i+shift]\n    }\n    return strconv.Itoa(digits[len(digits)-shift:])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4dqnpz7n_test.go:16:31: undefined: strconv\n/tmp/tmp4dqnpz7n_test.go:28:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift < 0 {\n        shift += len(strconv.Itoa(x))\n    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplf93gq06_test.go:17:18: undefined: strconv\n/tmp/tmplf93gq06_test.go:19:22: undefined: strconv\n/tmp/tmplf93gq06_test.go:21:18: undefined: strconv\n/tmp/tmplf93gq06_test.go:24:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo_os7y_r_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += fmt.Sprintf(\"%v\", x%10)\n        x = x/10\n    }\n    if shift < len(s) {\n        for i := len(s) - 1; i >= shift; i-- {\n            s += fmt.Sprintf(\"%v\", x%10)\n            x = x/10\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp8ae3o8sr_test.go:47: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp8ae3o8sr_test.go:47: expected '12', got '21'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp8ae3o8sr_test.go:47: expected '79', got '79000000'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp8ae3o8sr_test.go:47: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp8ae3o8sr_test.go:47: expected '11', got '11000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits)-1; i++ {\n        digits[i] = digits[i+1]\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '21', got '0'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpl8fkmrh2_test.go:43: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpesqrx6k8_test.go:18:20: undefined: strconv\n/tmp/tmpesqrx6k8_test.go:19:21: undefined: strconv\n/tmp/tmpesqrx6k8_test.go:24:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n/tmp/tmpesqrx6k8_test.go:25:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo_os7y_r_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074855
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp15sxjo_q_test.go:17:18: undefined: strconv\n/tmp/tmp15sxjo_q_test.go:20:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmps9i7ec01_test.go:40: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmps9i7ec01_test.go:40: expected '12', got '0'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmps9i7ec01_test.go:40: expected '79', got '0'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmps9i7ec01_test.go:40: expected '21', got '0'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmps9i7ec01_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    shift /= 10\n    for i := 0; i < shift; i++ {\n        x = 10*x + 1\n    }\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7vwa0rd1_test.go:18:20: undefined: strconv\n/tmp/tmp7vwa0rd1_test.go:19:22: undefined: strconv\n/tmp/tmp7vwa0rd1_test.go:26:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpj_2v0djc_test.go:87:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift %= len(x)\n    x <<= shift\n    x %= 10\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpek3vklbm_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmpek3vklbm_test.go:20:18: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074808
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x) - shift\n    }\n    x <<= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm6hn2lu__test.go:18:20: invalid argument: x (variable of type int) for len\n/tmp/tmpm6hn2lu__test.go:19:21: invalid argument: x (variable of type int) for len\n/tmp/tmpm6hn2lu__test.go:23:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp92hjifmx_test.go:18:20: undefined: strconv\n/tmp/tmp92hjifmx_test.go:19:21: undefined: strconv\n/tmp/tmp92hjifmx_test.go:25:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift /= 10\n    x -= (x << shift) % 10\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkvdnhr2k_test.go:18:20: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpzz99aa8l_test.go:107:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7wkpn427_test.go:17:20: undefined: strconv\n/tmp/tmp7wkpn427_test.go:18:16: undefined: strconv\n/tmp/tmp7wkpn427_test.go:20:18: undefined: strconv\n/tmp/tmp7wkpn427_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074812
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074806
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n    x /= 10\n    shift %= len(x)\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp_cj5z6n0_test.go:110:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074806
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[len(strconv.Itoa(x)) - shift:])\n    }\n    return strconv.Itoa(x[:shift]) + strconv.Itoa(x[shift:])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8lv8a0xf_test.go:18:20: undefined: strconv\n/tmp/tmp8lv8a0xf_test.go:19:16: undefined: strconv\n/tmp/tmp8lv8a0xf_test.go:19:29: invalid operation: cannot slice x (variable of type int)\n/tmp/tmp8lv8a0xf_test.go:21:12: undefined: strconv\n/tmp/tmp8lv8a0xf_test.go:21:25: invalid operation: cannot slice x (variable of type int)\n/tmp/tmp8lv8a0xf_test.go:21:38: undefined: strconv\n/tmp/tmp8lv8a0xf_test.go:21:51: invalid operation: cannot slice x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return string(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn_qj2trn_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpr6ig8732_test.go:42: expected '001', got '10'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpr6ig8732_test.go:42: expected '79', got '17'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpr6ig8732_test.go:42: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074859
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s += string(x)\n        x = x >> 1\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmprj5092f8_test.go:18:14: conversion from int to string yields a string of one rune, not a string of digits (did you mean fmt.Sprint(x)?)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpj_2v0djc_test.go:87:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    x += \"0\"\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4x911aw3_test.go:18:20: undefined: strconv\n/tmp/tmp4x911aw3_test.go:19:22: undefined: strconv\n/tmp/tmp4x911aw3_test.go:23:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n/tmp/tmp4x911aw3_test.go:24:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpj_2v0djc_test.go:87:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x[shift:]) + strconv.Itoa(x[:shift])\n    }\n    return strconv.Itoa(x) + strconv.Itoa(x>>shift)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsfa6r7f6_test.go:18:20: undefined: strconv\n/tmp/tmpsfa6r7f6_test.go:19:16: undefined: strconv\n/tmp/tmpsfa6r7f6_test.go:19:29: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpsfa6r7f6_test.go:19:42: undefined: strconv\n/tmp/tmpsfa6r7f6_test.go:19:55: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpsfa6r7f6_test.go:21:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result = digits[(i + x) % len(digits)] + result\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp951_te5y_test.go:19:18: invalid operation: digits[(i + x) % len(digits)] + result (mismatched types int and string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpy_c37529_test.go:49: expected '001', got '[0 0 1 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpy_c37529_test.go:49: expected '12', got '[2 1 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpy_c37529_test.go:49: expected '79', got '[7 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpy_c37529_test.go:49: expected '21', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpy_c37529_test.go:49: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x)); i > shift; i-- {\n        result = strconv.Itoa(x%10) + result\n        x /= 10\n    }\n    for i := len(strconv.Itoa(x)); i < shift; i++ {\n        result = strconv.Itoa(x%10) + result\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcpxgs2u_test.go:17:18: undefined: strconv\n/tmp/tmpbcpxgs2u_test.go:18:18: undefined: strconv\n/tmp/tmpbcpxgs2u_test.go:19:18: undefined: strconv\n/tmp/tmpbcpxgs2u_test.go:22:18: undefined: strconv\n/tmp/tmpbcpxgs2u_test.go:23:18: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp5kcvi5at_test.go:74:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x)) - shift; i < len(strconv.Itoa(x)); i++ {\n        s += strconv.Itoa(x%10)\n        x /= 10\n    }\n    if x > 0 {\n        s += strconv.Itoa(x)\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8l4jdya6_test.go:17:18: undefined: strconv\n/tmp/tmp8l4jdya6_test.go:18:18: undefined: strconv\n/tmp/tmp8l4jdya6_test.go:19:14: undefined: strconv\n/tmp/tmp8l4jdya6_test.go:23:14: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074859
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result += strconv.Itoa(x%10)\n        x /= 10\n    }\n    result += strconv.Itoa(x)\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp852oovef_test.go:18:20: undefined: strconv\n/tmp/tmp852oovef_test.go:19:21: undefined: strconv\n/tmp/tmp852oovef_test.go:23:19: undefined: strconv\n/tmp/tmp852oovef_test.go:26:15: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074852
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    if x < 0 {\n        x = 10 + x\n    }\n    x /= 10 * shift\n    x %= 10\n    if x < 10 {\n        return fmt.Sprintf(\"0%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpc8bekoa4_test.go:45: expected '001', got '00'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpc8bekoa4_test.go:45: expected '12', got '00'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpc8bekoa4_test.go:45: expected '79', got '00'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpc8bekoa4_test.go:45: expected '21', got '00'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpc8bekoa4_test.go:45: expected '11', got '00'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "timestamp": 1660074859
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x) - shift\n    }\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsf2aw8bh_test.go:18:20: invalid argument: x (variable of type int) for len\n/tmp/tmpsf2aw8bh_test.go:19:21: invalid argument: x (variable of type int) for len\n/tmp/tmpsf2aw8bh_test.go:24:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074859
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift %= len(x)\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptqh6m8oc_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmptqh6m8oc_test.go:20:18: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift >>= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp5kcvi5at_test.go:74:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result += \"0\"\n    }\n    for i := len(x) - shift; i < len(x); i++ {\n        result += x[i]\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8tlegfxl_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmp8tlegfxl_test.go:23:18: invalid argument: x (variable of type int) for len\n/tmp/tmp8tlegfxl_test.go:24:20: invalid operation: cannot index x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074859
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    return strconv.Itoa(x) + strconv.Itoa(10-x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgw_kxket_test.go:17:20: undefined: strconv\n/tmp/tmpgw_kxket_test.go:18:16: undefined: strconv\n/tmp/tmpgw_kxket_test.go:20:18: undefined: strconv\n/tmp/tmpgw_kxket_test.go:22:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074859
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{}\n    i := 0\n    for ; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for ; i < len(x); i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi963u50j_test.go:22:19: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074812
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n            shift -= len(x)\n            result = x[len(x)-shift:] + result\n        } else {\n            result = x[shift:] + result\n        }\n        shift -= 1\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzqz639d3_test.go:18:24: invalid argument: x (variable of type int) for len\n/tmp/tmpzqz639d3_test.go:19:26: invalid argument: x (variable of type int) for len\n/tmp/tmpzqz639d3_test.go:20:22: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpzqz639d3_test.go:22:22: invalid operation: cannot slice x (variable of type int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074859
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmplrnxmv4x_test.go:90:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074851
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(x) {\n        shift = len(x)\n    }\n    x >>= shift\n    shift >>= 1\n    for i := 0; i < shift; i++ {\n        x = 10*x + x\n    }\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnemi236z_test.go:18:20: invalid argument: x (variable of type int) for len\n/tmp/tmpnemi236z_test.go:19:21: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074803
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift -= len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjl7n24tl_test.go:18:20: undefined: strconv\n/tmp/tmpjl7n24tl_test.go:19:22: undefined: strconv\n/tmp/tmpjl7n24tl_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074814
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x <<= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp4smpimle_test.go:87:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074807
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpyvj8bieq_test.go:41: expected '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074810
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = s + x%10\n        x = x/10\n    }\n    if x > 0 {\n        s = s + x%10\n        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp58gfocum_test.go:18:13: invalid operation: s + x % 10 (mismatched types string and int)\n/tmp/tmp58gfocum_test.go:22:13: invalid operation: s + x % 10 (mismatched types string and int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmzpivk9p_test.go:18:20: undefined: strconv\n/tmp/tmpmzpivk9p_test.go:19:21: undefined: strconv\n/tmp/tmpmzpivk9p_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjyzz8wej_test.go:17:18: undefined: strconv\n/tmp/tmpjyzz8wej_test.go:18:18: undefined: strconv\n/tmp/tmpjyzz8wej_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n/tmp/tmpjyzz8wej_test.go:22:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    for i := 0; i < shift; i++ {\n        digits = append(digits, x%10)\n        x = x/10\n    }\n    return fmt.Sprintf(\"%d\", digits)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpy_c37529_test.go:49: expected '001', got '[0 0 1 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpy_c37529_test.go:49: expected '12', got '[2 1 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpy_c37529_test.go:49: expected '79', got '[7 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpy_c37529_test.go:49: expected '21', got '[2 1 0]'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpy_c37529_test.go:49: expected '11', got '[1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift %= len(x)\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptqh6m8oc_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmptqh6m8oc_test.go:20:18: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, 0)\n    }\n    for i := 0; i < len(digits); i++ {\n        digits[i] = digits[i]+1\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmp21av79t3_test.go:43: expected '001', got '1'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmp21av79t3_test.go:43: expected '12', got '1'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmp21av79t3_test.go:43: expected '79', got '1'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmp21av79t3_test.go:43: expected '21', got '1'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmp21av79t3_test.go:43: expected '11', got '1'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074812
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp09s6ralv_test.go:84:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074807
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpo3o1xz43_test.go:93:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x >>= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnuqyy1g7_test.go:16:20: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpr4kvow24_test.go:40: expected '001', got '0'\n    --- FAIL: TestCircular_Shift/test_num__1 (0.00s)\n        tmpr4kvow24_test.go:40: expected '12', got '2'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpr4kvow24_test.go:40: expected '79', got '7'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpr4kvow24_test.go:40: expected '21', got '2'\n    --- FAIL: TestCircular_Shift/test_num__4 (0.00s)\n        tmpr4kvow24_test.go:40: expected '11', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "timestamp": 1660074806
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for i := 0; i < shift; i++ {\n        s = fmt.Sprintf(\"%c%c\", x%10, s)\n        x = x/10\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test\n/tmp/tmpjb4z5ejk_test.go:18:13: fmt.Sprintf format %c has arg s of wrong type string\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return string(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn_qj2trn_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074804
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= len(strconv.Itoa(x))\n    x >>= shift\n    shift >>= len(strconv.Itoa(x))\n    x <<= shift\n    shift <<= \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp4464879p_test.go:74:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x <<= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>= shift\n    x >>\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpsagkkntw_test.go:102:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074859
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n            shift -= len(x)\n            s += x[len(x)-1]\n            x = x[:len(x)-1]\n        } else {\n            s += x\n            x >>= shift\n            shift -= shift\n        }\n    }\n    return s\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz4afrrna_test.go:18:24: invalid argument: x (variable of type int) for len\n/tmp/tmpz4afrrna_test.go:19:26: invalid argument: x (variable of type int) for len\n/tmp/tmpz4afrrna_test.go:20:19: invalid operation: cannot index x (variable of type int)\n/tmp/tmpz4afrrna_test.go:21:17: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpz4afrrna_test.go:23:13: invalid operation: s += x (mismatched types string and int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpo3o1xz43_test.go:93:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    shift %= len(strconv.Itoa(x+1))\n    x >>= shift\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbh80s5s8_test.go:17:18: undefined: strconv\n/tmp/tmpbh80s5s8_test.go:18:18: undefined: strconv\n/tmp/tmpbh80s5s8_test.go:22:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(x) {\n        return fmt.Sprintf(\"%v\", x)\n    }\n    x %= 10\n    shift %= len(x)\n    x <<= shift\n    x >>= shift\n    return fmt.Sprintf(\"%v\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptqh6m8oc_test.go:16:20: invalid argument: x (variable of type int) for len\n/tmp/tmptqh6m8oc_test.go:20:18: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpo3o1xz43_test.go:93:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074805
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    x <<= shift\n    x >>= shift\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsen2hde5_test.go:18:20: undefined: strconv\n/tmp/tmpsen2hde5_test.go:19:16: undefined: strconv\n/tmp/tmpsen2hde5_test.go:23:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074806
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x)\n    }\n    result := \"\"\n    for i := 0; i < shift; i++ {\n        result = strconv.Itoa(int(strconv.Itoa(x%10) + result))\n        x /= 10\n    }\n    return result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06bkx2b1_test.go:16:20: undefined: strconv\n/tmp/tmp06bkx2b1_test.go:17:16: undefined: strconv\n/tmp/tmp06bkx2b1_test.go:21:18: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    return fmt.Sprintf(\"%d\", x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\npanic: runtime error: integer divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x5028a0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838 +0x207\ncommand-line-arguments_test.circular_shift(0xc00007e728?, 0x4b3114?)\n\t/tmp/tmp0iq90frd_test.go:16 +0xe5\ncommand-line-arguments_test.TestCircular_Shift(0x0?)\n\t/tmp/tmp0iq90frd_test.go:35 +0xde\ntesting.tRunner(0xc0000da340, 0x527f50)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486 +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "timestamp": 1660074853
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        return strconv.Itoa(x) + strconv.Itoa(10-x)\n    }\n    shift %= len(strconv.Itoa(x))\n    return strconv.Itoa(x) + strconv.Itoa(10-x)[shift:]\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpql4licda_test.go:17:20: undefined: strconv\n/tmp/tmpql4licda_test.go:18:16: undefined: strconv\n/tmp/tmpql4licda_test.go:20:18: undefined: strconv\n/tmp/tmpql4licda_test.go:21:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n    x <<= shift\n    x %= (1 << shift)\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmplrnxmv4x_test.go:90:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074851
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplhq5mbv5_test.go:17:20: undefined: strconv\n/tmp/tmplhq5mbv5_test.go:18:21: undefined: strconv\n/tmp/tmplhq5mbv5_test.go:24:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    s := \"\"\n    for shift > 0 {\n        if shift > len(x) {\n            shift -= len(x)\n            s += x[len(x)-1]\n            x = x[:len(x)-1]\n        } else {\n            s += x[:shift]\n            x = x[shift:]\n        }\n        shift -= 1\n    }\n    return s + x\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxefjidnr_test.go:18:24: invalid argument: x (variable of type int) for len\n/tmp/tmpxefjidnr_test.go:19:26: invalid argument: x (variable of type int) for len\n/tmp/tmpxefjidnr_test.go:20:19: invalid operation: cannot index x (variable of type int)\n/tmp/tmpxefjidnr_test.go:21:17: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpxefjidnr_test.go:23:18: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpxefjidnr_test.go:24:17: invalid operation: cannot slice x (variable of type int)\n/tmp/tmpxefjidnr_test.go:28:12: invalid operation: s + x (mismatched types string and int)\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x += \"0\"\n    return fmt.Sprintf(\"%0*d\", len(x), x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprlc4dlpk_test.go:21:5: invalid operation: x += \"0\" (mismatched types int and untyped string)\n/tmp/tmprlc4dlpk_test.go:22:36: invalid argument: x (variable of type int) for len\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074803
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x >>= shift\n    x \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpzz99aa8l_test.go:107:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074813
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n    x %= (10 * shift)\n    x /= 10 * shift\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpep9gf5yz_test.go:81:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074802
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= 10\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    x <<= shift\n    x %= 10\n    return strconv.Itoa(x)\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp92hjifmx_test.go:18:20: undefined: strconv\n/tmp/tmp92hjifmx_test.go:19:21: undefined: strconv\n/tmp/tmp92hjifmx_test.go:25:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074858
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := []int{x}\n    for i := 0; i < shift; i++ {\n        digits = append(digits, digits[len(digits)-1])\n    }\n    return fmt.Sprintf(\"%d\", digits[len(digits)-1])\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "Exception",
      "stderr": "",
      "stdout": "--- FAIL: TestCircular_Shift (0.00s)\n    --- FAIL: TestCircular_Shift/test_num__0 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '001', got '100'\n    --- FAIL: TestCircular_Shift/test_num__2 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '79', got '97'\n    --- FAIL: TestCircular_Shift/test_num__3 (0.00s)\n        tmpx_s1z1h0_test.go:40: expected '21', got '12'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "timestamp": 1660074809
    },
    {
      "exit_code": 2,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    result := \"\"\n    shift %= len(strconv.Itoa(x))\n    for i := len(strconv.Itoa(x)); i > shift; i-- {\n        result = strconv.Itoa(x%10) + result\n        x /= 10\n    }\n    return strconv.Itoa(x) + result\n}\n\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplx3_wp5n_test.go:17:18: undefined: strconv\n/tmp/tmplx3_wp5n_test.go:18:18: undefined: strconv\n/tmp/tmplx3_wp5n_test.go:19:18: undefined: strconv\n/tmp/tmplx3_wp5n_test.go:22:12: undefined: strconv\n",
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "timestamp": 1660074860
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    shift %= len(strconv.Itoa(x))\n    if shift > len(strconv.Itoa(x)) {\n        shift = len(strconv.Itoa(x))\n    }\n    x >>= shift\n    x %= 10\n    \nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmp09s6ralv_test.go:84:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074807
    },
    {
      "exit_code": 1,
      "program": "package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\n    x /= (10 * shift)\n    x %= (10 * shift)\nfunc TestCircular_Shift(t *testing.T) {\n  candidate := circular_shift\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(100, 2), expected: \"001\" },\n     { actual: candidate(12, 2), expected: \"12\" },\n     { actual: candidate(97, 8), expected: \"79\" },\n     { actual: candidate(12, 1), expected: \"21\" },\n     { actual: candidate(11, 101), expected: \"11\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "status": "SyntaxError",
      "stderr": "# command-line-arguments\n/tmp/tmpz9mlaq2z_test.go:73:6: expected '(', found TestCircular_Shift\n",
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "timestamp": 1660074859
    }
  ]
}