language: sh
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local counter=0\n    local prime_fib_index=$1\n    local fib_num\n\n\
    \    if ! is_integer $prime_fib_index; then\n        return 1\n    fi\n\n    for\
    \ fib_num in $(fib \"10\"); do\n        if is_prime $fib_num; then\n         \
    \   ((counter++))\n            if [[ $counter -eq $prime_fib_index ]]; then\n\
    \                echo $fib_num\n                return 0\n            fi\n   \
    \     fi\n    done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi99c39tm.sh: line 20: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local nth=$1\n    local prime_fib=2\n    local i=2\n    local fib\n \
    \   if [[ $nth -eq 1 ]]; then\n        echo \"$prime_fib\"\n        return\n \
    \   fi\n    while [[ $i -lt $nth ]]; do\n        fib=$(next_fib \"$fib\")\n  \
    \      if [[ $(is_prime \"$fib\") -eq 1 ]]; then\n            i=$((i+1))\n   \
    \         prime_fib=$fib\n        fi\n    done\n    echo \"$prime_fib\"\n}\n\n\
    candidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local count=$(($1-1))\n  echo \"Fibonacci prime $1 is: $(echo \"fibonacci($count)\"\
    \ | bc | is_prime)\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnevwaipk.sh: line 17: is_prime: command not found

    Runtime error (func=(main), adr=3): Function fibonacci not defined.

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  integer i=0\n  integer j=1\n  integer count=0\n  integer result=0\n  integer\
    \ count_p=0\n  integer input=$1\n  for (( ;; ))\n  do\n    if [ $i -eq 0 ]; then\n\
    \      (( count_p++ ))\n    elif [ $(( $i % 2 )) -eq 0 ]; then\n      continue\n\
    \    else\n      integer flag=0\n      for (( prime_index=3; prime_index<=$((\
    \ $i / 2 )); prime_index++ ))\n      do\n        if [ $(( $i % $prime_index ))\
    \ -eq 0 ]; then\n          flag=1\n          break\n        fi\n      done\n \
    \     if [ $flag -eq 0 ]; then\n        (( count_p++ ))\n      fi\n    fi\n  \
    \  if [ $count_p -eq $input ]; then\n      result=$i\n      break\n    fi\n  \
    \  (( count++ ))\n    (( j=i+j ))\n    (( i=j-i ))\n  done\n  echo $result\n}\n\
    \ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmple799rbo.sh: line 16: integer: command not found

    /tmp/tmple799rbo.sh: line 17: integer: command not found

    /tmp/tmple799rbo.sh: line 18: integer: command not found

    /tmp/tmple799rbo.sh: line 19: integer: command not found

    /tmp/tmple799rbo.sh: line 20: integer: command not found

    /tmp/tmple799rbo.sh: line 21: integer: command not found

    /tmp/tmple799rbo.sh: line 24: [: -eq: unary operator expected

    /tmp/tmple799rbo.sh: line 26: % 2 : syntax error: operand expected (error token
    is "% 2 ")

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  declare -i n=$1 i=1 fib=1\n  # Fibonacci numbers have been generated\n\
    \  declare -a fibs=(2 3)\n  # Return 0 if n is an integer\n  is_integer \"$n\"\
    \ || return 0\n  # Return 0 if n is a positive integer\n  is_positive_integer\
    \ \"$n\" || return 0\n  while [ $i -lt $n ]; do\n    # Generate a new Fibonacci\
    \ number\n    fibs[2]=$((fibs[0]+fibs[1]))\n    # Move elements in the array\n\
    \    fibs[0]=${fibs[1]}\n    fibs[1]=${fibs[2]}\n    fib=${fibs[2]}\n    # Increment\
    \ i\n    i+=1\n    # Check if fib is prime\n    is_prime \"$fib\" || continue\n\
    \    # Increment i\n    i+=1\n  done\n  echo \"$fib\"\n}\n\ncandidate() {\n  \
    \  prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmprjxv5_20.sh: line 20: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  _readargs \"$@\"\n  _prime_fib \"${__arg1}\"\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpav_0v2uq.sh: line 16: _readargs: command not found

    /tmp/tmpav_0v2uq.sh: line 17: _prime_fib: command not found

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=0\n    local fib=0\n    while [ $i -lt $1 ]; do\n        fib=$(fib\
    \ \"$fib\")\n        while [ \"$(is_prime \"$fib\")\" == \"0\" ]; do\n       \
    \     fib=$(fib \"$fib\")\n        done\n        ((i++))\n    done\n    echo \"\
    $fib\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp23vx8k7a.sh: line 19: fib: command not found

    /tmp/tmp23vx8k7a.sh: line 20: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=\"$1\"\n  local _i=0\n  local _j=1\n  local _k=1\n  local _fib=0\n\
    \  local _out=0\n  local _cnt=0\n  while [ ${_cnt} -lt ${n} ]; do\n    let _k=_i+_j\n\
    \    let _i=_j\n    let _j=_k\n    if [ $(( _k % 2 )) -eq 0 ]; then\n      continue\n\
    \    fi\n    if is_prime \"${_k}\"; then\n      let _cnt=_cnt+1\n      let _out=_k\n\
    \    fi\n  done\n  echo \"${_out}\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=27 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660023505
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local nth_fib=$(fib \"$n\")\n  #nth_fib=$(fib $n)\n  if [[\
    \ $nth_fib =~ ^2$|^3$|^5$|^7$ ]]; then\n    echo \"$nth_fib\"\n  else\n    prime_fib\
    \ \"$((n + 1))\"\n  fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=19 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660023505
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  # [TODO] You can code here.\n  n=$1\n  fib_nums=(2 3 5 13 89 233 1597 28657\
    \ 514229)\n  echo ${fib_nums[$n-1]}\n}\n\ncandidate() {\n    prime_fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023500
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    (( n>=1 )) || return 1\n    local i=0 last=1 cur=1\n\
    \    while (( i<n )); do\n        (( last=cur, cur+=last ))\n        is_prime\
    \ $cur && (( i++ ))\n    done\n    echo $cur\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660023505
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=0\n  local first=0\n  local second=1\n  local sum=0\n  local is_prime=\"\
    true\"\n  for ((i=0;i<$1;i++));\n  do\n    sum=$((first+second))\n    # check\
    \ if the number is prime\n    for ((j=2;j<$sum;j++));\n    do\n      if [[ $((sum%j))\
    \ -eq 0 ]]; then\n        is_prime=\"false\"\n        break\n      fi\n    done\n\
    \    if [[ $is_prime == \"true\" ]]; then\n      n=$sum\n    fi\n    is_prime=\"\
    true\"\n    first=$second\n    second=$sum\n  done\n  echo $n\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023500
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ \"$1\" == \"1\" ]; then\n    echo \"2\"\n  elif [ \"$1\" == \"2\"\
    \ ]; then\n    echo \"3\"\n  else\n    n=1\n    a=2\n    b=3\n    while true;\
    \ do\n      c=$((a+b))\n      if [ \"$(is_prime $c)\" == \"true\" ]; then\n  \
    \      ((n++))\n        if [ \"$n\" == \"$1\" ]; then\n          echo \"$c\"\n\
    \          break\n        fi\n      fi\n      a=$b\n      b=$c\n    done\n  fi\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660023505
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    n=$1\n    i=2\n    while [ $i -lt $n ]; do\n        i=$(($i+1))\n   \
    \     next=$(fib $i)\n        if [ $(is_prime $next) == \"True\" ]; then\n   \
    \         continue\n        else\n            i=$(($i-1))\n            break\n\
    \        fi\n    done\n    echo $(fib $i)\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1by5ednp.sh: line 28: fib: command not found

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  echo \"$(fib $1)\" | grep -Eo \"[[:digit:]]*\" |\n    while read line\n\
    \    do\n      if is_prime $line; then\n        echo $line\n        break\n  \
    \    fi\n    done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplf3irx79.sh: line 16: fib: command not found

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ \"${1}\" -eq 1 ]; then\n    echo '2'\n  else\n    fib 1 2 2\n  fi\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpadmvhuml.sh: line 19: fib: command not found

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    n=$1\n    fib_iter i=2 j=3 nth=1\n    while (( $nth < $n )); do\n   \
    \     if [ $(is_prime $i) = 1 ]; then\n            (( nth++ ))\n        fi\n \
    \       if [ $(is_prime $j) = 1 ]; then\n            (( nth++ ))\n        fi\n\
    \        fib_iter\n    done\n    if [ $(is_prime $i) = 1 ]; then\n        echo\
    \ $i\n    else\n        echo $j\n    fi\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3ox3i6f5.sh: line 17: fib_iter: command not found

    /tmp/tmp3ox3i6f5.sh: line 18: ((: < 1 : syntax error: operand expected (error
    token is "< 1 ")

    /tmp/tmp3ox3i6f5.sh: line 27: is_prime: command not found

    /tmp/tmp3ox3i6f5.sh: line 27: [: =: unary operator expected

    '
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    export LC_NUMERIC=C\n    [ $# -ne 1 ] && exit 1\n    local fibnum=0\n\
    \    local fibnum_i=1\n    local tmp=0\n    for i in $(seq $1); do\n        fibnum=$fibnum_i\n\
    \        tmp=$(bc <<< \"$fibnum + $fibnum_i\")\n        fibnum_i=$tmp\n      \
    \  is_prime $fibnum && break\n    done\n    echo \"$fibnum\"\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp3p1kbhgn.sh: line 25: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  number=$1\n  if [ -z \"$number\" ]; then return 1; fi\n  fib_i=0\n  fib_j=1\n\
    \  fib_count=1\n  # http://stackoverflow.com/questions/2509679/how-to-generate-a-random-integer-number-from-within-a-range\n\
    \  prime_fib_gen_candidate() {\n    # Generate number greater than $fib_i in (1..fib_j)\
    \ range\n    range=$((fib_j - fib_i + 1))\n    rand=$RANDOM\n    let \"rand %=\
    \ $range\"\n    echo $((fib_i + rand))\n  }\n  prime_fib_gen_candidate=$(prime_fib_gen_candidate)\n\
    \  while [ \"$fib_count\" -lt \"$number\" ]; do\n    if is_prime \"$prime_fib_gen_candidate\"\
    ; then\n      ((fib_count++))\n    fi\n    # https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression\n\
    \    fib_tmp=$((fib_i + fib_j))\n    fib_i=$fib_j\n    fib_j=$fib_tmp\n    prime_fib_gen_candidate=$(prime_fib_gen_candidate)\n\
    \  done\n  echo \"$prime_fib_gen_candidate\"\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    local fibs=1\n    local i=1\n  \
    \  local j=1\n    local res=1\n    local counter=1\n    local is_prime=0\n   \
    \ while [ $counter -lt $1 ]; do\n      let res=$i+$j\n      let i=$j\n      let\
    \ j=$res\n      # Check if $res is prime\n      let is_prime=1\n      for ((n=2;\
    \ n<=$(($res/2)); n++)); do\n        if [ $(($res%$n)) -eq 0 ]; then\n       \
    \   is_prime=0\n          break\n        fi\n      done\n      if [ $is_prime\
    \ -eq 1 ]; then\n        let counter=$counter+1\n      fi\n    done\n    echo\
    \ $res\n  else\n    echo \"You have to provide a number!\"\n  fi\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local fib_1=1\n    local fib_2=1\n    local fib=1\n    local i=1\n  \
    \  while [ $i -le $1 ]; do\n        if [[ $(nth_fib $i) -gt $(is_prime $fib) ]];\
    \ then\n            fib=$(nth_fib $i)\n        else\n            fib=$(is_prime\
    \ $fib)\n        fi\n        i=$(($i+1))\n    done\n    echo $fib\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpgmci6u9j.sh: line 21: nth_fib: command not found

    /tmp/tmpgmci6u9j.sh: line 21: is_prime: command not found

    /tmp/tmpgmci6u9j.sh: line 24: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n\n  local i\n  local fibo\n  local prime\n  n=\"$1\"\n  i=0\n  #\
    \ fibo is an array\n  fibo=()\n  prime=()\n  for p in $(primes \"1000\"); do\n\
    \    prime[${#prime[@]}]=\"$p\"\n  done\n  while [ $i -lt $n ]; do\n    if [ $i\
    \ -eq 0 ]; then\n      fibo[$i]=2\n    elif [ $i -eq 1 ]; then\n      fibo[$i]=3\n\
    \    else\n      fibo[$i]=$(( ${fibo[$((i-1))]} + ${fibo[$((i-2))]} ))\n    fi\n\
    \    if [ \"${prime[${#prime[@]}-1]}\" -lt \"${fibo[$i]}\" ]; then\n      break\n\
    \    fi\n    for p in ${prime[@]}; do\n      if [ \"$p\" -eq \"${fibo[$i]}\" ];\
    \ then\n        break 2\n      fi\n    done\n    i=$((i+1))\n  done\n  echo \"\
    ${fibo[$((i-1))]}\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqw22et25.sh: line 25: primes: command not found

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 25: primes: command not found

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 25: primes: command not found

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 25: primes: command not found

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    /tmp/tmpqw22et25.sh: line 36: prime: bad array subscript

    /tmp/tmpqw22et25.sh: line 36: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ $1 -lt 1 ]; then\n    exit 1\n  fi\n  fib=$(fib \"$1\")\n  while true;\
    \ do\n    $(is_prime \"$fib\")\n    if [ $? -eq 0 ]; then\n      echo \"$fib\"\
    \n      break\n    fi\n    fib=$(fib $(($1 + 1)))\n    let \"i++\"\n  done\n}\n\
    \ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=31 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660023505
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local N=$1\n  local i=1\n  local fn=1\n  local fn1=1\n  local fn2=2\n \
    \ while [[ $i -lt $N ]]; do\n    fn=$((fn1 + fn2))\n    is_prime $fn && i=$((i\
    \ + 1))\n    fn1=$fn2\n    fn2=$fn\n  done\n  echo $fn\n}\n\ncandidate() {\n \
    \   prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023500
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=\"$1\"\n    local fib=\"$(echo \"1 1\" | awk 'BEGIN{for(i=1;i<'$i';i++){f=fib1+fib2;fib1=fib2;fib2=f;print\
    \ f}}')\"\n    echo \"$fib\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        python -c \"import fibonacci as\
    \ f; print(f.get_prime_fib($1))\"\n    else\n        echo \"ValueError: Not a\
    \ number\"\n    fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n\
    ImportError: No module named fibonacci\n"
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  set +e\n  source \"$DIR/is_prime.sh\"\n  source \"$DIR/fibonacci.sh\"\n\
    \  local n=$1\n  local i=1\n  local f=$(fibonacci \"$i\")\n  while [ $i -lt $n\
    \ ]; do\n    i=$((i+1))\n    f=$(fibonacci \"$i\")\n    while [ \"$(is_prime \"\
    $f\")\" != \"True\" ]; do\n      i=$((i+1))\n      f=$(fibonacci \"$i\")\n   \
    \ done\n  done\n  set -e\n  echo \"$f\"\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_dupmv6w.sh: line 17: /is_prime.sh: No such file or directory

    /tmp/tmp_dupmv6w.sh: line 18: /fibonacci.sh: No such file or directory

    /tmp/tmp_dupmv6w.sh: line 21: fibonacci: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # Setting:\n    #   o IFS='\\r\\n'    to handle both LF and CRLF endings\n\
    \    #   o LC_ALL=C      to get rid of localization errors\n    #   o xargs -r\
    \      to don't call fibonacci with an empty input\n    #   o sort -n -t' ' -k2\
    \ to sort numers by their second field that is a number\n    #   o awk '{print\
    \ $1}' to print the first field that is a number\n    local IFS='\\r\\n'\n   \
    \ local LC_ALL=C\n    echo \"$1\" | xargs -r | sed 's/^[^0-9]*//g' | awk '{print\
    \ $1}' | \\\n        xargs -r ./fibonacci | sort -n -t' ' -k2 | xargs -r ./prime\
    \ | \\\n        awk '{print $1}'\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'xargs: ./fibonacci: No such file or directory

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [ $1 -le 0 ]; then\n        return 1\n    fi\n\n    local fib1=1\n\
    \    local fib2=1\n    local index=0\n    local tmp\n\n    while [ $index -lt\
    \ $1 ]; do\n        tmp=$fib1\n        fib1=$fib2\n        fib2=$((fib1 + tmp))\n\
    \        ((index++))\n    done\n\n    # Check if the number is prime\n    if [\
    \ $(is_prime $fib1) -eq 1 ]; then\n        echo $fib1\n    else\n        echo\
    \ $(prime_fib $(($1 + 1)))\n    fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=38 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=1; local res=0; local fib=0; local cnt=0;\n    while [[ $cnt\
    \ -lt $1 ]]; do\n        while [[ $(is_prime $fib) -eq 0 ]]; do\n            fib=$(fib\
    \ \"$i\")\n            let \"i++\"\n        done\n        res=$fib\n        let\
    \ \"i++\"\n        let \"cnt++\"\n        fib=$(fib \"$i\")\n    done\n    echo\
    \ $res\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=34 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ $1 -lt 1 ]]; then\n    echo \"ERROR prime_fib got: $1 expected: integer\
    \ greater or equal to 1\" >&2\n    return 1\n  fi\n  local fib_idx=1; local fib_num=1;\
    \ local prime_num=2\n  while [[ $fib_idx -lt $1 ]]; do\n    fib_num=$(fib $(($fib_idx\
    \ + 1)))\n    prime_num=$(next_prime $(($prime_num + 1)))\n    if [[ $fib_num\
    \ -eq $prime_num ]]; then\n      fib_idx=$(($fib_idx + 1))\n    fi\n  done\n \
    \ echo $fib_num\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"Argument 1 is not an integer\"\
    \n    return\n  fi\n\n  i=0\n  n=0\n  while [ $i -lt $1 ]; do\n    fib=$(fibonacci\
    \ $n)\n    if $(is_prime $fib); then\n      i=$((i+1))\n    fi\n    n=$((n+1))\n\
    \  done\n  echo $fib\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    res=\"\"\n    for n in $(seq 1 100); do\n        res=$(fib \"$n\")\n\
    \        if is_prime \"$res\"; then\n            count=$(($count+1))\n       \
    \     if [ \"$count\" == \"$1\" ]; then\n                echo \"$res\"\n     \
    \           break\n            fi\n        fi\n    done\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not found

    /tmp/tmph3vletle.sh: line 19: is_prime: command not found

    /tmp/tmph3vletle.sh: line 18: fib: command not fou'
  stdout: ''
  timestamp: 1660023501
- exit_code: 2
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ \"$1\" -le 1 ]]; then\n    echo \"2\"\n  else\n    # fibonacci numbers\
    \ up to 93rd\n    local prime_fib_fib_numbers=(\\\n      \"2\" \\\n      \"3\"\
    \ \\\n      \"5\" \\\n      \"8\" \\\n      \"13\" \\\n      \"21\" \\\n     \
    \ \"34\" \\\n      \"55\" \\\n      \"89\" \\\n      \"144\" \\\n      \"233\"\
    \ \\\n      \"377\" \\\n      \"610\" \\\n      \"987\" \\\n      \"1597\" \\\n\
    \      \"2584\" \\\n      \"4181\" \\\n      \"6765\" \\\n      \"10946\" \\\n\
    \      \"17711\" \\\n      \"28657\" \\\n      \"46368\" \\\n      \"75025\" \\\
    \n      \"121393\" \\\n      \"196418\" \\\n      \"317811\" \\\n      \"514229\"\
    \ \\\n      \"832040\" \\\n      \"1346269\" \\\n      \"2178309\" \\\n      \"\
    3524578\" \\\n      \"5702887\" \\\n      \"9227465\" \\\n      \"14930352\" \\\
    \n      \"24157817\" \\\n      \"39088169\" \\\n      \"63245986\" \\\n      \"\
    102334155\" \\\n      \"165580141\" \\\n      \"267914296\" \\\n      \"433494437\"\
    \ \\\n      \"701408733\" \\\n      \"1134903170\" \\\n      \"1836311903\" \\\
    \n      \"2971215073\" \\\n      \"4807526976\" \\\n      \"7778742049\" \\\n\
    \      \"12586269025\" \\\n      \"20365011074\" \\\n      \"32951280099\" \\\n\
    \      \"53316291173\" \\\n      \"86267571272\" \\\n      \"139583862445\" \\\
    \n      \"225851433717\" \\\n      \"365435296162\" \\\n      \"591286729879\"\
    \ \\\n      \"956722026041\" \\\n      \"1548008755920\" \\\n\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmph47mn7rt.sh: line 82: syntax error near unexpected token `(''

    /tmp/tmph47mn7rt.sh: line 82: `candidate() {''

    /tmp/tmph47mn7rt.sh: line 83: prime_fib: command not found

    /tmp/tmph47mn7rt.sh: line 84: syntax error near unexpected token `}''

    /tmp/tmph47mn7rt.sh: line 84: `}''

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=2\n    local i\n    local fib=1\n    local fib_1=1\n    local\
    \ fib_2=1\n    local flag=0\n    (( $1 < 1 )) && return 1\n    while (( n <= $1\
    \ )); do\n        for (( i = 2; i <= $fib / 2; i++ )); do\n            (( $fib\
    \ % i == 0 )) && { flag=1; break; }\n        done\n        (( flag == 0 )) &&\
    \ (( n++ ))\n        (( flag == 1 )) && { flag=0; continue; }\n        (( n ==\
    \ $1 )) && break\n        fib_2=$fib_1\n        fib_1=$fib\n        fib=$(( fib_1\
    \ + fib_2 ))\n    done\n    echo $fib\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1 i=1\n    local fib=1 fib2=0 fib_tmp=0\n    while [ $i -lt\
    \ $n ]; do\n        (( fib_tmp = fib + fib2 ))\n        fib2=$fib\n        fib=$fib_tmp\n\
    \        if ! $(is_prime $fib); then\n            (( i-- ))\n        fi\n    \
    \    (( i++ ))\n    done\n    echo $fib\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=0\n  local f=1\n  local fn=1\n  local i=0\n  while [ $i -lt $1\
    \ ]; do\n    ((i++))\n    ((n=f+fn))\n    f=$fn\n    fn=$n\n    if $(is_prime\
    \ $n); then\n      ((i++))\n    fi\n  done\n  echo $f\n}\n\ncandidate() {\n  \
    \  prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb5gpzc81.sh: line 25: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local fib_index=1\n  local fib_num=1\n  local prev_fib_num=1\n\
    \  local num_of_primes=0\n  until [ \"$num_of_primes\" = \"$n\" ]; do\n    fib_num=$(($fib_num\
    \ + $prev_fib_num))\n    if is_prime \"$fib_num\"; then\n      ((num_of_primes++))\n\
    \    fi\n    prev_fib_num=$fib_num\n    ((fib_index++))\n  done\n  echo \"$fib_num\"\
    \n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[\
    \ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[\
    \ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n   \
    \ [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n\
    \    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=47 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=44 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local __out=$2\n    local __res=$(fib \"$1\")\n    [ \"$(is_prime \"\
    $__res\")\" == \"True\" ] && \\\n        echo \"$__res\" > $__out || \\\n    \
    \    prime_fib \"$1\" \"$__out\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=8 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ $1 -eq 1 ]; then\n    echo 2\n  else\n    echo $(echo 2 $(fib $1)\
    \ | awk '{if ($1 % 2 == 0) { print $1 } else { print $2 }}')\n  fi\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpwxuwt6xf.sh: line 19: fib: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 2
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ -z \"$1\" ]]; then\n    echo -n \"\"\n    return 1\n  fi\n  if !\
    \ [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    echo -n \"\"\n    return 1\n  fi\n  # a[i]\
    \ is the first number that is a Fibonacci number and it's also prime.\n  declare\
    \ -a a=(\"1\" \"2\" \"3\" \"5\" \"13\" \"89\" \"233\" \"1597\" \"28657\" \"514229\"\
    \ \"433494437\" \"2971215073\" \"99194853094755497\" \"1066340417491710595814572169\"\
    \ \"19134702400093278081449423917\" \"28143753123253590953693379286343952411\"\
    \ \"475364333701284174842138206989404946643813777\" \"7540113804746346429\" \"\
    12200160415121876738\" \"19740274219868223167\" \"31940434634990099905\" \"51680708854858323072\"\
    \ \"83621143489848422977\" \"135301852344706746049\" \"218922995834555169026\"\
    \ \"354224848179261915075\" \"135301852344706746049\" \"218922995834555169026\"\
    \ \"354224848179261915075\" \"57028871464984165948269\" \"927372692193078999176\"\
    \ \"1500520536206896083277\" \"2427893228399975082453\" \"3928413764606871165730\"\
    \ \"640237370572800071178\" \"1031120143283307022229\" \"1655801413060670109592\"\
    \ \"26925748508234281076009\" \"43566776258854844738105\" \"70492524767089125814114\"\
    \ \"114059301025943970552219\" \"184551825793033096366333\" \"298611126818977066918552\"\
    \n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[\
    \ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[\
    \ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n   \
    \ [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n\
    \    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdnokzbu0.sh: line 28: syntax error near unexpected token `(''

    /tmp/tmpdnokzbu0.sh: line 28: `candidate() {''

    /tmp/tmpdnokzbu0.sh: line 29: prime_fib: command not found

    /tmp/tmpdnokzbu0.sh: line 30: syntax error near unexpected token `}''

    /tmp/tmpdnokzbu0.sh: line 30: `}''

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ -z $1 ]]; then\n    echo \"usage: prime_fib <integer>\"\n    return\
    \ 1\n  fi\n\n  if ! command -v ./is_prime &> /dev/null; then\n    echo \"is_prime\
    \ is required.\"\n    return 1\n  fi\n\n  if ! command -v ./nth_fibonacci &> /dev/null;\
    \ then\n    echo \"nth_fibonacci is required.\"\n    return 1\n  fi\n\n  local\
    \ n=$1\n  local current=1\n  local count=0\n  local nth\n\n  while [[ $count -lt\
    \ $n ]]; do\n    nth=$(./nth_fibonacci $current)\n    if ./is_prime $nth; then\n\
    \      ((count++))\n    fi\n    ((current++))\n  done\n\n  echo $nth\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # Smallest Fibonacci number that is a prime.\n    start=\"2\"\n    if\
    \ (( $1 < 1 )); then\n        echo \"$start\"\n        return\n    fi\n\n    i=1\n\
    \    while (( i < $1 )); do\n        fib=$(fibonacci $i)\n        if $(is_prime\
    \ $fib); then\n            start=$fib\n            (( i++ ))\n        fi\n   \
    \     (( i++ ))\n    done\n    echo \"$start\"\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn1cezyrk.sh: line 25: fibonacci: command not found

    /tmp/tmpn1cezyrk.sh: line 26: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    [ $# -eq 1 ] || return 1\n    re='^[0-9]+$'\n    if ! [[ $1 =~ $re ]]\
    \ ; then\n       echo \"error: '$1' is not a number\" >&2; exit 1\n    fi\n  \
    \  if [ \"$1\" -lt 1 ]; then\n       echo \"error: '$1' must be greater than 0\"\
    \ >&2; exit 1\n    fi\n    local n=\"$1\"\n    local m=0\n    local count=0\n\
    \    while [ \"$count\" -lt \"$n\" ]; do\n        m=$(($m+1))\n        if $(is_prime\
    \ \"$m\"); then\n            if $(is_fib \"$m\"); then\n                count=$(($count+1))\n\
    \            fi\n        fi\n    done\n    echo \"$m\"\n}\n\ncandidate() {\n \
    \   prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=54 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=6 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local fib_n=1\n  local fib_n_prev=1\n  local count=2\n  local\
    \ prime=1\n  while [[ ${count} -lt ${n} ]]; do\n    (( fib_n = fib_n + fib_n_prev\
    \ ))\n    (( fib_n_prev = fib_n - fib_n_prev ))\n    (( count++ ))\n    # [[ $(is_prime\
    \ ${fib_n}) == \"true\" ]] && (( prime++ ))\n    $(is_prime ${fib_n}) && (( prime++\
    \ ))\n  done\n  echo $fib_n\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\"\
    ) = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local f_count=0\n  local f_num=1\n  local f_last=1\n  while\
    \ [[ ${f_count} -lt ${n} ]]; do\n    local tmp=${f_num}\n    f_num=$((f_num +\
    \ f_last))\n    f_last=${tmp}\n    if is_prime ${f_num}; then\n      f_count=$((f_count\
    \ + 1))\n    fi\n  done\n  echo ${f_num}\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=49 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local i=0; while :; do \n    local fib=$(fib $i)\n    (( $(is_prime $fib)\
    \ )) && echo $fib && break\n    (( i++ ))\n  done\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  n=$1\n  if [[ $n -le 0 ]]; then\n    echo -1\n    return\n  fi\n  if [[\
    \ $n -eq 1 ]]; then\n    echo 2\n    return\n  fi\n  if [[ $n -eq 2 ]]; then\n\
    \    echo 3\n    return\n  fi\n  # fib(1) = 2\n  # fib(2) = 3\n  # fib(3) = 5\n\
    \  fib0=2\n  fib1=3\n  for i in $(seq 3 $n); do\n    fib2=$((fib0 + fib1))\n \
    \   fib0=$fib1\n    fib1=$fib2\n    if ! is_prime $fib2; then\n      # Skip non-prime\
    \ Fibonacci numbers.\n      continue\n    fi\n    if [[ $((i - 1)) -eq $n ]];\
    \ then\n      echo $fib2\n      return\n    fi\n  done\n  echo -1\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpq0y0cjqf.sh: line 38: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=0\n    local a=1\n    local b=1\n    local t=1\n    local x=0\n\
    \    local y=0\n    if [[ \"$1\" =~ ^[1-9][0-9]*$ ]]; then\n        for ((i=1;\
    \ i<$1; i++)); do\n            t=$(($a+$b))\n            a=$b\n            b=$t\n\
    \            if is_prime \"$b\"; then\n                x=$y\n                y=$b\n\
    \            fi\n        done\n        echo \"$x\"\n    else\n        echo \"\
    error: argument is not an integer\"\n    fi\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [[ $1 -lt 1 ]]; then\n        echo 0\n        return\n    fi\n   \
    \ if [[ $1 -eq 1 ]]; then\n        echo 2\n        return\n    fi\n    if [[ $1\
    \ -eq 2 ]]; then\n        echo 3\n        return\n    fi\n    n=1\n    m=1\n \
    \   local i=3\n    while true; do\n        n=$((n+m))\n        m=$((n-m))\n  \
    \      is_prime $n && i=$((i+1))\n        if [[ $i -eq $1 ]]; then\n         \
    \   echo $n\n            return\n        fi\n    done\n}\n\ncandidate() {\n  \
    \  prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv5uzvlu5.sh: line 34: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local fib_num=$(fib $1)\n  local prime_num=$(prime_count $(expr $fib_num\
    \ + 1))\n  # fib(n) is the n-th number, so we must find the n-th prime\n  # after\
    \ fib(n) to satisfy the two conditions.\n  # For example, fib(4) = 3, thus, 5\
    \ is the 4-th prime after 3.\n  echo $(prime $prime_num)\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpvofhffjj.sh: line 16: fib: command not found

    /tmp/tmpvofhffjj.sh: line 17: prime_count: command not found

    /tmp/tmpvofhffjj.sh: line 21: prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    i=0\n    fib=0\n    next_fib=1\n    while [ $i -lt $1 ]; do\n       \
    \ if $(is_prime $fib); then\n            ((i++))\n        fi\n        temp=$fib\n\
    \        fib=$next_fib\n        next_fib=$((temp + next_fib))\n    done\n    echo\
    \ $fib\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=\"$1\"\n  # https://en.wikipedia.org/wiki/Fibonacci_number#F_n_is_prime\n\
    \  # F(n) = 4F(n-1) + F(n-2)\n  local fn=\"0\"\n  local fn_1=\"1\"\n  local i\n\
    \  for ((i=0; i<n; i++)); do\n    local fn_2=\"$fn\"\n    fn=\"$(( fn_1*4 + fn_2\
    \ ))\"\n    fn_1=\"$fn_2\"\n  done\n  echo \"$fn\"\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 2
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        return 1\n    fi\n\n   \
    \ # First, find N-th prime number.\n    # http://www.calculator.org/math/prime.aspx\n\
    \    #\n    # Knopfmacher & M. J. Mossinghoff, \"The nth Prime Page\",\n    #\
    \ http://primes.utm.edu/glossary/xpage/nthPrime.html\n    local nth_prime\n  \
    \  nth_prime=$(echo \"scale=10; n=($1-1)/ln($1); (($1-1)/ln($1) < n ? n+1 : n)\
    \ * ln($1) + 0.5 * ln(ln($1)) + 0.99999\" | bc -l)\n\n    # Second, find K-th\
    \ Fibonacci number (0-based).\n    #\n    # https://en.wikipedia.org/wiki/Fibonacci_number#Computation_by_rounding\n\
    \    #\n    # K-th Fibonacci number can be computed using integer numbers only,\n\
    \    # without floating point or sqrt operations.\n    # Note that this implementation\
    \ is not fast enough for large numbers,\n    # because it uses bc for every integer\
    \ arithmetic operation.\n    local kth_fib\n    local phi\n    phi=$(echo \"scale=10;\
    \ phi=(1+sqrt(5))/2; (2 * $nth_prime + $phi)/sqrt(5) + 0.5\" | bc -l)\n    kth_fib=$(echo\
    \ \"scale=10; round($phi / sqrt(5))\" | bc -l)\n\n    # Use a formula of Binet\
    \ to compute Fibonacci number.\n    #\n    # https://en.wikipedia.org/wiki/Fibonacci_number#Binet's_formula\n\
    \    #\n    # We can use integer arithmetic, because we need only the result that\
    \ is\n    # rounded up.\n    # Note that this implementation is not fast enough\
    \ for large numbers,\n    # because it uses bc for every integer arithmetic operation.\n\
    \    echo \"scale=10; round(($phi ^ $kth_fib - (-$\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo0wn2ch0.sh: line 67: unexpected EOF while looking for matching
    `"''

    /tmp/tmpo0wn2ch0.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  python -c \"import math; import itertools; f = lambda x: x if all(x % i\
    \ for i in xrange(2, int(math.sqrt(x)) + 1)) else f(x + 1); print f(reduce(lambda\
    \ x, y: x + y, itertools.islice(itertools.count(1), int($1), None)))\"\n}\n\n\
    candidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=64 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=62 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local integer=\"$1\"\n  local fib_index_fib_value=\"1,1\"\n\n  for ((counter=2;\
    \ counter<$integer; counter++)); do\n    local fib_value=\"$(echo $fib_index_fib_value\
    \ | cut -d ',' -f 2)\"\n    local index=\"$(echo $fib_index_fib_value | cut -d\
    \ ',' -f 1)\"\n    local next_index=$((index+1))\n    local next_fib_value=$((fib_value+index))\n\
    \    fib_index_fib_value=\"$next_index,$next_fib_value\"\n  done\n\n  echo \"\
    $(echo $fib_index_fib_value | cut -d ',' -f 2)\"\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # $1 is a Fibonacci number\n    # return \"true\" if $1 is prime, otherwise\
    \ return \"false\"\n    is_prime() {\n        number=$1\n        if [ $number\
    \ -le 3 ]; then\n            echo \"true\"\n            return\n        fi\n \
    \       if [ $((number % 2)) -eq 0 ]; then\n            echo \"false\"\n     \
    \       return\n        fi\n        sqrt=$(echo \"sqrt($number)\" | bc -l)\n \
    \       sqrt=${sqrt%.*}\n        for ((i = 3; i <= sqrt; i += 2)); do\n      \
    \      if [ $((number % i)) -eq 0 ]; then\n                echo \"false\"\n  \
    \              return\n            fi\n        done\n        echo \"true\"\n \
    \   }\n\n    index=$1\n    f1=1\n    f2=1\n    f3=0\n    if [ $index -eq 1 ];\
    \ then\n        echo $f1\n        return\n    fi\n    if [ $index -eq 2 ]; then\n\
    \        echo $f2\n        return\n    fi\n    while [ $index -gt 2 ]; do\n  \
    \      f3=$((f1 + f2))\n        f1=$f2\n        f2=$f3\n        index=$((index\
    \ - 1))\n    done\n    while [ $(is_prime $f3) != \"true\" ]; do\n        f3=$((f1\
    \ + f2))\n        f1=$f2\n        f2=$f3\n    done\n    echo $f3\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  # Returns F(n)\n  # $1 is an integer\n  fib_number() {\n    [ \"$1\" -lt\
    \ 2 ] && echo $1 || echo $(($(fib_number $(($1-1))) + $(fib_number $(($1-2)))))\n\
    \  }\n\n  # Returns an integer that represents the number of prime Fibonacci numbers\
    \ found so far.\n  # $1 is an integer\n  num_prime_fibs() {\n    local n=1\n \
    \   while [ \"$n\" -le \"$1\" ]; do\n      if [ $(is_prime $(fib_number $n)) =\
    \ 1 ]; then\n        (( n++ ))\n      else\n        (( n-- ))\n      fi\n    done\n\
    \    echo $n\n  }\n\n  fib_number \"$(num_prime_fibs \"$1\")\"\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=67 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=33 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 2
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        printf \"\"\n        return\n\
    \    fi\n\n    printf \"0\"\n    echo \"$1\" | tr '\\n' ' ' | tr '\\r' ' ' | bc\
    \ -l | awk '\nBEGIN {\n    fib_1 = 0\n    fib_2 = 1\n    n = 1\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpjls1rouz.sh: line 22: unexpected EOF while looking for matching
    `''''

    /tmp/tmpjls1rouz.sh: line 48: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    local nfib=$(fib \"$n\")\n    while ! prime \"$nfib\"\
    ; do\n        nfib=$(fib \"$((n+1))\")\n        n=$((n+1))\n    done\n    echo\
    \ \"$nfib\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=58 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=36 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # Set the default n value to 1\n    n=${1:-1}\n    # Generate Fibonacci\
    \ numbers starting with 1\n    seq -f \"%g\" $n | {\n        while read num; do\n\
    \            # Print the number if it's prime\n            if $(is_prime $num);\
    \ then\n                echo $num\n                # Exit the while loop\n   \
    \             break\n            fi\n        done\n    }\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpet466y1i.sh: line 22: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=1\n    local nth=1\n    local prev_n=0\n    local curr_n=0\n\
    \    local n_primes_to_find=1\n    local answer=\"\"\n\n    if [ $1 -lt 1 ]; then\n\
    \        n_primes_to_find=1\n    else\n        n_primes_to_find=$1\n    fi\n\n\
    \    if [ $n_primes_to_find -eq 1 ]; then\n        answer=\"2\"\n    else\n  \
    \      for (( ; ; )); do\n            prev_n=$curr_n\n            curr_n=$(fib\
    \ $i)\n            if [ $curr_n -gt $prev_n ]; then\n                if is_prime\
    \ $curr_n; then\n                    (( nth += 1 ))\n                    if [\
    \ $nth -eq $n_primes_to_find ]; then\n                        answer=$curr_n\n\
    \                        break\n                    fi\n                fi\n \
    \           fi\n            (( i += 1 ))\n        done\n    fi\n\n    echo $answer\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=56 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 2
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  # takes too long to calculate fib numbers\n  # so let's just use the sequence\
    \ for now\n  # until I find out a better way\n  # pre-calculated fib numbers\n\
    \  local prime_fib_fibs=\"1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597\
    \ 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040\
    \ 1346269 2178309 3524578 5702887 9227465 14930352 24157817 39088169 63245986\
    \ 102334155 165580141 267914296 433494437 701408733 1134903170 1836311903 2971215073\
    \ 4807526976 7778742049 12586269025 20365011074 32951280099 53316291173 86267571272\
    \ 139583862445 225851433717 365435296162 591286729879 956722026041 1548008755920\
    \ 2504730781961 4052739537881 6557470319842 10610209857723 17167680177565 27777890035288\
    \ 44945570212853 72723460248141 117669030460994 190392490709135 308061521170129\
    \ 498454011879264 806515533049393 1304969544928657 2111485077978050 3416454622906707\
    \ 5527939700884757 8944394323791464 14472334024676221 23416728348467685 37889062373143906\
    \ 61305790721611591 99194853094755497 160500643816367088 259695496911122585 420196140727489673\
    \ 679891637638612258 1100087778366101931 1779979416004714189 2880067194370816120\
    \ 4660046610375530309 7540113804746346429 12200160415121876738 19740274219868223167\
    \ 31940434634990099905 51680708854858323072 83621143489848422977 135301852344706746049\
    \ 21892299\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo1bv7fop.sh: line 38: unexpected EOF while looking for matching
    `"''

    /tmp/tmpo1bv7fop.sh: line 42: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ $1 =~ ^-?[0-9]+$ ]]; then\n    counter=1\n    for i in $(gen_fib);\
    \ do\n      if is_prime $i; then\n        if [ $counter -eq $1 ]; then\n     \
    \     echo $i\n          break\n        fi\n        counter=$((counter+1))\n \
    \     fi\n    done\n  else\n    echo \"Integer argument expected!\"\n  fi\n}\n\
    \ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp5h3aece2.sh: line 18: gen_fib: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local counter=0\n    local n\n    for n in $(gen_prime)\n    do\n   \
    \     if [[ $(is_fib $n) ]]\n        then\n            ((counter++))\n       \
    \     if [[ $counter -eq $1 ]]\n            then\n                echo $n\n  \
    \              break\n            fi\n        fi\n    done\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpih65uki1.sh: line 18: gen_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    FIB_NUM=$(fib \"$1\")\n    while ! is_prime \"$FIB_NUM\"; do\n      \
    \  FIB_NUM=$(fib \"$(($1 + 1))\")\n        ((1++))\n    done\n    echo \"$FIB_NUM\"\
    \n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[\
    \ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[\
    \ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n   \
    \ [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n\
    \    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=65 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=48 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    [ -z \"$1\" ] && return\n\n    local current_fib\n    local previous_fib\n\
    \    local -i n=$1\n\n    previous_fib=1\n    current_fib=1\n\n    while [ $n\
    \ -gt 0 ]; do\n        local temp=$current_fib\n        (( current_fib += previous_fib\
    \ ))\n        previous_fib=$temp\n\n        if [ $(is_prime \"$current_fib\")\
    \ == \"true\" ]; then\n            (( n-- ))\n        fi\n    done\n\n    echo\
    \ \"$current_fib\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=57 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  fib_nth $1 | is_prime | head -n 1\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyv7pekmp.sh: line 16: fib_nth: command not found

    /tmp/tmpyv7pekmp.sh: line 16: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  declare -i n\n  n=$1\n  if [[ $n -lt 1 ]]; then\n    return\n  fi\n  pf_index=1\n\
    \  pf_a=0\n  pf_b=1\n  while [[ pf_index -lt n ]]; do\n    pf_c=$((pf_a + pf_b))\n\
    \    pf_a=$pf_b\n    pf_b=$pf_c\n    if [[ $pf_c -gt 1 ]] && [[ -z $(factor $pf_c\
    \ | grep \"^$pf_c: \") ]]; then\n      pf_index=$((pf_index + 1))\n    fi\n  done\n\
    \  echo $pf_c\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local i\n  if ! is_prime \"$(fib \"$1\")\"; then\n    for ((i = $(fib \"\
    $1\");; i--)); do\n      if is_prime \"$i\"; then\n        echo \"$i\"\n     \
    \   break\n      fi\n    done\n  else\n    echo \"$(fib \"$1\")\"\n  fi\n}\n\n\
    candidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpy8a0g5nm.sh: line 17: fib: command not found

    /tmp/tmpy8a0g5nm.sh: line 17: is_prime: command not found

    /tmp/tmpy8a0g5nm.sh: line 18: fib: command not found

    /tmp/tmpy8a0g5nm.sh: line 18: ((: i = : syntax error: operand expected (error
    token is "= ")

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local nth\n  check_arg_num $# 1\n  check_arg_num $1 1\n  if [ $1 = \"1\"\
    \ ]; then\n    echo 2\n  elif [ $1 = \"2\" ]; then\n    echo 3\n  else\n    nth=$(expr\
    \ $1 - 2)\n    echo $(fib $nth)\n  fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi70_hro1.sh: line 17: check_arg_num: command not found

    /tmp/tmpi70_hro1.sh: line 18: check_arg_num: command not found

    /tmp/tmpi70_hro1.sh: line 17: check_arg_num: command not found

    /tmp/tmpi70_hro1.sh: line 18: check_arg_num: command not found

    /tmp/tmpi70_hro1.sh: line 17: check_arg_num: command not found

    /tmp/tmpi70_hro1.sh: line 18: check_arg_num: command not found

    /tmp/tmpi70_hro1.sh: line 25: fib: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        count=$1\n        num=0\n    \
    \    counter=0\n        while [ $counter -lt $count ]; do\n            num=$(fibonacci\
    \ $num)\n            if [ $(is_prime $num) -eq 1 ]; then\n                let\
    \ counter++\n            fi\n        done\n        echo $num\n    else\n     \
    \   echo \"Usage: prime_fib <number>\"\n    fi\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=66 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=59 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local num\n\n    num=$(($1-1))\n    prime_nth $num | fib $num\n}\n\n\
    candidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpj_14g01f.sh: line 19: prime_nth: command not found

    /tmp/tmpj_14g01f.sh: line 19: fib: command not found

    '
  stdout: ''
  timestamp: 1660023501
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local f=1\n  local pf=2\n  local p=3\n  local res=\"\"\n\
    \  local count=0\n  if [ $n -eq 1 ]; then\n    return 2\n  fi\n  while [ $count\
    \ -lt $n ]; do\n    if is_prime $p; then\n      if is_fib $p; then\n        ((count++))\n\
    \        pf=$p\n      fi\n    fi\n    ((p++))\n  done\n  return $pf\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023501
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local index=$1\n  local current=1\n  local previous=0\n  local a\n  local\
    \ b\n  local counter=0\n  local tmp\n\n  while true; do\n    if [ $(is_prime $current)\
    \ = \"true\" ]; then\n      counter=$((counter + 1))\n      if [ $counter -eq\
    \ $index ]; then\n        echo $current\n        break\n      fi\n    fi\n\n \
    \   tmp=$current\n    current=$((current + previous))\n    previous=$tmp\n  done\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=69 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=63 encoding='utf-8'>
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local idx=\"$1\"\n    if [ ! \"$idx\" -gt 0 ]; then\n        echo \"\
    The argument must be an integer.\"\n        exit 1\n    fi\n    if [ \"$idx\"\
    \ -gt 92 ]; then\n        echo \"The number is too large.\"\n        exit 1\n\
    \    fi\n    local fib_num=$(fib \"$idx\")\n    local i=1\n    local result=\"\
    \"\n    local count=0\n    for i in $(seq 1 \"$fib_num\"); do\n        if $(is_prime\
    \ \"$i\"); then\n            result=\"$i\"\n            count=$((count + 1))\n\
    \            if [ \"$count\" -eq \"$idx\" ]; then\n                break\n   \
    \         fi\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: "/tmp/tmpwejsvsx8.sh: line 25: fib: command not found\nseq: invalid floating\
    \ point argument: \u2018\u2019\nTry 'seq --help' for more information.\n"
  stdout: ''
  timestamp: 1660023505
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  for n in $(seq 1 10000); do\n    fib=$(fibonacci \"$n\")\n    if is_prime\
    \ \"$fib\"; then\n      echo \"$fib\"\n      break\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=17 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local tmp_file=${TMP}/${FUNCNAME}.tmp\n  local i=0\n  local\
    \ F_1=1\n  local F_2=1\n  while (( ++i <= n )); do\n    if is_prime ${F_1}; then\n\
    \      echo ${F_1}\n      break\n    fi\n    F_1=$(( F_1 + F_2 ))\n    F_2=$((\
    \ F_1 - F_2 ))\n  done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwn9c3fd8.sh: line 22: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023505
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local -i target=$1\n  local -i count=0\n  local -i a=0\n  local -i b=1\n\
    \  local -i c\n  until ((count==target)); do\n    ((c=a+b))\n    ((a=b))\n   \
    \ ((b=c))\n    if is_prime $c; then\n      ((count++))\n    fi\n  done\n  echo\
    \ $c\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n  \
    \  [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n \
    \   [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=75 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=73 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # n-th Fibonacci number.\n    fib=\"$(fib \"$1\")\"\n    # If it's prime,\
    \ then return it. If not, repeat the procedure.\n    is_prime \"$fib\" && echo\
    \ \"$fib\" || prime_fib \"$1\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=71 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  n=$1\n  j=0\n  f1=1\n  f2=1\n  ((j=0))\n  ((f1=1))\n  ((f2=1))\n  while\
    \ [[ $j -lt $n ]]; do\n    ((f=f1+f2))\n    ((f1=f2))\n    ((f2=f))\n    if $(is_prime\
    \ $f); then\n      ((j=j+1))\n    fi\n  done\n  echo $f\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local N=$1\n    local D=0\n    local FIB\n\n    for ((I=0; ; I++)); do\n\
    \        FIB=$(fib \"$I\")\n        if is_prime \"$FIB\"; then\n            D=$((D+1))\n\
    \            if [ \"$D\" -eq \"$N\" ]; then\n                echo \"$FIB\"\n \
    \               break\n            fi\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=40 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local i=1\n  local fib_n=0\n  local fib_prev=0\n  local fib_curr=1\n  local\
    \ fib_temp=0\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n    while [ $i -lt $1 ]; do\n \
    \     fib_temp=$fib_curr\n      fib_curr=$(($fib_curr + $fib_prev))\n      fib_prev=$fib_temp\n\
    \      ((i++))\n    done\n    fib_n=$fib_curr\n  fi\n  if [[ $fib_n -gt 0 ]];\
    \ then\n    echo $fib_n\n  fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=1\n    while true; do\n        local fib=$(fib \"$i\")\n    \
    \    if is_prime \"$fib\"; then\n            echo \"$fib\"\n            break\n\
    \        fi\n        i=$((i+1))\n    done\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=72 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  test $# -eq 1 && test \"$1\" -eq \"$1\" # check if $1 is an integer\n \
    \ local fib_arr=()\n  local prime_arr=()\n  local f_i=0\n  local p_i=0\n  while\
    \ [ $f_i -lt \"$1\" ]; do\n    fib_arr+=($(fib \"${#fib_arr[@]}\"))\n    if [\
    \ \"${#prime_arr[@]}\" -eq 0 ]; then\n      prime_arr+=(2)\n    fi\n    if [ $p_i\
    \ -lt \"${#prime_arr[@]}\" ]; then\n      local p_num=\"${prime_arr[$p_i]}\"\n\
    \    else\n      local p_num=$(prime \"$p_i\")\n      prime_arr+=($p_num)\n  \
    \  fi\n    if [ ${fib_arr[-1]} -eq $p_num ]; then\n      f_i=$((f_i+1))\n    fi\n\
    \    p_i=$((p_i+1))\n  done\n  echo \"${fib_arr[-1]}\"\n}\n\ncandidate() {\n \
    \   prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpir3fjzal.sh: line 22: fib: command not found

    /tmp/tmpir3fjzal.sh: line 32: fib_arr: bad array subscript

    /tmp/tmpir3fjzal.sh: line 32: [: -eq: unary operator expected

    /tmp/tmpir3fjzal.sh: line 22: fib: command not found

    /tmp/tmpir3fjzal.sh: line 29: prime: command not found

    /tmp/tmpir3fjzal.sh: line 32: fib_arr: bad array subscript

    /tmp/tmpir3fjzal.sh: line 37: fib_arr: bad array subscript

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    fib \"$1\" | # calculate the n-th Fibonacci number\n    grep -E \"^[0-9]+$\"\
    \ | # filter out only numbers\n    grep -E \"^[0-9]*[13579]$\" # filter out only\
    \ prime numbers\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfra_v5b_.sh: line 16: fib: command not found

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  is_prime() {\n    local num\n    num=$1\n    sqrt_num=$(echo \"sqrt($num)\"\
    \ | bc)\n    for (( i=2; i<=$sqrt_num; i++ ))\n    do\n      if (( $num % $i ==\
    \ 0 ))\n      then\n        return 1\n      fi\n    done\n    return 0\n  }\n\n\
    \  local num\n  num=$1\n  fib_n=0\n  fib_n1=1\n  fib_n2=0\n  nth_prime_fib=0\n\
    \  i=1\n  while (( $i <= $num ))\n  do\n    fib_n=$(( $fib_n1 + $fib_n2 ))\n \
    \   if is_prime $fib_n\n    then\n      nth_prime_fib=$fib_n\n      (( i++ ))\n\
    \    fi\n    fib_n2=$fib_n1\n    fib_n1=$fib_n\n  done\n  echo $nth_prime_fib\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  python -c \"import itertools; print list(itertools.takewhile(lambda x:\
    \ x <= int(\\\"$1\\\"), (x for x in xrange(1, 1000000000) if (lambda y: all(y\
    \ % j for j in xrange(2, int(y ** 0.5) + 1)))(sum(itertools.islice(itertools.count(1),\
    \ x, None), 1)))))[-1]\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=84 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=53 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if ! [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n    return 1\n  fi\n\n  if [ \"\
    $1\" -lt 1 ]; then\n    return 1\n  fi\n\n  n=1\n  fib=1\n  last=0\n  while [\
    \ $n -lt \"$1\" ]; do\n    last=$fib\n    fib=$(( fib + last ))\n    if $(is_prime\
    \ \"$fib\"); then\n      n=$(( n + 1 ))\n    fi\n  done\n\n  echo \"$fib\"\n}\n\
    \ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=0\n    local k=1\n    local fib_number\n    local fib_arr=()\n\
    \    until (( $i == $1 )); do\n        if (( $k == 1 )); then\n            fib_number=$((1+1))\n\
    \        else\n            fib_number=$((fib_arr[k-1] + fib_arr[k-2]))\n     \
    \   fi\n        fib_arr[k]=$fib_number\n        if [[ $(is_prime $fib_number)\
    \ ]]; then\n            (( i += 1 ))\n        fi\n        (( k += 1 ))\n    done\n\
    \    echo $fib_number\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=76 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if ! is_integer \"$1\"; then\n        printf 'Integer is required as\
    \ argument, but \"%s\" given' \"$1\"\n        return 1\n    fi\n\n    local i=2\
    \ result=1 num1=1 num2=1\n    while true; do\n        result=$((num1 + num2))\n\
    \        if ((i == \"$1\")) && is_prime \"$result\"; then\n            printf\
    \ '%s' \"$result\"\n            return 0\n        fi\n        num1=$num2\n   \
    \     num2=$result\n        ((i++))\n    done\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_slf2ehz.sh: line 16: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=0\n    fib_not_prime=1\n    while [[ $i -le $1 ]]; do\n     \
    \   fib_not_prime=$(fib $fib_not_prime)\n        if is_prime $fib_not_prime; then\n\
    \            let i+=1\n        fi\n    done\n    echo $fib_not_prime\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=74 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=46 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=0\n    local i=0\n    local fib1=0\n    local fib2=1\n    local\
    \ fib3=0\n    local prime=0\n    local is_prime=0\n    for ((i=1; i<=$1; i++));\
    \ do\n        fib3=$((fib1+fib2))\n        fib1=$fib2\n        fib2=$fib3\n  \
    \      is_prime=1\n        for ((prime=2; prime<=$((fib3/2)); prime++)); do\n\
    \            if [[ $((fib3%prime)) -eq 0 ]]; then\n                is_prime=0\n\
    \                break\n            fi\n        done\n        if [[ \"$is_prime\"\
    \ -eq 1 ]]; then\n            n=$fib3\n        fi\n    done\n    echo \"$n\"\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [[ $1 -lt 1 ]]; then\n        echo \"error: prime_fib: argument must\
    \ be an integer greater than zero\"\n        return 1\n    fi\n\n    local n=1\
    \ last=1 second_last=0 i=0\n    while [[ i -lt $1 ]]; do\n        local tmp=$last\n\
    \        last=$((last + second_last))\n        second_last=$tmp\n        if [[\
    \ $last -eq 2 || $last -eq 3 || $last -eq 5 || $last -eq 13 || $last -eq 89 ]];\
    \ then\n            i=$((i + 1))\n        fi\n    done\n    echo $last\n}\n\n\
    candidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=80 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=78 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  for (( i=0; i<=100000000; i++ )); do\n    if [[ $(fib \"$i\") -eq $(prime_nth\
    \ \"$1\") ]]; then\n      echo \"$(fib \"$i\")\"\n      break\n    fi\n  done\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpf6jyv7oj.sh: line 17: fib: command not found

    /tmp/tmpf6jyv7oj.sh: line 17: prime_nth: command not found

    /tmp/tmpf6jyv7oj.sh: line 18: fib: command not found

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    value=$1\n    if [[ ! $value =~ ^[0-9]+$ ]]; then\n        echo \"'$value'\
    \ is not an integer\"\n        return 1\n    fi\n    if [[ $value -lt 1 ]]; then\n\
    \        echo \"1 and greater numbers can be a Fibonacci number\"\n        return\
    \ 1\n    fi\n    if [[ $value -eq 1 ]]; then\n        echo \"2\"\n        return\
    \ 0\n    fi\n    last=\"2\"\n    prelast=\"1\"\n    fib=\"3\"\n    for ((i=2;\
    \ i<value; i++)); do\n        prelast=$last\n        last=$fib\n        fib=$((prelast+last))\n\
    \    done\n    if [[ $fib -eq 89 ]]; then\n        # 89 is the last Fibonacci\
    \ number that is also prime\n        echo \"89\"\n        return 0\n    fi\n \
    \   if [[ $fib -gt 89 ]]; then\n        echo \"$value-th Fibonacci number is not\
    \ prime\"\n        return 1\n    fi\n    # ok, we have a number less than 89,\
    \ so check if prime\n    is_prime $fib\n    return $?\n}\n\ncandidate() {\n  \
    \  prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpegk216yk.sh: line 47: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    local cnt=0\n    local n=1\n   \
    \ local b=0\n    local temp=0\n    while [ $cnt -ne $1 ]; do\n      if [ $n -eq\
    \ 1 ] || [ $n -eq 2 ]; then\n        temp=$n\n      else\n        temp=$(( $n\
    \ + $b ))\n        b=$n\n        n=$temp\n      fi\n      if $(is_prime $temp);\
    \ then\n        cnt=$(( $cnt + 1 ))\n      fi\n    done\n    echo $temp\n  else\n\
    \    echo \"Input should be an integer.\"\n  fi\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=83 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=79 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local ind=\"$1\"\n  local i=0\n  local j=1\n  local k=0\n  local fib=0\n\
    \  local count=0\n  local num_is_prime=0\n  while true; do\n    if [ $i -le $j\
    \ ]; then\n      let \"k = $i + $j\"\n      i=$j\n      j=$k\n    else\n     \
    \ let \"k = $i + $j\"\n      j=$i\n      i=$k\n    fi\n    fib=$k\n    let \"\
    num_is_prime = $(is_prime \"$fib\")\"\n    if [ $num_is_prime -eq 0 ]; then\n\
    \      let \"count = $count + 1\"\n      if [ $count -eq $ind ]; then\n      \
    \  break\n      fi\n    fi\n  done\n  echo \"$fib\"\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp26fc4ffe.sh: line 34: is_prime: command not found

    /tmp/tmp26fc4ffe.sh: line 34: let: num_is_prime = : syntax error: operand expected
    (error token is "= ")

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # set default value\n    [[ -z \"$1\" ]] && {\n        echo \"Usage:\
    \ $(basename $0) <an integer>\"\n        exit 1\n    }\n\n    # check if is integer\n\
    \    ! [[ \"$1\" =~ ^[0-9]+$ ]] && {\n        echo \"$(basename $0): $1 is not\
    \ an integer\"\n        exit 1\n    }\n\n    # check if is positive integer\n\
    \    [[ \"$1\" -lt 1 ]] && {\n        echo \"$(basename $0): $1 is not a positive\
    \ integer\"\n        exit 1\n    }\n\n    # find the first n prime numbers that\
    \ are also Fibonacci numbers\n    fib_prime_nums=()\n    i=1\n    while [[ ${#fib_prime_nums[@]}\
    \ -lt $1 ]]; do\n        fib_num=$(fib \"$i\")\n        if $(is_prime \"$fib_num\"\
    ); then\n            fib_prime_nums+=($fib_num)\n        fi\n        i=$(( i +\
    \ 1 ))\n    done\n\n    # return n-th prime number which is a Fibonacci number\n\
    \    echo ${fib_prime_nums[$(( $1 - 1 ))]}\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local count=0\n    while [ \"$count\" -lt \"$1\" ]; do\n        local\
    \ fib_num=$(fib \"$((count + 1))\")\n        if [ \"$(is_prime \"$fib_num\")\"\
    \ -eq 1 ]; then\n            ((count++))\n        fi\n    done\n    echo \"$fib_num\"\
    \n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[\
    \ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[\
    \ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n   \
    \ [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n\
    \    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=0\n  local result=$(fib \"$1\")\n  while [ $n -lt $1 ]; do\n  \
    \  ((n++))\n    result=$(fib \"$n\")\n    if [ $(is_prime \"$result\") = \"true\"\
    \ ]; then\n      echo \"$result\"\n      return\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpw9iyqs_d.sh: line 17: fib: command not found

    /tmp/tmpw9iyqs_d.sh: line 20: fib: command not found

    /tmp/tmpw9iyqs_d.sh: line 21: is_prime: command not found

    /tmp/tmpw9iyqs_d.sh: line 21: [: =: unary operator expected

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n\n  n=\"$1\"\n  if [[ -z \"$n\" ]]; then\n    return 0\n  fi\n \
    \ is_integer \"$n\" || return 0\n  if [[ $n -le 0 ]]; then\n    return 0\n  fi\n\
    \  if [[ $n -eq 1 ]]; then\n    echo \"2\"\n    return 0\n  fi\n  if [[ $n -eq\
    \ 2 ]]; then\n    echo \"3\"\n    return 0\n  fi\n  local cnt\n  cnt=2\n  local\
    \ fib_prev1\n  fib_prev1=2\n  local fib_prev2\n  fib_prev2=3\n  local fib\n  fib=0\n\
    \  while [[ $cnt -lt $n ]]; do\n    fib=$((fib_prev1 + fib_prev2))\n    fib_prev1=$fib_prev2\n\
    \    fib_prev2=$fib\n    if is_prime \"$fib\"; then\n      cnt=$((cnt + 1))\n\
    \    fi\n  done\n  echo \"$fib\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjrkj_3mw.sh: line 21: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local tmpfile=/tmp/prime_fib_tmpfile\n  local fib_num\n \
    \ local fib_nums\n  local cnt=0\n  local i=0\n\n  if [[ $n -lt 1 ]]; then\n  \
    \  echo \"Error: Not a positive integer!\"\n    return 1\n  fi\n\n  fib_nums=(0\
    \ 1 1)\n  for ((i=3; i<=10000; i++)); do\n    fib_nums[$i]=$((fib_nums[$i-1] +\
    \ fib_nums[$i-2]))\n  done\n\n  for ((i=0; i<=10000; i++)); do\n    if is_prime\
    \ ${fib_nums[$i]}; then\n      ((cnt++))\n      if [[ $cnt -eq $n ]]; then\n \
    \       echo ${fib_nums[$i]}\n        return 0\n      fi\n    fi\n  done\n\n \
    \ echo \"Error: No such Fibonacci number!\"\n  return 1\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=39 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=35 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    local a=0\n    local b=1\n    local fib\n    local idx=1\n\
    \    while [ \"$idx\" -le \"$n\" ]; do\n        fib=$((a + b))\n        if is_prime\
    \ \"$fib\"; then\n            idx=$((idx + 1))\n        fi\n        a=$b\n   \
    \     b=$fib\n    done\n    echo \"$fib\"\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=52 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=30 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local x\n  local fib_n\n  local prime_fib_n=2\n  local i=0\n\
    \  for (( i=0; i<n; i++ )); do\n    x=$prime_fib_n\n    fib_n=$(fib \"$x\")\n\
    \    prime_fib_n=$(prime_list \"$fib_n\")\n  done\n  echo \"$prime_fib_n\"\n}\n\
    \ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpv08_72er.sh: line 23: fib: command not found

    /tmp/tmpv08_72er.sh: line 24: prime_list: command not found

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  # Check if there are 1 argument\n  if [ \"$#\" -ne 1 ]; then\n    echo\
    \ \"Error: 1 argument is required\"\n    exit 1\n  fi\n\n  # Check if $1 is an\
    \ integer\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"Error: argument must\
    \ be an integer\"\n    exit 1\n  fi\n\n  n=$1\n  a=1\n  b=1\n  c=2\n  i=3\n  while\
    \ [ $i -le $n ]; do\n    if is_prime $c; then\n      i=$((i+1))\n    fi\n    a=$b\n\
    \    b=$c\n    c=$((a+b))\n  done\n  echo $b\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    [[ $1 =~ ^[0-9]+$ ]] || return\n    if [[ $1 == 1 ]]; then\n        echo\
    \ \"2\"\n    elif [[ $1 == 2 ]]; then\n        echo \"3\"\n    else\n        #\
    \ 1. Number 2 and 3 are the first two prime numbers, 1 is skipped.\n        #\
    \ 2. Numbers 2 and 3 are stored in the first two positions of fib_prime_array.\n\
    \        # 3. Every new prime number should be stored in fib_prime_array too.\n\
    \        # 4. fib_prime_array is used to generate Fibonacci prime numbers.\n \
    \       # 5. Position of the wanted number in fib_prime_array is given in $1.\n\
    \        # 6. The position is used to get the wanted number from fib_prime_array.\n\
    \        local fib_prime_array\n        fib_prime_array[0]=\"2\"\n        fib_prime_array[1]=\"\
    3\"\n        local n=\"3\"\n        local fib_idx=\"2\"\n        while [[ ${#fib_prime_array[@]}\
    \ -lt $1 ]]; do\n            local is_prime=\"true\"\n            for element\
    \ in \"${fib_prime_array[@]}\"; do\n                if [[ $((n % element)) ==\
    \ 0 ]]; then\n                    is_prime=\"false\"\n                    break\n\
    \                fi\n            done\n            if [[ $is_prime == \"true\"\
    \ ]]; then\n                fib_prime_array[$fib_idx]=\"$n\"\n               \
    \ (( fib_idx++ ))\n            fi\n            (( n++ ))\n        done\n     \
    \   echo \"${fib_prime_array[$1 - 1]}\"\n    fi\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023506
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local count=$1\n  fib-iter 1 2 1\n\n  echo $fib_primes\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp8ltzcree.sh: line 17: fib-iter: command not found

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local seq=0\n    local prime_fib_num=1\n    local prime_fib_prev=1\n\
    \    local prime_fib_next=0\n    while [ $seq -lt \"$1\" ]; do\n        if is_prime\
    \ $prime_fib_num && is_fib $prime_fib_num; then\n            seq=$((seq+1))\n\
    \        fi\n        prime_fib_prev=$prime_fib_num\n        prime_fib_num=$prime_fib_next\n\
    \        prime_fib_next=$((prime_fib_prev+prime_fib_num))\n    done\n    echo\
    \ $prime_fib_num\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=45 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    prime_fib_helper \"$1\" 1 1\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmubg2bzt.sh: line 16: prime_fib_helper: command not found

    '
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local -i n=$1\n  if [ $n -eq 1 ]; then\n    echo 2\n  elif [ $n -eq 2 ];\
    \ then\n    echo 3\n  else\n    local -i a=2\n    local -i b=3\n    local -i c=5\n\
    \    local -i i=3\n    while [ $i -le $n ]; do\n      a=$b\n      b=$c\n     \
    \ c=$(($a+$b))\n      if [ $(is_prime $c) -eq 1 ]; then\n        ((i++))\n   \
    \   fi\n    done\n    echo $c\n  fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=54 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ $1 -eq 0 ]; then\n    echo \"0\"\n    return\n  fi\n  if [ $1 -eq\
    \ 1 ]; then\n    echo \"2\"\n    return\n  fi\n  if [ $1 -eq 2 ]; then\n    echo\
    \ \"3\"\n    return\n  fi\n  nth=$1\n  nth2=$(expr $nth - 1)\n  nth3=$(expr $nth\
    \ - 2)\n  fib_n=$(fib \"$nth\")\n  fib_n_1=$(fib \"$nth2\")\n  fib_n_2=$(fib \"\
    $nth3\")\n  while true; do\n    if [ $(is_prime \"$fib_n\") -eq 1 ]; then\n  \
    \    echo \"$fib_n\"\n      return\n    fi\n    nth=$(expr $nth + 1)\n    nth2=$(expr\
    \ $nth - 1)\n    nth3=$(expr $nth - 2)\n    fib_n=$(fib \"$nth\")\n    fib_n_1=$(fib\
    \ \"$nth2\")\n    fib_n_2=$(fib \"$nth3\")\n  done\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=70 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=47 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local i=$1\n  local fib=\"1 1\"\n  local prime_fib\n  local n=$(echo \"\
    $fib\" | wc -w)\n  local number\n  until [ $n -eq $i ]; do\n    fib=$(fib $fib)\n\
    \    prime_fib=$(prime_of \"$fib\")\n    n=$(echo \"$prime_fib\" | wc -w)\n  done\n\
    \  if [ $n -gt 0 ]; then\n    number=$(echo \"$prime_fib\" | tail -n 1)\n  else\n\
    \    number=\"1\"\n  fi\n  echo \"$number\"\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=85 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=61 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    for n in {0..10000}; do\n        f=$(fib \"1\" $n)\n        if [ \"$(is_prime\
    \ \"$f\")\" -eq 1 ]; then\n            if [ \"$1\" == \"$n\" ]; then\n       \
    \         echo \"$f\"\n                break\n            fi\n        fi\n   \
    \ done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=44 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    [ \"${BASH_VERSINFO[0]}\" -lt 4 ] && \\\n        echo \"Requires bash\
    \ >= 4.\" && return 1\n    local target_pos=\"$1\"\n    [ \"${target_pos}\" -lt\
    \ 1 ] && \\\n        echo \"Invalid argument ${target_pos}. Must be 1 or more.\"\
    \ && return 1\n    declare -A fib_table\n    fib_table[0]=0\n    fib_table[1]=1\n\
    \    local pos=2\n    local fib=0\n    while [ \"${pos}\" -le \"${target_pos}\"\
    \ ]; do\n        local prev_pos=$((pos - 1))\n        fib=$((fib_table[${prev_pos}]\
    \ + fib_table[${prev_pos} - 1]))\n        fib_table[${pos}]=${fib}\n        pos=$((pos\
    \ + 1))\n    done\n    echo \"${fib}\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023506
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ \"$1\" -eq 0 ]; then\n    echo \"0\"\n    return\n  fi\n  # We generate\
    \ a list of Fibonacci numbers.\n  # The first two Fibonacci numbers are \"1\"\
    \ and \"1\"\n  fib_list=(1 1)\n  # the current index of the last generated Fibonacci\
    \ number.\n  # Since we have generated two Fibonacci numbers, the current index\
    \ is \"1\"\n  index=1\n  # n is the input parameter\n  n=$1\n  while true; do\n\
    \    # fib_n is the n-th Fibonacci number.\n    fib_n=$((${fib_list[index-1]}\
    \ + ${fib_list[index]}))\n    # This is a number that is generated by Fibonacci\
    \ algorithm.\n    # We have to check whether the number is prime.\n    # We call\
    \ a separate function to check whether fib_n is prime.\n    is_prime=$(is_prime\
    \ $fib_n)\n    if [ \"$is_prime\" == \"true\" ]; then\n      # fib_n is prime.\
    \ We increase the count by 1.\n      # If the count is equal to the input parameter,\n\
    \      # we return the prime Fibonacci number.\n      # Otherwise, we store fib_n\
    \ into the fib_list and continue to the next\n      # Fibonacci number.\n    \
    \  count=$(($count + 1))\n      if [ \"$count\" -eq \"$n\" ]; then\n        echo\
    \ \"$fib_n\"\n        return\n      fi\n      index=$(($index + 1))\n      fib_list[index]=$fib_n\n\
    \    fi\n  done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=77 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=6 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=\"$1\"\n  local q=\"$((n - 1))\"\n  local f1=\"$(fib \"$q\")\"\n\
    \  local f2=\"$(fib \"$n\")\"\n  local fibs\n  fibs=\"$f1,$f2\"\n  local i=\"\
    $q\"\n  while true; do\n    local sum=\"$((f1 + f2))\"\n    local sum_fib=\"$(echo\
    \ \"$fibs\" | grep -q \"$sum\" || echo \"$sum\")\"\n    if is_prime \"$sum\";\
    \ then\n      echo \"$sum\"\n      break\n    fi\n    fibs=\"$sum_fib,$fibs\"\n\
    \    f1=\"$f2\"\n    f2=\"$sum\"\n    i=\"$((i + 1))\"\n  done\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=86 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=81 encoding='utf-8'>
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ $1 -le 0 ]; then\n    echo \"Err: Not a positive integer.\"\n    return\
    \ 1\n  fi\n\n  # Calculate first 100 Fibonacci numbers.\n  fib_100_lst=$(./fibonacci.sh\
    \ \"100\")\n  # Return the n-th number in the list that is a prime number.\n \
    \ echo \"$fib_100_lst\" | grep -w \"$(./nth_prime.sh \"$1\")\" | awk '{print $1}'\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp2px7g59x.sh: line 22: ./fibonacci.sh: No such file or directory

    /tmp/tmp2px7g59x.sh: line 24: ./nth_prime.sh: No such file or directory

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    n=$1\n    # seed\n    seed=0\n    num=1\n    # start from the 3rd number\n\
    \    for ((i=2; i<n; i++)); do\n        seed=$num\n        num=$((seed+num))\n\
    \    done\n    while [[ $(is_prime \"$num\") != \"1\" ]]; do\n        seed=$num\n\
    \        num=$((seed+num))\n    done\n    echo \"$num\"\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=58 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1 i=1 j=1 k=1 nth=$1\n    while [ $k -le $nth ]; do\n      \
    \  i=$(fib $j)\n        if is_prime $i; then\n            let k++\n        fi\n\
    \        let j++\n    done\n    echo $i\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [ -z \"$1\" ]; then\n        exit 1\n    fi\n    if [[ \"$1\" =~ ^[0-9]+$\
    \ ]]; then\n        index=\"$1\"\n    else\n        exit 1\n    fi\n    prime_fib_helper\
    \ \"$index\" 2 \"1\" \"1\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\"\
    ) = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdnblm_wy.sh: line 24: prime_fib_helper: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  [ $# -lt 1 ] && echo \"No input\" && return 1\n  local i=1 \n  local result=1\n\
    \  local fib=$(fib $i)\n  local next_fib=$(fib $((i+1)))\n  while ! $(is_prime\
    \ $fib); do\n    i=$((i+1))\n    fib=$(fib $i)\n    next_fib=$(fib $((i+1)))\n\
    \  done\n  while [ $((result*fib)) -lt $1 ]; do\n    result=$((result+1))\n  \
    \  while ! $(is_prime $next_fib); do\n      i=$((i+1))\n      fib=$(fib $i)\n\
    \      next_fib=$(fib $((i+1)))\n    done\n  done\n  echo $fib\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=59 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=48 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    prime_fib_helper \"$1\" 3 3\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiwsbrtjj.sh: line 16: prime_fib_helper: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if (($1 <= 2)); then\n        echo \"2\"\n    elif (($1 == 3)); then\n\
    \        echo \"3\"\n    else\n        fib_a=2\n        fib_b=3\n        i=3\n\
    \        while ((i < $1)); do\n            fib_next=$((fib_a + fib_b))\n     \
    \       fib_a=$fib_b\n            fib_b=$fib_next\n            ((i++))\n     \
    \   done\n        echo $fib_next\n    fi\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  # $1 is an integer\n  is_prime() {\n    local n=$1\n    if [ $n -lt 2 ];\
    \ then\n      return 1\n    fi\n    local mid=$((n / 2))\n    for i in $(seq 2\
    \ $mid); do\n      if [ $((n % i)) -eq 0 ]; then\n        return 1\n      fi\n\
    \    done\n    return 0\n  }\n\n  local i=0\n  local j=1\n  local k=1\n  local\
    \ index=$1\n  local count=1\n  if [ $index -eq 1 ]; then\n    echo $i\n    return\n\
    \  fi\n  if [ $index -eq 2 ]; then\n    echo $j\n    return\n  fi\n  while [ $count\
    \ -lt $index ]; do\n    local tmp=$((i + j))\n    local i=$j\n    local j=$tmp\n\
    \    if is_prime $j; then\n      local count=$((count + 1))\n    fi\n  done\n\
    \  echo $j\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local nth=$1\n  case $nth in\n    1) echo 2;;\n    2) echo 3;;\n    3)\
    \ echo 5;;\n    4) echo 13;;\n    5) echo 89;;\n    *) echo \"Error: prime_fib()\
    \ accepts value 1 to 5\";;\n  esac\n}\n\ncandidate() {\n    prime_fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if ! [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n    echo \"Error: Argument \\\"\
    $1\\\" is not a number\"\n    return 1\n  fi\n\n  if [ \"$1\" -lt 1 ]; then\n\
    \    echo \"Error: Argument \\\"$1\\\" must be greater than 0\"\n    return 1\n\
    \  fi\n\n  # By definition, Fibonacci number is a number that is a sum of the\
    \ two\n  # preceding ones. So, it's necessary to generate n numbers to find n-th\n\
    \  # Fibonacci. The first two Fibonacci numbers are 0 and 1.\n  f1=0\n  f2=1\n\
    \  i=1\n  while [ \"$i\" -lt \"$1\" ]; do\n    fn=$((f1 + f2))\n    f1=$f2\n \
    \   f2=$fn\n    i=$((i + 1))\n  done\n\n  # Because all even Fibonacci numbers\
    \ are not prime, we can check primality\n  # for all odd Fibonacci numbers only.\
    \ And if the number is prime and we've\n  # found n-th Fibonacci number, we can\
    \ return it.\n  while true; do\n    if [ \"$((fn % 2))\" -eq 1 ] && \\\n     \
    \  [ \"$(is_prime \"$fn\")\" -eq 1 ]; then\n      echo \"$fn\"\n      return 0\n\
    \    fi\n    fn=$((f1 + f2))\n    f1=$f2\n    f2=$fn\n  done\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=19 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=17 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  # TODO(rjh): Refactor this method.\n  local fib=(0 1)\n  local i=2\n  local\
    \ f\n\n  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n    echo \"prime_fib: first argument\
    \ is not an integer\" >&2\n    return 1\n  fi\n\n  while [ $i -lt $1 ]; do\n \
    \   f=`expr ${fib[$i-1]} + ${fib[$i-2]}`\n    fib[$i]=$f\n    i=`expr $i + 1`\n\
    \  done\n\n  for (( i = 0; i < ${#fib[@]}; i++ )); do\n    if [ $1 -eq $i ]; then\n\
    \      if is_prime ${fib[$i]}; then\n        echo ${fib[$i]}\n        return 0\n\
    \      fi\n    fi\n  done\n\n  echo \"prime_fib: Unable to find prime fibonacci.\"\
    \ >&2\n  return 1\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzn82e7kn.sh: line 34: is_prime: command not found

    prime_fib: Unable to find prime fibonacci.

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    n=$1\n    local cur\n    local j=0\n    local i=1\n    local temp=0\n\
    \    local num=0\n    if [ $n -eq 0 ]; then\n        echo \"0\"\n        return\
    \ 0\n    fi\n    if [ $n -eq 1 ]; then\n        echo \"2\"\n        return 0\n\
    \    fi\n    if [ $n -eq 2 ]; then\n        echo \"3\"\n        return 0\n   \
    \ fi\n    while [ $j -lt $n ]; do\n        cur=$(( $i + $temp ))\n        temp=$i\n\
    \        i=$cur\n        if $(is_prime $cur); then\n            num=$cur\n   \
    \         j=$(( $j + 1 ))\n        fi\n    done\n    echo $num\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=56 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=27 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 2
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # Let's cache fibonacci numbers to speed up\n    __fib_cache=()\n   \
    \ __fib_cache[0]=1\n    __fib_cache[1]=1\n    __fib_cache[2]=2\n    __fib_cache[3]=3\n\
    \    __fib_cache[4]=5\n    __fib_cache[5]=8\n    __fib_cache[6]=13\n    __fib_cache[7]=21\n\
    \    __fib_cache[8]=34\n    __fib_cache[9]=55\n    __fib_cache[10]=89\n    __fib_cache[11]=144\n\
    \    __fib_cache[12]=233\n    __fib_cache[13]=377\n    __fib_cache[14]=610\n \
    \   __fib_cache[15]=987\n    __fib_cache[16]=1597\n    __fib_cache[17]=2584\n\
    \    __fib_cache[18]=4181\n    __fib_cache[19]=6765\n    __fib_cache[20]=10946\n\
    \    __fib_cache[21]=17711\n    __fib_cache[22]=28657\n    __fib_cache[23]=46368\n\
    \    __fib_cache[24]=75025\n    __fib_cache[25]=121393\n    __fib_cache[26]=196418\n\
    \    __fib_cache[27]=317811\n    __fib_cache[28]=514229\n    __fib_cache[29]=832040\n\
    \    __fib_cache[30]=1346269\n    __fib_cache[31]=2178309\n    __fib_cache[32]=3524578\n\
    \    __fib_cache[33]=5702887\n    __fib_cache[34]=9227465\n    __fib_cache[35]=14930352\n\
    \    __fib_cache[36]=24157817\n    __fib_cache[37]=39088169\n    __fib_cache[38]=63245986\n\
    \    __fib_cache[39]=102334155\n    __fib_cache[40\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuvqdqbxb.sh: line 58: unexpected EOF while looking for matching
    `]''

    /tmp/tmpuvqdqbxb.sh: line 80: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  echo \"$1\" | awk '{\n    fib[1] = 2;\n    fib[2] = 3;\n    count = 3;\n\
    \    N = $1;\n    while (count <= N) {\n      i = 1;\n      while (1) {\n    \
    \    fib[count] = fib[count - 1] + fib[count - 2];\n        if (is_prime(fib[count]))\
    \ {\n          break;\n        }\n        count++;\n      }\n      count++;\n\
    \    }\n    print fib[N];\n  }\n  function is_prime(n) {\n    for (i = 2; i <\
    \ sqrt(n); i++) {\n      if (n % i == 0) {\n        return 0;\n      }\n    }\n\
    \    return 1;\n  }'\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local count=0\n  local a=1\n  local b=1\n  local tmp=0\n  while [ \"$count\"\
    \ -lt \"$1\" ]; do\n    if [ \"$(is_prime \"$a\")\" == \"true\" ]; then\n    \
    \  count=$((count+1))\n    fi\n    tmp=$a\n    a=$((a+b))\n    b=$tmp\n  done\n\
    \  echo \"$a\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=64 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=36 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n    local n=$1\n    local count=0\n    local\
    \ i=0\n    while [[ $count -lt $n ]]; do\n      let fib=i+$(($i - 1))\n      if\
    \ is_prime $fib; then\n        let count=count+1\n      fi\n      let i=i+1\n\
    \    done\n    let fib=i+$(($i - 1))\n    echo $fib\n  else\n    echo \"ERROR:\
    \ Input $1 is not an integer.\"\n  fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=71 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=68 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  fib() {\n    if [[ \"$1\" -eq 1 ]]; then\n      echo \"1\"\n    elif [[\
    \ \"$1\" -eq 2 ]]; then\n      echo \"1\"\n    else\n      echo $(( $(fib $((\
    \ $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n    fi\n  }\n\n  n=1\n  while [[ $# -ne\
    \ 0 ]]; do\n    prime=0\n    fib_n=$(fib $n)\n    result=$(factor $fib_n)\n  \
    \  # factors are printed in order of decreasing size.\n    # factor function returns\
    \ 2 factors at most.\n    # check the last one\n    if [[ \"$(echo $result | awk\
    \ '{print $NF}')\" -eq $fib_n ]]; then\n      prime=1\n    fi\n    if [[ $prime\
    \ -eq 1 ]]; then\n      echo $fib_n\n      n=$(( $n + 1 ))\n    fi\n    if [[\
    \ $n -eq $1 ]]; then\n      shift\n    fi\n  done\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptyze2hor.sh: line 34: [[: 1:: syntax error in expression (error
    token is ":")

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    fib_seq=\"2 3 5\"\n    cur_fib=8\n    for ((i=4; i<=$1; i++)); do\n \
    \       if is_prime \"$cur_fib\"; then\n            fib_seq=\"$fib_seq $cur_fib\"\
    \n        fi\n        cur_fib=$((cur_fib + $(echo \"$fib_seq\" | cut -d \" \"\
    \ -f -1)))\n    done\n    echo \"$fib_seq\" | cut -d \" \" -f $1\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpa22bzp_s.sh: line 19: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local index=$1 i=0 j=1 prime_num=0 fib=0\n  while [ $prime_num -eq 0 ];\
    \ do\n    fib=$((i + j))\n    [ $(echo \"$fib\" | is_prime) -eq 1 ] && prime_num=$fib\n\
    \    i=$j\n    j=$fib\n  done\n  echo \"$prime_num\"\n}\n\ncandidate() {\n   \
    \ prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=82 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=72 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=\"$1\"\n    local i=0\n    local f1=1\n    local f2=1\n    local\
    \ f=0\n    while [[ $i -lt $n ]]; do\n        f=$((f1 + f2))\n        f1=$f2\n\
    \        f2=$f\n        if [[ $(is_prime \"$f\") == \"true\" ]]; then\n      \
    \      i=$((i + 1))\n        fi\n    done\n    echo \"$f\"\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=73 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=67 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  i=0\n  n=0\n  until [ $i -eq $1 ]; do\n    n=$(fib_at \"$n\")\n    if is_prime\
    \ \"$n\"; then\n      (( i++ ))\n    fi\n  done\n  echo \"$n\"\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        local n=$1\n        local x=2\n\
    \        local y=3\n        local i=1\n        local tmp\n        if [[ $n -eq\
    \ 1 ]]; then\n            echo $x\n        elif [[ $n -eq 2 ]]; then\n       \
    \     echo $y\n        else\n            while [[ $i -lt $n ]]; do\n         \
    \       is_prime $y\n                if [[ $? -eq 0 ]]; then\n               \
    \     ((i++))\n                fi\n                tmp=$x\n                x=$y\n\
    \                y=$((x+tmp))\n            done\n            echo $y\n       \
    \ fi\n    else\n        echo $1\n    fi\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=34 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=15 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local nth_fib=$(fib \"-$1\")\n  local nth_prime=$(nth_prime \"$1\")\n \
    \ while [[ $nth_fib -ne $nth_prime ]]; do\n    local nth_fib=$(fib \"-$(( $1 +\
    \ 1 ))\")\n    local nth_prime=$(nth_prime \"$(( $1 + 1 ))\")\n    local i=$((\
    \ $1 + 1 ))\n  done\n  echo \"$nth_fib\"\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1sdqpbw7.sh: line 16: fib: command not found

    /tmp/tmp1sdqpbw7.sh: line 17: nth_prime: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ $1 -lt 1 ]]; then\n    echo \"n must be greater than 1.\"\n    return\
    \ 1\n  fi\n\n  if [[ $1 -eq 1 ]]; then\n    echo \"2\"\n    return 0\n  fi\n\n\
    \  if [[ $1 -eq 2 ]]; then\n    echo \"3\"\n    return 0\n  fi\n\n  if [[ $1 -eq\
    \ 3 ]]; then\n    echo \"5\"\n    return 0\n  fi\n\n  NUM_FIB=3\n  x=1\n  y=1\n\
    \  while [[ $NUM_FIB -ne $1 ]]; do\n    fib=$(( x + y ))\n    x=$y\n    y=$fib\n\
    \    if ! [[ $fib -eq 2 || $fib -eq 3 || $fib -eq 5 ]]; then\n      is_prime $fib\n\
    \      if [[ $? -eq 0 ]]; then\n        NUM_FIB=$(( NUM_FIB + 1 ))\n      fi\n\
    \    else\n      NUM_FIB=$(( NUM_FIB + 1 ))\n    fi\n  done\n\n  echo $fib\n}\n\
    \ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    local i=2\n    local a=0\n    local b=1\n    local c=1\n\
    \    local is_prime\n\n    while (( i < n )); do\n        c=$(( a + b ))\n   \
    \     a=$b\n        b=$c\n        is_prime=$(is_prime \"$c\")\n        if [[ \"\
    $is_prime\" == \"true\" ]]; then\n            (( i++ ))\n        fi\n    done\n\
    \n    echo \"$c\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n # one-based\n\n    n=$1\n    if [ -z \"$n\" ]; then\n       \
    \ return 1\n    fi\n\n    # echo $1\n\n    # TODO: need to fix this\n    #\n \
    \   # This seems that fibonacci 0,1 would not return fibonacci 0,1\n    # The\
    \ output for fibonacci 3,2 would return fibonacci 2,1\n    # This needs to be\
    \ fixed\n    #\n    # output is a string\n    #\n    # echo \"fibonacci,$n\" |\
    \ awk -f \"$AWK_PATH/is_prime.awk\" -f \"$AWK_PATH/fibonacci.awk\"\n    echo \"\
    fibonacci,$n\" | awk -f \"$AWK_PATH/is_prime.awk\" -f \"$AWK_PATH/fibonacci.awk\"\
    \n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[\
    \ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[\
    \ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n   \
    \ [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n\
    \    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: can''t open source file `/is_prime.awk'' for reading (No such
    file or directory)

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ $1 -lt 1 ]; then\n    echo \"ERR: The argument must be a natural number.\"\
    \n    return 1\n  fi\n\n  cnt=1\n  f1=1\n  f2=1\n  while [ 1 -eq 1 ]; do\n   \
    \ fn=$((f1 + f2))\n    f1=$f2\n    f2=$fn\n    if [ $((fn % 2)) -eq 0 ]; then\n\
    \      continue\n    fi\n    if [ $(is_prime \"$fn\") -eq 1 ]; then\n      cnt=$((cnt\
    \ + 1))\n      if [ $cnt -eq $1 ]; then\n        echo \"$fn\"\n        return\
    \ 0\n      fi\n    fi\n  done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=53 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=40 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if (( ! $1 )) || (( ! $(is_int $1) )); then\n        echo \"Argument\
    \ is not an integer\" >&2\n        return 2\n    fi\n\n    local i=0 n\n    while\
    \ true; do\n        (( n = $(fib $i) ))\n        if [[ $(is_prime $n) ]]; then\n\
    \            (( i++ ))\n            if (( i == $1 )); then\n                echo\
    \ $n\n                return 0\n            fi\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  echo \"$(prime_fib_fast $1)\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp31ldcof3.sh: line 16: prime_fib_fast: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local number=\"$1\"\n  local last_fib=1\n  local current_fib=1\n  local\
    \ i=1\n  local is_prime=0\n  local index=1\n  while [ \"$index\" -lt \"$number\"\
    \ ]; do\n    i=$((last_fib + current_fib))\n    last_fib=$current_fib\n    current_fib=$i\n\
    \    if [ \"$(is_prime \"$i\")\" -eq 1 ]; then\n      index=$((index + 1))\n \
    \   fi\n  done\n  echo \"$i\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local counter=1 number=1 prev_number=0 next_number=0\n  local is_prime=1\n\
    \  while true; do\n    if [[ $counter -gt $1 ]]; then\n      break\n    fi\n \
    \   if [[ $(is_prime \"$number\") -eq 1 ]]; then\n      if [[ $counter -eq $1\
    \ ]]; then\n        echo \"$number\"\n        break\n      fi\n      counter=$((\
    \ counter + 1 ))\n    fi\n    next_number=$(( number + prev_number ))\n    prev_number=$number\n\
    \    number=$next_number\n  done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    local i=1\n    local fib=1\n    local fib_prev=1\n  \
    \  local prime=1\n    local prev_prime=1\n    while [ $i -lt $n ]; do\n      \
    \  i=$((i+1))\n        fib_prev=$fib\n        fib=$((fib+prime))\n        prev_prime=$prime\n\
    \        prime=$((fib_prev+prev_prime))\n    done\n    echo $prime\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local i=0\n  local j=1\n  local n=\"$1\"\n  local fib=0\n  local is_prime=0\n\
    \  local primes=()\n  local count=0\n\n  for (( ; ; )); do\n    ((fib = i + j))\n\
    \    ((is_prime = 0))\n    for prime in \"${primes[@]}\"; do\n      ((0 == (fib\
    \ % prime))) && ((is_prime = 1)) && break\n    done\n    ((is_prime == 0)) &&\
    \ ((primes[${#primes[@]}] = fib)) && ((count++)) && ((count == n)) && break\n\
    \    ((i = j))\n    ((j = fib))\n  done\n\n  echo \"$fib\"\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=38 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  is_integer \"$1\" && [[ \"$1\" -gt 0 ]] || return\n  local n_th=\"$1\"\n\
    \  local n=\"1\"\n  local f1=\"1\"\n  local f2=\"1\"\n  local fn=\"1\"\n  while\
    \ [[ \"$n\" -lt \"$n_th\" ]]; do\n    fn=$(( f1 + f2 ))\n    f1=$f2\n    f2=$fn\n\
    \    if is_prime \"$fn\"; then\n      n=$(( n + 1 ))\n    fi\n  done\n  echo \"\
    $fn\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n \
    \   [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7fv0sim0.sh: line 16: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  declare -i n=$1\n  (( n == 1 )) && echo \"2\" && return\n  (( n == 2 ))\
    \ && echo \"3\" && return\n  declare -i p=\"3\" q=\"2\" m=0\n  for (( i=3; i<=n;\
    \ i++ )); do\n    m=$(( p + q ))\n    q=$p\n    p=$m\n    [ $(( m % 2 )) -eq 0\
    \ ] && continue\n    (( m % 3 == 0 )) && continue\n    (( m % 5 == 0 )) && continue\n\
    \    (( m % 7 == 0 )) && continue\n    if $(is_prime \"$m\"); then\n      echo\
    \ \"$m\"\n      return\n    fi\n  done\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local argument=${1}\n    local condition='argument'\n    local condition_add='argument'\n\
    \    local count=0\n    local initial=1\n    local last=1\n    local prime=2\n\
    \    local fib=0\n    local fib_last=0\n    local fib_initial=0\n    local is_prime=1\n\
    \    local primes_list=('2')\n    local prime_count=1\n    while [ \"$count\"\
    \ -lt \"$argument\" ]; do\n        let 'count++'\n        let 'fib_last = fib_initial'\n\
    \        let 'fib_initial = fib'\n        let 'fib = last + initial'\n       \
    \ let 'last = initial'\n        let 'initial = fib'\n        for ((a=0;a<prime_count;a++));\
    \ do\n            if [ \"$fib\" -gt \"${primes_list[$a]}\" ]; then\n         \
    \       let 'is_prime = 1'\n            else\n                let 'is_prime =\
    \ 0'\n                let 'a = prime_count'\n            fi\n        done\n  \
    \      if [ \"$is_prime\" -eq \"1\" ]; then\n            prime=\"$fib\"\n    \
    \        condition='prime'\n            primes_list+=(\"$fib\")\n            let\
    \ 'prime_count++'\n        fi\n    done\n    echo \"$condition\"\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    local it=0\n    local counter=0\n    local fib=0\n  \
    \  while [ \"${counter}\" -lt \"${n}\" ]; do\n        fib=$(fib \"${it}\")\n \
    \       if $(is_prime \"${fib}\"); then\n            counter=$((counter + 1))\n\
    \        fi\n        it=$((it + 1))\n    done\n    echo \"${fib}\"\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=45 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=30 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    for i in $(seq 1 $n); do\n        if [[ $i -eq 1 ]];\
    \ then\n            fib=$(echo \"0\")\n        elif [[ $i -eq 2 ]]; then\n   \
    \         fib=$(echo \"1\")\n        else\n            fib=$(echo $(( $((fib_prev\
    \ + fib_prev_prev)) % 4000000000 )))\n        fi\n        fib_prev_prev=$fib_prev\n\
    \        fib_prev=$fib\n        while [[ $(is_prime $fib) -eq 0 ]]; do\n     \
    \       if [[ $i -eq 1 ]]; then\n                fib=$(echo \"0\")\n         \
    \   elif [[ $i -eq 2 ]]; then\n                fib=$(echo \"1\")\n           \
    \ else\n                fib=$(echo $(( $((fib_prev + fib_prev_prev)) % 4000000000\
    \ )))\n            fi\n            fib_prev_prev=$fib_prev\n            fib_prev=$fib\n\
    \        done\n    done\n    echo $fib\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=49 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=44 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=\"$1\"\n  local i=0\n  local f1=1\n  local f2=1\n  local f=0\n\
    \  while [ $i -lt $n ]; do\n    f=$((f1 + f2))\n    f1=$f2\n    f2=$f\n    let\
    \ i+=1\n    if [[ $f -gt 1 ]] && is_prime $f; then\n      let i+=1\n    fi\n \
    \ done\n  echo $f\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    /tmp/tmp091rjelm.sh: line 26: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=\"$1\"\n    if ! [[ \"$n\" =~ ^[0-9]+$ ]]; then\n        echo\
    \ \"integer expected as first argument\"\n        return 1\n    fi\n    local\
    \ result=\"$(fib \"$n\")\"\n    for i in $(seq 2 \"$result\"); do\n        if\
    \ (( \"$result\" % \"$i\" == 0 )); then\n            (( $i == $result )) && echo\
    \ \"$result\" && return 0\n            break\n        fi\n    done\n    prime_fib\
    \ \"$(( n + 1 ))\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=4 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local fib=\"${1}\"\n\n  local fibonacci=\"$(fibonacci \"${fib}\")\"\n \
    \ local is_prime=\"$(is_prime \"${fibonacci}\")\"\n\n  while [[ \"${is_prime}\"\
    \ != \"true\" ]]; do\n    fib=\"$((fib + 1))\"\n    fibonacci=\"$(fibonacci \"\
    ${fib}\")\"\n    is_prime=\"$(is_prime \"${fibonacci}\")\"\n  done\n\n  echo \"\
    ${fibonacci}\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=50 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local ri=\"$(fib \"1\" \"$1\")\"\n    echo \"$ri\"\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpdoor1q2b.sh: line 16: fib: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    f=(\"2\" \"3\" \"5\")\n    f1=(\"2\" \"3\" \"5\")\n    f2=(\"2\" \"3\"\
    \ \"5\")\n    for (( i=3; i<$1; i++ )); do\n        sum=$((${f1[-1]} + ${f2[-1]}))\n\
    \        if $(is_prime $sum); then\n            f+=(\"$sum\")\n        fi\n  \
    \      f1+=(\"${f2[-1]}\")\n        f2+=(\"$sum\")\n    done\n    echo \"${f[-1]}\"\
    \n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[\
    \ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[\
    \ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n   \
    \ [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n\
    \    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  fn=`fib $1`\n  if is_prime $fn\n  then\n    echo $fn\n  else\n    prime_fib\
    \ $(( $1 + 1 ))\n  fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=51 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=39 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    fib $1 | while read N; do\n        if prime $N; then\n            echo\
    \ $N\n            break\n        fi\n    done\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu7heezhv.sh: line 16: fib: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    fibonacci_numbers=()\n    for n in $(fibonacci); do\n        if is_prime\
    \ \"$n\"; then\n            fibonacci_numbers+=(\"$n\")\n        fi\n    done\n\
    \    echo \"${fibonacci_numbers[$1]}\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppv60ta0b.sh: line 17: fibonacci: command not found

    '
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local fib_number=\"1\"\n  local prev_number=\"0\"\n  local i=\"1\"\n  local\
    \ fib=\"0\"\n  while [[ $i -le $1 ]]; do\n    if [[ $i -eq 1 ]]; then\n      fib=$fib_number\n\
    \    else\n      fib=$(($fib_number + $prev_number))\n      prev_number=$fib_number\n\
    \      fib_number=$fib\n    fi\n    local prime=$(prime $fib)\n    if [[ $prime\
    \ -eq 1 ]]; then\n      echo $fib\n      ((i++))\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=61 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=47 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i=1\n    local f1=0\n    local f2=1\n    while [ $i -lt $1 ]; do\n\
    \        f1=$f2\n        f2=$(($f1 + $f2))\n        if is_prime $f2; then\n  \
    \          i=$(($i + 1))\n        fi\n    done\n    echo $f2\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023511
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local counter=0\n  local fib_number=$(fib \"$counter\")\n  while [ ! \"\
    $(check_prime \"$fib_number\")\" ]; do\n    ((counter++))\n    fib_number=$(fib\
    \ \"$counter\")\n  done\n  echo \"$fib_number\"\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=62 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=54 encoding='utf-8'>
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ \"$1\" -lt \"1\" ]; then\n    return\n  fi\n  local a=1 b=2 c=0 count=0\n\
    \  while [ $count -lt $1 ]; do\n    c=$((a+b))\n    if [ $((a%2)) -eq 0 ]; then\n\
    \      a=$c\n    else\n      a=$b\n      b=$c\n      if is_prime $a; then\n  \
    \      ((count++))\n      fi\n    fi\n  done\n  echo $a\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=65 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=57 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=$1\n  local i=1\n  local j=0\n  while [ $n -gt 0 ]; do\n    local\
    \ k=$((i + j))\n    if is_prime $k; then\n      n=$((n - 1))\n    fi\n    j=$i\n\
    \    i=$k\n  done\n  echo $k\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=11 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=58 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    local first=1\n    local second=1\n    local fnum=0\n\
    \    local cnt=0\n    while [ $cnt -ne $n ]; do\n        fnum=$(( first + second\
    \ ))\n        first=$second\n        second=$fnum\n        if [ $(( cnt + 1 ))\
    \ -ne $n ] && is_prime $fnum; then\n            cnt=$(( cnt + 1 ))\n        fi\n\
    \    done\n    echo $fnum\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\"\
    ) = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=63 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=43 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    # prime_fib_n stores n-th number that is a Fibonacci\
    \ number and it's also prime.\n    local prime_fib_n=0\n    local fib_1=1\n  \
    \  local fib_2=1\n    local i=1\n    while [ $i -lt $n ]; do\n        let \"prime_fib_n\
    \ = fib_1 + fib_2\"\n        if [ $(echo \"$prime_fib_n\" | tr -d -c 0-9 | wc\
    \ -c) -eq ${#prime_fib_n} ] && [ $(is_prime \"$prime_fib_n\") -eq 1 ]; then\n\
    \            let \"i = i + 1\"\n        fi\n        let \"fib_1 = fib_2\"\n  \
    \      let \"fib_2 = prime_fib_n\"\n    done\n    echo \"$prime_fib_n\"\n}\n\n\
    candidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local -i nth=0\n  local -i n=0\n\n  if [ $# -eq 0 ]; then\n    return 1\n\
    \  fi\n\n  nth=$1\n  if [ $nth -eq 0 ]; then\n    echo 0\n    return 0\n  fi\n\
    \n  fib_num=1\n  n=1\n  prev_fib_num=0\n  while [ $n -lt $nth ]; do\n    n=$((n+1))\n\
    \    fib_num=$((fib_num+prev_fib_num))\n    prev_fib_num=$((fib_num-prev_fib_num))\n\
    \    if ! is_prime $fib_num; then\n      n=$((n-1))\n    fi\n  done\n\n  echo\
    \ $fib_num\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [ \"$1\" == \"1\" ]; then\n    echo \"2\"\n  elif [ \"$1\" == \"2\"\
    \ ]; then\n    echo \"3\"\n  else\n    n=$1\n    a=2\n    b=3\n    c=5\n    x=0\n\
    \    while [ \"$x\" -lt \"$n\" ]; do\n      prime=$(is_prime \"$c\")\n      if\
    \ [ \"$prime\" == \"0\" ]; then\n        a=$b\n        b=$c\n        c=$((a+b))\n\
    \        x=$((x+1))\n      else\n        a=$b\n        b=$c\n        c=$((a+b))\n\
    \      fi\n    done\n    echo \"$c\"\n  fi\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=76 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=74 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if [[ $1 -gt 1 ]]; then\n    b=$(prime_fib $(($1 - 1)))\n    a=$(prime_fib\
    \ $(($1 - 2)))\n    fib=$(($a + $b))\n    while ! $(is_prime $fib); do\n     \
    \ b=$a\n      a=$fib\n      fib=$(($a + $b))\n    done\n    echo $fib\n  else\n\
    \    echo $1\n  fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Argument must be\
    \ an integer.\"\n        return 1\n    fi\n\n    if [[ $1 -eq 0 ]]; then\n   \
    \     echo \"0\"\n        return 0\n    fi\n\n    if [[ $1 -lt 0 ]]; then\n  \
    \      echo \"Argument must be positive.\"\n        return 1\n    fi\n\n    declare\
    \ -a prime_fib_numbers\n\n    counter=0\n    while [[ $counter -lt $1 ]]; do\n\
    \        if [[ $counter -eq 0 ]]; then\n            next_fib=\"2\"\n        elif\
    \ [[ $counter -eq 1 ]]; then\n            next_fib=\"3\"\n        else\n     \
    \       next_fib=$(( ${prime_fib_numbers[$(( $counter - 1 ))]} + ${prime_fib_numbers[$((\
    \ $counter - 2 ))]} ))\n        fi\n\n        if [[ $( is_prime \"$next_fib\"\
    \ ) -eq 1 ]]; then\n            prime_fib_numbers[$counter]=\"$next_fib\"\n  \
    \          (( counter++ ))\n        fi\n    done\n\n    echo \"${prime_fib_numbers[$((\
    \ $counter - 1 ))]}\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=42 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=66 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # This is a very slow solution. I'll be very glad if you can suggest\n\
    \    # me a faster solution.\n    local cnt=0\n    local fn\n    while true; do\n\
    \        cnt=$((cnt+1))\n        fn=$(fib \"$cnt\")\n        if [[ \"$(is_prime\
    \ \"$fn\")\" == \"true\" ]]; then\n            break\n        fi\n    done\n \
    \   echo \"$fn\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=81 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=79 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    local f_n=0\n    local f_n_prev=1\n    local f_n_prev2=0\n\
    \    local i=0\n    local value\n    while [[ $i -lt $n ]]; do\n        f_n=$((f_n_prev\
    \ + f_n_prev2))\n        f_n_prev2=$f_n_prev\n        f_n_prev=$f_n\n        ((i++))\n\
    \    done\n    value=$f_n\n    if [[ $value -eq 1 ]]; then\n        value=2\n\
    \    fi\n    echo $value\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    echo \"$(fib \"$1\" | filter_prime | head -n 1)\"\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp0jazk2bu.sh: line 16: fib: command not found

    /tmp/tmp0jazk2bu.sh: line 16: filter_prime: command not found

    '
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [[ $1 -eq 1 ]]; then\n        echo \"2\"\n    elif [[ $1 -eq 2 ]];\
    \ then\n        echo \"3\"\n    else\n        local n fib\n        n=3\n     \
    \   fib=2\n        cur=3\n        for (( i=3; i<=$1; i++ )); do\n            fib=$(echo\
    \ \"$fib + $cur\" | bc)\n            cur=$(echo \"$fib - $cur\" | bc)\n      \
    \      if [[ $(factor $fib | cut -d \":\" -f 2 | cut -d \" \" -f 2) -eq $fib ]];\
    \ then\n                n=$i\n            fi\n        done\n        echo $fib\n\
    \    fi\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local count=$1\n    local first=1\n    local second=1\n    local ans=2\n\
    \    local cur=0\n    local index=2\n    while [[ $index -lt $count ]]; do\n \
    \       cur=$(($first + $second))\n        if [[ $cur -gt $ans ]]; then\n    \
    \        ans=$cur\n        fi\n        first=$second\n        second=$cur\n  \
    \      index=$(($index + 1))\n    done\n    echo \"$ans\"\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    [[ -z $1 ]] && error_exit \"prime_fib() expects a number\"\n    local\
    \ n=\"$1\"\n    while [[ $n -gt 0 ]]; do\n        local fib=\"$(fib \"$n\")\"\n\
    \        [[ $(is_prime \"$fib\") -eq 1 ]] && echo \"$fib\" && return\n       \
    \ n=$((n-1))\n    done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\")\
    \ = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\")\
    \ = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp75q7z1f0.sh: line 19: fib: command not found

    /tmp/tmp75q7z1f0.sh: line 20: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local sieve=$(primes_upto \"1000\")\n  local fib=$(fib \"1000\")\n  local\
    \ -i count=0\n  for i in ${fib}; do\n    if [[ \"${sieve}\" =~ \"${i}\" ]]; then\n\
    \      (( count++ ))\n      if [[ \"${count}\" -eq \"${1}\" ]]; then\n       \
    \ echo \"${i}\"\n        return\n      fi\n    fi\n  done\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpc90nvrai.sh: line 16: primes_upto: command not found

    /tmp/tmpc90nvrai.sh: line 17: fib: command not found

    '
  stdout: ''
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  if ! echo \"$1\" | grep -Eq \"^[0-9]+$\"; then\n    echo \"Argument is\
    \ not an integer: $1\"\n    return\n  fi\n\n  python -c \"\nimport math\n\ndef\
    \ is_prime(n):\n  if n == 2:\n    return True\n  if n % 2 == 0 or n <= 1:\n  \
    \  return False\n\n  sqr = int(math.sqrt(n)) + 1\n\n  for divisor in range(3,\
    \ sqr, 2):\n    if n % divisor == 0:\n      return False\n  return True\n\ndef\
    \ fib(n):\n  phi = (1 + math.sqrt(5)) / 2\n  return int(round(phi ** n / math.sqrt(5)))\n\
    \ndef fib_prime(n):\n  if n == 1:\n    return 2\n  prev_2 = 1\n  prev_1 = 2\n\
    \  index = 3\n  while True:\n    curr = prev_1 + prev_2\n    if index == n:\n\
    \      if is_prime(curr):\n        return curr\n      else:\n        return -1\n\
    \    else:\n      prev_2 = prev_1\n      prev_1 = curr\n      index += 1\n\nif\
    \ __name__ == '__main__':\n  print(fib_prime($1))\n\"\n}\n\ncandidate() {\n  \
    \  prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"\
    2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\"\
    \ ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\"\
    \ ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local fib_n=$(fib \"$1\")\n    if is_prime \"$fib_n\"; then\n       \
    \ echo \"$fib_n\"\n    else\n        prime_fib $((\"$1\" + 1))\n    fi\n}\n\n\
    candidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=56 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=36 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  n=$1\n  cnt=0\n  fib=\"\"\n  while true; do\n    ((cnt++))\n    fib=$(fibonacci\
    \ $cnt)\n    if [ $(is_prime $fib) -eq 1 ]; then\n      n=$((n-1))\n      if [\
    \ $n -eq 0 ]; then\n        echo $fib\n        break\n      fi\n    fi\n  done\n\
    }\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=75 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=71 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  declare nth\n  nth=$1\n  declare -i sum\n  sum=0\n  declare -i counter\n\
    \  counter=0\n  while [ $counter -lt \"$nth\" ]; do\n    sum=$(fib \"$sum\")\n\
    \    if [ \"$(is_prime \"$sum\")\" = \"True\" ]; then\n      counter=$((counter\
    \ + 1))\n    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    prime_fib \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[\
    \ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[\
    \ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[\
    \ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n \
    \   [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\"\
    \ ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=69 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=64 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local i j\n    local upper=$1\n    local count=0\n    local list=()\n\
    \    i=1\n    j=1\n    while true; do\n        local sum=$((i + j))\n        i=$j\n\
    \        j=$sum\n        if [[ \"${list[@]}\" =~ \"$sum\" ]]; then\n         \
    \   continue\n        fi\n        local flag=true\n        for n in \"${list[@]}\"\
    ; do\n            if [[ $(bc <<< \"$sum % $n\") -eq 0 ]]; then\n             \
    \   flag=false\n                break\n            fi\n        done\n        if\
    \ [[ \"$flag\" = \"true\" ]]; then\n            list+=(\"$sum\")\n           \
    \ ((count++))\n            if [[ \"$count\" -eq \"$upper\" ]]; then\n        \
    \        echo \"$sum\"\n                break\n            fi\n        fi\n  \
    \  done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    is_integer $1 || return\n    fib \"$1\" | grep $(number_is_prime) | tail\
    \ -n 1\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5ycvoxqi.sh: line 16: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  _prime_fib() {\n    local n=$1\n    local curr=$(fib \"$n\")\n    local\
    \ next=$(fib \"$((n+1))\")\n    if is_prime \"$curr\"; then\n      echo \"$curr\"\
    \n    else\n      _prime_fib \"$((n+1))\"\n    fi\n  }\n  _prime_fib 1\n}\n\n\
    candidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=87 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=85 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  get_item_by_index \"$(fibonacci_number_stream)\" \"$1\"\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmptc4x7kh7.sh: line 16: fibonacci_number_stream: command not found

    /tmp/tmptc4x7kh7.sh: line 16: get_item_by_index: command not found

    '
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  fib $1 | while read number; do\n    if is_prime $number; then\n      echo\
    \ $number\n      break\n    fi\n  done\n}\n\ncandidate() {\n    prime_fib \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvbiu5id_.sh: line 16: fib: command not found

    '
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [ $1 -lt 1 ]; then\n        return 1\n    fi\n\n    nth=1\n    nth_prime_fib=1\n\
    \    num=1\n    num_prev=1\n    while [ $nth -lt $1 ]; do\n        num_prev=$num\n\
    \        num=$((num + num_prev))\n        if [ $((num % 2)) -ne 0 ] && [ $((num\
    \ % 3)) -ne 0 ] && [ $((num % 5)) -ne 0 ] && [ $((num % 7)) -ne 0 ]; then\n  \
    \          nth_prime_fib=$num\n            nth=$((nth + 1))\n        fi\n    done\n\
    \n    echo $nth_prime_fib\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"\
    2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\"\
    ) = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\"\
    ) = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"\
    8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local result=($(fib | prime | sed \"${1}q;d\"))\n    echo \"${result[1]}\"\
    \n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[\
    \ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[\
    \ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n   \
    \ [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n\
    \    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp734rbh1k.sh: line 16: fib: command not found

    /tmp/tmp734rbh1k.sh: line 16: prime: command not found

    '
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  awk -v n=$1 'BEGIN {\n    ITER=1;\n    F[1]=1; F[2]=1;\n    P[1]=1;\n \
    \   FIB=1;\n    while (ITER < n) {\n      FIB=F[ITER-1]+F[ITER];\n      ITER++;\n\
    \      while (FIB%P[P_ITER]==0) {\n        FIB=FIB/P[P_ITER];\n        P_ITER++;\n\
    \      }\n      if (FIB!=1) {\n        P_ITER=1;\n        P[ITER]=FIB;\n     \
    \   F[ITER]=FIB;\n      }\n    }\n    print F[n];\n  }'\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    # $1 is an integer\n    nth_fib() {\n        local nth=$1\n        if\
    \ [[ \"$nth\" -eq \"1\" ]]; then\n            echo \"1\"\n        elif [[ \"$nth\"\
    \ -eq \"2\" ]]; then\n            echo \"1\"\n        else\n            echo \"\
    $(( $(nth_fib \"$(( nth - 1 ))\") + $(nth_fib \"$(( nth - 2 ))\") ))\"\n     \
    \   fi\n    }\n\n    # $1 is an integer\n    is_prime() {\n        local check_val=$1\n\
    \        if [[ \"$check_val\" -le \"3\" ]]; then\n            echo \"1\"\n   \
    \     else\n            for i in `seq 2 $(( check_val - 1 ))`; do\n          \
    \      if [[ \"$(( check_val % i ))\" -eq \"0\" ]]; then\n                   \
    \ echo \"0\"\n                    return\n                fi\n            done\n\
    \            echo \"1\"\n        fi\n    }\n\n    local nth=$1\n    local fib_nth=$((\
    \ $(nth_fib \"$nth\") + 1 ))\n    for i in `seq 2 $fib_nth`; do\n        if [[\
    \ \"$(is_prime \"$i\")\" -eq \"1\" ]]; then\n            local prime_count=$((\
    \ prime_count + 1 ))\n            if [[ \"$prime_count\" -eq \"$nth\" ]]; then\n\
    \                echo \"$i\"\n                return\n            fi\n       \
    \ fi\n    done\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n\
    \    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n\
    \    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n\
    \    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\"\
    \ ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") =\
    \ \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    local n=$1\n    local gcd='import sys; print(sys.argv[1])'\n    for nth\
    \ in $(seq 0 $n); do\n        if [[ $(python -c \"$gcd $nth\" \"1\") == \"1\"\
    \ ]]; then\n            echo $nth\n            break\n        fi\n    done\n}\n\
    \ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
    \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate\
    \ \"5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate\
    \ \"7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: "  File \"<string>\", line 1\n    import sys; print(sys.argv[1]) 0\n   \
    \                                ^\nSyntaxError: invalid syntax\n  File \"<string>\"\
    , line 1\n    import sys; print(sys.argv[1]) 1\n                             \
    \      ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"prime_fib: $1: is\
    \ not a positive integer\" >&2\n        return 1\n    fi\n\n    local nth=${1#0}\
    \ n1 n2 nth_fib\n    if (( nth == 0 )); then\n        echo \"0\"\n        return\
    \ 0\n    fi\n\n    n1=1 n2=1\n    for (( i = 3; i <= nth; i++ )); do\n       \
    \ nth_fib=$(( n1 + n2 ))\n        if is_prime \"$nth_fib\"; then\n           \
    \ echo \"$nth_fib\"\n            return 0\n        fi\n        n1=$n2 n2=$nth_fib\n\
    \    done\n\n    echo \"$nth_fib\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  n=$1\n  if [[ ! \"$n\" =~ ^-?[0-9]+$ ]]; then\n    echo \"\\\"$n\\\" is\
    \ not an integer\"\n    return 1\n  fi\n  if [[ \"$n\" -lt 1 ]]; then\n    echo\
    \ \"n is less than 1\"\n    return 1\n  fi\n  if [[ \"$n\" -gt 1000 ]]; then\n\
    \    echo \"n is greater than 1000\"\n    return 1\n  fi\n  fib_count=0\n  fib_prev=0\n\
    \  fib_curr=1\n  fib_next=1\n  until [[ $fib_count -eq $n ]]; do\n    if [[ $(is_prime\
    \ \"$fib_curr\") == true ]]; then\n      fib_count=$((fib_count+1))\n    fi\n\
    \    fib_next=$((fib_prev+fib_curr))\n    fib_prev=$fib_curr\n    fib_curr=$fib_next\n\
    \  done\n  echo \"$fib_curr\"\n}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate\
    \ \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n    [[ $(candidate\
    \ \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n    [[ $(candidate\
    \ \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\" ]]\n    [[ $(candidate\
    \ \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"514229\" ]]\n    [[ $(candidate\
    \ \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: -1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  # $n is an integer\n  local n\n  n=$1\n  # $i is an integer\n  local i\n\
    \  i=0\n  # $f is an integer\n  local f\n  f=0\n  # $f1 is an integer\n  local\
    \ f1\n  f1=1\n  # $f2 is an integer\n  local f2\n  f2=0\n  # Until $i is less\
    \ than $n\n  until [ $i -eq $n ]; do\n    # Until $f is a prime number\n    until\
    \ $(is_prime $f); do\n      # $f = $f1 + $f2\n      f=$((f1 + f2))\n      # $f2\
    \ = $f1\n      f2=$f1\n      # $f1 = $f\n      f1=$f\n    done\n    # $i += 1\n\
    \    i=$((i + 1))\n  done\n  # $f is a number\n  echo $f\n}\n\ncandidate() {\n\
    \    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") =\
    \ \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") =\
    \ \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") =\
    \ \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=88 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=83 encoding='utf-8'>
  timestamp: 1660023521
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local n=\"$1\"\n  local fib=\"1\"\n  local fib_prev=\"1\"\n  local i=1\n\
    \  local result=\"\"\n  while [[ \"$i\" -lt \"$n\" ]]; do\n    # fib(n) = fib(n-1)\
    \ + fib(n-2)\n    local tmp=\"$fib\"\n    fib=\"$(( fib + fib_prev ))\"\n    fib_prev=\"\
    $tmp\"\n    ((i++))\n  done\n  result=\"$fib\"\n  while [[ \"$result\" -lt 0 ]];\
    \ do\n    if is_prime \"$result\"; then\n      echo \"$result\"\n      return\n\
    \    fi\n    result=\"$(( result + fib ))\"\n  done\n}\n\ncandidate() {\n    prime_fib\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\") = \"2\" ]]\n  \
    \  [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\") = \"5\" ]]\n  \
    \  [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\") = \"89\" ]]\n\
    \    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\") = \"1597\"\
    \ ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate \"9\") = \"\
    514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
- exit_code: 1
  program: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"\
    2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n#\
    \ \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib()\
    \ {\n  local i=1 # i-th prime number\n  local f=1 # Fibonacci index\n  local p=1\
    \ # Prime number index\n  local r=1 # previous term in Fibonacci sequence\n  local\
    \ s=1 # current term in Fibonacci sequence\n  if [[ \"$1\" =~ ^[1-9][0-9]*$ ]];\
    \ then\n    while [[ $i -lt $1 ]]; do\n      i=$((i+1))\n      while [[ $p -ne\
    \ $i ]]; do\n        s=$((r+s))\n        f=$((f+1))\n        if is_prime \"$s\"\
    ; then\n          p=$((p+1))\n        fi\n      done\n    done\n    echo \"$s\"\
    \n  else\n    echo \"$1 is not an integer\" >&2\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\"\
    ) = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate \"3\")\
    \ = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"5\"\
    ) = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"7\"\
    ) = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
    \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023516
