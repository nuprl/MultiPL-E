name: HumanEval_60_sum_to_n
language: sh
prompt: "#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>>\
  \ $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n\
  \ \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n\
  # \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n"
tests: "}\n\ncandidate() {\n    sum_to_n \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"21\" ]]\n    [[ $(candidate\
  \ \"11\") = \"66\" ]]\n    [[ $(candidate \"30\") = \"465\" ]]\n    [[ $(candidate\
  \ \"100\") = \"5050\" ]]\n}\n\nrun_test"
completions: ["   # initilize sum to 0\n   local SUM=0\n   # For each number until\
    \ the input parameter\n   for NUM in $(seq 1 $1); do\n      # add the number to\
    \ the sum\n      let SUM+=$NUM\n   done\n   # return the sum\n   echo $SUM", " \
    \  for ((i=1; i<=n; i++))\n   do\n     let sum+=i\n   done\n   echo \"$sum\"",
  "  num=$1\n  start=1\n  sum=0\n  while [ $start -le $num ]\n  do\n    sum=$((sum\
    \ + start))\n    start=$((start + 1))\n  done\n  echo $sum", "\tlocal arg=\"$1\"\
    \n\tlocal sum=0\n\tlocal i=1\n\twhile [ $i -le $arg ]; do\n\t\tlet sum=$sum+$i\n\
    \t\tlet i=$i+1\n\tdone\n\techo $sum", '    echo "$(($1 * ($1 + 1) / 2))"', " \
    \   local sum=0\n    for((i=1;i<=$1;i++));do\n        sum=$((sum+i))\n    done\n\
    \    echo $sum", "    # Replace the following line with a one-liner\n    # using\
    \ a pipe.\n    echo $(seq 1 $1 | paste -sd+ - | bc)", "    n=$1\n    tmp=0\n \
    \   i=1\n    while [ $i -le $n ]\n    do\n        tmp=$(($tmp + $i))\n       \
    \ i=$(($i + 1))\n    done\n    echo $tmp", "    # Define a local variable that\
    \ holds the result.\n    local n=\"$1\"\n    local sum=0\n    for (( i=1; i<=$n;\
    \ i++ )); do\n        # Calculate the sum.\n        sum=$(( sum + i ))\n    done\n\
    \    # Because echo is implicitly called, this function returns the sum.\n   \
    \ $sum", "  local sum=0\n  for ((i=1; i<=\"$1\"; i++)); do\n    sum=$((sum + i))\n\
    \  done\n  echo \"$sum\"", "    local SUM=0\n    for (( i=1; i<=$1; i++ ))\n \
    \   do\n        let SUM+=i\n    done\n    echo $SUM", '    echo "$1 * ($1 + 1)
    / 2" | bc', '  awk "BEGIN { print ( ($1 * ($1 + 1)) / 2 ) }"', "  let \"sum =\
    \ (($1 + 1) * $1)/2\"\n  echo $sum", "    local end=${1}\n    local sum=0\n  \
    \  for i in $(seq ${end}); do\n        sum=$((sum + i))\n    done\n    echo ${sum}",
  '    echo $(echo -e "scale=0; ($1*($1+1))/2" | bc)', "    SUM=0\n    for (( i=1;\
    \ i<=$1; i++ )); do\n        SUM=$((SUM+i))\n    done\n    echo \"$SUM\"", " \
    \ if [ \"$1\" -eq \"1\" ]; then\n    echo \"1\"\n  else\n    local n=$1\n    local\
    \ n_minus_1=$((n-1))\n    local sub_sum=$(sum_to_n \"$n_minus_1\")\n    local\
    \ result=$((n+sub_sum))\n    echo \"$result\"\n  fi", "    sum=0\n    while [[\
    \ $1 -gt 0 ]]; do\n        sum=$((sum + 1))\n        ((--1))\n    done\n    echo\
    \ $sum", "    sum=0\n    for ((i=1; i<=$1; i++)); do\n\tsum=$((sum + i))\n   \
    \ done\n    echo $sum"]
stop_tokens:
- "\n}"
