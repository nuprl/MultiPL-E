name: HumanEval_124_valid_date
language: sh
prompt: "#!/bin/bash\n# You have to write a function which validates a given date\
  \ string and\n# returns true if the date is valid otherwise false.\n# The date is\
  \ valid if all of the following rules are satisfied:\n# 1. The date string is not\
  \ empty.\n# 2. The number of days is not less than 1 or higher than 31 days for\
  \ months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than\
  \ 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
  \ than 29 for the month 2.\n# 3. The months should not be less than 1 or higher\
  \ than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date\
  \ \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n\
  # >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\"\
  )\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\n\
  valid_date() {\n"
tests: "}\n\ncandidate() {\n    valid_date \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"03-11-2000\") = \"true\" ]]\n    [[ $(candidate \"15-01-2012\"\
  ) = \"false\" ]]\n    [[ $(candidate \"04-0-2040\") = \"false\" ]]\n    [[ $(candidate\
  \ \"06-04-2020\") = \"true\" ]]\n    [[ $(candidate \"01-01-2007\") = \"true\" ]]\n\
  \    [[ $(candidate \"03-32-2011\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
  false\" ]]\n    [[ $(candidate \"04-31-3000\") = \"false\" ]]\n    [[ $(candidate\
  \ \"06-06-2005\") = \"true\" ]]\n    [[ $(candidate \"21-31-2000\") = \"false\"\
  \ ]]\n    [[ $(candidate \"04-12-2003\") = \"true\" ]]\n    [[ $(candidate \"04122003\"\
  ) = \"false\" ]]\n    [[ $(candidate \"20030412\") = \"false\" ]]\n    [[ $(candidate\
  \ \"2003-04\") = \"false\" ]]\n    [[ $(candidate \"2003-04-12\") = \"false\" ]]\n\
  \    [[ $(candidate \"04-2003\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    # Write your solution here\n    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\
    \ ]]; then\n        # check year\n        # year =~ ^[0-9]{4}$\n        # check\
    \ month\n        # month =~ ^[0-9]{2}$\n        # check day\n        # day =~\
    \ ^[0-9]{2}$\n        # parse $1\n        month=${1:0:2}\n        day=${1:3:2}\n\
    \        year=${1:6:4}\n        if [[ $year =~ ^[0-9]{4}$ ]]; then\n         \
    \   if [[ $month =~ ^[0-9]{2}$ ]]; then\n                if [[ $day =~ ^[0-9]{2}$\
    \ ]]; then\n                    # check year\n                    if [ $year -ge\
    \ 2000 -a $year -le 2040 ]; then\n                        # check month\n    \
    \                    if [ $month -ge 1 -a $month -le 12 ]; then\n            \
    \                # check day\n                            if [ $month -eq 1 -o\
    \ $month -eq 3 -o $month -eq 5 -o $month -eq 7 -o $month -eq 8 -o $month -eq 10\
    \ -o $month -eq 12 ]; then\n                                if [ $day -ge 1 -a\
    \ $day -le 31 ]; then\n                                    echo \"true\"\n   \
    \                             else\n                                    echo \"\
    false\"\n                                fi\n                            elif\
    \ [ $month -eq 4 -o $month -eq 6 -o $month -eq 9 -o $month -eq 11 ]; then\n  \
    \                              if [ $day -ge 1 -a $day -le 30 ]; then\n      \
    \                              echo \"true\"\n                               \
    \ else\n                                    echo \"false\"\n                 \
    \               fi\n                            elif [ $month -eq 2 ]; then\n\
    \                                if [ $day -ge 1 -a $day -le 29 ]; then\n    \
    \                                echo \"true\"\n                             \
    \   else\n                                    echo \"false\"\n               \
    \                 fi\n                            else\n                     \
    \           echo \"false\"\n                            fi\n                 \
    \       else\n                            echo \"false\"\n", "  # Write your answer\
    \ inside the function body\n  # You can modify the function signature if needed\n\
    \  #\n  # DO NOT MODIFY ANYTHING OUTSIDE THE FUNCTION BODY\n  if [ $# -eq 0 ];\
    \ then\n    echo \"false\"\n    return\n  fi\n  set -f\n  array=(${1//-/ })\n\
    \  set +f\n  if [ ${#array[@]} -ne 3 ]; then\n    echo \"false\"\n    return\n\
    \  fi\n  if [ ${array[0]} -gt 12 ] || [ ${array[0]} -lt 1 ]; then\n    echo \"\
    false\"\n    return\n  fi\n  if [ ${array[0]} -eq 2 ]; then\n    if [ ${array[1]}\
    \ -gt 29 ] || [ ${array[1]} -lt 1 ]; then\n      echo \"false\"\n      return\n\
    \    fi\n  elif [ ${array[0]} -eq 4 ] || [ ${array[0]} -eq 6 ] || [ ${array[0]}\
    \ -eq 9 ] || [ ${array[0]} -eq 11 ]; then\n    if [ ${array[1]} -gt 30 ] || [\
    \ ${array[1]} -lt 1 ]; then\n      echo \"false\"\n      return\n    fi\n  else\n\
    \    if [ ${array[1]} -gt 31 ] || [ ${array[1]} -lt 1 ]; then\n      echo \"false\"\
    \n      return\n    fi\n  fi\n  echo \"true\"", "\tyear=$(echo $1 | awk -F- '{print\
    \ $3}')\n\tmonth=$(echo $1 | awk -F- '{print $1}')\n\tday=$(echo $1 | awk -F-\
    \ '{print $2}')\n\tis_leap=$(is_leap_year $year)\n\tif [ $( echo \"$day < 1\"\
    \ | bc ) -eq 1 ] || [ $( echo \"$day > 31\" | bc ) -eq 1 ] || [ $( echo \"$month\
    \ < 1\" | bc ) -eq 1 ] || [ $( echo \"$month > 12\" | bc ) -eq 1 ] || [ $( echo\
    \ \"$year < 1000\" | bc ) -eq 1 ] || [ $( echo \"$year > 3000\" | bc ) -eq 1 ];\
    \ then\n\t\techo \"false\"\n\telif [ $month -eq 1 ] || [ $month -eq 3 ] || [ $month\
    \ -eq 5 ] || [ $month -eq 7 ] || [ $month -eq 8 ] || [ $month -eq 10 ] || [ $month\
    \ -eq 12 ]; then\n\t\tif [ $day -le 31 ]; then\n\t\t\techo \"true\"\n\t\telse\n\
    \t\t\techo \"false\"\n\t\tfi\n\telif [ $month -eq 4 ] || [ $month -eq 6 ] || [\
    \ $month -eq 9 ] || [ $month -eq 11 ]; then\n\t\tif [ $day -le 30 ]; then\n\t\t\
    \techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telif [ $month -eq 2\
    \ ]; then\n\t\tif [ $is_leap -eq 1 ]; then\n\t\t\tif [ $day -le 29 ]; then\n\t\
    \t\t\techo \"true\"\n\t\t\telse\n\t\t\t\techo \"false\"\n\t\t\tfi\n\t\telse\n\t\
    \t\tif [ $day -le 28 ]; then\n\t\t\t\techo \"true\"\n\t\t\telse\n\t\t\t\techo\
    \ \"false\"\n\t\t\tfi\n\t\tfi\n\tfi", '  [[ $1 =~ (^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$)
    ]] && date --date="$1" > /dev/null 2>&1', "    d=`echo $1 | tr -d ' '`\n    if\
    \ [[ $d =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n        d1=`echo $d | cut -d'-'\
    \ -f1`\n        d2=`echo $d | cut -d'-' -f2`\n        d3=`echo $d | cut -d'-'\
    \ -f3`\n        case $d1 in\n            01|03|05|07|08|10|12)\n             \
    \   if [[ $d2 -lt 1 || $d2 -gt 31 ]]; then\n                    echo false\n \
    \                   return\n                fi\n                ;;\n         \
    \   04|06|09|11)\n                if [[ $d2 -lt 1 || $d2 -gt 30 ]]; then\n   \
    \                 echo false\n                    return\n                fi\n\
    \                ;;\n            02)\n                if [[ $d2 -lt 1 || $d2 -gt\
    \ 29 ]]; then\n                    echo false\n                    return\n  \
    \              fi\n                ;;\n            *)\n                echo false\n\
    \                return\n                ;;\n        esac\n        echo true\n\
    \    else\n        echo false\n    fi", "  # your code here\n  return 1", "  [[\
    \ $1 =~ ^(0[1-9]|1[0-2])-[0-3][0-9]-[0-9]{4}$ ]] && {\n    d=${1##*-}\n    y=${d:0:4}\n\
    \    d=${d:4}\n    m=${1%%-*}\n    (( d <= 31 && m <= 12 && (d <= 30 || m == 1\
    \ || m == 3 || m == 5 || m == 7 || m == 8 || m == 10 || m == 12) && (d <= 29 ||\
    \ m != 2 || (y % 4 == 0 && y % 100 != 0) || y % 400 == 0) ))\n  }", "  [ -z \"\
    $1\" ] && return 1 || date_arr=(${1//-/ })\n  [ ${#date_arr[@]} -ne 3 ] && return\
    \ 1\n  [ ${date_arr[0]} -gt 12 ] && return 1\n  [ ${date_arr[0]} -eq 2 ] && [\
    \ ${date_arr[1]} -gt 29 ] && return 1\n  [ ${date_arr[0]} -eq 2 ] && [ ${date_arr[1]}\
    \ -eq 29 ] && [ $((${date_arr[2]} % 4)) -ne 0 ] && return 1\n  [ ${date_arr[0]}\
    \ -in {4,6,9,11} ] && [ ${date_arr[1]} -gt 30 ] && return 1\n  [ ${date_arr[0]}\
    \ -in {1,3,5,7,8,10,12} ] && [ ${date_arr[1]} -gt 31 ] && return 1\n  return 0",
  "  [[ \"$1\" =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-([0-9]{4})$ ]] &&\n  [[\
    \ $2 -le 31 && $2 -ge 1 ]] &&\n  [[ \"$1\" =~ (^(0[13578]|10|12)-(0[1-9]|[12][0-9]|3[01])-([0-9]{4})$)|(^(0[469]|11)-(0[1-9]|[12][0-9]|30)-([0-9]{4})$)|(^02-(0[1-9]|1[0-9]|2[0-8])-([0-9]{4})$)|(^(02-29)-([02468][048]|[13579][26])-([0-9]{4})$)|(^(02-29)-([0-9][0-9][0][48])-([0-9]{4})$)|(^(02-29)-([0-9][0-9][2468][048])-([0-9]{4})$)|(^(02-29)-([0-9][0-9][13579][26])-([0-9]{4})$)\
    \ ]]", "    echo \"$1\" | grep -E '^(((0[1-9]|[12]\\d|3[01])-(0[13578]|1[02])-[12]\\\
    d{3})|((0[1-9]|[12]\\d|30)-(0[469]|11)-[12]\\d{3})|((0[1-9]|1\\d|2[0-8])-02-[12]\\\
    d{3})|(29-02-[12](0[48]|[2468][048]|[13579][26])))$'", "  local input=$1\n  if\
    \ [ -z \"$input\" ]; then\n    echo \"false\"\n    return\n  fi\n  if [[ $input\
    \ =~ ^([0][1-9]|[1][0-2])-([0][1-9]|[1-2][0-9]|[3][0-1])-([0-9]{4})$ ]]; then\n\
    \    local mm=${BASH_REMATCH[1]}\n    local dd=${BASH_REMATCH[2]}\n    local yyyy=${BASH_REMATCH[3]}\n\
    \    if [ $mm -eq 2 ]; then\n      if [ $((yyyy % 4)) -eq 0 ]; then\n        if\
    \ [ $dd -le 29 ]; then\n          echo \"true\"\n          return\n        fi\n\
    \      else\n        if [ $dd -le 28 ]; then\n          echo \"true\"\n      \
    \    return\n        fi\n      fi\n    elif [ $mm -eq 4 ] || [ $mm -eq 6 ] ||\
    \ [ $mm -eq 9 ] || [ $mm -eq 11 ]; then\n      if [ $dd -le 30 ]; then\n     \
    \   echo \"true\"\n        return\n      fi\n    else\n      if [ $dd -le 31 ];\
    \ then\n        echo \"true\"\n        return\n      fi\n    fi\n  fi\n  echo\
    \ \"false\"", "  if [ -z \"$1\" ]; then\n    echo \"false\"\n    return\n  fi\n\
    \  if [[ ! \"$1\" =~ ^([0][1-9]|[1][0-2])\\-([0][1-9]|[1-2][0-9]|[3][0-1])\\-([0-9]{4})$\
    \ ]]; then\n    echo \"false\"\n    return\n  fi\n  month=$(echo \"$1\" | cut\
    \ -d- -f1)\n  day=$(echo \"$1\" | cut -d- -f2)\n  if [ \"$month\" -eq 1 ] || [\
    \ \"$month\" -eq 3 ] || [ \"$month\" -eq 5 ] || [ \"$month\" -eq 7 ] || [ \"$month\"\
    \ -eq 8 ] || [ \"$month\" -eq 10 ] || [ \"$month\" -eq 12 ]; then\n    if [ \"\
    $day\" -lt 1 ] || [ \"$day\" -gt 31 ]; then\n      echo \"false\"\n      return\n\
    \    fi\n  elif [ \"$month\" -eq 4 ] || [ \"$month\" -eq 6 ] || [ \"$month\" -eq\
    \ 9 ] || [ \"$month\" -eq 11 ]; then\n    if [ \"$day\" -lt 1 ] || [ \"$day\"\
    \ -gt 30 ]; then\n      echo \"false\"\n      return\n    fi\n  elif [ \"$month\"\
    \ -eq 2 ]; then\n    if [ \"$day\" -lt 1 ] || [ \"$day\" -gt 29 ]; then\n    \
    \  echo \"false\"\n      return\n    fi\n  fi\n  echo \"true\"", "  # Test for\
    \ empty\n  [ -z \"$1\" ] && return 1\n  local DATE_TO_VALIDATE=\"$1\"\n  local\
    \ DAY=\"${DATE_TO_VALIDATE:0:2}\"\n  local MONTH=\"${DATE_TO_VALIDATE:3:2}\"\n\
    \  local YEAR=\"${DATE_TO_VALIDATE:6:4}\"\n  local LEN_DAY=${#DAY}\n  local LEN_MONTH=${#MONTH}\n\
    \  local LEN_YEAR=${#YEAR}\n  local LEN_DATE=${#DATE_TO_VALIDATE}\n  local LEN_NUM=`echo\
    \ $DATE_TO_VALIDATE | grep -o '-' | wc -l`\n  local LEN_SLASH=`echo $DATE_TO_VALIDATE\
    \ | grep -o '/' | wc -l`\n  # Test for right length\n  [ $LEN_DAY -ne 2 ] && return\
    \ 1\n  [ $LEN_MONTH -ne 2 ] && return 1\n  [ $LEN_YEAR -ne 4 ] && return 1\n \
    \ [ $LEN_DATE -ne 10 ] && return 1\n  [ $LEN_NUM -ne 2 ] && return 1\n  [ $LEN_SLASH\
    \ -ne 0 ] && return 1\n  # Test for right months\n  [ $MONTH -gt 12 ] && return\
    \ 1\n  [ $MONTH -eq 1 ] && [ $DAY -gt 31 ] && return 1\n  [ $MONTH -eq 3 ] &&\
    \ [ $DAY -gt 31 ] && return 1\n  [ $MONTH -eq 5 ] && [ $DAY -gt 31 ] && return\
    \ 1\n  [ $MONTH -eq 7 ] && [ $DAY -gt 31 ] && return 1\n  [ $MONTH -eq 8 ] &&\
    \ [ $DAY -gt 31 ] && return 1\n  [ $MONTH -eq 10 ] && [ $DAY -gt 31 ] && return\
    \ 1\n  [ $MONTH -eq 12 ] && [ $DAY -gt 31 ] && return 1\n  [ $MONTH -eq 4 ] &&\
    \ [ $DAY -gt 30 ] && return 1\n  [ $MONTH -eq 6", "    if [[ -z $1 ]]; then\n\
    \        echo \"false\"\n        return 0\n    fi\n    local month=$(echo $1 |\
    \ cut -d'-' -f1)\n    local day=$(echo $1 | cut -d'-' -f2)\n    local year=$(echo\
    \ $1 | cut -d'-' -f3)\n    if [[ $month -lt 1 || $month -gt 12 ]]; then\n    \
    \    echo \"false\"\n        return 0\n    fi\n    if [[ $month == 1 || $month\
    \ == 3 || $month == 5 || $month == 7 || $month == 8 || $month == 10 || $month\
    \ == 12 ]]; then\n        if [[ $day -lt 1 || $day -gt 31 ]]; then\n         \
    \   echo \"false\"\n            return 0\n        fi\n    elif [[ $month == 4\
    \ || $month == 6 || $month == 9 || $month == 11 ]]; then\n        if [[ $day -lt\
    \ 1 || $day -gt 30 ]]; then\n            echo \"false\"\n            return 0\n\
    \        fi\n    elif [[ $month == 2 ]]; then\n        if [[ $day -lt 1 || $day\
    \ -gt 29 ]]; then\n            echo \"false\"\n            return 0\n        fi\n\
    \    fi\n    if [[ ${#year} -ne 4 ]]; then\n        echo \"false\"\n        return\
    \ 0\n    fi\n    echo \"true\"", '    [[ $1 =~ ^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-([0-9]{4})$
    ]] && date -d $1 > /dev/null && [[ $1 != $(date -d $1 +%m-%d-%Y) ]]', "  check_input\
    \ \"$1\"\n  check_date \"$1\"\n  check_month \"$1\"\n  check_day \"$1\"\n  check_year\
    \ \"$1\"", "    if [[ $1 =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then\n        echo\
    \ true\n    else\n        echo false\n    fi", "  if [[ \"$1\" =~ ^([0-2][0-9]|(3)[0-1])(\\\
    /)(((0)[0-9])|((1)[0-2]))(\\/)\\d{4}$ ]]; then\n    if [ $3 -eq 2 ]; then\n  \
    \    if [ $1 -gt 29 ] || [ $1 -eq 29 -a $2 -eq 2 -a $4%4 -ne 0 ]; then\n     \
    \   echo \"false\"\n      else\n        echo \"true\"\n      fi\n    elif [ $3\
    \ -eq 4 -o $3 -eq 6 -o $3 -eq 9 -o $3 -eq 11 ]; then\n      if [ $1 -gt 30 ];\
    \ then\n        echo \"false\"\n      else\n        echo \"true\"\n      fi\n\
    \    else\n      echo \"true\"\n    fi\n  else\n    echo \"false\"\n  fi", " \
    \   if [[ $1 =~ ^([0-9]{2})-([0-9]{2})-([0-9]{4})$ ]]; then\n        local day=${BASH_REMATCH[2]}\n\
    \        local month=${BASH_REMATCH[1]}\n        local year=${BASH_REMATCH[3]}\n\
    \        local max_days=31\n        if (( month == 2 )); then\n            max_days=29\n\
    \        elif (( month == 4 || month == 6 || month == 9 || month == 11 )); then\n\
    \            max_days=30\n        fi\n        if (( day >= 1 && day <= max_days\
    \ && month >= 1 && month <= 12 )); then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi", "  case \"$1\" in\n  \"\"|*[!0-9-]*|*-*-*-*|*-[0-9]-*|*-[0-9]*-[0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]|*-[0-9]*-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0"]
stop_tokens:
- "\n}"
