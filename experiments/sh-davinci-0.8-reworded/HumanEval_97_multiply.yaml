name: HumanEval_97_multiply
language: sh
prompt: "#!/bin/bash\n# Complete the function that takes two integers and returns\
  \ \n# the product of their unit digits.\n# Assume the input is always valid.\n#\
  \ Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\"\
  \ \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply\
  \ \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply()\
  \ {\n"
tests: "}\n\ncandidate() {\n    multiply \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"148\" \"412\") = \"16\" ]]\n    [[ $(candidate \"19\" \"28\") =\
  \ \"72\" ]]\n    [[ $(candidate \"2020\" \"1851\") = \"0\" ]]\n    [[ $(candidate\
  \ \"14\" \"-15\") = \"20\" ]]\n    [[ $(candidate \"76\" \"67\") = \"42\" ]]\n \
  \   [[ $(candidate \"17\" \"27\") = \"49\" ]]\n    [[ $(candidate \"0\" \"1\") =\
  \ \"0\" ]]\n    [[ $(candidate \"0\" \"0\") = \"0\" ]]\n}\n\nrun_test"
completions: ['    echo $((${1: -1} * ${2: -1}))', "    [ $# -ne 2 ] && { echo \"\
    usage: $0 integer integer\"; exit 1; }\n    echo $(( $(($1%10)) * $(($2%10)) ))",
  "    #TODO: Get the second last digit of integer $1\n    a=${1: -2:1}\n    #TODO:\
    \ Get the second last digit of integer $2\n    b=${2: -2:1}\n    #TODO: multiple\
    \ the two numbers\n    c=$(($a * $b))\n    echo \"$c\"", '  echo $(($1%10 * $2%10))',
  "  local _num1=$1\n  local _num2=$2\n  local _product=0\n  local _x=1\n  local _y=1\n\
    \  local _plus=0\n  local _sign=1\n  if [[ ${_num1:0:1} == \"-\" ]]; then\n  \
    \  _sign=$(($_sign * -1))\n    _num1=${_num1:1}\n  fi\n  if [[ ${_num2:0:1} ==\
    \ \"-\" ]]; then\n    _sign=$(($_sign * -1))\n    _num2=${_num2:1}\n  fi\n  while\
    \ [[ ! -z $_num1 || ! -z $_num2 ]]; do\n    if [[ -z $_num1 ]]; then\n      _x=0\n\
    \    else\n      _x=${_num1: -1}\n      _num1=${_num1::-1}\n    fi\n    if [[\
    \ -z $_num2 ]]; then\n      _y=0\n    else\n      _y=${_num2: -1}\n      _num2=${_num2::-1}\n\
    \    fi\n    _product=$(($_x * $_y + $_plus))\n    _plus=$(($_product / 10))\n\
    \    _product=$(($_product % 10))\n    _product=${_product}${_output}\n    _output=$_product\n\
    \  done\n  if [[ $_plus -gt 0 ]]; then\n    _product=${_plus}${_product}\n  fi\n\
    \  echo $(($_sign * $_product))", "  a=$(echo $1 | sed 's/\\-//g')\n  b=$(echo\
    \ $2 | sed 's/\\-//g')\n  echo $(expr $(expr $a % 10) \\* $(expr $b % 10))", " \
    \   result=`expr $1 \\* $2`\n    num=`echo $result | grep -o -E \"[0-9]\"`\n \
    \   echo $num", "  echo \"$1\" | egrep '^-?[0-9]+$' > /dev/null\n  if [[ $? -ne\
    \ 0 ]]; then\n    echo \"Warning: '$1' is not an integer.\"\n    return\n  fi\n\
    \  echo \"$2\" | egrep '^-?[0-9]+$' > /dev/null\n  if [[ $? -ne 0 ]]; then\n \
    \   echo \"Warning: '$2' is not an integer.\"\n    return\n  fi\n  echo $(( $(echo\
    \ \"$1\" | sed 's/-//') % 10 * $(echo \"$2\" | sed 's/-//') % 10 ))", "\techo\
    \ \"$1\" | sed -e 's/\\(.\\).*/\\1/' -e 's/\\(.\\).*/\\1/' | tr -d \"\\n\"\n\t\
    echo \"$2\" | sed -e 's/\\(.\\).*/\\1/' -e 's/\\(.\\).*/\\1/' | tr -d \"\\n\"",
  "    if [[ \"$1\" == *\"-\"* ]]; then\n        num1=$((10#${1//-/}))\n        num1=${num1:0:1}\n\
    \    else\n        num1=${1:0:1}\n    fi\n    if [[ \"$2\" == *\"-\"* ]]; then\n\
    \        num2=$((10#${2//-/}))\n        num2=${num2:0:1}\n    else\n        num2=${2:0:1}\n\
    \    fi\n    echo \"$((num1 * num2))\"", "    let \"a=$1%10\"\n    let \"b=$2%10\"\
    \n    let \"a*=b\"\n    echo \"$a\"", "  (( $1 == 0 || $2 == 0 )) && { echo 0;\
    \ return; }\n  let p=${1//-/}*${2//-/}\n  echo ${p: -1}", "  num1=$1\n  num2=$2\n\
    \  if [ $1 -lt 0 ]; then\n    num1=$((-1 * $1))\n  fi\n  if [ $2 -lt 0 ]; then\n\
    \    num2=$((-1 * $2))\n  fi\n  last_digit=$((num1 % 10))\n  last_digit2=$((num2\
    \ % 10))\n  echo $((last_digit * last_digit2))", "  echo \"$1 $2\" | sed 's/-//g'\
    \ | awk '{print $1 % 10 * $2 % 10}'", "    local num1=${1: -1}\n    local num2=${2:\
    \ -1}\n    (( num1 * num2 ))", "  # Write your code here\n  #\n  #\n  #\n  printf\
    \ \"%d\" $(($1 % 10 * $2 % 10))", '  # your solution here', "  echo $(echo $1$2\
    \ | awk '{print $1 % 10 * $2 % 10}')", "\t# Replace the 1st line with your code.\n\
    \tif [[ $1 == \"-\"* ]]; then\n\t\tif [[ $2 == \"-\"* ]]; then\n\t\t\techo \"\
    $(( ${1:1:1} * ${2:1:1} ))\"\n\t\telse\n\t\t\techo \"$(( ${1:1:1} * ${2:0:1} ))\"\
    \n\t\tfi\n\telse\n\t\tif [[ $2 == \"-\"* ]]; then\n\t\t\techo \"$(( ${1:0:1} *\
    \ ${2:1:1} ))\"\n\t\telse\n\t\t\techo \"$(( ${1:0:1} * ${2:0:1} ))\"\n\t\tfi\n\
    \tfi", '    echo "$(echo "$1" | tail -c 1)$(echo "$2" | tail -c 1)"']
stop_tokens:
- "\n}"
