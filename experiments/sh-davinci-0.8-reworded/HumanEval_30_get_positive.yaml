name: HumanEval_30_get_positive
language: sh
prompt: "#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive\
  \ \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5\
  \ 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"\
  ', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n"
tests: "}\n\ncandidate() {\n    get_positive \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"-1 -2 4 5 6\") = \"4 5 6\" ]]\n    [[ $(candidate \"5 3 -5\
  \ 2 3 3 9 0 123 1 -10\") = \"5 3 2 3 3 9 123 1\" ]]\n    [[ $(candidate \"-1 -2\"\
  ) = \"\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n}\n\nrun_test"
completions: ["  echo \"$1\" | tr \" \" \"\\n\" | egrep \"^[0-9]+$\" | tr \"\\n\"\
    \ \" \" | sed 's/^ *//g' | sed 's/ *$//g'", '    _get_numbers_with_sign $1 "positive"',
  "    local result=\"\"\n    local n\n\n    for n in $(echo $1); do\n        if [\
    \ $n -ge 0 ]; then\n            result=\"$result \\\"$n\\\"\"\n        fi\n  \
    \  done\n\n    echo \"[$result]\"", "    local __resultvar=$1\n\n    local numbers=($2)\n\
    \    local result_numbers=()\n    for number in \"${numbers[@]}\"; do\n      \
    \  if (( number > 0 )); then\n            result_numbers+=(\"$number\")\n    \
    \    fi\n    done\n\n    stringify_array __resultvar[@] result_numbers[@]", " \
    \ echo $1 | awk '{for(i=1;i<=NF;i++)if($i>0)print $i}'", "  local -a items=\"\
    ${1// /|}\"\n  if [ ${#items[@]} -ne 0 ]; then\n    # Return only positive numbers.\n\
    \    for item in ${items[@]}; do\n      if [[ ${item} -gt 0 ]]; then\n       \
    \ printf '\"%s\" ' \"${item}\"\n      fi\n    done\n  fi", "  local result=\"\"\
    \n  for i in $1; do\n    if [ $i -gt 0 ]; then\n      result+=\" \\\"$i\\\"\"\n\
    \    fi\n  done\n  echo \"$result\"", "    local __resultvar=$1\n    local numbers=$2\n\
    \    local res\n    for n in $numbers; do\n        if [ $n -ge 0 ]; then\n   \
    \         res=\"$res $n\"\n        fi\n    done\n    eval $__resultvar=\"['$res']\"",
  "    # shellcheck disable=SC2086\n    echo \"$1\" | sed -n 's/^\\(.*\\)\\s\\([0-9]\\\
    +\\)\\s\\(.*\\)$/\\1 \"\\2\" \\3/p' | awk '{print \"\\\"\"$0\"\\\"\"}' | tr '\\\
    n' ',' | sed 's/,$//'", "  echo \"$1\" | tr ' ' '\\n' | grep -v '^-.*' | tr '\\\
    n' ' ' | sed 's/\\s*$//'", "    number_list=($1)\n    positive_list=()\n    for\
    \ n in ${number_list[@]}; do\n        if [ $n -ge 0 ]; then\n            positive_list+=(\"\
    $n\")\n        fi\n    done\n    echo \"${positive_list[@]}\"", "  local input=($1)\n\
    \  local output=()\n  for item in \"${input[@]}\"; do\n    [[ $item -ge 0 ]] &&\
    \ output+=($item)\n  done\n  echo \"${output[@]}\"", "    local _array\n    read\
    \ -r -a _array <<< \"$1\"\n    local _positive_array\n    for n in \"${_array[@]}\"\
    ; do\n        if [ \"$n\" -ge 0 ]; then\n            _positive_array+=(\"$n\"\
    )\n        fi\n    done\n    echo ${_positive_array[@]}", '    echo "[$(get_positive_impl
    "$1")]"', "    local RESULT=()\n    for ITEM in $1; do\n        (( ITEM > 0 ))\
    \ && RESULT+=(\"$ITEM\")\n    done\n    echo \"${RESULT[@]}\"", "  awk 'BEGIN\
    \ {\n    OFS=\" \"\n  }\n  {\n    for (i = 1; i <= NF; i++) {\n      if ($i >\
    \ 0) {\n        print $i\n      }\n    }\n  }' <<< \"$1\"", "    local out=[]\n\
    \    for i in $1; do\n        if [[ $i =~ ^- ]]; then\n            continue\n\
    \        fi\n        out+=(\"\\\"$i\\\"\")\n    done\n    echo \"${out[@]}\"",
  '  _get_numbers "$1" "([[:digit:]]+)"', "    local __res=$(get_numbers $1)\n   \
    \ local __var=$(echo $__res | awk '{\n        while (match($0, \"[[:digit:]]+\
    \ *\") > 0) {\n            num = substr($0, RSTART, RLENGTH);\n            if\
    \ (num > 0) {\n                printf(\"\\\"%s\\\" \", num);\n            }\n\
    \            $0 = substr($0, RSTART + RLENGTH);\n        }\n    }')\n    # strip\
    \ final space\n    echo \"${__var%?}\"", "    if [[ -z \"$1\" ]]; then\n     \
    \   return 0\n    fi\n    local output\n    for arg in $1; do\n        if [[ $arg\
    \ -gt 0 ]]; then\n            output=\"$output \\\"$arg\\\"\"\n        fi\n  \
    \  done\n    echo \"[$output]\""]
stop_tokens:
- "\n}"
