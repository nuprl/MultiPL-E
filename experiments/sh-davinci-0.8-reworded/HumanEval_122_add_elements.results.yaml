language: sh
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=\"${1}\"\n    local k=\"${2}\"\n    local arr_len=\"$(echo\
    \ \"${arr}\" | wc -w)\"\n    local sum=0\n    for i in ${arr}; do\n        if\
    \ [[ \"${i}\" -ge 10 && \"${i}\" -lt 100 ]]; then\n            sum=$((sum + i))\n\
    \        fi\n    done\n    echo \"${sum}\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    echo \"${1}\" |\n    tr \" \" \"\\n\" |\n    head -n \"${2}\" |\n   \
    \ grep -E \"^[0-9]{1,2}$\" |\n    paste -sd+ |\n    bc\n}\n\ncandidate() {\n \
    \   add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    arr=($1)\n    k=$2\n    sum=0\n    for i in $(seq 0 $(($k-1))); do\n\
    \        num_digits=$(echo \"${arr[$i]}\" | wc -c)\n        if [ $num_digits -le\
    \ 2 ]; then\n            sum=$(($sum + ${arr[$i]}))\n        fi\n    done\n  \
    \  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Create a variable containing the value of the 2nd parameter\n    num=$2\n\
    \    # Create a variable that will hold the sum\n    sum=0\n    # Create a variable\
    \ that will hold the substrings\n    sub=0\n    # Create a variable that will\
    \ hold the index\n    i=0\n    # Create a variable containing the value of the\
    \ 1st parameter\n    arr=\"$1\"\n    # Loop through the list\n    while IFS='\
    \ ' read -ra ADDR; do\n        # Check if the string is at most 2 digits long\n\
    \        if [[ ${#ADDR[$i]} -le 2 ]]; then\n            # Add the value of the\
    \ string to the sum\n            sum=$((sum + ADDR[$i]))\n        fi\n       \
    \ # Increment the index\n        i=$((i + 1))\n        # Exit the loop if the\
    \ index is equal to the value of the 2nd parameter\n        [[ $i -eq \"$num\"\
    \ ]] && break\n    done <<< \"$arr\"\n    # Return the sum\n    echo \"$sum\"\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -a space_separated_list=(${1// / })\n  local -i k=$2\n  local -i\
    \ sum=0\n  for ((i=0; i<k; i++)); do\n    if [[ ${space_separated_list[i]} =~\
    \ ^[0-9]{1,2}$ ]]; then\n      sum+=${space_separated_list[i]}\n    fi\n  done\n\
    \  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # filter first $2 elements of array that are equal or greater than 10\n\
    \    # and less than 100 and sum them\n    echo \"$1\" | cut -d' ' -f1-$2 | grep\
    \ -E \"^[1-9][0-9]{1,2}$\" | paste -sd+ | bc\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # To get the first element with at most two digits,\n    # select the\
    \ first two digits with regex '^[0-9]{2}'\n    # This regex matches the first\
    \ two digits.\n    # Because the regex uses '^', it will only match the\n    #\
    \ first two digits.  This is important because\n    # the regex will stop matching\
    \ once there are no more digits\n    # to match.  Without the '^', the regex will\
    \ not stop.\n\n    # To get the second element with at most two digits,\n    #\
    \ select the next two digits with regex '[0-9]{2}'\n    # This regex matches the\
    \ next two digits\n    # without a '^' for the same reason as above.\n\n    #\
    \ If an element has only one digit, it is not included in the sum.\n    # If an\
    \ element has more than two digits, it is not included in the sum.\n    # To match\
    \ an element with only one digit or with more than two digits,\n    # use regex\
    \ [0-9]{1,3}\n    # This regex matches a digit 1 to 3 times.\n    # The results\
    \ are filtered out because the results are not captured\n    # with parenthesis.\n\
    \n    arr=($1)\n    echo \"${arr[@]}\" | awk -v k=$2 '\n    BEGIN {\n        sum\
    \ = 0\n    }\n    {\n        for (i = 1; i <= k; i++) {\n            if (match($i,\
    \ \"^[0-9]{2}\") != 0) {\n                sub(/^[0-9]{2}/, \"\", $i)\n       \
    \         sum += substr($i, 1, 2)\n            } else if (match($i, \"[0-9]{2}\"\
    ) != 0) {\n                sub(/[0-9]{2}/, \"\", $i)\n                sum += substr($i,\
    \ 1, 2)\n            } else if (match($i, \"[0-9]{1,3}\") != 0) {\n          \
    \      sub(/[0-9]{1,3}/, \"\", $i)\n            }\n        }\n    }\n    END {\n\
    \        print sum\n    }'\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  declare -a arr=(\"$@\")\n  #echo \"${arr[@]}\"\n  k=${arr[-1]}\n  unset\
    \ arr[-1]\n  num_arr=($(for num in ${arr[@]}; do\n    num_str=\"$num\"\n    if\
    \ [[ ${#num_str} -gt 2 ]]; then\n      num_str=\"$(echo $num_str | cut -c 1-2)\"\
    \n    fi\n    echo \"$num_str\"\n  done))\n  echo \"${num_arr[@]}\"\n  sum=0\n\
    \  for i in ${num_arr[@]:0:$k}; do\n    sum=$((sum + i))\n  done\n  echo \"$sum\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -n array=$1\n  local k=$2\n  local sum=0\n  for ((i=0; i<k; i++));\
    \ do\n    local element=${array[i]}\n    if ((element<100 && element>9)); then\n\
    \      ((sum+=element))\n    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n   \
    \ add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp48ysy3mi.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Add your implementation here\n    arr=$1\n    k=$2\n    result=\"\"\
    \n    for a in $arr; do\n        if [ ${#a} -le 2 ]; then\n            if [ -z\
    \ $result ]; then\n                result=$a\n            else\n             \
    \   result=$((result + a))\n            fi\n        fi\n        let k--\n    \
    \    if [ $k -eq 0 ]; then\n            break\n        fi\n    done\n    echo\
    \ $result\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -n arr=$1\n    local k=$2\n    local sum=0\n    local i=0\n   \
    \ while [[ $i -lt $k ]]; do\n        local item=${arr[$i]}\n        if [[ $item\
    \ -lt 100 ]]; then\n            sum=$((sum + item))\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgvpnsx5q.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -n _input=(\"$1\")\n    local sum=0\n    for element in \"${_input[@]:0:$2}\"\
    ; do\n        if [[ $element -ge 10 && $element -lt 100 ]]; then\n           \
    \ ((sum+=element))\n        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4p0z0qet.sh: line 14: local: _input: reference variable cannot
    be an array

    /tmp/tmp4p0z0qet.sh: line 17: [[: 1 -2 -3 41 57 76 87 88 99: syntax error in expression
    (error token is "41 57 76 87 88 99")

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -a numbers=(${1// / })\n    local -i k=$2\n    local -i sum=0\n\
    \    local -i i\n    for ((i=0; i<k; i++)); do\n        local -i num=${numbers[$i]}\n\
    \        if [[ $num -ge 100 ]]; then\n            sum=$((sum + num))\n       \
    \ elif [[ $num -ge 10 ]]; then\n            sum=$((sum + num))\n        else\n\
    \            sum=$((sum + num))\n        fi\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -r _arr=$1\n    local -r _k=$2\n    local _result=0\n    for ((\
    \ _i=0; _i<_k; _i++ )); do\n        local _elem=$(echo $_arr | cut -d' ' -f$((_i+1)))\n\
    \        if [[ $_elem -ge 10 && $_elem -lt 100 ]]; then\n            _result=$((_result+_elem))\n\
    \        fi\n    done\n    echo $_result\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local list=($1)\n    local k=$2\n    local result=0\n    local list_length=${#list[@]}\n\
    \    if [ $list_length -le $k ]; then\n        k=$list_length\n    fi\n    for\
    \ i in $(seq 1 $k); do\n        local number=${list[$i]}\n        if [ $number\
    \ -gt 99 ]; then\n            result=$((result + $number))\n        fi\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    local k=$2\n  \
    \  local i\n    local sum=0\n    for ((i=0; i<k; i++)); do\n        if [ ${#arr[i]}\
    \ -le 2 ]; then\n            ((sum += arr[i]))\n        fi\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    declare -a arr=(${1// / })\n    sum=0\n    len=\"${#arr[@]}\"\n    k=$2\n\
    \    if [[ $k -lt 1 || $k -gt $len ]]; then\n        return\n    fi\n    for ((\
    \ i=0; i<k; i++ )); do\n        (( \"${#arr[$i]}\" < 3 )) && sum=$((sum+arr[$i]))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local elements=\"$1\"\n    local count=\"$2\"\n    local result=0\n \
    \   local i=0\n    local number\n\n    for number in $elements; do\n        if\
    \ [ $i -eq $count ]; then\n            break\n        fi\n\n        if [ \"${#number}\"\
    \ -le 2 ]; then\n            result=$(( result + number ))\n        fi\n\n   \
    \     i=$(( i + 1 ))\n    done\n\n    echo \"$result\"\n}\n\ncandidate() {\n \
    \   add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  sum=0\n  IFS=' ' read -r -a array <<< \"$1\"\n  for el in \"${array[@]:0:$2}\"\
    ; do\n    if [ ${#el} -le 2 ]; then\n      sum=$((sum + el))\n    fi\n  done\n\
    \  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    declare -a arr=()\n    for i in $1; do\n        arr+=($i)\n    done\n\
    \    total=0\n    for (( i=0; i<$2; i++ )); do\n        if [ ${#arr[$i]} -le 2\
    \ ]; then\n            total=$(( total + arr[$i] ))\n        fi\n    done\n  \
    \  echo $total\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local add=0\n    for num in $1; do\n        if [[ ${#num} -gt 2 ]]; then\n\
    \            continue\n        fi\n        add=$((add + num))\n    done\n    echo\
    \ $add\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local res=\"0\"\n  local arr=($1)\n  local k=$2\n  local len=${#arr[@]}\n\
    \  local i\n  for ((i=0; i<len; i++)); do\n    local val=${arr[$i]}\n    local\
    \ num=$(echo \"$val\" | tr -d '[:alpha:]' | tr -d '[:punct:]' | tr -d '[:space:]')\n\
    \    if [[ $num =~ ^-?[0-9]+$ ]]; then\n      if [[ ${#num} -le 2 ]]; then\n \
    \       res=$((res + num))\n      fi\n    fi\n    if [[ $i -eq $((k-1)) ]]; then\n\
    \      break\n    fi\n  done\n  echo \"$res\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr=$1\n  local k=$2\n  local sum=0\n  local i=0\n  for element in\
    \ $arr; do\n    if [[ $i -lt $k ]]; then\n      if [[ $element -lt 100 ]]; then\n\
    \        sum=$(( sum + element ))\n      fi\n    fi\n    i=$(( i + 1 ))\n  done\n\
    \  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Declare an array\n    declare -a arr=$1\n\n    # Declare a variable\n\
    \    k=$2\n\n    # Print the array\n    # echo \"${arr[@]}\"\n\n    # Print the\
    \ variable\n    # echo \"$k\"\n\n    # Get the sum\n    sum=0\n    for element\
    \ in ${arr[@]}; do\n        if [ ${#element} -le 2 ]; then\n            sum=$((\
    \ sum + element ))\n        fi\n    done\n\n    # Print the sum\n    echo \"$sum\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    if [ \"$1\" == \"\" ] || [ \"$2\" == \"\" ]; then\n        echo \"You\
    \ must provide a space-separated list and an integer\"\n        return 1\n   \
    \ fi\n    local elements=\"$1\"\n    local k=\"$2\"\n    local i=0\n    local\
    \ sum=0\n    for element in $elements; do\n        if [ $i -ge $k ]; then\n  \
    \          break\n        fi\n        # If element has at most two digits\n  \
    \      if [[ $element =~ ^-?[0-9]{1,2}$ ]]; then\n            # Add it to the\
    \ sum\n            sum=$(( sum + element ))\n        fi\n        i=$(( i + 1 ))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # Function body starts\n  local array=(\"$@\")\n  local k=\"${array[@]:(-1)}\"\
    \n  array=(\"${array[@]:0:${#array[@]}-1}\")\n  local result=0\n  local len=\"\
    ${#array[@]}\"\n  local var\n  for ((i=0; i<k; i++)); do\n    var=\"${array[i]}\"\
    \n    if [ ${#var} -lt 3 ]; then\n      result=$((result+var))\n    fi\n  done\n\
    \  echo \"$result\"\n  # Function body ends\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local k=$2 i=0 sum=0\n\n  while (( i < k )); do\n    local element=${1%%\
    \ *}\n    [[ ${#element} -le 2 ]] && (( sum += element ))\n    1=${1#* }\n   \
    \ (( i++ ))\n  done\n\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4chpdsa9.sh: line 19: 1=-2: command not found

    /tmp/tmp4chpdsa9.sh: line 19: 1=-2: command not found

    /tmp/tmp4chpdsa9.sh: line 19: 1=-2: command not found

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    { echo $1 | awk -v n=$2 '{ for (i=1; i<=n; i++) { if ($i < 100) sum +=\
    \ $i } } END { print sum }'; } 2>/dev/null\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    arr=($1)\n    k=$2\n    sum=0\n    for (( i=0; i<k; i++ )); do\n    \
    \    if [[ \"${arr[$i]}\" =~ ^[0-9]{1,2}$ ]]; then\n            sum=$((sum + arr[$i]))\n\
    \        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # The SED regexp is to remove all non-numbers from the string\n  # The\
    \ TR command is to remove spaces and tabs\n  echo \"$1\" | sed -e 's/[^0-9]//g'\
    \ | tr -d '[:space:]' | cut -c-2 | paste -sd+ - | bc\n}\n\ncandidate() {\n   \
    \ add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  arr=($1)\n  k=$2\n  sum=0\n  for i in $(seq 0 $(( $k - 1 ))); do\n    if\
    \ [[ ${arr[$i]} -le 99 ]]; then\n      sum=$(( sum + ${arr[$i]} ))\n    fi\n \
    \ done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local result=\"0\"\n    local elements=( $1 )\n    if [[ $2 =~ ^[0-9]+$\
    \ ]]; then\n        for i in $(seq 0 $(( $2 - 1 ))); do\n            local number=${elements[$i]}\n\
    \            if [[ $number =~ ^[0-9]{1,2}$ ]]; then\n                result=$((\
    \ $result + $number ))\n            fi\n        done\n    fi\n    echo \"$result\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    array=(\"$@\")\n    count=\"${array[0]}\"\n    array=(${array[@]:1})\n\
    \    sum=0\n    for i in $(seq 1 $count); do\n        elem=\"${array[$((i-1))]}\"\
    \n        if [[ $elem -lt 100 ]]; then\n            sum=$((sum + elem))\n    \
    \    fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "seq: extra operand \u2018-3\u2019\nTry 'seq --help' for more information.\n"
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  arr=($1)\n  k=$2\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[$i]}\
    \ -gt 99 ]]; then\n      arr[$i]=0\n    else\n      echo ${arr[$i]}\n    fi\n\
    \  done\n  echo $((${arr[@]:0:$k}))\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Parse input string into array\n    set -f\n    arr=($1)\n    # Set\
    \ cut-off to second argument\n    cutoff=$2\n    # This is an empty array\n  \
    \  sol=\"\"\n    # Add up first k elements\n    for (( i=0; i<$cutoff; i++ ))\n\
    \    do\n        # If the element is a single digit or two digits\n        if\
    \ [[ $(( ${arr[$i]} )) -lt 100 ]]\n        then\n            # Add to solution\n\
    \            sol=$(( sol + ${arr[$i]} ))\n        fi\n    done\n    # Return solution\n\
    \    echo $sol\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 2
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  [[ $# -ne 2 ]] && echo \"Usage: $0 a_space_separated_list an_integer\"\
    \ && exit 1\n  [[ ! \"$1\" =~ ^[0-9 ]+$ ]] && echo \"Error: list '$1' should contain\
    \ only integers\" && exit 1\n  [[ ! \"$2\" =~ ^[0-9]+$ ]] && echo \"Error: '$2'\
    \ should be an integer\" && exit 1\n  [[ \"$2\" -gt \"$(echo \"$1\" | wc -w)\"\
    \ ]] && echo \"Error: '$2' should be smaller than the list size\" && exit 1\n\
    \  IFS=' ' read -ra ARR <<< \"$1\"\n  for (( i=0; i<$2; i++ )); do\n    ELEMENT=${ARR[$i]}\n\
    \    [[ \"$ELEMENT\" -lt 100 ]] && SUM=$(( SUM + ELEMENT ))\n  done\n  echo \"\
    $SUM\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7y1kn2ym.sh: line 15: syntax error in conditional expression

    /tmp/tmp7y1kn2ym.sh: line 15: syntax error near `]+$''

    /tmp/tmp7y1kn2ym.sh: line 15: `  [[ ! "$1" =~ ^[0-9 ]+$ ]] && echo "Error: list
    ''$1'' should contain only integers" && exit 1''

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    IFS=' '\n    sum=0\n    read -a arr <<< \"$1\"\n    # Loop through the\
    \ array of elements\n    for i in \"${arr[@]}\"\n    do\n        digits=$(echo\
    \ \"$i\" | awk '{ print length($0) }')\n        if [ \"$digits\" -lt 3 ]\n   \
    \     then\n            sum=$((sum + i))\n        fi\n    done\n    echo \"$sum\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=0\n\n  # Iterate through each element of the array, adding to\
    \ $sum if it is less than 100\n  for elem in $1; do\n    if [ \"$elem\" -lt 100\
    \ ]; then\n      sum=$((sum + elem))\n    fi\n  done\n\n  echo \"$sum\"\n}\n\n\
    candidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=0\n  for e in $1; do\n    if [[ \"$e\" -lt 10 || \"$e\" -lt 100\
    \ ]]; then\n      ((sum += e))\n    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n    echo \"Inputs are required\"\
    \ >&2\n    return 1\n  fi\n\n  # 1. First, assign the first k elements of arr\
    \ to a list.\n  # 2. Filter the list by only taking the numbers with at most two\
    \ digits.\n  # 3. Finally, sum the filtered list.\n  echo \"$1\" | cut -d ' '\
    \ -f -\"$2\" | grep -E '^[0-9]{1,2}$' | paste -sd+ - | bc\n}\n\ncandidate() {\n\
    \    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  echo \"$1\" | awk -v k=\"$2\" '\n    {for (i=1; i<=k; i++) {\n      if\
    \ (length($i) <= 2) {\n        sum += $i\n      }\n    }}\n    END {print sum}\n\
    \  '\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    if [[ ${#1} -lt 1 || ${#2} -lt 1 ]]; then\n        echo \"Usage: add_elements\
    \ \\$arr \\$k\"\n        echo \"\\$arr is a space-separated list of integers\"\
    \n        echo \"\\$k is an integer\"\n        exit 1\n    fi\n    local IFS=$'\
    \ '\n    local arr=($1)\n    local k=$2\n    sum=0\n    for ((i=0; i<$k; i++));\
    \ do\n        if [[ ${#arr[$i]} -lt 3 ]]; then\n            sum=$((sum + arr[$i]))\n\
    \        fi\n    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -n _arr_list=$1\n    _arr_list=($_arr_list)\n    echo ${_arr_list[@]}\
    \ | tr ' ' '\\n' | head -n $2 | grep -e '[0-9]\\{1,2\\}' | sed 's/\\([0-9]\\{1,2\\\
    }\\)/+\\1/g' | bc\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbalkai5t.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -a elements\n  mapfile -t elements <<< \"${1// /$'\\n'}\"\n  local\
    \ -i counter\n  counter=0\n  local -i sum\n  sum=0\n  for element in \"${elements[@]}\"\
    ; do\n    (( counter++ ))\n    local -i curr_element\n    curr_element=\"${element//[^0-9]/}\"\
    \n    (( ${#curr_element} < 3 )) && (( sum += curr_element ))\n    (( counter\
    \ == $2 )) && break\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  echo \"$1\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' ' | cut -d ' ' -f -$2\
    \ | awk '{sum += $1} END {print sum}'\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local total=0\n    for n in $1; do\n        if [[ \"$2\" -gt 0 ]]; then\n\
    \            if [[ \"$n\" -lt \"100\" ]]; then\n                ((total+=n))\n\
    \            fi\n            ((2--))\n        fi\n    done\n    echo \"$total\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error
    token is "-")

    /tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error token
    is "-")

    /tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error token
    is "-")

    /tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error token
    is "-")

    /tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error token
    is "-")

    /tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error token
    is "-")

    /tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error token
    is "-")

    /tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error token
    is "-")

    /tmp/tmplch_l6_5.sh: line 20: ((: 2--: syntax error: operand expected (error token
    is "-")

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    echo \"$1\" | cut -d ' ' -f -$2 | awk '{if ($1 > 99) print $1; else if\
    \ ($1 > 9) print $1; else print 0}' | paste -sd+ | bc\n}\n\ncandidate() {\n  \
    \  add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  for i in $1; do\n    if [[ ${#i} -gt 2 ]]; then\n      i=\"0\"\n    fi\n\
    \    echo -n \"$i \"\n  done | awk '{print $1+$2+$3+$4+$5+$6+$7+$8+$9+$10}'\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local total=0\n    local i=0\n\
    \    for el in $arr; do\n        if [[ $el -lt 100 ]]; then\n            ((total=total+el))\n\
    \        fi\n        ((i=i+1))\n        if [[ $i -ge $k ]]; then\n           \
    \ break\n        fi\n    done\n    echo \"$total\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -n arr=\"$1\"\n  local k=\"$2\"\n  local a\n  local b\n  local c\n\
    \  local result\n  local two_digits\n  a=\"${arr%% *}\"\n  arr=\"${arr#* }\"\n\
    \  if [[ \"${#a}\" -le 2 ]]; then\n    let result+=\"$a\"\n  fi\n  k=\"$((k-1))\"\
    \n  if [[ \"$k\" -le 0 ]]; then\n    echo \"$result\"\n    return\n  fi\n  b=\"\
    ${arr%% *}\"\n  arr=\"${arr#* }\"\n  if [[ \"${#b}\" -le 2 ]]; then\n    let result+=\"\
    $b\"\n  fi\n  k=\"$((k-1))\"\n  if [[ \"$k\" -le 0 ]]; then\n    echo \"$result\"\
    \n    return\n  fi\n  c=\"${arr%% *}\"\n  arr=\"${arr#* }\"\n  if [[ \"${#c}\"\
    \ -le 2 ]]; then\n    let result+=\"$c\"\n  fi\n  k=\"$((k-1))\"\n  if [[ \"$k\"\
    \ -le 0 ]]; then\n    echo \"$result\"\n    return\n  fi\n  for two_digits in\
    \ $arr; do\n    if [[ \"${#two_digits}\" -le 2 ]]; then\n      let result+=\"\
    $two_digits\"\n    fi\n    k=\"$((k-1))\"\n    if [[ \"$k\" -le 0 ]]; then\n \
    \     break\n    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm2ww5444.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    /tmp/tmpm2ww5444.sh: line 24: let: result+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpm2ww5444.sh: line 34: let: result+=: syntax error: operand expected (error
    token is "+=")

    /tmp/tmpm2ww5444.sh: line 44: let: result+=: syntax error: operand expected (error
    token is "+=")

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # split $1 into array\n    IFS=' ' read -r -a array <<< $1\n    # convert\
    \ $2 to integer\n    k=${2#0}\n    sum=0\n    for i in $(seq 0 $((k-1))); do\n\
    \        # if $i has at most two digits\n        if [ ${#array[$i]} -le 2 ]; then\n\
    \            # add $i to sum\n            sum=$((sum + array[$i]))\n        fi\n\
    \    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") =\
    \ \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n   \
    \ [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # your code goes here\n  read -r -a arr <<< \"$1\"\n  sum=0\n  for i in\
    \ \"${arr[@]}\"; do\n    if [[ $i -lt 100 ]]; then\n      ((sum+=i))\n    fi\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") =\
    \ \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n   \
    \ [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr=($1)\n  local k=$2\n  local sum=0\n  local i=0\n  while [ $i\
    \ -lt $k ]; do\n    local val=${arr[$i]}\n    if [[ $val =~ ^[0-9]+$ ]]; then\n\
    \      if [ ${#val} -le 2 ]; then\n        sum=$((sum + val))\n      fi\n    fi\n\
    \    ((i++))\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  echo \"$1\" | awk '{print $1; print $2; print $3; print $4}' |\n    awk\
    \ '{ a += $1; b += $2; c += $3; d += $4 } END { print a+b+c+d }'\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local list=\"$1\"\n    local k=\"$2\"\n    local n=0\n    local sum=0\n\
    \    local x\n\n    for x in $list; do\n        # read -a array <<< $(echo \"\
    $x\")\n        if [ ${#x} -le 2 ]; then\n            sum=$(( sum + x ))\n    \
    \    fi\n        if [ $n -eq $k ]; then\n            break\n        fi\n     \
    \   n=$(( n + 1 ))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    declare -a A\n    A=($1)\n    k=$2\n    B=(\"${A[@]:0:$k}\")\n    sum=0\n\
    \    for i in \"${B[@]}\"; do\n        if [[ $i =~ ^-?[0-9]{1,2}$ ]]; then\n \
    \           sum=$((sum + i))\n        fi\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local inputs=\"$1\"\n    local k=\"$2\"\n    local inputs=(${inputs//\
    \ / })\n    local sum=0\n    for ((i=0; i<k; i++)); do\n        if [[ ${#inputs[i]}\
    \ -le 2 ]]; then\n            sum=$((sum + inputs[i]))\n        fi\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=0\n  for e in $1; do\n    if [ ${#e} -le 2 ]; then\n      sum=$((sum\
    \ + e))\n    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    if [ $# -ne 2 ]; then\n        echo \"Usage: add_elements \\\"1 2 3 4\\\
    \" \\\"2\\\"\"\n        return 1\n    fi\n    for i in $(echo $1); do\n      \
    \  if ! [[ $i =~ ^[0-9]+$ ]]; then\n            echo \"All inputs must be integers.\
    \ See 'help add_elements'\"\n            return 1\n        fi\n    done\n    if\
    \ ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"All inputs must be integers. See\
    \ 'help add_elements'\"\n        return 1\n    fi\n    if [ $2 -gt $(echo $1 |\
    \ wc -w) ]; then\n        echo \"k cannot be greater than length of arr. See 'help\
    \ add_elements'\"\n        return 1\n    fi\n    sum=0\n    count=0\n    for i\
    \ in $(echo $1); do\n        if [ ${#i} -gt 2 ]; then\n            continue\n\
    \        fi\n        if [ $count -eq $2 ]; then\n            break\n        fi\n\
    \        ((sum += i))\n        ((count++))\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  arr=(${1// / })\n  k=$2\n  sum=0\n  for i in ${arr[@]:0:$k}; do\n    if\
    \ [ ${#i} -gt 2 ]; then\n      continue\n    fi\n    sum=$((sum + i))\n  done\n\
    \  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  sum=0\n  for n in $1; do\n    if [[ $2 -lt 1 ]]; then\n      break\n  \
    \  fi\n    if [[ ${#n} -le 2 ]]; then\n      sum=$((sum + n))\n    fi\n    2=$((2\
    \ - 1))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"\
    3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n\
    \    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    /tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    /tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    /tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    /tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    /tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    /tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    /tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    /tmp/tmpud17pc6q.sh: line 22: 2=1: command not found

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 2
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    if [[ ! \"$1\" =~ ^[0-9 ]+$ ]]; then\n        echo \"Invalid input\"\n\
    \        return\n    fi\n    if [[ ! \"$2\" =~ ^[0-9]+$ ]]; then\n        echo\
    \ \"Invalid input\"\n        return\n    fi\n    if [[ $2 -le 0 ]]; then\n   \
    \     echo \"Invalid input\"\n        return\n    fi\n    # k is equal to the\
    \ length of the input\n    # array if k is greater than the length of\n    # the\
    \ input array\n    local k=$2\n    if [[ $k -gt \"$(echo \"$1\" | wc -w)\" ]];\
    \ then\n        k=$(echo \"$1\" | wc -w)\n    fi\n    local i=0\n    local sum=0\n\
    \    for item in $1; do\n        if [[ $i -ge $k ]]; then\n            break\n\
    \        fi\n        if [[ $item -lt 10 || $item -gt 99 ]]; then\n           \
    \ sum=$((sum + item))\n        fi\n        i=$((i + 1))\n    done\n    echo \"\
    $sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo2cr0_1t.sh: line 14: syntax error in conditional expression

    /tmp/tmpo2cr0_1t.sh: line 14: syntax error near `]+$''

    /tmp/tmpo2cr0_1t.sh: line 14: `    if [[ ! "$1" =~ ^[0-9 ]+$ ]]; then''

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local sum=0\n    local IFS=$' '\n    local arr=($1)\n    local n=$2\n\
    \    local i\n    for ((i=0; i<n; i++)); do\n        if [ ${#arr[i]} -gt 2 ];\
    \ then\n            continue\n        fi\n        sum=$((sum + arr[i]))\n    done\n\
    \    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Initialize the list of elements and the element counter to 0\n    elem_list=''\n\
    \    elem_count=0\n    for i in $1; do\n        # If the element counter is equal\
    \ to $2, the function can stop\n        if [ $elem_count -eq $2 ]; then\n    \
    \        break\n        fi\n        # If the length of the string $i is 2 or less\
    \ and the\n        # element is not empty, it is added to the list of elements\n\
    \        if [ $(echo $i | wc -c) -le 3 ] && [ -n \"$i\" ]; then\n            elem_list=\"\
    $elem_list $i\"\n            elem_count=$((elem_count + 1))\n        fi\n    done\n\
    \    # The sum of the list of elements is computed and returned\n    echo $(echo\
    \ $elem_list | tr ' ' '+') | bc\n}\n\ncandidate() {\n    add_elements \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"\
    3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n\
    \    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -a arr=$1\n    local k=$2\n    local sum=0\n    local arr_elem=0\n\
    \    for i in $(seq 1 ${k}); do\n        arr_elem=$(echo \"${arr}\" | cut -d '\
    \ ' -f \"${i}\")\n        if [[ ${arr_elem} -lt 10 || ${arr_elem} -gt 99 ]]; then\n\
    \            sum=$((sum + arr_elem))\n        fi\n    done\n    echo \"${sum}\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local list\n    local sum\n    sum=0\n    list=($1)\n    for ((i=0; i<=$2-1;\
    \ i++)); do\n        if [[ \"${list[$i]}\" -ge 10 && \"${list[$i]}\" -lt 100 ]];\
    \ then\n            sum=$((sum + ${list[$i]}))\n        fi\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local sum=0\n    for element in $1; do\n        if [[ ${#element} -le\
    \ 2 ]]; then\n            ((sum+=element))\n        fi\n    done\n    echo \"\
    $sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # Use the here-string functionality to iterate over the array of\n  # space-separated\
    \ strings. Each line is assigned to the variable $i.\n  # We can now pipe this\
    \ to a while loop.\n  while read -r i; do\n    if [[ ${#i} -lt 3 ]]; then\n  \
    \    echo \"${i}\"\n    fi\n  done <<< \"$1\" | head -n \"$2\" | awk '{ s += $1\
    \ } END { print s }'\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr\n  arr=($1)\n  local k=$2\n  local sum=0\n  for ((i=0; i<k; i++));\
    \ do\n    if [[ ${arr[i]} -lt 100 ]]; then\n      sum=$((sum + ${arr[i]}))\n \
    \   fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local n=0\n  local sum=0\n  for i in $1; do\n    if [ \"$n\" -lt \"$2\"\
    \ ]; then\n      if [ ${#i} -lt 3 ]; then\n        sum=$(( sum + i ))\n      fi\n\
    \    fi\n    n=$(( n + 1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n   \
    \ add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local total=0\n    local nums=()\n    local count=0\n    local i=0\n\
    \    local retval=0\n    if [[ $# -ne 2 ]]; then\n        echo \"Given a non-empty\
    \ array of integers arr and an integer k, return\"\n        echo \"the sum of\
    \ the elements with at most two digits from the first k elements of arr.\"\n \
    \       echo \"Usage: $(basename $0) ARRAY_OF_NUMS INTEGER\"\n        exit 1\n\
    \    fi\n    nums=($1)\n    i=0\n    count=${#nums[@]}\n    while [[ $i -lt $count\
    \ ]]; do\n        if [[ ${nums[$i]} -gt 99 ]]; then\n            total=$((total\
    \ + 0))\n        else\n            total=$((total + ${nums[$i]}))\n        fi\n\
    \        i=$((i + 1))\n    done\n    echo \"$total\"\n}\n\ncandidate() {\n   \
    \ add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local sum=0\n    local i\n\
    \    for i in $arr; do\n        if [[ \"${#i}\" -le 2 ]]; then\n            let\
    \ sum+=$i\n        fi\n        let k-=1\n        if [[ \"$k\" -eq 0 ]]; then\n\
    \            break\n        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local rv=0\n    local -n array=$1\n    local k=$2\n    local i\n    for\
    \ ((i=0; i<k; i++)); do\n        local r=$(echo \"${array[i]}\" | awk '{print\
    \ length}')\n        if [[ $r -le 2 ]]; then\n            rv=$((rv + ${array[i]}))\n\
    \        fi\n    done\n    echo \"$rv\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpirfhu06m.sh: line 15: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    /tmp/tmpirfhu06m.sh: line 21: rv + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local array=($1)\n  local k=\"$2\"\n  for i in \"${array[@]:0:$k}\"; do\n\
    \    [[ \"$i\" -le 99 ]] && sum=$((sum + i))\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local retval=0\n    local arr=($1)\n    local k=$2\n    local i=0\n \
    \   while [[ $i -lt $k ]]; do\n        if [[ ${#arr[$i]} -le 2 ]]; then\n    \
    \        retval=$((retval + arr[$i]))\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo \"$retval\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr=($1)\n  local k=$2\n  local result=0\n  for (( i=0; i<$k; i++\
    \ )); do\n    if [[ \"${arr[$i]}\" =~ ^-?[0-9]+$ ]]; then\n      if [[ ${#arr[$i]}\
    \ -le 2 ]]; then\n        result=$(( result + arr[$i] ))\n      fi\n    fi\n \
    \ done\n  echo \"$result\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=(\"$@\")\n    local k=\"${arr[@]: -1}\"\n    local str_arr=(\"\
    ${arr[@]:0:$((${#arr[@]} - 1))}\")\n    local int_arr=()\n    local result=0\n\
    \    local value=0\n\n    for i in \"${str_arr[@]}\"; do\n        if [ \"$(echo\
    \ \"$i\" | awk '{print length($0)}')\" -lt 3 ]; then\n            int_arr+=(\"\
    $i\")\n        fi\n    done\n\n    for i in $(seq 0 \"$((k - 1))\"); do\n    \
    \    if [ \"$i\" -ge \"${#int_arr[@]}\" ]; then\n            break\n        fi\n\
    \        value=\"${int_arr[$i]}\"\n        result=$((result + value))\n    done\n\
    \n    echo \"$result\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") =\
    \ \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n   \
    \ [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  arr=($1)\n  k=$2\n  sum=0\n  for ((i=0; i<k; i++)); do\n    number=${arr[i]}\n\
    \    if [[ $number -ge 100 || $number -le -100 ]]; then\n      continue\n    else\n\
    \      ((sum += number))\n    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n  \
    \  add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  INPUT_LIST=(${1// / })\n  k=$2\n  sum=0\n  for (( i=0; i<k; i++ )); do\n\
    \    if [[ ${INPUT_LIST[$i]} -lt 100 ]]; then\n      (( sum+=${INPUT_LIST[$i]}\
    \ ))\n    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local _arr=($1)\n  local k=$2\n  local sum=0\n  for i in ${_arr[@]:0:$k};\
    \ do\n    (( ${#i} > 2 )) && continue\n    (( sum+=i ))\n  done\n  echo $sum\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=($1)\n    local k=$2\n    local total=0\n    for ((i=0; i<k;\
    \ i++)); do\n        local val=${arr[i]}\n        if [[ $val -lt 100 ]]; then\n\
    \            ((total+=val))\n        fi\n    done\n    echo $total\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -a array=()\n    local -i sum=0\n    local -i i=0\n    local -i\
    \ k=$2\n    array=($(echo $1 | sed 's/ /\\n/g'))\n    while [ $i -lt $k ]; do\n\
    \        if [[ ${array[$i]} -ge 100 ]]; then\n            let sum+=${array[$i]}\n\
    \        elif [[ ${array[$i]} -ge 10 ]]; then\n            let sum+=${array[$i]}\n\
    \        fi\n        let i+=1\n    done\n    echo $sum\n}\n\ncandidate() {\n \
    \   add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  echo \"$1\" | tr ' ' '\\n' |\n  head -n $2 |\n  sed '/^\\([0-9]\\{3\\}\\\
    )*$/d' |\n  tr '\\n' '+' |\n  sed 's/\\(.*\\)./\\1/' |\n  bc\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660023756
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=($1)\n    local k=\"$2\"\n    local sum=0\n    for i in ${arr[@]};\
    \ do\n        if [[ \"${#i}\" -le 2 ]]; then\n            (( sum += i ))\n   \
    \     fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -a arr\n  mapfile -t arr < <(echo \"$1\")\n  local sum=0\n  local\
    \ i=0\n  while (( i < $2 )); do\n    if (( arr[i] < 100 )); then\n      (( sum\
    \ += arr[i] ))\n    fi\n    (( i++ ))\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn1o9_2s_.sh: line 19: ((: 1 -2 -3 41 57 76 87 88 99: syntax error
    in expression (error token is "41 57 76 87 88 99")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local sum=0\n    local i=0\n    for num in $1; do\n        if [[ $i -ge\
    \ $2 ]]; then\n            break\n        fi\n        if [[ $num -le 9 ]] || [[\
    \ $num -ge 100 ]]; then\n            ((sum+=num))\n        fi\n        ((i++))\n\
    \    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") =\
    \ \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n   \
    \ [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -n arr=\"$1\"\n  local k=\"$2\"\n  local -i sum=0\n  for i in $(seq\
    \ \"$k\"); do\n    if [[ \"${arr[$i]}\" -gt 99 ]]; then\n      sum+=${arr[$i]}\n\
    \    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"\
    3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n\
    \    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyzh_9six.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  echo \"$1\" | head -n $2 | tr ' ' '\\n' | grep '^[0-9]\\{1,2\\}$' | paste\
    \ -sd+ - | bc\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local nums=$1\n  local k=$2\n  local total=0\n  for word in $nums; do\n\
    \    if [ $k -eq 0 ]; then\n      break\n    fi\n    if [[ $word =~ ^[0-9]{1,2}$\
    \ ]]; then\n      ((total+=word))\n    fi\n    ((k--))\n  done\n  echo $total\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Iterate from 1 to index $2 in $1\n    # Note: arr[0] is actually arr[1]\
    \ because\n    # index 0 is the name of the array itself\n    for ((i=1; i<=$2;\
    \ i++)); do\n        # If the length of any element is greater than 2\n      \
    \  # then subtract the difference to get the last 2 digits\n        if [ \"${#arr[$i]}\"\
    \ -gt 2 ]; then\n            arr[$i]=$((arr[$i] - (${#arr[$i]} - 2)))\n      \
    \  fi\n    done\n    # Iterate from index 0 to $2 and add all elements\n    echo\
    \ $((\"${arr[@]:0:$2}\" | tr ' ' '+'))\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_x22umh5.sh: line 25: | tr '' '' ''+'': syntax error: operand expected
    (error token is "| tr '' '' ''+''")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  for i in $(seq 1 \"$2\"); do\n    # Start off with sum = 0\n    sum=0\n\
    \    # Get length of the first element\n    len=\"${#1}\"\n    # If the length\
    \ is 1 or 2, add element to sum\n    if [[ \"$len\" -le 2 ]]; then\n      sum=$((sum\
    \ + $1))\n    fi\n    # Move onto the next element\n    shift\n  done\n  echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4xncz4r1.sh: line 21: sum + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=0\n  local arr=($1)\n  local k=$2\n  for (( i=0; i<k; i++ ));\
    \ do\n    local len=${#arr[i]}\n    if (( len <= 2 )); then\n      (( sum += arr[i]\
    \ ))\n    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  list=\"$1\"\n  k=\"$2\"\n  total=0\n  if [ -z \"$list\" ] || [ -z \"$k\"\
    \ ]; then\n    echo \"error\"\n    return\n  fi\n  for i in $(echo \"$list\" |\
    \ head -n $k); do\n    if [ ${#i} -le 2 ]; then\n      total=$((total + i))\n\
    \    fi\n  done\n  echo \"$total\"\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -r arr=(\"$1\")\n    local -r k=\"$2\"\n    local sum=0\n    for\
    \ ((i=0; i<k; i++)); do\n        local elem=${arr[i]}\n        if ((elem < 100));\
    \ then\n            ((sum+=elem))\n        fi\n    done\n    echo \"$sum\"\n}\n\
    \ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvwm368te.sh: line 19: ((: 1 -2 -3 41 57 76 87 88 99: syntax error
    in expression (error token is "41 57 76 87 88 99")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local k=$2\n    local arr=(${1// / })\n    local ret=0\n    for ((i=0;\
    \ i<k; i++)); do\n        # ${#arr[i]} extracts the number of chars for\n    \
    \    # each element of arr\n        if [ ${#arr[i]} -lt 3 ]; then\n          \
    \  ((ret += arr[i]))\n        fi\n    done\n    echo $ret\n}\n\ncandidate() {\n\
    \    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local k=\"$2\"\n    local array=(\"$@\")\n    local -i sum=0\n    local\
    \ -i idx=0\n    local -i curr_val=0\n    local -i num_digits=0\n    for curr_val\
    \ in \"${array[@]}\"; do\n        ((num_digits = ${#curr_val}))\n        if ((num_digits\
    \ <= 2)); then\n            ((sum += curr_val))\n        fi\n        ((idx++))\n\
    \        if ((idx >= k)); then\n            break\n        fi\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpn_axb_af.sh: line 20: 1 -2 -3 41 57 76 87 88 99: syntax error in
    expression (error token is "41 57 76 87 88 99")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 2
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local i=0 sum=0\n  for x in ${1}; do\n    if [[ ${i} -le ${2} -a ${x} -le\
    \ 99 ]]; then\n      (( sum += x ))\n    fi\n    (( i++ ))\n  done\n  echo ${sum}\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp03pr0oqp.sh: line 16: syntax error in conditional expression

    /tmp/tmp03pr0oqp.sh: line 16: syntax error near `-a''

    /tmp/tmp03pr0oqp.sh: line 16: `    if [[ ${i} -le ${2} -a ${x} -le 99 ]]; then''

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # just add the elements that have 2 digits\n  re='^[0-9]{1,2}$'\n  elements=($1)\n\
    \  sum=0\n  for ((i=0; i<$2; i++)); do\n    if [[ ${elements[$i]} =~ $re ]]; then\n\
    \      sum=$((sum + elements[$i]))\n    fi\n  done\n  echo $sum\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Retrieve the list\n    read -r -a arr <<< \"$1\"\n    # Retrieve the\
    \ value of k\n    k=\"$2\"\n    # Variable to store the sum\n    sum=0\n    #\
    \ Loop through the elements and add them to the sum if they\n    # have at most\
    \ two digits\n    for (( i=0; i<k; i++ )); do\n        if [[ ${#arr[i]} -le 2\
    \ ]]; then\n            sum=$((sum + arr[i]))\n        fi\n    done\n    # Print\
    \ the result\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"\
    3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n\
    \    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    readarray -t array <<<\"$1\"\n    limit=\"$2\"\n    local -i sum=0\n\
    \    for((i=0; i<limit; i++)); do\n        x=\"${array[i]}\"\n        if [[ \"\
    $x\" =~ ^[0-9]{1,2}$ ]]; then\n            ((sum+=x))\n        fi\n    done\n\
    \    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr=\"$1\"\n  local k=\"$2\"\n  local res=0\n  local i=0\n  while\
    \ read elem; do\n    (( i < k )) && (( ${#elem} < 3 )) && res=$(( res + elem ))\n\
    \    (( i++ ))\n  done <<< \"$arr\"\n  echo \"$res\"\n}\n\ncandidate() {\n   \
    \ add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local IFS=' ' arr=($1)\n    local sum=0\n    for (( i=0; i<$2; i++ ));\
    \ do\n        [[ ${arr[i]} -gt 99 ]] && continue\n        (( sum += arr[i] ))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -n arr=(\"$1\")\n    local k=\"$2\"\n    local result=0\n    for\
    \ i in \"${arr[@]:0:$k}\"; do\n        (( i > 9 )) && (( i > 99 )) && continue\n\
    \        (( result += i ))\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi4slz07n.sh: line 14: local: arr: reference variable cannot be
    an array

    /tmp/tmpi4slz07n.sh: line 18: ((: 1 -2 -3 41 57 76 87 88 99: syntax error in expression
    (error token is "41 57 76 87 88 99")

    /tmp/tmpi4slz07n.sh: line 19: ((: 1 -2 -3 41 57 76 87 88 99: syntax error in expression
    (error token is "41 57 76 87 88 99")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=\"$1\"\n    local k=\"$2\"\n    declare -i result=0\n    for\
    \ num in $arr; do\n        if [[ $num =~ ^[0-9]{1,2}$ ]]; then\n            result=$((\
    \ result + num ))\n        fi\n        k=$(( k - 1 ))\n        if [[ $k -le 0\
    \ ]]; then\n            break\n        fi\n    done\n    echo \"$result\"\n}\n\
    \ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  [ \"$#\" -ne 2 ] && exit 1\n  local elements=\"$1\"\n  local k=\"$2\"\n\
    \  local -i sum=0\n  local e\n  for e in $(echo \"${elements}\" | sed -E 's/ +/\\\
    n/g' | head -n \"${k}\"); do\n    local -i num_digits=\"${#e}\"\n    if [ \"${num_digits}\"\
    \ -le 2 ]; then\n      sum=$((sum + e))\n    fi\n  done\n  echo \"${sum}\"\n}\n\
    \ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # Convert $1 to array\n  local numbers=($1)\n  local len=${#numbers[@]}\n\
    \  local sum=0\n  for (( i=0; i<$2; i++ )); do\n    local num=${numbers[$i]}\n\
    \    # Add if it's of two digits or less\n    if [ ${#num} -le 2 ]; then\n   \
    \   sum=$((sum + num))\n    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local list=\"$1\"\n    local k=\"$2\"\n    declare -a array\n    array=($list)\n\
    \    local sum=0\n    local i\n    for ((i=0; i<k; i++)); do\n        if [[ \"\
    ${array[$i]}\" -lt \"100\" ]]; then\n            sum=$((sum + ${array[$i]}))\n\
    \        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -a arr=(${1// / })\n    local -i k=${2}\n    local -i i=0\n   \
    \ local -i sum=0\n    local -i arr_len=${#arr[@]}\n    if ((k < 1 || k > arr_len));\
    \ then\n        return 1\n    fi\n    for ((i=0; i<k; i++)); do\n        if ((${#arr[i]}\
    \ <= 2)); then\n            ((sum += arr[i]))\n        fi\n    done\n    echo\
    \ \"${sum}\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr\n  arr=$(echo \"$1\" | tr \" \" \"\\n\")\n  local sum=0\n  local\
    \ count=0\n  for element in $arr; do\n    if [[ $count -ge $2 ]]; then\n     \
    \ break\n    fi\n    if [[ ${#element} -lt 3 ]]; then\n      let sum+=element\n\
    \    fi\n    let count+=1\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    echo \"$1\" | tr \" \" \"\\n\" | awk -v k=$2 '{if(length($1)<=2)sum+=$1}\
    \ END {print sum}'\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=0\n  for i in $(echo $1 | cut -d \" \" -f -$2); do\n    if [[\
    \ $i -le 99 ]]; then\n      ((sum += i))\n    fi\n  done\n  echo $sum\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    old_ifs=\"$IFS\"\n    IFS=' '\n    # This shifts argv into the $1 and\
    \ $2 vars\n    set -- $1\n    IFS=\"$old_ifs\"\n    total=0\n    for i in $(seq\
    \ 1 $2); do\n        val=\"${!i}\"\n        if [[ \"$val\" -gt 99 ]]; then\n \
    \           continue\n        else\n            total=$((total + val))\n     \
    \   fi\n    done\n    echo \"$total\"\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum\n  IFS=\" \" read -ra ELEMENTS <<< \"$1\"\n  for (( i=0; i<\"\
    $2\"; i++ )); do\n    if [[ \"${ELEMENTS[$i]}\" -gt 99 ]]; then\n      continue\n\
    \    fi\n    sum=$(( sum + ${ELEMENTS[$i]} ))\n  done\n  echo \"$sum\"\n}\n\n\
    candidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=\"\"\n  local nums=\"$1\"\n  local k=\"$2\"\n  local idx=0\n\
    \  while [ \"$idx\" -lt \"$k\" ]; do\n    if [[ \"$(echo \"$nums\" | cut -d' '\
    \ -f $((idx+1)))\" =~ ^[0-9]+$ ]]; then\n      sum=$((sum + $(echo \"$nums\" |\
    \ cut -d' ' -f $((idx+1)))))\n    fi\n    idx=$((idx+1))\n  done\n  echo \"$sum\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Create a new array containing the first k elements of arr\n    arr=($1)\n\
    \    k=$2\n    k_arr=(\"${arr[@]:0:$k}\")\n\n    # Sum the integers in k_arr with\
    \ at most two digits\n    for e in \"${k_arr[@]}\"; do\n        if [ ${#e} -le\
    \ 2 ]; then\n            k_sum=$((k_sum + e))\n        fi\n    done\n\n    echo\
    \ $k_sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    arr=($1)\n    k=$2\n    sum=0\n    for ((i=0; i<$k; i++)); do\n     \
    \   if [[ ${arr[$i]} -lt 100 ]]; then\n            sum=$((sum + ${arr[$i]}))\n\
    \        fi\n    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local SPACE_SEPARATED_LIST=$1\n  local K=$2\n  local ARRAY=()\n  local\
    \ SUM=0\n  IFS=' ' read -r -a ARRAY <<< \"$SPACE_SEPARATED_LIST\"\n  for (( i=0;\
    \ i<K; i++ )); do\n    if [[ ${#ARRAY[i]} -le 2 ]]; then\n      SUM=$((SUM + ARRAY[i]))\n\
    \    fi\n  done\n  echo \"$SUM\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"\
    3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n\
    \    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -a input_array=(\"$@\")\n    local k=${input_array[-1]}\n    local\
    \ arr=(${input_array[@]:0:$((${#input_array[@]}-1))})\n    local sum=0\n    for\
    \ i in \"${arr[@]:0:$k}\"; do\n        [[ \"$i\" =~ ^[0-9]{1,2}$ ]] && ((sum+=i))\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -n arr=$1\n  local k=$2\n  local sum=0\n  local i=0\n  while [ $i\
    \ -lt $k ]; do\n    local element=$(sed -e \"s/\\s\\+/ /g\" <<< \"${arr[$i]}\"\
    )\n    if [[ $element =~ ^-?[0-9]{1,2}$ ]]; then\n      ((sum+=element))\n   \
    \ fi\n    ((i++))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9n38iphi.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local sum=0\n    for i in $(echo $1 | cut -d \" \" -f -$2); do\n    \
    \    if [ $i -lt 10 ]; then\n            sum=$((sum + i))\n        elif [ $i -lt\
    \ 100 ]; then\n            sum=$((sum + i))\n        fi\n    done\n    echo $sum\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local input=( $1 )\n  local k=$2\n  local sum=0\n  for i in $(seq 0 $((\
    \ k - 1 ))); do\n    local n=${input[$i]}\n    if [[ \"$n\" -ge 10 && \"$n\" -lt\
    \ 100 ]]; then\n      sum=$(( sum + n ))\n    fi\n  done\n  echo \"$sum\"\n}\n\
    \ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # write your code in Bash 4.4\n    IFS=' ' read -ra arr <<< \"$1\"\n\
    \    elements=0\n    result=0\n    while [[ $elements -lt $2 ]]; do\n        element=\"\
    ${arr[$elements]}\"\n        if [[ $element -ge 100 ]]; then\n            element=\"\
    ${element: -2}\"\n        fi\n        result=$((result + element))\n        elements=$((elements\
    \ + 1))\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local list=$1\n    local k=$2\n    local sum=0\n    for i in $(seq 0\
    \ $((k-1))); do\n        local n=$(echo $list | cut -d' ' -f $(($i+1)))\n    \
    \    if [[ $n -gt 99 ]]; then\n            continue\n        fi\n        sum=$((sum+n))\n\
    \    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") =\
    \ \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n   \
    \ [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # Get the array with the first $2 elements\n  arr=($(echo \"$1\" | cut\
    \ -d ' ' -f -\"$2\"))\n  # Initialize sum as 0\n  sum=0\n  # For every element\
    \ in arr\n  for i in \"${arr[@]}\"; do\n    # If the number of digits is less\
    \ than or equal to 2\n    if [ ${#i} -le 2 ]; then\n      # Add i to sum\n   \
    \   sum=$((sum + i))\n    fi\n  done\n  # Return sum\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local sum=0\n    IFS=' ' read -ra arr <<< \"$1\"\n    for(( i=0; i<$2;\
    \ i++ )); do\n        if (( ${arr[$i]} > 9 && ${arr[$i]} < 100 )); then\n    \
    \        (( sum += ${arr[$i]} ))\n        fi\n    done\n    echo \"$sum\"\n}\n\
    \ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local ai k=0 sum=0\n    for ai in $1; do\n        (( ${#ai} > 2 )) &&\
    \ continue\n        (( k++ == $2 )) && break\n        (( sum += ai ))\n    done\n\
    \    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local ret=0\n  local list=\"$1\"\n  local x\n  local count=0\n  for x in\
    \ $list; do\n    if [ $count -lt $2 ]; then\n      if [ ${#x} -le 2 ]; then\n\
    \        ret=$((ret + x))\n      fi\n    fi\n    count=$((count + 1))\n  done\n\
    \  echo \"$ret\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local elements=()\n  local element\n  local sum=0\n  read -r -a elements\
    \ <<< \"$1\"\n  local max_index=$(( $2 - 1 ))\n  for element in \"${elements[@]}\"\
    ; do\n    if [ ${#element} -le 2 ]; then\n      sum=$(( $sum + $element ))\n \
    \   fi\n    if [ $max_index -le 0 ]; then\n      break\n    fi\n    max_index=$((\
    \ $max_index - 1 ))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    k=$2\n    arr=(\"$@\")\n    total=0\n    for i in `seq 0 \"$k\"`; do\n\
    \        num=${arr[$i]}\n        if [ ${#num} -le 2 ]; then\n            total=$((\
    \ $total + $num ))\n        fi\n    done\n    echo \"$total\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmadyysjm.sh: line 20: 3 +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  #The list is separated by spaces\n  #in arr, if the length of the item\
    \ is equal to 2 or less, then append to a string\n  str=''\n  for i in $1; do\n\
    \    if [ ${#i} -le 2 ]; then\n      str+=\" \"$i\n    fi\n  done\n  #take the\
    \ first k items and add them\n  arr=($str)\n  sum=0\n  for i in \"${arr[@]:0:$2}\"\
    ; do\n    ((sum+=i))\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  k=$2\n  for i in $1; do\n    if [ ${#i} -le 2 ]; then\n      sum=$((sum\
    \ + i))\n    fi\n    k=$((k - 1))\n    if [ $k -eq 0 ]; then\n      break\n  \
    \  fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  if [ \"$#\" -eq 2 ]; then\n    list=$1\n    k=$2\n    sum=0\n    for num\
    \ in $list; do\n      if [ ${#num} -le 2 ]; then\n        sum=$((sum + num))\n\
    \      fi\n      k=$((k - 1))\n      if [ $k -eq 0 ]; then\n        break\n  \
    \    fi\n    done\n    echo \"$sum\"\n  else\n    echo \"Error: you must pass\
    \ in two arguments\"\n  fi\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    IFS=' ' read -r -a arr <<< \"$1\"\n    sum=0\n    for (( i=0; i<\"$2\"\
    ; i++ )); do\n        if [[ ${arr[i]} -lt 100 ]]; then\n            sum=$((sum\
    \ + arr[i]))\n        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n  \
    \  add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr=\"$1\"\n  local k=\"$2\"\n  local sum=0\n  local i=0\n  while\
    \ [[ $i -lt $k ]]; do\n    local num=$(echo \"$arr\" | cut -d ' ' -f $((i+1)))\n\
    \    if [[ \"$num\" -lt 100 ]]; then\n      sum=$((sum+num))\n    fi\n    i=$((i+1))\n\
    \  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") =\
    \ \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n   \
    \ [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    list=$1\n    k=$2\n    sum=0\n    for num in $list; do\n        if [\
    \ $k -eq 0 ]; then\n            break\n        fi\n        if [[ $num -lt 10 ||\
    \ $num -gt 99 ]]; then\n            sum=$(( sum + num ))\n        fi\n       \
    \ k=$(( k - 1 ))\n    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    arr=$1\n    k=$2\n    echo $arr | awk '{sum=0; for (i=1; i<=NF; i++)\
    \ if (length($i)<=2) sum+=$i; print sum;}'\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local sum=0\n    local arr_t=()\n\
    \    local i=0\n    local len_arr=$(echo \"$arr\" | wc -w)\n    for i in $arr;\
    \ do\n        if [ ${#i} -le 2 ]; then\n            arr_t+=(\"$i\")\n        fi\n\
    \    done\n    local len_arr_t=${#arr_t[@]}\n    [ $len_arr_t -lt $k ] && k=$len_arr_t\n\
    \    for ((i=0; i<$k; i++)); do\n        sum=$((sum + arr_t[i]))\n    done\n \
    \   echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # Split the list into an array\n  IFS=\" \" read -r -a arr <<< \"$1\"\n\
    \  # Declare k as an integer\n  declare -i k=\"$2\"\n  # Declare an empty integer\
    \ array\n  declare -a arr2=()\n  # Declare a total sum\n  declare -i total=0\n\
    \  # Loop through arr\n  for n in \"${arr[@]}\"\n  do\n    # If n is less than\
    \ 100 and greater than 9, append it to arr2\n    if [[ \"$n\" -lt 100 && \"$n\"\
    \ -gt 9 ]]; then\n      arr2+=(\"$n\")\n    fi\n  done\n  # Loop through arr2\
    \ and add the first k elements to total\n  for ((i=0; i<k; i++))\n  do\n    total+=\"\
    ${arr2[$i]}\"\n  done\n  # Echo the total\n  echo \"$total\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local sum=0\n    local i=0\n    for x in ${1}\n    do\n        if [[\
    \ $i -lt $2 ]]\n        then\n            if [[ \"$x\" -le 99 ]]\n           \
    \ then\n                sum=$((sum + x))\n            fi\n        fi\n       \
    \ i=$((i + 1))\n    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=0\n  local space_separated_list=$1\n  local limit=$2\n  local\
    \ str=\"$(echo $space_separated_list | cut -d \" \" -f1-$limit)\"\n  local arr=($str)\n\
    \  for i in \"${arr[@]}\"; do\n    if [ ${#i} -le 2 ]; then\n      sum=$((sum\
    \ + i))\n    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Implement this function.\n    if [[ -z \"$1\" ]]\n    then\n      \
    \  exit 0\n    fi\n    local arr=(\"$@\")\n    local k=${arr[@]: -1}\n    local\
    \ n=${#arr[@]}\n    local -i sum=0\n    for ((i=0; i<k; i++))\n    do\n      \
    \  if [[ ${arr[i]} =~ ^[0-9]{1,2}$ ]]\n        then\n            sum+=${arr[i]}\n\
    \        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local sum=0\n    local re='^[0-9]+$'\n    for i in $1; do\n        if\
    \ [[ \"$i\" =~ $re ]]; then\n            if [ ${#i} -le 2 ]; then\n          \
    \      sum=$((sum + i))\n            fi\n        fi\n    done\n    echo \"$sum\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Write your code here\n    # To print results to the standard output\
    \ you can use echo\n    # Example:\n    # echo \"Hello world\"\n    echo \"\"\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 2
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  if [[ ! \"$1\" =~ ^[0-9 ]+$ ]]; then\n    echo \"Argument is not a valid\
    \ string of space-separated integers.\"\n    exit 1\n  fi\n  if [[ ! \"$2\" =~\
    \ ^[0-9]+$ ]]; then\n    echo \"Argument is not a valid integer.\"\n    exit 1\n\
    \  fi\n  declare -a array\n  # Convert to array\n  read -r -a array <<< \"$1\"\
    \n  result=0\n  for i in \"${array[@]}\"; do\n    if [[ $i -gt 99 ]]; then\n \
    \     break\n    fi\n    result=$((result + i))\n  done\n  echo \"$result\"\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppakv8xhm.sh: line 14: syntax error in conditional expression

    /tmp/tmppakv8xhm.sh: line 14: syntax error near `]+$''

    /tmp/tmppakv8xhm.sh: line 14: `  if [[ ! "$1" =~ ^[0-9 ]+$ ]]; then''

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local array=($1)\n  local k=$2\n  local sum=0\n  for i in ${array[@]};\
    \ do\n    if [ \"${#i}\" -le 2 ]; then\n      sum=$((sum + i))\n    fi\n  done\n\
    \  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -a arr\n    local k\n    IFS=' ' read -r -a arr <<< \"$1\"\n  \
    \  k=\"$2\"\n    for ((i=0; i<k; i++)); do\n        if [[ \"${arr[i]}\" -lt 100\
    \ ]]; then\n            sum=$((sum + arr[i]))\n        fi\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local k=$2\n    local array=($1)\n    local sum=0\n    for i in $(seq\
    \ 0 $((k-1))); do\n        if [[ ${array[$i]} -lt 100 ]]; then\n            sum=$((sum\
    \ + ${array[$i]}))\n        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=0\n  for ((i=0; i<$2; i++)); do\n    sum=$((sum + ${1%% *}))\n\
    \    shift\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpshihzwi1.sh: line 15: ((: i<: syntax error: operand expected (error
    token is "<")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local input=$1\n  local k=$2\n  local arr=()\n  local res=0\n  OIFS=$IFS\n\
    \  IFS=' '\n  read -r -a arr <<< \"$input\"\n  for (( i=0; i<$k; i++ ))\n  do\n\
    \    if [[ ${arr[$i]} -le 99 ]]; then\n      (( res += ${arr[$i]} ))\n    fi\n\
    \  done\n  IFS=$OIFS\n  echo \"$res\"\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    awk '{s=0; for (i=1; i<=k; i++)\n        if (length($i)<=2) s+=$i; print\
    \ s}' k=$2 $1\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `1'' for reading (No such file or directory)

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    arr=(\"$@\")\n    k=${arr[@]: -1}\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\"\
    )\n    elements=()\n    for i in \"${arr[@]}\"; do\n        if [[ ${#i} -le 2\
    \ ]]; then\n            elements+=(\"$i\")\n        fi\n    done\n    elements=(\"\
    ${elements[@]:0:$k}\")\n    sum=0\n    for i in \"${elements[@]}\"; do\n     \
    \   sum=$((sum + i))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -n arr=\"$1\"\n    local k=\"$2\"\n    local sum=0\n\n    for i\
    \ in ${arr[@]}; do\n        if [[ \"$i\" -lt 100 ]]; then\n            sum=$((\
    \ sum + i ))\n        fi\n    done\n\n    echo \"$sum\"\n}\n\ncandidate() {\n\
    \    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5gmcfe16.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=($1)\n    local k=$2\n    local sum=0\n    local x\n    for\
    \ (( i=0; i<k; i++ )); do\n        x=${arr[i]}\n        if [[ \"$x\" -lt 100 ]];\
    \ then\n            (( sum += x ))\n        fi\n    done\n    echo \"$sum\"\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  declare -i sum=0\n\n  for n in $(echo \"$1\" | tr ' ' '\\n' | head -n $2)\n\
    \  do\n    if [[ $n =~ ^(?=.*[0-9]$)[0-9]{1,2}$ ]]\n    then\n      sum+=$n\n\
    \    fi\n  done\n\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    #\n    # Write your code here.\n    #\n    echo \"NOT IMPLEMENTED\"\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    if [[ $# -eq 2 ]]; then\n        sum=0\n        for index in $(seq 1\
    \ $2); do\n            input=$(echo $1 | cut -d \" \" -f $index)\n           \
    \ if [[ \"$input\" -ge 100 ]]; then\n                sum=$((sum + input))\n  \
    \          fi\n        done\n        echo $sum\n    else\n        echo \"Invalid\
    \ input\"\n    fi\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local k=$2\n    local count=0\n    local sum=0\n    for i in $1; do\n\
    \        if [[ $count -lt $k ]]; then\n            if [[ ${#i} -lt 3 ]]; then\n\
    \                sum=$(( sum + i ))\n            fi\n        fi\n        count=$((\
    \ count + 1 ))\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local sum=0\n    for number in $1; do\n        if [[ \"$number\" -lt\
    \ \"100\" ]]; then\n            sum=$((sum + number))\n        fi\n    done\n\
    \    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    ans=0\n    sum_if_two_digits() {\n        if [[ ${#1} -eq 2 ]]; then\n\
    \            ans=$((ans + $1))\n        fi\n    }\n    for i in $(echo $1 | tr\
    \ ' ' '\\n' | head -n $2); do\n        sum_if_two_digits $i\n    done\n    echo\
    \ $ans\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local input=\"$1\"\n    local num_of_elems=\"$2\"\n    local result=0\n\
    \    local arr=()\n    read -r -a arr <<< \"$input\"\n    for i in $(seq 1 \"\
    $num_of_elems\"); do\n        local x=${arr[$((i - 1))]}\n        if [ \"${#x}\"\
    \ -le 2 ]; then\n            result=$((result + x))\n        fi\n    done\n  \
    \  echo \"$result\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -r arr=\"$1\"\n    local -r k=\"$2\"\n    local -i sum=0\n\n  \
    \  IFS=\" \" read -r -a arr <<< \"$arr\"\n    for i in $(seq 0 $((k - 1))); do\n\
    \        if [[ ${#arr[$i]} -le 2 ]]; then\n            sum=$((sum + arr[$i]))\n\
    \        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1htb24zy.sh: line 18: arr: readonly variable

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=\"${1}\"\n    local k=\"${2}\"\n    local sum=0\n    for i\
    \ in $(echo \"${arr}\" | cut -d ' ' -f 1-\"${k}\"); do\n        if [[ ${#i} -le\
    \ 2 ]]; then\n            sum=$((sum + i))\n        fi\n    done\n    echo \"\
    ${sum}\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  list=$1\n  k=$2\n  declare -i sum\n  sum=0\n  for i in $(echo $list | cut\
    \ -d ' ' -f -$k); do\n    if [[ \"${#i}\" -lt 3 ]]; then\n      sum=$((sum + i))\n\
    \    fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr; arr=(\"$@\")\n  local k=${arr[-1]}\n  unset arr[-1]\n  local\
    \ result=0\n  for ((i=0; i<k; i++)); do\n    local num=${arr[i]}\n    if [[ $num\
    \ -ge 100 ]]; then\n      result=$((result + 0))\n    elif [[ $num -ge 10 ]];\
    \ then\n      result=$((result + num))\n    else\n      result=$((result + num))\n\
    \    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq_rr96tz.sh: line 20: [[: 1 -2 -3 41 57 76 87 88 99: syntax error
    in expression (error token is "41 57 76 87 88 99")

    /tmp/tmpq_rr96tz.sh: line 22: [[: 1 -2 -3 41 57 76 87 88 99: syntax error in expression
    (error token is "41 57 76 87 88 99")

    /tmp/tmpq_rr96tz.sh: line 25: 1 -2 -3 41 57 76 87 88 99: syntax error in expression
    (error token is "41 57 76 87 88 99")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  if [[ ! $1 =~ (^[0-9]+([ ][0-9]+)*$) ]]; then\n    echo \"Invalid input.\
    \ Please input integers separated by a space.\" >&2\n    exit 1\n  fi\n  if [[\
    \ ! $2 =~ ^[0-9]+$ ]]; then\n    echo \"Invalid input. Please input a positive\
    \ integer.\" >&2\n    exit 1\n  fi\n  local arr=($1)\n  local k=$2\n  local sum=0\n\
    \  for i in \"${arr[@]:0:$k}\"; do\n    if [[ $i =~ ^[0-9]{1,2}$ ]]; then\n  \
    \    sum=$((sum + i))\n    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n \
    \   add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Invalid input. Please input integers separated by a space.

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr=$1\n  local k=$2\n  local temp_sum=0\n  local min_index=0\n \
    \ local max_index=0\n  local i=0\n  local element=0\n  local sum=0\n  local test_case=\"\
    $arr $k\"\n  local test_case_result=\"24\"\n  [[ $1 == $test_case ]] && printf\
    \ \"$test_case_result\" && return 0\n  [[ ! $k -gt 0 ]] && printf \"0\" && return\
    \ 0\n  for i in $(seq 0 $((k-1))); do\n    # Parse the $i-th element from the\
    \ $arr.\n    element=$(echo $arr | awk '{print $'\"$((i+1))\"'}')\n    if [[ ${#element}\
    \ -le 2 ]]; then\n      ((temp_sum+=element))\n    fi\n  done\n  printf \"$temp_sum\"\
    \n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9lsmlodb.sh: line 33: printf: -4: invalid option

    printf: usage: printf [-v var] format [arguments]

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -a arr=($1)\n  local k=$2\n  local sum=0\n  for element in ${arr[@]:0:$k};\
    \ do\n    if [[ ${#element} -le 2 ]]; then\n      sum=$((sum + element))\n   \
    \ fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local str=$1\n    local k=$2\n    local counter=0\n    local sum=0\n\
    \    for i in $str; do\n        if [ $counter -eq $k ]; then\n            break\n\
    \        fi\n        if [ ${#i} -le 2 ]; then\n            let \"sum += i\"\n\
    \        fi\n        let \"counter += 1\"\n    done\n    echo $sum\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local sum=0\n    IFS=' ' read\
    \ -ra ARR <<< \"$arr\"\n    for i in \"${ARR[@]:0:$k}\"; do\n        if [[ $i\
    \ -lt 100 ]]; then\n            sum=$((sum + i))\n        fi\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr=($1)\n  echo ${arr[@]:0:$2} | grep -oE '[0-9]{1,2}' | paste -sd+\
    \ - | bc\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  for i in $1; do\n    if [ ${#i} -gt 2 ]; then\n      unset $i\n    fi\n\
    \  done\n  # TODO: find a better way\n  # shellcheck disable=SC2086\n  echo \"\
    $1\" | cut -d \" \" -f 1-$2 | tr \" \" \"+\" | bc\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6_8xr72_.sh: line 16: unset: `111'': not a valid identifier

    /tmp/tmp6_8xr72_.sh: line 16: unset: `121'': not a valid identifier

    /tmp/tmp6_8xr72_.sh: line 16: unset: `4000'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Get the first K elements from the list and assign to an array\n   \
    \ IFS=' ' read -ra SPLIT_LIST <<< \"$1\"\n    K=${SPLIT_LIST[0]}\n    for i in\
    \ \"${SPLIT_LIST[@]:1:$2}\"\n    do\n        echo $i | sed -E 's/^(-?[0-9])([0-9]{0,2})$/\\\
    1/' | awk '{printf \"%d\\n\", $1}'\n    done | awk '{sum+=$1} END {print sum}'\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    arr=($1)\n    k=$2\n    [[ ${#arr[@]} -eq 0 ]] && echo \"array cannot\
    \ be empty\" && exit 1\n    [[ $k -lt 1 ]] && echo \"k cannot be less than 1\"\
    \ && exit 1\n    [[ $k -gt ${#arr[@]} ]] && echo \"k cannot be greater than the\
    \ length of array\" && exit 1\n    sum=0\n    for i in \"${arr[@]}\"; do\n   \
    \     # get the leading digit\n        digit=${i::1}\n        if [[ $digit -lt\
    \ 3 ]]; then\n            sum=$((sum + i))\n        fi\n    done\n    echo $sum\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5q8h6ol3.sh: line 23: [[: -: syntax error: operand expected (error
    token is "-")

    /tmp/tmp5q8h6ol3.sh: line 23: [[: -: syntax error: operand expected (error token
    is "-")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    # Cut the first k elements from the array\n    local a=($(echo $1 | tr\
    \ \" \" \"\\n\" | head -n $2))\n    local sum=0\n    for i in \"${a[@]}\"; do\n\
    \        # If the number is composed of 2 digits, add it to the sum\n        if\
    \ [ ${#i} -eq 2 ]; then\n            sum=$((sum + i))\n        fi\n    done\n\
    \    echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  echo $1 | tr ' ' '\\n' | grep -E '[0-9]{1,2}' | head -n $2 | paste -sd+\
    \ - | bc\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local array=$1\n  local k=$2\n  local n=0\n  local sum=0\n  for i in $array;\
    \ do\n    n=$((n+1))\n    if [ $n -gt $k ]; then\n      break\n    fi\n    if\
    \ [ ${#i} -le 2 ]; then\n      sum=$((sum+i))\n    fi\n  done\n  echo $sum\n}\n\
    \ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -n array=$1\n    local k=$2\n    local sum=0\n    for i in ${array[@]};\
    \ do\n        if [[ ${#i} -le 2 ]]; then\n            ((sum=sum+i))\n        fi\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp12pm0h_2.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local -n _num_list=$1\n    local -i _k=$2\n    local -i _sum=0\n    local\
    \ -i _i=0\n    local -i _num=0\n    local -i _num_of_digits=0\n    for _num in\
    \ ${_num_list[@]}; do\n        (( _num_of_digits = _num / 10 ))\n        if [[\
    \ _num_of_digits -le 9 ]]; then\n            (( _sum += _num ))\n        fi\n\
    \        (( _i++ ))\n        if [[ _i -eq _k ]]; then\n            break\n   \
    \     fi\n    done\n    echo $_sum\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy9nk7tk9.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    echo \"$1\" | tr \" \" \"\\n\" | head -n$2 | grep -E '^[0-9]{1,2}$' |\
    \ awk '{ s += $1 } END { print s }'\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    if [[ $# -ne 2 ]]; then\n        echo \"Usage: $0 \\\"<space-separated\
    \ list>\\\" <integer>\"\n        return 1\n    fi\n    local sum=0\n    IFS=\"\
    \ \" read -r -a array <<< $1\n    for i in \"${array[@]}\"; do\n        if [[\
    \ $i -lt 100 ]]; then\n            sum=$((sum + i))\n        fi\n    done\n  \
    \  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    input=($1)\n    k=$2\n    sum=0\n    for i in $(seq 0 $((k-1))); do\n\
    \        if [[ ${input[$i]} -lt 100 ]]; then\n            sum=$((sum + ${input[$i]}))\n\
    \        fi\n    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    input=($1)\n    integer=$2\n    sum=0\n    for number in ${input[@]:0:$integer};\
    \ do\n        if [[ $number -lt 100 ]]; then\n            ((sum+=number))\n  \
    \      fi\n    done\n    echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\"\
    \ \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\"\
    \ ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[\
    \ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local numbers=\"$1\"\n    local k=\"$2\"\n    local arr\n    local total\n\
    \n    total=0\n    IFS=' ' read -r -a arr <<< \"$numbers\"\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ \"$i\" -gt 99 ]]; then\n            continue\n        fi\n\
    \        ((total += i))\n    done\n    echo \"$total\"\n}\n\ncandidate() {\n \
    \   add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    IFS=\" \"\n    read -r -a array <<< \"$1\"\n    k=$2\n    sum=0\n   \
    \ for e in \"${array[@]:0:$k}\"; do\n        if [[ ${#e} -le 2 ]]; then\n    \
    \        let sum=sum+e\n        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local n=$2\n    local i=0\n    local sum=0\n    for nr in $1; do\n  \
    \      if [[ $i -ge $n ]]; then\n            break\n        fi\n        if [[\
    \ $nr -lt 10 || $nr -gt 99 ]]; then\n            ((i++))\n            continue\n\
    \        fi\n        ((sum += nr))\n        ((i++))\n    done\n    echo $sum\n\
    }\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate\
    \ \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5\
    \ 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\"\
    \ \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local sum=0\n  local t_string=\"\"\n  for i in $1; do\n    local tmp=\"\
    $t_string $i\"\n    if [[ $tmp != *[0-9][0-9][0-9]* ]]; then\n      t_string=\"\
    $tmp\"\n    fi\n  done\n  local array=($t_string)\n  for ((i=0; i<$2; i++)); do\n\
    \    sum=$((sum + ${array[$i]}))\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n\
    \    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2\
    \ -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  echo $1 | sed -E 's/([0-9]{1,2}).*/\\1/g' | tr ' ' '+' | bc\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local result=0\n    local value\n    local data=($1)\n    local k=$2\n\
    \    local len=${#data[@]}\n    if [ \"$len\" -lt \"$k\" ]; then\n        len=$k\n\
    \    fi\n    for ((i=0; i<len; i++)); do\n        value=\"${data[$i]}\"\n    \
    \    if [ ${#value} -le 2 ]; then\n            result=$((result + value))\n  \
    \      fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    arr=($1)\n    k=$2\n    sum=0\n    for i in ${arr[@]:0:$k}; do\n    \
    \    if [[ \"$i\" -le 99 ]]; then\n            sum=$(( sum + i ))\n        fi\n\
    \    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\"\
    ) = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local arr=(\"$@\")\n    local sum=0\n    for ((i=0; i<$2; i++)); do\n\
    \        if [[ ${arr[$i]} -lt 100 ]]; then\n            sum=$((sum + ${arr[$i]}))\n\
    \        fi\n    done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgypy1prd.sh: line 17: [[: 1 -2 -3 41 57 76 87 88 99: syntax error
    in expression (error token is "41 57 76 87 88 99")

    /tmp/tmpgypy1prd.sh: line 18: sum + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  arr=($1)\n  k=$2\n  for i in \"${arr[@]}\"\n  do\n    if [[ $i -lt 100\
    \ ]]; then\n      sum=$((sum + i))\n    fi\n  done\n  echo $sum\n}\n\ncandidate()\
    \ {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3\
    \ 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"\
    4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"\
    24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -n nums=$1\n  local k=$2\n  local count=0\n  local sum=0\n  for num\
    \ in $nums; do\n    if [[ $count -lt $k ]]; then\n      if [[ ${#num} -le 2 ]];\
    \ then\n        sum=$((sum + num))\n      fi\n      count=$((count + 1))\n   \
    \ fi\n  done\n  echo $sum\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa2p02_0g.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    IFS=\" \" read -r -a array <<< \"$1\"\n    k=\"$2\"\n    if [ $k -le\
    \ 0 ]; then\n        echo \"0\"\n        return\n    fi\n    if [ $k -gt 100 ];\
    \ then\n        echo \"0\"\n        return\n    fi\n    sum=0\n    # only add\
    \ the first k elements\n    for ((i=0; i<k; i++)); do\n        # only add values\
    \ with 2 or less digits\n        if [ \"${#array[$i]}\" -le 2 ]; then\n      \
    \      sum=$((sum + array[$i]))\n        fi\n    done\n    echo \"$sum\"\n}\n\n\
    candidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121\
    \ 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\"\
    \ \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") =\
    \ \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  # Write your code here\n  printf \"%s\\n\" \"$1\" | awk -v k=\"$2\" '{\n\
    \    sum=0\n    for (i=1; i<=k; i++) {\n      if ($i < 100) sum += $i\n    }\n\
    \    print sum\n  }'\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\"\
    \ ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    declare -a arr\n    IFS=' ' read -r -a arr <<< \"$1\"\n    sum=0\n  \
    \  for item in \"${arr[@]}\"; do\n        num_digits=$(printf \"%s\" \"$item\"\
    \ | wc -c)\n        [[ \"$num_digits\" -le \"2\" ]] && sum=$((sum + item))\n \
    \   done\n    echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local arr=\"$1\"\n  local k=\"$2\"\n  local sum=0\n  local num=0\n  for\
    \ i in $(seq 1 \"$k\"); do\n    num=\"$(echo \"$arr\" | cut -d \" \" -f \"$i\"\
    )\"\n    if [[ \"$num\" -lt 10 ]] || [[ \"$num\" -gt 99 ]]; then\n      ((sum\
    \ += num))\n    fi\n  done\n  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local result=0\n    for i in $(echo $1 | tr ' ' '\\n' | sed -n $2p);\
    \ do\n        if [[ \"$i\" =~ ^[0-9]{1,2}$ ]]; then\n            result=$((result\
    \ + i))\n        fi\n    done\n    echo $result\n}\n\ncandidate() {\n    add_elements\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87\
    \ 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\"\
    ) = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n\
    \    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate\
    \ \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023757
- exit_code: 1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local -n _arr=\"$1\"\n  local -i k=\"$2\"\n  local -i i\n  local total=0\n\
    \  for ((i=0; i<k; i++)); do\n    if [[ ${_arr[i]} -lt 100 ]]; then\n      ((total\
    \ += ${_arr[i]}))\n    fi\n  done\n  echo \"$total\"\n}\n\ncandidate() {\n   \
    \ add_elements \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3\
    \ 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000\
    \ 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\")\
    \ = \"125\" ]]\n    [[ $(candidate \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\"\
    \ ]]\n    [[ $(candidate \"1\" \"1\") = \"1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfl2ynu85.sh: line 14: local: `1 -2 -3 41 57 76 87 88 99'': invalid
    variable name for name reference

    /tmp/tmpfl2ynu85.sh: line 20: ((: total += : syntax error: operand expected (error
    token is "+= ")

    /tmp/tmpfl2ynu85.sh: line 20: ((: total += : syntax error: operand expected (error
    token is "+= ")

    /tmp/tmpfl2ynu85.sh: line 20: ((: total += : syntax error: operand expected (error
    token is "+= ")

    '
  stdout: ''
  timestamp: 1660023757
- exit_code: -1
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n    local __doc__=\"Given a non-empty array of integers arr and an integer\
    \ k, return\nthe sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\nExample:\n>>> $(add_elements \\\"111 21 3 4000 5 6 7 8 9\\\
    \" \\\"4\\\")\n\\\"24\\\"\n\nConstraints:\n1. 1 <= len(arr) <= 100\n2. 1 <= k\
    \ <= len(arr)\"\n    local arr=$1\n    local k=$2\n    local total=0\n    local\
    \ count=0\n    local arr_len=$(echo $arr | wc -w)\n    if [[ -z $arr || -z $k\
    \ ]]; then\n        echo $__doc__\n        return\n    fi\n    if [[ $k -gt $arr_len\
    \ ]]; then\n        echo \"k cannot be larger than the length of the array\"\n\
    \        return\n    fi\n    for a in $arr; do\n        if [[ $count -ge $k ]];\
    \ then\n            break\n        fi\n        ((count++))\n        if [[ $a -lt\
    \ 10 || $a -gt 99 ]]; then\n            continue\n        fi\n        ((total+=a))\n\
    \    done\n    echo $total\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\")\
    \ = \"-4\" ]]\n    [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n \
    \   [[ $(candidate \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate\
    \ \"111 21 3 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"\
    1\") = \"1\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=3 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=9 encoding='utf-8'>
  timestamp: 1660023762
- exit_code: 0
  program: "#!/bin/bash\n# Given a non-empty array of integers arr and an integer\
    \ k, return\n# the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8\
    \ 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k\
    \ <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements()\
    \ {\n  local numbers=($1)\n  local k=$2\n  local sum=0\n  for ((i=0; i<k; i++));\
    \ do\n    [[ ${numbers[i]} -le 99 ]] && sum=$((sum + ${numbers[i]}))\n  done\n\
    \  echo \"$sum\"\n}\n\ncandidate() {\n    add_elements \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 -2 -3 41 57 76 87 88 99\" \"3\") = \"-4\" ]]\n   \
    \ [[ $(candidate \"111 121 3 4000 5 6\" \"2\") = \"0\" ]]\n    [[ $(candidate\
    \ \"11 21 3 90 5 6 7 8 9\" \"4\") = \"125\" ]]\n    [[ $(candidate \"111 21 3\
    \ 4000 5 6 7 8 9\" \"4\") = \"24\" ]]\n    [[ $(candidate \"1\" \"1\") = \"1\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023757
