name: HumanEval_14_all_prefixes
language: sh
prompt: "#!/bin/bash\n# Return list of all prefixes from shortest to longest of the\
  \ input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n\
  #\n# $1 is a string\nall_prefixes() {\n"
tests: "}\n\ncandidate() {\n    all_prefixes \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"asdfgh\") = \"a as asd\
  \ asdf asdfg asdfgh\" ]]\n    [[ $(candidate \"WWW\") = \"W WW WWW\" ]]\n}\n\nrun_test"
completions: ["    echo -n '['\n    for i in $(seq 1 ${#1}); do\n        echo -n \"\
    \\\"${1:0:$i}\\\", \"\n    done\n    echo -n ']'", "    python -c \"print('[%s]'\
    \ % ', '.join('\\\"%s\\\"' % s for s in '$1'.split()))\"", "    local s=\"$1\"\
    \n    l=${#s}\n    echo \"[\"$(for (( i=1; i<=$l; i++ )); do echo '\"'${s:0:$i}'\"\
    '; done | tr '\\n' ',' | head -c -1)\"]\"", "  local str=\"$1\"\n\n  seq 0 1 $((${#str}\
    \ - 1)) |\n    xargs -I{} printf \"\\\"%s\\\"\\n\" \"${str:0:$((${#str} - {#}))}\"\
    \ |\n    tac", "    local res=()\n    local i=0\n    local len=${#1}\n    for\
    \ ((i=0; i < len; i++)); do\n        res+=(\"$(echo $1 | cut -c-$((i+1)) | awk\
    \ '{print \"\\\"\"$0\"\\\"\"}')\")\n    done\n    echo \"${res[@]}\"", "  local\
    \ str=\"$1\"\n  local n=$((${#str}))\n  local res=\"\"\n  for i in $(seq 1 $n);\
    \ do\n    res=\"$res $(printf '\"%s\"' \"${str:0:$i}\")\"\n  done\n  echo \"[${res:1}]\"",
  "    # Create the array of prefixes\n    local prefixes=()\n    local previous_prefix=\"\
    \"\n    for (( i=0; i<${#1}; i++ )); do\n        # Add the next character to the\
    \ previous prefix, then add to the array\n        local current_prefix=\"${previous_prefix}${1:$i:1}\"\
    \n        prefixes+=($current_prefix)\n        previous_prefix=$current_prefix\n\
    \    done\n\n    # The simplest way to return an array from a bash function is\
    \ by printing out\n    # space-separated elements of the array on stdout.\n  \
    \  # (see https://stackoverflow.com/a/15555652/1248551)\n    printf \"%s \" \"\
    ${prefixes[@]}\"", "    local str=$1\n    local char\n    local result=\"\"\n\
    \    local i\n    for ((i=0; i<${#str}; i++)); do\n        char=${str:$i:1}\n\
    \        result=\"$result, \\\"$char\\\"\"\n    done\n    echo \"[${result:1}]\"",
  "    local str=\"$1\"\n    echo \"[$(for ((i=1; i<=${#str}; i++)); do\n        echo\
    \ -n '\"'${str:0:i}'\"'\n        if (( i < ${#str} )); then\n            echo\
    \ -n \", \"\n        fi\n    done)]\"", "    echo $(pyenv exec python -c \"import\
    \ json; print(json.dumps(\\\"$1\\\".split(' ')))\")", "    for (( pos=1; pos <=\
    \ ${#1}; pos++ )); do\n        echo \"\\\"${1:0:pos}\\\"\"\n    done", "  local\
    \ PREFIXES_LIST\n  for (( i=0; i<${#1}; i++ )); do\n    PREFIXES_LIST=\"$PREFIXES_LIST'$(echo\
    \ \"$1\" | cut -c1-$((i+1)))', \"\n  done\n  PREFIXES_LIST=\"$(echo $PREFIXES_LIST\
    \ | cut -c 1-$((${#PREFIXES_LIST}-2)))\"\n  echo \"[$PREFIXES_LIST]\"", "    #\
    \ Keep splitting the string until we end up with nothing\n    prefixes=\"\"\n\
    \    while [[ -n \"$1\" ]]; do\n        prefixes=\"$prefixes$1, \"\n        #\
    \ Trim the last character off the string\n        # Equivalent to:\n        #\
    \   x=\"abc\"\n        #   x=\"${x%?}\"\n        #   echo \"$x\"\n        #  \
    \ ab\n        # Note that ## is greedy - it finds the longest possible match\n\
    \        1=\"${1%?}\"\n    done\n    # Remove the trailing comma and space\n \
    \   echo \"[$(echo \"$prefixes\" | sed 's/, $//')]\"", "    len=$((${#1} + 1))\n\
    \    range=$(seq 1 $len)\n    reversed=$(echo $range | tr \" \" \"\\n\" | tac\
    \ | tr \"\\n\" \" \")\n    python -c \"print([\\\"${1}\\\"[:i] for i in ${reversed}])\"",
  "    echo \"[$(for (( i=1; i<=${#1}; i++ )); do echo -n '\"'; echo -n \"${1:0:i}\"\
    ; echo -n '\", '; done)]\"", "  local input=$1\n  local length=${#input}\n  local\
    \ all_prefixes=()\n  for (( i=1; i<=$length; i++ )); do\n    all_prefixes+=(\"\
    \\\"${input:0:$i}\\\"\")\n  done\n  echo \"${all_prefixes[@]}\"", "  string=\"\
    $1\"\n  for ((i=0; i<${#string}; i++)); do\n    echo \"\\\"${string:0:$i}\\\"\"\
    \n  done", "    local words=(\"$@\")\n    for (( i=0; i<${#words[@]}; i++ ));\
    \ do\n        local dashes=\"\"\n        for (( j=0; j<i; j++ )); do\n       \
    \     dashes=\"${dashes}-\"\n        done\n        echo \"[\\\"${words[i]}\\\"\
    ]\"\n    done", "    jq -n --arg a \"$1\" --argjson len \"${#1}\" '[ range(0;\
    \ $len|tonumber) | . as $i | [$a[0:$i]] | tostring ]'", "  out=()\n  for (( i=0;\
    \ i < ${#1}; i++ )); do\n    out+=(\"\\\"${1:0:$i}\\\"\")\n  done\n  echo \"${out[@]}\""]
stop_tokens:
- "\n}"
