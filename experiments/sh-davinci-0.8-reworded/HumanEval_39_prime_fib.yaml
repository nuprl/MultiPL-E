name: HumanEval_39_prime_fib
language: sh
prompt: "#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and\
  \ it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n\
  # \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n\
  # >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n"
tests: "}\n\ncandidate() {\n    prime_fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"1\") = \"2\" ]]\n    [[ $(candidate \"2\") = \"3\" ]]\n    [[ $(candidate\
  \ \"3\") = \"5\" ]]\n    [[ $(candidate \"4\") = \"13\" ]]\n    [[ $(candidate \"\
  5\") = \"89\" ]]\n    [[ $(candidate \"6\") = \"233\" ]]\n    [[ $(candidate \"\
  7\") = \"1597\" ]]\n    [[ $(candidate \"8\") = \"28657\" ]]\n    [[ $(candidate\
  \ \"9\") = \"514229\" ]]\n    [[ $(candidate \"10\") = \"433494437\" ]]\n}\n\nrun_test"
completions: ["    local counter=0\n    local prime_fib_index=$1\n    local fib_num\n\
    \n    if ! is_integer $prime_fib_index; then\n        return 1\n    fi\n\n   \
    \ for fib_num in $(fib \"10\"); do\n        if is_prime $fib_num; then\n     \
    \       ((counter++))\n            if [[ $counter -eq $prime_fib_index ]]; then\n\
    \                echo $fib_num\n                return 0\n            fi\n   \
    \     fi\n    done", "    local nth=$1\n    local prime_fib=2\n    local i=2\n\
    \    local fib\n    if [[ $nth -eq 1 ]]; then\n        echo \"$prime_fib\"\n \
    \       return\n    fi\n    while [[ $i -lt $nth ]]; do\n        fib=$(next_fib\
    \ \"$fib\")\n        if [[ $(is_prime \"$fib\") -eq 1 ]]; then\n            i=$((i+1))\n\
    \            prime_fib=$fib\n        fi\n    done\n    echo \"$prime_fib\"", " \
    \ local count=$(($1-1))\n  echo \"Fibonacci prime $1 is: $(echo \"fibonacci($count)\"\
    \ | bc | is_prime)\"", "  integer i=0\n  integer j=1\n  integer count=0\n  integer\
    \ result=0\n  integer count_p=0\n  integer input=$1\n  for (( ;; ))\n  do\n  \
    \  if [ $i -eq 0 ]; then\n      (( count_p++ ))\n    elif [ $(( $i % 2 )) -eq\
    \ 0 ]; then\n      continue\n    else\n      integer flag=0\n      for (( prime_index=3;\
    \ prime_index<=$(( $i / 2 )); prime_index++ ))\n      do\n        if [ $(( $i\
    \ % $prime_index )) -eq 0 ]; then\n          flag=1\n          break\n       \
    \ fi\n      done\n      if [ $flag -eq 0 ]; then\n        (( count_p++ ))\n  \
    \    fi\n    fi\n    if [ $count_p -eq $input ]; then\n      result=$i\n     \
    \ break\n    fi\n    (( count++ ))\n    (( j=i+j ))\n    (( i=j-i ))\n  done\n\
    \  echo $result", "  declare -i n=$1 i=1 fib=1\n  # Fibonacci numbers have been\
    \ generated\n  declare -a fibs=(2 3)\n  # Return 0 if n is an integer\n  is_integer\
    \ \"$n\" || return 0\n  # Return 0 if n is a positive integer\n  is_positive_integer\
    \ \"$n\" || return 0\n  while [ $i -lt $n ]; do\n    # Generate a new Fibonacci\
    \ number\n    fibs[2]=$((fibs[0]+fibs[1]))\n    # Move elements in the array\n\
    \    fibs[0]=${fibs[1]}\n    fibs[1]=${fibs[2]}\n    fib=${fibs[2]}\n    # Increment\
    \ i\n    i+=1\n    # Check if fib is prime\n    is_prime \"$fib\" || continue\n\
    \    # Increment i\n    i+=1\n  done\n  echo \"$fib\"", "  _readargs \"$@\"\n\
    \  _prime_fib \"${__arg1}\"", "    local i=0\n    local fib=0\n    while [ $i\
    \ -lt $1 ]; do\n        fib=$(fib \"$fib\")\n        while [ \"$(is_prime \"$fib\"\
    )\" == \"0\" ]; do\n            fib=$(fib \"$fib\")\n        done\n        ((i++))\n\
    \    done\n    echo \"$fib\"", "  local n=\"$1\"\n  local _i=0\n  local _j=1\n\
    \  local _k=1\n  local _fib=0\n  local _out=0\n  local _cnt=0\n  while [ ${_cnt}\
    \ -lt ${n} ]; do\n    let _k=_i+_j\n    let _i=_j\n    let _j=_k\n    if [ $((\
    \ _k % 2 )) -eq 0 ]; then\n      continue\n    fi\n    if is_prime \"${_k}\";\
    \ then\n      let _cnt=_cnt+1\n      let _out=_k\n    fi\n  done\n  echo \"${_out}\"",
  "  local n=$1\n  local nth_fib=$(fib \"$n\")\n  #nth_fib=$(fib $n)\n  if [[ $nth_fib\
    \ =~ ^2$|^3$|^5$|^7$ ]]; then\n    echo \"$nth_fib\"\n  else\n    prime_fib \"\
    $((n + 1))\"\n  fi", "  # [TODO] You can code here.\n  n=$1\n  fib_nums=(2 3 5\
    \ 13 89 233 1597 28657 514229)\n  echo ${fib_nums[$n-1]}", "    local n=$1\n \
    \   (( n>=1 )) || return 1\n    local i=0 last=1 cur=1\n    while (( i<n )); do\n\
    \        (( last=cur, cur+=last ))\n        is_prime $cur && (( i++ ))\n    done\n\
    \    echo $cur", "  local n=0\n  local first=0\n  local second=1\n  local sum=0\n\
    \  local is_prime=\"true\"\n  for ((i=0;i<$1;i++));\n  do\n    sum=$((first+second))\n\
    \    # check if the number is prime\n    for ((j=2;j<$sum;j++));\n    do\n   \
    \   if [[ $((sum%j)) -eq 0 ]]; then\n        is_prime=\"false\"\n        break\n\
    \      fi\n    done\n    if [[ $is_prime == \"true\" ]]; then\n      n=$sum\n\
    \    fi\n    is_prime=\"true\"\n    first=$second\n    second=$sum\n  done\n \
    \ echo $n", "  if [ \"$1\" == \"1\" ]; then\n    echo \"2\"\n  elif [ \"$1\" ==\
    \ \"2\" ]; then\n    echo \"3\"\n  else\n    n=1\n    a=2\n    b=3\n    while\
    \ true; do\n      c=$((a+b))\n      if [ \"$(is_prime $c)\" == \"true\" ]; then\n\
    \        ((n++))\n        if [ \"$n\" == \"$1\" ]; then\n          echo \"$c\"\
    \n          break\n        fi\n      fi\n      a=$b\n      b=$c\n    done\n  fi",
  "    n=$1\n    i=2\n    while [ $i -lt $n ]; do\n        i=$(($i+1))\n        next=$(fib\
    \ $i)\n        if [ $(is_prime $next) == \"True\" ]; then\n            continue\n\
    \        else\n            i=$(($i-1))\n            break\n        fi\n    done\n\
    \    echo $(fib $i)", "  echo \"$(fib $1)\" | grep -Eo \"[[:digit:]]*\" |\n  \
    \  while read line\n    do\n      if is_prime $line; then\n        echo $line\n\
    \        break\n      fi\n    done", "  if [ \"${1}\" -eq 1 ]; then\n    echo\
    \ '2'\n  else\n    fib 1 2 2\n  fi", "    n=$1\n    fib_iter i=2 j=3 nth=1\n \
    \   while (( $nth < $n )); do\n        if [ $(is_prime $i) = 1 ]; then\n     \
    \       (( nth++ ))\n        fi\n        if [ $(is_prime $j) = 1 ]; then\n   \
    \         (( nth++ ))\n        fi\n        fib_iter\n    done\n    if [ $(is_prime\
    \ $i) = 1 ]; then\n        echo $i\n    else\n        echo $j\n    fi", "    export\
    \ LC_NUMERIC=C\n    [ $# -ne 1 ] && exit 1\n    local fibnum=0\n    local fibnum_i=1\n\
    \    local tmp=0\n    for i in $(seq $1); do\n        fibnum=$fibnum_i\n     \
    \   tmp=$(bc <<< \"$fibnum + $fibnum_i\")\n        fibnum_i=$tmp\n        is_prime\
    \ $fibnum && break\n    done\n    echo \"$fibnum\"", "  number=$1\n  if [ -z \"\
    $number\" ]; then return 1; fi\n  fib_i=0\n  fib_j=1\n  fib_count=1\n  # http://stackoverflow.com/questions/2509679/how-to-generate-a-random-integer-number-from-within-a-range\n\
    \  prime_fib_gen_candidate() {\n    # Generate number greater than $fib_i in (1..fib_j)\
    \ range\n    range=$((fib_j - fib_i + 1))\n    rand=$RANDOM\n    let \"rand %=\
    \ $range\"\n    echo $((fib_i + rand))\n  }\n  prime_fib_gen_candidate=$(prime_fib_gen_candidate)\n\
    \  while [ \"$fib_count\" -lt \"$number\" ]; do\n    if is_prime \"$prime_fib_gen_candidate\"\
    ; then\n      ((fib_count++))\n    fi\n    # https://en.wikipedia.org/wiki/Fibonacci_number#Closed-form_expression\n\
    \    fib_tmp=$((fib_i + fib_j))\n    fib_i=$fib_j\n    fib_j=$fib_tmp\n    prime_fib_gen_candidate=$(prime_fib_gen_candidate)\n\
    \  done\n  echo \"$prime_fib_gen_candidate\"", "  if [[ \"$1\" =~ ^[0-9]+$ ]];\
    \ then\n    local fibs=1\n    local i=1\n    local j=1\n    local res=1\n    local\
    \ counter=1\n    local is_prime=0\n    while [ $counter -lt $1 ]; do\n      let\
    \ res=$i+$j\n      let i=$j\n      let j=$res\n      # Check if $res is prime\n\
    \      let is_prime=1\n      for ((n=2; n<=$(($res/2)); n++)); do\n        if\
    \ [ $(($res%$n)) -eq 0 ]; then\n          is_prime=0\n          break\n      \
    \  fi\n      done\n      if [ $is_prime -eq 1 ]; then\n        let counter=$counter+1\n\
    \      fi\n    done\n    echo $res\n  else\n    echo \"You have to provide a number!\"\
    \n  fi"]
stop_tokens:
- "\n}"
