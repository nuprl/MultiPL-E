name: HumanEval_67_fruit_distribution
language: sh
prompt: "#!/bin/bash\n# In this task, you will be given a string that represents a\
  \ number of apples and oranges \n# that are distributed in a basket of fruit this\
  \ basket contains \n# apples, oranges, and mango fruits. Given the string that represents\
  \ the total number of \n# the oranges and apples and an integer that represent the\
  \ total number of the fruits \n# in the basket return the number of the mango fruits\
  \ in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\"\
  \ \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\"\
  )\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"\
  95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\
  \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n"
tests: "}\n\ncandidate() {\n    fruit_distribution \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"5 apples and 6 oranges\" \"19\") = \"8\" ]]\n    [[ $(candidate\
  \ \"5 apples and 6 oranges\" \"21\") = \"10\" ]]\n    [[ $(candidate \"0 apples\
  \ and 1 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 apples and 0 oranges\"\
  \ \"3\") = \"2\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"100\") = \"\
  95\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"5\") = \"0\" ]]\n    [[\
  \ $(candidate \"1 apples and 100 oranges\" \"120\") = \"19\" ]]\n}\n\nrun_test"
completions: ['', "    # Place your code below this line\n    # Place your code above\
    \ this line", "\tre='^[0-9]+$'\n\tif ! [[ $2 =~ $re ]] ; then\n\t\techo \"invalid\
    \ second argument\"\n\t\texit 1\n\tfi\n\tfor i in $(echo $1 | tr \" \" \"\\n\"\
    )\n\tdo\n\t\tif [[ $i =~ $re ]] ; then\n\t\t\techo \"$i\"\n\t\tfi\n\tdone > temp\n\
    \tapples=$(head -n 1 temp)\n\toranges=$(tail -n 1 temp)\n\techo $(($2 - $(($apples\
    \ + $oranges))))", "    # you code goes here...\n    apples=$(echo $1 | cut -d'\
    \ ' -f1)\n    oranges=$(echo $1 | cut -d' ' -f4)\n    total=$(echo \"$2 - $apples\
    \ - $oranges\" | bc)\n    echo $total", "    local str=$1\n    local total=$2\n\
    \    local apples=$(echo $str | grep -o -E '([0-9]+) apples' | cut -d ' ' -f 1)\n\
    \    local oranges=$(echo $str | grep -o -E '([0-9]+) oranges' | cut -d ' ' -f\
    \ 1)\n    if [[ $apples =~ [0-9]+ ]] && [[ $oranges =~ [0-9]+ ]]; then\n     \
    \   echo $((total - apples - oranges))\n    else\n        echo \"invalid input\"\
    \n    fi", "    python3 -c \"print($2 - (int('$1'.split()[0]) + int('$1'.split()[3])))\"",
  "\techo \"$2\" - $(echo \"$1\" | awk -F ' ' '{print $1 + $3}')", "\tlocal string=$1\n\
    \tlocal total=$2\n\tstring=$(echo $string | tr 'a-z' 'A-Z')\n\tlocal apples=$(echo\
    \ $string | grep -o -E '[0-9]+' -m 1)\n\tlocal oranges=$(echo $string | grep -o\
    \ -E '[0-9]+' -m 2)\n\tlocal mangoes=$(($total - $apples - $oranges))\n\techo\
    \ $mangoes", "  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n    echo \"NULL\"\n \
    \   return\n  fi\n  apple=$(echo $1 | cut -d' ' -f1)\n  orange=$(echo $1 | cut\
    \ -d' ' -f3)\n  total=$(($apple + $orange))\n  if [ $total -gt $2 ]; then\n  \
    \  echo \"NULL\"\n    return\n  fi\n  echo $(($2 - $total))", "    total_fruit=$2\n\
    \    fruit_info=$1\n    fruit_info=${fruit_info/ and /}\n    IFS=\" \";\n    for\
    \ fruit in $fruit_info; do\n        total_fruit=$((total_fruit - fruit))\n   \
    \ done\n    echo $total_fruit", '    echo "not implemented"', '    # YOUR CODE
    HERE', "    echo -n $(( $2 - `echo $1 | cut -d' ' -f 1 | sed 's/[a-z]//g'` - `echo\
    \ $1 | cut -d' ' -f 4 | sed 's/[a-z]//g'`))", "    array=($(echo $1 | sed 's/[^0-9]/\
    \ /g'))\n    echo $(($2 - ${array[0]} - ${array[1]}))", "    echo $(($2 - $(echo\
    \ $1 | tr -d ' ' | tr -cd '0123456789')))", '    # Write your solution here',
  "    a_count=$(echo $1 | cut -d ' ' -f 1)\n    o_count=$(echo $1 | cut -d ' ' -f\
    \ 5)\n    m_count=$(($2 - $(($a_count + $o_count))))\n    echo $m_count", "  #\
    \ when $2 is 0, the result must be 0\n  if [ $2 -eq 0 ]; then\n    echo \"0\"\n\
    \    return 0\n  fi\n  # number of apples\n  n_apples=$(echo $1 | grep -o \" [0-9]*\
    \ apples\" | grep -o \"[0-9]*\")\n  # number of oranges\n  n_oranges=$(echo $1\
    \ | grep -o \" [0-9]* oranges\" | grep -o \"[0-9]*\")\n  # number of mango\n \
    \ n_mango=$(($2 - ($n_apples + $n_oranges)))\n  #\n  if [ $n_mango -lt 0 ]; then\n\
    \    echo \"Error: Number of fruits is less than the count of apples and oranges.\"\
    \n    return 1\n  fi\n  echo $n_mango\n  return 0", '    # write your code here',
  "    local count_apples=$(echo $1 | grep -Eo \"\\b[0-9]+\\b\" | sed -n 1p)\n   \
    \ local count_oranges=$(echo $1 | grep -Eo \"\\b[0-9]+\\b\" | sed -n 2p)\n   \
    \ local total_fruits=$(($2 - $(($count_apples + $count_oranges))))\n    echo $total_fruits"]
stop_tokens:
- "\n}"
