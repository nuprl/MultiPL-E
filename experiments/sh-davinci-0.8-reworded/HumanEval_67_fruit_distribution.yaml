name: HumanEval_67_fruit_distribution
language: sh
prompt: "#!/bin/bash\n# In this task, you will be given a string that represents a\
  \ number of apples and oranges \n# that are distributed in a basket of fruit this\
  \ basket contains \n# apples, oranges, and mango fruits. Given the string that represents\
  \ the total number of \n# the oranges and apples and an integer that represent the\
  \ total number of the fruits \n# in the basket return the number of the mango fruits\
  \ in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\"\
  \ \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\"\
  )\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"\
  95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\
  \n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n"
tests: "}\n\ncandidate() {\n    fruit_distribution \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"5 apples and 6 oranges\" \"19\") = \"8\" ]]\n    [[ $(candidate\
  \ \"5 apples and 6 oranges\" \"21\") = \"10\" ]]\n    [[ $(candidate \"0 apples\
  \ and 1 oranges\" \"3\") = \"2\" ]]\n    [[ $(candidate \"1 apples and 0 oranges\"\
  \ \"3\") = \"2\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"100\") = \"\
  95\" ]]\n    [[ $(candidate \"2 apples and 3 oranges\" \"5\") = \"0\" ]]\n    [[\
  \ $(candidate \"1 apples and 100 oranges\" \"120\") = \"19\" ]]\n}\n\nrun_test"
completions: ['', "    # Place your code below this line\n    # Place your code above\
    \ this line", "\tre='^[0-9]+$'\n\tif ! [[ $2 =~ $re ]] ; then\n\t\techo \"invalid\
    \ second argument\"\n\t\texit 1\n\tfi\n\tfor i in $(echo $1 | tr \" \" \"\\n\"\
    )\n\tdo\n\t\tif [[ $i =~ $re ]] ; then\n\t\t\techo \"$i\"\n\t\tfi\n\tdone > temp\n\
    \tapples=$(head -n 1 temp)\n\toranges=$(tail -n 1 temp)\n\techo $(($2 - $(($apples\
    \ + $oranges))))", "    # you code goes here...\n    apples=$(echo $1 | cut -d'\
    \ ' -f1)\n    oranges=$(echo $1 | cut -d' ' -f4)\n    total=$(echo \"$2 - $apples\
    \ - $oranges\" | bc)\n    echo $total", "    local str=$1\n    local total=$2\n\
    \    local apples=$(echo $str | grep -o -E '([0-9]+) apples' | cut -d ' ' -f 1)\n\
    \    local oranges=$(echo $str | grep -o -E '([0-9]+) oranges' | cut -d ' ' -f\
    \ 1)\n    if [[ $apples =~ [0-9]+ ]] && [[ $oranges =~ [0-9]+ ]]; then\n     \
    \   echo $((total - apples - oranges))\n    else\n        echo \"invalid input\"\
    \n    fi", "    python3 -c \"print($2 - (int('$1'.split()[0]) + int('$1'.split()[3])))\"",
  "\techo \"$2\" - $(echo \"$1\" | awk -F ' ' '{print $1 + $3}')", "\tlocal string=$1\n\
    \tlocal total=$2\n\tstring=$(echo $string | tr 'a-z' 'A-Z')\n\tlocal apples=$(echo\
    \ $string | grep -o -E '[0-9]+' -m 1)\n\tlocal oranges=$(echo $string | grep -o\
    \ -E '[0-9]+' -m 2)\n\tlocal mangoes=$(($total - $apples - $oranges))\n\techo\
    \ $mangoes", "  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n    echo \"NULL\"\n \
    \   return\n  fi\n  apple=$(echo $1 | cut -d' ' -f1)\n  orange=$(echo $1 | cut\
    \ -d' ' -f3)\n  total=$(($apple + $orange))\n  if [ $total -gt $2 ]; then\n  \
    \  echo \"NULL\"\n    return\n  fi\n  echo $(($2 - $total))", "    total_fruit=$2\n\
    \    fruit_info=$1\n    fruit_info=${fruit_info/ and /}\n    IFS=\" \";\n    for\
    \ fruit in $fruit_info; do\n        total_fruit=$((total_fruit - fruit))\n   \
    \ done\n    echo $total_fruit", '    echo "not implemented"', '    # YOUR CODE
    HERE', "    echo -n $(( $2 - `echo $1 | cut -d' ' -f 1 | sed 's/[a-z]//g'` - `echo\
    \ $1 | cut -d' ' -f 4 | sed 's/[a-z]//g'`))", "    array=($(echo $1 | sed 's/[^0-9]/\
    \ /g'))\n    echo $(($2 - ${array[0]} - ${array[1]}))", "    echo $(($2 - $(echo\
    \ $1 | tr -d ' ' | tr -cd '0123456789')))", '    # Write your solution here',
  "    a_count=$(echo $1 | cut -d ' ' -f 1)\n    o_count=$(echo $1 | cut -d ' ' -f\
    \ 5)\n    m_count=$(($2 - $(($a_count + $o_count))))\n    echo $m_count", "  #\
    \ when $2 is 0, the result must be 0\n  if [ $2 -eq 0 ]; then\n    echo \"0\"\n\
    \    return 0\n  fi\n  # number of apples\n  n_apples=$(echo $1 | grep -o \" [0-9]*\
    \ apples\" | grep -o \"[0-9]*\")\n  # number of oranges\n  n_oranges=$(echo $1\
    \ | grep -o \" [0-9]* oranges\" | grep -o \"[0-9]*\")\n  # number of mango\n \
    \ n_mango=$(($2 - ($n_apples + $n_oranges)))\n  #\n  if [ $n_mango -lt 0 ]; then\n\
    \    echo \"Error: Number of fruits is less than the count of apples and oranges.\"\
    \n    return 1\n  fi\n  echo $n_mango\n  return 0", '    # write your code here',
  "    local count_apples=$(echo $1 | grep -Eo \"\\b[0-9]+\\b\" | sed -n 1p)\n   \
    \ local count_oranges=$(echo $1 | grep -Eo \"\\b[0-9]+\\b\" | sed -n 2p)\n   \
    \ local total_fruits=$(($2 - $(($count_apples + $count_oranges))))\n    echo $total_fruits",
  "    total_number=$(echo $1 | cut -d ' ' -f1 | sed 's/[^0-9]*//g')\n    total_number=$((\
    \ $total_number + $(echo $1 | cut -d ' ' -f3 | sed 's/[^0-9]*//g') ))\n    echo\
    \ $(( $2 - $total_number ))", "    if [[ -z $1 ]] || [[ -z $2 ]]; then\n     \
    \   echo \"Error: You must provide two arguments to this script.\"\n        exit\
    \ 1\n    fi\n    if [[ ! \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Error: The\
    \ second argument must be an integer.\"\n        exit 1\n    fi\n    if [[ ! \"\
    $1\" =~ ^[0-9]+[ ]*[a-z]+[ ]*[a-z]+[ ]*[0-9]+[ ]*[a-z]+[ ]*[a-z]+$ ]]; then\n\
    \        echo \"Error: The first argument must be a string in the form <int> <singluar\
    \ noun> <plural noun> <int> <singluar noun> <plural noun>.\"\n        exit 1\n\
    \    fi\n    local first_part=$(echo $1 | awk '{print $1}')\n    local second_part=$(echo\
    \ $1 | awk '{print $6}')\n    local total_fruits=$(($second_part + $first_part))\n\
    \    local result=$(($2 - $total_fruits))\n    echo $result", "\tlocal apples=$(echo\
    \ $1 | sed -E \"s/([0-9]+) apples and ([0-9]+) oranges/\\1/\")\n\tlocal oranges=$(echo\
    \ $1 | sed -E \"s/([0-9]+) apples and ([0-9]+) oranges/\\2/\")\n\tlocal total=$(($apples\
    \ + $oranges))\n\tlocal mango=$(($2 - $total))\n\techo $mango", "    # Write your\
    \ code here\n    echo \"100\"", "  apple_count=`echo $1 | grep -o \"^[0-9]*\"\
    `\n  orange_count=`echo $1 | grep -o \"[0-9]* oranges\" | grep -o \"[0-9]*\"`\n\
    \  printf $[$2 - $apple_count - $orange_count]", "    local apples=$(echo $1 |\
    \ grep -o \"^[0-9]* apples\" | grep -o [0-9]*)\n    local oranges=$(echo $1 |\
    \ grep -o \"and [0-9]* oranges\" | grep -o [0-9]*)\n    local mangos=$(($2 - $apples\
    \ - $oranges))\n    echo $mangos", "    # Write your code here ...\n    fruit=$1\n\
    \    basket=$2\n    length=${#fruit}\n    num_apples=$(echo $fruit | cut -d \"\
    \ \" -f 1)\n    num_oranges=$(echo $fruit | cut -d \" \" -f 5)\n    num_mangoes=$(($basket-$num_apples-$num_oranges))\n\
    \    echo $num_mangoes\n    # Test example\n    # echo \"5 apples and 6 oranges\"\
    \ | cut -d \" \" -f 1\n    # echo \"5 apples and 6 oranges\" | cut -d \" \" -f\
    \ 5", "  local total=$(echo $1 | grep -o \"[0-9]*\")\n  local num_apples=$(echo\
    \ $1 | grep -o \"[0-9]*\" | head -1)\n  local num_oranges=$(echo $1 | grep -o\
    \ \"[0-9]*\" | tail -1)\n  local mangoes=$(echo \"$total + $num_apples + $num_oranges\"\
    \ | bc)\n  echo $(( $2 - $mangoes ))", "    if [[ $# -eq 2 ]]; then\n        local\
    \ total=${1#* }\n        local basket_size=$2\n        local ratio=$(echo $total/0.${total#*\
    \ }*1 | bc -l)\n        echo $((basket_size-total))\n    else\n        echo \"\
    It requires two arguments to run this function.\"\n    fi", "    s=$1\n    str_apples=$(echo\
    \ $s | cut -d' ' -f1)\n    str_oranges=$(echo $s | cut -d' ' -f4)\n    (( num_apples\
    \ = str_apples + str_oranges ))\n    (( num_mangoes = $2 - num_apples ))\n   \
    \ echo $num_mangoes", "\t# Count apples and oranges:\n\tcount_apples=$(grep -o\
    \ -E \"^\\d+ apples\" <<< $1 | grep -o -E \"\\d+\")\n\tcount_oranges=$(grep -o\
    \ -E \"^\\d+ oranges\" <<< $1 | grep -o -E \"\\d+\")\n\tcount_fruits=$(($count_apples\
    \ + $count_oranges))\n\t\n\t# The number of mangoes can now be calculated:\n\t\
    echo $(($2 - $count_fruits))", "    local f=$(echo $1 | cut -d' ' -f 1)\n    local\
    \ f_num=$(echo $1 | cut -d' ' -f 2)\n    local t=$(echo $1 | cut -d' ' -f 3)\n\
    \    local t_num=$(echo $1 | cut -d' ' -f 4)\n    local total_num=$(echo $1 |\
    \ cut -d' ' -f 6)\n    local basket_num=$2\n    let \"other_num = $basket_num\
    \ - $total_num\"\n    echo \"$other_num\"", "\tif [[ $# -ne 2 ]]; then\n\t\treturn\
    \ 1\n\tfi\n\tfruits=${1//[a-zA-Z ,and]/}\n\tif [[ ${#fruits} -ne 2 ]]; then\n\t\
    \treturn 1\n\tfi\n\tlet basket=${2}-${fruits[@]:0:1}-${fruits[@]:1:1}\n\tif [[\
    \ $basket -lt 0 ]]; then\n\t\treturn 1\n\tfi\n\techo \"$basket\"", "    echo $1\
    \ | sed 's/\\([0-9]*\\) apples and \\([0-9]*\\) oranges/\\1 \\2/' | {\n      \
    \  read apples oranges\n        echo $(($2 - $apples - $oranges))\n    }", "\t\
    # TODO: your implementation here\n\techo 0", '  ((  $((${1//[a-z ]/})) % 2 ))
    && echo $(($2 - 2)) || echo $(($2 - 1))', "    # get the first two words from\
    \ the first argument\n    # and seperate them with an equals sign\n    apples_and_oranges=\"\
    $(echo $1 | awk '{print $1\"=\"$2}')\"\n    # get the integer representation of\
    \ apples\n    apples=$(echo $apples_and_oranges | awk -F '=' '{print $1}')\n \
    \   # get the integer representation of oranges\n    oranges=$(echo $apples_and_oranges\
    \ | awk -F '=' '{print $2}')\n    # Calculate the number of mango fruits\n   \
    \ mango_fruits=$(expr $2 - $apples - $oranges)\n    # return the result\n    echo\
    \ $mango_fruits", '    # Write your code here', "\t#\n\t# Write your code here\n\
    \t#\n\n\t# check if the first argument is an integer\n\tcase $1 in\n\t    ''|*[!0-9]*)\
    \ ;;\n\t    *) return -1;;\n\tesac\n\n\t# check if the second argument is an integer\n\
    \tcase $2 in\n\t    ''|*[!0-9]*) ;;\n\t    *) return -1;;\n\tesac\n\n\t# split\
    \ the first argument into apples and oranges \n\tIFS=' ' read -ra ADDR <<< \"\
    $1\"\n\t# extract the number of apples\n\tapples=${ADDR[0]}\n\t# extract the number\
    \ of oranges\n\toranges=${ADDR[3]}\n\n\t# print the number of mangoes\n\techo\
    \ $(( $2 - $apples - $oranges ))", "    local temp_file=`mktemp`\n    local counter=0\n\
    \    local apples=0\n    local oranges=0\n    local mangoes=0\n    echo $1 | sed\
    \ -e 's/apples/\\napples/g' -e 's/oranges/\\noranges/g' > $temp_file\n    while\
    \ read line\n    do\n        if [[ $line == \"apples\" ]]\n        then\n    \
    \        let apples+=1\n        fi\n        if [[ $line == \"oranges\" ]]\n  \
    \      then\n            let oranges+=1\n        fi\n    done < $temp_file\n \
    \   let mangoes=$2-apples-oranges\n    echo $mangoes", "    echo \"fruit_distribution\
    \ hasn't been implemented yet\"", "\t# your code here\n\ttotal=$(echo $1 | cut\
    \ -d \" \" -f1)\n\ttotal=$((total + $(echo $1 | cut -d \" \" -f4)))\n\techo $((total-2))",
  "    NUMBER_OF_FRUITS=$(echo $1 | cut -d ' ' -f 1)\n    NUMBER_OF_FRUITS=$(($NUMBER_OF_FRUITS\
    \ + $(echo $1 | cut -d ' ' -f 4)))\n    NUMBER_OF_MANGOES=$(($2 - $NUMBER_OF_FRUITS))\n\
    \    echo $NUMBER_OF_MANGOES", "  string=$1\n  int=$2\n  declare -i sum\n  declare\
    \ -i orange\n  declare -i apple\n  declare -i mango\n  declare -i total\n  sum=$(echo\
    \ $string | cut -d \" \" -f 1)\n  sum=$((sum+$(echo $string | cut -d \" \" -f\
    \ 4)))\n  total=$int\n  mango=$(($total-$sum))\n  echo $mango", '    echo $2 -
    $(echo $1 | grep -o "[0-9]*") | bc', "\t#TODO: insert your solution here\n\techo\
    \ \"To be implemented\"", "    # Write your code here...\n    # get the numbers\
    \ of apples and oranges from the first argument.\n    # add the numbers.\n   \
    \ # substract the result of the addition from the second argument.\n    # return\
    \ the result.\n    echo $(( $2 - ${1/ / +} ))", "    local apples=`echo $1 | sed\
    \ -n 's/^\\([0-9]*\\) apples.*/\\1/p'`\n    local oranges=`echo $1 | sed -n 's/^[0-9]*\
    \ apples and \\([0-9]*\\) oranges.*/\\1/p'`\n    local mangoes=$(( $2 - ($apples\
    \ + $oranges) ))\n    echo $mangoes", "\t# Get number of fruits\n\tfruits=$(echo\
    \ $1 | cut -d \" \" -f 4 | tr -d \"a-z\")\n\t# Get number of apples\n\tapples=$(echo\
    \ $1 | cut -d \" \" -f 1 | tr -d \"a-z\")\n\t# Get number of oranges\n\toranges=$(echo\
    \ $1 | cut -d \" \" -f 3 | tr -d \"a-z\")\n\t# Calculate number of mango fruits\n\
    \tmango=$(($2 - $fruits))\n\t# Return number of mango fruits\n\techo $mango",
  "    # Print your answer\n    echo $(($2 - (echo $1 | grep -o \"apple\" | wc -l)\
    \ - (echo $1 | grep -o \"orange\" | wc -l)))", "    apples=$(echo $1 | cut -d\
    \ ' ' -f 1)\n    oranges=$(echo $1 | cut -d ' ' -f 4)\n    echo $(( $2 - $apples\
    \ - $oranges ))", "    # shellcheck disable=SC2086\n    local apples=$(echo $1\
    \ | sed -E 's/[0-9]+ apples.*//')\n    # shellcheck disable=SC2086\n    local\
    \ oranges=$(echo $1 | sed -E 's/.*[0-9]+ oranges//')\n    local sum=$(( apples\
    \ + oranges ))\n    echo $(( $2 - sum ))", "    #your code here\n    res1=${1%%\
    \ apples*}\n    res2=${1% oranges*}\n    res2=${res2##* and }\n    let res=$2-res1-res2\n\
    \    echo $res", "    local apples=$(echo $1 | cut -d' ' -f1)\n    local oranges=$(echo\
    \ $1 | cut -d' ' -f4)\n    let \"mangoes = $2 - ($apples + $oranges)\"\n    echo\
    \ $mangoes", "\tif [[ ! \"$1\" =~ ^[0-9]+[[:space:]]apples[[:space:]]and[[:space:]][0-9]+[[:space:]]oranges$\
    \ ]]; then\n\t\techo \"Error: first parameter has wrong format\"\n\t\texit 1\n\
    \tfi\n\t\n\tif [[ ! \"$2\" =~ ^[0-9]+$ ]]; then\n\t\techo \"Error: second parameter\
    \ is not an integer\"\n\t\texit 1\n\tfi\n\t\n\t#f=${1//[[:alpha:]]/}\n\tf=($(echo\
    \ $1 | tr -d 'a-z' | tr -d 'A-Z' | tr -d ' '))\n\t\n\tif [[ ${#f[@]} -eq 0 ]];\
    \ then\n\t\techo \"Error: first parameter has wrong format\"\n\t\texit 1\n\tfi\n\
    \t\n\t# echo $f\n\t# echo ${f[1]}\n\t\n\techo $(($2-${f[0]}-${f[1]}))", "    #\
    \ write your code here\n    ", "\tlocal apples=$(echo $1 | cut -d' ' -f1)\n\t\
    local oranges=$(echo $1 | cut -d' ' -f4)\n\tlocal fruit=$(($2 - ( $apples + $oranges\
    \ )))\n\techo $fruit", "  set -f\n  # write down your code here", "    # Write\
    \ your code here\n    let x=0\n    let y=0\n    set -- $(echo $1 | tr \" and \"\
    \ \"\\n\")\n    x=$1\n    y=$2\n    let z=$2-$1-$1\n    echo $z\n    # End of\
    \ code", "    if [ $# -ne 2 ]; then\n        echo \"Usage: fruit_distribution\
    \ <string> <integer>\"\n        return 1\n    fi\n    # Your code here.\n    #\
    \ Remember to echo the answer to the function.\n    local apples=$(echo $1 | cut\
    \ -d' ' -f1)\n    local oranges=$(echo $1 | cut -d' ' -f3)\n    let mangoes=$2-apples-oranges\n\
    \    echo $mangoes", "\tlocal string=$1\n\tlocal number=$2\n\tlocal apples=${string%\
    \ apples*}\n\tlocal oranges=${string#*and }\n\tlocal oranges=${oranges% oranges*}\n\
    \tlocal mangoes=$(($number-($apples+$oranges)))\n\techo $mangoes", "\t#####\n\t\
    # Your code here\n\t#####", "\t# Write your code here.", "    # insert your code\
    \ here\n    # python solution\n    # \n    # a, o = map(int, $1.split(\" \")[::2])\n\
    \    # print(str($2 - a - o))\n    #\n    # bash solution\n    # apples_and_oranges=$(echo\
    \ $1 | sed 's/and/ /g')\n    # read -a f <<< \"${apples_and_oranges}\"\n    #\
    \ echo \"$((f[4] - (f[1] + f[3])))\"\n    #\n    # ruby solution\n    # apples,\
    \ oranges = $1.split(\" \")[0..1]\n    # puts $2 - apples.to_i - oranges.to_i\n\
    \    #\n    # perl solution\n    # my ($apples, $oranges) = $1 =~ /([0-9]+) apples\
    \ and ([0-9]+) oranges/;\n    # printf \"%d\\n\", $2 - $apples - $oranges;\n \
    \   #\n    # php solution\n    # list($a, $o) = explode(\" \", $1);\n    # echo\
    \ $2 - $a - $o;\n    #\n    # lua solution\n    # print($2 - $1:match(\"(%d+)\
    \ apples and (%d+) oranges\"):gsub(\" \", \"\"))\n    #\n    # nodejs solution\n\
    \    # var [a, o] = $1.split(\" \");\n    # console.log($2 - a - o);\n    #\n\
    \    # go solution\n    # applesAndOranges := strings.Split($1, \" \")\n    #\
    \ fmt.Println($2 - (atoi(applesAndOranges[0]) + atoi(applesAndOranges[3])))\n\
    \    #\n    # rust solution\n    # fn main() {\n    #     let mut it = $1.split_whitespace();\n\
    \    #     let [a, o] = [it.next().unwrap(), it.nth(3).unwrap()];\n    #     println!(\"\
    {}\", $2 - a.parse::<i32>().unwrap() - o.parse::<i32>().unwrap());\n    # }\n",
  "    # Write your solution here\n    words=($1)\n    oranges=${words[3]}\n    apples=${words[0]}\n\
    \    let mangoes=$2-($oranges+$apples)\n    echo $mangoes", '    echo $(($2-$(grep
    -o "[0-9]*" <<< $1 | paste -sd+ | bc)))', '  # your code here', "    #TODO: Write\
    \ your solution here\n    # An example of how to use this is provided in the task\n\
    \    # description below.\n    # use $( to separate command from variables to\
    \ avoid parsing errors\n    echo \"$2-${1%apples*}-${1#*and }\" | bc", "    [\
    \ $# -eq 2 ] || return 1\n    local __fruits_string=$1\n    local __fruits_string_splited=(\
    \ $(echo $__fruits_string | tr ' ' '\\n') )\n    local __fruits_in_basket=$2\n\
    \    local __result\n    local -i __apple_num\n    local -i __orange_num\n   \
    \ local -i __mango_num\n    if [[ \"${__fruits_string_splited[0]}\" =~ ^[0-9]+$\
    \ ]]; then\n        __apple_num=${__fruits_string_splited[0]}\n    else\n    \
    \    return 1\n    fi\n    if [[ \"${__fruits_string_splited[2]}\" =~ ^[0-9]+$\
    \ ]]; then\n        __orange_num=${__fruits_string_splited[2]}\n    else\n   \
    \     return 1\n    fi\n    if [[ ! \"$__fruits_in_basket\" =~ ^[0-9]+$ ]]; then\n\
    \        return 1\n    fi\n    __mango_num=$((__fruits_in_basket-__apple_num-__orange_num))\n\
    \    echo $__mango_num", "\tapples=${1%% *} # Get the number of apples\n\toranges=${1##*\
    \ } # Get the number of oranges\n\techo $((2*$2-$apples-$oranges)) # total_fruit_in_basket\
    \ - apples - oranges", "\techo $1 | sed -E 's/([0-9]+) apples and ([0-9]+) oranges/\\\
    1 + \\2/'", "    # split and remove 'apples' and 'oranges' from input and store\
    \ the result in\n    # array as an array\n    local array=(${1//[a-zA-Z ]/ })\n\
    \    # sum the items in the array and subtract it from the second input and print\n\
    \    # the result\n    echo $(( $2 - $(printf \"%s\\n\" \"${array[@]}\" | paste\
    \ -sd+ -) ))", "    # get total number of apples and oranges from the given string\
    \ using Regex\n    # and save them in variables\n    #\n    # ****************\
    \ WRITE YOUR CODE HERE ****************\n    local apples_and_oranges=$(echo $1\
    \ | grep -oP \"\\d+\")\n    local apples=$(echo $apples_and_oranges | cut -d \"\
    \ \" -f 1)\n    local oranges=$(echo $apples_and_oranges | cut -d \" \" -f 2)\n\
    \    local total_apples_and_oranges=$(($apples + $oranges))\n    # now make the\
    \ calculation\n    # **************** WRITE YOUR CODE HERE ****************\n\
    \    echo $(($2 - $total_apples_and_oranges))", "    apples=$(echo $1 | cut -d\
    \ \" \" -f 1)\n    oranges=$(echo $1 | cut -d \" \" -f 4)\n    diff=$(($2 - $(($apples\
    \ + $oranges))))\n    echo $diff", "\t# write your code here\n    local apple=`echo\
    \ $1 | cut -d \" \" -f 1`\n    local orange=`echo $1 | cut -d \" \" -f 5`\n  \
    \  mango=$(( $2 - $apple - $orange ))\n    echo $mango", "\tlocal a=$(echo $1\
    \ | grep -o \"^[0-9]*\")\n\tlocal b=$(echo $1 | grep -o \"[0-9]*$\")\n\techo $((\
    \ $2 - $a - $b ))", "    # your solution here\n    local str=\"$1\"\n    num=$(echo\
    \ \"$1\" | grep -o -E '[0-9]+' | head -1)\n    (( num++ ))\n    local int=$2\n\
    \    diff=$(( int - num ))\n    echo \"$diff\"", "\tif [ -z \"$1\" ] || [ -z \"\
    $2\" ]; then\n\t\treturn 1\n\tfi\n\techo $1 | awk -v integer=\"$2\" '{\n\t\tsplit($0,w,\"\
    \ \");\n\t\tsum = integer - (w[1] + w[4]);\n\t\tprint sum;\n\t}'", "    apples=$(echo\
    \ $1 | cut -d \" \" -f 1)\n    oranges=$(echo $1 | cut -d \" \" -f 4)\n    mangoes=$((\
    \ $2 - $apples - $oranges ))\n    echo $mangoes", "\t# Your code here", "  local\
    \ string=$1\n  local total_fruits=$2\n  local apples=$(echo $string | cut -d '\
    \ ' -f 1)\n  local oranges=$(echo $string | cut -d ' ' -f 4)\n  # your code goes\
    \ here", "    SUM=$(echo $1 | tr -d -c [:digit:])\n    echo $(( ($2 - SUM) ))",
  "\t# Write your solution here\n\techo ${1}\n\techo ${2}", "    # your code here\n\
    \    local fruits=\"${1//[^0-9]/ }\"\n    local total=$2\n    local fruits_total=0\n\
    \    for i in $fruits\n    do\n        ((fruits_total+=i))\n    done\n    echo\
    \ $((total-fruits_total))", "    local apples=$(echo $1 | sed 's/\\([0-9]\\+\\\
    ) apples.*/\\1/')\n    local oranges=$(echo $1 | sed 's/.* oranges and \\([0-9]\\\
    +\\)$/\\1/')\n    echo $(( $2 - ( $apples + $oranges ) ))", "\t# your code here",
  "\t# Write your code here\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\t# ...\n\
    \t# ...\n\t# ...\n\t# ...\n", "    echo \"$2 - $(echo $1 | sed 's/[^0-9]/ /g'\
    \ | awk '{print $1 + $2}')\" | bc", '', "\t# write your code here\n\t# do not\
    \ change the function name\n\ta=\"$1\"\n\tcount=0\n\t#for word in $a\n\t#do\n\t\
    #\tcount=$((count+1))\n\t#done\n\t#echo $count\n\techo \"$a\" | grep -E -o '[0-9]+'\
    \ | while read num; do count=$((count+num)); done\n\t#if [ $count -eq 0 ]\n\t\
    #then\n\t#\techo \"0\"\n\t#else\n\t#\techo \"$(( $2 - $count ))\"\n\t#fi\n\techo\
    \ \"$(( $2 - $count ))\"", "  local str=$1\n  local total=$2\n  local totalApples=`echo\
    \ \"$str\" | awk '{split($0,a,\" \"); print a[1]}'`\n  local totalOranges=`echo\
    \ \"$str\" | awk '{split($0,a,\" \"); print a[4]}'`\n  local totalFruits=$(($totalApples\
    \ + $totalOranges))\n  echo \"$(($total - $totalFruits))\"", "    arr=($(echo\
    \ $1 | tr ' ' '\\n'))\n    echo $2 - ${arr[0]} - ${arr[2]}", "\t# TODO: write\
    \ code here\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t",
  "  # Write your code here\n  # You can use the echo builtin command to return a\
    \ string\n  # that will be evaluated by the verifier.\n  #\n  # For example:\n\
    \  # echo \"1\"\n  # echo \"2\"\n  # echo \"3\"\n  # echo \"4\"\n  # echo \"5\"\
    \n  # echo \"6\"\n  # echo \"7\"\n  # echo \"8\"\n  # echo \"9\"\n  # echo \"\
    10\"\n  # echo \"11\"\n  # echo \"12\"\n  # echo \"13\"\n  # echo \"14\"\n  #\
    \ echo \"15\"\n  # echo \"16\"\n  # echo \"17\"\n  # echo \"18\"\n  # echo \"\
    19\"\n  # echo \"20\"\n  # echo \"21\"\n  # echo \"22\"\n  # echo \"23\"\n  #\
    \ echo \"24\"\n  # echo \"25\"\n  # echo \"26\"\n  # echo \"27\"\n  # echo \"\
    28\"\n  # echo \"29\"\n  # echo \"30\"\n  # echo \"31\"\n  # echo \"32\"\n  #\
    \ echo \"33\"\n  # echo \"34\"\n  # echo \"35\"\n  # echo \"36\"\n  # echo \"\
    37\"\n  # echo \"38\"\n  # echo \"39\"\n  # echo \"40\"\n  # echo \"41\"\n  #\
    \ echo \"42\"\n  # echo \"43\"\n  # echo \"44\"\n  # echo \"45\"\n  # echo \"\
    46\"\n  # echo \"47\"\n  # echo \"48\"\n  # echo \"49\"\n  # echo \"50\"\n  #\
    \ echo \"51\"\n  # echo \"52\"\n  # echo \"53\"\n  # echo \"54\"\n  # echo \"\
    55\"\n  # echo \"56\"\n  # echo \"57\"\n  # echo \"58\"\n  # echo \"59\"\n  #\
    \ echo \"60\"\n  # echo \"61\"\n  # echo \"62\"\n  # echo \"63\"\n  # echo \"\
    64\"\n  # echo \"65\"\n  # echo \"66\"\n  # echo \"67\"", "  numbers=($(echo $1\
    \ | sed 's/[a-z]/ /g'))\n  number_of_apples=${numbers[0]}\n  number_of_oranges=${numbers[1]}\n\
    \  total_fruits=$2\n  number_of_mangoes=$((total_fruits - number_of_apples - number_of_oranges))\n\
    \  echo $number_of_mangoes", "    # TODO: Complete the code here\n    echo \"\
    Not Implemented\"", "    [[ $# -ne 2 ]] && echo \"Error\"\n    [[ $2 -eq 0 ]]\
    \ && echo \"Error\"\n    apples=$(echo $1 | cut -d \" \" -f 1)\n    oranges=$(echo\
    \ $1 | cut -d \" \" -f 4)\n    total=$(echo \"$apples + $oranges\" | bc)\n   \
    \ echo $(echo \"$2 - $total\" | bc)", "  echo $(($2 - $(echo $1 | sed -E 's/.*([0-9]*)\
    \ oranges.*/\\1/') - $(echo $1 | sed -E 's/.*([0-9]*) apples.*/\\1/')))", "  \
    \  let mango=${2}\n    IFS=' ' read -ra ADDR <<< \"$1\"\n    for i in \"${ADDR[@]}\"\
    ; do\n        if [[ $i =~ ^[0-9]+$ ]]; then\n            let mango-=$i\n     \
    \   fi\n    done\n    echo $mango", "    # TODO: Write your solution for the task\
    \ \n    # given the string that represents the total number of the oranges and\
    \ apples \n    # and an integer that represent the total number of the fruits\
    \ \n    # in the basket return the number of the mango fruits in the basket\n\
    \    let \"appleNum = $(echo $1 | sed 's/\\([0-9]*\\) apples and \\([0-9]*\\)\
    \ oranges/\\1/')\"\n    let \"orangeNum = $(echo $1 | sed 's/\\([0-9]*\\) apples\
    \ and \\([0-9]*\\) oranges/\\2/')\"\n    let \"fruitNum = $2\"\n    let \"mangoNum\
    \ = $fruitNum - $appleNum - $orangeNum\"\n    echo $mangoNum", "\t# write your\
    \ code here\n\t# here is the example for this function\n\t# get the number of\
    \ apples and oranges\n\t#\n\t# apples=$(echo $1 | cut -d ' ' -f 1)\n\t# oranges=$(echo\
    \ $1 | cut -d ' ' -f 5)\n\t# \n\t# get the total number of the fruits in the basket\n\
    \t#\n\t# number_of_fruits=$2\n\t#\n\t# get the number of the mango fruits\n\t\
    #\n\t# echo $(($number_of_fruits - $apples - $oranges))", "    # Write your code\
    \ here\n    echo \"PASS\"", "    if (( $# != 2 )); then\n        echo \"Usage:\
    \ fruit_distribution '<string>' <integer>\"\n        return 1\n    fi\n    # complet\
    \ here\n    apples=`echo $1 | cut -d ' ' -f 1`\n    oranges=`echo $1 | cut -d\
    \ ' ' -f 4`\n    sum=$(( $apples + $oranges ))\n    mangoes=$(( $2 - $sum ))\n\
    \    echo $mangoes", "    # TODO: use only bash to write your solution\n    #\
    \ Hint 1: You may want to use bash regex for this task\n    # Hint 2: Make sure\
    \ you can handle whitespaces\n    # Hint 3: Make sure you can handle the case\
    \ where there are only apples or oranges or mangoes\n    pass", "    if [ $# -ne\
    \ 2 ]; then\n        echo \"Usage: $0 <string> <integer>\"\n        exit 1\n \
    \   fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Usage: $0 <string>\
    \ <integer>\"\n        exit 1\n    fi\n    if ! [[ $1 =~ ^([0-9]+) apples and\
    \ ([0-9]+) oranges$ ]]; then\n        echo \"Usage: $0 <string> <integer>\"\n\
    \        exit 1\n    fi\n    total=$(echo $1 | cut -d' ' -f1)\n    total=$((total\
    \ + $(echo $1 | cut -d' ' -f4)))\n    echo $((2 * $2 - total))", "   if [[ -z\
    \ $1 ]] || [[ -z $2 ]]; then\n       echo \"usage: fruit_distribution 'a apples\
    \ and b oranges' total_fruits_num\"\n       return 1\n   fi\n   local regex='^([0-9]+)\
    \ apples and ([0-9]+) oranges$'\n   [[ \"$1\" =~ $regex ]] || return 1\n   local\
    \ apples=${BASH_REMATCH[1]}\n   local oranges=${BASH_REMATCH[2]}\n   echo \"$((\
    \ $2 - $apples - $oranges ))\"", "    local dist=$1\n    local numFruits=$2\n\
    \    local numApples=$(echo $dist | grep -E -o \"[0-9]+\" | head -1)\n    local\
    \ numOranges=$(echo $dist | grep -E -o \"[0-9]+\" | tail -1)\n    local numMangoes=$(($numFruits\
    \ - $numApples - $numOranges))\n    echo $numMangoes", "    echo \"$1\" | awk\
    \ '{ sum = $1 + $4; printf \"%d\", ($2 - sum); }'", "  # Extract the number of\
    \ apples and oranges from $1\n  # Add the two numbers and subtract from $2\n \
    \ # echo the answer\n  first_num=$(echo $1 | cut -d' ' -f1)\n  second_num=$(echo\
    \ $1 | cut -d' ' -f3)\n  (( first_num = first_num + second_num ))\n  (( second_num\
    \ = $2 - first_num ))\n  echo $second_num", "  local total_number_of_apples=$(echo\
    \ $1 | awk '{print $1}')\n  local total_number_of_oranges=$(echo $1 | awk '{print\
    \ $4}')\n  local total_number_of_fruits=$2\n  local mango_fruits=$((total_number_of_fruits-total_number_of_apples-total_number_of_oranges))\n\
    \  echo $mango_fruits", "  # Fill in the missing code here\n  num1=$(echo $1 |\
    \ grep -o -E '[0-9]+' | head -1)\n  num2=$(echo $1 | grep -o -E '[0-9]+' | tail\
    \ -1)\n  let \"num1 = $num1 + $num2\"\n  let \"num1 = $2 - $num1\"\n  echo $num1",
  "    local apples=$(echo $1 | cut -d ' ' -f 1)\n    local oranges=$(echo $1 | cut\
    \ -d ' ' -f 5)\n    local all_fruits=$2\n    local mango_fruits=$((all_fruits\
    \ - apples - oranges))\n    echo $mango_fruits", "    # Your code here\n    #\
    \ use a for loop to make sure your output is a string\n    # use substring expansion\
    \ to get the numbers only\n    # you are free to use any variable you want\n \
    \   # do not use while loop or use a pipe \n    # or any other thing we did not\
    \ discuss in the class\n    #\n    #", "\techo \"$1\"\n\techo \"$2\"", "    echo\
    \ $2 - $(echo $1 | grep -o '[0-9]\\+' | xargs | tr \" \" +) | bc", "\techo $1\
    \ | sed 's/[^0-9]//g' > /tmp/nums\n\tarr=($(< /tmp/nums))\n\techo $(($2 - ${arr[0]}\
    \ - ${arr[1]}))", "\tlocal -a fruits=($(echo $1 | sed -e 's/ and / /g'))\n\tlocal\
    \ fruit_sum=0\n\tfor fruit in ${fruits[@]}; do\n\t\tlocal fruit_count=$(echo $fruit\
    \ | sed -e 's/[^0-9]//g')\n\t\tfruit_sum=$((fruit_sum + fruit_count))\n\tdone\n\
    \tlocal mango_count=$(( $2 - fruit_sum ))\n\techo $mango_count", '    # your code
    goes here', '  #write your code here', "    apples=$(echo $1 | grep -o '[[:digit:]]\\\
    + apples' | grep -o '[[:digit:]]\\+')\n    oranges=$(echo $1 | grep -o '[[:digit:]]\\\
    + oranges' | grep -o '[[:digit:]]\\+')\n    echo $(( $2 - ($apples + $oranges)\
    \ ))", '    # place your code here', "    echo $1 | grep -Eo '[0-9]+' | awk '{\
    \ print $1 + $2 }' | xargs expr $2 -", "  # write your code here\n  # test your\
    \ code by running the following command:\n  # bash test_fruit_distribution.sh\n",
  "\ta=`echo $1 | grep -o '[[:digit:]]* apples' | grep -o '[[:digit:]]*'`\n\to=`echo\
    \ $1 | grep -o '[[:digit:]]* oranges' | grep -o '[[:digit:]]*'`\n\techo $(($2\
    \ - $a - $o))", "    ((total_fruits = $2))\n    # remove spaces at the begining\
    \ and end of the string\n    string=\"${1#\"${1%%[![:space:]]*}\"}\"\n    string=\"\
    ${string%\"${string##*[![:space:]]}\"}\"\n    # seperate the string\n    IFS=\"\
    \ and \" read -r -a fruits <<< \"$string\"\n    # get the number of the fruits\n\
    \    apples=$(echo \"${fruits[0]}\" | cut -d \" \" -f 1)\n    oranges=$(echo \"\
    ${fruits[1]}\" | cut -d \" \" -f 1)\n    ((apples_oranges = apples + oranges))\n\
    \    # subtract the number of the fruits from the total number of the fruits\n\
    \    echo \"$((total_fruits - apples_oranges))\"", "    fruit_string=$1\n    total_fruits=$2\n\
    \    # TODO: Implement code that computes the number of mangoes\n    # Hint: get\
    \ the string of apples and oranges that is passed in to the function \n    # and\
    \ use the string manipulation tools you learned to parse it. \n    # Compare the\
    \ total number of fruits and the sum of apples and oranges, \n    # and return\
    \ the remaining value.", "\ttotal_fruits=\"$2\"\n\tnum_apples=\"$(echo \"$1\"\
    \ | grep -Po \"(?<=^)[0-9]+(?= apples)\" | head -1)\"\n\tnum_oranges=\"$(echo\
    \ \"$1\" | grep -Po \"(?<= and )[0-9]+(?= oranges)\" | head -1)\"\n\t((num_mangoes\
    \ = total_fruits - num_apples - num_oranges))\n\techo \"$num_mangoes\"", "   \
    \ # YOUR CODE HERE\n    no_of_oranges=$(echo $1 | cut -d \" \" -f3)\n    no_of_apples=$(echo\
    \ $1 | cut -d \" \" -f1)\n    no_of_mangoes=$(expr $2 - $no_of_oranges - $no_of_apples)\n\
    \    echo $no_of_mangoes", "\t# type your code here\n\tnumberofApples=$(echo $1\
    \ | cut -d \" \" -f 1)\n\tnumberofOranges=$(echo $1 | cut -d \" \" -f 4)\n\tnumberofMangoes=$(($2-($numberofApples+$numberofOranges)))\n\
    \techo $numberofMangoes", '', "    echo $2 - $(echo $1 | tr -dc '0-9') | bc",
  '    # TODO:Your code here', "\t# Write your solution here\n    temp1=`echo $1 |\
    \ cut -d \" \" -f1`\n    temp2=`echo $1 | cut -d \" \" -f3`\n    sum=`expr $temp1\
    \ + $temp2`\n    #echo $sum\n    mango=`expr $2 - $sum`\n    echo $mango", " \
    \ read -r apples oranges <<< $1\n  echo $(( $2 - $apples - $oranges ))", "   \
    \ orgn=${1#*and }\n    org_n=${orgn% oranges*}\n    app_n=${1% apples and*}\n\
    \    app_n=${app_n#*}\n    echo $(( $2 - $org_n - $app_n ))", "    local a=$(echo\
    \ $1 | grep -oE '[0-9]+ apples' | grep -oE '[0-9]+')\n    local o=$(echo $1 |\
    \ grep -oE '[0-9]+ oranges' | grep -oE '[0-9]+')\n    echo $(( $2 - ($a + $o)\
    \ ))", "    echo $(echo $1 | rev | cut -f1 -d' ' | rev)\n    echo $2\n    echo\
    \ $(($2-$(echo $1 | rev | cut -f1 -d' ' | rev)))", "    # Write your code here\n\
    \    # ...\n    # ...\n    let sum_fruit=$(echo $1 | grep -oE \"[0-9]+\" | tr\
    \ '\\n' '+' | sed 's/\\(.*\\)./\\1/')\n    #let sum_fruit=$(echo $1 | grep -oE\
    \ \"[0-9]+\" | sed 's/\\(.*\\)./\\1/')\n    #sum_fruit=$(expr $sum_fruit + 0)\n\
    \    let total_fruits=$2-$sum_fruit\n    echo $total_fruits", "    # Write your\
    \ solution here\n    s=$1\n    t=$2\n    #apples_num=${s##*apples and }\n    #apples_num=${apples_num%\
    \ oranges*}\n    #oranges_num=${s##*and }\n    #oranges_num=${oranges_num% oranges*}\n\
    \    #combined_num=$(($apples_num+$oranges_num))\n    #printf \"%s\" $((t-combined_num))\n\
    \    s=$(echo $s | sed 's/ //g')\n    echo $s\n    #apples_num=${s%%applesand*}\n\
    \    #oranges_num=${s%%oranges*}\n    #combined_num=$(($apples_num+$oranges_num))\n\
    \    #printf \"%s\" $((t-combined_num))", "\t# TODO: your code goes here.", "\t\
    # write your answer between the two quotes\n\t# you can change the variable name\
    \ if you want\n\t# your_answer_here=\"0\"\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \n\n\tyour_answer_here=\"0\"\n\treturn your_answer_here", "    local a=$(echo\
    \ $1 | awk '{print $1}')\n    local o=$(echo $1 | awk '{print $4}')\n    local\
    \ sum=$(($a + $o))\n    echo $(($2 - $sum))", "    #Your code here\n    num=$(echo\
    \ $1 | sed 's/[^0-9]*//g')\n    num=$(echo $num | sed 's/^0*//')\n    if [ -z\
    \ \"$num\" ]; then\n      num=0\n    fi\n    sum=$(((num % 100) / 10))\n    sum=$((sum\
    \ + (num % 10)))\n    sum=$((sum + ($2 - num)))\n    echo $sum", "\tnum_apples=$(echo\
    \ $1 | grep -o '\\d* apples' | sed 's/ apples//')\n\tnum_oranges=$(echo $1 | grep\
    \ -o '\\d* oranges' | sed 's/ oranges//')\n\tnum_mangoes=$(($2-($num_apples+$num_oranges)))\n\
    \techo $num_mangoes", "    echo $(($2-$(echo $1 | tr ' ' '\\n' | tr -d '[a-z]')\
    \ | tr -d '[a-z]'))", '  # <YOUR CODE GOES HERE>', '    # Write your code here...',
  "    # Write your code here\n    # You can invoke bash string manipulation and arithmetic\
    \ operations\n    # For example, you can get the length of a string and you can\
    \ convert a string to an integer\n    # by $(($string))\n    # For example, $((5\
    \ + 5)) will return 10\n    #\n    # The given string contains a number of apples\
    \ and oranges,\n    # for example, \"2 apples and 3 oranges\"\n    # You can invoke\
    \ string manipulation functions to get the numbers\n    # For example, you can\
    \ get the number of apples by $(grep -o \"^[0-9]*\" <<< \"$1\")\n    #\n    #\
    \ To return a string, wrap the string with double quotes like:\n    # echo \"\
    string\"", "\ts=$1\n\ta=`echo $s | cut -d' ' -f1`\n\to=`echo $s | cut -d' ' -f3`\n\
    \tf=$2\n\techo $((f-(a+o)))", "    apples=$(echo $1 | sed -e 's/ apples and .*//')\n\
    \    oranges=$(echo $1 | sed -e 's/.* apples and //' -e 's/ oranges//')\n    echo\
    \ $(($2 - $apples - $oranges))", "    # Write your code here.\n    echo $(( $2\
    \ - $(echo $1 | tr \" and \" \" \" | sed 's/^[0-9]* //' | sed 's/[a-zA-Z]*$//')\
    \ ))", "    echo $(($2 - $(($(echo $1 | tr ' ' '\\n' | head -1) + $(echo $1 |\
    \ tr ' ' '\\n' | tail -1)))))", '    # write your code here', "\t# echo \"Write\
    \ your code here and remove this line\"\n\t\n\t# $1 : \"5 apples and 6 oranges\"\
    \n\t# $2 : 19\n\t# $3 : apples\n\t# $4 : oranges\n\t# echo \"Result is \" $((\
    \ $2 - $3 - $4 ))\n\t\n\ttemp=$(echo $1 | tr -d '[:digit:]') # delete all numbers\n\
    \ttemp2=$(echo $temp | tr -d '[:space:]') # delete all spaces\n\t\n\tapples=${temp2%%apples*}\
    \ #Get the number before apples\n\toranges=${temp2%%oranges*} #Get the number\
    \ before oranges\n\t\n\t# get rid of ornges and apple words, then get the last\
    \ number\n\toranges=${oranges#*oranges}\n\toranges=${oranges##* }\n\t\n\tapples=${apples#*apples}\n\
    \tapples=${apples##* }\n\t\n\t(( mangos=$2 - $apples - $oranges ))\n\t\n\techo\
    \ $mangos\n\t", "    # Write your code here\n    # You can write additional functions\
    \ \n    # if you want and call them from this function\n    echo \"0\"", "   \
    \ ans=$(echo $1 | awk '{ sum=0; for (i=1; i<=NF; i++) sum+=$i } END { print $2-sum\
    \ }')\n    echo $ans", '    :', "  # Your solution here\n  # Include whatever\
    \ you need to check your solution\n  # and give feedback to the user\n  echo \"\
    Placeholder\"", "    split_num_string=$(echo $1 | tr -d ' ')\n    arr=(${split_num_string//and/\
    \ })\n    echo $(( $2 - ${arr[0]} - ${arr[1]} ))", "  echo -n $(($2 - $(echo $1\
    \ | sed 's/[^0-9]/ /g' | awk '{print $1 + $2}')))", "    apples=$(echo $1 | cut\
    \ -d' ' -f1)\n    oranges=$(echo $1 | cut -d' ' -f3)\n    let \"all_fruits = $2\"\
    \n    let \"mangoes = $all_fruits - $apples - $oranges\"\n    echo $mangoes",
  '    echo -n $2', '    # your code here ...', "\tx=`echo $1 | tr -d 'a-zA-Z and'`\n\
    \tIFS=' ' read -r -a x <<< \"$x\"\n\techo $(($2 - ${x[0]} - ${x[1]}))", "  \n\
    \  # Write your solution here\n ", "    STR=$1\n    NUM=$2\n    if [ -z \"${STR//[0-9]/}\"\
    \ ] || [ -z \"${NUM//[0-9]/}\" ]; then\n        echo \"ERROR\"\n        return\n\
    \    fi\n    if [[ $1 == *\"orange\"* ]]; then\n        echo \"${NUM} - ${STR%%\
    \ oranges*}\"\n    else\n        echo \"${NUM} - ${STR%% apples*}\"\n    fi",
  "    echo \"fruit distribution\"\n\n    # Check if correct number of inputs\n  \
    \  if [ \"$#\" -ne 2 ]; then\n        echo \"Error: Wrong number of arguments.\
    \ Inputs should be 2. Exiting script.\"\n        exit\n    fi\n\n    # Check if\
    \ inputs are correct type\n    if [[ $1 != *\"apples\"* ]] || [[ $1 != *\"oranges\"\
    * ]]; then\n        echo \"Error: first input does not follow correct format.\
    \ Exiting script.\"\n        exit\n    fi\n\n    if [[ $2 != [0-9]* ]]; then\n\
    \        echo \"Error: second input is not an integer. Exiting script.\"\n   \
    \     exit\n    fi\n\n    # Extract number of apples and oranges\n    apple=$(echo\
    \ $1 | grep -o \"^[0-9]*\")\n    orange=$(echo $1 | grep -o \"[0-9]*$\")\n\n \
    \   # Perform calculation\n    mango=$(expr $2 - $apple - $orange)\n\n    # Print\
    \ result\n    echo $mango", '    # dont forget to write your code here!', "  \
    \  apple=$(grep -o -E \"[0-9]+\" <<< $1 | head -1)\n    orange=$(grep -o -E \"\
    [0-9]+\" <<< $1 | tail -1)\n    echo $(( $2 - $apple - $orange ))", "  local fruit_array\n\
    \  local num_apples\n  local num_oranges\n  IFS=' ' read -r -a fruit_array <<<\
    \ \"$1\"\n  num_apples=\"${fruit_array[0]}\"\n  num_oranges=\"${fruit_array[2]}\"\
    \n  echo $(( $2 - num_apples - num_oranges ))", '    # your code goes here', " \
    \ # The first step is to extract the numbers that are between the \"string\" apples\
    \ and oranges\n  # The following syntax will extract the numbers from the string\
    \ and store it in the variable\n  # $apple and $orange\n  # \"${<Variable_name>##*<Start_pattern>}\"\
    \ -> removes everything starting from the start pattern\n  # to the end of the\
    \ variable and stores it in the variable name that we set.\n  # \"${<Variable_name>%%<End_pattern>*}\"\
    \ -> removes everything starting from the start of the\n  # variable to the end\
    \ pattern and stores it in the variable name that we set.\n  apple=\"${1##* apples\
    \ and }\"\n  orange=\"${apple%% oranges*}\"\n  # Next we need to add the two numbers\
    \ that are between the string apples and oranges\n  # and store it in a variable\
    \ called fruit.\n  fruit=$((orange + apple))\n  # Finally, we need to subtract\
    \ the total number of fruits from the total number of fruits in the basket\n \
    \ # and return that number.\n  echo $((2 - fruit))", '    echo "fruit_distribution"',
  "    local fruits=$1\n    local basket=$2\n    echo $((basket-$(echo $fruits | grep\
    \ -o [0-9] | awk '{sum += $1} END {print sum}')))", "    IFS=' and ' read -r -a\
    \ array <<< \"$1\"\n    # shellcheck disable=SC2034\n    for element in \"${array[@]}\"\
    ; do\n        local fruits=${element:0:1}\n        local fruit_name=${element:1:8}\n\
    \        if [ \"$fruit_name\" == \"apples\" ]; then\n            apples=$fruits\n\
    \        elif [ \"$fruit_name\" == \"oranges\" ]; then\n            oranges=$fruits\n\
    \        fi\n    done\n    echo \"$(( $2 - $apples - $oranges ))\"", '  # your
    code goes here', "  total_apples_num=$( echo $1 | grep -o \"^[0-9]*\" )\n  total_oranges_num=$(\
    \ echo $1 | grep -o \"[0-9]*$\" )\n  total_fruits_num=$2\n  mango_num=$(( total_fruits_num\
    \ - total_apples_num - total_oranges_num ))\n  echo $mango_num", "  local -r fruit_string=\"\
    $1\"\n  local -r total_fruits=\"$2\"\n  IFS=' ' read -r num_apples num_oranges\
    \ _ <<< \"$fruit_string\"\n  echo \"$(( total_fruits - num_apples - num_oranges\
    \ ))\"", "\tfruit=$1\n\ttotal=$2\n\tapples=$(echo $fruit | cut -d \" \" -f 1)\n\
    \toranges=$(echo $fruit | cut -d \" \" -f 3)\n\ttotal_apples_oranges=$(expr $apples\
    \ + $oranges)\n\tmangoes=$(expr $total - $total_apples_oranges)\n\techo $mangoes",
  "    # Write your code here ...\n    num_of_apples=$(echo $1 | cut -d ' ' -f 1)\n\
    \    num_of_oranges=$(echo $1 | cut -d ' ' -f 4)\n    sum=$(($2 - $num_of_apples\
    \ - $num_of_oranges))\n    echo $sum", "    local num_fruits_str=$1\n    local\
    \ total_fruits=$2\n    local num_apples=${num_fruits_str% and *}\n    local num_oranges=${num_fruits_str#*\
    \ and }\n    local num_mangoes=$((total_fruits - num_apples - num_oranges))\n\
    \    echo $num_mangoes", "    mangos=$(echo \"$1\" | sed 's/[a-z ]//g' | tr 'and'\
    \ ' ' | awk '{print $1+$2}')\n    echo $(( $2 - $mangos ))", "\tnumOfApples=$(echo\
    \ $1 | grep -oP '(?<=and ).*?(?= oranges)' | cut -d \" \" -f 1)\n\tnumOfOranges=$(echo\
    \ $1 | grep -oP '(?<=and ).*' | cut -d \" \" -f 1)\n\tnumOfApples=$((numOfApples\
    \ + 0))\n\tnumOfOranges=$((numOfOranges + 0))\n\tif [ \"$numOfApples\" -eq \"\
    $numOfOranges\" ]; then\n\t\techo \"0\"\n\telif [ \"$numOfApples\" -gt \"$numOfOranges\"\
    \ ]; then\n\t\techo \"$((numOfApples-numOfOranges))\"\n\telse\n\t\techo \"$((numOfOranges-numOfApples))\"\
    \n\tfi", "    if [[ $1 =~ [0-9]+\\ apples\\ and\\ [0-9]+\\ oranges ]]; then\n\
    \        echo \"$2 - $(echo $1 | sed 's/[^0-9]*//g')\" | bc\n    else\n      \
    \  echo \"wrong format\"\n    fi", "    local apples=$(echo $1 | grep -oE '[0-9]+'\
    \ | head -n 1)\n    local oranges=$(echo $1 | grep -oE '[0-9]+' | tail -n 1)\n\
    \    local all_fruits=$2\n    # put your code here\n    # do not forget about\
    \ shebang, variables and return value", "    let \"M = $2 - `echo $1 | sed 's/[a-zA-Z\
    \ ]*//g' | bc`\"\n    echo $M", "    local apples=`echo $1 | cut -d \" \" -f 1`\n\
    \    local oranges=`echo $1 | cut -d \" \" -f 3`\n    local total=$2\n    echo\
    \ $((total-apples-oranges))", '    return', "  # Implement the solution here.\n\
    \  echo -n \"Not implemented\"", "    fruits=$(echo $1 | sed -E 's/([0-9]+) (apples|oranges)/\\\
    1/g')\n    total_fruits=$2\n    echo $(($total_fruits-$fruits))", "    if [ \"\
    $#\" -ne 2 ]; then\n        echo \"Error: $(basename $0) needs to be called with\
    \ exactly 2 arguments!\"\n        exit 1\n    fi\n    result=$(echo $1 | grep\
    \ -E \"^[0-9]+ apples and [0-9]+ oranges$\")\n    if [ \"$?\" -ne 0 ]; then\n\
    \        echo \"Error: the first argument is not a valid string!\"\n        exit\
    \ 1\n    fi\n    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"Error: the second\
    \ argument is not a valid integer!\"\n        exit 1\n    fi\n    # Write your\
    \ code here:\n    string=$1\n    integer=$2\n    oranges_num=$(echo $string |\
    \ grep -o 'oranges' | wc -l)\n    apples_num=$(echo $string | grep -o 'apples'\
    \ | wc -l)\n    echo $((integer-oranges_num-apples_num))", "\t# your code goes\
    \ here", "    local apples\n    local oranges\n    local mangoes\n    local total\n\
    \    if [[ $1 =~ (.*) and (.*) ]]; then\n        apples=\"${BASH_REMATCH[1]}\"\
    \n        oranges=\"${BASH_REMATCH[2]}\"\n        mangoes=$(( $2 - $apples - $oranges\
    \ ))\n        echo \"$mangoes\"\n    fi", "\t# do not modify this function body\n\
    \tdeclare -i mango_fruits\n\tdeclare -i total_fruits\n\tdeclare -i apples\n\t\
    declare -i oranges\n\t# write your code here\n\t# replace the `echo \"mango_fruits\"\
    ` with correct code\n\techo \"mango_fruits\"", "  # TODO: implement this script\n\
    \  num=${1}\n  total=${2}\n  num_array=(${num//and/ })\n  echo ${num_array[0]}\
    \ | grep -oE [0-9]+ > num1\n  echo ${num_array[1]} | grep -oE [0-9]+ > num2\n\
    \  a=$(cat num1)\n  b=$(cat num2)\n  rm num1\n  rm num2\n  c=$(($total - $a -\
    \ $b))\n  echo ${c}", "\tapples=`echo $1 | grep -E -o \"[0-9]+ apples\" | awk\
    \ '{print $1}'`\n\toranges=`echo $1 | grep -E -o \"[0-9]+ oranges\" | awk '{print\
    \ $1}'`\n\tsum=$(($apples + $oranges))\n\techo $(($2 - $sum))", '    echo "TODO"',
  '    # your code here', "    apples=$(echo $1 | cut -d \" \" -f 1)\n    oranges=$(echo\
    \ $1 | cut -d \" \" -f 4)\n    echo $(( $2 - apples - oranges ))", "    # count_apples=$(grep\
    \ -o \"apples\" <<< $1 | wc -l)\n    # count_oranges=$(grep -o \"oranges\" <<<\
    \ $1 | wc -l)\n    # \n    # echo $(( ($2 - count_apples) - count_oranges ))\n\
    \    local count_apples=0\n    local count_oranges=0\n    local count_oranges_and_apples=$(tr\
    \ -d '[:alpha:]' <<< $1)\n    local arr_oranges_and_apples=(${count_oranges_and_apples})\n\
    \    local total_oranges_and_apples=0\n    local total_mangoes=0\n\n    # echo\
    \ ${arr_oranges_and_apples[*]}\n    # echo ${#arr_oranges_and_apples[@]}\n\n \
    \   if [[ $# -ne 2 ]]; then\n        echo \"Invalid number of arguments\"\n  \
    \      exit 1\n    fi\n\n    if [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"\
    Invalid number for argument 2\"\n        exit 1\n    fi\n\n    if [[ ${#arr_oranges_and_apples[@]}\
    \ -ne 2 ]]; then\n        echo \"Invalid total number of oranges and apples\"\n\
    \        exit 1\n    fi\n\n    for i in \"${arr_oranges_and_apples[@]}\"; do\n\
    \        if [[ ! $i =~ ^[0-9]+$ ]]; then\n            echo \"Invalid number of\
    \ oranges and apples\"\n            exit 1\n        fi\n        total_oranges_and_apples=$((\
    \ total_oranges_and_apples + i ))\n    done\n\n    if [[ $total_oranges_and_apples\
    \ -gt $2 ]]; then\n        echo \"Invalid total number of fruits\"\n        exit\
    \ 1\n    fi\n\n    total_mangoes=$(( $2 - $total_oranges_and_apples ))\n    echo\
    \ $total_mangoes"]
stop_tokens:
- "\n}"
