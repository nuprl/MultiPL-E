name: HumanEval_45_triangle_area
language: sh
prompt: "#!/bin/bash\n# Given length of a side and high return area for a triangle.\n\
  # >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an\
  \ integer\ntriangle_area() {\n"
tests: "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"5\" \"3\") = \"7.5\" ]]\n    [[ $(candidate \"2\" \"2\") =\
  \ \"2.0\" ]]\n    [[ $(candidate \"10\" \"8\") = \"40.0\" ]]\n}\n\nrun_test"
completions: ["    local side=\"$1\"\n    local high=\"$2\"\n    echo \"$(bc <<< \"\
    scale=3; $side * $high / 2\")\"", '    echo "$1 * $2 / 2" | bc -l', '    echo
    "$(($1 * $2)) / 2" | bc -l', '  printf "%.1f" $(echo "scale=10;($1 * $2) / 2"
    | bc)', '    echo "scale=2;$1 * $2 / 2" | bc', '  bc -l <<< "scale=2;($1*$2)/2"',
  '  echo "$(echo "($1*$2)/2" | bc -l)"', "    local A=$1\n    local H=$2\n    echo\
    \ \"$(echo \"$A * $H\" | bc -l) / 2\" | bc -l", "    # * Using bc command\n  \
    \  # r=`echo \"scale=1; (1/2)*$1*$2\" | bc`\n    # echo $r\n\n    # * Using awk\
    \ command\n    echo $(awk \"BEGIN {print (1/2)*$1*$2}\")", "  test $# -eq 2 ||\
    \ error \"triangle_area takes two arguments\" 1\n  local a=$1\n  local h=$2\n\
    \  echo \"scale=1; 0.5 * $a * $h\" | bc", "    # if we receive a negative number\n\
    \    if [ $1 -lt 0 ] || [ $2 -lt 0 ]; then\n        echo -1\n    else\n      \
    \  echo $(echo \"scale=3; $1 * $2 / 2\" | bc)\n    fi", '  echo "$(($1 * $2 /
    2))"', '    echo "scale=1;($1 * $2) / 2" | bc', "    if ! [[ $1 =~ ^[0-9]+$ ]];\
    \ then\n        echo \"error: not an integer\" >&2\n        return 1\n    fi\n\
    \    if ! [[ $2 =~ ^[0-9]+$ ]]; then\n        echo \"error: not an integer\" >&2\n\
    \        return 1\n    fi\n    echo $(echo \"$1*$2/2\" | bc -l)", "    let \"\
    area=($1*$2)/2\"\n    echo \"$area\"", '    echo "$(bc <<< "scale=2; (1/2) * $1
    * $2")"', "  local area\n  # Use shell's eval builtin to evaluate expression\n\
    \  # $(cmd) syntax is a command substitution\n  area=$(eval \"$1 * $2 / 2\")\n\
    \  echo \"$area\"", '  bc <<< "scale=2;($1 * $2)/2"', "  local triangle_side=$1\n\
    \  local triangle_high=$2\n  # float(string $s1)\n  # float(string $s2)\n  # float(string\
    \ $s3)\n  # float(string $s4)\n  local float_convertor='^[0-9]+([.][0-9]+)?$'\n\
    \  if ! [[ \"$triangle_side\" =~ $float_convertor ]]; then\n    return 1\n  fi\n\
    \  if ! [[ \"$triangle_high\" =~ $float_convertor ]]; then\n    return 1\n  fi\n\
    \  awk -v area_side=\"$triangle_side\" -v area_high=\"$triangle_high\" '\n   \
    \ BEGIN {\n      printf \"%.1f\", area_side * area_high / 2\n    }\n  '", "  local\
    \ side=$1\n  local high=$2\n  bc <<< \"scale=2; $side * $high / 2\"", '  echo
    "$( echo "scale=2;$1 * $2 / 2" | bc -l )"', '  echo "scale=2;$(($1 * $2)) / 2"
    | bc', '    echo "$(expr "$1 * $2" / 2 | bc -l)"', "  local length=\"$1\"\n  local\
    \ high=\"$2\"\n  echo $(echo \"${length}*${high}/2\" | bc -l)", "  if [[ -z \"\
    $1\" || -z \"$2\" ]]; then\n    echo \"Usage: $(triangle_area \"5\" \"3\")\"\n\
    \    return 1\n  fi\n\n  # ((1/2 * $1 * $2))\n  echo \"scale=1; (1/2 * $1 * $2)\"\
    \ | bc", '    echo $(( ($1 * $2) / 2 ))', "    if [[ $# -ne 2 ]]; then\n     \
    \   echo \"$(caller 0)\" >&2\n        echo \"triangle_area needs 2 parameters\"\
    \ >&2\n        return 1\n    fi\n\n    if ! validate_int \"$1\"; then\n      \
    \  echo \"$(caller 0)\" >&2\n        echo \"Parameter #1 should be an integer\"\
    \ >&2\n        return 1\n    fi\n\n    if ! validate_int \"$2\"; then\n      \
    \  echo \"$(caller 0)\" >&2\n        echo \"Parameter #2 should be an integer\"\
    \ >&2\n        return 1\n    fi\n\n    echo \"$(echo \"scale=2; $1 * $2 / 2\"\
    \ | bc)\"", "    if ! [[ \"$1\" =~ ^-?[0-9]+$ ]] || ! [[ \"$2\" =~ ^-?[0-9]+$\
    \ ]]; then\n        return \"1\"\n    fi\n    echo \"$(echo \"scale=1; ($1 * $2)/2\"\
    \ | bc)\"", "  local side=$1\n  local high=$2\n  local area=$(echo \"scale=1;\
    \ ($side * $high) / 2\" | bc)\n  echo $area", "    if [[ ! \"$1\" =~ ^[0-9]+$\
    \ ]] || [[ ! \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Error. It can be only\
    \ integer numbers.\"\n        return 1\n    fi\n\n    echo \"$(echo \"(($1*$2)/2)\"\
    \ | bc -l)\"", '  echo "scale=2; $1 * $2 / 2" | bc', "  local _length=$1\n  local\
    \ _high=$2\n  echo \"scale=2;($_length * $_high) / 2\" | bc", '  echo $(( $1 *
    $2 / 2 ))', '  echo $(echo "scale=2;($1 * $2) / 2" | bc)', '  expr $(expr "$1"
    \* "$2") / 2', '    echo "scale=1; $1 * $2 / 2" | bc', '  echo $((($1 * $2) /
    2))', '    echo "$(echo "scale=2;($1 * $2)/2" | bc)"', '  echo $(echo "scale=5;
    $1 * $2 / 2" | bc -l)', '  bc <<< "scale=2; (($1 * $2) / 2)"', '  echo "$(bc <<<
    "scale=4; ($1 * $2) / 2")"', '  echo "$(bc <<< "scale=2;($1 * $2) / 2")"', " \
    \   local side=${1//[^0-9]/}\n    local high=${2//[^0-9]/}\n    # shellcheck disable=SC2230\n\
    \    local area=$(echo \"scale=2;$side*$high/2\" | bc)\n    echo \"$area\"", '    return
    "$(echo "${1}.0 * ${2}.0 / 2.0" | bc -l)"', '  echo $(( $1 * $2 / 2 ))', "  local\
    \ high=\"$1\"\n  local side=\"$2\"\n  python -c \"print($high * $side / 2)\"",
  "    if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n        echo \"0\"\n    else\n   \
    \     echo \"$(bc <<< \"$1 * $2 / 2\")\"\n    fi", "    local num_a=$1\n    local\
    \ num_b=$2\n    result=$(bc <<< \"scale=2;$num_a * $num_b / 2\")\n    echo $result",
  "    (($# == 2)) || { echo \"Usage: $0 integer integer\" >&2; return 1; }\n    echo\
    \ \"$(( $1 * $2 / 2 ))\"", "  declare -ri side=\"$1\" high=\"$2\"\n  echo \"$(echo\
    \ \"scale=4;($side*$high)/2\" | bc -l)\"", "  local result=$(bc <<< \"scale=4;($1\
    \ * $2) / 2\")\n  echo \"$result\"", "    if ! is_int \"$1\" || ! is_int \"$2\"\
    ; then\n        error \"triangle_area: arguments is not an integer\"\n       \
    \ return 1\n    fi\n\n    echo \"scale=2; ($1 * $2) / 2\" | bc -l", "    # check\
    \ that $1 and $2 are integers\n    echo $(perl -le \"print ($1 * $2)/2\")", '  echo
    "scale=1; $1 * $2 / 2" | bc', '    echo "$(bc <<< "$1 * $2 / 2")"', '    echo
    "scale=2; 0.5 * $1 * $2" | bc', '    echo $(perl -e "print $1*$2/2")', "  if [\
    \ $# -ne 2 ]; then\n    error \"Usage: $(triangle_area a b)\"\n    return 1\n\
    \  fi\n\n  if ! is_positive_integer \"$1\"; then\n    error \"Usage: $(triangle_area\
    \ a b) <- a is not a integer\"\n    return 1\n  fi\n\n  if ! is_positive_integer\
    \ \"$2\"; then\n    error \"Usage: $(triangle_area a b) <- b is not a integer\"\
    \n    return 1\n  fi\n\n  echo $(echo \"($1 * $2)/2\" | bc -l)", '  printf "%.1f"
    $(echo "scale=2;(0.5*$1*$2)" | bc -l);', "  if [[ $# != 2 ]]; then\n    echo \"\
    Error: no side length and high were passed.\"\n    exit 1\n  fi\n\n  local side_length=$1\n\
    \  local high=$2\n\n  echo \"$(echo \"($side_length * $high) / 2\" | bc -l)\"",
  "  local side=${1:?}\n  local high=${2:?}\n  echo $(echo \"scale=4; $side * $high\
    \ / 2\" | bc)", "  # (1/2) * length * height\n  # bc handles float numbers\n \
    \ area=$(echo \"scale=3; 0.5 * $1 * $2\" | bc)\n  echo $area", '    # your code
    here', '    echo "scale=2; $1 * $2 / 2" | bc -l', "    if [ -z \"$1\" ]; then\n\
    \        echo \"This function take two parameters\"\n        return\n    fi\n\
    \    if [ -z \"$2\" ]; then\n        echo \"This function take two parameters\"\
    \n        return\n    fi\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo\
    \ \"The first param must be an integer\"\n        return\n    fi\n    if ! [[\
    \ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"The second param must be an integer\"\
    \n        return\n    fi\n    echo $(echo \"$1*$2/2\" | bc -l)", "    local side=\"\
    $1\"\n    local high=\"$2\"\n    echo \"$((side * high / 2))\"", "    let area=\"\
    0.5 * $1 * $2\"\n    echo \"$area\"", "  awk -v l=\"$1\" -v h=\"$2\" 'BEGIN {printf\
    \ \"%.1f\", l * h / 2}'", "  local s=\"$1\"\n  local h=\"$2\"\n  echo \"$((s *\
    \ h / 2))\"", "  local side=$1 high=$2\n  if [ $side -le 0 ] || [ $high -le 0\
    \ ]; then\n    echo \"invalid parameter(s)\"\n    return\n  fi\n  echo $(bc -l\
    \ <<< \"${side} * ${high} / 2\")", '  echo "scale=2;$1 * $2 / 2" | bc -l', '    echo
    "$1 * $2 / 2" | bc -l', "    local a=\"$1\"\n    local h=\"$2\"\n    printf \"\
    %.1f\" \"$(bc -l <<< \"scale=1;$a*$h/2\")\"", "    # bc can also use echo, not\
    \ necessary to use <<<\n    #echo \"$1*$2/2\" | bc\n    printf '%0.1f\\n' \"($1*$2)/2\"",
  "    echo $1 $2 | awk '{if ($1 > 0 && $2 > 0) print $1 * $2 / 2; else print \"error\"\
    ;}'", "  l=$1\n  h=$2\n  bc -l <<< $l\\*$h/2", '  echo $(echo "scale=1; $1 * $2
    / 2" | bc)', '  echo "scale=2;($1 * $2)/2" | bc', "  if [[ \"${1}\" =~ ^[0-9]+$\
    \ ]] && [[ \"${2}\" =~ ^[0-9]+$ ]]; then\n    printf \"%.1f\" $(python -c \"print\
    \ ${1} * ${2} / 2.0\")\n  else\n    printf \"NaN\"\n  fi", "  local area=$(bc\
    \ <<< \"scale=2;0.5*$1*$2\")\n  printf \"%s\" \"$area\"", '  echo "$(( $1 * $2
    / 2 ))"', '    echo "$(bc <<< "$1 * $2 / 2")"', "  let \"area = $1 * $2 / 2\"\n\
    \  echo $area", "  if [ $# -ne 2 ]; then\n    return\n  fi\n  if [[ $1 =~ ^[0-9]+$\
    \ ]] && [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"$(echo \"scale=1; ($1 * $2) / 2\"\
    \ | bc)\"\n  fi", '  echo "scale=2; $1 * $2 / 2" | bc', "    local area=\"$( echo\
    \ \"0.5 * $1 * $2\" | bc )\"\n    echo \"$area\"", '    echo "scale=2;($1 * $2)
    / 2" | bc -l', '    echo "$(echo "scale=2; 0.5 * ($1 * $2)" | bc)"', '  echo $(echo
    "$1 * $2 / 2" | bc -l)', '    echo "scale=2; $1 * $2 / 2" | bc -l', '  echo "$(echo
    $(( $1 * $2 / 2 )) | bc -l)"', "    local area=0\n    # BEGIN SOLUTION\n    area=$(echo\
    \ \"$1 * $2 * 0.5\" | bc)\n    # END SOLUTION\n    echo $area", "    local _side_length=\"\
    $1\"\n    local _high=\"$2\"\n    if [ \"$_side_length\" -lt 0 ] || [ \"$_high\"\
    \ -lt 0 ]; then\n        echo \"0\"\n    else\n        echo \"$(( $_side_length\
    \ * $_high / 2 ))\"\n    fi", "  BC_SCALE=4\n  local a=$1\n  local h=$2\n  if\
    \ [ -z \"$a\" -o -z \"$h\" ]; then\n    echo \"ERROR: triangle_area requires two\
    \ arguments.\"\n    return\n  fi\n  echo \"$a * $h * 0.5\" | bc", '  echo $((($1
    * $2) / 2))', '    echo "$1 * $2 / 2" | bc -l', "  local a=$1\n  local h=$2\n\
    \  echo \"$(math::divide \"$((a * h))\" \"2\")\"", "  side=$1\n  high=$2\n  echo\
    \ \"scale=2;(($side*$high)/2)\" | bc", '    echo $(echo "scale=1;$1 * $2 / 2"
    | bc)', '    printf "%.1f" $( echo "0.5 * $1 * $2" | bc )', '    echo "$(bc <<<
    "scale=1; $1 * $2 / 2")"', '    echo "scale=2; $1 * $2 / 2" | bc -l', '  echo
    "scale=2; $1 * $2 / 2" | bc', '    echo "$(echo "$1 * $2 / 2" | bc -l)"', "  local\
    \ s=$1\n  local h=$2\n  echo $(echo \"scale=2;$s*$h/2\" | bc)", '  echo "scale=2;
    0.5 * $1 * $2" | bc', '    echo "$(echo "scale=2;($1 * $2) / 2" | bc -l)"', " \
    \   local a=$1\n    local h=$2\n    echo \"$(bc <<< \"scale=2;$a*$h/2\")\"", " \
    \   local area\n    area=$(python3 -c \"print($1 * $2 / 2)\")\n    echo \"$area\"",
  "  local A\n  A=$(echo \"scale=2; ($1 * $2) / 2\" | bc)\n  echo $A", '    echo "$(bc
    <<< "($1 * $2) / 2")"', '    echo $(echo "scale=2;($1 * $2) / 2" | bc)', "   \
    \ if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"error:\
    \ all arguments to triangle_area must be integers\"\n        return 1\n    fi\n\
    \    echo \"$(echo \"scale=2;0.5*$1*$2\" | bc -l)\"", "  # TODO: Please input\
    \ your code here.\n  let \"area = $1 * $2 / 2\"\n  echo \"$area\"", '  echo $(bc
    -l <<< "$1 * $2 / 2")', '    echo "$(awk "BEGIN {print (1/2) * $1 * $2}")"', " \
    \   local area=$(awk \"BEGIN {print $1 * $2 * 0.5}\")\n    echo $area", "  if\
    \ [ \"${#}\" -ne 2 ]; then\n    echo \"wrong number of arguments (given ${#},\
    \ expected 2)\"\n    return 1\n  fi\n\n  if ! is_numeric \"${1}\"; then\n    echo\
    \ '$1 is not numeric'\n    return 1\n  fi\n\n  if ! is_numeric \"${2}\"; then\n\
    \    echo '$2 is not numeric'\n    return 1\n  fi\n\n  local half_product\n  half_product=$(bc\
    \ <<< \"scale=1; ${1} * ${2} / 2\")\n  echo \"${half_product}\"", "    local side=$1\n\
    \    local high=$2\n    bc -l <<< \"(($side * $high) / 2)\"", '    echo $(echo
    "scale=1;$1 * $2 * 0.5" | bc)', "  if [ $# -ne 2 ]; then\n    echo \"Wrong input\"\
    \ >&2\n    return 1\n  fi\n\n  local a=\"$1\"\n  local h=\"$2\"\n\n  echo \"$((a\
    \ * h / 2))\"", '  echo "scale=1; 0.5 * $1 * $2" | bc', '    echo "scale=1;0.5*$1*$2"
    | bc', "  local length=\"$1\"\n  local high=\"$2\"\n  local factor=\"0.5\"\n \
    \ local scale=\"3\"\n  echo \"$(scale=\"$scale\"; echo \"scale=$scale; $factor\
    \ * $length * $high\" | bc -l)\"", '    echo $((($1 * $2) / 2))', "    if [[ \"\
    $1\" -le 0 || \"$2\" -le 0 ]]; then\n        echo \"invalid arguments for triangle_area\
    \ $1, $2\" >&2\n        return 1\n    fi\n    local area=$(echo \"$1 * $2 / 2\"\
    \ | bc -l)\n    echo \"$area\"", '    echo "scale=2;($1 * $2)/2" | bc', "    local\
    \ length=$1\n    local high=$2\n    local -i area\n    area=$(( ($length * $high)\
    \ / 2 ))\n    echo \"$area\"", "  area=$(echo \"scale=2;($1 * $2) / 2\" | bc)\n\
    \  echo ${area}", '  $(( ( $1 * $2 ) / 2 ))', '    bc -l <<< "($1 * $2) / 2"',
  '    echo "$(bc <<< "scale=1; ($1 * $2) / 2")"', '    echo "$(bc <<< "scale=1; $1
    * $2 / 2")"', "  local side_length=$1\n  local high=$2\n  echo \"$(echo \"scale=3;$(echo\
    \ \"scale=3;${side_length}*${high}\" | bc)/2\" | bc)\"", "    local formula=\"\
    ($1 * $2) / 2\"\n    echo $(bc <<< \"$formula\")", "    local side=\"$1\"\n  \
    \  local high=\"$2\"\n    echo \"$(bc <<< \"scale=2; $side * $high / 2\")\"",
  '    echo "scale=2;(0.5*($1*$2))" | bc', '    echo $(echo "scale=2; ($1 * $2) /
    2" | bc)', "    if [ $# -ne 2 ]; then\n        echo 'invalid arguments.'\n   \
    \     exit 1\n    fi\n\n    bc <<< \"$1 * $2 / 2\"", "    local triangle_side=\"\
    $1\"\n    local triangle_high=\"$2\"\n    echo \"$(( $triangle_side * $triangle_high\
    \ / 2 ))\"", "  local SIDE_ONE=$1\n  local SIDE_TWO=$2\n  local HYP=$(printf \"\
    scale=3;sqrt($SIDE_ONE^2 + $SIDE_TWO^2)\\n\" | bc)\n  local AREA=$(printf \"scale=3;$SIDE_ONE\
    \ * $SIDE_TWO / 2 \\n\" | bc)\n  printf $AREA", "  (( $# == 2 )) || return 1\n\
    \  bc <<< \"scale=2;($1 * $2)/2\"", "    # Check if $1 and $2 are integers\n \
    \   _is_integer \"$1\" || _error \"First argument ($1) must be an integer.\"\n\
    \    _is_integer \"$2\" || _error \"Second argument ($2) must be an integer.\"\
    \n\n    # Return area of a triangle\n    echo \"$(echo \"scale=2;($1 * $2) / 2\"\
    \ | bc)\"", "    if [[ \"$1\" -gt 0 && \"$2\" -gt 0 ]]; then\n        echo \"\
    $( echo \"scale=2; $1 * $2 / 2\" | bc )\"\n    else\n        echo \"0\"\n    fi",
  "  local area\n  area=$(echo \"scale=2; $1 * $2 * 0.5\" | bc)\n  echo \"$area\"",
  '    bc -l <<< "$1 * $2 / 2"', '  bc <<< "(($1 * $2) / 2)"', "    local a=$1\n \
    \   local h=$2\n    # awk and bc are tools to handle fractional part.\n    awk\
    \ -v a=$a -v h=$h 'BEGIN{printf \"%.2f\", (a*h)/2}'", "    if [ $# -eq 2 ]; then\n\
    \        echo $(echo \"($1 * $2) / 2\" | bc -l)\n    else\n        echo 0\n  \
    \  fi", '  echo "$(echo "0.5 * $1 * $2" | bc)"', '  echo "$(python -c "print($1
    * $2 / 2)")"', "    local length=$1\n    local high=$2\n    echo \"scale=1; $length\
    \ * $high / 2\" | bc", "  readonly SIDE=$1\n  readonly HIGH=$2\n  echo \"$SIDE\
    \ * $HIGH / 2\" | bc -l", '  echo "scale=2;($1 * $2) / 2" | bc', "    local area\n\
    \    area=$(echo \"$1 * $2 / 2\" | bc -l)\n    echo \"$area\"", "    local result\n\
    \    result=\"$(echo \"$1 * $2 / 2\" | bc -l)\"\n    echo \"$result\"", '  echo
    "scale=2; ($1 * $2) / 2" | bc', '  printf "%.2f" "$( echo "scale=2;($1 * $2)/2"
    | bc )"', '  echo "$(( $1 * $2 / 2 ))"', '  echo $(echo "$1 * $2 / 2" | bc -l)',
  "  local length=$1\n  local high=$2\n  echo \"$(echo \"$length * $high / 2\" | bc\
    \ -l)\"", "    if [[ $# -ne 2 ]]; then\n        echo \"usage: $(basename $0) a\
    \ high\" >&2\n        return 1\n    fi\n\n    local a=$1\n    local h=$2\n\n \
    \   # take all digits after the dot, then \"echo\" delete all digits after the\
    \ dot\n    local area=$(bc <<< \"scale=4;$a*$h/2\")\n    echo $area", "  local\
    \ length=$1\n  local high=$2\n  local area=$(echo \"scale=2; ($length * $high)\
    \ / 2\" | bc)\n  echo \"$area\"", "  if [[ $# -eq 2 ]]; then\n    awk -v side=\"\
    $1\" -v high=\"$2\" 'BEGIN {printf(\"%.2f\", (side * high) / 2)}'\n  else\n  \
    \  echo \"Usage: triangle_area SIDE HIGH\"\n  fi", "    local side=$1\n    local\
    \ high=$2\n    echo \"$(echo \"scale=5; $side * $high / 2\" | bc)\"", "  local\
    \ a b\n  a=$1\n  b=$2\n  echo \"$(bc <<< \"$a * $b / 2\")\"", "  echo $1\n  echo\
    \ $2\n  echo \"scale=2; ($1 * $2)/2\" | bc", "  local side=$1\n  local high=$2\n\
    \  echo \"scale=2; $side * $high / 2\" | bc", "    local side=\"$1\"\n    local\
    \ high=\"$2\"\n    local area=$(echo \"($side * $high) / 2\" | bc -l)\n    echo\
    \ $area", "  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n    echo \"error: expected\
    \ two arguments\" >&2\n    return 1\n  fi\n\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]];\
    \ then\n    echo \"error: first argument must be an integer\" >&2\n    return\
    \ 1\n  fi\n\n  if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n    echo \"error: second argument\
    \ must be an integer\" >&2\n    return 1\n  fi\n\n  echo \"$(($1 * $2 / 2))\"",
  '    echo "scale=2;($1 * $2) / 2" | bc', "  # Put your solution here\n  area=$(echo\
    \ \"0.5 * $1 * $2\" | bc)\n  printf %.2f \"$area\"", "  local a=$1\n  local h=$2\n\
    \  echo \"$((a * h / 2))\"", "  local length=$1\n  local high=$2\n  # The area\
    \ of a triangle is ( length * high ) / 2\n  echo \"$(echo \"scale=2; $length *\
    \ $high / 2\" | bc -l)\"", '    echo "$1 * $2 / 2" | bc -l', "    local length=\"\
    $1\"\n    local high=\"$2\"\n    echo \"$(bc <<< \"scale=2; 0.5 * $length * $high\"\
    )\"", '    echo "$(echo "0.5 * $1 * $2" | bc -l)"', "    local side=$1\n    local\
    \ high=$2\n    local area=$(echo \"$side * $high / 2\" | bc -l)\n    echo \"$area\"",
  '  echo $(( $1 * $2 / 2 ))', '    printf "%.3f" "$(echo "0.5 * $1 * $2" | bc -l)"',
  "  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n    echo \"Usage: $0 <width> <height>\"\
    \ >&2\n    return 1\n  fi\n\n  echo \"scale=1; ($1 * $2) / 2\" | bc -l", '    echo
    "$(bc <<< "scale=2;($1 * $2)/2")"', "  local side=$1\n  local high=$2\n  local\
    \ result=$(echo \"scale=2;($side * $high)/2\" | bc)\n  echo $result", "    local\
    \ area\n    area=\"$(echo \"$1*$2/2\" | bc -l)\"\n    echo \"$area\"", "    local\
    \ area\n    area=$(echo \"scale=5;($1 * $2) / 2\" | bc)\n    echo \"$area\"",
  '  echo "scale=1; ($1 * $2) / 2" | bc', '    echo $(bc -l <<< $(bc -l <<< "$1 *
    $2")/2)', '    echo $(echo "scale=2; ($1 * $2) / 2" | bc)', '  expr "scale=2;
    0.5 * $1 * $2" | bc', "    area=$(echo \"(($1 * $2) / 2)\" | bc -l)\n    echo\
    \ $area", '  bc <<< "scale=2; 0.5 * $1 * $2"', "  local SIDE=$1\n  local HIGH=$2\n\
    \  echo \"$((${SIDE} * ${HIGH} / 2))\"", '    echo "scale=2;($1 * $2) / 2" | bc',
  "  awk -v x=$1 -v y=$2 'BEGIN {printf \"%.2f\", x*y/2}'", '    echo "scale=2; ($1
    * $2) / 2" | bc', '    echo $(echo "($1*$2)/2" | bc -l)', "  if [[ $# -ne 2 ]];\
    \ then\n    echo \"Usage: $(basename \"$0\") {side} {high}\"\n    exit 1\n  fi\n\
    \n  if [[ \"$1\" -le 0 || \"$2\" -le 0 ]]; then\n    echo \"Param must be > 0\"\
    \n    exit 1\n  fi\n\n  bc <<< \"scale=3;$1 * $2 / 2\"", '    echo "$(echo "scale=3;
    $1 * $2 / 2" | bc)"', "  local p1=$1\n  local p2=$2\n  printf \"%.1f\" $(python\
    \ -c \"print(0.5 * $p1 * $p2)\")", "    local side_lenght=$1\n    local high=$2\n\
    \    local area=$(echo \"scale=2; 0.5 * $side_lenght * $high\" | bc)\n    echo\
    \ $area"]
stop_tokens:
- "\n}"
