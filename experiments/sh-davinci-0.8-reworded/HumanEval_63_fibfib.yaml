name: HumanEval_63_fibfib
language: sh
prompt: "#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2)\
  \ == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write\
  \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
  # >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"\
  8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n"
tests: "}\n\ncandidate() {\n    fibfib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"2\") = \"1\" ]]\n    [[ $(candidate \"1\") = \"0\" ]]\n    [[ $(candidate \"\
  5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"24\" ]]\n    [[ $(candidate \"10\"\
  ) = \"81\" ]]\n    [[ $(candidate \"12\") = \"274\" ]]\n    [[ $(candidate \"14\"\
  ) = \"927\" ]]\n}\n\nrun_test"
completions: ["  local input=\"$1\"\n  [[ \"$input\" =~ ^-?[0-9]+$ ]] || { echo \"\
    Invalid input\"; return 1; }\n  if [[ \"$input\" -le 0 ]]; then\n    echo \"0\"\
    \n  elif [[ \"$input\" -eq 1 ]]; then\n    echo \"0\"\n  elif [[ \"$input\" -eq\
    \ 2 ]]; then\n    echo \"1\"\n  else\n    echo $(( $(fibfib \"$((input-1))\")\
    \ + $(fibfib \"$((input-2))\") + $(fibfib \"$((input-3))\") ))\n  fi", "  if ((\
    \ $1 == 0 )); then\n    echo \"0\"\n  elif (( $1 == 1 )); then\n    echo \"0\"\
    \n  elif (( $1 == 2 )); then\n    echo \"1\"\n  else\n    # echo $(($(fibfib \"\
    $(($1-1))\") + $(fibfib \"$(($1-2))\") + $(fibfib \"$(($1-3))\")))\n    current=0\n\
    \    previous=0\n    prevprev=0\n    for (( i=2; i<$1; i++ )); do\n      current=$(($previous\
    \ + $prevprev + $current))\n      prevprev=$previous\n      previous=$current\n\
    \    done\n    echo \"$current\"\n  fi", "\tif (($1 == 0)); then\n\t\techo \"\
    0\"\n\t\treturn\n\tfi\n\tif (($1 == 1)); then\n\t\techo \"0\"\n\t\treturn\n\t\
    fi\n\tif (($1 == 2)); then\n\t\techo \"1\"\n\t\treturn\n\tfi\n\tf1=0\n\tf2=0\n\
    \tf3=1\n\tfor ((i=3; i<=$1; i++)); do\n\t\tfn=$((f1+f2+f3))\n\t\tf1=$f2\n\t\t\
    f2=$f3\n\t\tf3=$fn\n\tdone\n\techo \"$fn\"", "  if [ $1 -lt 2 ]; then\n    echo\
    \ 0\n  elif [ $1 -eq 2 ]; then\n    echo 1\n  else\n    echo $(echo \"$(fibfib\
    \ \"$(($1-1))\") + $(fibfib \"$(($1-2))\") + $(fibfib \"$(($1-3))\")\" | bc)\n\
    \  fi", "\tlocal f0=0\n\tlocal f1=0\n\tlocal f2=1\n\tlocal n=0\n\tlocal fibfib=0\n\
    \t[ \"$1\" -eq 0 ] && echo \"$f0\" && return\n\t[ \"$1\" -eq 1 ] && echo \"$f1\"\
    \ && return\n\t[ \"$1\" -eq 2 ] && echo \"$f2\" && return\n\tfor n in $(seq 3\
    \ \"$1\"); do\n\t\tfibfib=$((f0+f1+f2))\n\t\tf0=$f1\n\t\tf1=$f2\n\t\tf2=$fibfib\n\
    \tdone\n\techo \"$fibfib\"", "  if [ \"$1\" == \"0\" ]; then\n    echo \"0\"\n\
    \  elif [ \"$1\" == \"1\" ]; then\n    echo \"0\"\n  elif [ \"$1\" == \"2\" ];\
    \ then\n    echo \"1\"\n  else\n    local n=$1\n    local n1=$(($n-1))\n    local\
    \ n2=$(($n-2))\n    local n3=$(($n-3))\n    local p1=$(fibfib $n1)\n    local\
    \ p2=$(fibfib $n2)\n    local p3=$(fibfib $n3)\n    echo $(($p1+$p2+$p3))\n  fi",
  "    if [[ $1 -lt 2 ]]; then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n  \
    \      echo 1\n    else\n        echo $(($(fibfib $(($1-1))) + $(fibfib $(($1-2)))\
    \ + $(fibfib $(($1-3)))))\n    fi", "    echo $1 | awk 'BEGIN {\n        N = 0;\n\
    \        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 1;\n    } {\n    \
    \    N = $1;\n    } END {\n        for (i = 3; i <= N; i++) {\n            fib[i]\
    \ = fib[i-1] + fib[i-2] + fib[i-3];\n        }\n        print fib[N];\n    }'",
  "    local -i n=0\n    [ \"$1\" -ge 0 ] && n=$1\n    [ \"$n\" -eq 0 ] && echo 0\
    \ && return\n    [ \"$n\" -eq 1 ] && echo 0 && return\n    [ \"$n\" -eq 2 ] &&\
    \ echo 1 && return\n    local -i n1=0 n2=0 n3=1\n    for i in $(seq 3 $n); do\n\
    \        local -i n1_last=$n1 n2_last=$n2 n3_last=$n3\n        n1=$n2_last\n \
    \       n2=$n3_last\n        n3=$n1_last+$n2_last+$n3_last\n    done\n    echo\
    \ $n3", "    n=$1\n    if [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq\
    \ 1 ]; then\n        echo 0\n    elif [ $n -eq 2 ]; then\n        echo 1\n   \
    \ else\n        i=3\n        a=0\n        b=0\n        c=1\n        while [ $i\
    \ -le $n ]; do\n            d=$(($a + $b + $c))\n            a=$b\n          \
    \  b=$c\n            c=$d\n            i=$(($i + 1))\n        done\n        echo\
    \ $d\n    fi", "    local -i n=$1\n    if (( n == 0 )); then\n        echo 0\n\
    \    elif (( n == 1 )); then\n        echo 0\n    elif (( n == 2 )); then\n  \
    \      echo 1\n    else\n        # For simplicity of implementation, simply do\
    \ an exponential implementation.\n        # f0 = 0, f1 = 0, f2 = 1, f3 = 1\n \
    \       local -i f0=0 f1=0 f2=1 f3=1\n        while (( n-- > 3 )); do\n      \
    \      f0=$f1\n            f1=$f2\n            f2=$f3\n            f3=$(( f0 +\
    \ f1 + f2 ))\n        done\n        echo $f3\n    fi", "    if [[ $1 -eq 0 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 0\n    elif\
    \ [[ $1 -eq 2 ]]; then\n        echo 1\n    else\n        echo $(( $(fibfib $(($1-1)))\
    \ + $(fibfib $(($1-2))) + $(fibfib $(($1-3))) ))\n    fi", "\t# get the fibfib\
    \ at place 1\n\tn=$1\n\t# fibfib(0) == 0\n\tif [ $n -eq 0 ]; then\n\t\techo \"\
    0\"\n\t\treturn 0\n\tfi\n\t# fibfib(1) == 0\n\tif [ $n -eq 1 ]; then\n\t\techo\
    \ \"0\"\n\t\treturn 0\n\tfi\n\t# fibfib(2) == 1\n\tif [ $n -eq 2 ]; then\n\t\t\
    echo \"1\"\n\t\treturn 0\n\tfi\n\t# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \tfib_1=0\n\tfib_2=0\n\tfib_3=1\n\tfor (( i=3; i<=n; i++ )); do\n\t\t((fib_1=fib_2))\n\
    \t\t((fib_2=fib_3))\n\t\t((fib_3=fib_1+fib_2+fib_3))\n\tdone\n\techo $fib_3",
  "    n=$1\n    if [ $n -eq 0 ]; then\n        echo 0\n    elif [ $n -eq 1 ]; then\n\
    \        echo 0\n    elif [ $n -eq 2 ]; then\n        echo 1\n    else\n     \
    \   fibfib_prev=0\n        fibfib_prevprev=0\n        fibfib_prevprevprev=0\n\
    \        fibfib_current=1\n        i=3\n        while [ $i -le $n ]; do\n    \
    \        fibfib_prevprevprev=$fibfib_prevprev\n            fibfib_prevprev=$fibfib_prev\n\
    \            fibfib_prev=$fibfib_current\n            fibfib_current=$((fibfib_prev+fibfib_prevprev+fibfib_prevprevprev))\n\
    \            i=$((i+1))\n        done\n        echo $fibfib_current\n    fi",
  "    local n=$1\n    if [[ $n -lt 3 ]]; then\n        echo $(( n-1 ))\n    else\n\
    \        echo $(( $(fibfib $(( n-1 ))) + $(fibfib $(( n-2 ))) + $(fibfib $(( n-3\
    \ ))) ))\n    fi", "    echo \"$1\" | awk '{\n        if ($1==0) {\n         \
    \   print 0\n        } else if ($1==1) {\n            print 0\n        } else\
    \ if ($1==2) {\n            print 1\n        } else {\n            print $1-1\
    \ \" \" $1-2 \" \" $1-3 | \"xargs fibfib | awk '\\''{s+=$1} END {print s}'\\''\
    \ \"\n        }\n    }'", "    local input=$1\n    if [ $input -eq 0 ]; then\n\
    \        echo \"0\"\n    elif [ $input -eq 1 ]; then\n        echo \"0\"\n   \
    \ elif [ $input -eq 2 ]; then\n        echo \"1\"\n    else\n        # Recursive\
    \ call\n        echo \"$(($(fibfib $((input-1))) + $(fibfib $((input-2))) + $(fibfib\
    \ $((input-3)))))\"\n    fi", "    if [ $1 -lt 2 ]; then\n        echo 0\n   \
    \ elif [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo $(($(fibfib\
    \ $(( $1 - 1 ))) + $(fibfib $(( $1 - 2 ))) + $(fibfib $(( $1 - 3 )))))\n    fi",
  "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n      \
    \  echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 1\n    else\n        echo\
    \ $(($(fibfib $(($1-1))) + $(fibfib $(($1-2))) + $(fibfib $(($1-3)))))\n    fi",
  "    local -a array=(0 0 1)\n    local i=2\n\n    while [ $i -lt $1 ]; do\n    \
    \    array[$i]=$(( ${array[$((i-1))]} + ${array[$((i-2))]} + ${array[$((i-3))]}\
    \ ))\n        i=$((i+1))\n    done\n\n    echo ${array[$((i-1))]}"]
stop_tokens:
- "\n}"
