name: HumanEval_55_fib
language: sh
prompt: "#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\
  \n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\n\
  fib() {\n"
tests: "}\n\ncandidate() {\n    fib \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"10\") = \"55\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate\
  \ \"8\") = \"21\" ]]\n    [[ $(candidate \"11\") = \"89\" ]]\n    [[ $(candidate\
  \ \"12\") = \"144\" ]]\n}\n\nrun_test"
completions: ["    local n=${1:-1}\n    local i=1 a=0 b=1\n    while [ $i -lt $n ];\
    \ do\n        a=$((b))\n        b=$((a+b))\n        i=$((i+1))\n    done\n   \
    \ echo $a", "  if [ \"$1\" -eq 0 ]; then\n    echo 0\n  elif [ \"$1\" -eq 1 ];\
    \ then\n    echo 1\n  else\n    echo $(( $(fib \"$(( $1 - 1 ))\") + $(fib \"$((\
    \ $1 - 2 ))\") ))\n  fi", "  if [[ \"$1\" -eq 1 ]]; then\n    echo 1\n  elif [[\
    \ \"$1\" -eq 2 ]]; then\n    echo 1\n  else\n    # $1 is an integer, but $(fib\
    \ \"1+1\") produces \"1+1\"\n    # we can't pass $1 to bc\n    # bc: (standard_in)\
    \ 1: parse error\n    # so we need to use bc -l\n    # bc -l deals with floating\
    \ point numbers\n    # but bc -l can't deal with large numbers\n    # bc: (standard_in)\
    \ 1: parse error\n    # we can't even display fib(500)\n    # so we need to use\
    \ python3\n    python3 -c \"from math import sqrt; print(((1+sqrt(5))**$1-(1-sqrt(5))**$1)/(2**$1*sqrt(5)))\"\
    \n  fi", "  local n=$1 i j result=0 result_tmp=1\n  (( n >= 2 )) && {\n    while\
    \ (( n-- )); do\n      (( result = result + result_tmp ))\n      (( result_tmp\
    \ = result - result_tmp ))\n    done\n  }\n  echo \"$result\"", "  integer=$1\n\
    \  if [ $integer -eq 0 ]; then\n    printf \"0\"\n  elif [ $integer -eq 1 ]; then\n\
    \    printf \"1\"\n  else\n    printf \"$(($(fib \"$(($integer - 1))\") + $(fib\
    \ \"$(($integer - 2))\")))\"\n  fi", "    local n=$1\n    if [ $n -le 2 ]; then\n\
    \        echo 1\n    else\n        local n2=$(fib \"$((n-2))\")\n        local\
    \ n1=$(fib \"$((n-1))\")\n        echo $((n1+n2))\n    fi", "  if [[ $1 -lt 2\
    \ ]]; then\n    echo $1\n  else\n    local prev1=$(fib \"$(( $1 - 1 ))\")\n  \
    \  local prev2=$(fib \"$(( $1 - 2 ))\")\n    echo \"$(( $prev1 + $prev2 ))\"\n\
    \  fi", "    if [[ \"$1\" -eq \"1\" ]]; then\n        echo \"1\"\n    elif [[\
    \ \"$1\" -eq \"2\" ]]; then\n        echo \"1\"\n    else\n        echo \"$(bc\
    \ <<< \"$(fib \"$(($1 - 1))\") + $(fib \"$(($1 - 2))\")\")\"\n    fi", "  local\
    \ -i n=$1 i=1 j=0\n  until [ $i -gt $n ]; do\n    i=$(($i+1))\n    j=$(($i+$j))\n\
    \  done\n  echo $j", "  n=$1\n  if [ \"$n\" -eq 0 ]; then\n    echo 0\n  elif\
    \ [ \"$n\" -eq 1 ]; then\n    echo 1\n  else\n    echo $(($(fib \"$(($n - 1))\"\
    ) + $(fib \"$(($n - 2))\")))\n  fi", "  local n=\"$1\"\n  case \"$n\" in\n   \
    \ \"1\")  echo 1;;\n    \"2\")  echo 1;;\n    \"\")   echo \"error\";;\n    *[!0-9]*)\
    \  echo \"error\";;\n    *)  echo \"$(( $(fib \"$((n-1))\") + $(fib \"$((n-2))\"\
    ) ))\";;\n  esac", "    # read command-line argument\n    local n=\"$1\"\n   \
    \ # check if $n is an integer\n    [[ \"$n\" =~ ^[0-9]+$ ]] || return 1\n    case\
    \ \"$n\" in\n        0) echo 0;;\n        1) echo 1;;\n        *) echo $(( $(fib\
    \ $((n-1))) + $(fib $((n-2))) ))\n    esac", "  # assume input is an integer\n\
    \  local input=$1\n  # set up\n  [ \"$input\" -eq 0 ] && echo \"0\" && return\n\
    \  [ \"$input\" -eq 1 ] && echo \"1\" && return\n  [ \"$input\" -eq 2 ] && echo\
    \ \"1\" && return\n  # main\n  local pre1=1\n  local pre2=1\n  local i\n  for\
    \ ((i=3; i<=input; i++)); do\n    local curr=$(( pre1 + pre2 ))\n    pre2=$pre1\n\
    \    pre1=$curr\n  done\n  echo \"$curr\"", "    # We don't want to deal with\
    \ negative numbers,\n    # hence abs\n    local i=${1#-}\n    local current=0\n\
    \    local next=1\n    while (( i-- > 0 )); do\n        local old_current=$current\n\
    \        current=$next\n        next=$((old_current + current))\n    done\n  \
    \  echo $current", "  local a b c=\"0\"\n  for ((i=1; i<=$1; i++)); do\n    a=$c\n\
    \    b=$(($c+1))\n    c=$(($a+$b))\n  done\n  echo \"$a\"", "  local -r n=\"$1\"\
    \n  local    a=0 b=1\n  local    i=0\n  while [ \"$i\" -lt \"$n\" ]; do\n    local\
    \ c=$((a + b))\n    a=$b\n    b=$c\n    i=$((i + 1))\n  done\n  echo \"$a\"",
  "  local n=\"$1\"\n  local a=0\n  local b=1\n  local c\n  while [ \"$n\" -gt 0 ];\
    \ do\n    c=$((a + b))\n    a=$b\n    b=$c\n    n=$((n - 1))\n  done\n  echo \"\
    $a\"", "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo\
    \ 1\n  else\n    echo $(( $(fib $(( $1 - 1 ))) + $(fib $(( $1 - 2 ))) ))\n  fi",
  "\tlocal a=0\n\tlocal b=1\n\tlocal num=0\n\tlocal i\n\tfor i in $(seq $1); do\n\t\
    \tlet \"num = a + b\"\n\t\tlet \"a = b\"\n\t\tlet \"b = num\"\n\tdone\n\techo\
    \ \"$a\"", "    if (($1 < 1)); then\n        exit 1\n    fi\n    if (($1 == 1));\
    \ then\n        echo \"1\"\n    else\n        [ \"$2\" == \"\" ] && set -- \"\
    $1\" \"0\" \"1\"\n        fib \"$(($1 - 1))\" \"$2\" \"$(($2 + $3))\"\n    fi"]
stop_tokens:
- "\n}"
