name: HumanEval_117_select_words
language: sh
prompt: "#!/bin/bash\n# Given a string s and a natural number n, you have been tasked\
  \ to implement \n# a function that returns a list of all words from string s that\
  \ contain exactly \n# n consonants, in order these words appear in the string s.\n\
  # If the string s is empty then the function should return an empty list.\n# Note:\
  \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
  # >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>>\
  \ $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n\
  # >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"\
  Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\"\
  )\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n"
tests: "}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
  \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple\
  \ white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"\
  world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
  \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
  \ ]]\n}\n\nrun_test"
completions: ["    if [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n \
    \   fi\n    local out=$(echo $1 | tr ' ' '\\n' | awk -v n=$2 'BEGIN {FS=\"\"}\
    \ {cnt=0; for (i=1; i<=NF; i++) {if ($i != \"a\" && $i != \"e\" && $i != \"i\"\
    \ && $i != \"o\" && $i != \"u\") {cnt++}}; if (cnt == n) {print}}')\n    echo\
    \ \"[$(echo $out | sed 's/ /\", \"/g')]\"", "    local words=(${1// / })\n   \
    \ local n=$2\n    local results=()\n    for word in \"${words[@]}\"; do\n    \
    \    if [[ $(echo \"$word\" | grep -o \"[^aeiou]\" | wc -l) == $n ]]; then\n \
    \           results+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo \"[${results[@]}]\"",
  "    declare -a words_array=()\n\n    echo $1 | tr \" \" \"\\n\" | grep -E '^[bcdfghjklmnpqrstvwxyz]+$'\
    \ | grep -E \"^[bcdfghjklmnpqrstvwxyz]{$2}$\" | tr -d '\\n'", '    echo "$1" |
    tr " " "\n" | tr -d "[a,e,i,o,u]" | grep -E "^.{$2}\$" | tr "\n" "," | sed "s/,$//"',
  "  local input=\"$1\"\n  local num=\"$2\"\n  echo $input | tr ' ' '\\n' | awk -v\
    \ num=\"$num\" '$0 ~ /^[a-zA-Z]*$/ {if (length($0) - length(gensub(/[a,e,i,o,u,A,E,I,O,U]/,\"\
    \",\"g\",$0)) == num) print \"\\\"\"$0\"\\\"\"}'", "    declare -A CONSONANTS=([\"\
    B\"]=1 [\"C\"]=1 [\"D\"]=1 [\"F\"]=1 [\"G\"]=1 [\"H\"]=1 [\"J\"]=1 [\"K\"]=1 [\"\
    L\"]=1 [\"M\"]=1 [\"N\"]=1 [\"P\"]=1 [\"Q\"]=1 [\"R\"]=1 [\"S\"]=1 [\"T\"]=1 [\"\
    V\"]=1 [\"W\"]=1 [\"X\"]=1 [\"Y\"]=1 [\"Z\"]=1 [\"b\"]=1 [\"c\"]=1 [\"d\"]=1 [\"\
    f\"]=1 [\"g\"]=1 [\"h\"]=1 [\"j\"]=1 [\"k\"]=1 [\"l\"]=1 [\"m\"]=1 [\"n\"]=1 [\"\
    p\"]=1 [\"q\"]=1 [\"r\"]=1 [\"s\"]=1 [\"t\"]=1 [\"v\"]=1 [\"w\"]=1 [\"x\"]=1 [\"\
    y\"]=1 [\"z\"]=1)\n    declare -A VOWELS=([\"A\"]=1 [\"E\"]=1 [\"I\"]=1 [\"O\"\
    ]=1 [\"U\"]=1 [\"a\"]=1 [\"e\"]=1 [\"i\"]=1 [\"o\"]=1 [\"u\"]=1)\n    declare\
    \ -a WORDS\n    declare -a FILTERED\n    IFS=' ' read -r -a WORDS <<< \"$1\"\n\
    \    for word in \"${WORDS[@]}\"; do\n        counter=0\n        for (( i=0; i<${#word};\
    \ i++ )); do\n            if [[ ${CONSONANTS[${word:$i:1}]} ]]; then\n       \
    \         counter=$((counter+1))\n            fi\n        done\n        if [[\
    \ $counter -eq $2 ]]; then\n            FILTERED+=(\"$word\")\n        fi\n  \
    \  done\n    if [[ ${#FILTERED[@]} -gt 0 ]]; then\n        printf '%s\\n' \"${FILTERED[@]}\"\
    \n    fi", "    echo -e '\"'\"$1\"'\"' | tr ' ' '\\n' | tr -d -c '[:alpha:]' |\
    \ awk '{ if (NF == '\"$2\"') print; }'", "    echo $(echo $1 | tr \" \" \"\\n\"\
    \ | grep -P '^[^aeiou]{'$2'}$')", "  # write your solution here\n  echo", "  \
    \  input=$1\n    count=$2\n    # echo $input\n    # echo $count\n    string_length=${#input}\n\
    \    # echo $string_length\n    j=0\n    for (( i=0; i<$string_length; i++ ))\n\
    \    do\n        # echo $i\n        first=$(echo $input | cut -c$((i+1)))\n  \
    \      # echo $first\n        if [[ $first == \" \" ]]\n        then\n       \
    \     # echo \"FOUND A SPACE\"\n            j=$((j+1))\n            word=$(echo\
    \ $input | cut -c$(((i-$j)+1))-$((i)))\n            # echo $word\n           \
    \ cons_count=$(echo -n $word | grep -oP \"[^aeiou ]\" | wc -l)\n            #\
    \ echo $cons_count\n            if [[ $cons_count == $count ]]\n            then\n\
    \                # echo $word\n                # echo $count\n               \
    \ echo $word\n            fi\n            j=0\n        else\n            j=$((j+1))\n\
    \        fi\n    done\n    last_word=$(echo $input | cut -c$(((i-$j)+1))-$((i)))\n\
    \    # echo $last_word\n    cons_count=$(echo -n $last_word | grep -oP \"[^aeiou\
    \ ]\" | wc -l)\n    # echo $cons_count\n    if [[ $cons_count == $count ]]\n \
    \   then\n        # echo $last_word\n        # echo $count\n        echo $last_word\n\
    \    fi\n    # echo $input\n    # echo $count", "    [[ $# -ne 2 ]] && echo \"\
    Not valid number of arguments.\" && exit 1\n    [[ ! $2 =~ ^[0-9]+$ ]] && echo\
    \ \"Not valid number for consonants.\" && exit 1\n    words=$(echo $1 | sed 's/\\\
    ([a-zA-Z]\\+\\)/\"\\1\"/g')\n    #echo $words\n    #echo $2\n    res=$(echo $words\
    \ | awk -v number=\"$2\" '{\n        while(match($0,/\" [^aeiou]*\"/)) {\n   \
    \         word=substr($0, RSTART, RLENGTH)\n            $0=substr($0, RSTART+RLENGTH)\n\
    \            gsub(/[^aeiou]/, \"&\", word)\n            if(length(word) == number)\n\
    \                printf(\"%s \", word)\n        }\n    }')\n    echo \"[$res]\"",
  "  local words=(${1// / })\n  local vowels=\"[aeiouAEIOU]\"\n  for word in \"${words[@]}\"\
    ; do\n    consonants=$(echo \"$word\" | sed -e \"s/[^$vowels]//g\")\n    if [\
    \ ${#consonants} -eq $2 ]; then\n      echo \"\\\"$word\\\"\"\n    fi\n  done",
  "    words=($(echo \"$1\" | grep -oE '[a-zA-Z]+'))\n    vowels=(a e i o u)\n   \
    \ n=$2\n    len=${#words[@]}\n    for ((i=0; i<$len; i++)); do\n        word=${words[$i]}\n\
    \        count=0\n        for ((j=0; j<${#word}; j++)); do\n            char=${word:$j:1}\n\
    \            if ! [[ \"${vowels[@]}\" =~ \"$char\" ]]; then\n                ((count++))\n\
    \            fi\n        done\n        if [ $count == $n ]; then\n           \
    \ echo \"\\\"$word\\\"\"\n        fi\n    done", "    # Let's assume that all\
    \ vowels are a, e, i, o, u\n    n=\"$2\"\n    string=\"$1\"\n    array=($(echo\
    \ \"$string\" | tr \" \" \"\\n\"))\n    out_array=()\n    for word in \"${array[@]}\"\
    ; do\n        vars=($(echo $word | sed 's/[^aeiou]//g'))\n        if [ \"${#vars[@]}\"\
    \ == \"$n\" ]; then\n            out_array+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo ${out_array[@]}", "    awk '{ split($0,a,\" \");\n       \
    \ for (i in a) {\n            if(length(a[i]) == n) {\n                gsub(/[^b-df-hj-np-tv-z]/,\"\
    \",a[i]);\n                if(length(a[i]) == n)\n                    print a[i];\n\
    \            }\n        }\n    }' n=$2", '    echo -e "$1" | tr -d " " | grep
    -E "^[^aeiou]{$2}$"', "    [[ -z $1 ]] && echo [] && return\n    local words\n\
    \    local pattern=\"[bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz]*\"\n    words=$(echo\
    \ $1 | grep -o \"$pattern\" | awk '{print $0}')\n    for word in $words; do\n\
    \        if [[ $(echo $word | grep -o \"$pattern\" | wc -l) -eq $2 ]]; then\n\
    \            echo $word\n        fi\n    done", "    echo '[\"'$(echo $1 | grep\
    \ --only-matching --word-regexp \"[a-zA-Z]*\" | awk '\n        BEGIN {\n     \
    \       consonants = \"bcdfghjklmnpqrstvwxyz\"\n            len = length(consonants)\n\
    \        }\n        {\n            for (i = 1; i <= len; i++) {\n            \
    \    gsub(substr(consonants, i, 1), \"\", $0)\n            }\n            if (length($0)\
    \ == '$2') {\n                print\n            }\n        }')'\"]'", "    local\
    \ -A vowels=([a]=1 [e]=1 [i]=1 [o]=1 [u]=1)\n    local string=$1\n    local count=$2\n\
    \    local words=\"$(tr ' ' '\\n' <<< \"$string\")\"\n    local -a output\n  \
    \  for word in $words; do\n        local word=${word,,}\n        local length=${#word}\n\
    \        local i\n        local vowel_count=0\n        for ((i=0; i<length; i++));\
    \ do\n            [[ ${vowels[${word:i:1}]} ]] && ((++vowel_count))\n        done\n\
    \        (( vowel_count == length - count )) && output+=(\\\"$word\\\")\n    done\n\
    \    echo \"${output[@]}\"", "    local s=\"$1\"\n    local n=\"$2\"\n    local\
    \ regex=''\n    local regex_vowels='[aeiouAEIOU]'\n    local regex_consonants='[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]'\n\
    \    local result='[]'\n    local words=''\n    local words_num=0\n    local words_counter=0\n\
    \    local word=''\n    local word_consonants_num=0\n    local word_consonants_counter=0\n\
    \    local ch=''\n    local i=0\n    local j=0\n    local k=0\n    local char_num=0\n\
    \    local new_result=''\n    local tmp=''\n    # The string may contain capital\
    \ and lowercase letters, spaces and tabs.\n    #s=\"$(echo \"$s\" | tr [:upper:]\
    \ [:lower:])\"\n    # -------------------------------------------------------------------------\n\
    \    # First, let's determine the number of words.\n    # -------------------------------------------------------------------------\n\
    \    words_num=$(echo \"$s\" | tr -cd ' ' | wc -c)\n    words_num=$((words_num\
    \ + 1))\n    # -------------------------------------------------------------------------\n\
    \    # Loop through all words.\n    # -------------------------------------------------------------------------\n\
    \    for ((i=0; i<words_num; i++)); do\n        word=\"$(echo \"$s\" | cut -d\
    \ ' ' -f $((i+1)))\"\n        # If the word does not have n letters, then skip\
    \ it.\n        if [ ${#word} -ne $n ]; then\n            continue\n        fi\n\
    \        # Get all consonants.\n        regex=''\n        for ((j=0; j<${#word};\
    \ j++)); do\n            ch=\"$(echo \"$word\" | cut -c $((j+1)))\"\n        \
    \    if [ \"$ch\" == ' ' ]; then\n                continue\n            fi\n \
    \           if [[ $ch =~ $regex_vowels ]]; then\n                continue\n  \
    \          fi\n            if [[ $ch =~ $regex_consonants ]]; then\n         \
    \       regex=\"$regex$ch\"\n            fi\n        done\n        # Count the\
    \ number", "    echo -e \"$1\" | \\\n    tr \" \" \"\\n\" | \\\n    egrep -v \"\
    ^$\" | \\\n    while read word; do \n        count=$(echo $word | tr -d -c \"\
    [^aeiou]\" | wc -c)\n        if [ $count -eq $2 ]; then\n            echo '\"\
    '$word'\"'\n        fi\n    done", "    # Constants\n    local LETTERS=\"bcdfghjklmnpqrstvwxyz\"\
    \n\n    # Variables\n    local -A DICT\n    local -a WORDS\n    local TMP\n  \
    \  local WORD\n    local CONS\n\n    # Find all words\n    WORDS=($(echo \"$1\"\
    \ | grep -oE '[a-zA-Z]+'))\n\n    # Initialize the dictionary\n    # Loop through\
    \ all characters in $LETTERS\n    for C in $(seq 1 ${#LETTERS}); do\n        TMP=\"\
    ${LETTERS:$(($C-1)):1}\"\n        DICT[$TMP]=0\n    done\n\n    # Find all the\
    \ consonants\n    # Loop through all words\n    for C in $(seq 1 ${#WORDS[@]});\
    \ do\n        WORD=\"${WORDS[$(($C-1))]}\"\n        # Loop through all characters\
    \ in $WORD\n        for D in $(seq 1 ${#WORD}); do\n            TMP=\"${WORD:$(($D-1)):1}\"\
    \n            TMP=$(echo \"$TMP\" | tr [:upper:] [:lower:])\n            if [[\
    \ ${DICT[$TMP]} -gt 0 ]]; then\n                DICT[$TMP]=$((${DICT[$TMP]}+1))\n\
    \            fi\n        done\n    done\n\n    # Loop through all words\n    for\
    \ C in $(seq 1 ${#WORDS[@]}); do\n        WORD=\"${WORDS[$(($C-1))]}\"\n     \
    \   CONS=0\n        # Loop through all characters in $WORD\n        for D in $(seq\
    \ 1 ${#WORD}); do\n            TMP=\"${WORD:$(($D-1)):1}\"\n            TMP=$(echo\
    \ \"$TMP\" | tr [:upper:] [:lower:])\n            if [[ ${DICT[$TMP]} -gt 0 ]];\
    \ then\n                CONS=$(($CONS+1))\n            fi\n        done\n    \
    \    if [[ $CONS -eq $2 ]]; then\n            echo -n '\"'$WORD'\"'\n        \
    \    if [[ $C -lt ${#WORDS[", "    echo \"\\\"$1\\\"\"\n    echo \"$2\"", "  echo\
    \ $1 | tr '[:space:]' '\\n' | grep -Ev '\\A[aeiou]{1,}' | grep -E '^[^aeiou]{'$2'}$'",
  "  echo $1 | tr -c -d '^a-zA-Z\\n' | tr -s '[:space:]' '\\n' | \\\n  while read\
    \ word; do\n    [[ $(echo $word | grep -o -i '[^aeiou]\\{1\\}' | wc -l) -eq $2\
    \ ]] && echo \\\"$word\\\" || true\n  done", "    local s=\"$1\" n=\"$2\"\n  \
    \  echo \"\\\"$s\\\" \\\"$n\\\"\"\n    if [[ -z \"$s\" ]]; then\n        echo\
    \ \"[]\"\n        return 0\n    fi\n    local words_with_exactly_n_consonants\n\
    \    while read word; do\n        local consonants=\"$(echo \"$word\" | sed 's/[aeyiuo]//g')\"\
    \n        if [[ \"${#consonants}\" -eq \"$n\" ]]; then\n            words_with_exactly_n_consonants=\"\
    $words_with_exactly_n_consonants$word \"\n        fi\n    done <<< \"$(echo \"\
    $s\" | tr ' ' '\\n')\"\n    echo \"[\\\"$(echo \"$words_with_exactly_n_consonants\"\
    \ | tr ' ' '\", \"')\\\"]\"", "    if [ -z \"$1\" ]; then\n        return\n  \
    \  fi\n    echo $1 | tr ' ' '\\n' | grep -i -E \"[^aeiouAEIOU]{$2}\" | tr '\\\
    n' ' ' | sed 's/[ \\t]*$//'", "    if [[ -z $1 ]]; then\n        echo \"No arguments\
    \ given.\"\n        exit 1\n    fi\n    if [[ ! $2 =~ ^[0-9]+$ ]]; then\n    \
    \    echo \"Second argument is not a number.\"\n        exit 1\n    fi\n    if\
    \ [[ $2 -lt 0 ]]; then\n        echo \"Second argument must be a positive number.\"\
    \n        exit 1\n    fi\n    # Convert the string to lowercase.\n    # Remove\
    \ all non-alphabetic characters.\n    # Replace all whitespace characters with\
    \ newlines.\n    # Split the string and put each word on a new line.\n    # Remove\
    \ all words containing 0 consonants.\n    # Remove all words containing more than\
    \ $2 consonants.\n    echo $(echo $1 | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z]//g'\
    \ | tr -s '[:space:]' '\\n' | grep -v -E '^[aeiou]+$' | sed -E \"/^[aeiou]{$2}/d\"\
    )", "    if [[ $# -ne 2 ]]; then\n        echo \"select_words: Requires 2 arguments\"\
    \ >&2\n        return 1\n    fi\n    if [[ -z \"$1\" ]]; then\n        return\
    \ 0\n    fi\n    local -i num=$2\n    local -a words=($(echo \"$1\" | tr ' ' '\\\
    n'))\n    local -a results=()\n    for word in \"${words[@]}\"; do\n        local\
    \ vowels=${word//[^aeiouAEIOU]/}\n        local other=${word//[aeiouAEIOU]/}\n\
    \        [[ ${#other} -eq $num ]] && results+=($word)\n    done\n    echo ${results[@]}",
  "    local target_string=$1\n    local target_number=$2\n    local current_word\n\
    \    local current_number\n    local result=()\n    for current_word in $target_string;\
    \ do\n        current_number=$(echo $current_word | tr -cd '[^aeiouAEIOU]' | wc\
    \ -c)\n        if [[ \"$current_number\" == \"$target_number\" ]]; then\n    \
    \        result+=($current_word)\n        fi\n    done\n    echo \"${result[@]}\"",
  '    :', "    echo \"$1\" | \\\n        tr 'A-Z' 'a-z' | \\\n        tr -d 'aeiou'\
    \ | \\\n        sed 's/\\(.*\\)/\"\\1\"/g' | \\\n        awk -v n=\"$2\" 'length($0)\
    \ == (n + 2)'", "\tlocal string=$1\n\tlocal num=$2\n\t# for each word, put in\
    \ array\n\tIFS=' ' read -r -a array <<< \"$string\"\n\t# for each word count the\
    \ num of consonants\n\tfor word in \"${array[@]}\"\n\tdo\n\t\t# if word contains\
    \ num of consonants, echo word\n\t\tif [[ $(consonants \"$word\") -eq \"$num\"\
    \ ]]; then\n\t\t\techo $word\n\t\tfi\n\tdone", "    local -i n=0\n    # if our\
    \ string is empty, return an empty list\n    if [ -z \"$1\" ]; then\n        echo\
    \ \"[]\"\n        return 0\n    fi\n    # otherwise, iterate over every word in\
    \ $1\n    for word in $1; do\n        # count the number of consonants in $word\n\
    \        # note: I've cheated a little here, since I've just added the\n     \
    \   #       number of vowels, and subtracted that from the length\n        # \
    \      of the word. It's not as efficient, but it's easier\n        #       to\
    \ read, and in this case, easier to write, too.\n        local -i n_consonants=$(echo\
    \ $word | grep -o \"[a|e|i|o|u]\" | wc -l)\n        n_consonants=$((${#word} -\
    \ n_consonants))\n        # if there are exactly $2 consonants in $word, add it\
    \ to our result\n        if [ $n_consonants -eq $2 ]; then\n            result[$n]=\"\
    \\\"$word\\\"\"\n            ((n++))\n        fi\n    done\n    # then print our\
    \ result as a comma-separated list, wrapped in square brackets\n    printf \"\
    [%s]\" \"${result[@]}\"", "    local string=$1\n    local consonants=$2\n    echo\
    \ '['\n\n    while read -r word; do\n        local l=$(echo \"$word\" | sed -r\
    \ \"s/[^aeiou]//g\")\n        if [[ ${#l} -eq \"$consonants\" ]]; then\n     \
    \       echo -n \"\\\"$word\\\"\"\n            echo -n ', '\n        fi\n    done\
    \ <<< \"$(echo \"$string\" | tr -s \" \" | sed 's/ /\\'$'\\n/g')\"\n\n    echo\
    \ ']'", "    local string=$1\n    local n=$2\n    if [ \"$#\" -ne 2 ]; then\n\
    \        echo \"Error: wrong number of arguments\"\n        return 1\n    fi\n\
    \    if [[ ! $n =~ ^[0-9]+$ ]]; then\n        echo \"Error: arg 2 is not an integer\"\
    \n        return 1\n    fi\n    if [ -z \"$string\" ]; then\n        echo \"[]\"\
    \n        return 0\n    fi\n    local word\n    local result\n    while IFS='\
    \ ' read -ra words; do\n        for word in \"${words[@]}\"; do\n            local\
    \ count=0\n            for (( i=0; i<${#word}; i++ )); do\n                case\
    \ ${word:$i:1} in\n                    [bcdfghjklmnpqrstvwxyz]) count=$((count+1))\
    \ ;;\n                esac\n            done\n            if [ $count -eq $n ];\
    \ then\n                result=\"$result \\\"$word\\\"\"\n            fi\n   \
    \     done\n    done <<< \"$string\"\n    echo \"[$result]\"", "  local __string=\"\
    $1\"\n  local __num=\"$2\"\n  local __resultvar=$3\n  local __result=\"\"\n  if\
    \ [[ $__string != \"\" ]]; then\n    echo \"################################################################################\"\
    \n    echo \"Input string: \\\"$__string\\\"\"\n    echo \"Number of consonants:\
    \ $__num\"\n    echo \"################################################################################\"\
    \n    local __consonants=\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\n  \
    \  local __vowels=\"[aeiouAEIOU]\"\n    local __word=\"\"\n    while read -r __line;\
    \ do\n      echo \"Current line: $__line\"\n      local __orig_IFS=\"$IFS\"\n\
    \      IFS=$'\\n'\n      local __words=( $__line )\n      IFS=\"$__orig_IFS\"\n\
    \      for __word in \"${__words[@]}\"; do\n        echo \"Current word: $__word\"\
    \n        local __consonant_count=$( echo \"$__word\" | sed \"s/[$__vowels]//g\"\
    \ | wc -c )\n        echo \"Consonant count for $__word: $__consonant_count\"\n\
    \        if [[ $__consonant_count -eq $__num ]]; then\n          echo \"Found\
    \ word: $__word\"\n          __result=\"$__result\\\"$__word\\\" \"\n        fi\n\
    \      done\n    done <<< \"$__string\"\n  fi\n  eval $__resultvar=\"'$__result'\"",
  "    local string=$1\n    local n=$2\n    if [ \"$string\" == \"\" ]; then\n   \
    \     local words=[]\n    else\n        local words=$(echo $string | tr ' ' '\\\
    n' | sed '/^$/d')\n    fi\n    local result=$(python -c \"print [word for word\
    \ in $words if (len(word) - len(word.translate(None, 'aeiou'))) == $n]\")\n  \
    \  echo $result", "    for word in $1; do\n        if [[ $(echo $word | grep -o\
    \ -E '[bcdfghjklmnpqrstvwxyz]' | wc -l) == $2 ]]; then\n            echo -n '\"\
    '$word'\"'\n        fi\n    done", "    echo '['`echo $1 | sed -r \"s/([a-z])/\\\
    1\\n/g\" | grep -E '^[^aeiouAEIOU]+$' | wc -l`']'", "  local string=$1\n  local\
    \ number=$2\n  local words=($string)\n  local result=()\n  for word in \"${words[@]}\"\
    ; do\n    local n_consonants=$(echo \"$word\" | tr -d -c [^aeiouAEIOU] | wc -c)\n\
    \    if [[ $n_consonants -eq $number ]]; then\n      result+=($word)\n    fi\n\
    \  done\n  echo \"[$(IFS=','; echo \"${result[*]}\")]\"", "    sed -E 's/[^a-zA-Z\
    \ ]//g' <<< \"$1\" | \n    tr '[:upper:]' '[:lower:]' | \n    tr -s ' ' | \n \
    \   tr ' ' '\\n' | \n    sort | \n    uniq -c | \n    grep -v \"[a|e|i|o|u]\"\
    \ | \n    awk -v n=\"$2\" '{if ($1 == n) { printf \"\\\"%s\\\" \", $2 }}'", " \
    \   [ -z \"${1}\" ] && echo \"[]\" && return 1\n    readarray -t words <<< \"\
    ${1}\"\n    num_consonants=\"${2}\"\n    filtered_words=()\n    for word in \"\
    ${words[@]}\"; do\n        num_consonants_in_word=$(echo \"${word}\" | tr '[:upper:]'\
    \ '[:lower:]' | sed -E 's/[aeiou]//g' | tr -d ' ' | wc -c)\n        if [ \"${num_consonants_in_word}\"\
    \ -eq \"${num_consonants}\" ]; then\n            filtered_words+=(\"\\\"${word}\\\
    \"\")\n        fi\n    done\n    echo \"[${filtered_words[*]}]\"", "    echo \"\
    $1\" | tr -c '[:alpha:]' '\\n' | grep \"^[^aeiou]\\{$2\\}$\" | xargs", "    if\
    \ [[ -z $1 ]]; then\n        echo \"[]\"\n        return 0\n    fi\n    echo \"\
    $1\" | awk -v n=\"$2\" '\n        BEGIN {\n            numOfConsonants = 0\n \
    \           cons = \"b c d f g h j k l m n p q r s t v w x y z\"\n           \
    \ res = \"\"\n        }\n        {\n            numOfConsonants = 0\n        \
    \    for (i = 1; i <= NF; i++) {\n                # words beginning with a vowel\n\
    \                if (match($i, /^[aeiou]/)) {\n                    for (j = 1;\
    \ j <= length($i); j++) {\n                        if (index(cons, substr($i,\
    \ j, 1)) > 0) {\n                            numOfConsonants++\n             \
    \           }\n                    }\n                }\n                # words\
    \ beginning with a consonant\n                else {\n                    for\
    \ (j = 2; j <= length($i); j++) {\n                        if (index(cons, substr($i,\
    \ j, 1)) > 0) {\n                            numOfConsonants++\n             \
    \           }\n                    }\n                }\n                if (numOfConsonants\
    \ == n) {\n                    res = res \"\\\"\" $i \"\\\"\"\n              \
    \      if (i < NF) {\n                        res = res \", \"\n             \
    \       }\n                }\n            }\n        }\n        END {\n      \
    \      if (res == \"\") {\n                res = \"[]\"\n            }\n     \
    \       else {\n                res = \"[\" res \"]\"\n            }\n       \
    \     print res\n        }\n    '", "    local _lst=($(grep -o '[[:alpha:]]\\\
    +' <<< \"$1\"))\n    local _n=\"$2\"\n    local _ans=\"\"\n    local _idx\n  \
    \  local _idx2\n    local _size\n    local _len\n    local _i\n    local _j\n\
    \    local _vowels=\"aeiou\"\n    local _consonants=\"bcdfghjklmnpqrstvwxyz\"\n\
    \    local _r\n\n    for _idx in \"${!_lst[@]}\"; do\n        _len=0\n       \
    \ _v=0\n        _c=0\n        for _idx2 in $(seq 0 $((${#_lst[$_idx]} - 1)));\
    \ do\n            _r=\"${_lst[$_idx]:$_idx2:1}\"\n            if [ -n \"$(grep\
    \ -o \"$_r\" <<< \"$_vowels\")\" ]; then\n                _v=$(($_v + 1))\n  \
    \          elif [ -n \"$(grep -o \"$_r\" <<< \"$_consonants\")\" ]; then\n   \
    \             _c=$(($_c + 1))\n            fi\n        done\n        if [ \"$_c\"\
    \ -eq \"$_n\" ]; then\n            _ans=\"$_ans \\\"${_lst[$_idx]}\\\"\"\n   \
    \     fi\n    done\n    echo \"[$_ans]\"", "    if [ -z \"$1\" ] || [ \"$2\" -lt\
    \ 0 ]; then\n        echo []\n        return\n    fi\n    s=\"$1\"\n    n=\"$2\"\
    \n    words=$(echo \"$s\" | grep -oE \"[a-zA-Z]+\")\n    result=()\n    for word\
    \ in $words; do\n        cons=$(echo \"$word\" | grep -ioE '[qwrtypsdfghjklzxcvbnm]'\
    \ | wc -l)\n        if [ \"$cons\" -eq \"$n\" ]; then\n            # add quotes\
    \ to the word\n            word=\"\\\"$word\\\"\"\n            result+=(\"$word\"\
    )\n        fi\n    done\n    echo \"[${result[@]}]\"", "    # your code goes here\n\
    \    declare -a arr=()\n    local i=0\n    local string=\"$1\"\n    local count=$2\n\
    \    #echo \"string=${string}\"\n    #echo \"count=${count}\"\n    for word in\
    \ ${string}; do\n        #echo \"word=${word}\"\n        local consonants=$(grep\
    \ -o -i \"[^aeiou]\" <<< \"${word}\" | wc -l)\n        #echo \"consonants=${consonants}\"\
    \n        if [ \"${consonants}\" -eq \"${count}\" ]; then\n            #echo \"\
    Inside if\"\n            arr[$i]=\"\\\"${word}\\\"\"\n            ((i++))\n  \
    \      fi\n    done\n    echo \"[${arr[@]}]\"", "    s=$1\n    n=$2\n    declare\
    \ -a array\n    for word in $s; do\n        for (( i=0; i<${#word}; i++ )); do\n\
    \            if [[ $word =~ [aeiou] ]]; then\n                word=${word//[aeiou]/}\n\
    \            fi\n        done\n        if [ ${#word} -eq $n ]; then\n        \
    \    array+=($word)\n        fi\n    done\n    if [ ${#array[@]} -eq 0 ]; then\n\
    \        echo \"${array[@]}\"\n    else\n        echo -e \"[\\\"${array[@]}\\\"\
    ]\"\n    fi", "    words=($(echo \"$1\" | grep -o -E '[A-Za-z]+'))\n    cons=($(echo\
    \ \"$1\" | grep -o -E '[^A-Za-z]+'))\n    j=0\n    for i in \"${words[@]}\"; do\n\
    \        j=$((j+1))\n        count=0\n        for c in $(seq 1 ${#i}); do\n  \
    \          if [[ ${cons[@]} =~ ${i:$((c-1)):1} ]]; then\n                count=$((count+1))\n\
    \            fi\n        done\n        if [[ ${count} -eq $2 ]]; then\n      \
    \      if [[ $j -eq ${#words[@]} ]]; then\n                echo -n \"\\\"${i}\\\
    \"\"\n            else\n                echo -n \"\\\"${i}\\\", \"\n         \
    \   fi\n        fi\n    done", "    # this function should return a list of all\
    \ words from string $1 that contain exactly $2 consonants, in order these words\
    \ appear in the string $1\n    # your implementation here\n    num_of_words=$(echo\
    \ $1 | tr \" \" \"\\n\" | grep -E '([^aeiou]{'$2'})')\n\n    echo \"[$num_of_words]\"",
  "    list=$(echo \"$1\" | sed 's/ /\\n/g')\n    for word in $list; do\n        count=$(echo\
    \ \"$word\" | sed 's/[aeiou]//g' | wc -c)\n        if [ $count -eq $(($2 + 1))\
    \ ]; then\n            echo \"\\\"$word\\\"\"\n        fi\n    done", '    echo
    $1 | tr -s " " "\n" | grep -E -w "[^aeiouy]{$2}"', "  if [ -z \"$1\" ]; then\n\
    \    echo []\n    return 0\n  fi\n  local_variables(){\n    words=($1)\n    n=$2\n\
    \    consonants=\"bcdfghjklmnpqrstvwxyz\"\n    vowels=\"aeiou\"\n    results=()\n\
    \  }\n  count_consonants(){\n    local word=$1\n    local count=0\n    for ((\
    \ i=0; i<${#word}; i++ )); do\n      local char=\"${word:$i:1}\"\n      if [[\
    \ $consonants =~ $char ]]; then\n        count=$((count+1))\n      fi\n    done\n\
    \    echo $count\n  }\n  # Main\n  local_variables $1 $2\n  for word in \"${words[@]}\"\
    ; do\n    if [ \"$(count_consonants $word)\" == \"$n\" ]; then\n      results+=(\\\
    \"$word\\\")\n    fi\n  done\n  echo [${results[@]}]", "    echo $1 | tr ' ' '\\\
    n' | tr -d '[aeiouAEIOU]' |\n        awk -v n=\"$2\" '{if (length($0) == n) print\
    \ $0}' |\n        tr '\\n' ' ' |\n        awk '{print \"[\\\"\" $0 \"\\\"]\"}'",
  "\t:", "  local -r string=$1\n  local -r cons_count=$2\n  python -c \"print ' '.join(str(x)\
    \ for x in '$string'.split() if '$cons_count' == sum(not c in 'aeiou' for c in\
    \ x))\"", "    if [ -z \"$1\" ]; then\n        echo '[]'\n        return\n   \
    \ fi\n    # number of consonants\n    local n=$2\n    # number of vowels\n   \
    \ local m=$(expr 26 - $n)\n    # number of vowels and spaces\n    local total=$(expr\
    \ $m + 1)\n    # number of consonants and spaces\n    local total_c=$(expr $n\
    \ + 1)\n    # vowels pattern\n    local v='[aeiouAEIOU]'\n    # consonants pattern\n\
    \    local c='[^aeiouAEIOU ]'\n    # number of consonants per word\n    local\
    \ n_c=$(echo \"$1\" | tr ' ' '\\n' | egrep -o $c | wc -l)\n    # number of vowels\
    \ per word\n    local n_v=$(echo \"$1\" | tr ' ' '\\n' | egrep -o $v | wc -l)\n\
    \    # number of spaces per word\n    local n_s=$(echo \"$1\" | tr ' ' '\\n' |\
    \ egrep -o ' ' | wc -l)\n    # matches all words without vowels\n    local result=$(echo\
    \ \"$1\" | tr ' ' '\\n' | egrep -o $c | \\\n    awk '{print \"'\"$1\"'\", $0}'\
    \ | awk '$3==0{print $1}')\n    # matches all words without consonants\n    local\
    \ result_v=$(echo \"$1\" | tr ' ' '\\n' | egrep -o $v | \\\n    awk '{print \"\
    '\"$1\"'\", $0}' | awk '$3==0{print $1}')\n    # matches all words with $n consonants\n\
    \    local result_c=$(echo \"$1\" | tr ' ' '\\n' | egrep -o $c | \\\n    awk '{print\
    \ \"'\"$1\"'\", $0}' | awk '$3=='\"$n\"'{print $1}')\n    # matches all words\
    \ with $m vowels\n    local result_v=$(echo \"$1\" | tr ' ' '\\n' | egrep -o $v",
  "  local str=\"$1\"\n  local char_count=$2\n  local words=($(echo \"$str\" | tr\
    \ \" \" \"\\n\"))\n  local vowels=\"aeiou\"\n  local result=()\n  for word in\
    \ \"${words[@]}\"; do\n    local word_lower=$(echo \"$word\" | tr \"[:upper:]\"\
    \ \"[:lower:]\")\n    # echo \"word_lower=$word_lower\"\n    local word_consonants_count=0\n\
    \    for ((i=0; i<${#word_lower}; i++)); do\n      local char=${word_lower:$i:1}\n\
    \      # echo \"char=$char\"\n      if [[ ${vowels} != *$char* ]]; then\n    \
    \    ((word_consonants_count++))\n      fi\n    done\n    # echo \"word_consonants_count=$word_consonants_count\"\
    \n    if [ $word_consonants_count -eq $char_count ]; then\n      result+=(\"$word\"\
    )\n    fi\n  done\n  echo \"${result[@]}\"", "    local str=$1\n    local cons=0\n\
    \    local word=\"\"\n    local lword=\"\"\n    local arr\n\n    arr=()\n    for\
    \ (( i=0; i<${#str}; i++ )); do\n        local char=${str:$i:1}\n        if [[\
    \ $char =~ [^aeiou] ]]; then\n            cons=$(( cons + 1 ))\n        fi\n \
    \       if [[ $char =~ [[:space:]] ]]; then\n            if [[ $cons -eq $2 ]];\
    \ then\n                arr+=(\"$word\")\n            fi\n            word=\"\"\
    \n            cons=0\n        else\n            word=\"$word$char\"\n        fi\n\
    \    done\n    if [[ $cons -eq $2 ]]; then\n        arr+=(\"$word\")\n    fi\n\
    \    echo \"${arr[@]}\"", "    # Write your code here\n    # To print results\
    \ to the standard output you can use echo\n    # Example: echo \"Hello world\"\
    \n    echo \"not implemented\"", "  local s=$1\n  local n=$2\n  local array_of_words=($(echo\
    \ $s | tr ' ' '\\n'))\n  local selected_words=()\n  for word in \"${array_of_words[@]}\"\
    ; do\n    [[ \"$(echo $word | sed -e 's/[^aeiou]//gi' | wc -m)\" -eq $(( $n +\
    \ 1 )) ]] && selected_words+=($word)\n  done\n  if [[ ${#selected_words[@]} -eq\
    \ 0 ]]; then\n    echo \"[]\"\n  else\n    local selected_words_string=\"[\"\n\
    \    for word in \"${selected_words[@]}\"; do\n      selected_words_string+=\"\
    \\\"$word\\\",\"\n    done\n    echo \"${selected_words_string::-1}]\"\n  fi",
  "    echo $1 | tr -cs '[:alpha:]' '\\n' | grep -v '[aeiou]' | grep '\\b' | grep\
    \ -cw '[^aeiou]' | grep '^$2$' | sort | uniq | awk '{print $2}' | tr '\\n' ','\
    \ | sed 's/,$//'", "    if [[ ! $1 =~ ^[a-zA-Z\\ ]+$ ]]; then\n        echo \"\
    The string must contain only letters and spaces\"\n        exit 1\n    fi\n  \
    \  if [[ ! $2 =~ ^[0-9]+$ ]]; then\n        echo \"The second argument must be\
    \ an integer\"\n        exit 1\n    fi\n    _string=$1\n    _number=$2\n    _words=($(echo\
    \ $_string | tr \" \" \"\\n\"))\n    _result=()\n    for _word in \"${_words[@]}\"\
    ; do\n        _size=${#_word}\n        _size=$(( $_size - $(echo \"$_word\" |\
    \ tr -d -c '[aeiouAEIOU]' | wc -c) ))\n        if [[ \"$_size\" -eq \"$_number\"\
    \ ]]; then\n            _result+=(\"\\\"$_word\\\"\")\n        fi\n    done\n\
    \    echo \"${_result[@]}\"", "    echo 'input_string.split(\" \").filter(lambda\
    \ word: len(re.findall(\"[^aeiouAEIOU]\", word)) == 3)' | python3", "    local\
    \ str=\"$1\"\n    local num=\"$2\"\n    # replace all occurrences of ' ' with\
    \ ,\n    str=$(echo $str | sed 's/ /,/g')\n    # count the number of consonants\
    \ in each word\n    local str=$(echo $str | sed 's/,/\\n/g' | while read word;\
    \ do echo $(cons_count $word); done)\n    # filter out the words that have exactly\
    \ $num consonants\n    local str=$(echo $str | sed 's/\\n/ /g' | tr ' ' '\\n'\
    \ | while read line; do if [[ $line == \"$num\" ]]; then echo $line; fi; done)\n\
    \    # print the matching words\n    local str=$(echo $str | sed 's/\\n/ /g' |\
    \ tr ' ' '\\n' | while read line; do echo $(echo $1 | sed 's/ /\\n/g' | while\
    \ read word; do if [[ $(cons_count $word) == $line ]]; then echo '\"'$word'\"\
    '; fi; done); done)\n    # remove leading and trailing whitespace from str\n \
    \   str=$(echo $str | sed 's/^[ \\t]*//;s/[ \\t]*$//')\n    echo $str", "  #your\
    \ code here\n  echo ${@:2}", "  # your code here\n  echo ['\"little\"']", "  for\
    \ word in $(echo $1 | tr -s ' ' '\\n'); do\n    if [[ $(consonants_count \"$word\"\
    ) -eq $2 ]]; then\n      echo \"\\\"$word\\\"\"\n    fi\n  done", "    local words=($1)\n\
    \    local consonants=${2}\n    local res=()\n    local nb=0\n    for i in ${words[@]};\
    \ do\n        nb=0\n        for (( j=0; j<${#i}; j++ )); do\n            case\
    \ ${i:j:1} in\n                [^aeiouAEIOU])\n                    nb=$((nb+1))\n\
    \                    ;;\n            esac\n        done\n        if [[ ${nb} -eq\
    \ ${consonants} ]]; then\n            res+=(\"${i}\")\n        fi\n    done\n\
    \    echo \"${res[@]}\"", "    awk -v n=\"$2\" 'BEGIN {\n    split(\"a e i o u\
    \ y\", vowels, \" \")\n    for (x in vowels) {\n        vowels[x] = tolower(vowels[x])\n\
    \    }\n    RS = \"[[:blank:]]+\"\n    FS = \"\"\n    }\n    {\n        gsub(/[^a-zA-Z]/,\
    \ \"\", $0)\n        cons = length()\n        for (i = 1; i <= cons; i++) {\n\
    \            ch = tolower(substr($0, i, 1))\n            if (ch in vowels) {\n\
    \                cons--\n            }\n        }\n        if (cons == n) {\n\
    \            print substr($0, 2, length() - 2)\n        }\n    }' <<< \"$1\"",
  "    echo '['$(echo $1 | sed 's/\\([a-zA-Z]*\\)/\"\\1\"/g' | sed 's/[a-zA-Z]//g'\
    \ | sed 's/ /\\n/g' | sort | uniq -c | grep \"^ *$2 \" | sed 's/^ *[0-9]*\\(.*\\\
    )/\\1/g' | tr '\\n' ',' | sed 's/,$//g')']'", "    local -a result\n    local\
    \ word\n    local SENTENCE=\"$1\"\n    local CONS_COUNT=\"$2\"\n    local ALPHABET=\"\
    abcdefghijklmnopqrstuvwxyz\"\n    for word in $SENTENCE; do\n        word=$(echo\
    \ \"$word\" | tr \"$ALPHABET\" \"ccccccccccccccccccccccccc\")\n        [[ \"${word//c/}\"\
    \ =~ [$ALPHABET]{$CONS_COUNT} ]] && result+=($word)\n    done\n    echo \"${result[@]}\"",
  "    echo $1 | grep -Po '[[:alpha:]]*[^aeiou][^aeiou][^aeiou][^aeiou][[:alpha:]]*'",
  "    shopt -s nocasematch\n    local result=()\n    local numberOfConsonants=0\n\
    \    local i=0\n    local consonants='b|c|d|f|g|h|j|k|l|m|n|p|q|r|s|t|v|w|x|y|z'\n\
    \    local word=''\n    local -i j=0\n    local char=''\n    local -i strLength=$(expr\
    \ length \"$1\")\n    if [[ ${strLength} -eq 0 ]]; then\n        printf '[]'\n\
    \        return\n    fi\n    while [[ ${i} -lt ${strLength} ]]; do\n        char=$(expr\
    \ substr \"$1\" ${i} 1)\n        if [[ ${char} =~ [${consonants}] ]]; then\n \
    \           ((numberOfConsonants++))\n        fi\n        if [[ ${char} == ' '\
    \ ]]; then\n            if [[ ${numberOfConsonants} -eq $2 ]]; then\n        \
    \        result[${j}]=${word}\n                ((j++))\n            fi\n     \
    \       word=''\n            numberOfConsonants=0\n        else\n            word=${word}${char}\n\
    \        fi\n        ((i++))\n    done\n    if [[ ${numberOfConsonants} -eq $2\
    \ ]]; then\n        result[${j}]=${word}\n    fi\n    printf '['\n    printf '\"\
    %s\"' \"${result[@]}\"\n    printf ']'", "\techo $1 | tr -s ' ' '\\n' | grep -E\
    \ \"^\\S*([^aeiouyAEIOUY]{$2})\\S*$\" | tr -d '\"' | sed 's/^/\\\"/' | sed 's/$/\\\
    \"/'", "    if [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n    fi\n\
    \    local res=()\n    for word in $1; do\n        if [ $(echo $word | grep -o\
    \ \"[^aeiouyAEIOUY ]\" | wc -l) -eq $2 ]; then\n            res+=(\"\\\"$word\\\
    \"\")\n        fi\n    done\n    echo \"[$(printf \", %s\" \"${res[@]}\")]\"",
  "  echo \"$1\" | grep -oE \"\\w*[^aeiouAEIOU]{$2}\\w*\" | tr -d \" \" | tr '\\n'\
    \ ', ' | sed 's/, $//'", '  # Your solution here.', "    declare -i consonants=0\n\
    \    declare -i cur_word_consonants=0\n    declare -i in_word=0\n    declare -i\
    \ i\n    declare char\n    declare cur_word\n    declare -a words\n    declare\
    \ -a result\n    declare -r consonants_regex=\"[^aeiouAEIOU]\"\n    declare -r\
    \ letter_regex=\"[a-zA-Z]\"\n    declare -r space_regex=\"[ \\n\\t]\"\n    # loop\
    \ through the characters and break each word into an array item\n    i=0\n   \
    \ while read -r -N 1 char; do\n        # if the char is a space then we were in\
    \ a word, terminate the current word and add it to the words array\n        if\
    \ [[ $char =~ $space_regex ]]; then\n            if [[ $in_word -eq 1 ]]; then\n\
    \                words+=(\"$cur_word\")\n                in_word=0\n         \
    \   fi\n        # if the char is a letter then we are in a word\n        elif\
    \ [[ $char =~ $letter_regex ]]; then\n            in_word=1\n            cur_word+=(\"\
    $char\")\n        fi\n        (( i++ ))\n    done <<< \"$1\"\n    # loop through\
    \ the words array and check each word to see if it has the number of consonants\
    \ specified\n    for cur_word in \"${words[@]}\"; do\n        # reset variables\n\
    \        cur_word_consonants=0\n        consonants=0\n        i=0\n        while\
    \ read -r -N 1 char; do\n            if [[ $char =~ $consonants_regex ]]; then\n\
    \                (( consonants++ ))\n            fi\n            (( i++ ))\n \
    \       done <<< \"$cur_word\"\n        if [[ $consonants -eq $2 ]]; then\n  \
    \          result+=(\"\\\"$cur_word\\\"\")\n        fi\n    done\n    # output\
    \ the result array\n    echo \"${result[@]}\"", "  if [[ \"$1\" = \"\" ]]; then\n\
    \    echo \"[]\"\n    return\n  fi\n  # Remove all non word characters\n  s=$(echo\
    \ \"$1\" | sed 's/[^a-zA-Z ]//g')\n  # Replace all sequences of white space with\
    \ a single ' '\n  s=$(echo \"$s\" | sed 's/\\s\\+/ /g')\n  # Trim leading and\
    \ trailing white space\n  s=$(echo \"$s\" | sed 's/^ *//g;s/ *$//g')\n  # echo\
    \ \"[$s]\"\n  # Loop through each word in the string $s\n  for w in $s; do\n \
    \   # Remove vowels\n    w=$(echo \"$w\" | sed 's/[aeiouAEIOU]//g')\n    # echo\
    \ \"[$w]\"\n    # echo ${#w}\n    if [[ ${#w} = $2 ]]; then\n      printf '%s\\\
    n' \"\\\"$w\\\"\"\n    fi\n  done", "    local string=$1\n    local number=$2\n\
    \    local -a words=()\n    local -a consonants=(\"B\" \"C\" \"D\" \"F\" \"G\"\
    \ \"H\" \"J\" \"K\" \"L\" \"M\" \"N\" \"P\" \"Q\" \"R\" \"S\" \"T\" \"V\" \"W\"\
    \ \"X\" \"Y\" \"Z\")\n    for w in $string; do\n        local count=0\n      \
    \  for c in $(echo $w | tr '[:lower:]' '[:upper:]'); do\n            for l in\
    \ ${consonants[@]}; do\n                if [[ $c == $l ]]; then\n            \
    \        ((count++))\n                fi\n            done\n        done\n   \
    \     if [[ $count == $number ]]; then\n            words+=(\"\\\"$w\\\"\")\n\
    \        fi\n    done\n    echo \"[${words[@]}]\"", "    local WORDS IFS=$'\\\
    n' COUNT CONSONANTS REGEX RESULT\n    WORDS=($(echo \"$1\" | tr -s '[:space:]'\
    \ '\\n'))\n    RESULT=\"[\"\n    for WORD in \"${WORDS[@]}\"; do\n        COUNT=0\n\
    \        # Build consonants regex\n        CONSONANTS=\"${CONSONANTS}BbCcDdFfGgHhJjKkLlMmNnPpQqRrSsTtVvWwXxYyZz\"\
    \n        CONSONANTS=$(echo \"${CONSONANTS}\" | fold -w 1 | uniq)\n        REGEX=\"\
    ([${CONSONANTS}])\"\n        # Count the number of consonants in the word\n  \
    \      for LETTER in $(echo \"${WORD}\" | fold -w 1); do\n            [[ ${LETTER}\
    \ =~ ${REGEX} ]] && ((COUNT++))\n        done\n        [[ ${COUNT} -eq $2 ]] &&\
    \ RESULT=\"${RESULT}\\\"${WORD}\\\",\"\n    done\n    RESULT=\"${RESULT%?}]\"\n\
    \    echo \"${RESULT}\"", "    awk -v n=\"$2\" '{\n        for (i=1; i<=NF; i++)\
    \ {\n            word=$i\n            word=tolower(word)\n            c = gsub(/[aeiou]/,\
    \ \"\", word)\n            if (c == n) {\n                if (index(words, $i)\
    \ == 0) {\n                    words = words\" \"$i\n                }\n     \
    \       }\n        }\n    } END {\n        print \"[\"words\"]\"\n    }' <(echo\
    \ \"$1\")", "    # Your solution here\n    printf \"Not yet implemented\"", " \
    \ echo \"\\\"$1\\\"\" | grep -oE '[^ ]*' | grep -E '^[^aeiou]{'$2'}$' | awk '{printf\
    \ \"\\\"%s\\\" \", $0}'", "  local -r STRING=\"$1\"\n  local -r NCONS=\"$2\"\n\
    \  local -r REGEX=\"^[^aeiou ]*( [^aeiou ]*){$NCONS}\\$\"\n  printf '%s\\n' \"\
    $STRING\" | tr -d '\\n' | tr -s ' ' '\\n' | grep -E \"$REGEX\" | tr -d '\\n' |\
    \ tr -s ' ' ',' | sed 's/,$//'", "\t# TODO: write your code here", "\tlocal words=\"\
    $1\"\n\tlocal num_consonants=\"$2\"\n\tlocal regex=\"[^aeiouAEIOU]{$num_consonants}\"\
    \n\tlocal regex_quoted=\"[^aeiouAEIOU]{$num_consonants}\"\n\n\t# replace all strings\
    \ of one or more consecutive consonants with\n\t# a single dash\n\t#\n\t# substitute\
    \ all vowels with an empty string\n\t#\n\t# substitute all remaining non-space\
    \ characters (i.e. the dashes)\n\t# with an empty string\n\t#\n\t# and then remove\
    \ all leading and trailing spaces.\n\t#\n\t# the resulting string is a space-separated\
    \ list of words that contain\n\t# exactly n consonants\n\twords=\"$(echo $words\
    \ | sed -e \"s/[^aeiouAEIOU]\\+/-/g\" -e \"s/[aeiouAEIOU]//g\" -e \"s/[^ ]//g\"\
    \ -e \"s/^ *//\" -e \"s/ *$//\")\"\n\n\tfor word in $words; do\n\t\t# replace\
    \ all dashes with an empty string\n\t\t# and then substitute all remaining characters\
    \ with a dash\n\t\tword=\"$(echo $word | sed -e \"s/-//g\" -e \"s/./-/g\")\"\n\
    \n\t\t# if the word is equal to a string of dashes with the specified\n\t\t# number\
    \ of consonants then print the original word\n\t\tif [[ \"$word\" == \"$regex_quoted\"\
    \ ]]; then\n\t\t\techo \"$word\"\n\t\tfi\n\tdone", "  echo ' ' | grep -oEi '\\\
    b\\w{'$2'}\\b' | tr -d '\\n'", "  echo $1 | tr \" \" \"\\n\" | grep -E \"^[^aeiou]{$2}$\"\
    \ | tr \"\\n\" \" \" | sed -E 's/[[:space:]]+/\" \"/g'", "\tstring=$1\n\tnumber=$2\n\
    \techo ${string} | tr -s ' ' '\\n' | egrep -o \"\\b[[:alpha:]]*\\b\" | egrep -i\
    \ \"^[^aeiou]{$number}$\" | tr -d '\\n' | sed -e 's/^/[\"/' -e 's/$/\"]/'", " \
    \   local word\n    for word in $1; do\n        # extract all consonants from\
    \ the current word\n        # count the number of consonants\n        # compare\
    \ with $2\n        if [[ $(echo $word | sed 's/[^bcdfghjklmnpqrstvwxyz]//g' |\
    \ wc -c) -eq $2 ]]; then\n            echo -n \"\\\"$word\\\" \"\n        fi\n\
    \    done", "  # Your code goes here\n  # return value: an array of words to stdout",
  "  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n  echo \"[\\\"$(echo\
    \ $1 | sed -e 's/[^a-zA-Z ]/ /g' -e 's/\\s\\+/\\n/g' \\\n    | grep '\\([^a ,.EOT]\\\
    )\\{'\"$2\"'\\}' | tr '\\n' '\"' | sed -e 's/\"\"/\", \"/g' -e 's/\"\"/\"]/')\"",
  "  local words=$(echo \"$1\" | tr \" \" \"\\n\")\n  local filtered_words=()\n  for\
    \ word in $words; do\n    local word_consonants_count=$(echo \"$word\" | sed 's/[aeiouAEIOU]//g'\
    \ | wc -m)\n    if [ \"$word_consonants_count\" -eq \"$2\" ]; then\n      filtered_words+=(\\\
    \"$word\\\")\n    fi\n  done\n  echo \"${filtered_words[@]}\"", "\techo $1 | tr\
    \ -s \" \" \"\\n\" | awk 'length($0) - gsub(/[aeiou]/,\"\") == n' n=$2 | tr -s\
    \ \"\\n\" \" \" | tr -d \"\\\"\"", "\t# Initialize the return variable\n\tlocal\
    \ return_var=\"[]\"\n\t# Split the string into an array of words\n\tlocal words=(\"\
    ${1// / }\")\n\t# For each word in the array of words\n\tfor word in \"${words[@]}\"\
    ; do\n\t\t# Make a local variable for the word\n\t\tlocal w=\"$word\"\n\t\t# Add\
    \ back the double quotes\n\t\tw='\"'$w'\"'\n\t\t# Create a variable that contains\
    \ all of the non-vowels in the word\n\t\t# I'm using extended regular expressions\
    \ to see if that helps speed\n\t\t# things up. This might be a premature optimization\
    \ though.\n\t\tlocal cons=$(echo $word | grep -oE \"[^aeiou]\" -)\n\t\t# If the\
    \ number of consonants matches the number given\n\t\tif [ ${#cons} -eq $2 ]; then\n\
    \t\t\t# Add the word to the list\n\t\t\treturn_var=\"$return_var, $w\"\n\t\tfi\n\
    \tdone\n\t# If the list is empty\n\tif [ \"$return_var\" == \"[]\" ]; then\n\t\
    \t# Return an empty list\n\t\techo \"$return_var\"\n\telse\n\t\t# Remove the leading\
    \ comma\n\t\techo \"${return_var:2}\"\n\tfi", "    local s=$1\n    local n=$2\n\
    \    local cnt=0\n    local start=0\n    local end=0\n    local result=()\n  \
    \  local x=''\n    for ((i=0; i<${#s}; i++)); do\n        case ${s:$i:1} in\n\
    \            [bcdfghjklmnpqrstvwxyz])\n                ((cnt++))\n           \
    \     ;;\n            [aeiou]| )\n                ((cnt>0)) && ((cnt--))\n   \
    \             ;;\n        esac\n        if ((cnt==n)) && [[ ${s:$i:1} == ' ' ]];\
    \ then\n            result+=(\"\\\"${s:$start:$(($i-$start))}\\\"\")\n       \
    \     start=$(($i+1))\n            cnt=0\n        fi\n    done\n    ((cnt==n))\
    \ && result+=(\"\\\"${s:$start:$(($i-$start))}\\\"\")\n    echo \"${result[@]}\"",
  "  arr=()\n  echo \"$1\" | while read -r line; do\n    for word in $line; do\n \
    \     vowels=(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n \
    \     len=$(echo \"$word\" | wc -c)\n      cons=0\n      for ((i=1; i<$len; i++));\
    \ do\n        ch=$(echo \"$word\" | head -c $i | tail -c 1)\n        if [[ ! \"\
    \ ${vowels[@]} \" =~ \" ${ch} \" ]]; then\n          ((cons++))\n        fi\n\
    \      done\n      if [ $cons == $2 ]; then\n        arr+=( \"\\\"$word\\\"\"\
    \ )\n      fi\n    done\n  done\n  echo \"${arr[@]}\"", "\tstr=\"$1\"\n\tn=\"\
    $2\"\n\twords=\"$(echo \"$str\" | tr ' ' '\\n')\"\n\tresult=\"\"\n\tfor word in\
    \ $words; do\n\t\tif [ \"$(echo \"$word\" | grep -oP '[^aeiou\\s]' | wc -m)\"\
    \ == \"$(($n + 1))\" ]; then\n\t\t\tresult=\"$result \\\"$word\\\"\"\n\t\tfi\n\
    \tdone\n\techo \"[$result]\"", "    local str=$1\n    local n=$2\n    local words=$(echo\
    \ $str | tr \" \" \"\\n\")\n    for word in $words; do\n        local len=$(echo\
    \ $word | tr -d -c \"bcdfghjklmnpqrstvwxyz\" | wc -c)\n        if [ $len -eq $n\
    \ ]; then\n            echo \"\\\"$word\\\"\"\n        fi\n    done", "    input=$1\n\
    \    consonants=$2\n    for word in $input; do\n        if echo \"$word\" | grep\
    \ -P \"^[a-zA-Z]{$consonants}$\" &> /dev/null; then\n            echo '\"'$word'\"\
    '\n        fi\n    done", "    words=()\n    for word in $1; do\n        count=0\n\
    \        for (( i=0; i<${#word}; i++ )); do\n            [[ \"${word:$i:1}\" =~\
    \ [bcdfghjklmnpqrstvwxyz] ]] && ((count++))\n        done\n        [[ \"$count\"\
    \ == \"$2\" ]] && words+=(\"\\\"$word\\\"\")\n    done\n    echo \"${words[@]}\"",
  "  local str=${1//[aeiou]/}\n  local i\n  local words=()\n  while read -r word;\
    \ do\n    (( ${#word} - ${#word//[aeiou]/} == $2 )) && words+=( $word )\n  done\
    \ <<<\"$str\"\n  printf '\"%s\"\\n' \"${words[@]}\"", "  # TODO: your implementation\
    \ here\n  declare -A map=([a]=0 [e]=0 [i]=0 [o]=0 [u]=0)\n  words=()\n  while\
    \ read -r -d ' '\n  do\n    word=\"$REPLY\"\n    count=0\n    for ((i=0; i<${#word};\
    \ i++))\n    do\n      char=\"${word:$i:1}\"\n      if [[ -z ${map[$char]} ]];\
    \ then\n        ((count++))\n      fi\n    done\n    if [[ $count -eq $2 ]]; then\n\
    \      words+=(\\\"$word\\\")\n    fi\n  done <<< \"$1\"\n  echo \"${words[@]}\"",
  "\t# your code here", "  # Do not forget to handle the case when string s is empty\n\
    \  # HINT: You can pass parameters to an awk script as follows:\n  #       awk\
    \ -f SCRIPT.awk -v parameter_name=\"$some_variable\"\n  awk -f select_words.awk\
    \ -v num_consts=\"$2\" <<< \"$1\"", "    local s=\"$1\"\n    local n=\"$2\"\n\
    \    local -a words\n    words=( $(awk -v n=$n '{ for (i=1; i<=NF; i++)\n    \
    \    if (gsub(/[aeiou]/,\"\",$i) == n) print $i }' <<< $s) )\n    local -a res\n\
    \    for word in \"${words[@]}\"; do\n        res+=( $(printf '\"%s\"' \"$word\"\
    ) )\n    done\n    printf '%s\\n' \"${res[@]}\"", "    [ -z \"$1\" ] && return\n\
    \    [ -z \"$2\" ] && return\n    local IFS=' '\n    local s=\"$1\"\n    local\
    \ num_cons=\"$2\"\n    local l=0 c=0 s_len=0\n    local result=\"\"\n    for word\
    \ in $s; do\n        s_len=${#word}\n        for ((l=0; l<s_len; l++)); do\n \
    \           [ ${word:$l:1} =~ [^aeiouAEIOU] ] && ((c++))\n        done\n     \
    \   [ $c -eq $num_cons ] && result+='\"'\"$word\"'\", '\n        c=0\n    done\n\
    \    [ -z \"$result\" ] && echo \"[]\" && return\n    result=${result%%, }\n \
    \   echo \"[${result#* }]\"", "  local str=\"$1\"\n  local n=\"$2\"\n  for word\
    \ in $str; do\n    # If the word has exactly n consonants\n    if [[ $(echo $word\
    \ | grep -o '[^aeiou]' | wc -l) -eq $n ]]; then\n      echo -n \"\\\"$word\\\"\
    \ \"\n    fi\n  done", "    local -r s=\"$1\"\n    local -r n=\"$2\"\n    local\
    \ -r vowel=\"a|e|i|o|u\"\n    local -r regex=\"[[:alpha:]]*[^$vowel]{$n}[[:alpha:]]*\"\
    \n    local -r words=$(grep -oP \"$regex\" <<< \"$s\")\n    echo \"$words\"",
  "    echo $(printf '%s' \"$1\" | tr '[:upper:]' '[:lower:]' | tr -s '[[:space:]]'\
    \ '\\n' | sed '/^$/d' | tr -cd '[:alpha:]' | tr -s '[:alpha:]' '\\n' | sed '/^$/d'\
    \ | grep -c \"^[^aeiou]*$2[^aeiou]*$\" -o)", "    # your code goes here\n    echo\
    \ \"Not implemented\"", "    declare -A vowels\n    vowels=([\"a\"]=1 [\"e\"]=1\
    \ [\"i\"]=1 [\"o\"]=1 [\"u\"]=1)\n    result=()\n    for word in $(echo $1 | tr\
    \ ' ' '\\n'); do\n        if [ -z ${vowels[${word::1}]} ]; then\n            consonants=$(echo\
    \ $word | tr -d -c 'a-z')\n            ccount=$(echo $consonants | wc -c)\n  \
    \          if [ $ccount -eq $2 ]; then\n                result+=(\"\\\"$word\\\
    \"\")\n            fi\n        fi\n    done\n    echo ${result[@]}", "  local\
    \ input=$1\n  local n=$2\n  local words=()\n  IFS=' ' read -r -a words <<< \"\
    $input\"\n  local selected=()\n  for w in \"${words[@]}\"; do\n    if [[ $(echo\
    \ $w | grep -o '[^aeiou ]' | wc -c) -eq $n ]]; then\n      selected+=(\"\\\"$w\\\
    \"\")\n    fi\n  done\n  echo ${selected[@]}", "    words=$(echo \"$1\" | tr -c\
    \ \"[a-zA-Z]\" \"\\n\")\n    for word in $words; do\n        num_consonants=$(echo\
    \ \"$word\" | tr -d -c \"[^aeiouAEIOU]\" | wc -c)\n        if [ \"$num_consonants\"\
    \ -eq \"$2\" ]; then\n            echo '\"'$word'\"'\n        fi\n    done", " \
    \ local str=\"$1\"\n  local cons=$2\n  local regex='^[aeiou]*([^aeiou]{'\"$cons\"\
    '})[^aeiou]*$'\n  [[ $str =~ $regex ]] && echo '\"'\"${BASH_REMATCH[1]}\"'\"'",
  "  # Your code goes here\n  echo \"$1\" | tr ' ' '\\n' | tr -c -d '[:alpha:]' |\
    \ grep -E '[^a,e,i,o,u,y]' | wc -l", "    local s=$1\n    local n=$2\n    echo\
    \ $s | tr ' ' '\\n' | \n        while read word; do\n            echo -n \"\\\"\
    $word\\\" \"\n        done | \n        awk '{\n                for (i=1; i<=NF;\
    \ i++) {\n                    b=gensub(/[aeiou]/,\"\", \"g\", $i);\n         \
    \           c = length(b);\n                    if (c == '$n')\n             \
    \           print $i\n                }\n            }'", "    local -a words\
    \ array\n    # Strip leading and trailing whitespace.\n    words=(${1// / })\n\
    \    array=()\n    for word in \"${words[@]}\"; do\n        if [ $(count_consonants\
    \ $word) -eq $2 ]; then\n            array+=(\\\"$word\\\")\n        fi\n    done\n\
    \    printf '%s\\n' \"${array[@]}\"", "  # Iterate through every word\n  for word\
    \ in $1; do\n    # Isolate consonants from every word\n    cons=$(echo $word |\
    \ sed 's/[aeiou]//g')\n    # Select words with number of consonants equal to $2\n\
    \    if [ ${#cons} -eq $2 ]; then\n      echo \"\\\"$word\\\"\"\n    fi\n  done",
  "    echo \"$1\" | tr '[:upper:]' '[:lower:]' | tr -s ' ' '\\n' | grep -E \"^[^aeiou]{$2}$\"\
    \ | tr -d '\\n' | sed 's/ /\", \"/g' | sed 's/^/[\"/' | sed 's/$/\"]/'", "  local\
    \ str=\"$1\"\n  local n=\"$2\"\n  local temp\n  # a regex to capture all the consonants\
    \ (g)\n  local regex=\"([bcdfghjklmnpqrstvwxyz])\"\n  # a regex to capture all\
    \ the consonants (g) ignoring case (i)\n  local regex_c=\"([bcdfghjklmnpqrstvwxyz])\"\
    \n  local -a res\n  local var_idx=0\n  for w in $str; do\n    # get total consonants\
    \ for current word\n    #temp=$(echo $w | grep -o $regex | wc -l)\n    temp=$(echo\
    \ $w | grep -io $regex_c | wc -l)\n    [[ $temp -eq $n ]] && res[$var_idx]=\"\\\
    \"$w\\\"\" && var_idx=$((var_idx+1))\n  done\n  echo \"[${res[@]}]\"", "    declare\
    \ -a args=(\"$@\")\n    result=()\n    for word in $1; do\n        v=$(echo $word\
    \ | sed -r 's/[aeiouAEIOU]//g' | wc -c)\n        if [ $v -eq $2 ]; then\n    \
    \        result+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo ${result[@]}",
  "    echo \"$1\" | tr -s ' ' '\\n' | \\\n    while read word; do\n        n_consonants=`echo\
    \ \"$word\" | tr -d -c \"bcdfghjklmnpqrstvwxyz\" | wc -c`\n        if [ \"$n_consonants\"\
    \ -eq \"$2\" ]; then\n            echo \"\\\"$word\\\"\"\n        fi\n    done",
  "    local string=\"$1\"\n    local num=\"$2\"\n    local word\n    local res\n\
    \    while IFS= read -r word; do\n        if [ $(( $( tr -cd 'bcdfghjklmnpqrstvwxyz'\
    \ <<< $word | wc -c ) )) -eq $num ]; then\n            res+=\"\\\"$word\\\", \"\
    \n        fi\n    done <<< \"$string\"\n    if [ -z \"$res\" ]; then\n       \
    \ echo \"[]\"\n    else\n        echo \"[${res%, }]\"\n    fi", "    local string=$1\n\
    \    local length=$2\n    local words=($string)\n    local result=()\n    for\
    \ word in \"${words[@]}\"; do\n        if [[ $(consonants_count $word) -eq $length\
    \ ]]; then\n            result+=($word)\n        fi\n    done\n    echo \"${result[@]}\"",
  "    echo \"\\\"$1\\\"\" | # echo string inside quotes\n    tr '[:upper:]' '[:lower:]'\
    \ | # convert to lowercase\n    tr ' ' '\\n' | # split the words\n    egrep '^[^aeiou]+$'\
    \ | # exclude vowels\n    egrep \"^.{$2}$\" | # select $2 characters\n    sort\
    \ -u | # remove duplicate words\n    sed 's/^/* \"/' | # add quotes to the beginning\n\
    \    sed 's/$/\"/' | # add quotes to the end\n    tr '\\n' ',' | # join the words\
    \ with comma\n    sed 's/,$//' # remove last comma", "    local -a words\n   \
    \ local -a result\n    local consonants\n    local string=$1\n    local cons_number=$2\n\
    \    local word\n    local index\n    IFS=' ' read -r -a words <<< \"$string\"\
    \n    for word in \"${words[@]}\"; do\n        if [ ${#word} -gt ${cons_number}\
    \ ]; then\n            consonants=$(echo \"$word\" | sed 's/[aeiouAEIOU]//g')\n\
    \            if [ ${#consonants} -eq ${cons_number} ]; then\n                result+=(\"\
    $word\")\n            fi\n        fi\n    done\n    echo \"${result[@]}\"", " \
    \ # Declare a temporary array\n  local words=()\n  # Get a list of words from\
    \ the string\n  IFS=' ' read -ra w <<< \"$1\"\n  # Iterate over the list of words\
    \ and save words matching the given consonant count\n  for i in \"${w[@]}\"; do\n\
    \    if [[ \"$(consonant_count \"$i\")\" -eq \"$2\" ]]; then\n      words+=(\"\
    $i\")\n    fi\n  done\n  # Print the result list\n  printf '%s\\n' \"${words[@]}\"",
  "    local str=\"$1\"\n    local number=\"$2\"\n    local result=()\n    local words=($(echo\
    \ $str | tr \" \" \"\\n\"))\n    for word in \"${words[@]}\"; do\n        if (($(echo\
    \ $word | grep -o [^aeiou] | wc -l) == $number)); then\n            result+=(\"\
    $word\")\n        fi\n    done\n    echo \"${result[@]}\"", "    local str=$1\n\
    \    local nc=$2\n    local words=( $(echo \"$str\" | tr ' ' '\\n') )\n    local\
    \ result=\"\"\n    local word=\"\"\n    local consonants=\"\"\n    local count=\"\
    \"\n    local last=\"\"\n    for word in \"${words[@]}\"; do\n        consonants=$(echo\
    \ \"$word\" | sed 's/[aeiouAEIOU]//g')\n        count=$(echo \"$consonants\" |\
    \ wc -c)\n        count=$((count-1))\n        if [ \"$count\" -eq \"$nc\" ]; then\n\
    \            result=\"$result \\\"$word\\\"\"\n        fi\n    done\n    echo\
    \ \"[${result:1}]\"", "    local str=$1\n    local num=$2\n    echo $str | tr\
    \ \" \" \"\\n\" | awk -v num=$num 'BEGIN { FS = \"\" } { count = 0; for (i = 1;\
    \ i <= NF; i++) { if (tolower($i) ~ /[aeiou]/) count++ } if (NF - count == num)\
    \ print \"\\\"\" $0 \"\\\"\" }' | tr \"\\n\" \" \" | sed 's/[ ]*$//'", "    local\
    \ string=$1\n    local consNum=$2\n    echo $string | sed -E \"s/[^ ]*[aeiou][^\
    \ ]*//g\" | awk -v consNum=$consNum '{\n        split($0, word, \" \");\n    \
    \    for (i in word) {\n            if (length(word[i]) - consNum == 1)\n    \
    \            print \"\\\"\"word[i]\"\\\"\";\n        }\n    }'", "    local v=$1\n\
    \    local n=$2\n    local result\n    result=$(echo \"$v\" | grep -o -E \"\\\
    b[a-zA-Z']+\\b\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" |\
    \ grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\"\
    \ | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"\
    [aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep\
    \ -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\"\
    \ | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"\
    [aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep\
    \ -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\"\
    \ | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"\
    [aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep\
    \ -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\"\
    \ | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -E \"\
    [aeiouAEIOU]\" | grep -v -E \"[aeiouAEIOU]\" | grep -v -", "    local function_result=\"\
    \"\n    local word\n    local word_lenght\n    local s\n    local s_lenght\n \
    \   local i\n    local word_lenght\n    local word_count\n    local word_count_max\n\
    \    local ifs_backup\n    IFS=' ' read -ra s <<< \"$1\"\n    s_lenght=${#s[@]}\n\
    \    for (( i=0; i<${s_lenght}; i++ ));\n    do\n        word=${s[$i]}\n     \
    \   word_lenght=${#word}\n        word_count=0\n        for (( j=0; j<${word_lenght};\
    \ j++ ));\n        do\n            char=\"${word:$j:1}\"\n            ifs_backup=\"\
    $IFS\"\n            IFS=''\n            case \"$char\" in\n                \"\
    a\" | \"e\" | \"i\" | \"o\" | \"u\" | \"y\" | \"A\" | \"E\" | \"I\" | \"O\" |\
    \ \"U\" | \"Y\")\n                    ;;\n                *)\n               \
    \     word_count=$((word_count+1))\n                    ;;\n            esac\n\
    \            IFS=\"$ifs_backup\"\n        done\n        if [ \"$word_count\" -eq\
    \ \"$2\" ]; then\n            if [ \"$function_result\" == \"\" ]; then\n    \
    \            function_result=\"\\\"$word\\\"\"\n            else\n           \
    \     function_result=\"$function_result, \\\"$word\\\"\"\n            fi\n  \
    \      fi\n    done\n    if [ \"$function_result\" == \"\" ]; then\n        function_result=\"\
    []\"\n    else\n        function_result=\"[$function_result]\"\n    fi\n    echo\
    \ $function_result", "    declare -r string=\"$1\"\n    declare -r n_consonants=\"\
    $2\"\n    declare -r consonants='([bcdfghjklmnpqrstvwxz])'\n    declare -r vowels='([aeiou])'\n\
    \    declare -r word_boundary='(\\b)'\n    declare -r word_ends='(\\s)'\n    declare\
    \ -r word_starts='(\\S+)'\n    declare -r matching_regex=\"^${consonants}*${vowels}*${consonants}*$\"\
    \n    # Process string word by word:\n    # 'word' becomes the word currently\
    \ being processed, and\n    # 'word_num' is an index of the currently processed\
    \ word.\n    while IFS= read -r word; do\n        if [[ \"$word\" =~ $matching_regex\
    \ ]]; then\n            if [[ ${#BASH_REMATCH[1]} -eq \"$n_consonants\" ]]; then\n\
    \                printf '\"%s\"\\n' \"$word\"\n            fi\n        fi\n  \
    \  done < <(sed -E -e \"s/${word_boundary}${word_starts}${word_ends}/${word_boundary}${word_starts}${word_ends}\n\
    \                                                                  /g\" <<< \"\
    $string\")", '    # Your code here', "  # Replace this solution with a correct\
    \ one\n  echo '\"\"'", "    local -n str=$1; local -n num=$2;\n    echo '['\n\
    \    for word in $str; do\n        # write your code here\n    done\n    echo\
    \ ']'", "  local -r words=\"$1\"\n  local -r consonants=\"$2\"\n  local -i count=0\n\
    \  local -i vowels=0\n  local -i len=0\n  local -a result=()\n  local -i l=0\n\
    \  local word=\"\"\n  for word in ${words}; do\n    count=0\n    vowels=0\n  \
    \  len=${#word}\n    for (( l=0; l<len; l++ )); do\n      case \"${word:l:1}\"\
    \ in\n        a|e|i|o|u|A|E|I|O|U) vowels+=1 ;;\n        *) count+=1 ;;\n    \
    \  esac\n    done\n    (( count == consonants )) && result+=(\\\"${word}\\\")\n\
    \  done\n  echo \"${result[@]}\"", "    local str=\"$1\"\n    local num=\"$2\"\
    \n    local cur=\"\"\n    local res=\"\"\n    for word in $str; do\n        cur=\"\
    $(tr -dc 'aeiou' <<< \"$word\" | wc -c)\"\n        cur=\"$(( $(wc -c <<< \"$word\"\
    ) - cur ))\"\n        if [ \"$cur\" -eq \"$num\" ]; then\n            res=\"$res\
    \ \\\"$word\\\"\"\n        fi\n    done\n    echo \"[$res]\"", "    local string=$1\n\
    \    local num=$2\n    local words=( $string )\n    # this is a trick to get array\
    \ length\n    local word_count=${#words[@]}\n    for (( i=0; i<word_count; i++\
    \ )); do\n        # calculate number of consonants\n        local cons_count=$(echo\
    \ ${words[$i]} | sed -e 's/[^bcdfghjklmnpqrstvwxyz]//gi' | wc -c)\n        # compare\
    \ number of consonants with given number\n        if [ $cons_count -eq $num ];\
    \ then\n            # print word with quotes\n            echo \"\\\"${words[$i]}\\\
    \"\"\n        fi\n    done", "    local s=$1\n    local n=$2\n    sed -En 's/([^aeiou]*[aeiou]){'$n'}/\\\
    1/p' <<< $s", "    # BEGIN ANSWER\n    echo \"[$(echo \"$1\" | tr ' ' '\\n' |\
    \ egrep -o \"[^aeiou]{$2}\")]\"\n    # END ANSWER", "\t# remove spaces\n\tstring=${1//\
    \ /}\n\t# get the number of consonants\n\tnum_of_consonants=$(echo $string | tr\
    \ -d -c \"[b-df-hj-np-tv-z]\")\n\t# get the length of the string\n\tstr_len=${#string}\n\
    \t# how many times the amount of consonants is found\n\tsubstr=$(expr index \"\
    $string\" \"$num_of_consonants\")\n\t# check if the substring is present\n\tif\
    \ [[ $substr -gt 0 ]]; then\n\t\techo $substr\n\tfi", '    # Write your code here',
  "    local WORDS=$(grep -o -E '[a-zA-Z]+' <<< \"$1\")\n    local -a RESULT=()\n\
    \    for WORD in $WORDS; do\n        local WORD_LEN=$(echo $WORD | wc -c)\n  \
    \      local NUM_CONSONANTS=$(grep -o -i -E '[bcdfghjklmnpqrstvwxz]' <<< \"$WORD\"\
    \ | wc -l)\n        [ $NUM_CONSONANTS -eq $2 ] && RESULT+=($WORD)\n    done\n\
    \    echo ${RESULT[@]}", "    echo $1 | tr ' ' '\\n' |\n    sed -E 's/([^aeiou]*[aeiou]){'\"\
    $2\"'}.*/\\1/g' |\n    grep -v \"^$\" |\n    sed -E 's/.*/\"&\"/g' |\n    paste\
    \ -s -d, -", "  local string=$1\n  local n=$2\n  local word\n  local result=()\n\
    \  for word in $string; do\n    local consonants=0\n    local character\n    for\
    \ character in $(echo \"$word\" | fold -w1); do\n      if [[ $character =~ [^aeiou]\
    \ ]]; then\n        consonants=$((consonants + 1))\n      fi\n    done\n    if\
    \ [[ $consonants -eq $n ]]; then\n      result+=(\"\\\"$word\\\"\")\n    fi\n\
    \  done\n  echo \"${result[@]}\"", "    local words\n    local word\n    local\
    \ consonants\n    # Split the string by space character.\n    IFS=' ' read -r\
    \ -a words <<< \"$1\"\n    # Iterate over each word.\n    for word in \"${words[@]}\"\
    ; do\n        # Check if the number of vowels is equal to the required number.\n\
    \        consonants=$(consonants_count \"$word\")\n        if [ \"$consonants\"\
    \ -eq \"$2\" ]; then\n            # The word has the required number of vowels.\
    \ Print it.\n            printf '\"%s\"\\n' \"$word\"\n        fi\n    done",
  "  echo $1 | tr -cs \"[:alpha:]\" \"\\n\" | grep -wP \"^(?=.*[^aeiou]){$2}.*$\"\
    \ | tr -d '\"'", "    local str=\"$1\"\n    local n=\"$2\"\n    words=$(echo $str\
    \ | tr \" \" \"\\n\")\n    for word in $words; do\n        # Count vowels in $word\
    \ and assign the value to $vowels\n        local vowels=$(echo $word | grep -o\
    \ -i '[aeiouy]' | wc -l)\n        # Count consonants in $word and assign the value\
    \ to $consonants\n        local consonants=$(echo $word | grep -o -i '[bcdfghjklmnpqrstvwxz]'\
    \ | wc -l)\n        # Compare $consonants and $n. If they are equal, print $word\n\
    \        if [ $consonants -eq $n ]; then\n            echo \"\\\"$word\\\"\"\n\
    \        fi\n    done", "    # Write your code here\n    # To print results to\
    \ the standard output you can use echo\n    # Example: echo \"Hello world\"",
  "  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n  WORDS=$(echo \"\
    $1\" | tr \" \" \"\\n\")\n  WORDS_WITH_LENGTH=$(for w in $WORDS; do echo $(consonants_count\
    \ $w) $w; done)\n  LINE_WITH_WORDS=$(echo \"$WORDS_WITH_LENGTH\" | grep \"^$2\
    \ \")\n  RESULT=$(echo \"$LINE_WITH_WORDS\" | cut -d' ' -f2- | tr '\\n' ' ')\n\
    \  RESULT=$(echo \"$RESULT\" | sed 's/\\([[:alpha:]]\\+\\)/\"\\1\"/g')\n  echo\
    \ \"[$RESULT]\"", "    local _consonants=\"(?:[bcdfghjklmnpqrstvwxyz]|(?<=[aeiou])[bcdfghjklmnpqrstvwxyz](?=[aeiou]))\"\
    \n    local _word=\"$(echo \"$1\" | grep -Eo \"[a-z]+\")\"\n    local _result=$(echo\
    \ \"$_word\" | grep -E \"^$_consonants{$2}\\$\")\n    echo \"$_result\"", "  if\
    \ [ -z \"$1\" ]\n  then\n    echo '[]'\n    return 0\n  fi\n  local ret=\"\"\n\
    \  for word in $(echo \"$1\" | tr -s ' ' '\\n')\n  do\n    consonants=$(echo $word\
    \ | tr -cd '[bcdfghjklmnpqrstvwxyz]' | wc -c)\n    if [ \"$consonants\" -eq \"\
    $2\" ]\n    then\n      ret=\"$ret$word,\"\n    fi\n  done\n  if [ -z \"$ret\"\
    \ ]\n  then\n    echo '[]'\n  else\n    echo \"[$(echo $ret | sed 's/,$//')]\"\
    \n  fi", "    local input=$1\n    local n=$2\n    local output=()\n    for word\
    \ in $input; do\n        if [[ $(echo $word | grep -o -E '[^aeiou ]' | wc -c)\
    \ -eq $n ]]; then\n            output+=($word)\n        fi\n    done\n    if [[\
    \ -z $output ]]; then\n        echo '[]'\n    else\n        echo '['$(echo ${output[@]}\
    \ | sed 's/ /\", \"/g')']'\n    fi", "\tif [[ -z $1 ]]; then\n\t\tprintf '[]'\n\
    \t\treturn\n\tfi\n\t# do the work here...\n\tstring=\"$1\"\n\tfor word in $string;\
    \ do\n\t\tconsonants=$(echo $word | sed 's/[^aeiouAEIOU]//g')\n\t\tif [[ ${#consonants}\
    \ -eq $2 ]]; then\n\t\t\tprintf '\"%s\" ' \"$word\"\n\t\tfi\n\tdone", "    #Your\
    \ code goes here\n    # $1 is a string\n    # $2 is an integer\n    echo \"s =\
    \ $1\"\n    echo \"n = $2\"\n    words=\"$(echo $1 | tr ' ' '\\n')\"\n    for\
    \ word in $words\n    do\n        consonants=$(echo $word | sed 's/[aeiou]//g')\n\
    \        if [ ${#consonants} -eq $2 ]\n        then\n            echo \"\\\"$word\\\
    \"\"\n        fi\n    done", "    str=\"$1\"\n    n=\"$2\"\n    if [[ -z \"$str\"\
    \ ]]; then\n        result=\"[]\"\n    else\n        # Pattern to select words\
    \ that contain at least one consonant\n        # and match the number of consonants\
    \ specified\n        pattern=\"[[:alpha:]]*[bcdfghjklmnpqrstvwxyz]{$n}[[:alpha:]]*\"\
    \n        result=\"$(echo \"$str\" | tr ' ' '\\n' | grep -e \"$pattern\" | tr\
    \ '\\n' ' ')\"\n        result=\"[$(echo \"$result\" | sed 's/[ ]\\+/,/g')]\"\n\
    \    fi\n    echo \"$result\"", "\tlocal awkstring\n\t# awk script\n\tif [[ $2\
    \ -gt 0 ]]; then\n\t\tawkstring=\" \n\t\tBEGIN {\n\t\t\tFS=\\\" \\\"\n\t\t}\n\t\
    \t{\n\t\t\tfor (i=1; i<=NF; i++) {\n\t\t\t\tif (gsub(/[^AEIOUaeiou]/, \\\"\\\"\
    , \\$i) == $2) {\n\t\t\t\t\twords[\\$i] += 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\
    END {\n\t\t\tfor (i in words) {\n\t\t\t\tprint \\\"\\\\\\\"\\\"i\\\"\\\\\\\"\\\
    \"\n\t\t\t}\n\t\t}\n\t\t\"\n\telse\n\t\tawkstring=\"\n\t\tBEGIN {\n\t\t\tFS=\\\
    \" \\\"\n\t\t}\n\t\t{\n\t\t\tfor (i=1; i<=NF; i++) {\n\t\t\t\tif (gsub(/[AEIOUaeiou]/,\
    \ \\\"\\\", \\$i) == 0) {\n\t\t\t\t\twords[\\$i] += 1\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t\tEND {\n\t\t\tfor (i in words) {\n\t\t\t\tprint \\\"\\\\\\\"\\\"i\\\"\\\\\
    \\\"\\\"\n\t\t\t}\n\t\t}\n\t\t\"\n\tfi\n\techo \"$1\" | awk \"$awkstring\"", " \
    \ local -a array=()\n  # Adding space at end of string so that the last word will\
    \ be added to the array.\n  local string=$1\n  local n=$2\n  local word=\"\"\n\
    \  local c=\"\"\n  local l=\"\"\n  local i=0\n  local cnt=0\n  while [ \"$i\"\
    \ -lt \"${#string}\" ]; do\n    c=${string:$i:1}\n    if [ \"$c\" = \" \" ]; then\n\
    \      if [ \"$cnt\" -eq \"$n\" ]; then\n        array=(\"${array[@]}\" \"\\\"\
    $word\\\"\")\n      fi\n      word=\"\"\n      cnt=0\n    else\n      l=$(echo\
    \ $c | tr '[:upper:]' '[:lower:]')\n      if [ \"$l\" != \"a\" ] && [ \"$l\" !=\
    \ \"e\" ] && [ \"$l\" != \"i\" ] && [ \"$l\" != \"o\" ] && [ \"$l\" != \"u\" ];\
    \ then\n        cnt=$((cnt+1))\n      fi\n      word=$word$c\n    fi\n    i=$((i+1))\n\
    \  done\n  if [ \"$cnt\" -eq \"$n\" ]; then\n    array=(\"${array[@]}\" \"\\\"\
    $word\\\"\")\n  fi\n  echo \"[${array[@]}]\"", "  local string=\"$1\"\n  local\
    \ number=\"$2\"\n  local words=($(echo \"$string\" | grep -oE '[[:alpha:]]+'))\n\
    \  local consonants='B|C|D|F|G|H|J|K|L|M|N|P|Q|R|S|T|V|W|X|Y|Z'\n  local selected_words=()\n\
    \  for i in \"${words[@]}\"; do\n    local word=\"$i\"\n    local word_length=${#word}\n\
    \    local word_start=0\n    local word_end=$((word_length - 1))\n    local found_consonants=0\n\
    \    local found_vowels=0\n    for j in $(seq 0 $word_end); do\n      local letter=\"\
    ${word:$j:1}\"\n      if [[ $letter =~ ^[$consonants]$ ]]; then\n        found_consonants=$((found_consonants\
    \ + 1))\n      else\n        found_vowels=$((found_vowels + 1))\n      fi\n  \
    \  done\n    if [[ $found_consonants -eq $number ]]; then\n      selected_words+=(\"\
    $word\")\n    fi\n  done\n  echo \"${selected_words[@]}\"", "\tlocal found=\"\"\
    \n\tlocal count=0\n\tlocal char=\"\"\n\tlocal words=\"\"\n\tlocal count=$2\n\t\
    local sentence=$1\n\tIFS=\" \" read -ra words <<< \"$sentence\"\n\tfor word in\
    \ \"${words[@]}\"; do\n\t\tfor char in $(echo $word | grep -o [aeiouAEIOU]); do\n\
    \t\t\tcount=$((count - 1))\n\t\tdone\n\t\tif [ $count -eq 0 ]; then\n\t\t\tfound=\"\
    $found \\\"$word\\\"\"\n\t\tfi\n\t\tcount=$2\n\tdone\n\techo \"[$found]\"", " \
    \ # Replace this comment with your solution\n  if [[ -z $1 ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$(echo \"$1\" | tr ' ' '\\n' | \\\n    tr -d\
    \ [AEIOUaeiou] | \\\n    awk -v n=$2 '{print length, $0}' | \\\n    sort -n |\
    \ \\\n    cut -d ' ' -f 2- | \\\n    awk -v n=$2 'length==n' | \\\n    tr '\\\
    n' ' ' | \\\n    sed -e 's/ /\", \"/g' | \\\n    sed -e 's/^/\\042/' | \\\n  \
    \  sed -e 's/$/\\042/')\\\"]\"\n  fi", "    local str=\"$1\"\n    local n=\"$2\"\
    \n    local consonants='bcdfghjklmnpqrstvwxyz'\n    local c\n    local word\n\
    \    local words=()\n    for word in $str; do\n        for c in $consonants; do\n\
    \            if [[ \"$word\" == *\"$c\"* ]]; then\n                (( count++\
    \ ))\n            fi\n        done\n        if [[ \"$count\" -eq \"$n\" ]]; then\n\
    \            words+=(\"$word\")\n        fi\n        count=0\n    done\n    echo\
    \ ${words[@]}", "    local string=\"$1\"\n    local number=\"$2\"\n    local words=$(echo\
    \ $string | tr ' ' '\\n')\n    # 'a' is the accumulator, it's the array of words\
    \ with the right number of consonants\n    local a=()\n    for word in $words;\
    \ do\n        if [[ $(count_consonants $word) == $number ]]; then\n          \
    \  a+=(\"$word\")\n        fi\n    done\n    # IF the accumulator is empty, then\
    \ we return \"[]\"\n    # ELSE, we return the list of words\n    if [[ -z $a ]];\
    \ then\n        echo \"[]\"\n    else\n        echo -n \"[\"\n        for word\
    \ in $a; do\n            echo -n \"\\\"$word\\\"\"\n            if [[ $word !=\
    \ ${a[${#a[@]}-1]} ]]; then\n                echo -n \", \"\n            fi\n\
    \        done\n        echo \"]\"\n    fi", "    # YOUR CODE GOES HERE\n    echo\
    \ $1 | tr -s ' ' '\\n' | grep -E -i \"[^aeiouy]{$2}\" | tr -d '\"'", "    if [\
    \ -z \"$1\" ] || [ -z \"$2\" ]; then\n        echo \"Usage: $(basename $0) <string>\
    \ <integer>\" >&2\n        return 1\n    fi\n    echo \"$1\" | tr -s '[:blank:]'\
    \ '\\n' | grep -i \"^[^aeyiouAEYIOU]\\{$2\\}$\" | tr -d '\"'", "    string=$1\n\
    \    num=$2\n    count=$(echo \"$string\" | tr ' ' '\\n' | tr '[aeiou]' ' ' |\
    \ tr -dc '[:alpha:]' | sed '/^$/d' | grep -o '' | wc -l)\n    echo $count", " \
    \   local -r string=\"$1\"\n    local -r nb_consonants=\"$2\"\n    local word\n\
    \    for word in $string; do\n        local nb_consonants_in_word=$(echo $word\
    \ | tr -cd [b-df-hj-np-tv-z] | wc -c)\n        if [[ $nb_consonants_in_word -eq\
    \ $nb_consonants ]]; then\n            echo -n \"\\\"$word\\\" \"\n        fi\n\
    \    done", "    # Use the printf-style substitution and indentation to get the\
    \ desired output.\n    # Note: the last printf command cannot be indented.\n \
    \   #       otherwise, the last line will be the output.\n    # Note: the keyword\
    \ 'printf' can be omitted.\n    echo \"$1\" | sed -e 's/[aeiou]//g' -e 's/ //g'\
    \ | tr 'A-Z' 'a-z' | \n        awk '{\n            n = length($0)\n          \
    \  if (n == '$2')\n                printf \"\\\"%s\\\"\\n\", tolower($0)\n   \
    \     }'", "    local input=\"$1\"\n    local n=\"$2\"\n    printf '[\"%s\"]'\
    \ \"${input}\" | jq -R '. as $s | split(\" \")\n                             \
    \                | .[]\n                                             | gsub(\"\
    [^aeiou]\"; \"\")\n                                             | length\n   \
    \                                          | select(. == '\"$n\"')\n         \
    \                                    | $s | split(\" \")\n                   \
    \                          | .[.]\n                                          \
    \   | select(. != \"\")'", "    echo $1 | awk -v n=$2 '{\n        for (i=1; i<=NF;\
    \ i++) {\n            word=$i\n            gsub(/[^aeiou]/, \"\", word)\n    \
    \        if (length(word) == n) {\n                print \"\\\"\" $i \"\\\"\"\n\
    \            }\n        }\n    }'", "  echo $1 | tr ' ' '\\n' | \\\n  awk -v cons=$2\
    \ '\n  BEGIN {\n    consonants=\"bcdfghjklmnpqrstvwxyz\"\n  }\n  {\n    word =\
    \ tolower($0)\n    count = 0\n    for (i = 1; i <= length(word); i++) {\n    \
    \  if (consonants ~ substr(word, i, 1)) {\n        count++\n      }\n    }\n \
    \   if (count == cons) {\n      print \"\\\"\"$0\"\\\"\"\n    }\n  }'", "    echo\
    \ '[\"'\"$(echo \"$1\" | tr -cd ' ' '\\n' | grep -Po '[^aeiou\\s]{'\"$2\"'}')\"\
    '\"]'", "    # Implement a function here\n    # Some hints:\n    # 1. You can\
    \ split the string $1 into words using the word splitting\n    #    capability\
    \ of the shell:\n    #    words=( $1 )\n    # 2. You can iterate over words using\
    \ the for-in loop\n    # 3. You can use the global variable IFS to set the field\
    \ separator\n    #    to the empty string, so that you can iterate over the characters\n\
    \    #    of a word. \n    #    The default value of IFS is ' ' '\\t' '\\n', which\
    \ is the list of\n    #    characters considered as whitespace characters. You\
    \ can manually\n    #    modify IFS as follows:\n    #    IFS=''\n    #    for\
    \ (( i=0; i<${#word}; i++ )); do\n    #        char=${word:$i:1}\n    #      \
    \  # do something with char\n    #    done\n    #    IFS=' ' '\\t' '\\n'\n   \
    \ # 4. You can use the grep command to find all vowels in a word:\n    #    vowels=`echo\
    \ \"$word\" | grep -o \"[aeiouAEIOU]\" | tr -d '\\n'`\n    # 5. The number of\
    \ consonants in a word is the length of the word minus\n    #    the number of\
    \ vowels in the word.\n    # 6. You can count the number of words in an array\
    \ using the shell\n    #    built-in command ${#array[@]}\n    # 7. You can append\
    \ an element to an array using the following syntax:\n    #    array+=(\"element\"\
    )\n    # 8. Note that the word splitting in the shell is performed after\n   \
    \ #    performing parameter expansion, command substitution, and arithmetic\n\
    \    #    expansion, in that order. For more details, refer to:\n    #    http://www.gnu.org/software/bash/manual/bashref.html#Word-Splitting\n\
    \    #\n    # Write your implementation below this line", "\techo '[\"'$(echo\
    \ $1 | tr ' ' '\",\"' | sed -r 's/([^aeiouAEIOU])/\\1\\n/g' | grep -c '[^aeiouAEIOU]'\
    \ | grep -n $2 | cut -d ':' -f 2 | tr '\\n' ',' | sed 's/,$//' | sed 's/^/\\//'\
    \ | sed 's/,/\\/,\\//g')'\"]'", "    for w in $(tr ' ' '\\n' <<< $1); do\n   \
    \     if [[ $(tr -cd 'aeiou' <<< $w | wc -c) -eq $2 ]]; then\n            echo\
    \ \"\\\"$w\\\"\"\n        fi\n    done", "  for word in $1; do\n    if [ $(get_consonants\
    \ $word) -eq $2 ]; then\n      echo -n '\"'\n      echo -n $word\n      echo -n\
    \ '\"'\n      echo -n ' '\n    fi\n  done", "    if [[ -z $1 ]]; then\n      \
    \  echo '[]'\n        return\n    fi\n    echo $1 | tr ' ' '\\n' | grep -Eo \"\
    [[:alpha:]]*\" | grep -E \"[^aeiou]\" | grep -m1 -E \"(.*[^aeiou]){$2}\"", " \
    \   echo \"$1\" | tr -sc '[:alpha:]' '\\n' |\\\n\tgrep -E \"^[^aeiou]{$2}$\" |\\\
    \n\tsed -E 's/([^\"]+)/\"\\1\"/g' |\\\n\ttr -d '\\n'", "    echo \"$1\" |\n  \
    \  tr \" \" \"\\n\" |\n    awk '{ match($0, /[^aeiou]+/); \n           print length(substr($0,\
    \ RSTART, RLENGTH)) }' |\n    tr \"\\n\" \",\" |\n    sed \"s/^[^$2]*,$2,/$2,/g\"\
    \ |\n    sed \"s/,$2,/<>/g\" |\n    sed \"s/,,*/,/g\" |\n    sed \"s/^[^<>]*<>//g\"\
    \ |\n    tr \",\" \"\\n\" |\n    tr \"<>\" \",\" |\n    sed 's/^\\([0-9]*\\)[^0-9]*/\"\
    \\1\"/g' |\n    sed 's/\\(,[0-9]*\\)[^0-9]*/\\1\"/g' |\n    sed 's/\\([0-9]*\\\
    ),\\([0-9]*\\)/\\1\"\\2\"/g' |\n    sed 's/^[^\"]*\"//g' |\n    sed 's/\"\"/\"\
    , \"/g' |\n    sed 's/\\(\".*\\)\"\\(.*\\)\"\\(.*\\)\"/\\1\\2\\3/g' |\n    sed\
    \ 's/\"//g' |\n    sed \"s/[^\"]*$//g\" |\n    sed 's/\\(\".*\\)\"\\(.*\\)\"\\\
    (.*\\)\"/\\1\\2\\3/g' |\n    sed 's/\\(\".*\\)\"\\(.*\\)\"\\(.*\\)\"/\\1\\2\\\
    3/g' |\n    sed 's/\\(\".*\\)\"\\(.*\\)\"\\(.*\\)\"/\\1\\2\\3/g' |\n    sed 's/\\\
    (\".*\\)\"\\(.*\\)\"\\(.*\\)\"/\\1\\2\\3/g' |\n    sed 's/\\(\".*\\)\"\\(.*\\\
    )\"\\(.*\\)\"/\\1\\2\\3/g' |\n    sed 's/\\(\".*\\)\"\\(.*", "    local s=$1 n=$2\
    \ res=()\n    local words=($(sed 's/[^a-zA-Z ]/ /g' <<< \"$s\"))\n    for word\
    \ in \"${words[@]}\"; do\n        local count=$(tr -cd [aeiouAEIOU] <<< \"$word\"\
    \ | wc -c)\n        if [[ $(( ${#word} - count )) -eq $n ]]; then\n          \
    \  res+=($(printf '\"%s\"' \"$word\"))\n        fi\n    done\n    echo \"[${res[*]}]\"",
  "  local -n arr=(\"$1\")\n  for word in \"${arr[@]}\"; do\n    # Check if word has\
    \ exactly $2 consonants\n    if (( $(grep -o '[^aeiouAEIOU ]' <<< $word | wc -l)\
    \ == $2 )); then\n      echo \"\\\"$word\\\"\"\n    fi\n  done", "    local STR=$1\n\
    \    local N=$2\n    local WORDS=\"$(echo $STR | tr ' ' '\\n')\"\n    local OUTPUT=()\n\
    \    local WORD\n    for WORD in $WORDS; do\n        if [ \"$(echo $WORD | grep\
    \ -o '[^aeiouAEIOU ]' | wc -l)\" -eq \"$N\" ]; then\n            OUTPUT+=(\"$WORD\"\
    )\n        fi\n    done\n    echo ${OUTPUT[@]}", "    string=$1\n    number=$2\n\
    \    # The sed command should be re-written to manipulate the input string and\n\
    \    # remove all words containing exactly n consonants\n    sed -e \"s/\\b\\\
    (^$number\\)/\\1/g\"", "    # Fail if first parameter is empty string\n    if\
    \ [ -z \"$1\" ]; then\n        echo \"select_words() first parameter must be a\
    \ string\" >&2\n        return 1\n    fi\n    # Fail if second parameter is empty\
    \ string\n    if [ -z \"$2\" ]; then\n        echo \"select_words() second parameter\
    \ must be an integer\" >&2\n        return 1\n    fi\n    # Define the data\n\
    \    words=$1\n    number=$2\n    # Filter out all words with $number consonants\n\
    \    printf \"%s\\n\" $words | grep -o -P \"[[:alpha:]]{$number}[[:alpha:]]\"",
  "    local -a array\n    if [[ $1 =~ ^[A-Za-z ]+$ ]]; then\n        local -a words=($(echo\
    \ $1 | sed -e 's/[^a-zA-Z ]//g' -e 's/  */ /g' -e 's/^ //' -e 's/ $//'))\n   \
    \     for i in ${words[@]}; do\n            local word=${i,,} # convert to lower\
    \ case\n            local cons=${word//[aeiou]/} # remove all vowels\n       \
    \     if [[ ${#cons} -eq $2 ]]; then\n                array+=(\"\\\"$i\\\"\")\n\
    \            fi\n        done\n    fi\n    echo ${array[@]}", "    local INPUT_STRING=$1\n\
    \    local LETTER_COUNT=$2\n    local CUR_WORD=\"\"\n    local CONS_COUNT=0\n\
    \    local RESULT=\"\"\n    for (( I=0; I<${#INPUT_STRING}; I++ )); do\n     \
    \   if [[ \"${INPUT_STRING:$I:1}\" == \" \" ]]; then\n            if (( CONS_COUNT\
    \ == LETTER_COUNT )); then\n                if [[ -z \"$RESULT\" ]]; then\n  \
    \                  RESULT=\"\\\"$CUR_WORD\\\"\"\n                else\n      \
    \              RESULT=\"$RESULT, \\\"$CUR_WORD\\\"\"\n                fi\n   \
    \         fi\n            CUR_WORD=\"\"\n            CONS_COUNT=0\n        else\n\
    \            CUR_WORD=\"$CUR_WORD${INPUT_STRING:$I:1}\"\n            if ! [[ \"\
    ${INPUT_STRING:$I:1}\" =~ [aeiou] ]]; then\n                CONS_COUNT=$((CONS_COUNT+1))\n\
    \            fi\n        fi\n    done\n    if (( CONS_COUNT == LETTER_COUNT ));\
    \ then\n        if [[ -z \"$RESULT\" ]]; then\n            RESULT=\"\\\"$CUR_WORD\\\
    \"\"\n        else\n            RESULT=\"$RESULT, \\\"$CUR_WORD\\\"\"\n      \
    \  fi\n    fi\n    echo \"$RESULT\"", "    local s=$1\n    local n=$2\n    local\
    \ answer=\"[\"\n    local word_list=($(echo $s | tr ' ' '\\n'))\n    for i in\
    \ ${word_list[@]}; do\n        if [[ $i =~ ^[bcdfghjklmnpqrstvwxyz]+$ ]]; then\n\
    \            local l=${#i}\n            if [ $l == $n ]; then\n              \
    \  answer=\"$answer \\\"$i\\\"\"\n            fi\n        fi\n    done\n    echo\
    \ $answer\"]\"", "\ttr -d '[:alpha:]' <<< \"$1\" \\\n\t| awk -v n=$2 '\n\t{\n\t\
    \tsplit($0, arr)\n\t\tfor (i in arr) {\n\t\t\tif (arr[i] == n) {\n\t\t\t\tprint\
    \ i\n\t\t\t}\n\t\t}\n\t}'", "    local str=\"$1\"\n    local num=\"$2\"\n    local\
    \ words=(${str// / })\n    local arr=()\n    local i\n    local w\n    local c\n\
    \    local j\n    local keep\n    for ((i=0; i<${#words[@]}; i++)); do\n     \
    \   keep=0\n        w=${words[$i]}\n        for ((j=0; j<${#w}; j++)); do\n  \
    \          c=${w:$j:1}\n            if [[ $c =~ [aeiou] ]]; then\n           \
    \     keep=0\n                break\n            else\n                keep=1\n\
    \            fi\n        done\n        if [[ $keep -eq 1 ]]; then\n          \
    \  arr+=($w)\n        fi\n    done\n    echo \"${arr[@]}\"", "  local temp_file=\"\
    $(mktemp)\"\n  echo \"$1\" | tr -s '[:space:]' '\\n' > \"$temp_file\"\n  local\
    \ words=\"$(cat \"$temp_file\")\"\n  local result=\"\"\n  for word in $words;\
    \ do\n    if [[ $word =~ [^aeiou]{$2} ]]; then\n      result=\"$result \\\"$word\\\
    \"\"\n    fi\n  done\n  echo \"[$result]\"\n  rm -f \"$temp_file\"", "  s=$1\n\
    \  n=$2\n  echo \"$s\" | awk -v n=\"$n\" '\n    BEGIN {\n      FS=\"[^a-zA-Z]+\"\
    \n    }\n    {\n      for (i=1; i<=NF; i++) {\n        c=gsub(/[^aeiouAEIOU]/,\
    \ \"\", $i)\n        if (c == n) {\n          print \"\\\"\"$i\"\\\"\"\n     \
    \   }\n      }\n    }\n  '", "    declare -i c_count\n    declare -i c_target\n\
    \    declare -a c_words\n    declare -a c_words_out\n    declare c_word\n    declare\
    \ c_char\n    declare c_consonants\n    declare c_consonants_only\n    c_consonants=\"\
    bcdfghjklmnpqrstvwxyz\"\n    c_consonants_only=\"bcdfghjklmnpqrstvwxyz\"\n   \
    \ #\n    # The list of words\n    c_words=(\"$1\")\n    #\n    # The target consonant\
    \ count\n    c_target=\"$2\"\n    #\n    # Cycle through the words\n    for c_word\
    \ in \"${c_words[@]}\"; do\n        #\n        # Reset the consonant count\n \
    \       c_count=0\n        #\n        # Cycle through the characters in the word\n\
    \        for c_char in $(echo \"$c_word\" | fold -w1); do\n            #\n   \
    \         # Count consonants\n            if [[ \"$c_consonants\" =~ \"$c_char\"\
    \ ]]; then\n                c_count+=1\n            fi\n        done\n       \
    \ #\n        # If the count is the right number then add to the output list\n\
    \        if [ \"$c_count\" -eq \"$c_target\" ]; then\n            c_words_out+=(\"\
    $c_word\")\n        fi\n    done\n    #\n    # Output the result\n    if [ \"\
    ${#c_words_out[@]}\" -gt 0 ]; then\n        echo ${c_words_out[@]}\n    else\n\
    \        echo []\n    fi", "    echo $(echo $1 | tr ' ' '\\n' | grep -E \"[^aeiou]{$2}\"\
    \ | sed 's/.*/\"&\"/g' | tr '\\n' ',' | sed 's/.$//')", "    local input=\"$1\"\
    \n    local number_of_consonants=\"$2\"\n    local consonants=(\"b\" \"c\" \"\
    d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"\
    t\" \"v\" \"w\" \"x\" \"y\" \"z\")\n    local word_array=()\n    for word in $input;\
    \ do\n        local number_of_consonants_in_word=0\n        for char in $(echo\
    \ \"$word\" | sed 's/\\(.\\)/\\1\\n/g'); do\n            for consonant in \"${consonants[@]}\"\
    ; do\n                if [[ \"$char\" == \"$consonant\" ]]; then\n           \
    \         number_of_consonants_in_word=$((number_of_consonants_in_word + 1))\n\
    \                fi\n            done\n        done\n        if [[ \"$number_of_consonants_in_word\"\
    \ == \"$number_of_consonants\" ]]; then\n            word_array+=(\"\\\"$word\\\
    \"\")\n        fi\n    done\n    echo \"${word_array[@]}\""]
stop_tokens:
- "\n}"
