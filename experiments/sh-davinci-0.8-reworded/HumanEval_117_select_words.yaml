name: HumanEval_117_select_words
language: sh
prompt: "#!/bin/bash\n# Given a string s and a natural number n, you have been tasked\
  \ to implement \n# a function that returns a list of all words from string s that\
  \ contain exactly \n# n consonants, in order these words appear in the string s.\n\
  # If the string s is empty then the function should return an empty list.\n# Note:\
  \ you may assume the input string contains only letters and spaces.\n# Examples:\n\
  # >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>>\
  \ $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n\
  # >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"\
  Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\"\
  )\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n"
tests: "}\n\ncandidate() {\n    select_words \"$@\"\n}\n\nset -e\nrun_test() {\n \
  \   [[ $(candidate \"Mary had a little lamb\" \"4\") = \"little\" ]]\n    [[ $(candidate\
  \ \"Mary had a little lamb\" \"3\") = \"Mary lamb\" ]]\n    [[ $(candidate \"simple\
  \ white space\" \"2\") = \"\" ]]\n    [[ $(candidate \"Hello world\" \"4\") = \"\
  world\" ]]\n    [[ $(candidate \"Uncle sam\" \"3\") = \"Uncle\" ]]\n    [[ $(candidate\
  \ \"\" \"4\") = \"\" ]]\n    [[ $(candidate \"a b c d e f\" \"1\") = \"b c d f\"\
  \ ]]\n}\n\nrun_test"
completions: ["    if [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n \
    \   fi\n    local out=$(echo $1 | tr ' ' '\\n' | awk -v n=$2 'BEGIN {FS=\"\"}\
    \ {cnt=0; for (i=1; i<=NF; i++) {if ($i != \"a\" && $i != \"e\" && $i != \"i\"\
    \ && $i != \"o\" && $i != \"u\") {cnt++}}; if (cnt == n) {print}}')\n    echo\
    \ \"[$(echo $out | sed 's/ /\", \"/g')]\"", "    local words=(${1// / })\n   \
    \ local n=$2\n    local results=()\n    for word in \"${words[@]}\"; do\n    \
    \    if [[ $(echo \"$word\" | grep -o \"[^aeiou]\" | wc -l) == $n ]]; then\n \
    \           results+=(\"\\\"$word\\\"\")\n        fi\n    done\n    echo \"[${results[@]}]\"",
  "    declare -a words_array=()\n\n    echo $1 | tr \" \" \"\\n\" | grep -E '^[bcdfghjklmnpqrstvwxyz]+$'\
    \ | grep -E \"^[bcdfghjklmnpqrstvwxyz]{$2}$\" | tr -d '\\n'", '    echo "$1" |
    tr " " "\n" | tr -d "[a,e,i,o,u]" | grep -E "^.{$2}\$" | tr "\n" "," | sed "s/,$//"',
  "  local input=\"$1\"\n  local num=\"$2\"\n  echo $input | tr ' ' '\\n' | awk -v\
    \ num=\"$num\" '$0 ~ /^[a-zA-Z]*$/ {if (length($0) - length(gensub(/[a,e,i,o,u,A,E,I,O,U]/,\"\
    \",\"g\",$0)) == num) print \"\\\"\"$0\"\\\"\"}'", "    declare -A CONSONANTS=([\"\
    B\"]=1 [\"C\"]=1 [\"D\"]=1 [\"F\"]=1 [\"G\"]=1 [\"H\"]=1 [\"J\"]=1 [\"K\"]=1 [\"\
    L\"]=1 [\"M\"]=1 [\"N\"]=1 [\"P\"]=1 [\"Q\"]=1 [\"R\"]=1 [\"S\"]=1 [\"T\"]=1 [\"\
    V\"]=1 [\"W\"]=1 [\"X\"]=1 [\"Y\"]=1 [\"Z\"]=1 [\"b\"]=1 [\"c\"]=1 [\"d\"]=1 [\"\
    f\"]=1 [\"g\"]=1 [\"h\"]=1 [\"j\"]=1 [\"k\"]=1 [\"l\"]=1 [\"m\"]=1 [\"n\"]=1 [\"\
    p\"]=1 [\"q\"]=1 [\"r\"]=1 [\"s\"]=1 [\"t\"]=1 [\"v\"]=1 [\"w\"]=1 [\"x\"]=1 [\"\
    y\"]=1 [\"z\"]=1)\n    declare -A VOWELS=([\"A\"]=1 [\"E\"]=1 [\"I\"]=1 [\"O\"\
    ]=1 [\"U\"]=1 [\"a\"]=1 [\"e\"]=1 [\"i\"]=1 [\"o\"]=1 [\"u\"]=1)\n    declare\
    \ -a WORDS\n    declare -a FILTERED\n    IFS=' ' read -r -a WORDS <<< \"$1\"\n\
    \    for word in \"${WORDS[@]}\"; do\n        counter=0\n        for (( i=0; i<${#word};\
    \ i++ )); do\n            if [[ ${CONSONANTS[${word:$i:1}]} ]]; then\n       \
    \         counter=$((counter+1))\n            fi\n        done\n        if [[\
    \ $counter -eq $2 ]]; then\n            FILTERED+=(\"$word\")\n        fi\n  \
    \  done\n    if [[ ${#FILTERED[@]} -gt 0 ]]; then\n        printf '%s\\n' \"${FILTERED[@]}\"\
    \n    fi", "    echo -e '\"'\"$1\"'\"' | tr ' ' '\\n' | tr -d -c '[:alpha:]' |\
    \ awk '{ if (NF == '\"$2\"') print; }'", "    echo $(echo $1 | tr \" \" \"\\n\"\
    \ | grep -P '^[^aeiou]{'$2'}$')", "  # write your solution here\n  echo", "  \
    \  input=$1\n    count=$2\n    # echo $input\n    # echo $count\n    string_length=${#input}\n\
    \    # echo $string_length\n    j=0\n    for (( i=0; i<$string_length; i++ ))\n\
    \    do\n        # echo $i\n        first=$(echo $input | cut -c$((i+1)))\n  \
    \      # echo $first\n        if [[ $first == \" \" ]]\n        then\n       \
    \     # echo \"FOUND A SPACE\"\n            j=$((j+1))\n            word=$(echo\
    \ $input | cut -c$(((i-$j)+1))-$((i)))\n            # echo $word\n           \
    \ cons_count=$(echo -n $word | grep -oP \"[^aeiou ]\" | wc -l)\n            #\
    \ echo $cons_count\n            if [[ $cons_count == $count ]]\n            then\n\
    \                # echo $word\n                # echo $count\n               \
    \ echo $word\n            fi\n            j=0\n        else\n            j=$((j+1))\n\
    \        fi\n    done\n    last_word=$(echo $input | cut -c$(((i-$j)+1))-$((i)))\n\
    \    # echo $last_word\n    cons_count=$(echo -n $last_word | grep -oP \"[^aeiou\
    \ ]\" | wc -l)\n    # echo $cons_count\n    if [[ $cons_count == $count ]]\n \
    \   then\n        # echo $last_word\n        # echo $count\n        echo $last_word\n\
    \    fi\n    # echo $input\n    # echo $count", "    [[ $# -ne 2 ]] && echo \"\
    Not valid number of arguments.\" && exit 1\n    [[ ! $2 =~ ^[0-9]+$ ]] && echo\
    \ \"Not valid number for consonants.\" && exit 1\n    words=$(echo $1 | sed 's/\\\
    ([a-zA-Z]\\+\\)/\"\\1\"/g')\n    #echo $words\n    #echo $2\n    res=$(echo $words\
    \ | awk -v number=\"$2\" '{\n        while(match($0,/\" [^aeiou]*\"/)) {\n   \
    \         word=substr($0, RSTART, RLENGTH)\n            $0=substr($0, RSTART+RLENGTH)\n\
    \            gsub(/[^aeiou]/, \"&\", word)\n            if(length(word) == number)\n\
    \                printf(\"%s \", word)\n        }\n    }')\n    echo \"[$res]\"",
  "  local words=(${1// / })\n  local vowels=\"[aeiouAEIOU]\"\n  for word in \"${words[@]}\"\
    ; do\n    consonants=$(echo \"$word\" | sed -e \"s/[^$vowels]//g\")\n    if [\
    \ ${#consonants} -eq $2 ]; then\n      echo \"\\\"$word\\\"\"\n    fi\n  done",
  "    words=($(echo \"$1\" | grep -oE '[a-zA-Z]+'))\n    vowels=(a e i o u)\n   \
    \ n=$2\n    len=${#words[@]}\n    for ((i=0; i<$len; i++)); do\n        word=${words[$i]}\n\
    \        count=0\n        for ((j=0; j<${#word}; j++)); do\n            char=${word:$j:1}\n\
    \            if ! [[ \"${vowels[@]}\" =~ \"$char\" ]]; then\n                ((count++))\n\
    \            fi\n        done\n        if [ $count == $n ]; then\n           \
    \ echo \"\\\"$word\\\"\"\n        fi\n    done", "    # Let's assume that all\
    \ vowels are a, e, i, o, u\n    n=\"$2\"\n    string=\"$1\"\n    array=($(echo\
    \ \"$string\" | tr \" \" \"\\n\"))\n    out_array=()\n    for word in \"${array[@]}\"\
    ; do\n        vars=($(echo $word | sed 's/[^aeiou]//g'))\n        if [ \"${#vars[@]}\"\
    \ == \"$n\" ]; then\n            out_array+=(\"\\\"$word\\\"\")\n        fi\n\
    \    done\n    echo ${out_array[@]}", "    awk '{ split($0,a,\" \");\n       \
    \ for (i in a) {\n            if(length(a[i]) == n) {\n                gsub(/[^b-df-hj-np-tv-z]/,\"\
    \",a[i]);\n                if(length(a[i]) == n)\n                    print a[i];\n\
    \            }\n        }\n    }' n=$2", '    echo -e "$1" | tr -d " " | grep
    -E "^[^aeiou]{$2}$"', "    [[ -z $1 ]] && echo [] && return\n    local words\n\
    \    local pattern=\"[bcdfghjklmnpqrstvwxyz][bcdfghjklmnpqrstvwxyz]*\"\n    words=$(echo\
    \ $1 | grep -o \"$pattern\" | awk '{print $0}')\n    for word in $words; do\n\
    \        if [[ $(echo $word | grep -o \"$pattern\" | wc -l) -eq $2 ]]; then\n\
    \            echo $word\n        fi\n    done", "    echo '[\"'$(echo $1 | grep\
    \ --only-matching --word-regexp \"[a-zA-Z]*\" | awk '\n        BEGIN {\n     \
    \       consonants = \"bcdfghjklmnpqrstvwxyz\"\n            len = length(consonants)\n\
    \        }\n        {\n            for (i = 1; i <= len; i++) {\n            \
    \    gsub(substr(consonants, i, 1), \"\", $0)\n            }\n            if (length($0)\
    \ == '$2') {\n                print\n            }\n        }')'\"]'", "    local\
    \ -A vowels=([a]=1 [e]=1 [i]=1 [o]=1 [u]=1)\n    local string=$1\n    local count=$2\n\
    \    local words=\"$(tr ' ' '\\n' <<< \"$string\")\"\n    local -a output\n  \
    \  for word in $words; do\n        local word=${word,,}\n        local length=${#word}\n\
    \        local i\n        local vowel_count=0\n        for ((i=0; i<length; i++));\
    \ do\n            [[ ${vowels[${word:i:1}]} ]] && ((++vowel_count))\n        done\n\
    \        (( vowel_count == length - count )) && output+=(\\\"$word\\\")\n    done\n\
    \    echo \"${output[@]}\"", "    local s=\"$1\"\n    local n=\"$2\"\n    local\
    \ regex=''\n    local regex_vowels='[aeiouAEIOU]'\n    local regex_consonants='[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]'\n\
    \    local result='[]'\n    local words=''\n    local words_num=0\n    local words_counter=0\n\
    \    local word=''\n    local word_consonants_num=0\n    local word_consonants_counter=0\n\
    \    local ch=''\n    local i=0\n    local j=0\n    local k=0\n    local char_num=0\n\
    \    local new_result=''\n    local tmp=''\n    # The string may contain capital\
    \ and lowercase letters, spaces and tabs.\n    #s=\"$(echo \"$s\" | tr [:upper:]\
    \ [:lower:])\"\n    # -------------------------------------------------------------------------\n\
    \    # First, let's determine the number of words.\n    # -------------------------------------------------------------------------\n\
    \    words_num=$(echo \"$s\" | tr -cd ' ' | wc -c)\n    words_num=$((words_num\
    \ + 1))\n    # -------------------------------------------------------------------------\n\
    \    # Loop through all words.\n    # -------------------------------------------------------------------------\n\
    \    for ((i=0; i<words_num; i++)); do\n        word=\"$(echo \"$s\" | cut -d\
    \ ' ' -f $((i+1)))\"\n        # If the word does not have n letters, then skip\
    \ it.\n        if [ ${#word} -ne $n ]; then\n            continue\n        fi\n\
    \        # Get all consonants.\n        regex=''\n        for ((j=0; j<${#word};\
    \ j++)); do\n            ch=\"$(echo \"$word\" | cut -c $((j+1)))\"\n        \
    \    if [ \"$ch\" == ' ' ]; then\n                continue\n            fi\n \
    \           if [[ $ch =~ $regex_vowels ]]; then\n                continue\n  \
    \          fi\n            if [[ $ch =~ $regex_consonants ]]; then\n         \
    \       regex=\"$regex$ch\"\n            fi\n        done\n        # Count the\
    \ number"]
stop_tokens:
- "\n}"
