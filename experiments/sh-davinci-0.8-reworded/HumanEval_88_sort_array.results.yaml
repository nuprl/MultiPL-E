language: sh
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    input=$(echo\
    \ \"$1\" | sed 's/ /\",\"/g')\n    sum_res=$(echo \"$1\" | sed 's/ / + /g')\n\
    \    sum_res=$(($sum_res))\n    echo \"[\\\"$input\\\"]\" | jq \"if .[0] + .[-1]\
    \ % 2 == 0 then sort_by(.|tonumber) else sort_by(- .|tonumber) end\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpol760xfy.sh: line 22: jq: command not found

    /tmp/tmpol760xfy.sh: line 22: jq: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo '[]'\n    return\n  fi\n  local -a arr\n  IFS=' ' read -r\
    \ -a arr <<< \"$1\"\n  local sum=$((arr[0] + arr[-1]))\n  if [ $((sum % 2)) -eq\
    \ 0 ]; then\n    # asc\n    for((i=0;i<${#arr[@]};i++)); do\n      for((j=i+1;j<${#arr[@]};j++));\
    \ do\n        if [ \"${arr[i]}\" -gt \"${arr[j]}\" ]; then\n          local temp=${arr[j]}\n\
    \          arr[j]=${arr[i]}\n          arr[i]=$temp\n        fi\n      done\n\
    \    done\n  else\n    # desc\n    for((i=0;i<${#arr[@]};i++)); do\n      for((j=i+1;j<${#arr[@]};j++));\
    \ do\n        if [ \"${arr[i]}\" -lt \"${arr[j]}\" ]; then\n          local temp=${arr[j]}\n\
    \          arr[j]=${arr[i]}\n          arr[i]=$temp\n        fi\n      done\n\
    \    done\n  fi\n  local result=\"[\"\n  for v in \"${arr[@]}\"; do\n    result=\"\
    $result\\\"$v\\\",\"\n  done\n  echo \"${result%?}]\"\n}\n\ncandidate() {\n  \
    \  sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ $# -eq\
    \ 0 ]]; then\n    echo '[]'\n    return\n  fi\n  # convert input to array\n  arr=()\n\
    \  while IFS= read -r line; do\n    arr+=(\"$line\")\n  done <<<\"$*\"\n  # main\
    \ part\n  sum_of_first_and_last=`expr \"${arr[0]}\" + \"${arr[${#arr[@]}-1]}\"\
    `\n  if ((sum_of_first_and_last % 2 == 0)); then\n    IFS=\" \" echo ${arr[*]}\
    \ | tr ' ' '\\n' | sort -rn | xargs -n1 printf '\"%s\" '\n  else\n    IFS=\" \"\
    \ echo ${arr[*]} | tr ' ' '\\n' | sort -n | xargs -n1 printf '\"%s\" '\n  fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'expr: non-integer argument

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  [[ $# -eq 0 ]]\
    \ && return 0\n  local arr=( \"$@\" )\n  local sum=$(( arr[0] + arr[-1] ))\n \
    \ local len=$#\n  local res=''\n  if (( sum % 2 == 0 )); then\n    for (( i =\
    \ 0; i < len; i++ )); do\n      res+=\"${arr[$i]} \"\n    done\n  else\n    for\
    \ (( i = len - 1; i >= 0; i-- )); do\n      res+=\"${arr[$i]} \"\n    done\n \
    \ fi\n  printf '%s' \"${res% }\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvy4rooht.sh: line 21: 2 4 3 0 1 5: syntax error in expression (error
    token is "4 3 0 1 5")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ $# -eq 0\
    \ ]; then\n    echo \"[]\"\n  else\n    result=\"[\"\n    for v in $1; do\n  \
    \    result=\"$result\\\"$v\\\",\"\n    done\n    result=\"${result::-1}]\"\n\
    \    if [ $(( $(echo $1 | awk '{print $1}') + $(echo $1 | awk '{print $NF}') ))\
    \ -eq 0 ]; then\n      echo $result\n    else\n      echo $result | rev | cut\
    \ -c 2- | rev\n    fi\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7rhl_7s6.sh: line 27: +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local __array=$(echo\
    \ $1 | awk '{ for (i=1; i<=NF; i++) print $i }')\n  local __sum=$(echo $1 | awk\
    \ '{ sum = 0; for (i=1; i<=NF; i++) sum += $i; print sum }')\n  local __sorted\n\
    \  if [ $(($__sum % 2)) -eq 0 ]; then\n    __sorted=$(echo $__array | awk '{ n=NF;\
    \ for (i=n; i>=1; i--) printf(\"%s \", $i) }')\n  else\n    __sorted=$(echo $__array\
    \ | awk '{ for (i=1; i<=NF; i++) printf(\"%s \", $i) }')\n  fi\n  echo $(echo\
    \ $__sorted | awk '{ n=NF; for (i=1; i<=n; i++) printf(\"%s\", \"\\\"\"$i\"\\\"\
    \") }')\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a lst=()\n\
    \  # @TODO: Implement this function\n  return \"${lst[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a ary\n\
    \    read -a ary <<< \"$1\"\n    if [[ $((${ary[0]} + ${ary[-1]}))%2 -eq 0 ]];\
    \ then\n        for ((i=0; i<${#ary[@]}; i++)); do\n            for ((j=0; j<${#ary[@]}-1;\
    \ j++)); do\n                if [[ ${ary[j]} -lt ${ary[j+1]} ]]; then\n      \
    \              tmp=${ary[j]}\n                    ary[j]=${ary[j+1]}\n       \
    \             ary[j+1]=$tmp\n                fi\n            done\n        done\n\
    \    else\n        for ((i=0; i<${#ary[@]}; i++)); do\n            for ((j=0;\
    \ j<${#ary[@]}-1; j++)); do\n                if [[ ${ary[j]} -gt ${ary[j+1]} ]];\
    \ then\n                    tmp=${ary[j]}\n                    ary[j]=${ary[j+1]}\n\
    \                    ary[j+1]=$tmp\n                fi\n            done\n   \
    \     done\n    fi\n    echo -n \"[\"\n    for ((i=0; i<${#ary[@]}; i++)); do\n\
    \        if [[ $i -lt $((${#ary[@]}-1)) ]]; then\n            echo -n \"\\\"${ary[$i]}\\\
    \", \"\n        else\n            echo -n \"\\\"${ary[$i]}\\\"\"\n        fi\n\
    \    done\n    echo \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy_v8ch5b.sh: line 21: ary: bad array subscript

    /tmp/tmpy_v8ch5b.sh: line 21: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ $# -ne\
    \ 1 ]]; then\n    echo \"usage: $0 '1 2 3'\"\n    return 1\n  fi\n  declare -a\
    \ arr=($1)\n  if [[ ${#arr[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return 0\n\
    \  fi\n  local first=${arr[0]}\n  local last=${arr[-1]}\n  local sum=$(( $first\
    \ + $last ))\n  if [[ $(($sum%2)) -eq 0 ]]; then\n    IFS=$'\\n' arr=($(sort -r\
    \ <<<\"${arr[*]}\"))\n  else\n    IFS=$'\\n' arr=($(sort <<<\"${arr[*]}\"))\n\
    \  fi\n  echo '['$(printf '\"%s\", ' \"${arr[@]}\")']'\n}\n\ncandidate() {\n \
    \   sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=($1)\n\
    \  if [ ${#array[@]} -eq 0 ]; then\n    echo \"[]\"\n  elif [ ${#array[@]} -eq\
    \ 1 ]; then\n    echo \"[\\\"${array[0]}\\\"]\"\n  else\n    local first=$(head\
    \ -n 1 <<< \"$1\")\n    local last=$(tail -n 1 <<< \"$1\")\n    local sum=$((first\
    \ + last))\n    local sorted_numbers\n    if [ $((sum % 2)) -eq 0 ]; then\n  \
    \    sorted_numbers=$(echo \"$1\" | sort -nr)\n    else\n      sorted_numbers=$(echo\
    \ \"$1\" | sort -n)\n    fi\n    local result=$(sed 's/^/\\\"/;s/$/\\\"/;s/ /\\\
    \", \\\"/g' <<< \"$sorted_numbers\")\n    echo \"[${result}]\"\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a list=($1)\n\
    \  declare -a even=(${list[*]:0:$(( ${#list[@]}/2 ))})\n  declare -a odd=(${list[*]:$((\
    \ ${#list[@]}/2 ))})\n  declare -a even_sorted=()\n  declare -a odd_sorted=()\n\
    \  declare -a result=()\n  while [[ ${#even[@]} -gt 0 ]]; do\n    even_sorted+=(\"\
    ${even[0]}\")\n    even=(\"${even[@]:1}\")\n    if [[ ${#odd[@]} -gt 0 ]]; then\n\
    \      odd_sorted+=(\"${odd[-1]}\")\n      odd=(\"${odd[@]:0:$(( ${#odd[@]}-1\
    \ ))}\")\n    fi\n  done\n  [[ $((${even_sorted[0]}+${even_sorted[-1]}))%2 -eq\
    \ 0 ]] && result=(\"${even_sorted[@]}\") || result=(\"${even_sorted[@]}\" \"${odd_sorted[@]}\"\
    )\n  printf \"%s\" \"[\"\n  for i in ${!result[@]}; do\n    [[ $i -eq 0 ]] &&\
    \ printf \"%s\" \"\\\"${result[$i]}\\\"\" || printf \"%s\" \", \\\"${result[$i]}\\\
    \"\"\n  done\n  printf \"%s\" \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvyin9vrr.sh: line 33: even_sorted: bad array subscript

    /tmp/tmpvyin9vrr.sh: line 33: +: syntax error: operand expected (error token is
    "+")

    /tmp/tmpvyin9vrr.sh: line 33: even_sorted: bad array subscript

    /tmp/tmpvyin9vrr.sh: line 33: +: syntax error: operand expected (error token is
    "+")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local a=\"$(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n)\"\n  local s=${a:0:1}\n  local l=${a:(-1)}\n\
    \  ((s+l))&1 && echo \"$a\" || echo \"$a\" | tac\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjwfg3rkj.sh: line 22: 1: command not found

    /tmp/tmpjwfg3rkj.sh: line 22: 1: command not found

    /tmp/tmpjwfg3rkj.sh: line 22: 1: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  arr=($1)\n  if\
    \ [ $(( ${arr[0]} + ${arr[-1]} )) -eq 1 ]; then\n    echo ${arr[@]} | tr ' ' '\\\
    n' | sort -nr | tr '\\n' ' '\n  else\n    echo ${arr[@]} | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9g6dkae9.sh: line 20: arr: bad array subscript

    /tmp/tmp9g6dkae9.sh: line 20: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    printf '%s\\\
    n' $1 | jq -c \"[. | tostring] | sort_by(.[0]) | sort_by(.[-1]) | sort_by(.[0]\
    \ + .[-1])\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf1qiw1c7.sh: line 19: jq: command not found

    /tmp/tmpf1qiw1c7.sh: line 19: jq: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a a=($1)\n\
    \    local -a r=()\n    local l=${#a[@]}\n    if (( l < 2 )); then\n        for\
    \ i in \"${a[@]}\"; do\n            r+=(\"\\\"$i\\\"\")\n        done\n    else\n\
    \        local s=$(( a[0] + a[-1] ))\n        if (( s % 2 )); then\n         \
    \   a=($(for i in \"${a[@]}\"; do echo \"$i\"; done | sort -n))\n        else\n\
    \            a=($(for i in \"${a[@]}\"; do echo \"$i\"; done | sort -n -r))\n\
    \        fi\n        for i in \"${a[@]}\"; do\n            r+=(\"\\\"$i\\\"\"\
    )\n        done\n    fi\n    echo \"[${r[*]}]\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local n_list=($1)\n\
    \    local len=${#n_list[@]}\n    local first=${n_list[0]}\n    local last=${n_list[-1]}\n\
    \    local out_list=()\n    local is_even=$(((first + last) % 2))\n    for ((i\
    \ = 0; i < len; i++)); do\n        if ((is_even)); then\n            out_list[i]=${n_list[len\
    \ - i - 1]}\n        else\n            out_list[i]=${n_list[i]}\n        fi\n\
    \    done\n    printf \"[\\\"%s\\\"]\" \"${out_list[@]}\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc_cguvo2.sh: line 22: n_list: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ $# -lt\
    \ 1 ]]; then\n    echo \"[]\"\n    return 0\n  fi\n  if [[ $# -eq 1 ]]; then\n\
    \    echo \"[\\\"$1\\\"]\"\n    return 0\n  fi\n  local input=\"$1\"\n  local\
    \ -i first=\"${input%% *}\"\n  local last=\"${input##* }\"\n  local -i sum=$((first\
    \ + last))\n  local -a out\n  if (( sum % 2 == 0 )); then\n    input=\"$(tr \"\
    \ \" \"\\n\" <<< \"$input\" | sort -nr)\"\n  else\n    input=\"$(tr \" \" \"\\\
    n\" <<< \"$input\" | sort -n)\"\n  fi\n  while read -r number; do\n    out+=(\"\
    \\\"$number\\\"\")\n  done <<< \"$input\"\n  echo \"[${out[*]}]\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -n array=\"\
    $1\"\n  local result=()\n  local cosh_value=0\n  local index=0\n  local value=0\n\
    \  for value in ${array[@]}; do\n    result+=(\"$(printf \"%s\" \"$value\")\"\
    )\n  done\n  cosh_value=$((array[0] + array[-1]))\n  index=0\n  if ((cosh_value\
    \ % 2 == 0)); then\n    while ((index < ${#result[@]} / 2)); do\n      local tmp=\"\
    ${result[$index]}\"\n      result[$index]=\"${result[${#result[@]} - $index -\
    \ 1]}\"\n      result[${#result[@]} - $index - 1]=\"$tmp\"\n      ((index++))\n\
    \    done\n  else\n    while ((index < ${#result[@]} / 2)); do\n      local tmp=\"\
    ${result[$index]}\"\n      result[$index]=\"${result[${#result[@]} - $index -\
    \ 1]}\"\n      result[${#result[@]} - $index - 1]=\"$tmp\"\n      ((index++))\n\
    \    done\n  fi\n  printf \"%s\" \"[\"\n  printf \"%s\" \"${result[0]}\"\n  shift\n\
    \  while (($# != 0)); do\n    printf \"%s\" \", \"$1\"\"\n    shift\n  done\n\
    \  printf \"%s\" \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx_lida1q.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpx_lida1q.sh: line 27: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  list=($1)\n \
    \ even=0\n  odd=0\n  length=${#list[@]}\n  for i in $(seq 0 $(($length - 1)));\
    \ do\n    if [[ $((($i + ${list[$i]})))%2 -eq 0 ]]; then\n      even+=1\n    else\n\
    \      odd+=1\n    fi\n  done\n  if [[ $((even % 2)) -eq 0 ]]; then\n    for i\
    \ in $(seq 0 $(($length - 1))); do\n      if [[ $((($i + ${list[$i]})))%2 -eq\
    \ 0 ]]; then\n        echo \\\"${list[$i]}\\\"\n      fi\n    done\n    for i\
    \ in $(seq 0 $(($length - 1))); do\n      if [[ $((($i + ${list[$i]})))%2 -ne\
    \ 0 ]]; then\n        echo \\\"${list[$i]}\\\"\n      fi\n    done\n  else\n \
    \   for i in $(seq 0 $(($length - 1))); do\n      if [[ $((($i + ${list[$i]})))%2\
    \ -ne 0 ]]; then\n        echo \\\"${list[$i]}\\\"\n      fi\n    done\n    for\
    \ i in $(seq 0 $(($length - 1))); do\n      if [[ $((($i + ${list[$i]})))%2 -eq\
    \ 0 ]]; then\n        echo \\\"${list[$i]}\\\"\n      fi\n    done\n  fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a input=($1)\n\
    \  if [ ${#input[@]} -eq 0 ]; then\n    echo \"[]\"\n  elif [ ${#input[@]} -eq\
    \ 1 ]; then\n    echo \"[\\\"${input[0]}\\\"]\"\n  else\n    if [ $(( ${input[0]}\
    \ + ${input[-1]} )) -eq 0 ]; then\n      sort_array_dec \"$1\"\n    else\n   \
    \   sort_array_asc \"$1\"\n    fi\n  fi\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a arr1\
    \ arr2 arr3\n  local sum\n  arr1=(${@})\n  sum=$((${arr1[0]} + ${arr1[-1]}))\n\
    \  if ((sum % 2)); then\n    arr2=($(sort -g <<<\"${arr1[*]}\"))\n  else\n   \
    \ arr2=($(sort -gr <<<\"${arr1[*]}\"))\n  fi\n  arr3=(\"${arr2[@]/#/\\\"}\")\n\
    \  arr3=(\"${arr3[@]/%/\\\"}\")\n  echo \"[${arr3[*]}]\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwzzimyka.sh: line 22: arr1: bad array subscript

    /tmp/tmpwzzimyka.sh: line 22: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ $# == 0\
    \ ]; then\n    echo []\n  else\n    IFS=\" \" read -r -a my_array <<< \"$1\"\n\
    \    len=${#my_array[@]}\n    if [ $((${my_array[0]} + ${my_array[$(($len - 1))]}))\
    \ -gt 0 ]; then\n      if [ $((${my_array[0]} + ${my_array[$(($len - 1))]})) -gt\
    \ 0 ] && [ $((${my_array[0]} + ${my_array[$(($len - 1))]})) -lt 10 ]; then\n \
    \       if [ $((${my_array[0]} + ${my_array[$(($len - 1))]})) -eq 1 ]; then\n\
    \          echo [$(printf '\"%s\" ' \"${my_array[@]}\" | sort -n | tr '\\n' '\
    \ ')]\n        else\n          echo [$(printf '\"%s\" ' \"${my_array[@]}\" | sort\
    \ -nr | tr '\\n' ' ')]\n        fi\n      else\n        echo [$(printf '\"%s\"\
    \ ' \"${my_array[@]}\" | sort -nr | tr '\\n' ' ')]\n      fi\n    else\n     \
    \ echo [$(printf '\"%s\" ' \"${my_array[@]}\" | sort -n | tr '\\n' ' ')]\n   \
    \ fi\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp19oacowc.sh: line 24: my_array: bad array subscript

    /tmp/tmp19oacowc.sh: line 24: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if [ $# -eq\
    \ 0 ]; then\n        echo '[]'\n        return\n    fi\n    if [ $# -eq 1 ]; then\n\
    \        echo \"[\\\"$1\\\"]\"\n        return\n    fi\n    array=(${@:1})\n \
    \   left=${array[0]}\n    right=${array[${#array[@]}-1]}\n    let total=left+right\n\
    \    if [ $(($total%2)) -eq 0 ]; then\n        for i in \"${!array[@]}\"; do\n\
    \            for j in \"${!array[@]}\"; do\n                if [ ${array[$i]}\
    \ -gt ${array[$j]} ]; then\n                    tmp=${array[$i]}\n           \
    \         array[$i]=${array[$j]}\n                    array[$j]=$tmp\n       \
    \         fi\n            done\n        done\n    else\n        for i in \"${!array[@]}\"\
    ; do\n            for j in \"${!array[@]}\"; do\n                if [ ${array[$i]}\
    \ -lt ${array[$j]} ]; then\n                    tmp=${array[$i]}\n           \
    \         array[$i]=${array[$j]}\n                    array[$j]=$tmp\n       \
    \         fi\n            done\n        done\n    fi\n    echo ${array[@]} | tr\
    \ ' ' ',' | sed 's/^/[/' | sed 's/$/]/'\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=\"\"\
    \n  for item in \"$@\"; do\n    arr=\"$arr $(echo -n \"$item\")\"\n  done\n  arr=$(echo\
    \ \"$arr\" | sed 's/^[[:space:]]*//')\n\n  local len=$(echo \"$arr\" | wc -w)\n\
    \  local i=0\n  local sorted=\"\"\n  if [[ $(((${arr%% *} + ${arr##* })) % 2 ==\
    \ 0)) -eq 1 ]]; then\n    while [[ $i -lt $len ]]; do\n      local elem=\"$(echo\
    \ \"$arr\" | cut -d' ' -f$((len - i)))\"\n      sorted=\"$sorted $elem\"\n   \
    \   ((++i))\n    done\n  else\n    sorted=\"$arr\"\n  fi\n  sorted=$(echo \"$sorted\"\
    \ | sed 's/^[[:space:]]*//')\n  echo \"$sorted\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz366ptpt.sh: line 28: syntax error in conditional expression: unexpected
    token `)''

    /tmp/tmpz366ptpt.sh: line 28: syntax error near `0))''

    /tmp/tmpz366ptpt.sh: line 28: `  if [[ $(((${arr%% *} + ${arr##* })) % 2 == 0))
    -eq 1 ]]; then''

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local first last\
    \ sum result\n  if [ -z \"$1\" ]; then\n    echo \"[]\"\n  else\n    for i in\
    \ $1; do\n      result+=\"$i \"\n    done\n    first=$(echo \"$result\" | awk\
    \ '{print $1}')\n    last=$(echo \"$result\" | awk '{print $NF}')\n    sum=$(($first\
    \ + $last))\n    if [ $((sum % 2)) -eq 0 ]; then\n      echo \"[$(echo \"$result\"\
    \ | sort -r | tr ' ' ',')]\"\n    else\n      echo \"[$(echo \"$result\" | sort\
    \ | tr ' ' ',')]\"\n    fi\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=\"\
    $(echo \"$1\" | sed 's/ /\",\"/g')\"\n  local sum=\"$(echo \"$1\" | awk '{print\
    \ $1+$NF}')\"\n  local len=\"$(echo \"$1\" | wc -w)\"\n  if [ -z \"$len\" ]; then\n\
    \    echo \"[]\"\n  elif [ \"$len\" -eq 1 ]; then\n    echo \"[\\\"$arr\\\"]\"\
    \n  elif [ $((sum % 2)) -eq 0 ]; then\n    echo \"[\\\"$arr\\\"]\" | jq -s 'sort_by(.[]\
    \ | tonumber)'\n  else\n    echo \"[\\\"$arr\\\"]\" | jq -s 'sort_by(.[] | tonumber)\
    \ | reverse'\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7df373lm.sh: line 27: jq: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local ARRAY=()\n\
    \  for n in $1; do\n    ARRAY+=($n)\n  done\n  if (( (${ARRAY[0]} + ${ARRAY[-1]})\
    \ % 2 == 0 )); then\n    printf '%s\\n' \"${ARRAY[@]}\" | sort -r\n  else\n  \
    \  printf '%s\\n' \"${ARRAY[@]}\" | sort\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpldb003rq.sh: line 23: ARRAY: bad array subscript

    /tmp/tmpldb003rq.sh: line 23: ((: ( + ) % 2 == 0 : syntax error: operand expected
    (error token is ") % 2 == 0 ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    # bash 4.3+\
    \ can do this:\n    # echo \"$1\" | xargs -n1 | sort -V | xargs -n1\n    #\n \
    \   # with 4.2, we can do this:\n    # echo \"$1\" | tr ' ' '\\n' | sort -V |\
    \ tr '\\n' ' '\n    #\n    # But, we'll go all the way back to 2.05, and do this:\n\
    \    array=($(echo \"$1\" | tr ' ' '\\n' | sort -V))\n    if [ $(( (${array[0]}\
    \ + ${array[-1]}) % 2 )) -eq 0 ]; then\n        for i in \"${array[@]}\"; do\n\
    \            echo -n \"\\\"$i\\\" \"\n        done\n    else\n        for ((i=${#array[@]}-1;\
    \ i>=0; i--)); do\n            echo -n \"\\\"${array[$i]}\\\" \"\n        done\n\
    \    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdnuhh9ui.sh: line 27: array: bad array subscript

    /tmp/tmpdnuhh9ui.sh: line 27: ( + ) % 2 : syntax error: operand expected (error
    token is ") % 2 ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo \"[]\"\n  else\n    declare -a input=(${1})\n    local length=${#input[@]}\n\
    \    local isOdd=false\n    if [ $((${input[0]} + ${input[-1]})) -eq $((${input[0]}\
    \ + ${input[-1]} / 2 * 2)) ]; then\n      isOdd=true\n    fi\n    local -a ans\n\
    \    if [ \"$isOdd\" = true ]; then\n      for ((i = 0; i < $length; i++)); do\n\
    \        ans[i]=${input[i]}\n      done\n    else\n      for ((i = 0; i < $length;\
    \ i++)); do\n        ans[$i]=${input[$(($length - 1 - $i))]}\n      done\n   \
    \ fi\n    local ansString=\"[\"\n    for ((i = 0; i < $length; i++)); do\n   \
    \   ansString=$ansString\"\\\"\"${ans[i]}\"\\\"\"\n      if [ $i -lt $(($length\
    \ - 1)) ]; then\n        ansString=$ansString\", \"\n      fi\n    done\n    ansString=$ansString\"\
    ]\"\n    echo $ansString\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=(${1})\n\
    \  local n=$((${#array[@]} - 1))\n  local sum=$((${array[0]} + ${array[${n}]}))\n\
    \  if ((sum % 2)); then\n    echo \"$(echo ${array[@]} | tr ' ' '\\n' | sort -n\
    \ | xargs)\"\n  else\n    echo \"$(echo ${array[@]} | tr ' ' '\\n' | sort -rn\
    \ | xargs)\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpqvdiw0au.sh: line 21: array: bad array subscript

    /tmp/tmpqvdiw0au.sh: line 21: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=${1}\n\
    \  if [[ ${array} == '' ]]; then\n    echo \"[]\"\n  elif [[ $(echo ${array} |\
    \ wc -w) == 1 ]]; then\n    echo \"[\\\"${array}\\\"]\"\n  else\n    local first_value=$(echo\
    \ ${array} | cut -d' ' -f1)\n    local last_value=$(echo ${array} | cut -d' '\
    \ -f$(echo ${array} | wc -w))\n    if [[ $((${first_value} + ${last_value}))%2\
    \ == 0 ]]; then\n      echo \"[\\\"${array}\\\"]\" | rev | sed -e 's/\\ /\\\"\
    , \\\"/g' -e 's/^/\\[/' -e 's/$/\\]/'\n    else\n      echo \"[\\\"${array}\\\"\
    ]\" | sed -e 's/\\ /\\\", \\\"/g' -e 's/^/\\[/' -e 's/$/\\]/'\n    fi\n  fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  echo \"sort_array()\"\
    \n  local -n array=$1\n  echo \"sort_array() local array=$array\"\n  for element\
    \ in \"${array[@]}\"; do\n    echo $element\n  done\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpworn4890.sh: line 20: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -n _array=$1\n\
    \    local length=${#_array[@]}\n    local is_even=$(($length % 2))\n    local\
    \ indexes=( $( seq 0 $((length - 1)) ) )\n    if [ $is_even -eq 0 ]; then\n  \
    \      indexes=( $( seq 0 $((length - 1)) | sort -r ) )\n    fi\n    local new_array=()\n\
    \    for index in ${indexes[@]}; do\n        new_array+=(${_array[$index]})\n\
    \    done\n    echo -n \"[\"\n    for item in ${new_array[@]}; do\n        echo\
    \ -n \"\\\"$item\\\",\"\n    done\n    echo -n \"]\"\n}\n\ncandidate() {\n   \
    \ sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqp80blxd.sh: line 19: local: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=()\n\
    \  for x in $1; do\n    array+=(\"$x\")\n  done\n  if [[ $((array[0] + array[-1]))\
    \ % 2 -eq 0 ]]; then\n    echo $(for x in \"${array[@]}\"; do echo -n \"$x \"\
    ; done | sort -nr)\n  else\n    echo $(for x in \"${array[@]}\"; do echo -n \"\
    $x \"; done | sort -n)\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdnvvhnxf.sh: line 23: conditional binary operator expected

    /tmp/tmpdnvvhnxf.sh: line 23: syntax error near `%''

    /tmp/tmpdnvvhnxf.sh: line 23: `  if [[ $((array[0] + array[-1])) % 2 -eq 0 ]];
    then''

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a arr\n\
    \  local i=0\n  for v in ${@:1}; do\n    arr[$i]=$v\n    i=$(( i + 1 ))\n  done\n\
    \  local even odd\n  if [[ $(( ${arr[0]} + ${arr[-1]} )) -eq 0 ]]; then\n    even=0\n\
    \    odd=1\n  else\n    even=1\n    odd=0\n  fi\n  for (( i = 0; i < ${#arr[@]};\
    \ i++ )); do\n    for (( j = i; j < ${#arr[@]}; j++ )); do\n      if [[ $(( ${arr[$i]}\
    \ % 2 )) -eq $even ]]; then\n        if [[ $(( ${arr[$j]} % 2 )) -eq $odd ]];\
    \ then\n          arr[$i]=${arr[$j]}\n          arr[$j]=${arr[$i]}\n        elif\
    \ [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n          arr[$i]=${arr[$j]}\n      \
    \    arr[$j]=${arr[$i]}\n        fi\n      elif [[ $(( ${arr[$i]} % 2 )) -eq $odd\
    \ ]]; then\n        if [[ $(( ${arr[$j]} % 2 )) -eq $even ]]; then\n         \
    \ arr[$i]=${arr[$j]}\n          arr[$j]=${arr[$i]}\n        elif [[ ${arr[$i]}\
    \ -lt ${arr[$j]} ]]; then\n          arr[$i]=${arr[$j]}\n          arr[$j]=${arr[$i]}\n\
    \        fi\n      fi\n    done\n  done\n  echo -n '[ '\n  for (( i = 0; i < ${#arr[@]};\
    \ i++ )); do\n    if [[ $i -eq 0 ]]; then\n      echo -n '\"'${arr[$i]}'\"'\n\
    \    else\n      echo -n ', \"'${arr[$i]}'\"'\n    fi\n  done\n  echo ' ]'\n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6xdtmtef.sh: line 26: arr: bad array subscript

    /tmp/tmp6xdtmtef.sh: line 26: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  [[ $# -eq 0 ]]\
    \ && { echo \"[]\"; return; }\n  _sort_array() {\n    local _a=($1) _h _t\n  \
    \  [[ ${#_a[@]} -eq 1 ]] && echo \"[\\\"${_a[0]}\\\"]\" && return\n    [[ $((\
    \ ${_a[0]} + ${_a[-1]} )) -eq 1 ]] &&\n      _h=${_a[0]} && _t=${_a[-1]} ||\n\
    \      _h=${_a[-1]} && _t=${_a[0]}\n    _sort_array \"${_a[@]:1:$((${#_a[@]} -\
    \ 2))}\" | awk -v h=\"$_h\" -v t=\"$_t\" '{\n      split($0, a, /[][,]/); delete\
    \ a[0]; delete a[length(a)]; b[1] = h; b[2] = t;\n      if ($0 ~ /]$/) {\n   \
    \     for (i = 1; i <= length(a); i++) {\n          if (i % 2 == 1) {\n      \
    \      b[i + 2] = a[i];\n          } else {\n            b[length(b) + 1] = a[i];\n\
    \          }\n        }\n      } else {\n        for (i = 1; i <= length(a); i++)\
    \ {\n          if (i % 2 == 1) {\n            b[length(b) + 1] = a[i];\n     \
    \     } else {\n            b[i + 2] = a[i];\n          }\n        }\n      }\n\
    \      printf(\"[\");\n      for (i = 1; i <= length(b); i++) {\n        printf(\"\
    \\\"%s\\\"\", b[i]);\n        if (i < length(b)) {\n          printf(\",\");\n\
    \        }\n      }\n      printf(\"]\\n\");\n    }'\n  }\n  _sort_array \"$1\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdzy2cbyt.sh: line 23: _a: bad array subscript

    /tmp/tmpdzy2cbyt.sh: line 23: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a array=($1)\n\
    \  local -a sorted_array=()\n  local -i array_length=${#array[@]}\n  local -i\
    \ first_value=${array[0]}\n  local -i last_value=${array[$((array_length - 1))]}\n\
    \  local -i sum_first_last=$((first_value + last_value))\n  if ((sum_first_last\
    \ % 2 == 0)); then\n    IFS=$'\\n' sorted_array=($(sort <<<\"${array[*]}\"))\n\
    \  else\n    IFS=$'\\n' sorted_array=($(sort -r <<<\"${array[*]}\"))\n  fi\n \
    \ echo \"[$(printf '\"%s\" ' \"${sorted_array[@]}\")]\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj06o7lv1.sh: line 23: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  echo ${1} | tr\
    \ ' ' '\\n' | sort | {\n    if [ \"$(($(cut -d ' ' -f 1 <<< ${1}) + $(cut -d '\
    \ ' -f ${#1} <<< ${1})))\" -eq \"1\" ]; then\n      tac\n    else\n      cat\n\
    \    fi\n  } | awk '{print \"\\\"\"$1\"\\\"\"}' | tr '\\n' ',' | sed 's/,$//'\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    /tmp/tmpyncaj65b.sh: line 20: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    declare -a\
    \ arr\n    arr=(${1// / })\n    echo \"Before sorting\"\n    echo ${arr[@]}\n\
    \    echo \"After sorting\"\n    declare -i n\n    n=${#arr[@]}\n    declare -i\
    \ p\n    declare -i q\n    declare -i r\n    declare -i temp\n    for ((p=0; p<n-1;\
    \ p++))\n    do\n        for ((q=0; q<n-p-1; q++))\n        do\n            if\
    \ [[ $((arr[q] + arr[n-1-q]))%2 == 0 ]]\n            then\n                if\
    \ [[ ${arr[q]} -lt ${arr[q+1]} ]]\n                then\n                    temp=${arr[q]}\n\
    \                    arr[q]=${arr[q+1]}\n                    arr[q+1]=$temp\n\
    \                fi\n            else\n                if [[ ${arr[q]} -gt ${arr[q+1]}\
    \ ]]\n                then\n                    temp=${arr[q]}\n             \
    \       arr[q]=${arr[q+1]}\n                    arr[q+1]=$temp\n             \
    \   fi\n            fi\n        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  array=()\n  for\
    \ i in $1; do\n    array+=(\"\\\"$i\\\"\")\n  done\n  is_odd=0\n  if [ $(( (${array[0]}\
    \ + ${array[-1]}) % 2 )) -eq 1 ]; then\n    is_odd=1\n  fi\n  if [ $is_odd -eq\
    \ 1 ]; then\n    echo $'['${array[*]}']'\n  else\n    echo $'['${array[*]/${array[0]}/${array[-1]}}']'\n\
    \  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1i1xt3dk.sh: line 24: array: bad array subscript

    /tmp/tmp1i1xt3dk.sh: line 24: ( + ) % 2 : syntax error: operand expected (error
    token is ") % 2 ")

    /tmp/tmp1i1xt3dk.sh: line 24: ("5" + "5") % 2 : syntax error: operand expected
    (error token is ""5" + "5") % 2 ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  [ -z \"$1\" ]\
    \ && echo \"[]\" && return\n  declare -a array\n  i=0\n  for integer in $1; do\n\
    \    array[$i]=$integer\n    i=$(($i+1))\n  done\n  sum=$((${array[0]}+${array[-1]}))\n\
    \  if [ $((sum%2)) -eq 0 ]; then\n    reverse_array \"${array[@]}\"\n  else\n\
    \    sort_array_ascending \"${array[@]}\"\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local sum=$(($1\
    \ + ${@: -1}))\n  if (( sum % 2 )); then\n    echo \"$(sort -n <<<\"$*\")\"\n\
    \  else\n    echo \"$(sort -n -r <<<\"$*\")\"\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6hozqnwf.sh: line 19: + : syntax error: operand expected (error
    token is "+ ")

    /tmp/tmp6hozqnwf.sh: line 19: 2 4 3 0 1 5 + 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5 + 2 4 3 0 1 5")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a arr=($1)\n\
    \    local first_index=${arr[0]}\n    local last_index=${arr[-1]}\n    local sum=$((first_index\
    \ + last_index))\n    if [[ \"$sum\" -eq $((sum / 2 * 2)) ]]; then\n        #\
    \ even number\n        echo \"$(printf '\"%s\" ' \"${arr[@]}\" | rev)\"\n    else\n\
    \        # odd number\n        echo \"$(printf '\"%s\" ' \"${arr[@]}\")\"\n  \
    \  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2jv41cu1.sh: line 21: arr: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array_size\n\
    \  local array_sum\n  local array_value\n  local descending_array\n  local index\n\
    \  local index_size\n  local sorted_array\n  local sorted_array_size\n  local\
    \ sorted_array_sum\n  local sorted_array_value\n  local sum_odd\n  local value_first\n\
    \  local value_last\n  local value_next\n  local value_previous\n  local value_size\n\
    \  local value_size_half\n  local value_size_half_r\n\n  array_size=$(echo \"\
    $1\" | wc -w)\n  if [ \"$array_size\" -eq 0 ]; then\n    echo \"[]\"\n    return\
    \ 0\n  fi\n  if [ \"$array_size\" -eq 1 ]; then\n    echo \"[\\\"${1// /\\\"}\\\
    \"]\"\n    return 0\n  fi\n  array_sum=0\n  descending_array=()\n  for index in\
    \ $1; do\n    array_value=\"$index\"\n    array_sum=$((array_sum + array_value))\n\
    \    index_size=${#index}\n    index=$(printf \"%${index_size}d\" $index)\n  \
    \  descending_array+=(\"$index\")\n  done\n  IFS=$'\\n' descending_array=($(sort\
    \ -r <<<\"${descending_array[*]}\"))\n  unset IFS\n  sorted_array=()\n  sum_odd=$((array_sum\
    \ % 2))\n  if [ \"$sum_odd\" -eq 0 ]; then\n    for index in \"${descending_array[@]}\"\
    ; do\n      sorted_array+=(\"$index\")\n    done\n  else\n    value_size=${#descending_array[0]}\n\
    \    value_size_half=$((value_size / 2))\n    value_size_half_r=$((value_size_half\
    \ + 1))\n    for (( index = 0; index < array_size; index++ )); do\n      value_first=${descending_array[$index]:0:$value_size_half}\n\
    \      value_last=${descending_array[$index]:$value_size_half_r}\n      value_previous=$(printf\
    \ \"%0\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk5rw79hs.sh: line 86: unexpected EOF while looking for matching
    `"''

    /tmp/tmpk5rw79hs.sh: line 90: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a array=($1)\n\
    \n    for ((i=0; i<${#array[@]}; i++)); do\n        for ((j=0; j<${#array[@]}-1;\
    \ j++)); do\n            local first=${array[$j]}\n            local next=${array[$j+1]}\n\
    \            if [[ $(((${array[$j]} + ${array[-1-$j]}) % 2)) -eq 0 ]]; then\n\
    \                if [[ $first -gt $next ]]; then\n                    array[$j]=$next\n\
    \                    array[$j+1]=$first\n                fi\n            else\n\
    \                if [[ $first -lt $next ]]; then\n                    array[$j]=$next\n\
    \                    array[$j+1]=$first\n                fi\n            fi\n\
    \        done\n    done\n\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # your code here\n\
    \  a=( $1 )\n  result=\"\"\n  for (( i=0; i<${#a[@]}; i++ )); do\n    for (( j=i+1;\
    \ j<${#a[@]}; j++ )); do\n      if [[ $(( ${a[i]}+${a[-1-i]} ))%2 -eq 0 ]]; then\n\
    \        if [[ ${a[i]} -gt ${a[j]} ]]; then\n          tmp=${a[i]}\n         \
    \ a[i]=${a[j]}\n          a[j]=$tmp\n        fi\n      else\n        if [[ ${a[i]}\
    \ -lt ${a[j]} ]]; then\n          tmp=${a[i]}\n          a[i]=${a[j]}\n      \
    \    a[j]=$tmp\n        fi\n      fi\n    done\n    result=\"$result\"'\"'${a[i]}'\"\
    '\" \"\n  done\n  echo \"[\"${result%?}\"]\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ \"$#\"\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  elif [[ \"$#\" -eq 1 ]]; then\n    echo \"\
    [\\\"$1\\\"]\"\n  else\n    ARRAY=($@)\n    local first_element=${ARRAY[0]}\n\
    \    local last_element=${ARRAY[-1]}\n    local sum=$((first_element + last_element))\n\
    \    local array_length=${#ARRAY[@]}\n    local i\n    if [[ $(($sum % 2)) -eq\
    \ 0 ]]; then\n      local j=$((array_length - 1))\n      for ((i = 0; i < $array_length;\
    \ i++)); do\n        echo -n \"[\\\"${ARRAY[$j]}\\\"\"\n        [[ \"$i\" -ne\
    \ \"$((array_length - 1))\" ]] && echo -n \", \"\n        let j--\n      done\n\
    \      echo -n \"]\"\n    else\n      for ((i = 0; i < $array_length; i++)); do\n\
    \        echo -n \"[\\\"${ARRAY[$i]}\\\"\"\n        [[ \"$i\" -ne \"$((array_length\
    \ - 1))\" ]] && echo -n \", \"\n      done\n      echo -n \"]\"\n    fi\n  fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local ARRAY_PARAMETER=${1}\n\
    \n    local NUMBERS=(${ARRAY_PARAMETER})\n    local LENGTH=${#NUMBERS[@]}\n  \
    \  local SUM=$(( ${NUMBERS[0]} + ${NUMBERS[LENGTH-1]} ))\n\n    local OUTPUT=()\n\
    \    local N\n\n    if (( 0 == $(( SUM % 2 )) )); then\n        local INDEX=$((\
    \ LENGTH - 1 ))\n        while (( INDEX >= 0 )); do\n            N=\"${NUMBERS[INDEX]}\"\
    \n            OUTPUT+=(\"${N}\")\n            (( INDEX-- ))\n        done\n  \
    \  else\n        for N in \"${NUMBERS[@]}\"; do\n            OUTPUT+=(\"${N}\"\
    )\n        done\n    fi\n\n    IFS=$'\\n'\n    echo \"${OUTPUT[*]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpguk3_cyo.sh: line 23: NUMBERS: bad array subscript

    /tmp/tmpguk3_cyo.sh: line 23: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    declare -a\
    \ array\n    OIFS=$IFS; IFS=' '; array=($1); IFS=$OIFS;\n    declare -i length=${#array[@]}\n\
    \n    if ((length == 0))\n    then\n        echo -n []\n    elif ((length == 1))\n\
    \    then\n        echo -n \"[\\\"${array[0]}\\\"]\"\n    else\n        declare\
    \ -i i; declare -i last=$((length - 1))\n        declare -i sum=$((array[0] +\
    \ array[last]))\n        declare -i odd=$((sum % 2))\n\n        if ((odd == 0))\n\
    \        then\n            declare -i i; declare -i j; declare -i temp\n     \
    \       for ((i = 0; i < last; i++))\n            do\n                for ((j\
    \ = 0; j < last - i; j++))\n                do\n                    if ((array[j]\
    \ < array[j + 1]))\n                    then\n                        temp=${array[j]}\n\
    \                        array[j]=${array[j + 1]}\n                        array[j\
    \ + 1]=$temp\n                    fi\n                done\n            done\n\
    \        else\n            declare -i i; declare -i j; declare -i temp\n     \
    \       for ((i = 0; i < last; i++))\n            do\n                for ((j\
    \ = 0; j < last - i; j++))\n                do\n                    if ((array[j]\
    \ > array[j + 1]))\n                    then\n                        temp=${array[j]}\n\
    \                        array[j]=${array[j + 1]}\n                        array[j\
    \ + 1]=$temp\n                    fi\n                done\n            done\n\
    \        fi\n\n        declare -i i; declare -i j; declare -i temp\n        echo\
    \ -n \"[\"\n        for ((i = 0; i < length; i++))\n        do\n            echo\
    \ -n \"\\\"${array[i]}\\\"\"\n            if ((i < last))\n            then\n\
    \                echo -n \", \"\n            fi\n        done\n        echo -n\
    \ \"]\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a local_array=()\n\
    \  local i=0 sum_array=0\n  for n in $1; do\n    local_array[$i]=$n\n    (( sum_array\
    \ += n ))\n    (( i++ ))\n  done\n  if (( $sum_array % 2 )); then\n    IFS=$'\\\
    n' sorted=($(sort <<<\"${local_array[*]}\"))\n  else\n    IFS=$'\\n' sorted=($(sort\
    \ <<<\"${local_array[*]}\" | tac))\n  fi\n  echo \"${sorted[*]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # your solution\
    \ here\n\n  # get the first and last index\n  first=${1:0:1}\n  last=$( echo \"\
    $1\" | sed 's/ .*//g' )\n\n  # sort the array\n  # the comparison will return\
    \ 0 (true) if the sum is odd\n  # the comparison will return 1 (false) if the\
    \ sum is even\n  # even numbers will be sorted descending\n  # odd numbers will\
    \ be sorted ascending\n  # the sort command is used with the -n option to sort\
    \ by number\n  # the sort command is used with the -r option to reverse the sorting\
    \ order\n  sorted=$(echo \"$1\" | sed 's/ /\\n/g' | sort -r -n)\n\n  # print result\n\
    \  printf \"%s\" \"['\"\n  printf \"%s\" \"$sorted\" | sed -e 's/\\([^ ]*\\)/\"\
    \\1\"/g'\n  printf \"%s\" \"']\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if [[ -z \"\
    $1\" ]]; then\n        echo []\n    else\n        declare -a array\n        array=($(echo\
    \ \"$@\"))\n        if (( (${array[0]} + ${array[${#array[@]} - 1]} ) % 2 != 0\
    \ )); then\n            echo ${array[@]} | tr ' ' '\\n' | sort -n | tr '\\n' '\
    \ ' | sed -e 's/^ *//' -e 's/ *$//' | sed -e 's/ /\\', \\'/g' | sed -e 's/^/\\\
    [/' -e 's/$/\\]/'\n        else\n            echo ${array[@]} | tr ' ' '\\n' |\
    \ sort -nr | tr '\\n' ' ' | sed -e 's/^ *//' -e 's/ *$//' | sed -e 's/ /\\', \\\
    '/g' | sed -e 's/^/\\[/' -e 's/$/\\]/'\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6_mk7_aj.sh: line 27: unexpected EOF while looking for matching
    `''''

    /tmp/tmp6_mk7_aj.sh: line 48: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local input=(\"\
    $@\")\n    local arr=()\n    local ret=()\n    for i in \"${input[@]}\"; do\n\
    \        if [[ $i =~ ^[[:digit:]]+$ ]]; then\n            arr+=($i)\n        fi\n\
    \    done\n    if (( (${arr[0]} + ${arr[-1]}) % 2 == 0 )); then\n        ret=($(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -r))\n    else\n        ret=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort))\n    fi\n    echo \"${ret[@]}\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpffwf3nxw.sh: line 27: arr: bad array subscript

    /tmp/tmpffwf3nxw.sh: line 27: ((: ( + ) % 2 == 0 : syntax error: operand expected
    (error token is ") % 2 == 0 ")

    /tmp/tmpffwf3nxw.sh: line 27: arr: bad array subscript

    /tmp/tmpffwf3nxw.sh: line 27: ((: ( + ) % 2 == 0 : syntax error: operand expected
    (error token is ") % 2 == 0 ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # Your answer\
    \ here\n  if [[ \"$1\" == \"\" ]]; then\n    echo \"[]\"\n  else\n    # convert\
    \ from space-separated to comma-separated\n    # cut -d \" \" -f $i to get each\
    \ element\n    IFS=\" \" read -r -a array <<< \"$1\"\n    comma=\"\"\n    sorted=\"\
    \"\n    for i in ${!array[@]}; do\n      if [[ \"$i\" -ne \"${#array[@]}\" ]];\
    \ then\n        comma=\"$comma,\"\n      fi\n      sorted=\"$sorted\\\"${array[$i]}\\\
    \"$comma\"\n    done\n    if [[ $((array[0]+array[-1]))%2 -eq 0 ]]; then\n   \
    \   # even\n      echo \"[$sorted]\"\n    else\n      # odd\n      reverse=\"\"\
    \n      for ((i=${#array[@]}-1; i>=0; i--)); do\n        reverse=\"$reverse\\\"\
    ${array[$i]}\\\"$comma\"\n      done\n      echo \"[$reverse]\"\n    fi\n  fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ $# -eq 0\
    \ ]; then\n    echo \"[]\"\n  elif [ $# -eq 1 ]; then\n    echo \"[\\\"$1\\\"\
    ]\"\n  else\n    local arr=(\"$@\")\n    local len=${#arr[@]}\n    local first=${arr[0]}\n\
    \    local last=${arr[-1]}\n    local sum=$(( first + last ))\n    if [ $(( sum\
    \ % 2 )) -eq 0 ]; then\n      sort_array_desc \"${arr[@]}\"\n    else\n      sort_array_asc\
    \ \"${arr[@]}\"\n    fi\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local input=$1\n\
    \  local array=()\n  IFS=\" \" read -ra arr <<< $input\n  for i in \"${arr[@]}\"\
    ; do\n    array+=(\"$i\")\n  done\n  if [[ \"${array[0]}\" -eq \"${array[-1]}\"\
    \ ]]; then\n    echo ${array[@]}\n  elif [[ \"$((${array[0]} + ${array[-1]}))\"\
    \ -eq \"1\" ]]; then\n    echo ${array[@]} | tr \" \" \"\\n\" | sort -r\n  else\n\
    \    echo ${array[@]} | tr \" \" \"\\n\" | sort -n\n  fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpufxpmid7.sh: line 25: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo '[]'\n    return 0\n  fi\n  local array=(\"$@\")\n  local\
    \ -a result=()\n  local index=0\n  for item in \"${array[@]}\"; do\n    result[$index]=\"\
    \\\"$item\\\"\"\n    (( index++ ))\n  done\n  if (( (${result[0]} + ${result[-1]})\
    \ % 2 == 0 )); then\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -rn | tr\
    \ '\\n' ' '\n  else\n    echo \"${result[@]}\" | tr ' ' '\\n' | sort -n | tr '\\\
    n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a array=(\"\
    $@\")\n  local sum=$((array[0] + array[-1]))\n  if (( sum % 2 == 0 )); then\n\
    \    printf \"\\\"%s\\\" \" \"${array[@]}\" | sort -nr\n  else\n    printf \"\\\
    \"%s\\\" \" \"${array[@]}\" | sort -n\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ $# -eq\
    \ 0 ]]; then\n    echo '[]'\n    return\n  fi\n  eval \"local array=($1)\"\n \
    \ if [[ $(( ${array[0]} + ${array[-1]} )) -eq 1 ]]; then\n    echo \"['\"$(for\
    \ i in \"${array[@]}\"; do echo -n '\"'$i'\" '; done | sed -E 's/ $//')\"']\"\n\
    \  else\n    echo \"['\"$(for i in \"${array[@]}\"; do echo -n '\"'$i'\" '; done\
    \ | sed -E 's/ $//' | rev)\"']\"\n  fi\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv56ra607.sh: line 24: array: bad array subscript

    /tmp/tmpv56ra607.sh: line 24: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=$1\n\
    \  if [ -z \"$array\" ]; then\n    echo '[]'\n    return\n  fi\n  if [ -z \"$(echo\
    \ \"$array\" | tr -d '[:digit:]')\" ]; then\n    local first_value=$(echo \"$array\"\
    \ | cut -d ' ' -f 1)\n    local last_value=$(echo \"$array\" | cut -d ' ' -f $(echo\
    \ \"$array\" | wc -w))\n    if [ $((first_value + last_value)) -eq 0 ]; then\n\
    \      echo \"[]\"\n      return\n    fi\n    if [ $((first_value + last_value))\
    \ -gt 0 ]; then\n      echo \"[\\\"$(echo \"$array\" | tr ' ' '\\n' | sort -n\
    \ | tr '\\n' '\" \"')\\\"]\"\n      return\n    fi\n    if [ $((first_value +\
    \ last_value)) -lt 0 ]; then\n      echo \"[\\\"$(echo \"$array\" | tr ' ' '\\\
    n' | sort -rn | tr '\\n' '\" \"')\\\"]\"\n      return\n    fi\n  fi\n  echo '[]'\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a a=()\n\
    \  read -ra a <<<\"$1\"\n  declare -a b=()\n  declare -a c=()\n  declare sum=$((a[0]+a[-1]))\n\
    \  if [[ $((sum % 2)) -eq 0 ]]; then\n    while [[ ${#a[@]} -gt 0 ]]; do\n   \
    \   if [[ ${#a[@]} -eq 1 ]]; then\n        c+=(\"${a[0]}\")\n        break\n \
    \     fi\n      ((b[0] == b[1])) && {\n        c+=(\"${a[-1]}\")\n        c+=(\"\
    ${a[0]}\")\n        a=(\"${a[@]:1:$((${#a[@]}-2))}\")\n      } || {\n        ((b[0]\
    \ < b[1])) && {\n          c+=(\"${a[-1]}\")\n          a=(\"${a[@]:0:$((${#a[@]}-1))}\"\
    )\n        } || {\n          c+=(\"${a[0]}\")\n          a=(\"${a[@]:1}\")\n \
    \       }\n      }\n      b=(\"${a[@]:0:2}\")\n    done\n  else\n    while [[\
    \ ${#a[@]} -gt 0 ]]; do\n      if [[ ${#a[@]} -eq 1 ]]; then\n        c+=(\"${a[0]}\"\
    )\n        break\n      fi\n      ((b[0] == b[1])) && {\n        c+=(\"${a[0]}\"\
    )\n        c+=(\"${a[-1]}\")\n        a=(\"${a[@]:1:$((${#a[@]}-2))}\")\n    \
    \  } || {\n        ((b[0] < b[1])) && {\n          c+=(\"${a[0]}\")\n        \
    \  a=(\"${a[@]:1}\")\n        } || {\n          c+=(\"${a[-1]}\")\n          a=(\"\
    ${a[@]:0:$((${#a[@]}-1))}\")\n        }\n      }\n      b=(\"${a[@]:0\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppxov5sxe.sh: line 79: unexpected EOF while looking for matching
    `"''

    /tmp/tmppxov5sxe.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local nums=$1\n\
    \  [[ -z \"$nums\" ]] && echo '[]' && return\n\n  local is_odd=$(echo \"(${nums:0:1}\
    \ + ${nums: -1:1}) % 2\" | bc)\n  if [[ $is_odd == 1 ]]; then\n    echo $nums\
    \ | tr \" \" \"\\n\" | sort -g | awk '{print \"\\\"\"$1\"\\\"\"}' | paste -sd\
    \ \"[,]\"\n  else\n    echo $nums | tr \" \" \"\\n\" | sort -gr | awk '{print\
    \ \"\\\"\"$1\"\\\"\"}' | paste -sd \"[,]\"\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arg\n \
    \ local -i sum=0 odd=0 even=0\n  for arg in $1; do\n    (( sum = arg + sum ))\n\
    \  done\n  (( odd = sum % 2 ))\n  (( even = ! odd ))\n  local -a sorted_array\n\
    \  IFS=' ' read -r -a sorted_array <<< \"$1\"\n  if [[ $odd -gt 0 ]]; then\n \
    \   sort -n <(printf \"%s\\n\" \"${sorted_array[@]}\")\n  else\n    sort -rn <(printf\
    \ \"%s\\n\" \"${sorted_array[@]}\")\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local str_array=$(echo\
    \ \"$1\" | awk '{print $0}')\n  local arr_length=$(echo \"$str_array\" | wc -w)\n\
    \  local index_sum=$(($(echo \"$str_array\" | awk '{print $1}') + $(echo \"$str_array\"\
    \ | awk '{print $NF}')))\n  local tmp_array=$(echo \"$str_array\" | awk '{for(i=1;i<=NF;i++)\
    \ print $i}' | sort -n)\n  if [ $((index_sum%2)) -eq 0 ]; then\n    local result_array=$(echo\
    \ \"$tmp_array\" | awk '{for(i=NF;i>=1;i--) print $i}')\n  else\n    local result_array=$(echo\
    \ \"$tmp_array\")\n  fi\n  result_array=$(echo \"$result_array\" | awk '{for(i=1;i<=NF;i++)\
    \ print \"\\\"\"$i\"\\\"\"}')\n  echo \"$result_array\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9x6hsnuf.sh: line 21: + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=()\n\
    \  local i=0\n  local n=$#\n  local len=$((n/2))\n  local index=$((len-1))\n \
    \ local char\n  local value\n  local left\n  local right\n  local output\n  while\
    \ read -r char; do\n    value=$(printf '%d' \"'$char\")\n    array[$i]=$value\n\
    \    i=$((i+1))\n  done <<< \"$1\"\n  for ((i=0; i<len; i++)); do\n    left=${array[$i]}\n\
    \    right=${array[$((n-i-1))]}\n    if (( (left+right) % 2 == 0 )); then\n  \
    \    array[$i]=$right\n      array[$((n-i-1))]=$left\n    fi\n  done\n  for ((i=0;\
    \ i<n; i++)); do\n    value=${array[$i]}\n    char=$(printf \"'\\\\x%x'\" $value)\n\
    \    char=$(echo -n \"$char\")\n    output[$i]=$char\n  done\n  output=$(printf\
    \ \"%s \" \"${output[@]}\")\n  echo \"$output\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpabockpju.sh: line 44: printf: missing hex digit for \x

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a list=(\
    \ $1 )\n  if [ \"$((${list[0]} + ${list[-1]}))\" -eq 0 ]; then\n    echo \"[$(echo\
    \ ${list[@]} | tr ' ' ',')]\"\n  else\n    echo \"[$(echo ${list[@]} | tr ' '\
    \ ',' | sort -r)]\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe74yup_b.sh: line 20: list: bad array subscript

    /tmp/tmpe74yup_b.sh: line 20: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a ary\n\
    \    local i=0\n    local last_index\n    ary=($1)\n    last_index=$((${#ary[@]}\
    \ - 1))\n    if [[ $((${ary[0]} + ${ary[$last_index]}))%2 -eq 0 ]]; then\n   \
    \     for ((i=0; i<$last_index; i++)); do\n            printf '%s\\n' \"${ary[i]}\"\
    \n        done | sort -n\n        printf '%s\\n' \"${ary[$last_index]}\"\n   \
    \ else\n        for ((i=0; i<$last_index; i++)); do\n            printf '%s\\\
    n' \"${ary[i]}\"\n        done | sort -nr\n        printf '%s\\n' \"${ary[$last_index]}\"\
    \n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcz8enabf.sh: line 24: ary: bad array subscript

    /tmp/tmpcz8enabf.sh: line 24: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -A array\n\
    \  array=($1)\n  if [ $(( ${array[0]} + ${array[-1]} )) -lt 0 ]; then\n    echo\
    \ \"[]\"\n  elif [ $(( ${array[0]} + ${array[-1]} )) -eq 0 ]; then\n    echo \"\
    [\\\"${array[0]}\\\"]\"\n  elif [ $(( ${array[0]} + ${array[-1]} )) -gt 0 ]; then\n\
    \    if [ $(( ${array[0]} + ${array[-1]} )) -eq 1 ]; then\n      echo '[\"'$(echo\
    \ ${array[@]} | xargs -n1 | sort -n -r | xargs | sed 's/ /\"\", \"/g')'\"]'\n\
    \    else\n      echo '[\"'$(echo ${array[@]} | xargs -n1 | sort -n | xargs |\
    \ sed 's/ /\"\", \"/g')'\"]'\n    fi\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3f1anj5w.sh: line 20: array: $1: must use subscript when assigning
    associative array

    /tmp/tmp3f1anj5w.sh: line 21: +  : syntax error: operand expected (error token
    is "+  ")

    /tmp/tmp3f1anj5w.sh: line 20: array: $1: must use subscript when assigning associative
    array

    /tmp/tmp3f1anj5w.sh: line 21: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local tmp_list=(\"\
    $@\")\n  local list_len=${#tmp_list[@]}\n  local last_idx=$((list_len - 1))\n\
    \  local sum_idx=$((tmp_list[0] + tmp_list[last_idx]))\n  local idx=0\n  declare\
    \ -a sorted_array\n  if ((sum_idx % 2 == 0)); then\n    for idx in \"${!tmp_list[@]}\"\
    ; do\n      sorted_array[$idx]=${tmp_list[$last_idx - $idx]}\n    done\n  else\n\
    \    for idx in \"${!tmp_list[@]}\"; do\n      sorted_array[$idx]=${tmp_list[$idx]}\n\
    \    done\n  fi\n  echo \"${sorted_array[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp47uem5z8.sh: line 22: 2 4 3 0 1 5: syntax error in expression (error
    token is "4 3 0 1 5")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local result=()\n\
    \  for n in $1; do\n    result+=(\"\\\"$n\\\"\")\n  done\n  if [ $(( ${result[0]}\
    \ + ${result[-1]} )) -eq 0 ]; then\n    # even\n    echo $(echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -nr)\n  else\n    # odd\n    echo $(echo \"${result[@]}\"\
    \ | tr ' ' '\\n' | sort -n)\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpct1jrni0.sh: line 23: result: bad array subscript

    /tmp/tmpct1jrni0.sh: line 23: +  : syntax error: operand expected (error token
    is "+  ")

    /tmp/tmpct1jrni0.sh: line 23: "5" + "5" : syntax error: operand expected (error
    token is ""5" + "5" ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    function sum_first_last_elements()\
    \ {\n        local list=$1\n\n        local first_element=${list[0]}\n       \
    \ local last_element=${list[-1]}\n\n        local sum=$((first_element + last_element))\n\
    \n        echo $sum\n    }\n\n    function reverse_array() {\n        local list=$1\n\
    \n        local reverse_list=()\n        for element in \"${list[@]}\"; do\n \
    \           reverse_list=($element \"${reverse_list[@]}\")\n        done\n\n \
    \       echo \"${reverse_list[@]}\"\n    }\n\n    function sort_array() {\n  \
    \      local list=$1\n\n        local sum=$(sum_first_last_elements \"${list[@]}\"\
    )\n        if [[ $((sum % 2)) == 0 ]]; then\n            local reverse_list=$(reverse_array\
    \ \"${list[@]}\")\n            echo \"${reverse_list[@]}\"\n        else\n   \
    \         echo \"${list[@]}\"\n        fi\n    }\n\n    local list=()\n    for\
    \ element in $1; do\n        list+=($element)\n    done\n\n    local sorted_list=$(sort_array\
    \ \"${list[@]}\")\n    echo \"${sorted_list[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp15t_982i.sh: line 23: list: bad array subscript

    /tmp/tmp15t_982i.sh: line 23: list: bad array subscript

    /tmp/tmp15t_982i.sh: line 23: list: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a given=($(echo\
    \ \"$1\" | sed 's/[^[:digit:]]//g'))\n  local -i sum_indexes=$((${given[0]} +\
    \ ${given[-1]}))\n  if [[ $(($sum_indexes % 2)) -eq 0 ]]; then\n    echo -e \"\
    $(echo \"${given[@]}\" | tr ' ' '\\n' | sort -rn | tr '\\n' ' ')\"\n  else\n \
    \   echo -e \"$(echo \"${given[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\"\
    \n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpirnjnexb.sh: line 20: given: bad array subscript

    /tmp/tmpirnjnexb.sh: line 20: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  s=( $1 )\n  odd=(\
    \ $(for i in \"${s[@]}\"; do echo $i; done | sort) )\n  even=( $(for i in \"${s[@]}\"\
    ; do echo $i; done | sort -r) )\n  if (( ${#s[@]} > 1 )); then\n    if (( (${s[0]}\
    \ + ${s[-1]}) % 2 == 0 )); then\n      echo -e \"[$(printf '\"%s\", ' \"${even[@]}\"\
    )]\"\n    else\n      echo -e \"[$(printf '\"%s\", ' \"${odd[@]}\")]\"\n    fi\n\
    \  else\n    echo \"[\\\"${s[0]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ \"$#\"\
    \ -eq 0 ]]; then\n    echo \"[]\"\n  else\n    local result\n    if [[ \"$((${1%%\
    \ *} + ${1##* }))\" -eq 0 ]]; then\n      result=$(for item in $1; do echo -n\
    \ \\\"$item\\\"\" \"; done)\n    else\n      result=$(for item in $1; do echo\
    \ -n \\\"$item\\\"\" \"; done | rev)\n    fi\n    echo \"[${result%% }]\"\n  fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgg3sknqm.sh: line 23: + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local values=($1)\n\
    \    local sort=\n    [[ $((${values[0]} + ${values[-1]})) % 2 -eq 0 ]] && sort=desc\
    \ || sort=asc\n    local sorted\n    if [[ ${sort} == \"asc\" ]]; then\n     \
    \   IFS=$'\\n' sorted=($(sort <<<\"${values[*]}\"))\n    else\n        IFS=$'\\\
    n' sorted=($(sort <<<\"${values[*]}\" | tac))\n    fi\n    for value in \"${sorted[@]}\"\
    ; do\n        printf '\"%s\" ' \"${value}\"\n    done\n    echo\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsap_mfjd.sh: line 21: conditional binary operator expected

    /tmp/tmpsap_mfjd.sh: line 21: syntax error near `%''

    /tmp/tmpsap_mfjd.sh: line 21: `    [[ $((${values[0]} + ${values[-1]})) % 2 -eq
    0 ]] && sort=desc || sort=asc''

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=($1)\n\
    \  local temp\n  if [[ $(( ${arr[0]} + ${arr[-1]} )) -eq $(( ${arr[0]} + ${arr[-1]}\
    \ / 2 * 2 )) ]]; then\n    for i in \"${!arr[@]}\"; do\n      for (( j = i + 1;\
    \ j < ${#arr[@]}; j++ )); do\n        if [[ ${arr[i]} -lt ${arr[j]} ]]; then\n\
    \          temp=${arr[i]}\n          arr[i]=${arr[j]}\n          arr[j]=$temp\n\
    \        fi\n      done\n    done\n  else\n    for i in \"${!arr[@]}\"; do\n \
    \     for (( j = i + 1; j < ${#arr[@]}; j++ )); do\n        if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]; then\n          temp=${arr[i]}\n          arr[i]=${arr[j]}\n \
    \         arr[j]=$temp\n        fi\n      done\n    done\n  fi\n  echo -n \"[\"\
    \n  for i in \"${!arr[@]}\"; do\n    if [[ $i -eq 0 ]]; then\n      echo -n \"\
    \\\"${arr[i]}\\\"\"\n    else\n      echo -n \", \\\"${arr[i]}\\\"\"\n    fi\n\
    \  done\n  echo \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp00htwaex.sh: line 21: arr: bad array subscript

    /tmp/tmp00htwaex.sh: line 21: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    # code here\n\
    \    if [[ $# -eq 0 ]]; then\n        echo []\n    elif [[ $# -eq 1 ]]; then\n\
    \        echo [\\\"$1\\\"]\n    else\n        isEven=`expr $1 + ${!#} % 2`\n \
    \       if [[ $isEven -eq 0 ]]; then\n            # sort descending\n        \
    \    array=($@)\n            sorted=($(for i in \"${array[@]}\"; do echo \"$i\"\
    ; done | sort -rn))\n            echo '['\"${sorted[@]}\"']'\n        else\n \
    \           # sort ascending\n            array=($@)\n            sorted=($(for\
    \ i in \"${array[@]}\"; do echo \"$i\"; done | sort -n))\n            echo '['\"\
    ${sorted[@]}\"']'\n        fi\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a nn_array=($1)\n\
    \  echo \"nn_array => ${nn_array[@]}\"\n  declare -a nn_array_sort=()\n  declare\
    \ -a last_first=(${nn_array[0]} ${nn_array[${#nn_array[@]}-1]})\n  declare -i\
    \ sum_last_first=0\n  for elem in ${last_first[@]}; do\n    sum_last_first=$((sum_last_first+elem))\n\
    \  done\n  if [[ ${sum_last_first} -eq 0 ]]; then\n    echo \"[]\"\n  elif [[\
    \ $((sum_last_first%2)) -eq 0 ]]; then\n    for i in ${nn_array[@]}; do\n    \
    \  nn_array_sort+=($i)\n    done\n    echo \"$(echo ${nn_array_sort[@]} | tr '\
    \ ' '\\n' | sort -nr | tr '\\n' ' ')\"\n  else\n    for i in ${nn_array[@]}; do\n\
    \      nn_array_sort+=($i)\n    done\n    echo \"$(echo ${nn_array_sort[@]} |\
    \ tr ' ' '\\n' | sort -n | tr '\\n' ' ')\"\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpodza3ufl.sh: line 22: nn_array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=()\n\
    \  for ((i=0; i<\"${#1}\"; i++)); do\n    [[ \"${1:i:1}\" != \" \" ]] && array+=(\"\
    ${1:i:1}\")\n  done\n  local sum=0\n  for ((i=0; i<\"${#array[@]}\"; i++)); do\n\
    \    ((sum+=array[i]))\n  done\n  local tmp=0\n  if ((sum % 2 == 0)); then\n \
    \   for ((i=0; i<\"${#array[@]}\"; i++)); do\n      for ((j=i+1; j<\"${#array[@]}\"\
    ; j++)); do\n        ((array[i]<array[j])) && { tmp=array[i]; array[i]=array[j];\
    \ array[j]=tmp; }\n      done\n    done\n  else\n    for ((i=0; i<\"${#array[@]}\"\
    ; i++)); do\n      for ((j=i+1; j<\"${#array[@]}\"; j++)); do\n        ((array[i]>array[j]))\
    \ && { tmp=array[i]; array[i]=array[j]; array[j]=tmp; }\n      done\n    done\n\
    \  fi\n  echo -n \"[\"\n  for ((i=0; i<\"${#array[@]}\"; i++)); do\n    echo -n\
    \ '\"'${array[i]}'\"'\n    [[ \"$i\" != \"$((array[@]-1))\" ]] && echo -n \",\
    \ \"\n  done\n  echo \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a array\n\
    \  array=(${1// / })\n  local sorted\n  if (( $((${array[0]} + ${array[-1]}))\
    \ % 2 == 0 )); then\n    sorted=($(printf \"%s\\n\" \"${array[@]}\" | sort -nr))\n\
    \  else\n    sorted=($(printf \"%s\\n\" \"${array[@]}\" | sort -n))\n  fi\n  printf\
    \ \"%s\" \"[\"\n  for ((i=0; i<\"${#sorted[@]}\"; i++)); do\n    printf \"%s\"\
    \ '\"'\n    printf \"%s\" \"${sorted[$i]}\"\n    printf \"%s\" '\"'\n    if ((\
    \ i < \"${#sorted[@]}\" - 1 )); then\n      printf \"%s\" \", \"\n    fi\n  done\n\
    \  printf \"%s\" \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaejb3ce9.sh: line 22: array: bad array subscript

    /tmp/tmpaejb3ce9.sh: line 22: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local input_string=$1\n\
    \    local arr\n    arr=($input_string)\n    local first_index=${arr[0]}\n   \
    \ local last_index=${arr[${#arr[@]}-1]}\n    if [[ $(($first_index+$last_index))%2\
    \ -eq 0 ]]; then\n        echo $1 | tr ' ' '\\n' | sort -r | tr '\\n' ' '\n  \
    \  else\n        echo $1 | tr ' ' '\\n' | sort | tr '\\n' ' '\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcsl7ko92.sh: line 23: arr: bad array subscript

    /tmp/tmpcsl7ko92.sh: line 24: +: syntax error: operand expected (error token is
    "+")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if [[ -z \"\
    $1\" ]]; then\n        echo \"[]\"\n    elif [[ $(echo \"$1\" | wc -w) == 1 ]];\
    \ then\n        echo \"[\\\"$1\\\"]\"\n    else\n        even=($(echo \"$1\" |\
    \ tr \" \" \"\\n\" | sort -n))\n        odd=($(echo \"$1\" | tr \" \" \"\\n\"\
    \ | sort -nr))\n        if [[ $(( ${even[0]} + ${even[-1]} ))%2 -eq 0 ]]; then\n\
    \            echo \"[$(printf '\"%s\", ' \"${even[@]}\" | sed 's/,$//')]\"\n \
    \       else\n            echo \"[$(printf '\"%s\", ' \"${odd[@]}\" | sed 's/,$//')]\"\
    \n        fi\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    declare -a\
    \ array=($1)\n    n=${#array[@]}\n    first=${array[0]}\n    last=${array[-1]}\n\
    \    if [[ $((first+last))%2 == 0 ]]; then\n        for((i=n-1;i>=0;i--)); do\n\
    \            echo -n '\"'${array[i]}'\"'\n            if [[ $i != 0 ]]; then\n\
    \                echo -n ','\n            fi\n        done\n    else\n       \
    \ for((i=0;i<n;i++)); do\n            echo -n '\"'${array[i]}'\"'\n          \
    \  if [[ $i != $((n-1)) ]]; then\n                echo -n ','\n            fi\n\
    \        done\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp82z_vegd.sh: line 22: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a iarr\n\
    \  IFS=\" \" read -a iarr <<< \"$1\"\n  local -a res\n  local -i len=${#iarr[@]}\n\
    \  for ((i=0; i<len; i++)); do\n    res+=(\"$(echo \"${iarr[$i]}\" | tr -d '\\\
    n' | tr -d '\\r')\")\n  done\n  echo \"[$(\n    if (($((${res[0]} + ${res[-1]}))\
    \ % 2)); then\n      for ((i=0; i<len; i++)); do\n        if ((i)); then echo\
    \ -n \", \"; fi\n        echo -n \"'\\\"${res[$i]}\\\"'\"\n      done\n    else\n\
    \      for ((i=len-1; i>=0; i--)); do\n        if ((i<len-1)); then echo -n \"\
    , \"; fi\n        echo -n \"'\\\"${res[$i]}\\\"'\"\n      done\n    fi\n  )]\"\
    ;\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqoa0e4lo.sh: line 39: res: bad array subscript

    /tmp/tmpqoa0e4lo.sh: line 39: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a arr\n\
    \  arr=()\n  index=0\n  for i in $1; do\n    arr[$index]=$i\n    index=$((index+1))\n\
    \  done\n  echo ${arr[@]}\n  # echo $1\n  # echo $2\n  # echo $3\n  # echo $4\n\
    \  # echo $5\n  # echo $6\n  # echo $7\n  # echo $8\n  # echo $9\n  # echo $10\n\
    \  # echo $11\n  # echo $12\n  # echo $13\n  # echo $14\n  # echo $15\n  # echo\
    \ $16\n  # echo $17\n  # echo $18\n  # echo $19\n  # echo $20\n  # echo $21\n\
    \  # echo $22\n  # echo $23\n  # echo $24\n  # echo $25\n  # echo $26\n  # echo\
    \ $27\n  # echo $28\n  # echo $29\n  # echo $30\n  # echo $31\n  # echo $32\n\
    \  # echo $33\n  # echo $34\n  # echo $35\n  # echo $36\n  # echo $37\n  # echo\
    \ $38\n  # echo $39\n  # echo $40\n  # echo $41\n  # echo $42\n  # echo $43\n\
    \  # echo $44\n  # echo $45\n  # echo $46\n  # echo $47\n  # echo $48\n  # echo\
    \ $49\n  # echo $50\n  # echo $51\n  # echo $52\n  # echo $53\n  # echo $54\n\
    \  # echo $55\n  # echo $56\n  # echo $57\n  # echo $58\n  # echo $59\n  # echo\
    \ $60\n  # echo $61\n  # echo $62\n  # echo $63\n  # echo $64\n  # echo $65\n\
    \  # echo $66\n  # echo $67\n  # echo $68\n  # echo $69\n  # echo $70\n  # echo\
    \ $71\n  # echo $72\n  # echo $73\n  # echo $74\n  # echo $75\n  # echo $76\n\
    \ \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4\
    \ 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n\
    \    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate\
    \ \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a array=()\n\
    \    for s in $1; do\n        array+=( \"\\\"$s\\\"\" )\n    done\n    local sum=$((\
    \ ${array[0]} + ${array[-1]} ))\n    if [[ $(( sum % 2 )) -eq 0 ]]; then\n   \
    \     echo \"${array[@]}\" | sort -rn\n    else\n        echo \"${array[@]}\"\
    \ | sort -n\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp96rmcqzh.sh: line 23: array: bad array subscript

    /tmp/tmp96rmcqzh.sh: line 23: +  : syntax error: operand expected (error token
    is "+  ")

    /tmp/tmp96rmcqzh.sh: line 23: "5" + "5" : syntax error: operand expected (error
    token is ""5" + "5" ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local input=$1\n\
    \    local output=[]\n    local first=\"\"\n    local last=\"\"\n    local sum=0\n\
    \    if [[ $# -eq 0 ]]; then\n        echo \"[]\"\n    elif [[ $# -eq 1 ]]; then\n\
    \        echo \"[\\\"${input}\\\"]\"\n    else\n        first=$(echo $input |\
    \ cut -d \" \" -f 1)\n        last=$(echo $input | cut -d \" \" -f $#)\n     \
    \   sum=$(( $first + $last ))\n        if [[ $(( sum % 2 )) -eq 0 ]]; then\n \
    \           echo \"$input\" | sort -gr\n        else\n            echo \"$input\"\
    \ | sort -g\n        fi\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local data=($1)\n\
    \    local length=${#data[@]}\n    local head_index=0\n    local tail_index=$((length\
    \ - 1))\n    local sum=$((data[head_index] + data[tail_index]))\n    local is_odd=$((sum\
    \ % 2))\n    local new_array=()\n    local index\n    for index in $(seq $head_index\
    \ $tail_index); do\n        if [[ $is_odd -eq 0 ]]; then\n            new_array+=(\"\
    ${data[$tail_index]}\")\n            ((tail_index--))\n        else\n        \
    \    new_array+=(\"${data[$head_index]}\")\n            ((head_index++))\n   \
    \     fi\n    done\n    echo \"[$(join_by \"\\\", \\\"\" \"${new_array[@]}\")]\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpb_8_arv1.sh: line 23: data: bad array subscript

    /tmp/tmpb_8_arv1.sh: line 36: join_by: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array\n\
    \  if [[ $# -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  if [[ $# -eq\
    \ 1 ]]; then\n    echo \"[\\\"\"$1\"\\\"]\"\n    return\n  fi\n  array=$(echo\
    \ \"$*\" | tr \" \" \"\\n\")\n  if [[ $(($(echo \"$array\" | head -n 1) + $(echo\
    \ \"$array\" | tail -n 1)))%2 -eq 0 ]]; then\n    echo \"[$(echo \"$array\" |\
    \ sort -rn | tr \"\\n\" \", \" | sed \"s/,$//g\")]\"\n  else\n    echo \"[$(echo\
    \ \"$array\" | sort -n | tr \"\\n\" \", \" | sed \"s/,$//g\")]\"\n  fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ -z \"$1\"\
    \ ]]; then\n    echo \"[]\"\n  else\n    local L=\"$1\"\n    local SORTED=()\n\
    \    local FIRST_VAL=$(echo \"$L\" | cut -d ' ' -f 1)\n    local LAST_VAL=$(echo\
    \ \"$L\" | cut -d ' ' -f $(echo \"$L\" | wc -w))\n    local SUM=$(( FIRST_VAL\
    \ + LAST_VAL ))\n    if [[ $(( SUM % 2 )) -eq 0 ]]; then\n      SORTED=($(for\
    \ i in $L; do echo \"$i\"; done | sort -n))\n    else\n      SORTED=($(for i in\
    \ $L; do echo \"$i\"; done | sort -n -r))\n    fi\n    printf \"[\"\n    for i\
    \ in ${SORTED[@]}; do\n      printf \"'\\\"%s\\\"', \" \"$i\"\n    done\n    printf\
    \ \"\\b\\b]\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    [ \"$#\" -ne\
    \ 0 ] && echo $1 | sed 's/ /\", \"/g' | sed 's/^/\"/' | sed 's/$/\"/'\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    input=($1)\n\
    \    output=()\n    if [ -z $1 ]; then\n        echo \"[]\"\n    else\n      \
    \  while [ ${#input[@]} -gt 0 ]; do\n            output+=(\"$(shift ${input[@]})\"\
    )\n        done\n        echo ${output[@]}\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo \"[]\"\n  elif [ $(echo \"$1\" | wc -w) -eq 1 ]; then\n  \
    \  echo \"[\\\"$1\\\"]\"\n  else\n    local data=$(echo \"$1\" | xargs)\n    local\
    \ first=$(echo \"$data\" | awk '{print $1}')\n    local last=$(echo \"$data\"\
    \ | awk '{print $NF}')\n    local sum=$((first + last))\n    if [ $(($sum % 2))\
    \ -eq 0 ]; then\n      echo \"$1\" | sort -nr | xargs | sed 's/ /\", \"/g' | sed\
    \ 's/^/[\"/g' | sed 's/$/\"]/g'\n    else\n      echo \"$1\" | sort -n | xargs\
    \ | sed 's/ /\", \"/g' | sed 's/^/[\"/g' | sed 's/$/\"]/g'\n    fi\n  fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a array=($1)\n\
    \  if [ ${#array[@]} -le 1 ]; then\n    echo \"${array[@]}\"\n    return\n  fi\n\
    \  first_index=${array[0]}\n  last_index=${array[-1]}\n  sum=$(( $first_index\
    \ + $last_index ))\n  if [ $(( $sum % 2 )) -eq 0 ]; then\n    array=( $(for i\
    \ in \"${array[@]}\"; do echo $i; done | sort -nr) )\n  else\n    array=( $(for\
    \ i in \"${array[@]}\"; do echo $i; done | sort -n) )\n  fi\n  echo \"${array[@]}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a input\n\
    \  declare -a res\n  declare -i sum\n  # If an empty argument is given, directly\
    \ return and break.\n  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n \
    \ fi\n  # Split $1 by space and initialize the array.\n  IFS=' ' read -ra input\
    \ <<< \"$1\"\n  for value in \"${input[@]}\"; do\n    # Skip the value if it is\
    \ not a number.\n    if ! [[ \"$value\" =~ ^[0-9]+$ ]]; then\n      continue\n\
    \    fi\n    res+=(\"$value\")\n  done\n  # If the length of the res is 0, directly\
    \ return and break.\n  if [ ${#res[@]} -eq 0 ]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  # If the sum of the head and the tail is odd, sort in ascending order.\n\
    \  # Otherwise, sort in descending order.\n  sum=$((res[0] + res[${#res[@]} -\
    \ 1]))\n  if [ $(($sum % 2)) -eq 1 ]; then\n    printf '%s\\n' \"${res[@]}\" |\
    \ sort -n\n  else\n    printf '%s\\n' \"${res[@]}\" | sort -nr\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=()\n\
    \  for i in $1; do\n    array+=(\"$i\")\n  done\n  local first=$(echo \"${array[0]}\"\
    )\n  local last=$(echo \"${array[@]: -1}\")\n  local sum=$((first + last))\n \
    \ if [[ $((sum % 2)) -eq 0 ]]; then\n    echo \"${array[@]}\" | tr ' ' '\\n' |\
    \ sort -nr | tr '\\n' ' '\n  else\n    echo \"${array[@]}\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a A\n\
    \  local -i i sum\n  for ((i=0; i<$#; i++)); do\n    A[i]=$(printf '\"%s\"' \"\
    ${!i}\")\n  done\n  if (((A[0]+A[-1])%2)); then\n    printf '%s\\n' \"${A[@]}\"\
    \ | sort -nu\n  else\n    printf '%s\\n' \"${A[@]}\" | sort -nr\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4bue7vyp.sh: line 24: ((: "/tmp/tmp4bue7vyp.sh": syntax error:
    operand expected (error token is ""/tmp/tmp4bue7vyp.sh"")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  is_array_empty\
    \ \"$@\" && echo '[]' && return\n\n  local arr1=()\n  local arr2=()\n  local i=0\n\
    \  local v=''\n  local sum=0\n  local length=$(array_length \"$@\")\n  local result=''\n\
    \n  for v in $@; do\n    if ((i == 0 || i == length-1)); then\n      sum=$((sum\
    \ + v))\n    fi\n    ((i++))\n    arr1+=(\"$v\")\n  done\n\n  arr2=(\"${arr1[@]}\"\
    )\n\n  if ((sum % 2 == 0)); then\n    sort_ascending_array arr2\n  else\n    sort_descending_array\
    \ arr2\n  fi\n\n  result=$(__print_array arr2)\n  echo \"${result:1:${#result}-2}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8ryrcxlw.sh: line 19: is_array_empty: command not found

    /tmp/tmp8ryrcxlw.sh: line 26: array_length: command not found

    /tmp/tmp8ryrcxlw.sh: line 40: sort_ascending_array: command not found

    /tmp/tmp8ryrcxlw.sh: line 45: __print_array: command not found

    /tmp/tmp8ryrcxlw.sh: line 19: is_array_empty: command not found

    /tmp/tmp8ryrcxlw.sh: line 26: array_length: command not found

    /tmp/tmp8ryrcxlw.sh: line 42: sort_descending_array: command not found

    /tmp/tmp8ryrcxlw.sh: line 45: __print_array: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a array\n\
    \    local -i idx\n    local -i sum\n    IFS=\" \" read -r -a array <<<\"$1\"\n\
    \    idx=${#array[@]}\n    ((idx == 0)) && { echo '[]'; return 0; }\n    ((idx\
    \ == 1)) && { echo \"[\\\"${array[0]}\\\"]\"; return 0; }\n    ((sum = ${array[0]}\
    \ + ${array[-1]}))\n    if ((sum % 2)); then\n        echo \"$(sort -n <<<\"${array[*]}\"\
    )\"\n    else\n        echo \"$(sort -nr <<<\"${array[*]}\")\"\n    fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a array=()\n\
    \  for i in $1; do\n    array+=(\"$i\")\n  done\n  if [[ $((array[0] + array[-1]))%2\
    \ -eq 0 ]]; then\n    echo -n '['\n    for i in $(seq $((${#array[@]}-1)) -1 0);\
    \ do\n      echo -n '\"'${array[$i]}'\"'\n      if [[ $i -ne 0 ]]; then\n    \
    \    echo -n ', '\n      fi\n    done\n    echo ']'\n  else\n    echo -n '['\n\
    \    for i in $(seq 0 $((${#array[@]}-1))); do\n      echo -n '\"'${array[$i]}'\"\
    '\n      if [[ $i -ne $((${#array[@]}-1)) ]]; then\n        echo -n ', '\n   \
    \   fi\n    done\n    echo ']'\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpsf7vx95q.sh: line 23: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo \"Usage: $(basename $0) <list>\"\n    exit 1\n  fi\n  local\
    \ list=($1)\n  # return the array if it has only one element\n  if [ \"${#list[@]}\"\
    \ -eq 1 ]; then\n    echo '[\"'\"${list[0]}\"'\"]'\n    exit 0\n  fi\n  local\
    \ len=\"${#list[@]}\"\n  local sum=$(( list[0] + list[-1] ))\n  # change the sort\
    \ order if the sum of the first and last element is even\n  if [ $(( sum % 2 ))\
    \ -eq 0 ]; then\n    list=($(printf \"%s\\n\" \"${list[@]}\" | sort -nr))\n  else\n\
    \    list=($(printf \"%s\\n\" \"${list[@]}\" | sort -n))\n  fi\n  for i in \"\
    ${list[@]}\"; do echo -n '\"'$i'\"' | tr -d '\\n'; echo -n ', '; done | sed 's/,\
    \ $//'\n  echo\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a array=()\n\
    \    for var in $1; do\n        array+=(\"$var\")\n    done\n    # your code here...\n\
    \    case $(( \"${array[0]}\" + \"${array[${#array[@]}-1]}\" )) in\n        [24680]*)\n\
    \            for (( i=0; i<${#array[@]}/2; i++ )); do\n                tmp=${array[$i]}\n\
    \                array[$i]=${array[${#array[@]}-1-$i]}\n                array[${#array[@]}-1-$i]=$tmp\n\
    \            done\n            ;;\n    esac\n    echo \"${array[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplig7_p5j.sh: line 20: array: bad array subscript

    /tmp/tmplig7_p5j.sh: line 20: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local input=(\"\
    $@\")\n  local output=(\"${input[@]}\")\n  local odd=0\n  local temp\n  let odd=\"\
    ${input[0]} + ${input[-1]}\"\n  if [[ $odd -eq 0 ]]; then\n    for i in $(seq\
    \ 0 $((${#input[@]}-1))); do\n      for j in $(seq 0 $((${#input[@]}-1))); do\n\
    \        if [[ ${input[$i]} -gt ${input[$j]} ]]; then\n          temp=${input[$i]}\n\
    \          input[$i]=${input[$j]}\n          input[$j]=$temp\n        fi\n   \
    \   done\n    done\n  else\n    for i in $(seq 0 $((${#input[@]}-1))); do\n  \
    \    for j in $(seq 0 $((${#input[@]}-1))); do\n        if [[ ${input[$i]} -lt\
    \ ${input[$j]} ]]; then\n          temp=${input[$i]}\n          input[$i]=${input[$j]}\n\
    \          input[$j]=$temp\n        fi\n      done\n    done\n  fi\n  output=(\"\
    ${input[@]}\")\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7cwtlg05.sh: line 23: let: odd= + : syntax error: operand expected
    (error token is "+ ")

    /tmp/tmp7cwtlg05.sh: line 23: let: odd=2 4 3 0 1 5 + 2 4 3 0 1 5: syntax error
    in expression (error token is "4 3 0 1 5 + 2 4 3 0 1 5")

    /tmp/tmp7cwtlg05.sh: line 37: [[: 2 4 3 0 1 5: syntax error in expression (error
    token is "4 3 0 1 5")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if (( ${#@}\
    \ == 0 )); then\n        echo '[]'\n        return 0\n    fi\n    # your code\
    \ starts here\n    local -a arr=(\"$@\")\n    local -a sort\n    local -a res\n\
    \    local sum\n    sum=$((${arr[0]} + ${arr[-1]}))\n    if [[ \"$sum\" == \"\
    0\" ]]; then\n        echo '[]'\n        return 0\n    fi\n    if ((sum%2)); then\n\
    \        sort=($(sort -n <<< \"${arr[*]}\"))\n    else\n        sort=($(sort -nr\
    \ <<< \"${arr[*]}\"))\n    fi\n    for i in \"${sort[@]}\"; do\n        res+=(\\\
    \"$i\\\")\n    done\n    echo \"${res[*]}\"\n    # your code ends here\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphrb5acrn.sh: line 28: + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ -z \"$1\"\
    \ ]]; then\n    echo \"[]\"\n  else\n    # Create an array of integers from the\
    \ space-separated input\n    local -a arr=()\n    for i in $1; do\n      arr=(\"\
    ${arr[@]}\" \"\\\"$i\\\"\")\n    done\n    if [[ $((arr[0] + arr[${#arr[@]} -\
    \ 1]))%2 -eq 0 ]]; then\n      IFS=$'\\n' arr=($(sort <<<\"${arr[*]}\"))\n   \
    \ else\n      IFS=$'\\n' arr=($(sort -r <<<\"${arr[*]}\"))\n    fi\n    # Print\
    \ the array as a JSON-style array\n    echo \"[${arr[*]}]\"\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local sum=0\n\
    \  local x=$1\n  local result=\"[\"\n  while [ -n \"$x\" ]; do\n    sum=$((sum\
    \ + $(echo $x | awk '{print $1}')))\n    x=\"$(echo $x | awk '{print $2}')\"\n\
    \  done\n  if [ $((sum % 2)) -eq 0 ]; then\n    x=$1\n    while [ -n \"$x\" ];\
    \ do\n      result=\"$result\\\"$(echo $x | awk '{print $1}')\\\"\"\n      x=\"\
    $(echo $x | awk '{print $2}')\"\n      if [ -n \"$x\" ]; then\n        result=\"\
    $result, \"\n      fi\n    done\n  else\n    x=$1\n    while [ -n \"$x\" ]; do\n\
    \      local y=\"$(echo $x | awk '{print $1}')\"\n      x=\"$(echo $x | awk '{print\
    \ $2}')\"\n    done\n    x=$1\n    while [ -n \"$x\" ]; do\n      local y=\"$(echo\
    \ $x | awk '{print $1}')\"\n      result=\"$result\\\"$y\\\"\"\n      x=\"$(echo\
    \ $x | awk '{print $2}')\"\n      if [ -n \"$x\" ]; then\n        result=\"$result,\
    \ \"\n      fi\n    done\n  fi\n  result=\"$result]\"\n  echo $result\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  printf '%s\\\
    n' \"$1\" | awk '\n    {\n      split($0, a, \" \")\n      count = asort(a)\n\
    \      if (a[1] + a[count] % 2 == 0) {\n        for (i = 1; i <= count; i++) {\n\
    \          printf \"%s\", a[i]\n          if (i != count) {\n            printf\
    \ \"%s\", \" \"\n          }\n        }\n      } else {\n        for (i = count;\
    \ i >= 1; i--) {\n          printf \"%s\", a[i]\n          if (i != 1) {\n   \
    \         printf \"%s\", \" \"\n          }\n        }\n      }\n    }'\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local original_array=(\"\
    $@\")\n  local aux_array=()\n  local new_array=()\n  local n=\"${#original_array[@]}\"\
    \n  for ((i=0; i<n; i++)); do\n    aux_array+=(\"${original_array[$i]}\")\n  done\n\
    \  if (((aux_array[0] + aux_array[n-1]) % 2 == 0)); then\n    for ((i=n-1; i>=0;\
    \ i--)); do\n      new_array+=(\"${aux_array[$i]}\")\n    done\n  else\n    for\
    \ ((i=0; i<n; i++)); do\n      new_array+=(\"${aux_array[$i]}\")\n    done\n \
    \ fi\n  echo -n \"[\"\n  for ((i=0; i<n; i++)); do\n    echo -n \"\\\"${new_array[$i]}\\\
    \"\"\n    if ((i != n-1)); then\n      echo -n \", \"\n    fi\n  done\n  echo\
    \ -n \"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a arr=()\n\
    \  for n in $1; do\n    arr+=($n)\n  done\n  if [[ $((${arr[0]} + ${arr[-1]}))%2\
    \ -eq 0 ]]; then\n    echo $(echo ${arr[@]} | sed 's/ /\\n/g' | sort -nr)\n  else\n\
    \    echo $(echo ${arr[@]} | sed 's/ /\\n/g' | sort -n)\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpay3psjjd.sh: line 23: arr: bad array subscript

    /tmp/tmpay3psjjd.sh: line 23: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=()\n\
    \  local -a array_out\n  local -i sum i\n  [[ -z \"$1\" ]] && printf '[]' && return\
    \ 0\n  while IFS=\" \" read -ra array; do\n    sum=$((array[0] + array[-1]))\n\
    \    if ((sum % 2 == 0)); then\n      i=$((array[0]))\n      while ((i >= 0));\
    \ do\n        array_out+=(${array[i]})\n        ((i--))\n      done\n    else\n\
    \      for i in \"${array[@]}\"; do\n        array_out+=($i)\n      done\n   \
    \ fi\n  done <<<\"$1\"\n  printf '[%s]' \"$(IFS=,; printf '\"%s\"' \"${array_out[*]}\"\
    )\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[\
    \ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4\
    \ 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n\
    \    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate\
    \ \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo \"[]\"\n  else\n    declare -a arr=(${1})\n    if [ $((arr[0]\
    \ + arr[${#arr[@]} - 1])) -gt 0 ]; then\n      IFS=$'\\n' sorted=($(sort <<<\"\
    ${arr[*]}\"))\n      unset IFS\n      echo \"[\\\"${sorted[*]}\\\"]\"\n    else\n\
    \      IFS=$'\\n' sorted=($(sort -r <<<\"${arr[*]}\"))\n      unset IFS\n    \
    \  echo \"[\\\"${sorted[*]}\\\"]\"\n    fi\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a array\n\
    \  array=($1)\n  local sum=$(( ${array[0]} + ${array[-1]} ))\n  if [[ $(( sum\
    \ % 2 )) -eq 0 ]]; then\n    sort -r -n <<<\"${array[*]}\"\n  else\n    sort -n\
    \ <<<\"${array[*]}\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsdwqc4js.sh: line 21: array: bad array subscript

    /tmp/tmpsdwqc4js.sh: line 21: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    declare -a\
    \ input=($1)\n    if [ $((input[0] + input[-1])) -eq 0 ]; then\n        echo ${input[@]}\n\
    \    elif [ $((input[0] + input[-1])) -eq 1 ]; then\n        echo ${input[@]}\
    \ | tr \" \" \"\\n\" | sort -n\n    elif [ $((input[0] + input[-1])) -eq 2 ];\
    \ then\n        echo ${input[@]} | tr \" \" \"\\n\" | sort -n | tac\n    elif\
    \ [ $((input[0] + input[-1])) -eq 3 ]; then\n        echo ${input[@]} | tr \"\
    \ \" \"\\n\" | sort -r\n    elif [ $((input[0] + input[-1])) -eq 4 ]; then\n \
    \       echo ${input[@]} | tr \" \" \"\\n\" | sort -n\n    elif [ $((input[0]\
    \ + input[-1])) -eq 5 ]; then\n        echo ${input[@]} | tr \" \" \"\\n\" | sort\
    \ -n | tac\n    elif [ $((input[0] + input[-1])) -eq 6 ]; then\n        echo ${input[@]}\
    \ | tr \" \" \"\\n\" | sort -r\n    elif [ $((input[0] + input[-1])) -eq 7 ];\
    \ then\n        echo ${input[@]} | tr \" \" \"\\n\" | sort -n\n    elif [ $((input[0]\
    \ + input[-1])) -eq 8 ]; then\n        echo ${input[@]} | tr \" \" \"\\n\" | sort\
    \ -n | tac\n    elif [ $((input[0] + input[-1])) -eq 9 ]; then\n        echo ${input[@]}\
    \ | tr \" \" \"\\n\" | sort -r\n    fi\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpq34evabw.sh: line 20: input: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local array=(\
    \ $1 )\n    local len=${#array[@]}\n    # Check if $len is an even number\n  \
    \  if [ $((len%2)) -eq 0 ]; then\n        for (( i = $len - 1; i >= 0; i-- ));\
    \ do\n            j=$((len-i-1))\n            array[j]=${array[i]}\n        done\n\
    \    fi\n    # Convert to JSON string\n    local result=$(IFS=','; echo \"[${array[*]}]\"\
    )\n    echo \"$result\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if [ -z \"\
    $1\" ]; then\n        printf \"[]\"\n    elif [ $(($(echo \"$1\" | tr ' ' '\\\
    n' | wc -l) % 2)) -eq 0 ]; then\n        printf '[\"%s\"]' $(echo \"$1\" | tr\
    \ ' ' '\\n' | sort -rn | paste -sd '\", \"' -)\n    else\n        printf '[\"\
    %s\"]' $(echo \"$1\" | tr ' ' '\\n' | sort -n | paste -sd '\", \"' -)\n    fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -r _array=($1)\n\
    \  local _sum_of_first_and_last=$(( ${_array[0]} + ${_array[-1]} ))\n  local _is_ascending=true\n\
    \  if (( _sum_of_first_and_last % 2 == 0 )); then\n    _is_ascending=false\n \
    \ fi\n  local -r _sorted_array=($(printf '%s\\n' \"${_array[@]}\" | sort -g))\n\
    \  if ! $_is_ascending; then\n    printf '%s\\n' \"${_sorted_array[@]}\" | tac\
    \ | sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ' '\n  else\n    printf '%s\\n' \"\
    ${_sorted_array[@]}\" | sed -e 's/^/\"/' -e 's/$/\"/' | tr '\\n' ' '\n  fi\n}\n\
    \ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgmomgnn9.sh: line 20: _array: bad array subscript

    /tmp/tmpgmomgnn9.sh: line 20: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a a;\n\
    \n  a=(\"$@\");\n  sum=$((${a[0]} + ${a[${#a[@]} - 1]}));\n  (($sum & 1)) && desc=0\
    \ || desc=1;\n\n  for ((i = 0; i < ${#a[@]}; i++)); do\n    for ((j = $i; j <\
    \ ${#a[@]}; j++)); do\n      if (($desc)); then\n        ((${a[$i]} < ${a[$j]}))\
    \ && {\n          t=${a[$i]};\n          a[$i]=${a[$j]};\n          a[$j]=$t;\n\
    \        };\n      else\n        ((${a[$i]} > ${a[$j]})) && {\n          t=${a[$i]};\n\
    \          a[$i]=${a[$j]};\n          a[$j]=$t;\n        };\n      fi;\n    done;\n\
    \  done;\n\n  echo ${a[@]};\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpay32s17y.sh: line 22: + : syntax error: operand expected (error
    token is "+ ")

    /tmp/tmpay32s17y.sh: line 22: 2 4 3 0 1 5 + 2 4 3 0 1 5: syntax error in expression
    (error token is "4 3 0 1 5 + 2 4 3 0 1 5")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    # local -a\
    \ arr=(\"$@\")\n    # local n=$((${#arr[@]} - 1))\n    # local s=0\n    # for\
    \ i in \"${arr[@]}\"; do\n    #     s=$((s + i))\n    # done\n    # if [[ $((s\
    \ % 2)) -eq 0 ]]; then\n    #     echo \"$(echo ${arr[@]} | tr ' ' '\\n' | sort\
    \ --reverse)\"\n    # else\n    #     echo \"$(echo ${arr[@]} | tr ' ' '\\n' |\
    \ sort --numeric-sort)\"\n    # fi\n    local -a a\n    while read -rd ' '; do\n\
    \        a+=( \"$REPLY\" )\n    done < <( echo $1 )\n    local n=${#a[@]}\n  \
    \  local s=0\n    for i in \"${a[@]}\"; do\n        s=$((s + i))\n    done\n \
    \   if [[ $((s % 2)) -eq 0 ]]; then\n        echo \"$(echo ${a[@]} | tr ' ' '\\\
    n' | sort --reverse)\"\n    else\n        echo \"$(echo ${a[@]} | tr ' ' '\\n'\
    \ | sort --numeric-sort)\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a arr=(\"\
    $@\")\n  local sum=$(( ${arr[0]} + ${arr[-1]} ))\n  if (( sum % 2 == 0 )); then\n\
    \    sort \"${arr[@]}\" | tac\n  else\n    sort \"${arr[@]}\"\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpaqugu14w.sh: line 20: +  : syntax error: operand expected (error
    token is "+  ")

    sort: cannot read: 5: No such file or directory

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ ! \"$#\"\
    \ -eq 1 ]]; then\n    echo \"Usage: sort_array <space-separated list>\"\n    exit\n\
    \  fi\n  local first=$(echo \"$1\" | awk '{print $1}')\n  local last=$(echo \"\
    $1\" | awk '{print $NF}')\n  local list=\"[$(echo \"$1\" | sed -e 's/ /\", \"\
    /g')]\"\n  if [[ $(($first + $last))%2 -eq 0 ]]; then\n    echo \"$list\" | jq\
    \ -s 'sort'\n  else\n    echo \"$list\" | jq -s 'sort | reverse'\n  fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpy5qioe3m.sh: line 26: + : syntax error: operand expected (error
    token is "+ ")

    /tmp/tmpy5qioe3m.sh: line 27: jq: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  [ -z \"$1\" ]\
    \ && echo '[]' && return 0\n  local -a given_array=($1)\n\n  ((((${given_array[0]}\
    \ + ${given_array[-1]})) % 2))\n  local -r sort_order_flag=$?\n\n  if [ \"$sort_order_flag\"\
    \ -eq 1 ]; then\n    local -a sorted_array=($(for i in \"${given_array[@]}\";\
    \ do echo $i; done | sort -n))\n  else\n    local -a sorted_array=($(for i in\
    \ \"${given_array[@]}\"; do echo $i; done | sort -nr))\n  fi\n\n  local -a json_array=()\n\
    \  for i in \"${sorted_array[@]}\"; do\n    json_array+=(\\\"$i\\\")\n  done\n\
    \n  echo \"[\"${json_array[@]/%/,}\"]\"\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local INPUT_STR=\"\
    $1\"\n  declare -a arr\n\n  # split string to array\n  arr=($(echo $INPUT_STR\
    \ | tr ' ' '\\n'))\n\n  # count number of elements\n  local LEN=\"${#arr[@]}\"\
    \n\n  # reverse sorting of array\n  if [ $((${arr[0]} + ${arr[-1]})) -eq $((0\
    \ + $LEN - 1)) ]; then\n    for (( i = 0; i < LEN/2; i++ )); do\n      local TMP=${arr[i]}\n\
    \      arr[i]=${arr[LEN-i-1]}\n      arr[LEN-i-1]=$TMP\n    done\n  fi\n\n  #\
    \ output\n  OUTPUT_STR=$(printf '\"%s\" ' \"${arr[@]}\")\n  echo ${OUTPUT_STR%?}\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvfnr45qy.sh: line 29: arr: bad array subscript

    /tmp/tmpvfnr45qy.sh: line 29: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    [ -z \"$1\"\
    \ ] && echo \"[]\" && return\n    local elements=($1)\n    local first=${elements[0]}\n\
    \    local last=${elements[${#elements[@]}-1]}\n    local sum=$(( $first + $last\
    \ ))\n    [ $(( $sum % 2 )) -eq 0 ] &&\n        elements=( $(echo ${elements[@]}\
    \ | tr ' ' '\\n' | sort -nr) ) ||\n        elements=( $(echo ${elements[@]} |\
    \ tr ' ' '\\n' | sort -n) )\n    echo \"[\\\"${elements[@]}\\\"]\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local input=$1\n\
    \  local -a result=()\n  local -i i=0\n  local -i j=0\n  local -i sum=0\n  local\
    \ -i len=0\n  local -i len_diff=0\n  local -i odd=0\n  local -i even=0\n  local\
    \ -i index=0\n  local -i half=0\n  local -i modulo=0\n  len=${#input}\n  len_diff=$((len\
    \ - 1))\n  for ((i=0; i<len; i++)); do\n    result[$i]=$(echo \"$input\" | cut\
    \ -d \" \" -f $((i + 1)))\n  done\n  for ((i=0; i<len; i++)); do\n    sum=$((result[0]\
    \ + result[len_diff]))\n    if ((sum % 2 == 0)); then\n      odd=0\n      even=1\n\
    \    else\n      odd=1\n      even=0\n    fi\n    if ((even == 1)); then\n   \
    \   if ((i > 0)); then\n        j=$((i - 1))\n        while ((j >= 0)); do\n \
    \         if ((result[$j] < result[$i])); then\n            break\n          fi\n\
    \          ((j--))\n        done\n        index=$((j + 1))\n        if ((index\
    \ < i)); then\n          for ((j=i; j>index; j--)); do\n            result[$j]=${result[$((j\
    \ - 1))]}\n          done\n          result[$index]=${result[$i]}\n        fi\n\
    \      fi\n    elif ((odd == 1)); then\n      if ((i < len_diff)); then\n    \
    \    j=$((i + 1))\n        while ((j <= len_diff)); do\n          if ((result[$j]\
    \ > result[$i])); then\n            break\n          fi\n          ((j++))\n \
    \       done\n        index=$((j - 1))\n        if ((index > i)); then\n     \
    \     for ((j=i; j<index; j++)); do\n            result[$j]=${result[$((j + 1))]}\n\
    \          done\n          result[$index]=${result[$i\n}\n\ncandidate() {\n  \
    \  sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa2e4gc55.sh: line 95: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    declare -a\
    \ x\n    local o=0 e=0 i=0 j=0 n x1 x2 m\n    # split input string into array\
    \ x\n    IFS=\" \" read -r -a x <<< \"$1\"\n    # count number of even, odd numbers\
    \ in the array x\n    for n in \"${x[@]}\"; do\n        ((n%2)) && ((++o)) ||\
    \ ((++e))\n    done\n    # if o=0 or e=0 then done\n    ((o==0 || e==0)) && echo\
    \ \"${x[@]}\" && return\n    # otherwise sort in the odd-even order\n    for ((i=0;\
    \ i<${#x[@]}; ++i)); do\n        # find the i'th smallest element in the rest\
    \ of the array\n        m=$i\n        for ((j=i+1; j<${#x[@]}; ++j)); do\n   \
    \         # sort odd-even: if odd < even, return 1\n            ((x[j]%2 < x[m]%2))\
    \ && m=$j\n            # if odd-even are equal, then sort odd/even in ascending\
    \ order\n            ((x[j]%2 == x[m]%2)) && ((x[j] < x[m])) && m=$j\n       \
    \ done\n        # swap i'th and m'th element of the array\n        x1=${x[i]}\
    \ x2=${x[m]}\n        x[i]=$x2 x[m]=$x1\n    done\n    # return sorted array x\n\
    \    echo \"${x[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local list=(${1//\
    \ / })\n    local res=()\n    for i in \"${!list[@]}\"; do\n        if [[ $((i+1))\
    \ -eq ${#list[@]} ]]; then\n            break\n        fi\n        res+=(\"${list[$i]}\"\
    )\n    done\n    res=(\"${res[@]// /\\ }\")\n    if [[ $((list[0]+list[-1])) -eq\
    \ $((list[0]+list[-1]/2*2)) ]]; then\n        echo $(tac <<< ${res[@]})\n    else\n\
    \        echo ${res[@]}\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmppjux_mz2.sh: line 28: list: bad array subscript

    /tmp/tmppjux_mz2.sh: line 28: list: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    declare -a\
    \ array=\"($1)\"\n    declare -a sorted_array=()\n    declare -a is_even=()\n\
    \    declare -a is_odd=()\n    declare sum=0\n    for ((i=0; i<${#array[@]}; i++));\
    \ do\n        if ((i == 0)); then\n            sum=$((array[i] + array[-1]))\n\
    \        else\n            sum=$((array[i] + array[i-1]))\n        fi\n      \
    \  if ((sum % 2 == 0)); then\n            is_even+=(array[i])\n        else\n\
    \            is_odd+=(array[i])\n        fi\n    done\n    sorted_array=( $(printf\
    \ \"%s\\n\" \"${is_even[@]}\" | sort -n) $(printf \"%s\\n\" \"${is_odd[@]}\" |\
    \ sort -nr) )\n    declare json_array=$(printf '[\"%s\"]' \"${sorted_array[@]}\"\
    )\n    echo $json_array\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # An empty array\n\
    \  if [ -z \"$1\" ]; then\n    echo '[]'\n    return\n  fi\n\n  # Get the sum\
    \ of the first and last index\n  first_index=$(echo \"$1\" | cut -d ' ' -f 1)\n\
    \  last_index=$(echo \"$1\" | cut -d ' ' -f $(echo \"$1\" | wc -w))\n  sum=$((first_index\
    \ + last_index))\n\n  # Sort the array\n  IFS=' ' read -r -a array <<< \"$1\"\n\
    \  if (( sum % 2 == 0 )); then\n    # Sort the array in descending order\n   \
    \ IFS=$'\\n' sorted=($(sort -rn <<<\"${array[*]}\"))\n  else\n    # Sort the array\
    \ in ascending order\n    IFS=$'\\n' sorted=($(sort -n <<<\"${array[*]}\"))\n\
    \  fi\n\n  # Format the array\n  array=()\n  for i in \"${sorted[@]}\"; do\n \
    \   array+=(\"\\\"$i\\\"\")\n  done\n\n  # Print the array\n  echo \"${array[@]}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local array_input=\"\
    $1\"\n    local array_index=\"\"\n    local array_value=\"\"\n    local array_index_sum=\"\
    \"\n    local i=\"\"\n    local k=\"\"\n    # Convert space-separated string to\
    \ array\n    for i in ${array_input}; do\n        array_value+=(\"${i}\")\n  \
    \  done\n    # Get array length\n    local array_length=\"${#array_value[@]}\"\
    \n    # Generate index of array\n    for (( i=0; i<array_length; i++ )); do\n\
    \        array_index+=(\"${i}\")\n    done\n    # Get first index value and last\
    \ index value\n    local first_index_value=\"${array_value[${array_index[0]}]}\"\
    \n    local last_index_value=\"${array_value[${array_index[-1]}]}\"\n    # Get\
    \ the sum of first index value and last index value\n    array_index_sum=$(( first_index_value\
    \ + last_index_value ))\n    # Sort array\n    if [[ $(( array_index_sum % 2 ))\
    \ == 1 ]]; then\n        # Sort array in ascending order\n        for (( i=0;\
    \ i<array_length; i++ )); do\n            for (( k=0; k<array_length-1; k++ ));\
    \ do\n                if [[ ${array_value[${array_index[k]}]} -gt ${array_value[${array_index[k+1]}]}\
    \ ]]; then\n                    local temp_index=\"${array_index[k]}\"\n     \
    \               array_index[k]=\"${array_index[k+1]}\"\n                    array_index[k+1]=\"\
    ${temp_index}\"\n                fi\n            done\n        done\n    else\n\
    \        # Sort array in descending order\n        for (( i=0; i<array_length;\
    \ i++ )); do\n            for (( k=0; k<array_length-1; k++ )); do\n         \
    \       if [[ ${array_value[${array_index[k]}]} -lt ${array_value[${array_index[k+1]}]}\
    \ ]]; then\n                    local temp_index=\"${array_index[k]}\"\n     \
    \               array_index[k]=\"${array\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp59k0mox8.sh: line 73: unexpected EOF while looking for matching
    `"''

    /tmp/tmp59k0mox8.sh: line 77: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=($1)\n\
    \  sum=0\n  for i in \"${array[@]}\"; do\n    ((sum+=i))\n  done\n  if [[ $(($sum\
    \ % 2)) == 0 ]]; then\n    echo \"${array[@]}\" | sort -nr\n  else\n    echo \"\
    ${array[@]}\" | sort -n\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local ints=\"\
    $1\"\n  if [[ $(($(printf \"%s\" \"$ints\" | wc -w) % 2)) -eq 0 ]]; then\n   \
    \ sort_descending $ints\n  else\n    sort_ascending $ints\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqtdr6mrm.sh: line 21: sort_descending: command not found

    /tmp/tmpqtdr6mrm.sh: line 23: sort_ascending: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a list=($1)\n\
    \    local length=${#list[@]}\n    local -a sorted=()\n    local i=0\n    if [\
    \ $(((${list[0]} + ${list[$((length - 1))]}))) -eq 1 ]; then\n        while [\
    \ $i -lt $length ]; do\n            sorted+=(\"\\\"${list[$((length - i - 1))]}\\\
    \"\")\n            ((i++))\n        done\n    else\n        while [ $i -lt $length\
    \ ]; do\n            sorted+=(\"\\\"${list[$i]}\\\"\")\n            ((i++))\n\
    \        done\n    fi\n    echo ${sorted[@]}\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphyxb7yqu.sh: line 23: list: bad array subscript

    /tmp/tmphyxb7yqu.sh: line 23: ( + ): syntax error: operand expected (error token
    is ")")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local __array=(\
    \ $1 )\n    local __output=\"\"\n    if [ $(( ${__array[0]} + ${__array[-1]} ))\
    \ -eq $(( ${__array[0]} + ${__array[-1]} / 2 * 2 )) ]; then\n        local __index=0\n\
    \        while [ $__index -lt ${#__array[@]} ]; do\n            __output+=\"\\\
    \"${__array[$__index]}\\\"\"\n            if [ $__index -lt $(( ${#__array[@]}\
    \ - 1 )) ]; then\n                __output+=\", \"\n            fi\n         \
    \   __index=$(( $__index + 1 ))\n        done\n    else\n        local __index=$((\
    \ ${#__array[@]} - 1 ))\n        while [ $__index -ge 0 ]; do\n            __output+=\"\
    \\\"${__array[$__index]}\\\"\"\n            if [ $__index -gt 0 ]; then\n    \
    \            __output+=\", \"\n            fi\n            __index=$(( $__index\
    \ - 1 ))\n        done\n    fi\n    echo \"[$__output]\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9dxutqpq.sh: line 21: __array: bad array subscript

    /tmp/tmp9dxutqpq.sh: line 21: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare arr=($1)\n\
    \  if [[ $((arr[0] + arr[-1]))%2 == 0 ]]; then\n    arr=($(printf \"%s\\n\" \"\
    ${arr[@]}\" | sort -r))\n  else\n    arr=($(printf \"%s\\n\" \"${arr[@]}\" | sort))\n\
    \  fi\n  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpsr6yrp_2.sh: line 20: arr: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # parse space-separated\
    \ list\n  declare -a nums=()\n  for item in $1; do\n    nums+=(\"\\\"$item\\\"\
    \")\n  done\n  # compute sum\n  sum=0\n  for item in \"${nums[@]}\"; do\n    sum=$((sum\
    \ + \"${item//\\\"}\"))\n  done\n  # sort according to the sum\n  if [[ \"$((sum\
    \ % 2))\" -eq 0 ]]; then\n    # even\n    echo \"$(for ((i=${#nums[@]}-1; i>=0;\
    \ i--)); do echo -n \"${nums[$i]} \"; done)\"\n  else\n    # odd\n    echo \"\
    $(for item in \"${nums[@]}\"; do echo -n \"$item \"; done)\"\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    declare -a\
    \ arr\n    arr=($1)\n    declare -a result\n    local val\n    if [ $((arr[0]+arr[-1]))\
    \ -eq $((0+0)) ]; then\n        for (( i=0; i<${#arr[@]}; i++ )); do\n       \
    \     val=${arr[$i]}\n            result+=(\"\\\"$val\\\"\")\n        done\n \
    \   elif [ $((arr[0]+arr[-1])) -gt $((0+0)) ]; then\n        for (( i=${#arr[@]}-1;\
    \ i>=0; i-- )); do\n            val=${arr[$i]}\n            result+=(\"\\\"$val\\\
    \"\")\n        done\n    fi\n    printf \"[%s]\" \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbl3piwsa.sh: line 23: arr: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a array=()\n\
    \  local -i sum=0\n  local -i i=0\n  for element in $1; do\n    array[i++]=$element\n\
    \  done\n  (( sum = array[0] + array[i-1] ))\n  (( sum & 1 == 0 )) && qsort array\
    \ 0 $((i-1)) || rqsort array 0 $((i-1))\n  echo \"[\"$(join_by ', ' \"${array[@]}\"\
    )\"]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphkwo1a6v.sh: line 25: array: bad array subscript

    /tmp/tmphkwo1a6v.sh: line 26: rqsort: command not found

    /tmp/tmphkwo1a6v.sh: line 27: join_by: command not found

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ $# -eq 0\
    \ ]; then\n    echo []\n  elif [ $# -eq 1 ]; then\n    echo [\\\"$1\\\"]\n  else\n\
    \    if [ $(($1 + ${!#})) -lt 0 ]; then\n      echo $@ | awk '{print \"[\\\"\"\
    $1\"\\\"\",\n      for(i=2;i<NF;i++)\n        print \",\\\"\"$i\"\\\"\";\n   \
    \   print \",\\\"\"$NF\"\\\"]\"}'\n    else\n      echo $@ | awk '{print \"[\\\
    \"\"$NF\"\\\"\",\n      for(i=NF-1;i>1;i--)\n        print \",\\\"\"$i\"\\\"\"\
    ;\n      print \",\\\"\"$1\"\\\"]\"}'\n    fi\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # split to an\
    \ array\n  IFS=' ' read -r -a array <<< \"$1\"\n  # get sum of first and last\
    \ index values\n  (( sum = ${array[0]} + ${array[-1]} ))\n  # sort the array\n\
    \  if (( sum % 2 == 0 )); then\n    # if sum is even, sort it in descending order\n\
    \    arr=$(printf '%s\\n' \"${array[@]}\" | sort -nr)\n  else\n    # if sum is\
    \ odd, sort it in ascending order\n    arr=$(printf '%s\\n' \"${array[@]}\" |\
    \ sort -n)\n  fi\n  # format the array\n  arr=$(printf \"\\\"%s\\\" \" \"${arr[@]}\"\
    )\n  echo \"[${arr}]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxv5q5n31.sh: line 22: array: bad array subscript

    /tmp/tmpxv5q5n31.sh: line 22: ((: sum =  +  : syntax error: operand expected (error
    token is "+  ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local input_array=()\n\
    \    local first=0\n    local last=0\n    local output_array=()\n    local i=0\n\
    \    if [ -z \"$1\" ]; then\n        echo '[]'\n        return\n    fi\n    input_array=($(echo\
    \ \"$1\" | tr ' ' '\\n'))\n    first=${input_array[0]}\n    last=${input_array[${#input_array[@]}\
    \ - 1]}\n    if (( (first + last) % 2 == 0 )); then\n        output_array=($(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -rn))\n    else\n        output_array=($(echo \"\
    $1\" | tr ' ' '\\n' | sort -n))\n    fi\n    echo -n \"[\"\n    for ((i = 0; i\
    \ < ${#output_array[@]}; i++)); do\n        echo -n \"\\\"${output_array[$i]}\\\
    \"\"\n        if (( i < ${#output_array[@]} - 1 )); then\n            echo -n\
    \ \", \"\n        fi\n    done\n    echo \"]\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a A=(\"\
    $@\")\n    if (( ${#A[@]} == 0 )); then\n        echo \"null\"\n    elif (( ${#A[@]}\
    \ == 1 )); then\n        echo \"[\\\"${A[0]}\\\"]\"\n    else\n        local s=${A[0]}\n\
    \        local e=${A[${#A[@]}-1]}\n        (( (s+e) % 2 == 0 )) &&\n         \
    \   echo \"[\\\"${A[@]::${#A[@]}-1}\\\" \\\"${A[@]:1}\\\"]\" ||\n            echo\
    \ \"[\\\"${A[@]:1}\\\" \\\"${A[@]::${#A[@]}-1}\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if [ $# -eq\
    \ 0 ]; then\n        echo '[]'\n        return 0\n    fi\n    if [ $# -eq 1 ];\
    \ then\n        echo \"[\\\"$1\\\"]\"\n        return 0\n    fi\n    len=0\n \
    \   for i in \"$@\"; do\n        let \"len=len+1\"\n    done\n    let \"len=len-1\"\
    \n    if [ \"$(( ${@:1:1} + ${@:len:1} ))\" -eq \"$(( ${@:1:1} + ${@:len:1} ))\"\
    \ ]; then\n        echo \"$@\" | sort -n | sed 's/ /\", \"/g' | sed 's/^/[\"/g'\
    \ | sed 's/$/\"]/g'\n    else\n        echo \"$@\" | sort -rn | sed 's/ /\", \"\
    /g' | sed 's/^/[\"/g' | sed 's/$/\"]/g'\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a array\n\
    \  IFS=' ' read -ra array <<< \"${1}\"\n  local total=${#array[@]}\n  local result=()\n\
    \  for ((i=0; i<total; i++)); do\n    result+=(\"$i\")\n  done\n  if [[ $((array[0]+array[-1]))%2\
    \ -eq 0 ]]; then\n    echo \"[${result[@]}]\"\n  else\n    local -a reversed=()\n\
    \    for ((i=total-1; i>=0; i--)); do\n      reversed+=(\"$i\")\n    done\n  \
    \  echo \"[${reversed[@]}]\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpvn6klx9m.sh: line 26: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    # Change the\
    \ following string of numbers to a space-separated list\n    local str=\"$1\"\n\
    \    local str_array=($str)\n    local len=${#str_array[@]}\n    local num1=${str_array[0]}\n\
    \    local num2=${str_array[-1]}\n    local total=$((num1 + num2))\n    local\
    \ is_odd=$((total % 2))\n    local lt_gt=\"<\"\n    [[ is_odd -eq 0 ]] && lt_gt=\"\
    >\"\n    printf '%s\\n' \"${str_array[@]}\" | sort -g -r -t' ' -k1,1 -k2n | tr\
    \ '\\n' ' ' | sed 's/ //g' | sed 's/\\([^ ]*\\)/\"\\1\"/g'\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphvpfqrkl.sh: line 24: str_array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # Our workhorse.\n\
    \  if [[ \"$#\" -eq 1 ]]; then\n    # Local variables.\n    local a=($1)\n   \
    \ local n=${#a[@]}\n    local sort_function\n    local sort_function_arguments\n\
    \n    # Determine the sorting function.\n    if [[ $((a[0] + a[$((n - 1))]))%2\
    \ -eq 0 ]]; then\n      sort_function=sort\n      sort_function_arguments=\"-rn\"\
    \n    else\n      sort_function=sort\n      sort_function_arguments=\"-n\"\n \
    \   fi\n\n    # Sort the array.\n    local sorted=($(IFS=' '; echo \"${a[*]}\"\
    \ | xargs -n1 | $sort_function $sort_function_arguments))\n\n    # Echo the results\
    \ to the standard output.\n    IFS=' '\n    echo \"[$(printf '\"%s\", ' \"${sorted[@]}\"\
    )]\" | sed 's/, ]$/]/'\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmp3kjnf2fc.sh: line 28: a: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local input_string=$1\n\
    \    local array=()\n    local index=0\n    local temp_string=\"\"\n    IFS=\"\
    \ \"\n    for word in $input_string; do\n        array[$index]=$word\n       \
    \ index=$(($index + 1))\n    done\n    IFS=\"\"\n    if [ $((${array[0]} + ${array[$(($index\
    \ - 1))]})) -eq 0 ]; then\n        for ((i = 0; i < $(($index / 2)); i++)); do\n\
    \            temp_string=${array[$i]}\n            array[$i]=${array[$(($index\
    \ - $i - 1))]}\n            array[$(($index - $i - 1))]=$temp_string\n       \
    \ done\n    fi\n    echo \"${array[@]}\"\n}\n\ncandidate() {\n    sort_array \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprhdmq6ky.sh: line 29: array: bad array subscript

    /tmp/tmprhdmq6ky.sh: line 29: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo \"[]\"\n  else\n    arr=($(echo \"$1\" | tr \" \" \"\\n\"\
    ))\n    size=${#arr[@]}\n    if [ $((${arr[0]} + ${arr[$(($size - 1))]})) -lt\
    \ 0 ]; then\n      for ((i = 0; i < $size; i++)); do\n        if [ $(($i % 2))\
    \ -eq 0 ]; then\n          echo -n \"\\\"${arr[$(($size - 1 - $i))]}\\\"\"\n \
    \       else\n          echo -n \"\\\"${arr[$i]}\\\"\"\n        fi\n        [\
    \ $i -lt $(($size - 1)) ] && echo -n \", \"\n      done\n    else\n      for ((i\
    \ = 0; i < $size; i++)); do\n        if [ $(($i % 2)) -eq 0 ]; then\n        \
    \  echo -n \"\\\"${arr[$i]}\\\"\"\n        else\n          echo -n \"\\\"${arr[$(($size\
    \ - 1 - $i))]}\\\"\"\n        fi\n        [ $i -lt $(($size - 1)) ] && echo -n\
    \ \", \"\n      done\n    fi\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local list=$(echo\
    \ \"$1\" | xargs)\n  local is_even=$(($(echo \"$1\" | awk '{ print $1 + $NF }')\
    \ % 2))\n  local list_length=$(echo \"$1\" | wc -w)\n  local list_sorted=()\n\
    \  local list_sorted_index=0\n  local sorted_list_index=0\n  local temp=0\n  local\
    \ temp_index=0\n  local left_index=0\n  local right_index=$((list_length - 1))\n\
    \  local left_value=0\n  local right_value=0\n  local result=()\n\n  if [[ -z\
    \ \"$list\" ]]; then\n    echo \"[]\"\n    return\n  fi\n\n  if [[ \"$list_length\"\
    \ == 1 ]]; then\n    echo \"[\\\"$list\\\"]\"\n    return\n  fi\n\n  while ((list_sorted_index\
    \ < list_length)); do\n    left_value=$(echo \"$list\" | awk '{ print $1 }')\n\
    \    right_value=$(echo \"$list\" | awk '{ print $NF }')\n\n    if [[ $((list_sorted_index\
    \ % 2)) -eq $is_even ]]; then\n      temp=$left_value\n      list=$(echo \"$list\"\
    \ | xargs | sed -e \"s/\\s$left_value//\")\n    else\n      temp=$right_value\n\
    \      list=$(echo \"$list\" | xargs | sed -e \"s/$right_value\\s//\")\n    fi\n\
    \n    for ((i = 0; i < list_length; i++)); do\n      if [[ \"$temp\" == \"$(echo\
    \ \"$list\" | awk '{ print $'$((i + 1))' }')\" ]]; then\n        temp_index=$i\n\
    \        break\n      fi\n    done\n\n    list_sorted[$list_sorted_index]=$temp\n\
    \    list_sorted_index=$((list_sorted_index + 1))\n    list=$(echo \"$list\" |\
    \ xargs | sed -e \"s/\\s$temp//\")\n  done\n\n  for ((i = 0; i < list_length;\
    \ i++)); do\n    if [[\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx7istemj.sh: line 69: unexpected token `newline'', conditional
    binary operator expected

    /tmp/tmpx7istemj.sh: line 69: syntax error near `}''

    /tmp/tmpx7istemj.sh: line 69: `}''

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local ret=\"\"\
    \n  if [[ -z \"$1\" ]]; then\n    echo \"[]\"\n    return\n  fi\n  # convert $1\
    \ to array and sort\n  local arr=$(echo \"$1\" | tr ' ' '\\n' | sort -g)\n  local\
    \ len=$(echo \"$arr\" | wc -l)\n  if [[ $(($(echo \"$arr\" | head -n 1) + $(echo\
    \ \"$arr\" | tail -n 1))) -eq 0 ]]; then\n    # if $(($(echo \"$arr\" | head -n\
    \ 1) + $(echo \"$arr\" | tail -n 1))) is 0\n    # then reverse and shift\n   \
    \ local i=1\n    while [[ $i -lt $len ]]; do\n      local item=$(echo \"$arr\"\
    \ | tail -n $(($len - $i)))\n      ret=\"$ret '\\\"$item\\\"',\"\n      let i=i+1\n\
    \    done\n    ret=\"$ret '\\\"$(echo \"$arr\" | head -n 1)\\\"'\"\n  else\n \
    \   # else shift and reverse\n    local i=1\n    while [[ $i -lt $len ]]; do\n\
    \      local item=$(echo \"$arr\" | head -n $i)\n      ret=\"$ret '\\\"$item\\\
    \"',\"\n      let i=i+1\n    done\n    ret=\"$ret '\\\"$(echo \"$arr\" | tail\
    \ -n 1)\\\"'\"\n  fi\n  # format output\n  echo \"[$ret]\"\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local IFS=\"\
    \ \"\n    local -a a=($1)\n    if [ $(( ${a[0]} + ${a[-1]} )) -eq 0 ]; then\n\
    \        echo \"[]\"\n    elif [ $(( ${a[0]} + ${a[-1]} )) -eq 1 ]; then\n   \
    \     printf '%s\\n' \"${a[@]}\" | sort -n\n    elif [ $(( ${a[0]} + ${a[-1]}\
    \ )) -eq 2 ]; then\n        printf '%s\\n' \"${a[@]}\" | sort -n\n    elif [ $((\
    \ ${a[0]} + ${a[-1]} )) -eq 3 ]; then\n        printf '%s\\n' \"${a[@]}\" | sort\
    \ -n\n    elif [ $(( ${a[0]} + ${a[-1]} )) -eq 4 ]; then\n        printf '%s\\\
    n' \"${a[@]}\" | sort -n\n    elif [ $(( ${a[0]} + ${a[-1]} )) -eq 5 ]; then\n\
    \        printf '%s\\n' \"${a[@]}\" | sort -n\n    elif [ $(( ${a[0]} + ${a[-1]}\
    \ )) -eq 6 ]; then\n        printf '%s\\n' \"${a[@]}\" | sort -n\n    elif [ $((\
    \ ${a[0]} + ${a[-1]} )) -eq 7 ]; then\n        printf '%s\\n' \"${a[@]}\" | sort\
    \ -n\n    elif [ $(( ${a[0]} + ${a[-1]} )) -eq 8 ]; then\n        printf '%s\\\
    n' \"${a[@]}\" | sort -n\n    elif [ $(( ${a[0]} + ${a[-1]} )) -eq 9 ]; then\n\
    \        printf '%s\\n' \"${a[@]}\" | sort -n\n    elif [ $(( ${a[0]} + ${a[-1]}\
    \ )) -eq 10 ]; then\n        printf '%s\\n' \"${a[@]}\" | sort -n\n    elif [\
    \ $(( ${a[0]} + ${a[\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplpt4m9pk.sh: line 43: unexpected EOF while looking for matching
    `)''

    /tmp/tmplpt4m9pk.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -n _sort_array=$1\n\
    \  echo ${_sort_array[@]} | sed 's/ /,/g'\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaz7llmpy.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpaz7llmpy.sh: line 19: local: `5'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo '[]'\n    return\n  fi\n  local nums=($1)\n  local sum=0\n\
    \  for num in \"${nums[@]}\"; do\n    ((sum+=num))\n  done\n  if ((sum%2)); then\n\
    \    sort_ascending_array \"${nums[@]}\"\n  else\n    sort_descending_array \"\
    ${nums[@]}\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local result=\"\
    \"\n  local num=\"\"\n  local -a nums=()\n  local i=0\n  local sum=0\n  if [ -z\
    \ \"$1\" ]; then\n    printf \"%s\" \"[]\"\n    return\n  fi\n  for num in $1;\
    \ do\n    nums[$i]=$num\n    ((i++))\n  done\n  ((sum = nums[0] + nums[$((i-1))]))\n\
    \  if ((sum % 2 == 0)); then\n    for ((i = $((i-1)); i >= 0; i--)); do\n    \
    \  result+='\"'${nums[$i]}'\"'\n      if ((i != 0)); then\n        result+=\"\
    , \"\n      fi\n    done\n  else\n    for ((i = 0; i < ${#nums[@]}; i++)); do\n\
    \      result+='\"'${nums[$i]}'\"'\n      if ((i != $((i-1)))); then\n       \
    \ result+=\", \"\n      fi\n    done\n  fi\n  printf \"%s\" \"[${result}]\"\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -n _array=$1\n\
    \    local -i i=0 j=0\n    local -a array=()\n    local -i sum\n    local -a result=()\n\
    \    for element in ${_array[@]}; do\n        array[i++]=$element\n    done\n\
    \    sum=$((array[0] + array[${#array[@]} - 1]))\n    if ((sum % 2 == 0)); then\n\
    \        for ((i = ${#array[@]} - 1; i >= 0; i--)); do\n            result[j++]=${array[i]}\n\
    \        done\n    else\n        for ((i = 0; i < ${#array[@]}; i++)); do\n  \
    \          result[j++]=${array[i]}\n        done\n    fi\n    echo ${result[@]}\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpehjrndio.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpehjrndio.sh: line 27: array: bad array subscript

    /tmp/tmpehjrndio.sh: line 19: local: `5'': invalid variable name for name reference

    /tmp/tmpehjrndio.sh: line 27: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local sum\n \
    \ local sorted_result\n  local array_result\n  local array_result_len\n  local\
    \ first_element\n  local last_element\n  local sorted_array\n  local array_result\n\
    \  local result\n  local i\n  array_result=($1)\n  array_result_len=${#array_result[@]}\n\
    \  if [[ $array_result_len -lt 2 ]]; then\n    echo ${array_result[@]}\n    return\n\
    \  fi\n  first_element=\"${array_result[0]}\"\n  last_element=\"${array_result[-1]}\"\
    \n  sum=$(( $first_element + $last_element ))\n  if [[ $(( sum % 2 )) -eq 0 ]];\
    \ then\n    for (( i = 0; i < $array_result_len; i++ )); do\n      sorted_array[i]=${array_result[$((array_result_len\
    \ - 1 - i))]}\n    done\n  else\n    sorted_array=(\"${array_result[@]}\")\n \
    \ fi\n  for (( i = 0; i < $array_result_len; i++ )); do\n    result[i]=\"\\\"\
    ${sorted_array[i]}\\\"\"\n  done\n  echo ${result[@]}\n}\n\ncandidate() {\n  \
    \  sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021065
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    # Find the\
    \ sum of the first and last index values of the given array\n    local sum=$((${1%%\
    \ *} + ${1##* }))\n    # The array is sorted by ascending order if the sum is\
    \ odd,\n    # or in descending order if the sum is even.\n    if ((sum % 2 ==\
    \ 0)); then\n        echo ${1} | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n    else\n\
    \        echo ${1} | tr ' ' '\\n' | sort -n -r | tr '\\n' ' '\n    fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4mvbkj03.sh: line 20: + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    res=$(echo\
    \ $1 | sed -E 's/([0-9]+)/\\1 /g')\n    arr=($res)\n    first=${arr[0]}\n    last=${arr[-1]}\n\
    \    sum=$(($first + $last))\n    if [ $((sum % 2)) -eq 0 ]; then\n        # sum\
    \ is even\n        echo $(echo $res | sed -E 's/([0-9]+)/\"\\1\"/g' | awk 'BEGIN{RS=\"\
    \ \";ORS=\",\"}{print}' | sort -r | sed 's/,$//')\n    else\n        # sum is\
    \ odd\n        echo $(echo $res | sed -E 's/([0-9]+)/\"\\1\"/g' | awk 'BEGIN{RS=\"\
    \ \";ORS=\",\"}{print}' | sort | sed 's/,$//')\n    fi\n}\n\ncandidate() {\n \
    \   sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\
    \" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpodqpbl2v.sh: line 22: arr: bad array subscript

    /tmp/tmpodqpbl2v.sh: line 23: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -r my_list=\"\
    $1\"\n  local -a my_array\n  local -i i=0\n  local -r sum=$(printf \"%s\" \"$my_list\"\
    \ | xargs -n1 | paste -sd+ | bc)\n  local -r array_length=$(echo \"$my_list\"\
    \ | wc -w)\n  IFS=' ' read -r -a my_array <<< \"$my_list\"\n  if [[ $((${my_array[0]}\
    \ + ${my_array[$((array_length - 1))]}))%2 -eq 0 ]]; then\n    for i in \"${!my_array[@]}\"\
    ; do\n      my_array[$i]=\"\\\"${my_array[$(( array_length - i - 1 ))]}\\\"\"\n\
    \    done\n  else\n    for i in \"${!my_array[@]}\"; do\n      my_array[$i]=\"\
    \\\"${my_array[$i]}\\\"\"\n    done\n  fi\n  echo \"[${my_array[*]}]\"\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_n_c0y1u.sh: line 25: my_array: bad array subscript

    /tmp/tmp_n_c0y1u.sh: line 25: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a input=(\
    \ $1 )\n  declare -a output=()\n  declare -i first=${input[0]}\n  declare -i last=${input[-1]}\n\
    \  declare -i sum=${first}+${last}\n  declare -i len=${#input[@]}\n\n  if [[ $((sum%2))\
    \ -eq 0 ]]; then\n    for (( i=0; i<$len; i++ )); do\n      output[$((len-i-1))]=${input[$i]}\n\
    \    done\n  else\n    output=(\"${input[@]}\")\n  fi\n\n  echo ${output[@]}\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9ahz1cj4.sh: line 22: input: bad array subscript

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a in=(\"\
    $@\")\n  if ((${#in[@]})); then\n    if (((in[0]+in[-1])%2)); then\n      printf\
    \ '%s\\n' \"${in[@]}\" | sort -n\n    else\n      printf '%s\\n' \"${in[@]}\"\
    \ | sort -nr\n    fi | tr '\\n' ' ' | sed 's/[[:space:]]*$//;s/ /\", \"/g;s/^/\"\
    /;s/$/\"/'\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if [ $# -eq\
    \ 0 ]; then\n        echo \"[]\"\n    elif [ $# -eq 1 ]; then\n        echo \"\
    [\\\"$1\\\"]\"\n    else\n        first=$(echo $@ | cut -d \" \" -f 1)\n     \
    \   last=$(echo $@ | cut -d \" \" -f $#)\n        sum=$(expr \"$first\" + \"$last\"\
    )\n        if [ $(( sum % 2 )) -eq 0 ]; then\n            echo $(echo \"$@\" |\
    \ tr \" \" \"\\n\" | sort -n -r | tr \"\\n\" \" \")\n        else\n          \
    \  echo $(echo \"$@\" | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \")\n     \
    \   fi\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 2
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    read -ra ARRAY\
    \ <<< \"$1\"\n    if [[ -z \"$1\" ]]; then\n        echo '[]'\n    elif [[ ${#ARRAY[@]}\
    \ -eq 1 ]]; then\n        echo '[\\'\"${ARRAY[0]}\"\\']'\n    else\n        odd=$((\
    \ (${ARRAY[0]} + ${ARRAY[${#ARRAY[@]} - 1]}) % 2 ))\n        if [[ $odd -eq 0\
    \ ]]; then\n            echo -n '[\\''\"${ARRAY[${#ARRAY[@]} - 1]}\"\\'',\n  \
    \          for i in \"${ARRAY[@]:1:$((${#ARRAY[@]} - 2))}\"; do\n            \
    \    echo -n '\\'\"$i\"\\'',\n            done\n            echo -n '\\'\"${ARRAY[0]}\"\
    \\']'\n        else\n            echo -n '[\\'\"${ARRAY[0]}\"\\'',\n         \
    \   for i in \"${ARRAY[@]:1:$((${#ARRAY[@]} - 2))}\"; do\n                echo\
    \ -n '\\'\"$i\"\\'',\n            done\n            echo -n '\\'\"${ARRAY[${#ARRAY[@]}\
    \ - 1]}\"\\']'\n        fi\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_hxawxfo.sh: line 37: unexpected EOF while looking for matching
    `''''

    /tmp/tmp_hxawxfo.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a array=($1)\n\
    \  local -i a=${array[0]}\n  local -i b=${array[-1]}\n  if (( ((a+b)) % 2 == 0\
    \ )); then\n    echo \"sorted array in descending order\"\n    echo ${array[@]/*/\\\
    \"} | tr ' ' '\\n' | sort -rn | tr '\\n' ' '\n  else\n    echo \"sorted array\
    \ in ascending order\"\n    echo ${array[@]/*/\\\"} | tr ' ' '\\n' | sort -n |\
    \ tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjgtq512w.sh: line 21: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ -z \"$1\"\
    \ ]; then\n    echo []\n  elif [ \"$#\" -eq 1 ]; then\n    echo ['\"'\"$1\"'\"\
    ']\n  else\n    echo [$(echo \"$1\" |\n      tr \" \" \"\\n\" |\n      sort --numeric-sort\
    \ --reverse |\n      awk '{printf(\"\\\"%s\\\", \", $0)}')]\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local array=()\n\
    \    local sorted=()\n    local index\n\n    array=($1)\n    if [[ \"$(( $1 %\
    \ 2 ))\" -eq 0 ]]; then\n        for (( index=${#array[@]}-1; index>=0; index--\
    \ )); do\n            sorted+=(\"\\\"${array[$index]}\\\"\")\n        done\n \
    \   else\n        for (( index=0; index<${#array[@]}; index++ )); do\n       \
    \     sorted+=(\"\\\"${array[$index]}\\\"\")\n        done\n    fi\n    printf\
    \ '%s\\n' \"[${sorted[*]}]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9xvy6g4a.sh: line 24: % 2 : syntax error: operand expected (error
    token is "% 2 ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local sorted_array\n\
    \    if [[ -z \"$1\" ]]; then\n        echo '[]'\n    else\n        local sum=$(bc\
    \ <<<\"$(head -1 <<<\"$1\") + $(tail -1 <<<\"$1\")\")\n        local sorted_array=($(echo\
    \ \"$1\" | tr ' ' '\\n' | sort))\n        if [[ $((sum % 2)) -eq 0 ]]; then\n\
    \            printf '[%s]\\n' \"${sorted_array[@]}\" | tac -s ' '\n        else\n\
    \            printf '[%s]\\n' \"${sorted_array[@]}\"\n        fi\n    fi\n}\n\n\
    candidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # if the arg\
    \ is not given, return empty string\n  if [[ -z \"$1\" ]]; then\n    echo '\"\"\
    '\n    return 0\n  fi\n\n  # parse arg\n  local arg\n  arg=\"$(echo \"$1\" | tr\
    \ ' ' '\\n')\"\n\n  # get first index value and last index value\n  first_value=$(echo\
    \ \"$arg\" | head -n 1)\n  last_value=$(echo \"$arg\" | tail -n 1)\n\n  # if sum(\
    \ first index value, last index value) is odd,\n  # sort it in ascending order\n\
    \  if (( $(($first_value + $last_value)) % 2 )); then\n    echo \"$arg\" | sort\
    \ -n | jq -Rc 'split(\"\\n\")'\n  # otherwise, sort it in descending order\n \
    \ else\n    echo \"$arg\" | sort -nr | jq -Rc 'split(\"\\n\")'\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ \"$#\" -eq\
    \ 0 ]; then\n    echo \"[]\"\n  else\n    local list=(\"$@\")\n    local sorted_list=()\n\
    \    if [ $(( list[0] + list[-1] )) -eq 0 ]; then\n      sorted_list=($(echo \"\
    ${list[@]}\" | tr ' ' '\\n' | sort -n))\n    else\n      sorted_list=($(echo \"\
    ${list[@]}\" | tr ' ' '\\n' | sort -n -r))\n    fi\n    local result=$(IFS=,;\
    \ echo \"[${sorted_list[*]}]\")\n    echo \"${result// /\\\"}\"\n  fi\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    # Transform\
    \ the input into an array:\n    array=()\n    for word in $1; do\n        array+=($word)\n\
    \    done\n    # If the length of the array is zero, return an empty array.\n\
    \    if [ ${#array[@]} == 0 ]; then\n        echo \"[]\"\n        return\n   \
    \ fi\n    # If the length of the array is one, return the array.\n    if [ ${#array[@]}\
    \ == 1 ]; then\n        echo \"[\\\"${array[0]}\\\"]\"\n        return\n    fi\n\
    \    # Sort the array and output it.\n    if [ $((${array[0]} + ${array[-1]}))\
    \ -eq 1 ]; then\n        sort -r -n <<< ${array[@]}\n    else\n        sort -n\
    \ <<< ${array[@]}\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local ary=$1\n\
    \  local len=$(($(echo \"$ary\" | wc -w) - 1))\n  echo \"$ary\" | {\n    while\
    \ read -r w; do\n      if [[ $((len%2)) -eq 0 ]]; then\n        printf '\"%s\"\
    \\n' \"$w\"\n      else\n        printf '\"%s\"\\n' \"$w\" | tac\n      fi\n \
    \     ((len--))\n    done\n  }\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: -1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # Print a sorted\
    \ list of array\n  # >>> sort_array\n  local -a res\n  for n in ${@:-$(</dev/stdin)};\
    \ do\n    res+=(\"$n\")\n  done\n  if (((${res[0]} + ${res[-1]}) & 1)); then\n\
    \    echo $(python3 << EOF\nprint(\"[\" + \",\".join('\"' + str(n) + '\"' for\
    \ n in sorted(${res[*]})) + \"]\")\nEOF\n    )\n  else\n    echo $(python3 <<\
    \ EOF\nprint(\"[\" + \",\".join('\"' + str(n) + '\"' for n in sorted(${res[*]},\
    \ reverse=True)) + \"]\")\nEOF\n    )\n  fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=32 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=27 encoding='utf-8'>
  timestamp: 1660021071
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [[ $# -ne\
    \ 1 ]]; then\n    echo \"Usage: $(basename $0) <space-separated-list>\" >&2\n\
    \    exit 1\n  fi\n  local -a nums\n  read -ra nums <<<\"$1\"\n  if (( (${nums[0]}\
    \ + ${nums[${#nums[@]} - 1]}) % 2 == 0 )); then\n    echo \"[$(IFS=', '; echo\
    \ \"${nums[*]}\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' ')]\"\n  else\n    echo\
    \ \"[$(IFS=', '; echo \"${nums[*]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')]\"\
    \n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpboelhaxo.sh: line 25: nums: bad array subscript

    /tmp/tmpboelhaxo.sh: line 25: ((: ( + ) % 2 == 0 : syntax error: operand expected
    (error token is ") % 2 == 0 ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if [[ \"$1\"\
    \ == \"\" ]]; then\n        echo \"[]\"\n    else\n        first_index=$(echo\
    \ \"$1\" | cut -d \" \" -f 1)\n        last_index=$(echo \"$1\" | cut -d \" \"\
    \ -f $(echo \"$1\" | wc -w))\n        if [[ $(expr $first_index + $last_index)%2\
    \ -eq 0 ]]; then\n            echo \"[$(echo \"$1\" | xargs -n 1 | sort -nr |\
    \ awk '{print \"'\\''\"$1\"'\\''\"}' | tr '\\n' ',' | sed -e 's/,$//g')]\"\n \
    \       else\n            echo \"[$(echo \"$1\" | xargs -n 1 | sort -n | awk '{print\
    \ \"'\\''\"$1\"'\\''\"}' | tr '\\n' ',' | sed -e 's/,$//g')]\"\n        fi\n \
    \   fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -n __arr=$1\n\
    \    local -a __A\n    read -ra __A <<< \"$__arr\"\n    (( ${#__A[@]} <= 1 ))\
    \ && echo \"$__arr\" && return 0\n    local __sum=$(( ${__A[0]} + ${__A[-1]} ))\n\
    \    local __order=\"-n\"\n    (( __sum % 2 == 0 )) && __order=\"-nr\"\n    printf\
    \ '[%s]\\n' \"$(printf '\"%s\" ' \"${__A[@]}\" | sort $__order)\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqojj7a6g.sh: line 19: local: `'': not a valid identifier

    /tmp/tmpqojj7a6g.sh: line 19: local: `5'': invalid variable name for name reference

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local tmp\n\
    \    local -a a\n    local -a b\n    local -a c\n    local -i i\n    local -i\
    \ count=0\n    a=($1)\n    if [[ $[a[0]+a[${#a[@]}-1]]%2 -eq 0 ]]; then\n    \
    \    for ((i=0; i<${#a[@]}; i++)); do\n            b[$i]=${a[$i]}\n        done\n\
    \        for ((i=0; i<${#a[@]}; i++)); do\n            c[$i]=${b[${#a[@]}-1-$i]}\n\
    \        done\n        echo \"[${c[@]}]\"\n    else\n        for ((i=0; i<${#a[@]};\
    \ i++)); do\n            b[$i]=${a[$i]}\n        done\n        while [ $count\
    \ -lt ${#a[@]} ]; do\n            for ((i=0; i<${#a[@]}-1; i++)); do\n       \
    \         if [[ ${b[$i]} -gt ${b[$i+1]} ]]; then\n                    tmp=${b[$i]}\n\
    \                    b[$i]=${b[$i+1]}\n                    b[$i+1]=$tmp\n    \
    \            fi\n            done\n            ((count++))\n        done\n   \
    \     echo \"[${b[@]}]\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: '/tmp/tmpitahk0ar.sh: line 26: a: bad array subscript

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local arr=(\"\
    $@\")\n    if [ ${#arr[@]} -eq 0 ]; then\n        echo \"[]\"\n    elif [ ${#arr[@]}\
    \ -eq 1 ]; then\n        echo \"[\\\"${arr[0]}\\\"]\"\n    else\n        sum=$((${arr[0]}\
    \ + ${arr[-1]}))\n        if [ $(($sum % 2)) -eq 0 ]; then\n            echo \"\
    [$(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -r | tr '\\n' ',' | sed 's/.$//')]\"\
    \n        else\n            echo \"[$(echo \"${arr[@]}\" | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ',' | sed 's/.$//')]\"\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    args=(\"$@\"\
    )\n    if [ ${#args[@]} -eq 0 ]; then\n        echo \"[]\"\n    elif [ ${#args[@]}\
    \ -eq 1 ]; then\n        echo \"[\\\"${args[0]}\\\"]\"\n    else\n        first=\"\
    ${args[0]}\"\n        last=\"${args[-1]}\"\n        if (((first + last) % 2 ==\
    \ 0)); then\n            echo \"[\\\"${args[@]}\\\"]\" | sed -e 's/ /\", \"/g'\n\
    \        else\n            echo \"[\\\"${args[@]}\\\"]\" | sed -e 's/ /\", \"\
    /g' | rev\n        fi\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    declare -a\
    \ result\n    declare -a array\n\n    # extract the array\n    counter=0\n   \
    \ for i in $1; do\n        array[counter]=$i\n        counter=$(($counter + 1))\n\
    \    done\n\n    # sort\n    if [ $((${array[0]} + ${array[$(($counter - 1))]}))\
    \ -eq 1 ]; then\n        counter2=0\n        for i in ${array[@]}; do\n      \
    \      result[counter2]=$i\n            counter2=$(($counter2 + 1))\n        done\n\
    \    else\n        counter2=$(($counter - 1))\n        for i in ${array[@]}; do\n\
    \            result[counter2]=$i\n            counter2=$(($counter2 - 1))\n  \
    \      done\n    fi\n\n    # print the result\n    for i in ${result[@]}; do\n\
    \        printf \"\\\"%s\\\"\" $i\n        printf \"%s\" \",\"\n    done\n   \
    \ echo\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n  \
    \  [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\"\
    \ ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n   \
    \ [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2g6mvw0y.sh: line 30: array: bad array subscript

    /tmp/tmp2g6mvw0y.sh: line 30: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a array\n\
    \    local array_first_value\n    local array_last_value\n    local array_sum\n\
    \    local -a sorted_array\n    local -a array_result\n    local array_item\n\
    \    IFS=' ' read -r -a array <<< \"$1\"\n    array_first_value=${array[0]}\n\
    \    array_last_value=${array[-1]}\n    array_sum=$(( array_first_value + array_last_value\
    \ ))\n    if (( array_sum % 2 == 0 )); then\n        sorted_array=($(printf \"\
    %s\\n\" \"${array[@]}\" | sort -nr))\n    else\n        sorted_array=($(printf\
    \ \"%s\\n\" \"${array[@]}\" | sort -n))\n    fi\n    for array_item in \"${sorted_array[@]}\"\
    ; do\n        array_result+=(\\\"\"$array_item\"\\\")\n    done\n    echo ${array_result[@]}\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp25yxvp0d.sh: line 28: array: bad array subscript

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a nums=($1)\n\
    \  local nums_len=${#nums[@]}\n  local sum=$(( ${nums[0]} + ${nums[$nums_len-1]}\
    \ ))\n  for (( i=0; i<$nums_len; i++ )); do\n    for (( j=$i; j<$nums_len; j++\
    \ )); do\n      if [[ $(( $sum % 2 )) == 0 ]]; then\n        if [[ ${nums[$i]}\
    \ -gt ${nums[$j]} ]]; then\n          tmp=${nums[$i]}\n          nums[$i]=${nums[$j]}\n\
    \          nums[$j]=$tmp\n        fi\n      else\n        if [[ ${nums[$i]} -lt\
    \ ${nums[$j]} ]]; then\n          tmp=${nums[$i]}\n          nums[$i]=${nums[$j]}\n\
    \          nums[$j]=$tmp\n        fi\n      fi\n    done\n  done\n  echo \"${nums[@]}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpffm7fdoa.sh: line 21: nums: bad array subscript

    /tmp/tmpffm7fdoa.sh: line 21: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local odd_flag=0\n\
    \    local left=${1% *}\n    local right=${1##* }\n    local sum=$(( $left + $right\
    \ ))\n    if [[ $(($sum % 2)) -eq 1 ]]; then\n        odd_flag=1\n    fi\n   \
    \ sort_array_iter \"0\" \"\" \"${1}\" $odd_flag\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7x6l6456.sh: line 22: +  : syntax error: operand expected (error
    token is "+  ")

    /tmp/tmp7x6l6456.sh: line 26: sort_array_iter: command not found

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local array=()\n\
    \  for i in $1; do\n    array+=(\"$i\")\n  done\n  local sum=$((array[0] + array[-1]))\n\
    \  if ((sum % 2 == 0)); then\n    jq -n -s --argjson array \"[${array[*]}]\" '[$array\
    \ | sort] | reverse'\n  else\n    jq -n -s --argjson array \"[${array[*]}]\" '[$array\
    \ | sort]'\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm6icbq6f.sh: line 23: array: bad array subscript

    /tmp/tmpm6icbq6f.sh: line 25: jq: command not found

    /tmp/tmpm6icbq6f.sh: line 25: jq: command not found

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  if [ $# -eq 0\
    \ ]; then\n    echo '[]'\n    return 0\n  fi\n  if [ $# -eq 1 ]; then\n    echo\
    \ '[\\\"$1\\\"]'\n    return 0\n  fi\n  local -a result\n  for i in $@; do\n \
    \   result+=($i)\n  done\n  local -a result_string\n  if [ \"$((result[0] + result[-1]))\"\
    \ -eq \"1\" ]; then\n    result_string=($(printf '\"%s\" ' \"${result[@]}\" |\
    \ sort))\n  else\n    result_string=($(printf '\"%s\" ' \"${result[@]}\" | sort\
    \ -r))\n  fi\n  echo \"[${result_string[*]}]\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  (($# < 1)) &&\
    \ return\n  arr=()\n  for item in \"$@\"; do\n    arr+=($item)\n  done\n  if (($(echo\
    \ \"${arr[0]} + ${arr[-1]}\" | bc) % 2 == 0)); then\n    arr=($(echo \"${arr[@]}\"\
    \ | tr ' ' '\\n' | sort -nr))\n  else\n    arr=($(echo \"${arr[@]}\" | tr ' '\
    \ '\\n' | sort -n))\n  fi\n  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpf4pqufid.sh: line 24: arr: bad array subscript

    (standard_in) 1: syntax error

    /tmp/tmpf4pqufid.sh: line 24: ((: % 2 == 0: syntax error: operand expected (error
    token is "% 2 == 0")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local values=(${1//\
    \ / })\n    local sorted_values=()\n    for value in \"${values[@]}\"; do\n  \
    \      sorted_values+=(\"\\\"$value\\\"\")\n    done\n    if (($(( \"${sorted_values[0]}\"\
    \ + \"${sorted_values[${#sorted_values[@]} - 1]}\" )) % 2 == 0)); then\n     \
    \   echo \"[${sorted_values[@]}]\"\n    else\n        echo \"[${sorted_values[@]::\
    \ -1}]\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_ombwobg.sh: line 24: sorted_values: bad array subscript

    /tmp/tmp_ombwobg.sh: line 24: +  : syntax error: operand expected (error token
    is "+  ")

    /tmp/tmp_ombwobg.sh: line 24: "5" + "5" : syntax error: operand expected (error
    token is ""5" + "5" ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # a sequence\
    \ of shell commands that reads a string from standard input, and outputs a corresponding\
    \ string to standard output\n  # $((...)) is a Bash construct, essentially evaluates\
    \ a mathematical expression and returns the result\n  # ${1// /$'\\n'} replaces\
    \ each space in string $1 with a newline\n  # sort -n sorts the string numerically\n\
    \  # xargs -n1 returns one number per line\n  # awk '{ x[NR]=$0 } END { y=NR/2;\
    \ if (NR%2) y=int(y)+1; for (i=y; i<=NR; i++) print x[i]; for (i=1; i<y; i++)\
    \ print x[i] }'\n  echo \"$1\" | xargs -n1 | sort -n | awk '{ x[NR]=$0 } END {\
    \ y=NR/2; if (NR%2) y=int(y)+1; for (i=y; i<=NR; i++) print x[i]; for (i=1; i<y;\
    \ i++) print x[i] }' | xargs -n1 | while read -r i; do echo -n \"\\\"$i\\\",\"\
    ; done | sed 's/,$//'\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  array=(${1//\
    \ / })\n  is_odd=$(expr \\( ${array[0]} + ${array[${#array[@]} - 1]} \\) % 2)\n\
    \  for i in \"${!array[@]}\"; do\n    for j in \"${!array[@]}\"; do\n      if\
    \ [ $is_odd -eq 1 ]; then\n        if [ \"${array[$i]}\" -lt \"${array[$j]}\"\
    \ ]; then\n          tmp=${array[$i]}\n          array[$i]=${array[$j]}\n    \
    \      array[$j]=$tmp\n        fi\n      else\n        if [ \"${array[$i]}\" -gt\
    \ \"${array[$j]}\" ]; then\n          tmp=${array[$i]}\n          array[$i]=${array[$j]}\n\
    \          array[$j]=$tmp\n        fi\n      fi\n    done\n  done\n  echo \"${array[@]}\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpmlo375e8.sh: line 20: array: bad array subscript

    expr: non-integer argument

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local list=\"\
    $@\"\n  local sum=0\n  local odd=0\n  local even=0\n  local first=\"\"\n  local\
    \ last=\"\"\n  local array=()\n  local i=0\n  for element in ${list}; do\n   \
    \ if [[ ! ${element} =~ ^[0-9]+$ ]]; then\n      echo \"Invalid input: ${element}\"\
    \n      return 1\n    fi\n    array[${i}]=${element}\n    (( i += 1 ))\n  done\n\
    \  if [[ ${#array[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return 0\n  fi\n  first=${array[0]}\n\
    \  last=${array[${#array[@]}-1]}\n  sum=$(( ${first} + ${last} ))\n  (( sum %\
    \ 2 == 0 )) && even=1\n  if [[ ${even} -eq 1 ]]; then\n    for (( j = 0; j < ${#array[@]};\
    \ j++ )); do\n      for (( k = j; k < ${#array[@]}; k++ )); do\n        if [[\
    \ ${array[${j}]} -lt ${array[${k}]} ]]; then\n          local tmp=${array[${j}]}\n\
    \          array[${j}]=${array[${k}]}\n          array[${k}]=${tmp}\n        fi\n\
    \      done\n    done\n  else\n    for (( j = 0; j < ${#array[@]}; j++ )); do\n\
    \      for (( k = j; k < ${#array[@]}; k++ )); do\n        if [[ ${array[${j}]}\
    \ -gt ${array[${k}]} ]]; then\n          local tmp=${array[${j}]}\n          array[${j}]=${array[${k}]}\n\
    \          array[${k}]=${tmp}\n        fi\n      done\n    done\n  fi\n  local\
    \ str=\"\"\n  for element in ${array[@]}; do\n    [[ -z ${str} ]] && str=\"${element}\"\
    \ || str=\"${str} ${element}\"\n  done\n  echo \"[\\\"${str}\\\"]\"\n}\n\ncandidate()\
    \ {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3\
    \ 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5\
    \ 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a arr=()\n\
    \  local i=0\n\n  local -a elems=($(echo $1 | tr ' ' '\\n'))\n  for elem in \"\
    ${elems[@]}\"; do\n    arr[$i]=$elem\n    i=$(($i + 1))\n  done\n\n  if [[ $((${arr[0]}\
    \ + ${arr[-1]}))%2 -eq 0 ]]; then\n    echo \"${arr[@]}\" | tr ' ' '\\n' | sort\
    \ -r | tr '\\n' ' '\n  else\n    echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n |\
    \ tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg3r5deau.sh: line 28: arr: bad array subscript

    /tmp/tmpg3r5deau.sh: line 28: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -a list=(\
    \ $1 )\n  local retval=()\n  local -i sum=$(( list[0] + list[-1] ))\n  if (( sum\
    \ % 2 == 0 )); then\n    for (( i=${#list[@]}-1; i>=0; i-- )); do\n      retval+=(\"\
    \\\"${list[i]}\\\"\")\n    done\n  else\n    for (( i=0; i<${#list[@]}; i++ ));\
    \ do\n      retval+=(\"\\\"${list[i]}\\\"\")\n    done\n  fi\n  echo \"[${retval[*]}]\"\
    \n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\"\
    ) = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2ffvnk8a.sh: line 21: list: bad array subscript

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local index=0\n\
    \    local index_last=$(($(echo $1 | wc -w) - 1))\n    local sum=$((${1%% *} +\
    \ ${1##* }))\n    if [ $(($sum % 2)) -eq 0 ]; then\n        echo -n \"[\"\n  \
    \      for i in $1; do\n            echo -n \\\"$i\\\"\n            if [ $index\
    \ -lt $index_last ]; then\n                echo -n \", \"\n            fi\n  \
    \          index=$(($index + 1))\n        done\n        echo \"]\"\n    else\n\
    \        echo -n \"[\"\n        for i in $1; do\n            echo -n \\\"$i\\\"\
    \n            if [ $index -lt $index_last ]; then\n                echo -n \"\
    , \"\n            fi\n            index=$(($index + 1))\n        done\n      \
    \  echo \"]\"\n    fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_gsu1snw.sh: line 21: + : syntax error: operand expected (error
    token is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a a\n\
    \    local i=0\n    read -a a <<< \"$1\"\n    local len=${#a[@]}\n    local sum=$((\
    \ ${a[0]} + ${a[$(( len - 1 ))]} ))\n    for ((i=0; i<len-1; i++)); do\n     \
    \   for ((j=i+1; j<len; j++)); do\n            if [[ $(( sum % 2 )) -eq 0 ]];\
    \ then\n                [[ ${a[$i]} -lt ${a[$j]} ]] && echo \"Swapping ${a[$i]}\
    \ and ${a[$j]}\"\n                { temp=${a[$i]}; a[$i]=${a[$j]}; a[$j]=$temp;\
    \ }\n            else\n                [[ ${a[$i]} -gt ${a[$j]} ]] && echo \"\
    Swapping ${a[$i]} and ${a[$j]}\"\n                { temp=${a[$i]}; a[$i]=${a[$j]};\
    \ a[$j]=$temp; }\n            fi\n        done\n    done\n    echo \"[$(IFS=,;\
    \ echo \"${a[*]}\")]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgnwo4_es.sh: line 23: a: bad array subscript

    /tmp/tmpgnwo4_es.sh: line 23: +  : syntax error: operand expected (error token
    is "+  ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a arr=()\n\
    \    local first=()\n    local last=()\n    local sorted=()\n    local output=\"\
    \"\n    for num in $1; do\n        arr+=(\"$num\")\n    done\n    if [[ $((${arr[0]}\
    \ + ${arr[-1]}))%2 -eq 0 ]]; then\n        sorted=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -nr))\n    else\n        sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort\
    \ -n))\n    fi\n    for num in ${sorted[@]}; do\n        output=\"$output,\\\"\
    $num\\\"\"\n    done\n    echo \"[\"${output:1}\"]\"\n}\n\ncandidate() {\n   \
    \ sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\"\
    \ ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\"\
    ) = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1\
    \ 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42\
    \ 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkk7zzg7w.sh: line 27: arr: bad array subscript

    /tmp/tmpkk7zzg7w.sh: line 27: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # array is a\
    \ list and a non-negative integer is an element in the list\n  local array=($1)\n\
    \  # sort the array\n  local sum=$((${array[0]} + ${array[-1]}))\n  # check if\
    \ the sum of first element and last element of array is odd or even\n  if [[ $((sum\
    \ % 2)) -eq 0 ]]; then\n    # sort the array in descending order\n    echo \"\
    $(printf '[\\\"%s\\\"]\\n' \"${array[@]}\" | sort -nr)\"\n  else\n    # sort the\
    \ array in ascending order\n    echo \"$(printf '[\\\"%s\\\"]\\n' \"${array[@]}\"\
    \ | sort -n)\"\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") =\
    \ \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7zla2xc8.sh: line 22: array: bad array subscript

    /tmp/tmp7zla2xc8.sh: line 22: + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    if [[ -z \"\
    $1\" ]]; then\n        printf \"[]\"\n    else\n        local array=($1)\n   \
    \     local first=${array[0]}\n        local last=${array[$((${#array[@]} - 1))]}\n\
    \        local sum=$((first + last))\n        local num_odd=0\n        local num_even=0\n\
    \        local i\n        for i in ${array[@]}; do\n            if [[ $((i % 2))\
    \ == 0 ]]; then\n                num_even=$((num_even + 1))\n            else\n\
    \                num_odd=$((num_odd + 1))\n            fi\n        done\n    \
    \    if [[ $sum == 0 ]]; then\n            echo \"[]\"\n        elif [[ $((sum\
    \ % 2)) == 0 ]]; then\n            # even\n            for ((i = 0; i < ${#array[@]};\
    \ i++)); do\n                if [[ $((array[i] % 2)) == 0 ]]; then\n         \
    \           printf \"\\\"%s\\\"\" \"${array[i]}\"\n                    if [[ $i\
    \ != $((${#array[@]} - 1)) ]]; then\n                        printf \",\"\n  \
    \                  fi\n                fi\n            done\n            for ((i\
    \ = ${#array[@]} - 1; i >= 0; i--)); do\n                if [[ $((array[i] % 2))\
    \ != 0 ]]; then\n                    printf \",\"\n                    printf\
    \ \"\\\"%s\\\"\" \"${array[i]}\"\n                fi\n            done\n     \
    \   else\n            # odd\n            for ((i = ${#array[@]} - 1; i >= 0; i--));\
    \ do\n                if [[ $((array[i] % 2)) == 0 ]]; then\n                \
    \    printf \"\\\"%s\\\"\" \"${array[i]}\"\n                    if [[ $i != 0\
    \ ]]; then\n                        printf \",\"\n                    fi\n   \
    \             fi\n            done\n            for ((i = 0; i < ${#array[@]};\
    \ i++)); do\n                if [[ $((array[i] % 2)) != 0 ]]; then\n         \
    \           printf \",\"\n                    printf \"\\\"%s\\\"\" \"${array[i]}\"\
    \n                fi\n            done\n        fi\n    fi\n}\n\ncandidate() {\n\
    \    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") =\
    \ \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0\
    \ 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4\
    \ 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"\
    15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\"\
    ) = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660021066
- exit_code: 0
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  declare -a data\n\
    \  array_len=0\n  for i in $1; do\n    array_len=$((array_len+1))\n    data+=($i)\n\
    \  done\n  if [[ $(((${data[0]}+${data[$((array_len-1))]})))%2 -eq 0 ]]; then\n\
    \    for ((i = 0; i < $((array_len-1)); i++)); do\n      for ((j = 0; j < $((array_len-1));\
    \ j++)); do\n        if [[ ${data[$j]} -lt ${data[$((j+1))]} ]]; then\n      \
    \    temp=${data[$j]}\n          data[$j]=${data[$((j+1))]}\n          data[$((j+1))]=$temp\n\
    \        fi\n      done\n    done\n  else\n    for ((i = 0; i < $((array_len-1));\
    \ i++)); do\n      for ((j = 0; j < $((array_len-1)); j++)); do\n        if [[\
    \ ${data[$j]} -gt ${data[$((j+1))]} ]]; then\n          temp=${data[$j]}\n   \
    \       data[$j]=${data[$((j+1))]}\n          data[$((j+1))]=$temp\n        fi\n\
    \      done\n    done\n  fi\n  echo \"${data[@]}\"\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmprevtwgtr.sh: line 25: data: bad array subscript

    /tmp/tmprevtwgtr.sh: line 25: (+): syntax error: operand expected (error token
    is ")")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  _list=$(echo\
    \ \"$1\" | tr \" \" \"\\n\")\n  _length=$(echo -n \"$_list\" | wc -l)\n  _sum=$(echo\
    \ \"$_list\" | cut -d \" \" -f 1 | tr -d \"\\\"\")\n  _sum=$((_sum + $(echo \"\
    $_list\" | cut -d \" \" -f $_length | tr -d \"\\\"\")))\n  _data=\"\"\n  while\
    \ read _item; do\n    _data+=\"$_item \"\n  done <<< \"$_list\"\n  [[ $_sum%2\
    \ -eq 0 ]] && _data=$(echo \"$_data\" | tr \" \" \"\\n\" | sort -nr | tr \"\\\
    n\" \" \")\n  echo \"[$_data]\"\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate\
    \ \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15\
    \ 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    /tmp/tmphdwck374.sh: line 22: _sum + : syntax error: operand expected (error token
    is "+ ")

    cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    /tmp/tmphdwck374.sh: line 22: _sum + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  # [1, 2, 3, 4,\
    \ 5, 6]\n  # [6, 5, 4, 3, 2, 1]\n  # first_value = 1\n  # last_value = 6\n  #\
    \ if first_value + last_value is even [2, 4, 6, 8]\n  # [6, 5, 4, 3, 2, 1]\n \
    \ # if first_value + last_value is odd [1, 3, 5, 7]\n  # [1, 2, 3, 4, 5, 6]\n\
    \  # first_value + last_value\n  # 1 + 6\n  # 7 is odd\n  # [1, 2, 3, 4, 5, 6]\n\
    \  local -a array=(\"$@\")\n  local -a new_array=()\n  local first_value\n  local\
    \ last_value\n  local sum\n  for i in \"${array[@]}\"; do\n    new_array+=(\"\\\
    \"$i\\\"\")\n  done\n  first_value=${new_array[0]}\n  last_value=${new_array[-1]}\n\
    \  sum=$((first_value + last_value))\n  if [[ $((sum % 2)) -eq 0 ]]; then\n  \
    \  echo \"[${new_array[@]::-1}]\"\n  else\n    echo \"[${new_array[@]}]\"\n  fi\n\
    }\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"\
    2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"\
    6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate\
    \ \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14\
    \ 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpiw1sap6w.sh: line 41: "": syntax error: operand expected (error
    token is """")

    /tmp/tmpiw1sap6w.sh: line 41: "5": syntax error: operand expected (error token
    is ""5"")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local list=$1\n\
    \  # write a function body\n  # return an array\n  local sorted_list=()\n  local\
    \ i\n  local elem\n  if [[ $((${list[0]} + ${list[-1]})) -eq 0 ]]; then\n    return\n\
    \  fi\n  if [[ $((${list[0]} + ${list[-1]})) -eq 1 ]]; then\n    for ((i=0; i<${#list[@]};\
    \ i++)); do\n      elem=\"${list[$i]}\"\n      sorted_list+=(\"$elem\")\n    done\n\
    \    echo \"${sorted_list[@]}\"\n    return\n  fi\n  if [[ $((${list[0]} + ${list[-1]}))\
    \ -gt 1 ]]; then\n    for ((i=${#list[@]}-1; i>=0; i--)); do\n      elem=\"${list[$i]}\"\
    \n      sorted_list+=(\"$elem\")\n    done\n    echo \"${sorted_list[@]}\"\n \
    \   return\n  fi\n}\n\ncandidate() {\n    sort_array \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5\") = \"5\" ]]\n\
    \    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2 3 4 5\" ]]\n    [[ $(candidate\
    \ \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n    [[ $(candidate \"2 1\") = \"\
    1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11 0\") = \"0 11 15 32 42 87\" ]]\n\
    \    [[ $(candidate \"21 14 23 11\") = \"23 21 14 11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbjkmgil5.sh: line 25: list: bad array subscript

    /tmp/tmpbjkmgil5.sh: line 25: + : syntax error: operand expected (error token
    is "+ ")

    /tmp/tmpbjkmgil5.sh: line 25: list: bad array subscript

    /tmp/tmpbjkmgil5.sh: line 25: 5 + : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660021066
- exit_code: 1
  program: "#!/bin/bash\n# Given an array of non-negative integers, return a cosh\
    \ of the given array after sorting,\n# you will sort the given array in ascending\
    \ order if the sum( first index value, last index value) is odd,\n# or sort it\
    \ in descending order if the sum( first index value, last index value) is even.\n\
    # Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\
    \")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3\
    \ 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array\
    \ \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"',\
    \ '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local array=(\
    \ $1 )\n    if [ $(( $1 + ${#array[@]} - 1 )) -eq 0 ]; then\n        sort_desc\
    \ \"$1\"\n    else\n        sort_asc \"$1\"\n    fi\n}\n\ncandidate() {\n    sort_array\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"5\") = \"5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5\") = \"0 1 2\
    \ 3 4 5\" ]]\n    [[ $(candidate \"2 4 3 0 1 5 6\") = \"6 5 4 3 2 1 0\" ]]\n \
    \   [[ $(candidate \"2 1\") = \"1 2\" ]]\n    [[ $(candidate \"15 42 87 32 11\
    \ 0\") = \"0 11 15 32 42 87\" ]]\n    [[ $(candidate \"21 14 23 11\") = \"23 21\
    \ 14 11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfgovh799.sh: line 23: sort_asc: command not found

    /tmp/tmpfgovh799.sh: line 23: sort_asc: command not found

    '
  stdout: ''
  timestamp: 1660021066
