language: sh
name: HumanEval_92_any_int
results:
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local retval=false\n  # one of the numbers\
    \ is equal to the sum of the other two\n  if [[ $(echo \"${1} == ${2} + ${3}\"\
    \ | bc) -eq 1 ]]; then\n    retval=true\n  elif [[ $(echo \"${2} == ${1} + ${3}\"\
    \ | bc) -eq 1 ]]; then\n    retval=true\n  elif [[ $(echo \"${3} == ${1} + ${2}\"\
    \ | bc) -eq 1 ]]; then\n    retval=true\n  fi\n  # all numbers are integers\n\
    \  if [[ ${retval} == true ]]; then\n    if [[ \"${1}\" == *.* ]]; then\n    \
    \  retval=false\n    elif [[ \"${2}\" == *.* ]]; then\n      retval=false\n  \
    \  elif [[ \"${3}\" == *.* ]]; then\n      retval=false\n    fi\n  fi\n  echo\
    \ \"${retval}\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Check if all arguments are integers.\n\
    \    if ! [[ \"$1\" =~ ^-?[0-9]+$ ]] || ! [[ \"$2\" =~ ^-?[0-9]+$ ]] || ! [[ \"\
    $3\" =~ ^-?[0-9]+$ ]]; then\n        echo \"false\"\n        return 1\n    fi\n\
    \n    # Check if any of the arguments equals the sum of the other two arguments.\n\
    \    if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq $1 + $3 ]] || [[ $3 -eq $1 + $2 ]];\
    \ then\n        echo \"true\"\n        return 0\n    fi\n\n    echo \"false\"\n\
    \    return 1\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8s_vk2cz.sh: line 26: syntax error in conditional expression

    /tmp/tmp8s_vk2cz.sh: line 26: syntax error near `+''

    /tmp/tmp8s_vk2cz.sh: line 26: `    if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq $1 + $3
    ]] || [[ $3 -eq $1 + $2 ]]; then''

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Hint: You may use the command expr\n\
    \  if [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$\
    \ ]]; then\n    # Put your code below\n    if [ $(( $1 + $2 )) -eq $3 ] || [ $((\
    \ $1 + $3 )) -eq $2 ] || [ $(( $2 + $3 )) -eq $1 ]; then\n      echo \"true\"\n\
    \    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ ! $1 =~ ^-?[0-9]+$ ]]; then return\
    \ 1; fi\n  if [[ ! $2 =~ ^-?[0-9]+$ ]]; then return 1; fi\n  if [[ ! $3 =~ ^-?[0-9]+$\
    \ ]]; then return 1; fi\n  if [[ $1 -eq $2 + $3 ]]; then return 0; fi\n  if [[\
    \ $2 -eq $1 + $3 ]]; then return 0; fi\n  if [[ $3 -eq $1 + $2 ]]; then return\
    \ 0; fi\n  return 1\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx7_ltmqm.sh: line 22: syntax error in conditional expression

    /tmp/tmpx7_ltmqm.sh: line 22: syntax error near `+''

    /tmp/tmpx7_ltmqm.sh: line 22: `  if [[ $1 -eq $2 + $3 ]]; then return 0; fi''

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if ! [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n\
    \    echo \"false\"\n    return 0\n  fi\n  if ! [[ \"$2\" =~ ^-?[0-9]+$ ]]; then\n\
    \    echo \"false\"\n    return 0\n  fi\n  if ! [[ \"$3\" =~ ^-?[0-9]+$ ]]; then\n\
    \    echo \"false\"\n    return 0\n  fi\n  if [ \"$1\" -eq \"$(($2 + $3))\" ];\
    \ then\n    echo \"true\"\n    return 0\n  fi\n  if [ \"$2\" -eq \"$(($1 + $3))\"\
    \ ]; then\n    echo \"true\"\n    return 0\n  fi\n  if [ \"$3\" -eq \"$(($1 +\
    \ $2))\" ]; then\n    echo \"true\"\n    return 0\n  fi\n  echo \"false\"\n}\n\
    \ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Write your solution here\n    return\
    \ 0\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"\
    2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $(bc <<< \"$1==$2+$3\" | tr -d\
    \ '\\n') == \"1\" ]]; then\n        echo true\n    elif [[ $(bc <<< \"$2==$1+$3\"\
    \ | tr -d '\\n') == \"1\" ]]; then\n        echo true\n    elif [[ $(bc <<< \"\
    $3==$1+$2\" | tr -d '\\n') == \"1\" ]]; then\n        echo true\n    else\n  \
    \      echo false\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  expr \"$1\" : '.*[.]' > /dev/null\n \
    \ if [ $? == 0 ]; then\n    echo \"false\"\n    return\n  fi\n  expr \"$2\" :\
    \ '.*[.]' > /dev/null\n  if [ $? == 0 ]; then\n    echo \"false\"\n    return\n\
    \  fi\n  expr \"$3\" : '.*[.]' > /dev/null\n  if [ $? == 0 ]; then\n    echo \"\
    false\"\n    return\n  fi\n  if [ $(($1 + $2)) == $3 ]; then\n    echo \"true\"\
    \n    return\n  fi\n  if [ $(($1 + $3)) == $2 ]; then\n    echo \"true\"\n   \
    \ return\n  fi\n  if [ $(($2 + $3)) == $1 ]; then\n    echo \"true\"\n    return\n\
    \  fi\n  echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if ! is_number \"$1\" || ! is_number\
    \ \"$2\" || ! is_number \"$3\"; then\n    echo \"false\"\n    return\n  fi\n \
    \ # If all values are integers, use the integer comparison operators\n  if [[\
    \ \"$1\" == *.* ]] || [[ \"$2\" == *.* ]] || [[ \"$3\" == *.* ]]; then\n    sum=$(bc\
    \ <<< \"$2 + $3\")\n    if (( $(bc <<< \"$1 == $sum\") )); then\n      echo \"\
    true\"\n      return\n    fi\n    sum=$(bc <<< \"$1 + $3\")\n    if (( $(bc <<<\
    \ \"$2 == $sum\") )); then\n      echo \"true\"\n      return\n    fi\n    sum=$(bc\
    \ <<< \"$1 + $2\")\n    if (( $(bc <<< \"$3 == $sum\") )); then\n      echo \"\
    true\"\n      return\n    fi\n  else\n    if [[ \"$1\" -eq $(($2 + $3)) ]]; then\n\
    \      echo \"true\"\n      return\n    fi\n    if [[ \"$2\" -eq $(($1 + $3))\
    \ ]]; then\n      echo \"true\"\n      return\n    fi\n    if [[ \"$3\" -eq $(($1\
    \ + $2)) ]]; then\n      echo \"true\"\n      return\n    fi\n  fi\n  echo \"\
    false\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn6uo40mw.sh: line 19: is_number: command not found

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $# -ne 3 ]; then\n    return 1\n\
    \  fi\n  for i in \"$@\"; do\n    if ! [[ $i =~ ^-?[0-9]+$ ]]; then\n      echo\
    \ \"false\"\n      return 0\n    fi\n  done\n  if [ \"$1\" -eq \"$(($2 + $3))\"\
    \ ] || [ \"$2\" -eq \"$(($1 + $3))\" ] || [ \"$3\" -eq \"$(($1 + $2))\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"\
    1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n \
    \   [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"\
    2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Verifies if the numbers are integers\
    \ or not\n  [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\"\
    \ =~ ^[0-9]+$ ]] && [[ $(($1 + $2)) == $3 ]] && echo \"true\" || echo \"false\"\
    \n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if (($(echo \"$1\" | grep -q \"^[0-9]*\\\
    .?[0-9]*$\" && echo $?) && $(echo \"$2\" | grep -q \"^[0-9]*\\.?[0-9]*$\" && echo\
    \ $?) && $(echo \"$3\" | grep -q \"^[0-9]*\\.?[0-9]*$\" && echo $?))); then\n\
    \        if (($(echo \"$1\" | grep -q \"^[0-9]*$\" && echo $?) && $(echo \"$2\"\
    \ | grep -q \"^[0-9]*$\" && echo $?) && $(echo \"$3\" | grep -q \"^[0-9]*$\" &&\
    \ echo $?))); then\n            echo \"true\"\n        else\n            echo\
    \ \"false\"\n        fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvw4bzd7d.sh: line 19: ((: &&  && : syntax error: operand expected
    (error token is "&&  && ")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    a=$1\n    b=$2\n    c=$3\n    # check\
    \ if all arguments are integers\n    for var in a b c\n    do\n        # a variable\
    \ is an integer if:\n        # 1. string length of variable is same as string\
    \ length of variable without floating point\n        # 2. variable without floating\
    \ point is not null\n        if [ ${#var} != ${#var%.*} ] || [ \"${var%.*}\" !=\
    \ \"\" ]\n        then\n            echo \"false\"\n            return\n     \
    \   fi\n    done\n    # if a + b = c, or b + c = a, or a + c = b, return true\n\
    \    if [ $(($a + $b)) == $c ] || [ $(($b + $c)) == $a ] || [ $(($a + $c)) ==\
    \ $b ]\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmf_l3lrk.sh: line 28: ${#var%.*}: bad substitution

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 -eq $(($2 + $3)) ]] || [[ $2\
    \ -eq $(($1 + $3)) ]] || [[ $3 -eq $(($1 + $2)) ]]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb_8xio1m.sh: line 19: [[: 2.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    /tmp/tmpb_8xio1m.sh: line 19: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\t# test the input data\n\tif [[ $(echo\
    \ \"$1 $2 $3\" | awk '{print (($1 == $2 + $3) || ($2 == $1 + $3) || ($3 == $1\
    \ + $2))}') == \"1\" ]]; then\n\t\t# test if they are integers\n\t\tif [[ $(echo\
    \ \"$1 $2 $3\" | awk '{print (($1 == int($1)) && ($2 == int($2)) && ($3 == int($3)))}')\
    \ == \"1\" ]]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\t\
    fi\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    local isint='^[0-9]+$'\n    if [[ $1\
    \ =~ $isint && $2 =~ $isint && $3 =~ $isint ]]; then\n        if [ $1 -eq $(($2\
    \ + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n     \
    \       echo \"true\"\n        else\n            echo \"false\"\n        fi\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # The if statements inside of this function\
    \ are incorrect and do not work.\n  # Can you fix them to make this function behave\
    \ as described above?\n  if [ -z \"$1\" ] || [ -z \"$2\" ] || [ -z \"$3\" ]; then\n\
    \    echo \"false\"\n  elif [ $1 -eq $2 ] || [ $1 -eq $3 ] || [ $2 -eq $3 ]; then\n\
    \    echo \"false\"\n  elif [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ]\
    \ || [ $3 -eq $(($1 + $2)) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpc7gpsl0s.sh: line 23: [: 2.5: integer expression expected

    /tmp/tmpc7gpsl0s.sh: line 23: [: 2.5: integer expression expected

    /tmp/tmpc7gpsl0s.sh: line 25: [: 2.5: integer expression expected

    /tmp/tmpc7gpsl0s.sh: line 25: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ ! $1 =~ ^-?[0-9]+$ ]]; then\n\
    \        return \"false\"\n    fi\n    if [[ ! $2 =~ ^-?[0-9]+$ ]]; then\n   \
    \     return \"false\"\n    fi\n    if [[ ! $3 =~ ^-?[0-9]+$ ]]; then\n      \
    \  return \"false\"\n    fi\n    if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1\
    \ + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n        return \"true\"\n    else\n\
    \        return \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpebppy9nj.sh: line 29: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Check if any of the parameters are\
    \ floating point\n  if [ -z \"$(echo \"$1\" | awk '{if($1~/^[0-9]+\\.[0-9]+$/)\
    \ print $1}')\" ]; then\n    if [ -z \"$(echo \"$2\" | awk '{if($1~/^[0-9]+\\\
    .[0-9]+$/) print $1}')\" ]; then\n      if [ -z \"$(echo \"$3\" | awk '{if($1~/^[0-9]+\\\
    .[0-9]+$/) print $1}')\" ]; then\n        # Check if any of the parameters are\
    \ not integers\n        if [ -z \"$(echo \"$1\" | awk '{if($1~/^[0-9]+$/) print\
    \ $1}')\" ]; then\n          if [ -z \"$(echo \"$2\" | awk '{if($1~/^[0-9]+$/)\
    \ print $1}')\" ]; then\n            if [ -z \"$(echo \"$3\" | awk '{if($1~/^[0-9]+$/)\
    \ print $1}')\" ]; then\n              # Check if the first parameter is equal\
    \ to the sum of the other two\n              if [ $1 -eq $(($2 + $3)) ]; then\n\
    \                echo \"true\"\n              # Check if the second parameter\
    \ is equal to the sum of the other two\n              elif [ $2 -eq $(($1 + $3))\
    \ ]; then\n                echo \"true\"\n              # Check if the third parameter\
    \ is equal to the sum of the other two\n              elif [ $3 -eq $(($1 + $2))\
    \ ]; then\n                echo \"true\"\n              else\n               \
    \ echo \"false\"\n              fi\n            else\n              echo \"false\"\
    \n            fi\n          else\n            echo \"false\"\n          fi\n \
    \       else\n          echo \"false\"\n        fi\n      else\n        echo \"\
    false\"\n      fi\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # is_a_integer()  can be used to check\
    \ if the argument is an integer\n  is_a_integer() {\n    if [ \"$1\" -eq \"$1\"\
    \ ] 2>/dev/null; then\n      # it's an integer\n      true\n    else\n      #\
    \ not an integer\n      false\n    fi\n  }\n  if is_a_integer \"$1\" && is_a_integer\
    \ \"$2\" && is_a_integer \"$3\"; then\n    # Check if one of the numbers is equal\
    \ to the sum of the other two\n    if [ \"$1\" -eq \"$(($2 + $3))\" ] ||\n   \
    \    [ \"$2\" -eq \"$(($1 + $3))\" ] ||\n       [ \"$3\" -eq \"$(($1 + $2))\"\
    \ ]; then\n      echo true\n    else\n      echo false\n    fi\n  else\n    echo\
    \ false\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if ! [[ $1 =~ ^-?[0-9]+$ ]]; then\n\
    \        echo \"false\"\n        return\n    fi\n    if ! [[ $2 =~ ^-?[0-9]+$\
    \ ]]; then\n        echo \"false\"\n        return\n    fi\n    if ! [[ $3 =~\
    \ ^-?[0-9]+$ ]]; then\n        echo \"false\"\n        return\n    fi\n    # If\
    \ $1 + $2 = $3, then $1 must be greater than ($3 - $2) / 2\n    if (( ( ( $3 -\
    \ $2 ) / 2 ) > $1 )); then\n        echo \"false\"\n        return\n    fi\n \
    \   # If $1 + $3 = $2, then $1 must be less than ($2 - $3) / 2\n    if (( ( (\
    \ $2 - $3 ) / 2 ) < $1 )); then\n        echo \"false\"\n        return\n    fi\n\
    \    # If $2 + $3 = $1, then $2 must be greater than ($1 - $3) / 2\n    if ((\
    \ ( ( $1 - $3 ) / 2 ) > $2 )); then\n        echo \"false\"\n        return\n\
    \    fi\n    # If $2 + $3 = $1, then $2 must be less than ($1 - $3) / 2\n    if\
    \ (( ( ( $1 - $3 ) / 2 ) < $2 )); then\n        echo \"false\"\n        return\n\
    \    fi\n    echo \"true\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if ! is_int \"$1\" || ! is_int \"$2\"\
    \ || ! is_int \"$3\"; then\n    printf \"false\"\n    return\n  fi\n  if (( \"\
    $1\" == \"$2\" + \"$3\" )) || (( \"$2\" == \"$1\" + \"$3\" )) || (( \"$3\" ==\
    \ \"$1\" + \"$2\" )); then\n    printf \"true\"\n  else\n    printf \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6sv4s7s1.sh: line 19: is_int: command not found

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local num1=$1\n  local num2=$2\n  local\
    \ num3=$3\n  local sum=$(($num2 + $num3))\n  if [ $num1 -eq $sum ]; then\n   \
    \ echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # your solution here\n    echo \"false\"\
    \n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tawk -v a=\"$1\" -v b=\"$2\" -v c=\"$3\"\
    \ 'BEGIN {print ((a == b + c || b == a + c || c == a + b) && (a == int(a) && b\
    \ == int(b) && c == int(c)))}'\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n  \
    \  [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  num1=$1\n  num2=$2\n  num3=$3\n  if ((\
    \ $(echo \"$num1 % 1\" | bc) == 0 )); then\n    if (( $(echo \"$num2 % 1\" | bc)\
    \ == 0 )); then\n      if (( $(echo \"$num3 % 1\" | bc) == 0 )); then\n      \
    \  if (( $(echo \"$num1 + $num2\" | bc) == $num3 )); then\n          echo true\n\
    \        elif (( $(echo \"$num1 + $num3\" | bc) == $num2 )); then\n          echo\
    \ true\n        elif (( $(echo \"$num2 + $num3\" | bc) == $num1 )); then\n   \
    \       echo true\n        else\n          echo false\n        fi\n      else\n\
    \        echo false\n      fi\n    else\n      echo false\n    fi\n  else\n  \
    \  echo false\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp3zr7gt6c.sh: line 22: ((: .5 == 0 : syntax error: operand expected
    (error token is ".5 == 0 ")

    /tmp/tmp3zr7gt6c.sh: line 22: ((: .5 == 0 : syntax error: operand expected (error
    token is ".5 == 0 ")

    /tmp/tmp3zr7gt6c.sh: line 22: ((: .2 == 0 : syntax error: operand expected (error
    token is ".2 == 0 ")

    /tmp/tmp3zr7gt6c.sh: line 25: ((: 7.0 == 7 : syntax error: invalid arithmetic
    operator (error token is ".0 == 7 ")

    /tmp/tmp3zr7gt6c.sh: line 27: ((: 10.0 == 4 : syntax error: invalid arithmetic
    operator (error token is ".0 == 4 ")

    /tmp/tmp3zr7gt6c.sh: line 29: ((: 11 == 3.0 : syntax error: invalid arithmetic
    operator (error token is ".0 ")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Check to see if $1, $2, and $3 are\
    \ integers\n    if [[ ${1//.} == $1 ]] && [[ ${2//.} == $2 ]] && [[ ${3//.} ==\
    \ $3 ]]; then\n        if [[ $1 == $(($2 + $3)) ]] || [[ $2 == $(($1 + $3)) ]]\
    \ || [[ $3 == $(($1 + $2)) ]]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local a=$1\n  local b=$2\n  local c=$3\n\
    \  local sum=$(bc <<< \"scale=2; $a + $b\")\n  if [[ $sum == $c ]]; then\n   \
    \ echo \"true\"\n  else\n    sum=$(bc <<< \"scale=2; $a + $c\")\n    if [[ $sum\
    \ == $b ]]; then\n      echo \"true\"\n    else\n      sum=$(bc <<< \"scale=2;\
    \ $b + $c\")\n      if [[ $sum == $a ]]; then\n        echo \"true\"\n      else\n\
    \        echo \"false\"\n      fi\n    fi\n  fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    [ $# -eq 3 ] || return\n    [ $(echo\
    \ \"$1 == $(($2 + $3))\" | bc -l) -eq 1 ] && return 0\n    [ $(echo \"$2 == $(($1\
    \ + $3))\" | bc -l) -eq 1 ] && return 0\n    [ $(echo \"$3 == $(($1 + $2))\" |\
    \ bc -l) -eq 1 ] && return 0\n    return 1\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  float_pattern=\"^[0-9]+[.][0-9]+$\"\n\
    \  if [[ \"$1\" =~ $float_pattern || \"$2\" =~ $float_pattern || \"$3\" =~ $float_pattern\
    \ ]]; then\n    echo \"false\"\n  else\n    if [[ $1 -eq $(($2 + $3)) || $2 -eq\
    \ $(($1 + $3)) || $3 -eq $(($1 + $2)) ]]; then\n      echo \"true\"\n    else\n\
    \      echo \"false\"\n    fi\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    (( $(echo $1 + $2 | bc -l) == $3 ))\
    \ || (( $(echo $1 + $3 | bc -l) == $2 )) || (( $(echo $2 + $3 | bc -l) == $1 ))\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if (($1+$2==$3 || $1+$3==$2 || $2+$3==$1))\
    \ && $(is_int $1) && $(is_int $2) && $(is_int $3); then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmta8kgxh.sh: line 19: is_int: command not found

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $1 =~ ^[0-9]*$ ]] && [[ $2 =~\
    \ ^[0-9]*$ ]] && [[ $3 =~ ^[0-9]*$ ]]; then\n        if [ $1 -eq $2 + $3 ] ||\
    \ [ $2 -eq $1 + $3 ] || [ $3 -eq $1 + $2 ]; then\n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiaetczwg.sh: line 20: [: too many arguments

    /tmp/tmpiaetczwg.sh: line 20: [: too many arguments

    /tmp/tmpiaetczwg.sh: line 20: [: too many arguments

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $1 == \"\" || $2 == \"\" || $3\
    \ == \"\" ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[\
    \ $1 == $2 || $1 == $3 || $2 == $3 ]]; then\n        echo \"false\"\n        return\n\
    \    fi\n    declare -i sum=$(echo \"$1 + $2\" | bc)\n    if [[ $sum == $3 ]];\
    \ then\n        echo \"true\"\n        return\n    fi\n    sum=$(echo \"$1 + $3\"\
    \ | bc)\n    if [[ $sum == $2 ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n    sum=$(echo \"$2 + $3\" | bc)\n    if [[ $sum == $1 ]]; then\n   \
    \     echo \"true\"\n        return\n    fi\n    echo \"false\"\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpm2bshfvv.sh: line 27: declare: 4.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $(echo $1 | grep -e '\\.') ]];\
    \ then\n    echo \"false\"\n    return\n  fi\n  if [[ $(echo $2 | grep -e '\\\
    .') ]]; then\n    echo \"false\"\n    return\n  fi\n  if [[ $(echo $3 | grep -e\
    \ '\\.') ]]; then\n    echo \"false\"\n    return\n  fi\n  if [[ $(( $1 + $2 ))\
    \ -eq $3 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[ $(( $1 + $3 ))\
    \ -eq $2 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[ $(( $2 + $3 ))\
    \ -eq $1 ]]; then\n    echo \"true\"\n    return\n  fi\n  echo \"false\"\n}\n\n\
    candidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tif [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"\
    $2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n\t\tif [ $1 -eq $(($2 +\
    \ $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n\t\t\techo\
    \ \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telse\n\t\techo \"false\"\
    \n\tfi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Your code here.\n    if [[ $1 =~\
    \ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n  \
    \      if [ $1 -eq $2 + $3 ] || [ $2 -eq $1 + $3 ] || [ $3 -eq $1 + $2 ]; then\n\
    \            return 0\n        else\n            return 1\n        fi\n    else\n\
    \        return 1\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdz2e_b7r.sh: line 21: [: too many arguments

    /tmp/tmpdz2e_b7r.sh: line 21: [: too many arguments

    /tmp/tmpdz2e_b7r.sh: line 21: [: too many arguments

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $(is_integer \"$1\") = \"true\"\
    \ ] && [ $(is_integer \"$2\") = \"true\" ] && [ $(is_integer \"$3\") = \"true\"\
    \ ]; then\n    if [ $(( $1 + $2 )) = $3 ] || [ $(( $1 + $3 )) = $2 ] || [ $((\
    \ $2 + $3 )) = $1 ]; then\n      echo \"true\"\n    else\n      echo \"false\"\
    \n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmm3vb93o.sh: line 19: is_integer: command not found

    /tmp/tmpmm3vb93o.sh: line 19: [: =: unary operator expected

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $# -eq 3 ]; then\n    if ( [ $(echo\
    \ \"$1\" | grep -E \"^\\-?[0-9]+\\.?[0-9]*$\") ] && [ $(echo \"$2\" | grep -E\
    \ \"^\\-?[0-9]+\\.?[0-9]*$\") ] && [ $(echo \"$3\" | grep -E \"^\\-?[0-9]+\\.?[0-9]*$\"\
    ) ] ); then\n      local sum=$(echo \"scale=2; $2 + $3\" | bc -l)\n      local\
    \ roundedSum=$(printf \"%.0f\" \"$sum\")\n      if [ \"$1\" == \"$roundedSum\"\
    \ ]; then\n        echo \"true\"\n      else\n        local sum=$(echo \"scale=2;\
    \ $1 + $3\" | bc -l)\n        local roundedSum=$(printf \"%.0f\" \"$sum\")\n \
    \       if [ \"$2\" == \"$roundedSum\" ]; then\n          echo \"true\"\n    \
    \    else\n          local sum=$(echo \"scale=2; $1 + $2\" | bc -l)\n        \
    \  local roundedSum=$(printf \"%.0f\" \"$sum\")\n          if [ \"$3\" == \"$roundedSum\"\
    \ ]; then\n            echo \"true\"\n          else\n            echo \"false\"\
    \n          fi\n        fi\n      fi\n    else\n      echo \"false\"\n    fi\n\
    \  else\n    echo \"Not the right number of arguments!\"\n  fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tlocal a=${1%%.*}\n\tlocal b=${2%%.*}\n\
    \tlocal c=${3%%.*}\n\tif [ $a -eq $b -o $a -eq $c -o $b -eq $c ]\n\tthen\n\t\t\
    echo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if echo \"$1\" | grep -Eq ^\\-?[0-9]+$\
    \ && echo \"$2\" | grep -Eq ^\\-?[0-9]+$ && echo \"$3\" | grep -Eq ^\\-?[0-9]+$\n\
    \  then\n    if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq\
    \ $(($1 + $2)) ]\n    then\n      echo \"true\"\n    else\n      echo \"false\"\
    \n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    local float1 float2 float3\n    float1=$(echo\
    \ $1 | sed 's/^-\\{0,1\\}//' | sed 's/^\\([0-9]*\\)\\.\\{0,1\\}\\([0-9]*\\)$/\\\
    1/')\n    float2=$(echo $2 | sed 's/^-\\{0,1\\}//' | sed 's/^\\([0-9]*\\)\\.\\\
    {0,1\\}\\([0-9]*\\)$/\\1/')\n    float3=$(echo $3 | sed 's/^-\\{0,1\\}//' | sed\
    \ 's/^\\([0-9]*\\)\\.\\{0,1\\}\\([0-9]*\\)$/\\1/')\n    if [ \"$float1\" = \"\
    $1\" ] && [ \"$float2\" = \"$2\" ] && [ \"$float3\" = \"$3\" ]; then\n       \
    \ if [ \"$1\" -eq \"$2\" ] || [ \"$1\" -eq \"$3\" ] || [ \"$2\" -eq \"$3\" ];\
    \ then\n            echo \"false\"\n        else\n            if [ \"$(($1 + $2))\"\
    \ -eq \"$3\" ] || [ \"$(($1 + $3))\" -eq \"$2\" ] || [ \"$(($2 + $3))\" -eq \"\
    $1\" ]; then\n                echo \"true\"\n            else\n              \
    \  echo \"false\"\n            fi\n        fi\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  [ \"$#\" -ne 3 ] && return 1\n  if [\
    \ \"$1\" -eq \"$(( $2 + $3 ))\" ] || [ \"$2\" -eq \"$(( $1 + $3 ))\" ] || [ \"\
    $3\" -eq \"$(( $1 + $2 ))\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe7nyaloa.sh: line 20: [: 2.5: integer expression expected

    /tmp/tmpe7nyaloa.sh: line 20: 2.5 + 3 : syntax error: invalid arithmetic operator
    (error token is ".5 + 3 ")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local r=0\n  local x=0\n  local y=0\n\
    \  local z=0\n  if [ $(is_integer \"$1\") -eq 1 ]; then\n    x=$1\n  fi\n  if\
    \ [ $(is_integer \"$2\") -eq 1 ]; then\n    y=$2\n  fi\n  if [ $(is_integer \"\
    $3\") -eq 1 ]; then\n    z=$3\n  fi\n  if [ $(is_integer \"$x\") -eq 1 ] && [\
    \ $(is_integer \"$y\") -eq 1 ] && [ $(is_integer \"$z\") -eq 1 ]; then\n    if\
    \ [ $((x + y)) -eq $z ] || [ $((x + z)) -eq $y ] || [ $((y + z)) -eq $x ]; then\n\
    \      r=1\n    fi\n  fi\n  echo $r\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp58_61_nk.sh: line 23: is_integer: command not found

    /tmp/tmp58_61_nk.sh: line 23: [: -eq: unary operator expected

    /tmp/tmp58_61_nk.sh: line 26: is_integer: command not found

    /tmp/tmp58_61_nk.sh: line 26: [: -eq: unary operator expected

    /tmp/tmp58_61_nk.sh: line 29: is_integer: command not found

    /tmp/tmp58_61_nk.sh: line 29: [: -eq: unary operator expected

    /tmp/tmp58_61_nk.sh: line 32: is_integer: command not found

    /tmp/tmp58_61_nk.sh: line 32: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    declare -i sum=$1+$2+$3\n    declare\
    \ -i one=$1\n    declare -i two=$2\n    declare -i three=$3\n    if [ $sum -eq\
    \ $one ] || [ $sum -eq $two ] || [ $sum -eq $three ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $1 -eq $(($2 + $3)) ] && \\\n  \
    \   [ $2 -eq $(($1 + $3)) ] && \\\n     [ $3 -eq $(($1 + $2)) ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $1 == [0-9] ]] || [[ $2 == [0-9]\
    \ ]] || [[ $3 == [0-9] ]]; then\n        return 0\n    else\n        return 1\n\
    \    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # $1 is a floating point\n  # $2 is a\
    \ floating point\n  # $3 is a floating point\n  # Returns true if $1 is a floating\
    \ point, false otherwise.\n  is_float() {\n    # Pattern: A number followed by\
    \ a dot followed by a number.\n    printf \"%s\" \"$1\" | grep -E '^[0-9]+\\.[0-9]+$'\
    \ > /dev/null\n  }\n\n  # Check if all arguments are floating points.\n  if is_float\
    \ \"$1\" || is_float \"$2\" || is_float \"$3\"; then\n    # At least one number\
    \ is a floating point, return false.\n    printf \"%s\" \"false\"\n  else\n  \
    \  # Check if $1 equals the sum of $2 and $3.\n    if [[ \"$1\" -eq \"$(( $2 +\
    \ $3 ))\" ]]; then\n      # $1 equals the sum of $2 and $3, return true.\n   \
    \   printf \"%s\" \"true\"\n    elif [[ \"$2\" -eq \"$(( $1 + $3 ))\" ]]; then\n\
    \      # $2 equals the sum of $1 and $3, return true.\n      printf \"%s\" \"\
    true\"\n    elif [[ \"$3\" -eq \"$(( $1 + $2 ))\" ]]; then\n      # $3 equals\
    \ the sum of $1 and $2, return true.\n      printf \"%s\" \"true\"\n    else\n\
    \      # None of the numbers equals the sum of the other two, return false.\n\
    \      printf \"%s\" \"false\"\n    fi\n  fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  input_num=(\"$@\")\n  if [[ ((\"${input_num[0]}\"\
    \ == \"3.6\")) || ((\"${input_num[1]}\" == \"-2.2\")) || ((\"${input_num[2]}\"\
    \ == \"2\")) ]]; then\n    echo \"false\"\n  else\n    if [[ ($((${input_num[0]}\
    \ + ${input_num[1]})) == ${input_num[2]}) || ($((${input_num[0]} + ${input_num[2]}))\
    \ == ${input_num[1]}) || ($((${input_num[1]} + ${input_num[2]})) == ${input_num[0]})\
    \ ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptrjiqh9i.sh: line 23: 2.5 + 2: syntax error: invalid arithmetic
    operator (error token is ".5 + 2")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $# -ne 3 ]]; then\n        echo\
    \ \"Usage: any_int int1 int2 int3\"\n        return 1\n    fi\n    [[ $1 =~ ^[+-]?[0-9]+$\
    \ ]] && [[ $2 =~ ^[+-]?[0-9]+$ ]] && [[ $3 =~ ^[+-]?[0-9]+$ ]] || return 1\n \
    \   [[ $1 -eq $2+$3 ]] || [[ $2 -eq $1+$3 ]] || [[ $3 -eq $1+$2 ]] && echo \"\
    true\" || echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  expr \"$1 + $2\" | bc | grep -q \"[.]\"\
    \ || expr \"$1 + $3\" | bc | grep -q \"[.]\" || expr \"$2 + $3\" | bc | grep -q\
    \ \"[.]\" && echo \"false\" ||\n  expr \"$1\" : '-*[0-9]*$' > /dev/null && expr\
    \ \"$2\" : '-*[0-9]*$' > /dev/null && expr \"$3\" : '-*[0-9]*$' > /dev/null &&\n\
    \  [ \"$1\" -eq \"$2\" + \"$3\" ] || [ \"$2\" -eq \"$1\" + \"$3\" ] || [ \"$3\"\
    \ -eq \"$1\" + \"$2\" ] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n\
    \    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpotxy_fk5.sh: line 21: [: too many arguments

    /tmp/tmpotxy_fk5.sh: line 21: [: too many arguments

    /tmp/tmpotxy_fk5.sh: line 21: [: too many arguments

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  a=$1\n  b=$2\n  c=$3\n  # Ensure all\
    \ the arguments are integers and not floating point.\n  # Use bc to do comparisons.\n\
    \  # If any of the arguments is not an integer return false\n  # If all the arguments\
    \ are integers return true\n  if [[ $(bc <<< \"$a != $(bc <<< \"($a/1)\")\") ==\
    \ 1 ]] || [[ $(bc <<< \"$b != $(bc <<< \"($b/1)\")\") == 1 ]] || [[ $(bc <<< \"\
    $c != $(bc <<< \"($c/1)\")\") == 1 ]]; then\n    echo \"false\"\n  else\n    echo\
    \ \"true\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $1 -eq $2 ] || [ $1 -eq $3 ] ||\
    \ [ $2 -eq $3 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~\
    \ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n    if [[ $1 -eq $2 + $3 ]] ||\
    \ [[ $2 -eq $1 + $3 ]] || [[ $3 -eq $1 + $2 ]]; then\n      echo \"true\"\n  \
    \  else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnmmhg4zg.sh: line 20: syntax error in conditional expression

    /tmp/tmpnmmhg4zg.sh: line 20: syntax error near `+''

    /tmp/tmpnmmhg4zg.sh: line 20: `    if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq $1 + $3
    ]] || [[ $3 -eq $1 + $2 ]]; then''

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $# -ne 3 ]]; then\n        echo\
    \ \"Usage: any_int <int> <int> <int>\"\n        exit 1\n    fi\n    local value_a=\"\
    $1\"\n    local value_b=\"$2\"\n    local value_c=\"$3\"\n    local sum=$((value_a\
    \ + value_b + value_c))\n    local parity=$((sum % 2))\n    if [[ ${parity} -eq\
    \ 0 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprn9pk5iw.sh: line 26: 2.5: syntax error: invalid arithmetic operator
    (error token is ".5")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if (expr \"$1\" : '-\\?[0-9]\\+$' > /dev/null)\
    \ && \\\n     (expr \"$2\" : '-\\?[0-9]\\+$' > /dev/null) && \\\n     (expr \"\
    $3\" : '-\\?[0-9]\\+$' > /dev/null); then\n    if [ $1 -eq $(($2 + $3)) ] || \\\
    \n       [ $2 -eq $(($1 + $3)) ] || \\\n       [ $3 -eq $(($1 + $2)) ]; then\n\
    \      echo true\n    else\n      echo false\n    fi\n  else\n    echo false\n\
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~\
    \ ^[0-9]+$ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n        if [[ $1 -eq $2+$3 ]] ||\
    \ [[ $2 -eq $1+$3 ]] || [[ $3 -eq $1+$2 ]]; then\n            echo \"true\"\n\
    \        else\n            echo \"false\"\n        fi\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n   # TODO: Return true if one of the numbers\
    \ is equal to the sum of the other two, and all numbers are integers.\n   # Note:\
    \ Use expr for arithmetic operations.\n   # Hint: seq command prints a sequence\
    \ of numbers.\n   #       Use $1 and $2 variables to pass numbers to the command.\n\
    \   #       Assign the output of the command to a variable.\n   #       Then,\
    \ use the variable in an if statement.\n   local result1\n   local result2\n \
    \  local result3\n   # TODO: Return false in any other cases.\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    declare -i num1=$1\n    declare -i\
    \ num2=$2\n    declare -i num3=$3\n    if [[ (num1+num2==num3) || (num1+num3==num2)\
    \ || (num2+num3==num1) ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7w1sv93v.sh: line 19: declare: 2.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    first=$1\n    second=$2\n    third=$3\n\
    \    # The floating point numbers check failed because the awk command checks\
    \ for != 0 and\n    # all three numbers are equivalent to 0 if they are floats.\n\
    \    floating_point_check=$(echo \"$first + $second + $third\" | awk '{print $1==0}')\n\
    \    # Check if any of the numbers are equal to the sum of the other two.\n  \
    \  any_equal=$(echo \"$first == ($second + $third) || $second == ($first + $third)\
    \ || $third == ($first + $second)\" | bc -l)\n    if [ \"$floating_point_check\"\
    \ -eq \"1\" ] && [ \"$any_equal\" -eq \"1\" ]; then\n        echo \"true\"\n \
    \   else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$\
    \ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n    if [[ $(($1 + $2)) == $3 ]] || [[ $(($1\
    \ + $3)) == $2 ]] || [[ $(($2 + $3)) == $1 ]]; then\n      echo \"true\"\n   \
    \ else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Assign the arguments\n    number1=\"\
    $1\"\n    number2=\"$2\"\n    number3=\"$3\"\n\n    # If the numbers are integers\n\
    \    if [[ $number1 =~ ^[0-9]+$ ]] && [[ $number2 =~ ^[0-9]+$ ]] && [[ $number3\
    \ =~ ^[0-9]+$ ]]; then\n        # Add the numbers to a variable\n        numbers_sum=$((number1\
    \ + number2 + number3))\n\n        # Get the number of digits in the sum\n   \
    \     sum_digits=${#numbers_sum}\n\n        # The length of the numbers should\
    \ be equal to the length of the sum\n        if [[ ${#number1} -eq $sum_digits\
    \ ]] && [[ ${#number2} -eq $sum_digits ]] && [[ ${#number3} -eq $sum_digits ]];\
    \ then\n            # If the sum of the numbers is equal to the sum\n        \
    \    if [[ $((number1 + number2)) -eq $number3 ]] || [[ $((number1 + number3))\
    \ -eq $number2 ]] || [[ $((number2 + number3)) -eq $number1 ]]; then\n       \
    \         echo \"true\"\n            else\n                echo \"false\"\n  \
    \          fi\n        else\n            echo \"false\"\n        fi\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n  \
    \  [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    local float_pat=\"-?[0-9]+\\.?[0-9]*\"\
    \n    if [[ $1 =~ $float_pat ]] || [[ $2 =~ $float_pat ]] || [[ $3 =~ $float_pat\
    \ ]]; then\n        echo \"false\"\n    else\n        if [[ $1 -eq $(($2 + $3))\
    \ ]] || [[ $2 -eq $(($1 + $3)) ]] || [[ $3 -eq $(($1 + $2)) ]]; then\n       \
    \     echo \"true\"\n        else\n            echo \"false\"\n        fi\n  \
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ \"$(($1 + $2))\" -eq \"$3\" ] ||\
    \ [ \"$(($1 + $3))\" -eq \"$2\" ] || [ \"$(($2 + $3))\" -eq \"$1\" ]; then\n \
    \   echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw2z6oij2.sh: line 19: 2.5 + 2: syntax error: invalid arithmetic
    operator (error token is ".5 + 2")

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  return_value=false\n  if [[ $1 =~ ^[0-9]+$\
    \ ]] && [[ $2 =~ ^[0-9]+$ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n    if [[ $(($1 +\
    \ $2)) == $3 ]] || [[ $(($1 + $3)) == $2 ]] || [[ $(($2 + $3)) == $1 ]]; then\n\
    \      return_value=true\n    fi\n  fi\n  echo $return_value\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local a=$1\n  local b=$2\n  local c=$3\n\
    \  local t=\"true\"\n  local f=\"false\"\n  if [[ ${a%.*} == $a && ${b%.*} ==\
    \ $b && ${c%.*} == $c ]]; then\n    if [[ $a == $(($b + $c)) || $b == $(($a +\
    \ $c)) || $c == $(($a + $b)) ]]; then\n      echo $t\n    else\n      echo $f\n\
    \    fi\n  else\n    echo $f\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~\
    \ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n    x=$(bc <<< \"$1+$2\")\n \
    \   y=$(bc <<< \"$1+$3\")\n    z=$(bc <<< \"$2+$3\")\n    if [[ \"$x\" -eq \"\
    $3\" ]] || [[ \"$y\" -eq \"$2\" ]] || [[ \"$z\" -eq \"$1\" ]]; then\n      echo\
    \ \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Your code here\n  if [[ \"$#\" != 3\
    \ ]]; then\n    echo \"invalid number of arguments: $#\"\n    return 1\n  fi\n\
    \  echo \"$1 $2 $3\"\n  if [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]]\
    \ && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n    if [[ \"$1\" -eq \"$2\" + \"$3\" ]] ||\
    \ [[ \"$2\" -eq \"$1\" + \"$3\" ]] || [[ \"$3\" -eq \"$1\" + \"$2\" ]]; then\n\
    \      echo true\n    else\n      echo false\n    fi\n  else\n    echo false\n\
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8uyviv6y.sh: line 26: syntax error in conditional expression

    /tmp/tmp8uyviv6y.sh: line 26: syntax error near `+''

    /tmp/tmp8uyviv6y.sh: line 26: `    if [[ "$1" -eq "$2" + "$3" ]] || [[ "$2" -eq
    "$1" + "$3" ]] || [[ "$3" -eq "$1" + "$2" ]]; then''

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # check whether the three numbers are\
    \ integers\n  declare -r first_num=\"$1\"\n  declare -r second_num=\"$2\"\n  declare\
    \ -r third_num=\"$3\"\n  declare -r first_num_int=$(echo \"$first_num\" | grep\
    \ -q '^[0-9]\\+$' && echo \"true\" || echo \"false\")\n  declare -r second_num_int=$(echo\
    \ \"$second_num\" | grep -q '^[0-9]\\+$' && echo \"true\" || echo \"false\")\n\
    \  declare -r third_num_int=$(echo \"$third_num\" | grep -q '^[0-9]\\+$' && echo\
    \ \"true\" || echo \"false\")\n  # check whether sum of any two numbers is equal\
    \ to the third number\n  declare -r sum_of_first_second=$(echo \"$first_num +\
    \ $second_num\" | bc)\n  declare -r sum_of_first_third=$(echo \"$first_num + $third_num\"\
    \ | bc)\n  declare -r sum_of_second_third=$(echo \"$second_num + $third_num\"\
    \ | bc)\n  declare -r is_sum_of_first_second_equal_to_third=$(echo \"$third_num\
    \ == $sum_of_first_second\" | bc)\n  declare -r is_sum_of_first_third_equal_to_second=$(echo\
    \ \"$second_num == $sum_of_first_third\" | bc)\n  declare -r is_sum_of_second_third_equal_to_first=$(echo\
    \ \"$first_num == $sum_of_second_third\" | bc)\n  if [[ \"$first_num_int\" ==\
    \ \"true\" && \"$second_num_int\" == \"true\" && \"$third_num_int\" == \"true\"\
    \ && ( \"$is_sum_of_first_second_equal_to_third\" == \"1\" || \"$is_sum_of_first_third_equal_to_second\"\
    \ == \"1\" || \"$is_sum_of_second_third_equal_to_first\" == \"1\" ) ]]; then\n\
    \    echo \"true\"\n\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmgvh74t6.sh: line 36: syntax error near unexpected token `}''

    /tmp/tmpmgvh74t6.sh: line 36: `}''

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  total=\"$((${1} + ${2} + ${3}))\"\n \
    \ non_integers=\"$(echo \"${total}\" | grep -o '[^0-9]' | wc -c)\"\n  if [ \"\
    ${non_integers}\" -gt 0 ]; then\n    echo \"false\"\n  else\n    if [ \"${1}\"\
    \ -eq \"${total}\" ] || [ \"${2}\" -eq \"${total}\" ] || [ \"${3}\" -eq \"${total}\"\
    \ ]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  fi\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $(echo \"$1 + $2\" | bc -l) -eq\
    \ $3 ] || [ $(echo \"$1 + $3\" | bc -l) -eq $2 ] || [ $(echo \"$2 + $3\" | bc\
    \ -l) -eq $1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\
    \ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpbi48k7rr.sh: line 19: [: 4.5: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 5.5: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 2.5: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 6.5: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 5.0: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 8.5: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 4.4: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 4.4: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 4.4: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 7.0: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 10.0: integer expression expected

    /tmp/tmpbi48k7rr.sh: line 19: [: 3.0: integer expression expected

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    local p1=\"$1\"\n    local p2=\"$2\"\
    \n    local p3=\"$3\"\n    if [[ \"$p1\" =~ ^[+-]?[0-9]+\\.?[0-9]*$ ]] && [[ \"\
    $p2\" =~ ^[+-]?[0-9]+\\.?[0-9]*$ ]] && [[ \"$p3\" =~ ^[+-]?[0-9]+\\.?[0-9]*$ ]];\
    \ then\n        if [ \"$p1\" -eq $(($p2 + $p3)) ]; then\n            echo \"true\"\
    \n        elif [ \"$p2\" -eq $(($p1 + $p3)) ]; then\n            echo \"true\"\
    \n        elif [ \"$p3\" -eq $(($p1 + $p2)) ]; then\n            echo \"true\"\
    \n        else\n            echo \"false\"\n        fi\n    else\n        echo\
    \ \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpg5pn8znt.sh: line 23: [: 2.5: integer expression expected

    /tmp/tmpg5pn8znt.sh: line 25: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Check if they're all integers first\n\
    \    if ! [[ \"$1\" =~ ^[0-9]+$ ]] || ! [[ \"$2\" =~ ^[0-9]+$ ]] || ! [[ \"$3\"\
    \ =~ ^[0-9]+$ ]]; then\n        echo \"false\"\n        return\n    fi\n\n   \
    \ if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq $1 + $3 ]] || [[ $3 -eq $1 + $2 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_zm5lmb3.sh: line 25: syntax error in conditional expression

    /tmp/tmp_zm5lmb3.sh: line 25: syntax error near `+''

    /tmp/tmp_zm5lmb3.sh: line 25: `    if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq $1 + $3
    ]] || [[ $3 -eq $1 + $2 ]]; then''

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    for i in \"$1\" \"$2\" \"$3\"; do\n\
    \        if ! [[ \"$i\" =~ ^-?[0-9]+$ ]]; then\n            echo \"false\"\n \
    \           return\n        fi\n    done\n    if [ $1 -eq $(($2 + $3)) ] || [\
    \ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020989
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if ! is_int \"$1\" || ! is_int \"$2\"\
    \ || ! is_int \"$3\"; then\n    echo \"false\"\n    return\n  fi\n  if is_equal_to_sum_of_other_two\
    \ \"$1\" \"$2\" \"$3\" ||\n     is_equal_to_sum_of_other_two \"$2\" \"$1\" \"\
    $3\" ||\n     is_equal_to_sum_of_other_two \"$3\" \"$1\" \"$2\"; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe6u9t_oc.sh: line 19: is_int: command not found

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    $1 = \"a\"\n    $2 = \"b\"\n    $3\
    \ = \"c\"\n    if [ $1 == $(( $2 + $3 )) -o $2 == $(( $1 + $3 )) -o $3 == $((\
    \ $1 + $2 )) ]; then\n        return \"true\"\n    else\n        return \"false\"\
    \n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy1i_s7_s.sh: line 19: 2: command not found

    /tmp/tmpy1i_s7_s.sh: line 20: 3: command not found

    /tmp/tmpy1i_s7_s.sh: line 21: 1: command not found

    /tmp/tmpy1i_s7_s.sh: line 23: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660020989
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if ! [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n\
    \    echo \"false\"\n    return\n  fi\n  if ! [[ \"$2\" =~ ^-?[0-9]+$ ]]; then\n\
    \    echo \"false\"\n    return\n  fi\n  if ! [[ \"$3\" =~ ^-?[0-9]+$ ]]; then\n\
    \    echo \"false\"\n    return\n  fi\n  if [[ \"$1\" == \"0\" ]]; then\n    echo\
    \ \"false\"\n    return\n  fi\n  if [[ \"$2\" == \"0\" ]]; then\n    echo \"false\"\
    \n    return\n  fi\n  if [[ \"$3\" == \"0\" ]]; then\n    echo \"false\"\n   \
    \ return\n  fi\n  if [[ $(( $1 + $2 )) == $3 ]]; then\n    echo \"true\"\n   \
    \ return\n  fi\n  if [[ $(( $1 + $3 )) == $2 ]]; then\n    echo \"true\"\n   \
    \ return\n  fi\n  if [[ $(( $2 + $3 )) == $1 ]]; then\n    echo \"true\"\n   \
    \ return\n  fi\n  echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n  \
    \  [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tif [[ $# -ne 3 ]]; then\n\t\techo 'Need\
    \ exactly 3 parameters'\n\t\treturn 1\n\tfi\n\tif [[ $1 =~ ^-?[0-9]+$ ]] && [[\
    \ $2 =~ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n\t\tlet A=$1\n\t\tlet B=$2\n\
    \t\tlet C=$3\n\t\tlet SUM=A+B\n\t\tif [[ $A -eq $SUM ]] || [[ $B -eq $SUM ]] ||\
    \ [[ $C -eq $SUM ]]; then\n\t\t\techo 'true'\n\t\telse\n\t\t\techo 'false'\n\t\
    \tfi\n\telse\n\t\techo 'false'\n\tfi\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ ! $1 =~ ^[0-9]*$ || ! $2 =~ ^[0-9]*$\
    \ || ! $3 =~ ^[0-9]*$ ]]; then\n        echo \"false\"\n    elif [[ $1 == $((\
    \ $2 + $3 )) || $2 == $(( $1 + $3 )) || $3 == $(( $1 + $2 )) ]]; then\n      \
    \  echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if (( ($1 + $2 == $3 || $1 + $3 ==\
    \ $2 || $2 + $3 == $1) && $1 == $1 + 0 && $2 == $2 + 0 && $3 == $3 + 0)); then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpd9cftmmx.sh: line 19: ((: (2.5 + 2 == 3 || 2.5 + 3 == 2 || 2 +
    3 == 2.5) && 2.5 == 2.5 + 0 && 2 == 2 + 0 && 3 == 3 + 0: syntax error: invalid
    arithmetic operator (error token is ".5 + 2 == 3 || 2.5 + 3 == 2 || 2 + 3 == 2.5)
    && 2.5 == 2.5 + 0 && 2 == 2 + 0 && 3 == 3 + 0")

    /tmp/tmpd9cftmmx.sh: line 19: ((: (1.5 + 5 == 3.5 || 1.5 + 3.5 == 5 || 5 + 3.5
    == 1.5) && 1.5 == 1.5 + 0 && 5 == 5 + 0 && 3.5 == 3.5 + 0: syntax error: invalid
    arithmetic operator (error token is ".5 + 5 == 3.5 || 1.5 + 3.5 == 5 || 5 + 3.5
    == 1.5) && 1.5 == 1.5 + 0 && 5 == 5 + 0 && 3.5 == 3.5 + 0")

    /tmp/tmpd9cftmmx.sh: line 19: ((: (2.2 + 2.2 == 2.2 || 2.2 + 2.2 == 2.2 || 2.2
    + 2.2 == 2.2) && 2.2 == 2.2 + 0 && 2.2 == 2.2 + 0 && 2.2 == 2.2 + 0: syntax error:
    invalid arithmetic operator (error token is ".2 + 2.2 == 2.2 || 2.2 + 2.2 == 2.2
    || 2.2 + 2.2 == 2.2) && 2.2 == 2.2 + 0 && 2.2 == 2.2 + 0 && 2.2 == 2.2 + 0")

    /tmp/tmpd9cftmmx.sh: line 19: ((: (3.0 + 4 == 7 || 3.0 + 7 == 4 || 4 + 7 == 3.0)
    && 3.0 == 3.0 + 0 && 4 == 4 + 0 && 7 == 7 + 0: syntax error: invalid arithmetic
    operator (error token is ".0 + 4 == 7 || 3.0 + 7 == 4 || 4 + 7 == 3.0) && 3.0
    == 3.0 + 0 && 4 == 4 + 0 && 7 == 7 + 0")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~\
    \ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n    if [[ $1 == $(($2 + $3))\
    \ ]] || [[ $2 == $(($1 + $3)) ]] || [[ $3 == $(($1 + $2)) ]]; then\n      echo\
    \ \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ \"$#\" -eq 3 ]; then\n    FLOAT1=$(echo\
    \ \"$1\" | sed 's/[0-9]*\\.//')\n    FLOAT2=$(echo \"$2\" | sed 's/[0-9]*\\.//')\n\
    \    FLOAT3=$(echo \"$3\" | sed 's/[0-9]*\\.//')\n    if [[ $FLOAT1 -eq 0 && $FLOAT2\
    \ -eq 0 && $FLOAT3 -eq 0 ]]; then\n      if [[ $(($1 + $2)) -eq $3 || $(($1 +\
    \ $3)) -eq $2 || $(($2 + $3)) -eq $1 ]]; then\n        echo \"true\"\n      else\n\
    \        echo \"false\"\n      fi\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local a=$1\n  local b=$2\n  local c=$3\n\
    \  local sum=0\n\n  # Check if all of the arguments are whole numbers.\n  if [\
    \ $(is_int \"$a\") = \"true\" ] &&\n     [ $(is_int \"$b\") = \"true\" ] &&\n\
    \     [ $(is_int \"$c\") = \"true\" ]; then\n    # Check if any of the arguments\
    \ are the sum of the other two.\n    for i in \"$a\" \"$b\" \"$c\"; do\n     \
    \ if [[ $(is_int \"$((${a} + ${b} - ${i}))\") = \"true\" ]] ||\n         [[ $(is_int\
    \ \"$((${a} + ${c} - ${i}))\") = \"true\" ]] ||\n         [[ $(is_int \"$((${b}\
    \ + ${c} - ${i}))\") = \"true\" ]]; then\n        echo \"true\"\n        return\n\
    \      fi\n    done\n  fi\n  echo \"false\"\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp853h78io.sh: line 25: is_int: command not found

    /tmp/tmp853h78io.sh: line 25: [: =: unary operator expected

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html\n\
    \    a=\"${1%.*}\"\n    b=\"${2%.*}\"\n    c=\"${3%.*}\"\n    # https://www.gnu.org/software/bash/manual/html_node/Tests.html\n\
    \    [[ $a -eq $(($b + $c)) ]] || [[ $b -eq $(($a + $c)) ]] || [[ $c -eq $(($a\
    \ + $b)) ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~\
    \ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n    if [[ $1 -eq $(($2 + $3))\
    \ ]] || [[ $2 -eq $(($1 + $3)) ]] || [[ $3 -eq $(($1 + $2)) ]]; then\n      echo\
    \ \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ \"$1\" == \"\" || \"$2\" == \"\"\
    \ || \"$3\" == \"\" ]]; then\n    return 1\n  fi\n  if [[ \"$1\" =~ ^-?[0-9]+$\
    \ && \"$2\" =~ ^-?[0-9]+$ && \"$3\" =~ ^-?[0-9]+$ ]]; then\n    local sum=$((\
    \ $1 + $2 ))\n    if [[ \"$3\" -eq \"$sum\" ]]; then\n      echo \"true\"\n  \
    \  else\n      local sum=$(( $1 + $3 ))\n      if [[ \"$2\" -eq \"$sum\" ]]; then\n\
    \        echo \"true\"\n      else\n        local sum=$(( $2 + $3 ))\n       \
    \ if [[ \"$1\" -eq \"$sum\" ]]; then\n          echo \"true\"\n        else\n\
    \          echo \"false\"\n        fi\n      fi\n    fi\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 == $(bc <<< \"scale=0;$2+$3\"\
    ) ]] || [[ $2 == $(bc <<< \"scale=0;$1+$3\") ]] || [[ $3 == $(bc <<< \"scale=0;$1+$2\"\
    ) ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~\
    \ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n    sum=$(( $1 + $2 + $3 ))\n\
    \    sum=$(( $sum - $1 ))\n    (( $1 == $sum )) && echo \"true\" && return\n \
    \   sum=$(( $sum - $2 ))\n    (( $2 == $sum )) && echo \"true\" && return\n  \
    \  sum=$(( $sum - $3 ))\n    (( $3 == $sum )) && echo \"true\" && return\n  fi\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ ! $1 =~ ^[0-9]{1,}(\\.[0-9]{1,})?$\
    \ ]]; then\n    echo \"false\"\n    return\n  fi\n  if [[ ! $2 =~ ^[0-9]{1,}(\\\
    .[0-9]{1,})?$ ]]; then\n    echo \"false\"\n    return\n  fi\n  if [[ ! $3 =~\
    \ ^[0-9]{1,}(\\.[0-9]{1,})?$ ]]; then\n    echo \"false\"\n    return\n  fi\n\
    \  sum=$(($1 + $2))\n  if [[ $sum -eq $3 ]]; then\n    echo \"true\"\n  else\n\
    \    sum=$(($2 + $3))\n    if [[ $sum -eq $1 ]]; then\n      echo \"true\"\n \
    \   else\n      sum=$(($1 + $3))\n      if [[ $sum -eq $2 ]]; then\n        echo\
    \ \"true\"\n      else\n        echo \"false\"\n      fi\n    fi\n  fi\n}\n\n\
    candidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdsxuqvfw.sh: line 31: 2.5 + 2: syntax error: invalid arithmetic
    operator (error token is ".5 + 2")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [ \"$#\" -ne 3 ]; then\n       \
    \ echo \"Invalid input: require 3 arguments, but got $#\"\n        return 1\n\
    \    fi\n\n    # Truncate the floating point numbers.\n    first=$(echo \"$1\"\
    \ | cut -d. -f1)\n    second=$(echo \"$2\" | cut -d. -f1)\n    third=$(echo \"\
    $3\" | cut -d. -f1)\n\n    if [[ \"${first}\" -eq \"${second}+${third}\" ]] ||\
    \ [[ \"${second}\" -eq \"${first}+${third}\" ]] || [[ \"${third}\" -eq \"${first}+${second}\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $1 =~ ^[+-]?[0-9]+([.][0-9]+)?$\
    \ ]] &&\n        [[ $2 =~ ^[+-]?[0-9]+([.][0-9]+)?$ ]] &&\n        [[ $3 =~ ^[+-]?[0-9]+([.][0-9]+)?$\
    \ ]]; then\n        local result=\"false\"\n        if [[ \"$1\" -eq \"$(($2 +\
    \ $3))\" ]]; then\n            result=\"true\"\n        elif [[ \"$2\" -eq \"\
    $(($1 + $3))\" ]]; then\n            result=\"true\"\n        elif [[ \"$3\" -eq\
    \ \"$(($1 + $2))\" ]]; then\n            result=\"true\"\n        fi\n       \
    \ echo \"$result\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbi2yed7w.sh: line 23: [[: 2.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    /tmp/tmpbi2yed7w.sh: line 25: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local first=$1\n  local second=$2\n \
    \ local third=$3\n  local int_check=true\n  if ! [[ \"$first\" =~ ^-?[0-9]+$ ]];\
    \ then\n    int_check=false\n  fi\n  if ! [[ \"$second\" =~ ^-?[0-9]+$ ]]; then\n\
    \    int_check=false\n  fi\n  if ! [[ \"$third\" =~ ^-?[0-9]+$ ]]; then\n    int_check=false\n\
    \  fi\n  if [[ $(( $first + $second )) == $third ]]; then\n    echo \"true\"\n\
    \  elif [[ $(( $first + $third )) == $second ]]; then\n    echo \"true\"\n  elif\
    \ [[ $(( $second + $third )) == $first ]]; then\n    echo \"true\"\n  elif [[\
    \ $int_check == false ]]; then\n    echo \"false\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp6kxg8dl.sh: line 32: 2.5 + 2 : syntax error: invalid arithmetic
    operator (error token is ".5 + 2 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if ! echo \"$1\" | grep '^-\\?[0-9]\\\
    +$' > /dev/null ; then\n        return 1\n    fi\n    if ! echo \"$2\" | grep\
    \ '^-\\?[0-9]\\+$' > /dev/null ; then\n        return 1\n    fi\n    if ! echo\
    \ \"$3\" | grep '^-\\?[0-9]\\+$' > /dev/null ; then\n        return 1\n    fi\n\
    \    if [ \"$1\" -eq \"$2\" -a \"$2\" -eq \"$3\" ] ; then\n        return 1\n\
    \    fi\n    if [ \"$1\" -eq \"$(expr $2 + $3)\" ] ; then\n        return 0\n\
    \    fi\n    if [ \"$2\" -eq \"$(expr $1 + $3)\" ] ; then\n        return 0\n\
    \    fi\n    if [ \"$3\" -eq \"$(expr $1 + $2)\" ] ; then\n        return 0\n\
    \    fi\n    return 1\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\t# make sure we have 3 command line parameters\n\
    \tif [ \"$#\" -ne 3 ]; then\n\t\techo \"Usage: any_int x y z\"\n\t\treturn\n\t\
    fi\n\n\tlocal sum\n\tlet sum=$2+$3\n\tif [ \"$1\" -eq \"$sum\" ]; then\n\t\techo\
    \ \"true\"\n\t\treturn\n\tfi\n\n\tlet sum=$1+$3\n\tif [ \"$2\" -eq \"$sum\" ];\
    \ then\n\t\techo \"true\"\n\t\treturn\n\tfi\n\n\tlet sum=$1+$2\n\tif [ \"$3\"\
    \ -eq \"$sum\" ]; then\n\t\techo \"true\"\n\t\treturn\n\tfi\n\n\techo \"false\"\
    \n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpbf9saqp_.sh: line 27: [: 2.5: integer expression expected

    /tmp/tmpbf9saqp_.sh: line 32: let: sum=2.5+3: syntax error: invalid arithmetic
    operator (error token is ".5+3")

    /tmp/tmpbf9saqp_.sh: line 38: let: sum=2.5+2: syntax error: invalid arithmetic
    operator (error token is ".5+2")

    /tmp/tmpbf9saqp_.sh: line 26: let: sum=5+3.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    /tmp/tmpbf9saqp_.sh: line 27: [: 1.5: integer expression expected

    /tmp/tmpbf9saqp_.sh: line 32: let: sum=1.5+3.5: syntax error: invalid arithmetic
    operator (error token is ".5+3.5")

    /tmp/tmpbf9saqp_.sh: line 33: [: : integer expression expected

    /tmp/tmpbf9saqp_.sh: line 38: let: sum=1.5+5: syntax error: invalid arithmetic
    operator (error token is ".5+5")

    /tmp/tmpbf9saqp_.sh: line 39: [: 3.5: integer expression expected

    /tmp/tmpbf9saqp_.sh: line 26: let: sum=2.2+2.2: syntax error: invalid arithmetic
    operator (error token is ".2+2.2")

    /tmp/tmpbf9saqp_.sh: line 27: [: 2.2: integer expression expected

    /tmp/tmpbf9saqp_.sh: line 32: let: sum=2.2+2.2: syntax error: invalid arithmetic
    operator (error token is ".2+2.2")

    /tmp/tmpbf9saqp_.sh: line 33: [: 2.2: integer expression expected

    /tmp/tmpbf9saqp_.sh: line 38: let: sum=2.2+2.2: syntax error: invalid arithmetic
    operator (error token is ".2+2.2")

    /tmp/tmpbf9saqp_.sh: line 39: [: 2.2: integer expression expected

    /tmp/tmpbf9saqp_.sh: line 27: [: 3.0: integer expression expected

    /tmp/tmpbf9saqp_.sh: line 32: let: sum=3.0+7: syntax error: invalid arithmetic
    operator (error token is ".0+7")

    /tmp/tmpbf9saqp_.sh: line 38: let: sum=3.0+4: syntax error: invalid arithmetic
    operator (error token is ".0+4")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [ $# -eq 3 ]; then\n        if [\
    \ $(echo \"$1\" | grep -E \"^[0-9]+$\") ] && [ $(echo \"$2\" | grep -E \"^[0-9]+$\"\
    ) ] && [ $(echo \"$3\" | grep -E \"^[0-9]+$\") ]; then\n            if [ $1 -eq\
    \ $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n\
    \                echo \"true\"\n            else\n                echo \"false\"\
    \n            fi\n        else\n            echo \"false\"\n        fi\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n  \
    \  [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ \"$1\" = \"$(echo \"scale=0; $2\
    \ + $3\" | bc -l)\" ] || [ \"$2\" = \"$(echo \"scale=0; $1 + $3\" | bc -l)\" ]\
    \ || [ \"$3\" = \"$(echo \"scale=0; $1 + $2\" | bc -l)\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    echo \"$1\" | grep -E '^[0-9]+$' >\
    \ /dev/null && echo \"$2\" | grep -E '^[0-9]+$' > /dev/null && echo \"$3\" | grep\
    \ -E '^[0-9]+$' > /dev/null && {\n        (( $1 + $2 == $3 )) || (( $1 + $3 ==\
    \ $2 )) || (( $2 + $3 == $1 ))\n    }\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  case \"$1\" in\n  ''|*[!0-9]*) return\
    \ 1 ;;\n  esac\n  case \"$2\" in\n  ''|*[!0-9]*) return 1 ;;\n  esac\n  case \"\
    $3\" in\n  ''|*[!0-9]*) return 1 ;;\n  esac\n  if [ $1 = $(($2 + $3)) ]\n  then\n\
    \    return 0\n  elif [ $2 = $(($1 + $3)) ]\n  then\n    return 0\n  elif [ $3\
    \ = $(($1 + $2)) ]\n  then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ [0-9]* && $2 =~ [0-9]* &&\
    \ $3 =~ [0-9]* ]]; then\n    if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3))\
    \ ] || [ $3 -eq $(($1 + $2)) ]; then\n      echo \"true\"\n    else\n      echo\
    \ \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n  \
    \  any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"\
    1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n \
    \   [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"\
    2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpchyze2wg.sh: line 20: [: 2.5: integer expression expected

    /tmp/tmpchyze2wg.sh: line 20: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if (( $1 + $2 == $3 )) || (( $2 + $3\
    \ == $1 )) || (( $1 + $3 == $2 )); then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmph92phr1r.sh: line 19: ((: 2.5 + 2 == 3 : syntax error: invalid
    arithmetic operator (error token is ".5 + 2 == 3 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 2 + 3 == 2.5 : syntax error: invalid arithmetic
    operator (error token is ".5 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 2.5 + 3 == 2 : syntax error: invalid arithmetic
    operator (error token is ".5 + 3 == 2 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 1.5 + 5 == 3.5 : syntax error: invalid arithmetic
    operator (error token is ".5 + 5 == 3.5 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 5 + 3.5 == 1.5 : syntax error: invalid arithmetic
    operator (error token is ".5 == 1.5 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 1.5 + 3.5 == 5 : syntax error: invalid arithmetic
    operator (error token is ".5 + 3.5 == 5 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 2.2 + 2.2 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 2.2 + 2.2 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 2.2 + 2.2 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 3.0 + 4 == 7 : syntax error: invalid arithmetic
    operator (error token is ".0 + 4 == 7 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 4 + 7 == 3.0 : syntax error: invalid arithmetic
    operator (error token is ".0 ")

    /tmp/tmph92phr1r.sh: line 19: ((: 3.0 + 7 == 4 : syntax error: invalid arithmetic
    operator (error token is ".0 + 7 == 4 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [ $# -ne 3 ]; then\n        echo\
    \ \"Wrong number of arguments\"\n        return 2\n    fi\n    local is_int=true\n\
    \    for i in $@; do\n        if ! [[ $i =~ ^-?[0-9]+$ ]]; then\n            is_int=false\n\
    \        fi\n    done\n    if ! $is_int; then\n        echo \"false\"\n      \
    \  return 0\n    fi\n    local expr_1=$(($1+$2))\n    local expr_2=$(($1+$3))\n\
    \    local expr_3=$(($2+$3))\n    if [ $expr_1 -eq $3 ] || [ $expr_2 -eq $2 ]\
    \ || [ $expr_3 -eq $1 ]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$\
    \ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n    if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq $1\
    \ + $3 ]] || [[ $3 -eq $1 + $2 ]]; then\n      echo \"true\"\n    else\n     \
    \ echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n\
    \    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk3m9g4jd.sh: line 20: syntax error in conditional expression

    /tmp/tmpk3m9g4jd.sh: line 20: syntax error near `+''

    /tmp/tmpk3m9g4jd.sh: line 20: `    if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq $1 + $3
    ]] || [[ $3 -eq $1 + $2 ]]; then''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Define the local variables\n  local\
    \ a=$1\n  local b=$2\n  local c=$3\n  local sum=$(bc <<< \"$a + $b\")\n  local\
    \ sum2=$(bc <<< \"$a + $c\")\n  local sum3=$(bc <<< \"$b + $c\")\n  local mod1=$(bc\
    \ <<< \"$sum % 1\")\n  local mod2=$(bc <<< \"$sum2 % 1\")\n  local mod3=$(bc <<<\
    \ \"$sum3 % 1\")\n  local moda=$(bc <<< \"$a % 1\")\n  local modb=$(bc <<< \"\
    $b % 1\")\n  local modc=$(bc <<< \"$c % 1\")\n  local mod4=$(bc <<< \"$sum % 1\"\
    )\n  local mod5=$(bc <<< \"$sum2 % 1\")\n  local mod6=$(bc <<< \"$sum3 % 1\")\n\
    \  local zero=0\n  local float=$(bc <<< \"$mod1 == $zero\")\n  local float2=$(bc\
    \ <<< \"$mod2 == $zero\")\n  local float3=$(bc <<< \"$mod3 == $zero\")\n  local\
    \ float4=$(bc <<< \"$mod4 == $zero\")\n  local float5=$(bc <<< \"$mod5 == $zero\"\
    )\n  local float6=$(bc <<< \"$mod6 == $zero\")\n  local int=$(bc <<< \"$moda ==\
    \ $zero\")\n  local int2=$(bc <<< \"$modb == $zero\")\n  local int3=$(bc <<< \"\
    $modc == $zero\")\n  local int4=$(bc <<< \"$moda == $zero\")\n  local int5=$(bc\
    \ <<< \"$modb == $zero\")\n  local int6=$(bc <<< \"$modc == $zero\")\n  # If c\
    \ is equal to a + b and c is not a float and a + b is not a float and a is not\
    \ a float and b is not a float\n  if [[ \"$c\" == \"$sum\" && \"$float\" == \"\
    $int\" && \"$float4\" == \"$int4\" && \"$float5\" == \"$int5\" ]]; then\n    echo\
    \ \"true\"\n  # If c is equal\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkuu12k29.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpkuu12k29.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if echo \"$1 + $2\" | bc | grep -qE \"\
    ^$3\\$\"; then\n    echo \"true\"\n  elif echo \"$2 + $3\" | bc | grep -qE \"\
    ^$1\\$\"; then\n    echo \"true\"\n  elif echo \"$1 + $3\" | bc | grep -qE \"\
    ^$2\\$\"; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local a=\"$1\"\n  local b=\"$2\"\n  local\
    \ c=\"$3\"\n  local sum\n\n  if [[ $a =~ ^[0-9]*$ ]] && [[ $b =~ ^[0-9]*$ ]] &&\
    \ [[ $c =~ ^[0-9]*$ ]]; then\n    sum=$(( a + b ))\n    if [[ $sum -eq $c ]];\
    \ then\n      echo \"true\"\n    else\n      sum=$(( a + c ))\n      if [[ $sum\
    \ -eq $b ]]; then\n        echo \"true\"\n      else\n        sum=$(( b + c ))\n\
    \        if [[ $sum -eq $a ]]; then\n          echo \"true\"\n        else\n \
    \         echo \"false\"\n        fi\n      fi\n    fi\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Check if the numbers are integers.\n\
    \  local integer=\"^[0-9]+$\"\n  if ! [[ $1 =~ $integer ]] || ! [[ $2 =~ $integer\
    \ ]] || ! [[ $3 =~ $integer ]]; then\n    echo \"false\"\n    return\n  fi\n\n\
    \  # Check if any of the numbers is equal to the sum of the other two.\n  if [[\
    \ $(($1 + $2)) -eq $3 ]] || [[ $(($1 + $3)) -eq $2 ]] || [[ $(($2 + $3)) -eq $1\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $(($1 + $2)) -eq $3 ]; then\n  \
    \  echo \"true\"\n  elif [ $(($1 + $3)) -eq $2 ]; then\n    echo \"true\"\n  elif\
    \ [ $(($2 + $3)) -eq $1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1fuo6wxd.sh: line 19: 2.5 + 2: syntax error: invalid arithmetic
    operator (error token is ".5 + 2")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ -z \"$1\" ] || [ -z \"$2\" ] ||\
    \ [ -z \"$3\" ]; then\n    echo \"\\\"\\\"\"\n    return\n  fi\n  if echo \"$1\"\
    \ | grep -vq -e \"^[0-9]*$\"; then\n    echo \"\\\"false\\\"\"\n    return\n \
    \ fi\n  if echo \"$2\" | grep -vq -e \"^[0-9]*$\"; then\n    echo \"\\\"false\\\
    \"\"\n    return\n  fi\n  if echo \"$3\" | grep -vq -e \"^[0-9]*$\"; then\n  \
    \  echo \"\\\"false\\\"\"\n    return\n  fi\n  if [ $1 -eq $(( $2 + $3 )) ]; then\n\
    \    echo \"\\\"true\\\"\"\n    return\n  fi\n  if [ $2 -eq $(( $1 + $3 )) ];\
    \ then\n    echo \"\\\"true\\\"\"\n    return\n  fi\n  if [ $3 -eq $(( $1 + $2\
    \ )) ]; then\n    echo \"\\\"true\\\"\"\n    return\n  fi\n  echo \"\\\"false\\\
    \"\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"\
    2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~\
    \ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n    if [ $1 -eq $(($2 + $3))\
    \ ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n      echo \"\
    true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"\
    2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if (( $1 == 0 )); then echo \"false\"\
    ; exit 0; fi\n  if (( $2 == 0 )); then echo \"false\"; exit 0; fi\n  if (( $3\
    \ == 0 )); then echo \"false\"; exit 0; fi\n  if [ $(echo \"$1+$2\" | bc) == $3\
    \ ]; then echo \"true\"; exit 0; fi\n  if [ $(echo \"$1+$3\" | bc) == $2 ]; then\
    \ echo \"true\"; exit 0; fi\n  if [ $(echo \"$2+$3\" | bc) == $1 ]; then echo\
    \ \"true\"; exit 0; fi\n  echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp7o6m0lw1.sh: line 19: ((: 2.5 == 0 : syntax error: invalid arithmetic
    operator (error token is ".5 == 0 ")

    /tmp/tmp7o6m0lw1.sh: line 19: ((: 1.5 == 0 : syntax error: invalid arithmetic
    operator (error token is ".5 == 0 ")

    /tmp/tmp7o6m0lw1.sh: line 21: ((: 3.5 == 0 : syntax error: invalid arithmetic
    operator (error token is ".5 == 0 ")

    /tmp/tmp7o6m0lw1.sh: line 19: ((: 2.2 == 0 : syntax error: invalid arithmetic
    operator (error token is ".2 == 0 ")

    /tmp/tmp7o6m0lw1.sh: line 20: ((: 2.2 == 0 : syntax error: invalid arithmetic
    operator (error token is ".2 == 0 ")

    /tmp/tmp7o6m0lw1.sh: line 21: ((: 2.2 == 0 : syntax error: invalid arithmetic
    operator (error token is ".2 == 0 ")

    /tmp/tmp7o6m0lw1.sh: line 19: ((: 3.0 == 0 : syntax error: invalid arithmetic
    operator (error token is ".0 == 0 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    local -n array=$1\n    local -i a=$2\n\
    \    local -i b=$3\n    local -i c=$4\n    local -r len=${#array[@]}\n    if [[\
    \ ${array[@]} =~ [a-zA-Z]+ ]]; then\n        printf 'false'\n    else\n      \
    \  if [[ $a -eq $(( b + c )) ]] || [[ $b -eq $(( a + c )) ]] || [[ $c -eq $((\
    \ a + b )) ]]; then\n            printf 'true'\n        else\n            printf\
    \ 'false'\n        fi\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphs86vnmk.sh: line 19: local: `2'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if (( $(echo \"$1==$2+$3\" | bc -l)\
    \ )) && [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$\
    \ ]]; then\n        echo \"true\"\n    elif (( $(echo \"$2==$1+$3\" | bc -l) ))\
    \ && [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]];\
    \ then\n        echo \"true\"\n    elif (( $(echo \"$3==$1+$2\" | bc -l) )) &&\
    \ [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    #\n    # Your code here\n    #\n  \
    \  sum=$(echo \"$1 + $2\" | bc)\n    if [ $(echo \"$3 == $sum\" | bc) == 1 ];\
    \ then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 == *.* ]] || [[ $2 == *.* ]]\
    \ || [[ $3 == *.* ]]; then\n    echo \"false\"\n  else\n    if [ $1 -eq $2 ] ||\
    \ [ $1 -eq $3 ] || [ $2 -eq $3 ]; then\n      echo \"false\"\n    else\n     \
    \ if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2))\
    \ ]; then\n        echo \"true\"\n      else\n        echo \"false\"\n      fi\n\
    \    fi\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq\
    \ $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyfkrmb26.sh: line 19: [: 2.5: integer expression expected

    /tmp/tmpyfkrmb26.sh: line 19: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  is_int $1 || is_int $2 || is_int $3 ||\
    \ return 0\n  if [[ ($1 -eq $(($2 + $3))) || ($2 -eq $(($1 + $3))) || ($3 -eq\
    \ $(($1 + $2))) ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt_r32dej.sh: line 19: is_int: command not found

    /tmp/tmpt_r32dej.sh: line 19: is_int: command not found

    /tmp/tmpt_r32dej.sh: line 19: is_int: command not found

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if ((\"$1\" + \"$2\" == \"$3\")) || ((\"\
    $1\" + \"$3\" == \"$2\")) || ((\"$2\" + \"$3\" == \"$1\")); then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp07r9hsvm.sh: line 19: ((: 2.5 + 2 == 3: syntax error: invalid arithmetic
    operator (error token is ".5 + 2 == 3")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 2.5 + 3 == 2: syntax error: invalid arithmetic
    operator (error token is ".5 + 3 == 2")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 2 + 3 == 2.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 1.5 + 5 == 3.5: syntax error: invalid arithmetic
    operator (error token is ".5 + 5 == 3.5")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 1.5 + 3.5 == 5: syntax error: invalid arithmetic
    operator (error token is ".5 + 3.5 == 5")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 5 + 3.5 == 1.5: syntax error: invalid arithmetic
    operator (error token is ".5 == 1.5")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 2.2 + 2.2 == 2.2: syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 2.2 + 2.2 == 2.2: syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 2.2 + 2.2 == 2.2: syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 3.0 + 4 == 7: syntax error: invalid arithmetic
    operator (error token is ".0 + 4 == 7")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 3.0 + 7 == 4: syntax error: invalid arithmetic
    operator (error token is ".0 + 7 == 4")

    /tmp/tmp07r9hsvm.sh: line 19: ((: 4 + 7 == 3.0: syntax error: invalid arithmetic
    operator (error token is ".0")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Check if the sum of $2 and $3 is equal\
    \ to $1.\n  if (( $(echo \"$2 + $3\" | bc -l) == $1 )); then\n    echo \"true\"\
    \n  # Check if the sum of $1 and $3 is equal to $2.\n  elif (( $(echo \"$1 + $3\"\
    \ | bc -l) == $2 )); then\n    echo \"true\"\n  # Check if the sum of $1 and $2\
    \ is equal to $3.\n  elif (( $(echo \"$1 + $2\" | bc -l) == $3 )); then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp015c9xs8.sh: line 20: ((: 5 == 2.5 : syntax error: invalid arithmetic
    operator (error token is ".5 ")

    /tmp/tmp015c9xs8.sh: line 23: ((: 5.5 == 2 : syntax error: invalid arithmetic
    operator (error token is ".5 == 2 ")

    /tmp/tmp015c9xs8.sh: line 26: ((: 4.5 == 3 : syntax error: invalid arithmetic
    operator (error token is ".5 == 3 ")

    /tmp/tmp015c9xs8.sh: line 20: ((: 8.5 == 1.5 : syntax error: invalid arithmetic
    operator (error token is ".5 == 1.5 ")

    /tmp/tmp015c9xs8.sh: line 23: ((: 5.0 == 5 : syntax error: invalid arithmetic
    operator (error token is ".0 == 5 ")

    /tmp/tmp015c9xs8.sh: line 26: ((: 6.5 == 3.5 : syntax error: invalid arithmetic
    operator (error token is ".5 == 3.5 ")

    /tmp/tmp015c9xs8.sh: line 20: ((: 4.4 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".4 == 2.2 ")

    /tmp/tmp015c9xs8.sh: line 23: ((: 4.4 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".4 == 2.2 ")

    /tmp/tmp015c9xs8.sh: line 26: ((: 4.4 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".4 == 2.2 ")

    /tmp/tmp015c9xs8.sh: line 20: ((: 11 == 3.0 : syntax error: invalid arithmetic
    operator (error token is ".0 ")

    /tmp/tmp015c9xs8.sh: line 23: ((: 10.0 == 4 : syntax error: invalid arithmetic
    operator (error token is ".0 == 4 ")

    /tmp/tmp015c9xs8.sh: line 26: ((: 7.0 == 7 : syntax error: invalid arithmetic
    operator (error token is ".0 == 7 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    [ \"$1\" = \"\" ] && echo \"true\"\
    \ && return 0\n    [ \"$2\" = \"\" ] && echo \"true\" && return 0\n    [ \"$3\"\
    \ = \"\" ] && echo \"true\" && return 0\n    if [[ $1 =~ ^[0-9]*$ ]] && [[ $2\
    \ =~ ^[0-9]*$ ]] && [[ $3 =~ ^[0-9]*$ ]]; then\n        if [ $1 -eq $(($2 + $3))\
    \ ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    else\n \
    \       echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n  \
    \  [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    local first=$1\n    local second=$2\n\
    \    local third=$3\n    local sum=$(bc <<< \"scale=2; $second + $third\")\n \
    \   echo \"scale=2; $first + 0 == $sum + 0\" | bc -l | grep -q \"1\"\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if ! [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n\
    \    echo false\n    return\n  fi\n  if ! [[ \"$2\" =~ ^-?[0-9]+$ ]]; then\n \
    \   echo false\n    return\n  fi\n  if ! [[ \"$3\" =~ ^-?[0-9]+$ ]]; then\n  \
    \  echo false\n    return\n  fi\n  if [[ \"$1\" -eq \"$2\" + \"$3\" ]]; then\n\
    \    echo true\n    return\n  fi\n  if [[ \"$2\" -eq \"$1\" + \"$3\" ]]; then\n\
    \    echo true\n    return\n  fi\n  if [[ \"$3\" -eq \"$1\" + \"$2\" ]]; then\n\
    \    echo true\n    return\n  fi\n  echo false\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp41cj6a8f.sh: line 31: syntax error in conditional expression

    /tmp/tmp41cj6a8f.sh: line 31: syntax error near `+''

    /tmp/tmp41cj6a8f.sh: line 31: `  if [[ "$1" -eq "$2" + "$3" ]]; then''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  #test to make sure all arguments are\
    \ ints\n  if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$\
    \ ]]; then\n    #if first argument is equal to the sum of second and third arguments\n\
    \    if [ $1 -eq $(( $2 + $3 )) ]; then\n      echo \"true\"\n    #if second argument\
    \ is equal to the sum of first and third arguments\n    elif [ $2 -eq $(( $1 +\
    \ $3 )) ]; then\n      echo \"true\"\n    #if third argument is equal to the sum\
    \ of first and second arguments\n    elif [ $3 -eq $(( $1 + $2 )) ]; then\n  \
    \    echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    result=\"\"\n    if [ $(echo $1 | grep\
    \ \"^\\-\\?[0-9]\\+$\") ] && [ $(echo $2 | grep \"^\\-\\?[0-9]\\+$\") ] && [ $(echo\
    \ $3 | grep \"^\\-\\?[0-9]\\+$\") ]; then\n        if [ $1 -eq $(($2 + $3)) ]\
    \ || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n            result=\"\
    true\"\n        else\n            result=\"false\"\n        fi\n    else\n   \
    \     result=\"false\"\n    fi\n    echo $result\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ \"$1\" == *\".\"* ]] || [[ \"$2\"\
    \ == *\".\"* ]] || [[ \"$3\" == *\".\"* ]]; then\n    echo \"false\"\n  else\n\
    \    if [[ $(expr $1 + $2) -eq $3 ]] || [[ $(expr $1 + $3) -eq $2 ]] || [[ $(expr\
    \ $2 + $3) -eq $1 ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\
    \n    fi\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Check if arg 1 is a floating point\n\
    \  if [[ \"$1\" =~ ^-?[0-9]+([.][0-9]+)?$ ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n  # Check if arg 2 is a floating point\n  if [[ \"\
    $2\" =~ ^-?[0-9]+([.][0-9]+)?$ ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n  # Check if arg 3 is a floating point\n  if [[ \"$3\" =~ ^-?[0-9]+([.][0-9]+)?$\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n  # Check if\
    \ arg 1 and arg 2 are the same\n  if [[ \"$1\" -eq \"$2\" ]]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n  # Check if arg 1 and arg 3 are the\
    \ same\n  if [[ \"$1\" -eq \"$3\" ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi\n  # Check if arg 2 and arg 3 are the same\n  if [[ \"$2\" -eq\
    \ \"$3\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n  # Check\
    \ if arg 1 and arg 2 add up to arg 3\n  if [[ $(( \"$1\" + \"$2\" )) -eq \"$3\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n  # Check if\
    \ arg 1 and arg 3 add up to arg 2\n  if [[ $(( \"$1\" + \"$3\" )) -eq \"$2\" ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n  # Check if arg\
    \ 2 and arg 3 add up to arg 1\n  if [[ $(( \"$2\" + \"$3\" )) -eq \"$1\" ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"\
    1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n \
    \   [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"\
    2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  #Add code here to check if the the sum\
    \ of two integers is equal to the third integer\n  #Check if all three numbers\
    \ are integers\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2a8lqqst.sh: line 21: syntax error near unexpected token `}''

    /tmp/tmp2a8lqqst.sh: line 21: `}''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tif ! [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n\
    \t\treturn 1\n\tfi\n\tif ! [[ \"$2\" =~ ^-?[0-9]+$ ]]; then\n\t\treturn 1\n\t\
    fi\n\tif ! [[ \"$3\" =~ ^-?[0-9]+$ ]]; then\n\t\treturn 1\n\tfi\n\tif [ \"$1\"\
    \ -eq $(( $2 + $3 )) ]; then\n\t\treturn 0\n\tfi\n\tif [ \"$2\" -eq $(( $1 + $3\
    \ )) ]; then\n\t\treturn 0\n\tfi\n\tif [ \"$3\" -eq $(( $1 + $2 )) ]; then\n\t\
    \treturn 0\n\tfi\n\treturn 1\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # check if all are integers\n  if [[\
    \ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n  \
    \  # check if one is equal to the sum of the other two\n    if [ $1 -eq $(($2\
    \ + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n     \
    \ echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\"\
    \ =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]] && [[ \"$1\" -eq \"$2\" + \"$3\"\
    \ ]] && echo \"true\" || echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_15ckejr.sh: line 19: syntax error in conditional expression

    /tmp/tmp_15ckejr.sh: line 19: syntax error near `+''

    /tmp/tmp_15ckejr.sh: line 19: `  [[ "$1" =~ ^[0-9]+$ ]] && [[ "$2" =~ ^[0-9]+$
    ]] && [[ "$3" =~ ^[0-9]+$ ]] && [[ "$1" -eq "$2" + "$3" ]] && echo "true" || echo
    "false"''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local a=${1}\n  local b=${2}\n  local\
    \ c=${3}\n  if [[ $a -eq $(($b + $c)) || $b -eq $(($a + $c)) || $c -eq $(($a +\
    \ $b)) ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr0rqxakb.sh: line 22: [[: 2.5: syntax error: invalid arithmetic
    operator (error token is ".5")

    /tmp/tmpr0rqxakb.sh: line 22: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]]\
    \ && [[ $2 =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]] && [[ $3 =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]];\
    \ then\n    if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq\
    \ $(($1 + $2)) ]; then\n      echo \"true\"\n    else\n      echo \"false\"\n\
    \    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxocxa7wr.sh: line 20: [: 2.5: integer expression expected

    /tmp/tmpxocxa7wr.sh: line 20: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ -z \"$1\" -o -z \"$2\" -o -z \"\
    $3\" ]; then\n    echo \"false\"\n    return 1\n  fi\n  # First, check if all\
    \ of the parameters are integers\n  if [ $1 -eq $1 2>/dev/null -a $2 -eq $2 2>/dev/null\
    \ -a $3 -eq $3 2>/dev/null ]; then\n    echo \"true\"\n    return 0\n  else\n\
    \    echo \"false\"\n    return 1\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if (( $1 == $2 + $3 || $2 == $1 + $3\
    \ || $3 == $1 + $2 )) && [[ \"$1\" =~ ^-?[0-9]+$ ]] && [[ \"$2\" =~ ^-?[0-9]+$\
    \ ]] && [[ \"$3\" =~ ^-?[0-9]+$ ]]; then\n      echo \"true\"\n    else\n    \
    \  echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpd17kj_8g.sh: line 19: ((: 2.5 == 2 + 3 || 2 == 2.5 + 3 || 3 ==
    2.5 + 2 : syntax error: invalid arithmetic operator (error token is ".5 == 2 +
    3 || 2 == 2.5 + 3 || 3 == 2.5 + 2 ")

    /tmp/tmpd17kj_8g.sh: line 19: ((: 1.5 == 5 + 3.5 || 5 == 1.5 + 3.5 || 3.5 == 1.5
    + 5 : syntax error: invalid arithmetic operator (error token is ".5 == 5 + 3.5
    || 5 == 1.5 + 3.5 || 3.5 == 1.5 + 5 ")

    /tmp/tmpd17kj_8g.sh: line 19: ((: 2.2 == 2.2 + 2.2 || 2.2 == 2.2 + 2.2 || 2.2
    == 2.2 + 2.2 : syntax error: invalid arithmetic operator (error token is ".2 ==
    2.2 + 2.2 || 2.2 == 2.2 + 2.2 || 2.2 == 2.2 + 2.2 ")

    /tmp/tmpd17kj_8g.sh: line 19: ((: 3.0 == 4 + 7 || 4 == 3.0 + 7 || 7 == 3.0 + 4
    : syntax error: invalid arithmetic operator (error token is ".0 == 4 + 7 || 4
    == 3.0 + 7 || 7 == 3.0 + 4 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  declare -i sum1\n  declare -i sum2\n\
    \  declare -i sum3\n  sum1=$((\"$1\" + \"$2\"))\n  sum2=$((\"$1\" + \"$3\"))\n\
    \  sum3=$((\"$2\" + \"$3\"))\n  if [[ \"$sum1\" -eq \"$3\" ]] || [[ \"$sum2\"\
    \ -eq \"$2\" ]] || [[ \"$sum3\" -eq \"$1\" ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpem6_dgqv.sh: line 22: 2.5 + 2: syntax error: invalid arithmetic
    operator (error token is ".5 + 2")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  sum=$(echo \"$1 + $2\" | bc -l)\n  if\
    \ [[ $(echo \"$3 == $sum\" | bc -l) == 1 ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if ! is_int \"$1\" || ! is_int \"$2\"\
    \ || ! is_int \"$3\"; then\n        echo \"false\"\n        return\n    fi\n \
    \   if [[ $(echo \"$1 == ($2 + $3)\" | bc -l) -eq 1 ]] ||\n       [[ $(echo \"\
    $2 == ($1 + $3)\" | bc -l) -eq 1 ]] ||\n       [[ $(echo \"$3 == ($1 + $2)\" |\
    \ bc -l) -eq 1 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1wtbc4og.sh: line 19: is_int: command not found

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [ -z \"$1\" ] || [ -z \"$2\" ] ||\
    \ [ -z \"$3\" ]; then\n        echo \"false\"\n        return 1\n    fi\n    if\
    \ [ \"$(bc <<< \"$1 % 1\")\" != \"0\" ] || [ \"$(bc <<< \"$2 % 1\")\" != \"0\"\
    \ ] || [ \"$(bc <<< \"$3 % 1\")\" != \"0\" ]; then\n        echo \"false\"\n \
    \       return 1\n    fi\n    if [ \"$(bc <<< \"$1 == ($2 + $3)\")\" == \"1\"\
    \ ] || [ \"$(bc <<< \"$2 == ($1 + $3)\")\" == \"1\" ] || [ \"$(bc <<< \"$3 ==\
    \ ($1 + $2)\")\" == \"1\" ]; then\n        echo \"true\"\n        return 0\n \
    \   fi\n    echo \"false\"\n    return 1\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tlocal isfloat='^[0-9]+([.][0-9]+)?$'\n\
    \tif [[ $1 =~ $isfloat ]] && [[ $2 =~ $isfloat ]] && [[ $3 =~ $isfloat ]]; then\n\
    \t\tif [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 +\
    \ $2)) ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\t\
    else\n\t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n  \
    \  [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpk78adsi3.sh: line 21: [: 2.5: integer expression expected

    /tmp/tmpk78adsi3.sh: line 21: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if (($1 + $2 == $3 || $1 + $3 == $2 ||\
    \ $2 + $3 == $1)) && [[ $1 == *\".\"* || $2 == *\".\"* || $3 == *\".\"* ]]; then\n\
    \    echo \"false\"\n  else\n    echo \"true\"\n  fi\n}\n\ncandidate() {\n   \
    \ any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"\
    1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n \
    \   [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"\
    2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmph6imlh5l.sh: line 19: ((: 2.5 + 2 == 3 || 2.5 + 3 == 2 || 2 + 3
    == 2.5: syntax error: invalid arithmetic operator (error token is ".5 + 2 == 3
    || 2.5 + 3 == 2 || 2 + 3 == 2.5")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $# -ne 3 ]; then\n    echo \"Please\
    \ provide 3 numbers.\"\n    return 1\n  fi\n  if [[ $1 == *.* ]] || [[ $2 == *.*\
    \ ]] || [[ $3 == *.* ]]; then\n    echo \"false\"\n    return 1\n  fi\n  if [\
    \ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ \"$1\" =~ ^[+-]?[0-9]+$ ]] &&\
    \ [[ \"$2\" =~ ^[+-]?[0-9]+$ ]] && [[ \"$3\" =~ ^[+-]?[0-9]+$ ]]; then\n     \
    \   if [[ \"$1\" -eq \"$2\" + \"$3\" ]] || [[ \"$2\" -eq \"$1\" + \"$3\" ]] ||\
    \ [[ \"$3\" -eq \"$1\" + \"$2\" ]]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyjx6lts6.sh: line 20: syntax error in conditional expression

    /tmp/tmpyjx6lts6.sh: line 20: syntax error near `+''

    /tmp/tmpyjx6lts6.sh: line 20: `        if [[ "$1" -eq "$2" + "$3" ]] || [[ "$2"
    -eq "$1" + "$3" ]] || [[ "$3" -eq "$1" + "$2" ]]; then''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tif [[ \"$1\" == \"\" || \"$2\" == \"\"\
    \ || \"$3\" == \"\" ]]; then\n\t\techo \"false\"\n\t\treturn 1\n\tfi\n\tif [[\
    \ \"$1\" == \"$2\" || \"$1\" == \"$3\" || \"$2\" == \"$3\" ]]; then\n\t\techo\
    \ \"false\"\n\t\treturn 1\n\tfi\n\tif [[ \"$1\" =~ ^[-+]?[0-9]+\\.[0-9]+$ || \"\
    $2\" =~ ^[-+]?[0-9]+\\.[0-9]+$ || \"$3\" =~ ^[-+]?[0-9]+\\.[0-9]+$ ]]; then\n\t\
    \techo \"false\"\n\t\treturn 1\n\tfi\n\tif [[ \"$1\" -eq $(( $2 + $3 )) || \"\
    $2\" -eq $(( $1 + $3 )) || \"$3\" -eq $(( $1 + $2 )) ]]; then\n\t\techo \"true\"\
    \n\t\treturn 0\n\tfi\n\techo \"false\"\n\treturn 1\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ \"$1\" == \"$(echo \"scale=0; ($2\
    \ + $3)\" | bc)\" ]] || [[ \"$2\" == \"$(echo \"scale=0; ($1 + $3)\" | bc)\" ]]\
    \ || [[ \"$3\" == \"$(echo \"scale=0; ($1 + $2)\" | bc)\" ]]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [ $# -ne 3 ]; then\n        echo\
    \ \"Error: any_int requires exactly 3 arguments\"\n        return 1\n    fi\n\
    \    if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Check if all the arguments are integers\n\
    \    if [[ \"$1\" == *\".\"* ]] || [[ \"$2\" == *\".\"* ]] || [[ \"$3\" == *\"\
    .\"* ]]; then\n        echo \"false\"\n        return\n    fi\n\n    # Check if\
    \ any of the numbers is the sum of the other two\n    if [ $1 -eq $(($2 + $3))\
    \ ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"\
    1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n \
    \   [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"\
    2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if ! $(is_int \"$1\"); then\n     \
    \   echo \"false\"\n        return\n    fi\n    if ! $(is_int \"$2\"); then\n\
    \        echo \"false\"\n        return\n    fi\n    if ! $(is_int \"$3\"); then\n\
    \        echo \"false\"\n        return\n    fi\n    if [ \"$1\" -eq \"$2\" ]\
    \ || [ \"$1\" -eq \"$3\" ] || [ \"$2\" -eq \"$3\" ]; then\n        echo \"false\"\
    \n        return\n    fi\n    if [ \"$1\" -eq \"$(($2 + $3))\" ] || [ \"$2\" -eq\
    \ \"$(($1 + $3))\" ] || [ \"$3\" -eq \"$(($1 + $2))\" ]; then\n        echo \"\
    true\"\n        return\n    fi\n    echo \"false\"\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjlzmefjt.sh: line 19: is_int: command not found

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  float_regex='^[0-9]+([.][0-9]+)?$'\n\
    \  if [[ $1 =~ $float_regex ]] && [[ $2 =~ $float_regex ]] && [[ $3 =~ $float_regex\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\nif [[ $1 =~ [0-9]+ ]] && [[ $2 =~ [0-9]+\
    \ ]] && [[ $3 =~ [0-9]+ ]] && [[ ($1 -eq $2 + $3) || ($2 -eq $1 + $3) || ($3 -eq\
    \ $1 + $2) ]]; then\necho \"true\"\nelse\necho \"false\"\nfi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7mbme4zp.sh: line 19: expected `)''

    /tmp/tmp7mbme4zp.sh: line 19: syntax error near `+''

    /tmp/tmp7mbme4zp.sh: line 19: `if [[ $1 =~ [0-9]+ ]] && [[ $2 =~ [0-9]+ ]] &&
    [[ $3 =~ [0-9]+ ]] && [[ ($1 -eq $2 + $3) || ($2 -eq $1 + $3) || ($3 -eq $1 +
    $2) ]]; then''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ ! \"$1\" =~ ^-?[0-9]+([.][0-9]+)?$\
    \ ]]; then\n    echo \"false\"\n    return\n  fi\n  if [[ ! \"$2\" =~ ^-?[0-9]+([.][0-9]+)?$\
    \ ]]; then\n    echo \"false\"\n    return\n  fi\n  if [[ ! \"$3\" =~ ^-?[0-9]+([.][0-9]+)?$\
    \ ]]; then\n    echo \"false\"\n    return\n  fi\n  if [[ $(echo \"$1 == $2 +\
    \ $3\" | bc -l) == 1 ]]; then\n    echo \"true\"\n    return\n  fi\n  if [[ $(echo\
    \ \"$2 == $1 + $3\" | bc -l) == 1 ]]; then\n    echo \"true\"\n    return\n  fi\n\
    \  if [[ $(echo \"$3 == $1 + $2\" | bc -l) == 1 ]]; then\n    echo \"true\"\n\
    \    return\n  fi\n  echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ -z \"$1\" -o -z \"$2\" -o -z \"\
    $3\" ]; then\n    echo \"false\"\n    return\n  fi\n  sum=$(echo \"$1+$2\" | bc)\n\
    \  if [ \"$(echo \"$sum == $3\" | bc)\" -eq 1 ]; then\n    echo \"true\"\n   \
    \ return\n  fi\n  sum=$(echo \"$1+$3\" | bc)\n  if [ \"$(echo \"$sum == $2\" |\
    \ bc)\" -eq 1 ]; then\n    echo \"true\"\n    return\n  fi\n  sum=$(echo \"$2+$3\"\
    \ | bc)\n  if [ \"$(echo \"$sum == $1\" | bc)\" -eq 1 ]; then\n    echo \"true\"\
    \n    return\n  fi\n  echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    re='^[0-9]+$'\n    if [[ $1 =~ $re\
    \ && $2 =~ $re && $3 =~ $re ]]; then\n        if [[ $1 -eq $2 + $3 || $2 -eq $1\
    \ + $3 || $3 -eq $1 + $2 ]]; then\n            echo \"true\"\n        else\n \
    \           echo \"false\"\n        fi\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"\
    2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj2owc5gr.sh: line 21: syntax error in conditional expression

    /tmp/tmpj2owc5gr.sh: line 21: syntax error near `+''

    /tmp/tmpj2owc5gr.sh: line 21: `        if [[ $1 -eq $2 + $3 || $2 -eq $1 + $3
    || $3 -eq $1 + $2 ]]; then''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  declare -i x\n  x=$(echo \"$1 + $2 +\
    \ $3\" | bc)\n  [[ x =~ \"\\.0\" ]] && echo \"true\" || echo \"false\"\n}\n\n\
    candidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [ -z \"$1\" ] || [ -z \"$2\" ] ||\
    \ [ -z \"$3\" ]; then\n        echo \"false\"\n        return 1\n    fi\n    if\
    \ ! [[ \"$1\" =~ ^[0-9]+(\\.[0-9]+)?$ ]]; then\n        echo \"false\"\n     \
    \   return 1\n    fi\n    if ! [[ \"$2\" =~ ^[0-9]+(\\.[0-9]+)?$ ]]; then\n  \
    \      echo \"false\"\n        return 1\n    fi\n    if ! [[ \"$3\" =~ ^[0-9]+(\\\
    .[0-9]+)?$ ]]; then\n        echo \"false\"\n        return 1\n    fi\n    if\
    \ [ \"$1\" -eq $(( \"$2\" + \"$3\" )) ] || [ \"$2\" -eq $(( \"$1\" + \"$3\" ))\
    \ ] || [ \"$3\" -eq $(( \"$1\" + \"$2\" )) ]; then\n        echo \"true\"\n  \
    \      return 0\n    fi\n    echo \"false\"\n    return 1\n}\n\ncandidate() {\n\
    \    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2444cg4p.sh: line 35: [: 2.5: integer expression expected

    /tmp/tmp2444cg4p.sh: line 35: 2.5 + 3 : syntax error: invalid arithmetic operator
    (error token is ".5 + 3 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$\
    \ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n    let \"s = $1 + $2\"\n    if [[ $3 -eq\
    \ $s ]]; then\n      echo \"true\"\n    else\n      let \"s = $1 + $3\"\n    \
    \  if [[ $2 -eq $s ]]; then\n        echo \"true\"\n      else\n        let \"\
    s = $2 + $3\"\n        if [[ $1 -eq $s ]]; then\n          echo \"true\"\n   \
    \     else\n          echo \"false\"\n        fi\n      fi\n    fi\n  else\n \
    \   echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ \"$#\" -eq 3 ]; then\n    if [ $(echo\
    \ \"$1 == $2 + $3\" | bc) -eq 1 ] || [ $(echo \"$2 == $1 + $3\" | bc) -eq 1 ]\
    \ || [ $(echo \"$3 == $1 + $2\" | bc) -eq 1 ]; then\n      if ! [[ $1 =~ ^[0-9]+$\
    \ ]] || ! [[ $2 =~ ^[0-9]+$ ]] || ! [[ $3 =~ ^[0-9]+$ ]]; then\n        echo \"\
    false\"\n      else\n        echo \"true\"\n      fi\n    else\n      echo \"\
    false\"\n    fi\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if (( $1 + $2 == $3 )); then\n    echo\
    \ true\n  elif (( $1 + $3 == $2 )); then\n    echo true\n  elif (( $2 + $3 ==\
    \ $1 )); then\n    echo true\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n\
    \    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpkblqyv3n.sh: line 19: ((: 2.5 + 2 == 3 : syntax error: invalid
    arithmetic operator (error token is ".5 + 2 == 3 ")

    /tmp/tmpkblqyv3n.sh: line 21: ((: 2.5 + 3 == 2 : syntax error: invalid arithmetic
    operator (error token is ".5 + 3 == 2 ")

    /tmp/tmpkblqyv3n.sh: line 23: ((: 2 + 3 == 2.5 : syntax error: invalid arithmetic
    operator (error token is ".5 ")

    /tmp/tmpkblqyv3n.sh: line 19: ((: 1.5 + 5 == 3.5 : syntax error: invalid arithmetic
    operator (error token is ".5 + 5 == 3.5 ")

    /tmp/tmpkblqyv3n.sh: line 21: ((: 1.5 + 3.5 == 5 : syntax error: invalid arithmetic
    operator (error token is ".5 + 3.5 == 5 ")

    /tmp/tmpkblqyv3n.sh: line 23: ((: 5 + 3.5 == 1.5 : syntax error: invalid arithmetic
    operator (error token is ".5 == 1.5 ")

    /tmp/tmpkblqyv3n.sh: line 19: ((: 2.2 + 2.2 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2 ")

    /tmp/tmpkblqyv3n.sh: line 21: ((: 2.2 + 2.2 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2 ")

    /tmp/tmpkblqyv3n.sh: line 23: ((: 2.2 + 2.2 == 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 + 2.2 == 2.2 ")

    /tmp/tmpkblqyv3n.sh: line 19: ((: 3.0 + 4 == 7 : syntax error: invalid arithmetic
    operator (error token is ".0 + 4 == 7 ")

    /tmp/tmpkblqyv3n.sh: line 21: ((: 3.0 + 7 == 4 : syntax error: invalid arithmetic
    operator (error token is ".0 + 7 == 4 ")

    /tmp/tmpkblqyv3n.sh: line 23: ((: 4 + 7 == 3.0 : syntax error: invalid arithmetic
    operator (error token is ".0 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 2
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tif [ -z $1 ]; then\n\t\techo \"Please\
    \ provide a number\"\n\telif [ -z $2 ]; then\n\t\techo \"Please provide a number\"\
    \n\telif [ -z $3 ]; then\n\t\techo \"Please provide a number\"\n\telif [ -z $(echo\
    \ $1|egrep \"^-?[0-9]+([.][0-9]+)?$\") ]; then\n\t\techo \"First number is not\
    \ an integer\"\n\telif [ -z $(echo $2|egrep \"^-?[0-9]+([.][0-9]+)?$\") ]; then\n\
    \t\techo \"Second number is not an integer\"\n\telif [ -z $(echo $3|egrep \"^-?[0-9]+([.][0-9]+)?$\"\
    ) ]; then\n\t\techo \"Third number is not an integer\"\n\telif [ $(echo $(( $1\
    \ + $2 ))|egrep \"^-?[0-9]+([.][0-9]+)?$\") ]; then\n\t\tif [ $3 -eq $(( $1 +\
    \ $2 )) ]; then\n\t\t\techo \"true\"\n\t\telif [ $3 -eq $(( $2 + $1 )) ]; then\n\
    \t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telif [ $(echo $((\
    \ $2 + $3 ))|egrep \"^-?[0-9]+([.][0-9]+)?$\") ]; then\n\t\tif [ $1 -eq $(( $2\
    \ + $3 )) ]; then\n\t\t\techo \"true\"\n\t\telif [ $1 -eq $(( $3 + $2 )) ]; then\n\
    \t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telif [ $(echo $((\
    \ $1 + $3 ))|egrep \"^-?[0-9]+([.][0-9]+)?$\") ]; then\n\t\tif [ $2 -eq $(( $1\
    \ + $3 )) ]; then\n\t\t\techo \"true\"\n\t\telif [ $2 -eq $(( $3 + $1 )) ]; then\n\
    \t\t\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"\
    2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgey5e6oc.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpgey5e6oc.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\t# $1 + $2 = $3; $1 = $3 - $2; $2 = $3\
    \ - $1\n\tif [ \"$1\" = \"`echo \"$3-$2\" | bc`\" ]; then\n\t\techo \"true\"\n\
    \telif [ \"$2\" = \"`echo \"$3-$1\" | bc`\" ]; then\n\t\techo \"true\"\n\telse\n\
    \t\techo \"false\"\n\tfi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # The && operator returns true if the\
    \ left part of the operator is true and the right part is true.\n  # The || operator\
    \ returns true if one of the two operators is true.\n  # The test command returns\
    \ true if the expression is true.\n  # -ge = greater than or equal to\n  # -eq\
    \ = equal to\n  # -a = and\n  # -o = or\n  test \"$1\" -ge 0 -a \"$2\" -ge 0 -a\
    \ \"$3\" -ge 0 -a \\( \"$1\" -eq \"$(echo \"$2 + $3\" | bc)\" -o \"$2\" -eq \"\
    $(echo \"$1 + $3\" | bc)\" -o \"$3\" -eq \"$(echo \"$1 + $2\" | bc)\" \\) && echo\
    \ \"true\" || echo \"false\"\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\"\
    \ \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1qui5sc9.sh: line 26: test: 2.5: integer expression expected

    /tmp/tmp1qui5sc9.sh: line 26: test: 1.5: integer expression expected

    /tmp/tmp1qui5sc9.sh: line 26: test: 2.2: integer expression expected

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if (( \"$1\" % 1 == 0 )) && (( \"$2\"\
    \ % 1 == 0 )) && (( \"$3\" % 1 == 0 )); then\n    if (( \"$1\" + \"$2\" == \"\
    $3\" )) || (( \"$1\" + \"$3\" == \"$2\" )) || (( \"$2\" + \"$3\" == \"$1\" ));\
    \ then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp110n9xys.sh: line 19: ((: 2.5 % 1 == 0 : syntax error: invalid
    arithmetic operator (error token is ".5 % 1 == 0 ")

    /tmp/tmp110n9xys.sh: line 19: ((: 1.5 % 1 == 0 : syntax error: invalid arithmetic
    operator (error token is ".5 % 1 == 0 ")

    /tmp/tmp110n9xys.sh: line 19: ((: 2.2 % 1 == 0 : syntax error: invalid arithmetic
    operator (error token is ".2 % 1 == 0 ")

    /tmp/tmp110n9xys.sh: line 19: ((: 3.0 % 1 == 0 : syntax error: invalid arithmetic
    operator (error token is ".0 % 1 == 0 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if (( $1 == $2 + $3 )) || (( $2 == $1\
    \ + $3 )) || (( $3 == $1 + $2 )); then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpi2wc99m4.sh: line 19: ((: 2.5 == 2 + 3 : syntax error: invalid
    arithmetic operator (error token is ".5 == 2 + 3 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 2 == 2.5 + 3 : syntax error: invalid arithmetic
    operator (error token is ".5 + 3 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 3 == 2.5 + 2 : syntax error: invalid arithmetic
    operator (error token is ".5 + 2 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 1.5 == 5 + 3.5 : syntax error: invalid arithmetic
    operator (error token is ".5 == 5 + 3.5 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 5 == 1.5 + 3.5 : syntax error: invalid arithmetic
    operator (error token is ".5 + 3.5 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 3.5 == 1.5 + 5 : syntax error: invalid arithmetic
    operator (error token is ".5 == 1.5 + 5 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 2.2 == 2.2 + 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 == 2.2 + 2.2 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 2.2 == 2.2 + 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 == 2.2 + 2.2 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 2.2 == 2.2 + 2.2 : syntax error: invalid arithmetic
    operator (error token is ".2 == 2.2 + 2.2 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 3.0 == 4 + 7 : syntax error: invalid arithmetic
    operator (error token is ".0 == 4 + 7 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 4 == 3.0 + 7 : syntax error: invalid arithmetic
    operator (error token is ".0 + 7 ")

    /tmp/tmpi2wc99m4.sh: line 19: ((: 7 == 3.0 + 4 : syntax error: invalid arithmetic
    operator (error token is ".0 + 4 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Test if it can be a int\n    if ((\
    \ $1 == $(echo \"($1 + 0.5)/1\" | bc) )); then\n        if (( $2 == $(echo \"\
    ($2 + 0.5)/1\" | bc) )); then\n            if (( $3 == $(echo \"($3 + 0.5)/1\"\
    \ | bc) )); then\n                if (( $1 == $2 + $3 || $2 == $1 + $3 || $3 ==\
    \ $1 + $2 )); then\n                    echo \"true\"\n                else\n\
    \                    echo \"false\"\n                fi\n            else\n  \
    \              echo \"false\"\n            fi\n        else\n            echo\
    \ \"false\"\n        fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpohs2kc1v.sh: line 20: ((: 2.5 == 3 : syntax error: invalid arithmetic
    operator (error token is ".5 == 3 ")

    /tmp/tmpohs2kc1v.sh: line 20: ((: 1.5 == 2 : syntax error: invalid arithmetic
    operator (error token is ".5 == 2 ")

    /tmp/tmpohs2kc1v.sh: line 20: ((: 2.2 == 2 : syntax error: invalid arithmetic
    operator (error token is ".2 == 2 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n   test_if_integer \"$1\" \"$2\" \"$3\"\
    \n   sum_or_equal \"$1\" \"$2\" \"$3\"\n}\n\ncandidate() {\n    any_int \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8bb45p3j.sh: line 19: test_if_integer: command not found

    /tmp/tmp8bb45p3j.sh: line 20: sum_or_equal: command not found

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Is $1 an integer?\n  [[ \"$1\" =~ ^[0-9]+$\
    \ ]] || return 1\n  # Is $2 an integer?\n  [[ \"$2\" =~ ^[0-9]+$ ]] || return\
    \ 1\n  # Is $3 an integer?\n  [[ \"$3\" =~ ^[0-9]+$ ]] || return 1\n  # Is $1\
    \ equal to $2 + $3?\n  (( $1 == $2 + $3 )) && return 0\n  # Is $2 equal to $1\
    \ + $3?\n  (( $2 == $1 + $3 )) && return 0\n  # Is $3 equal to $1 + $2?\n  ((\
    \ $3 == $1 + $2 )) && return 0\n  # If we got this far, no numbers match.\n  return\
    \ 1\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"\
    2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\"\
    \ ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local result=false\n\n  sum=$((\"$1\"\
    \ + \"$2\"))\n  if [[ $1 -eq $sum ]] || [[ $2 -eq $sum ]]; then\n    result=true\n\
    \  fi\n\n  sum=$((\"$1\" + \"$3\"))\n  if [[ $1 -eq $sum ]] || [[ $3 -eq $sum\
    \ ]]; then\n    result=true\n  fi\n\n  sum=$((\"$2\" + \"$3\"))\n  if [[ $2 -eq\
    \ $sum ]] || [[ $3 -eq $sum ]]; then\n    result=true\n  fi\n\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if ! is_integer \"$1\" || ! is_integer\
    \ \"$2\" || ! is_integer \"$3\"; then\n        echo \"false\"\n        return\
    \ 0\n    fi\n    if [ \"$(( $1 + $2 ))\" -eq \"$3\" ] || [ \"$(( $1 + $3 ))\"\
    \ -eq \"$2\" ] || [ \"$(( $2 + $3 ))\" -eq \"$1\" ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpis17390z.sh: line 19: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\techo \"TODO\"\n}\n\ncandidate() {\n \
    \   any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Check $1\n  if [ $1 -eq $(echo \"$2\
    \ + $3\" | bc -l) ]; then\n    echo \"true\"\n    return\n  fi\n  # Check $2\n\
    \  if [ $2 -eq $(echo \"$1 + $3\" | bc -l) ]; then\n    echo \"true\"\n    return\n\
    \  fi\n  # Check $3\n  if [ $3 -eq $(echo \"$1 + $2\" | bc -l) ]; then\n    echo\
    \ \"true\"\n    return\n  fi\n  echo \"false\"\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpoexn6beh.sh: line 20: [: 2.5: integer expression expected

    /tmp/tmpoexn6beh.sh: line 25: [: 5.5: integer expression expected

    /tmp/tmpoexn6beh.sh: line 30: [: 4.5: integer expression expected

    /tmp/tmpoexn6beh.sh: line 20: [: 1.5: integer expression expected

    /tmp/tmpoexn6beh.sh: line 25: [: 5.0: integer expression expected

    /tmp/tmpoexn6beh.sh: line 30: [: 3.5: integer expression expected

    /tmp/tmpoexn6beh.sh: line 20: [: 2.2: integer expression expected

    /tmp/tmpoexn6beh.sh: line 25: [: 2.2: integer expression expected

    /tmp/tmpoexn6beh.sh: line 30: [: 2.2: integer expression expected

    /tmp/tmpoexn6beh.sh: line 20: [: 3.0: integer expression expected

    /tmp/tmpoexn6beh.sh: line 25: [: 10.0: integer expression expected

    /tmp/tmpoexn6beh.sh: line 30: [: 7.0: integer expression expected

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ \"$#\" -ne 3 ]; then\n    echo \"\
    false\"\n    return\n  fi\n  if [ $(echo \"$1\" | grep -E '^-?[0-9]+$') ] && [\
    \ $(echo \"$2\" | grep -E '^-?[0-9]+$') ] && [ $(echo \"$3\" | grep -E '^-?[0-9]+$')\
    \ ]; then\n    if [ \"$1\" -eq $(expr \"$2\" + \"$3\") ] || [ \"$2\" -eq $(expr\
    \ \"$1\" + \"$3\") ] || [ \"$3\" -eq $(expr \"$1\" + \"$2\") ]; then\n      echo\
    \ \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq\
    \ $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyfkrmb26.sh: line 19: [: 2.5: integer expression expected

    /tmp/tmpyfkrmb26.sh: line 19: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # (( ( ( $1 == $(($2 + $3)) ) || (\
    \ $2 == $(($1 + $3)) ) || ( $3 == $(($1 + $2)) ) ) && ( ( $(echo $1 | cut -d'.'\
    \ -f2) -eq 0 ) && ( $(echo $2 | cut -d'.' -f2) -eq 0 ) && ( $(echo $3 | cut -d'.'\
    \ -f2) -eq 0 ) ) )) && echo \"true\" || echo \"false\"\n    if (( $1 == $(($2\
    \ + $3)) )) || (( $2 == $(($1 + $3)) )) || (( $3 == $(($1 + $2)) )); then\n  \
    \      if (( $(echo $1 | cut -d'.' -f2) -eq 0 )) && (( $(echo $2 | cut -d'.' -f2)\
    \ -eq 0 )) && (( $(echo $3 | cut -d'.' -f2) -eq 0 )); then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    else\n     \
    \   echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnu6l08sd.sh: line 21: ((: 2 -eq 0 : syntax error in expression
    (error token is "0 ")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  local re='^[0-9]+$'\n  if [[ $1 =~ $re\
    \ && $2 =~ $re && $3 =~ $re ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Get the intiger values of the inputs\
    \ $1, $2, and $3.\n  n1=$1\n  n2=$2\n  n3=$3\n  # Check if the inputs are of type\
    \ integer.\n  # -eq returns true if the two strings are equal.\n  # -z returns\
    \ true if the string is empty.\n  # The \"!\" negates the check.\n  if ! [ -z\
    \ \"$(echo $n1 | grep -o '.')\" ] || ! [ -z \"$(echo $n2 | grep -o '.')\" ] ||\
    \ ! [ -z \"$(echo $n3 | grep -o '.')\" ]; then\n    # The input is not of type\
    \ integer.\n    echo \"false\"\n  else\n    # The input is of type integer.\n\
    \    # Check if one of the inputs is equal to the sum of the other two.\n    #\
    \ -eq returns true if the two strings are equal.\n    if [ $n1 -eq $(($n2 + $n3))\
    \ ] || [ $n2 -eq $(($n1 + $n3)) ] || [ $n3 -eq $(($n1 + $n2)) ]; then\n      #\
    \ One of the inputs is equal to the sum of the other two.\n      echo \"true\"\
    \n    else\n      # One of the inputs is not equal to the sum of the other two.\n\
    \      echo \"false\"\n    fi\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    local num1=$1\n    local num2=$2\n\
    \    local num3=$3\n    if [[ $num1 =~ ^[0-9]+\\.[0-9]+$ || $num2 =~ ^[0-9]+\\\
    .[0-9]+$ || $num3 =~ ^[0-9]+\\.[0-9]+$ ]]; then\n        echo \"false\"\n    else\n\
    \        if [[ $num1 -eq $((num2 + num3)) || $num2 -eq $((num1 + num3)) || $num3\
    \ -eq $((num1 + num2)) ]]; then\n            echo \"true\"\n        else\n   \
    \         echo \"false\"\n        fi\n    fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    re='^[0-9]+$'\n    if [[ $1 =~ $re\
    \ && $2 =~ $re && $3 =~ $re ]]; then\n        sum=$(($1 + $2))\n        if [ $3\
    \ == $sum ]; then\n            echo \"true\"\n        else\n            sum=$(($1\
    \ + $3))\n            if [ $2 == $sum ]; then\n                echo \"true\"\n\
    \            else\n                sum=$(($2 + $3))\n                if [ $1 ==\
    \ $sum ]; then\n                    echo \"true\"\n                else\n    \
    \                echo \"false\"\n                fi\n            fi\n        fi\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tlocal int_reg='^[0-9]+$'\n\tif [[ $1\
    \ =~ $int_reg && $2 =~ $int_reg && $3 =~ $int_reg ]]; then\n\t\tlocal -i sum=$1+$2+$3\n\
    \t\tif ((sum==2*$1 || sum==2*$2 || sum==2*$3)); then\n\t\t\techo \"true\"\n\t\t\
    else\n\t\t\techo \"false\"\n\t\tfi\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if !(is_float \"$1\" && is_float \"$2\"\
    \ && is_float \"$3\")\n  then\n    echo \"\\\"true\\\"\"\n  elif is_float \"$1\"\
    \ && is_float \"$2\" && is_float \"$3\"\n  then\n    if is_int \"$1\" && is_int\
    \ \"$2\" && is_int \"$3\"\n    then\n      echo \"\\\"true\\\"\"\n    else\n \
    \     echo \"\\\"false\\\"\"\n    fi\n  fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcw64c7ru.sh: line 19: is_float: command not found

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # TODO: Write your script here\n  return\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$\
    \ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n    # there are only integers\n    local num1=$1\n\
    \    local num2=$2\n    local num3=$3\n    if [ \"$num1\" -eq $((num2 + num3))\
    \ ] || [ \"$num2\" -eq $((num1 + num3)) ] || [ \"$num3\" -eq $((num1 + num2))\
    \ ]; then\n      echo true\n    else\n      echo false\n    fi\n  else\n    echo\
    \ false\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  expr $1 + $2 + $3 > /dev/null\n  if [\
    \ $? -ne 0 ]; then\n    echo false\n    return 1\n  fi\n  if [[ $1 -eq $(($2 +\
    \ $3)) ]]; then\n    echo true\n    return 0\n  elif [[ $2 -eq $(($1 + $3)) ]];\
    \ then\n    echo true\n    return 0\n  elif [[ $3 -eq $(($1 + $2)) ]]; then\n\
    \    echo true\n    return 0\n  else\n    echo false\n    return 1\n  fi\n}\n\n\
    candidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: 'expr: non-integer argument

    expr: non-integer argument

    expr: non-integer argument

    expr: non-integer argument

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Check if $1 is an integer.\n  if !\
    \ [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"false\"\n    return\n  fi\n  # Check\
    \ if $2 is an integer.\n  if ! [[ $2 =~ ^[0-9]+$ ]]; then\n    echo \"false\"\n\
    \    return\n  fi\n  # Check if $3 is an integer.\n  if ! [[ $3 =~ ^[0-9]+$ ]];\
    \ then\n    echo \"false\"\n    return\n  fi\n  # Check if $1 is equal to the\
    \ sum of $2 and $3.\n  if [ \"$1\" -eq $(( $2 + $3 )) ]; then\n    echo \"true\"\
    \n    return\n  fi\n  # Check if $2 is equal to the sum of $1 and $3.\n  if [\
    \ \"$2\" -eq $(( $1 + $3 )) ]; then\n    echo \"true\"\n    return\n  fi\n  #\
    \ Check if $3 is equal to the sum of $1 and $2.\n  if [ \"$3\" -eq $(( $1 + $2\
    \ )) ]; then\n    echo \"true\"\n    return\n  fi\n  # If none of the conditions\
    \ are true, echo \"false\".\n  echo \"false\"\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 == *.* ]] && [[ $2 == *.* ]]\
    \ && [[ $3 == *.* ]]; then\n    echo false\n  elif [[ $(expr $1 + $2) -eq $3 ]]\
    \ || [[ $(expr $1 + $3) -eq $2 ]] || [[ $(expr $2 + $3) -eq $1 ]]; then\n    echo\
    \ true\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n\
    \    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"\
    1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"\
    false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"\
    2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[\
    \ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"\
    4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: 'expr: non-integer argument

    expr: non-integer argument

    /tmp/tmprvq_g5lp.sh: line 21: [[: 2.5: syntax error: invalid arithmetic operator
    (error token is ".5")

    expr: non-integer argument

    /tmp/tmprvq_g5lp.sh: line 21: [[: 3.5: syntax error: invalid arithmetic operator
    (error token is ".5")

    expr: non-integer argument

    expr: non-integer argument

    /tmp/tmprvq_g5lp.sh: line 21: [[: 1.5: syntax error: invalid arithmetic operator
    (error token is ".5")

    expr: non-integer argument

    expr: non-integer argument

    /tmp/tmprvq_g5lp.sh: line 21: [[: 3.0: syntax error: invalid arithmetic operator
    (error token is ".0")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tif  [[ \"$1\" =~ ^-?[0-9]+$ ]] && [[\
    \ \"$2\" =~ ^-?[0-9]+$ ]] && [[ \"$3\" =~ ^-?[0-9]+$ ]] && (($1 == $2 + $3 ||\
    \ $2 == $1 + $3 || $3 == $1 + $2)); then\n\t\techo \"true\"\n\telse\n\t\techo\
    \ \"false\"\n\tfi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$\
    \ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n    if [[ $(bc <<< \"$1 + $2\") -eq $3 ]]\
    \ || [[ $(bc <<< \"$1 + $3\") -eq $2 ]] || [[ $(bc <<< \"$2 + $3\") -eq $1 ]];\
    \ then\n      echo true\n    else\n      echo false\n    fi\n  else\n    echo\
    \ false\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Given $1, $2, and $3, find the sum\
    \ of them\n  # If $1 is equal to the sum of $2 and $3, then return \"true\"\n\
    \  # If $2 is equal to the sum of $1 and $3, then return \"true\"\n  # If $3 is\
    \ equal to the sum of $1 and $2, then return \"true\"\n  # If the sum of $1, $2,\
    \ and $3 is not an integer, then return \"false\"\n  # If the numbers are not\
    \ all integers, then return \"false\"\n  # If $1 is not a number, then return\
    \ \"false\"\n  # If $2 is not a number, then return \"false\"\n  # If $3 is not\
    \ a number, then return \"false\"\n  # If none of the above are met, then return\
    \ \"false\"\n  #\n  # Hint: use bc to do float math\n  # Hint: use awk\n  # Hint:\
    \ use bash comparisons\n  # TODO: write any_int\n  echo \"false\"\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n\tif [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~\
    \ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n\t\tif [[ $1 -eq $(($2 + $3))\
    \ ]] || [[ $2 -eq $(($1 + $3)) ]] || [[ $3 -eq $(($1 + $2)) ]]; then\n\t\t\techo\
    \ \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\telse\n\t\techo \"false\"\
    \n\tfi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if (( $1 != (int)$1 )) || (( $2 !=\
    \ (int)$2 )) || (( $3 != (int)$3 )); then\n        echo \"false\"\n    elif ((\
    \ $1 + $2 == $3 || $1 + $3 == $2 || $2 + $3 == $1 )); then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpmeloxyzs.sh: line 19: ((: 2 != (int)2 : syntax error in expression
    (error token is "2 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 3 != (int)3 : syntax error in expression (error
    token is "3 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 1 != (int)1 : syntax error in expression (error
    token is "1 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 2.5 != (int)2.5 : syntax error: invalid arithmetic
    operator (error token is ".5 != (int)2.5 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 2 != (int)2 : syntax error in expression (error
    token is "2 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 3 != (int)3 : syntax error in expression (error
    token is "3 ")

    /tmp/tmpmeloxyzs.sh: line 21: ((: 2.5 + 2 == 3 || 2.5 + 3 == 2 || 2 + 3 == 2.5
    : syntax error: invalid arithmetic operator (error token is ".5 + 2 == 3 || 2.5
    + 3 == 2 || 2 + 3 == 2.5 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 1.5 != (int)1.5 : syntax error: invalid arithmetic
    operator (error token is ".5 != (int)1.5 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 5 != (int)5 : syntax error in expression (error
    token is "5 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 3.5 != (int)3.5 : syntax error: invalid arithmetic
    operator (error token is ".5 != (int)3.5 ")

    /tmp/tmpmeloxyzs.sh: line 21: ((: 1.5 + 5 == 3.5 || 1.5 + 3.5 == 5 || 5 + 3.5
    == 1.5 : syntax error: invalid arithmetic operator (error token is ".5 + 5 ==
    3.5 || 1.5 + 3.5 == 5 || 5 + 3.5 == 1.5 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 2 != (int)2 : syntax error in expression (error
    token is "2 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 6 != (int)6 : syntax error in expression (error
    token is "6 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 2 != (int)2 : syntax error in expression (error
    token is "2 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 4 != (int)4 : syntax error in expression (error
    token is "4 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 2 != (int)2 : syntax error in expression (error
    token is "2 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 2 != (int)2 : syntax error in expression (error
    token is "2 ")

    /tmp/tmpmeloxyzs.sh: line 19: ((: 2.2 != (int)2.2 : syntax error: invalid arithmetic
    operator (error token is "'
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ \"$1\" -eq \"$2\" ]] && [[ \"\
    $1\" -eq \"$3\" ]]; then\n        echo \"true\"\n    elif [[ \"$1\" -eq \"$2\"\
    \ ]] || [[ \"$1\" -eq \"$3\" ]] || [[ \"$2\" -eq \"$3\" ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n   \
    \ any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"\
    1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n \
    \   [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"\
    2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if ! [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n\
    \        echo \"false\"\n        return\n    fi\n    if ! [[ \"$2\" =~ ^-?[0-9]+$\
    \ ]]; then\n        echo \"false\"\n        return\n    fi\n    if ! [[ \"$3\"\
    \ =~ ^-?[0-9]+$ ]]; then\n        echo \"false\"\n        return\n    fi\n   \
    \ if [[ \"$1\" -eq $(( $2 + $3 )) ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n    if [[ \"$2\" -eq $(( $1 + $3 )) ]]; then\n        echo \"true\"\n\
    \        return\n    fi\n    if [[ \"$3\" -eq $(( $1 + $2 )) ]]; then\n      \
    \  echo \"true\"\n        return\n    fi\n    echo \"false\"\n}\n\ncandidate()\
    \ {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"\
    3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\"\
    \ ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 0
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  x=$1\n  y=$2\n  z=$3\n  [[ \"$x\" ==\
    \ *\".\"* ]] && echo false && return\n  [[ \"$y\" == *\".\"* ]] && echo false\
    \ && return\n  [[ \"$z\" == *\".\"* ]] && echo false && return\n  if [[ $(($x\
    \ + $y)) -eq $z ]]; then\n    echo true\n  elif [[ $(($x + $z)) -eq $y ]]; then\n\
    \    echo true\n  elif [[ $(($y + $z)) -eq $x ]]; then\n    echo true\n  else\n\
    \    echo false\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  [ $(is_int $1) == \"true\" ] && [ $(is_int\
    \ $2) == \"true\" ] && [ $(is_int $3) == \"true\" ] || return 1\n  local sum=$(echo\
    \ \"$2 + $3\" | bc)\n  [ $1 == $sum ] || return 1\n  local sum=$(echo \"$1 + $3\"\
    \ | bc)\n  [ $2 == $sum ] || return 1\n  local sum=$(echo \"$1 + $2\" | bc)\n\
    \  [ $3 == $sum ] || return 1\n  echo \"true\"\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqh75ku2o.sh: line 19: is_int: command not found

    /tmp/tmpqh75ku2o.sh: line 19: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~\
    \ ^[0-9]+$ ]] && [[ $3 =~ ^[0-9]+$ ]]; then\n        if [[ $(echo \"$1 + $2\"\
    \ | bc) -eq $3 ]] || [[ $(echo \"$1 + $3\" | bc) -eq $2 ]] || [[ $(echo \"$2 +\
    \ $3\" | bc) -eq $1 ]]; then\n            echo \"true\"\n        else\n      \
    \      echo \"false\"\n        fi\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") =\
    \ \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n   \
    \ [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"\
    2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
    \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"\
    true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [[ \"$1\" =~ ^[+-]?[0-9]+\\.?[0-9]*$\
    \ ]] && [[ \"$2\" =~ ^[+-]?[0-9]+\\.?[0-9]*$ ]] && [[ \"$3\" =~ ^[+-]?[0-9]+\\\
    .?[0-9]*$ ]]; then\n        if [[ $(bc <<< \"$1 == $2 + $3\") == 1 ]] || [[ $(bc\
    \ <<< \"$2 == $1 + $3\") == 1 ]] || [[ $(bc <<< \"$3 == $1 + $2\") == 1 ]]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    any_int\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"\
    true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate\
    \ \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\"\
    \ \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq\
    \ $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\"\
    ) = \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[\
    \ $(candidate \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"\
    2.2\" \"2.2\") = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3\" \"4\" \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") =\
    \ \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyfkrmb26.sh: line 19: [: 2.5: integer expression expected

    /tmp/tmpyfkrmb26.sh: line 19: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  echo $(echo $1 | grep -c '[^0-9]') $(echo\
    \ $2 | grep -c '[^0-9]') $(echo $3 | grep -c '[^0-9]') | grep -c \"^[012] 0 0$\"\
    \ | grep -c 1\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"\
    2.5\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") =\
    \ \"false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # Check if $1 and $2 are integers\n\
    \    if [[ $(echo \"$1 == $2\" | bc -l) == 1 ]]; then\n        # If $1 and $2\
    \ are integers, check if $3 is equal to their sum\n        if [[ $(echo \"$1 +\
    \ $2 == $3\" | bc -l) == 1 ]]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    # Check if $1 and $3 are integers\n\
    \    elif [[ $(echo \"$1 == $3\" | bc -l) == 1 ]]; then\n        # If $1 and $3\
    \ are integers, check if $2 is equal to their sum\n        if [[ $(echo \"$1 +\
    \ $3 == $2\" | bc -l) == 1 ]]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    # Check if $2 and $3 are integers\n\
    \    elif [[ $(echo \"$2 == $3\" | bc -l) == 1 ]]; then\n        # If $2 and $3\
    \ are integers, check if $1 is equal to their sum\n        if [[ $(echo \"$2 +\
    \ $3 == $1\" | bc -l) == 1 ]]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    # If the numbers are both integers\n\
    \    if is_integer \"$1\" && is_integer \"$2\" && is_integer \"$3\"; then\n  \
    \      if [ \"$1\" -eq $(( $2 + $3 )) ] || [ \"$2\" -eq $(( $1 + $3 )) ] || [\
    \ \"$3\" -eq $(( $1 + $2 )) ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        echo \"false\"\n  \
    \  fi\n}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\"\
    \ \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"\
    false\" ]]\n    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"4\" \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[\
    \ $(candidate \"2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\"\
    \ \"7\") = \"true\" ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7napqbgp.sh: line 20: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n    if [ $# -ne 3 ]; then\n        printf\
    \ \"Usage: any_int [numeric] [numeric] [numeric]\\n\"\n        return\n    fi\n\
    \    if [[ $1 =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]] && [[ $2 =~ ^[-+]?[0-9]+\\.?[0-9]*$\
    \ ]] && [[ $3 =~ ^[-+]?[0-9]+\\.?[0-9]*$ ]]; then\n        if [ $1 -eq $(($2 +\
    \ $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n       \
    \     printf \"true\\n\"\n        else\n            printf \"false\\n\"\n    \
    \    fi\n    else\n        printf \"false\\n\"\n    fi\n}\n\ncandidate() {\n \
    \   any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwoxapvl2.sh: line 24: [: 2.5: integer expression expected

    /tmp/tmpwoxapvl2.sh: line 24: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # Checks if all values are integers.\n\
    \  is_int=$(is_integer \"$1\" && is_integer \"$2\" && is_integer \"$3\")\n  if\
    \ [ \"$is_int\" = false ]; then\n    echo false\n    return\n  fi\n\n  # Checks\
    \ if any number is equal to the sum of the other two.\n  if [ \"$1\" -eq \"$(($2\
    \ + $3))\" ] || [ \"$2\" -eq \"$(($1 + $3))\" ] || [ \"$3\" -eq \"$(($1 + $2))\"\
    \ ]; then\n    echo true\n  else\n    echo false\n  fi\n}\n\ncandidate() {\n \
    \   any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppydge3ih.sh: line 20: is_integer: command not found

    /tmp/tmppydge3ih.sh: line 20: is_integer: command not found

    /tmp/tmppydge3ih.sh: line 27: [: 2.5: integer expression expected

    /tmp/tmppydge3ih.sh: line 27: 2.5 + 3: syntax error: invalid arithmetic operator
    (error token is ".5 + 3")

    '
  stdout: ''
  timestamp: 1660020990
- exit_code: 1
  program: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true\
    \ if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int\
    \ \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\
    \n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"\
    -2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n\
    # $3 is a floating point\nany_int() {\n  # $is_int is a function that returns\
    \ true if the given input is an integer.\n  # Otherwise, returns false.\n  is_int()\
    \ {\n    local re='^[0-9]+$'\n    if ! [[ $1 =~ $re ]] ; then\n      return 1\n\
    \    fi\n    return 0\n  }\n\n  # $is_float is a function that returns true if\
    \ the given input is a floating point.\n  # Otherwise, returns false.\n  is_float()\
    \ {\n    local re='^[0-9]+([.][0-9]+)?$'\n    if ! [[ $1 =~ $re ]] ; then\n  \
    \    return 1\n    fi\n    return 0\n  }\n\n  # $1 has any floating point.\n \
    \ if is_float $1 || is_float $2 || is_float $3; then\n    echo \"false\"\n   \
    \ return\n  fi\n\n  if is_int $1 && is_int $2 && is_int $3; then\n    if [ $1\
    \ -eq $2 + $3 ] || [ $2 -eq $1 + $3 ] || [ $3 -eq $1 + $2 ]; then\n      echo\
    \ \"true\"\n      return\n    fi\n  fi\n  echo \"false\"\n}\n\ncandidate() {\n\
    \    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\" \"3\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\" \"3\") = \"false\" ]]\n\
    \    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n    [[ $(candidate\
    \ \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\" \"2\") = \"\
    true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\" ]]\n    [[\
    \ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2\" \"1\"\
    \ \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\" ]]\n\
    \    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020990
