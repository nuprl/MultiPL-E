name: HumanEval_133_sum_squares
language: sh
prompt: "#!/bin/bash\n# You are given a list of numbers.\n# You need to return the\
  \ sum of squared numbers in the given list,\n# round each element in the list to\
  \ the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"\
  14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n\
  # \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n\
  # \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n"
tests: "}\n\ncandidate() {\n    sum_squares \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"1.0 2.0 3.0\") = \"14\" ]]\n    [[ $(candidate \"1.0 2.0 3.0\"\
  ) = \"14\" ]]\n    [[ $(candidate \"1.0 3.0 5.0 7.0\") = \"84\" ]]\n    [[ $(candidate\
  \ \"1.4 4.2 0.0\") = \"29\" ]]\n    [[ $(candidate \"-2.4 1.0 1.0\") = \"6\" ]]\n\
  \    [[ $(candidate \"100.0 1.0 15.0 2.0\") = \"10230\" ]]\n    [[ $(candidate \"\
  10000.0 10000.0\") = \"200000000\" ]]\n    [[ $(candidate \"-1.4 4.6 6.3\") = \"\
  75\" ]]\n    [[ $(candidate \"-1.4 17.9 18.9 19.9\") = \"1086\" ]]\n    [[ $(candidate\
  \ \"0.0\") = \"0\" ]]\n    [[ $(candidate \"-1.0\") = \"1\" ]]\n    [[ $(candidate\
  \ \"-1.0 1.0 0.0\") = \"2\" ]]\n}\n\nrun_test"
completions: ["    local sum=0\n    for i in $1; do\n        sum=$(($sum + $((ceil\
    \ $i)) ** 2))\n    done\n    echo $sum", "    list=\"$1\"\n    sum=0\n    for\
    \ num in $list; do\n        num=${num/./}\n        num=$((num + 1))\n        num=$((num\
    \ ** 2))\n        sum=$((sum + num))\n    done\n    echo $sum", "    echo $@ |\
    \ tr ' ' '\\n' | awk '{print int($1*$1)}' | paste -sd+ - | bc", "    awk '{s=0;for(i=1;i<=NF;i++)s+=($i<0?-int(-$i+0.5):int($i+0.5))^2;print\
    \ s}'", "  awk '{\n    sum = 0\n    for (i = 1; i <= NF; i++) {\n      sum +=\
    \ ($i >= 0 ? ceil($i) : floor($i))^2\n    }\n    print sum\n  }'", "   local numbers=$1\n\
    \   local sum=0\n   for number in ${numbers}; do\n      sum=$((${sum} + $(( ${number%.*}\
    \ * ${number%.*})) ))\n   done\n   echo \"${sum}\"", "    echo \"$1\" | tr ' '\
    \ '\\n' |\n    while read num; do\n        echo \"scale=2; ($num+0.5)/1\" | bc\n\
    \    done |\n    while read num; do\n        echo \"$num*$num\" | bc\n    done\
    \ |\n    tr '\\n' '+' |\n    sed 's/.$//' | bc", "    local sum=0\n    for i in\
    \ $1; do\n        local square=$(printf %.f $(echo \"scale=2; $i*$i\" | bc))\n\
    \        sum=$(($sum+$square))\n    done\n    echo $sum", "    local sum=0\n \
    \   for i in $1; do\n        sum=$(echo \"$sum + $(echo \"scale=2; $i^2\" | bc\
    \ | xargs printf \"%1.0f\")\" | bc)\n    done\n    echo $sum", "    local -a arr=$1\n\
    \    local sum=0\n    for i in $arr; do\n        sum=$(echo \"$sum + ($i^2)\"\
    \ | bc -l)\n    done\n    echo $sum | awk '{print int($1+0.5)}'", "  sum=0\n \
    \ while read num; do\n    sum=$(expr $sum + $(expr $(printf %.0f $num) \\* $(printf\
    \ %.0f $num)))\n  done < <(echo $1)\n  echo $sum", "    local sum_squares_result\n\
    \    local IFS=\" \"\n    sum_squares_result=0\n    for i in $1; do\n        sum_squares_result=$(($sum_squares_result\
    \ + $(echo \"scale=0; ${i}^2/1\" | bc -l)))\n    done\n    echo \"$sum_squares_result\"",
  "    local s=0\n    local v\n    local a b\n    for v in $1; do\n        IFS='.'\
    \ read a b <<< \"$v\"\n        if [[ $b -gt 0 ]]; then\n            ((a++))\n\
    \        fi\n        ((s += a * a))\n    done\n    echo $s", "  local list=\"\
    $1\"\n  local total=0\n  for element in $list; do\n    total=$(( total + ($(echo\
    \ \"ceil($element)\" | bc -l ))**2 ))\n  done\n  echo $total", '    # your code
    here', "  # your code here\n  list=$1\n  sum=0\n  for i in $list; do\n    temp=$(echo\
    \ $i | sed 's/-//g')\n    var=$(echo $temp | bc)\n    result=$(echo $i | bc)\n\
    \    if [ $result -lt 0 ]; then\n      var=$(($var - 1))\n    fi\n    sum=$(($sum\
    \ + $(($var * $var))))\n  done\n  echo $sum", "    # Fill in the code here.\n\
    \    sum=0\n    for x in $1; do\n        x=${x#-}\n        n=${x%.*}\n       \
    \ d=${x#*.}\n        if [ \"$n\" = \"\" ]; then\n            n=0\n        fi\n\
    \        if [ \"$d\" = \"\" ]; then\n            d=0\n        fi\n        if [\
    \ \"${x:0:1}\" = \"-\" ]; then\n            sign=-1\n        else\n          \
    \  sign=1\n        fi\n        if [ $d -gt 0 ]; then\n            n=$((n+1))\n\
    \        fi\n        sum=$((sum + (n*n*sign)))\n    done\n    echo $sum", "  \
    \  local sum=0\n    local IFS=\" \"\n    for i in $1; do\n        ((sum+=(${i%.*}+1)**2))\n\
    \    done\n    echo $sum", "    lst=$1\n    awk '{\n                for (i=1;\
    \ i<=NF; i++) {\n                    a[i] = int(a[i] + $i * $i)\n            \
    \    }\n            }\n            END {\n                for (i=1; i<=NF; i++)\
    \ {\n                    printf \"%s \", a[i]\n                }\n           \
    \ }' <(echo \"$lst\")", "    #cut_comma()\n    #{\n    #    echo $@ | sed 's/,/\
    \ /g'\n    #}\n    #\n    #pow2()\n    #{\n    #    echo \"scale=2; $1 * $1\"\
    \ | bc -l\n    #}\n    #\n    #pow_squares()\n    #{\n    #    local x=$(pow2\
    \ $1)\n    #    x=${x%.*}\n    #    echo $x\n    #}\n    #\n    #\n    #result=0\n\
    \    #for i in $(cut_comma $1); do\n    #    result=$(($result + $(pow_squares\
    \ $i)))\n    #done\n    #echo $result\n    #\n    #\n    #\n    #\n    #\n   \
    \ #\n\n    printf \"%s\" \"$1\" | awk '{\n        for (i = 1; i <= NF; i++) {\n\
    \            sum += int(ceil($i) ^ 2)\n        }\n        print sum\n    }'"]
stop_tokens:
- "\n}"
