name: HumanEval_118_get_closest_vowel
language: sh
prompt: "#!/bin/bash\n# You are given a word. Your task is to find the closest vowel\
  \ that stands between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\"\
  )\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel\
  \ \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\n\
  get_closest_vowel() {\n"
tests: "}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
  u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\
  \" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\"\
  \ ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\"\
  \ ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\"\
  \ ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\
  \" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
completions: ["    # write your code here\n    A=\"$1\"\n    c=${#A}\n    while [\
    \ $c -gt 0 ]\n    do\n        temp=${A:$c-1:1}\n        if [ $temp = \"a\" ] ||\
    \ [ $temp = \"e\" ] || [ $temp = \"i\" ] || [ $temp = \"o\" ] || [ $temp = \"\
    u\" ] || [ $temp = \"A\" ] || [ $temp = \"E\" ] || [ $temp = \"I\" ] || [ $temp\
    \ = \"O\" ] || [ $temp = \"U\" ]\n        then\n            echo $temp\n     \
    \       return\n        fi\n        c=$((c-1))\n    done\n    echo \"\"", "  \
    \  if [[ $1 =~ ^[a-zA-Z]+$ ]]; then\n        echo $1 | sed -rn 's/.*([AEIOUaeiou]).*/\\\
    1/p'\n    else\n        echo \"Error: word should contain English letter only.\"\
    \n    fi", "\tlocal strlen=${#1}\n\tlocal count=0\n\tlocal character=''\n\tlocal\
    \ prev=''\n\tlocal next=''\n\tlocal index=0\n\tlocal start=0\n\tlocal end=0\n\t\
    local value=''\n\tlocal closest=0\n\twhile [ $count -lt $strlen ]; do\n\t\tcharacter=${1:$count:1}\n\
    \t\tif [[ $character =~ [AEIOU] ]]; then\n\t\t\tif [ $count -gt 0 ]; then\n\t\t\
    \t\tstart=$count\n\t\t\t\tbreak\n\t\t\tfi\n\t\tfi\n\t\tlet count++\n\tdone\n\t\
    while [ $count -gt 0 ]; do\n\t\tcharacter=${1:$count:1}\n\t\tif [[ $character\
    \ =~ [AEIOU] ]]; then\n\t\t\tif [ $count -gt 0 ]; then\n\t\t\t\tif [ $count -lt\
    \ $strlen ]; then\n\t\t\t\t\tindex=$count\n\t\t\t\t\tend=$count\n\t\t\t\t\tbreak\n\
    \t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\t\tlet count--\n\tdone\n\tlet closest=$index-$start\n\
    \tlet count++\n\twhile [ $count -lt $strlen ]; do\n\t\tcharacter=${1:$count:1}\n\
    \t\tif [[ $character =~ [AEIOU] ]]; then\n\t\t\tif [ $count -gt 0 ]; then\n\t\t\
    \t\tif [ $count -lt $strlen ]; then\n\t\t\t\t\tif [ $(( $count-$start )) -lt $closest\
    \ ]; then\n\t\t\t\t\t\tclosest=$(( $count-$start ))\n\t\t\t\t\t\tend=$count\n\t\
    \t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\t\tlet count++\n\tdone\n\t#echo \"\
    Closest=$closest\"\n\tif [ $closest -eq 0 ]; then\n\t\techo \"\"\n\telse\n\t\t\
    value=${1:$end:1}\n\t\techo \"$value\"\n\tfi", "    local str=\"$1\"\n    local\
    \ vowel=\"\"\n    local counter=0\n    for (( i=$((${#str}-1)); i>=0; i-- ))\n\
    \    do\n        if [[ \"${str:$i:1}\" =~ [aeiou] ]]; then\n            vowel=\"\
    ${str:$i:1}\"\n            counter=$(($i+1))\n            break\n        fi\n\
    \    done\n    if [[ $counter == 0 ]]; then\n        return\n    fi\n    local\
    \ consonant_counter=0\n    local vowel_counter=0\n    for (( i=$((${#str}-1));\
    \ i>=0; i-- ))\n    do\n        if [[ \"${str:$i:1}\" =~ [aeiou] ]]; then\n  \
    \          vowel_counter=$(($vowel_counter+1))\n        else\n            consonant_counter=$(($consonant_counter+1))\n\
    \        fi\n        if [[ $vowel_counter -eq 2 && $consonant_counter -eq 1 ]];\
    \ then\n            echo \"$vowel\"\n            return\n        fi\n    done",
  "  local string=$1\n  local len=${#string}\n  local ans=''\n  for ((i=$len-1; i>=0;\
    \ i--)); do\n    local char=${string:$i:1}\n    if [[ $char =~ [aeiouAEIOU] ]];\
    \ then\n      ans=$char\n      continue\n    elif [[ $ans =~ [aeiouAEIOU] ]];\
    \ then\n      echo $ans\n      break\n    fi\n  done", "  if [[ $1 =~ ^[^aeiou]+([aeiou]).*[^aeiou]+$\
    \ ]]; then\n    echo \"${BASH_REMATCH[1]}\"\n  else\n    echo \"\"\n  fi", " \
    \   local word=$1\n    local result=\"\"\n    local old_IFS=$IFS\n    IFS=\"\"\
    \n    for ((i=${#word}-1; i>=0; i--)); do\n        local c=${word:$i:1}\n    \
    \    if [[ \"$c\" =~ ^[AEIOUaeiou]$ ]]; then\n            result=\"$c\"\n    \
    \        break\n        fi\n    done\n    IFS=$old_IFS\n    echo \"$result\"",
  "  echo $1 | awk '{\n    vowels=\"aeiouAEIOU\"\n    len=length($0)\n    found=\"\
    \"\n    for (i=len; i>0; i--) {\n      if (index(vowels, substr($0, i, 1)) > 0)\
    \ {\n        found=substr($0, i, 1)\n        break\n      }\n    }\n    if (found\
    \ == \"\") {\n      printf(\"\")\n    } else {\n      if (i == 1) {\n        printf(\"\
    \")\n      } else {\n        printf(\"%s\", found)\n      }\n    }\n  }'", " \
    \   local i\n    local len=$((${#1}-1))\n    for ((i=$len; i>=0; i--)); do\n \
    \       local char=${1:$i:1}\n        if [[ $char =~ [aeiou] ]]; then\n      \
    \      local prev_char=${1:$(($i-1)):1}\n            local next_char=${1:$(($i+1)):1}\n\
    \            if [[ $prev_char =~ [^aeiou] ]] && [[ $next_char =~ [^aeiou] ]];\
    \ then\n                echo $char\n                return\n            fi\n \
    \       fi\n    done\n    echo \"\"", "    if [[ $1 =~ [^AEIOUaeiou]*([AEIOUaeiou])[^AEIOUaeiou]*$\
    \ ]]; then\n        echo \"${BASH_REMATCH[1]}\"\n    else\n        echo \"\"\n\
    \    fi", "\t\tlocal word=\"$1\"\n\t\tlocal current_char\n\t\tlocal last_was_consonant=false\n\
    \t\tlocal last_was_vowel=false\n\t\tlocal index\n\t\tfor ((index = ${#word} -\
    \ 1; index >= 0; index--)); do\n\t\t\tcurrent_char=\"${word:$index:1}\"\n\t\t\t\
    if ! $last_was_vowel && [[ \"$current_char\" =~ ^[aeiouAEIOU]$ ]]; then\n\t\t\t\
    \techo \"$current_char\"\n\t\t\t\treturn\n\t\t\telif ! $last_was_consonant &&\
    \ [[ \"$current_char\" =~ ^[aeiouAEIOU]$ ]]; then\n\t\t\t\tlast_was_vowel=true\n\
    \t\t\telse\n\t\t\t\tlast_was_consonant=true\n\t\t\tfi\n\t\tdone\n\t\techo \"\"",
  '    # write your code here', "    local str=$1;\n    local char;\n    local front=0;\n\
    \    local back=0;\n    local list=('a' 'e' 'i' 'o' 'u');\n    local list_len=${#list[@]};\n\
    \    local index;\n    local i;\n    local rear=$((${#str}-1));\n    local vowel='';\n\
    \    local temp;\n    local result;\n    for ((index=0; index<list_len; index++));\
    \ do\n        for ((i=rear; i>=0; i--)); do\n            char=${str:$i:1};\n \
    \           if [[ ${list[$index]} == \"$char\" ]]; then\n                vowel=$char;\n\
    \                front=$(($i-1));\n                back=$(($i+1));\n         \
    \       break;\n            fi\n        done\n        if [[ ! -z $vowel ]]; then\n\
    \            break;\n        fi\n    done\n    if [[ $vowel == '' ]]; then\n \
    \       echo \"\";\n        return;\n    fi\n    if [[ $front -lt 0 ]]; then\n\
    \        front=$((${#str}-1));\n    fi\n    if [[ $back -ge ${#str} ]]; then\n\
    \        back=0;\n    fi\n    char=${str:$front:1};\n    if [[ $char =~ ^[a-zA-Z]\
    \ ]]; then\n        temp=`curl -s https://en.wikipedia.org/wiki/Wikipedia:IPA_for_English\
    \ | tr -d [:space:] | grep \"$char\"`;\n        if [[ $temp =~ .*consonant.* ]];\
    \ then\n            result=$vowel;\n        fi\n    fi\n    char=${str:$back:1};\n\
    \    if [[ $char =~ ^[a-zA-Z] ]]; then\n        temp=`curl -s https://en.wikipedia.org/wiki/Wikipedia:IPA_for_English\
    \ | tr -d [:space:] | grep \"$char\"`;\n        if [[ $temp =~ .*consonant.* ]];\
    \ then\n            result=$vowel;\n        fi\n    fi", "    if [[ -z \"$1\"\
    \ ]]; then\n        echo \"\"\n        return\n    fi\n    for (( i=${#1}-1; i>=0;\
    \ i-- )); do\n        if [[ \"${1:$i:1}\" =~ ^[aeiouAEIOU]$ ]]; then\n       \
    \     # Found a vowel, now check the previous letter\n            if [[ \"$i\"\
    \ -eq 0 ]]; then\n                echo \"\"\n                return\n        \
    \    elif [[ \"${1:$((i-1)):1}\" =~ ^[aeiouAEIOU]$ ]]; then\n                #\
    \ The previous letter is also a vowel, which means this letter is not valid\n\
    \                continue\n            else\n                echo \"${1:$i:1}\"\
    \n                return\n            fi\n        fi\n    done\n    echo \"\"",
  "  local string=\"$1\"\n  local count=$((${#string}-1))\n  local result=''\n  for\
    \ (( i=count; i>0; i-- )); do\n    local char=$(echo \"${string:$i:1}\")\n   \
    \ local char_left=$(echo \"${string:$i-1:1}\")\n    if [[ $char == [aeiou] &&\
    \ $char_left == [^aeiou] ]]; then\n      result=$char\n      break\n    fi\n \
    \ done\n  echo $result", "    for ((i=$((${#1}-1)); i >= 0; i--)); do\n      \
    \  c=${1:$i:1}\n        if [[ \"$c\" =~ [aeiou] ]]; then\n            echo \"\
    $c\"\n            break\n        fi\n    done", "  if [[ $1 =~ ^[aeiouAEIOU].*[^aeiouAEIOU][aeiouAEIOU]$\
    \ ]]; then\n    echo $1 | sed -E 's/^[^aeiouAEIOU]*([aeiouAEIOU]).*[^aeiouAEIOU]([aeiouAEIOU])$/\\\
    2/g'\n  else\n    echo \"\"\n  fi", "  word=$1\n  len=${#word}\n  # your code\
    \ here\n  cnt=$((len-1))\n  while [ $cnt -ge 0 ]; do\n  \tchr=${word:$cnt:1}\n\
    \  \tif [[ $chr =~ [aeiou] ]]; then\n  \t\techo $chr\n  \t\treturn\n  \tfi\n \
    \ \tcnt=$((cnt-1))\n  done\n  echo \"\"", "  declare -a vowels=('a' 'e' 'i' 'o'\
    \ 'u' 'A' 'E' 'I' 'O' 'U')\n  local word=$1\n  local word_length=${#word}\n  local\
    \ out=\"\"\n  local i=0\n  local j=0\n  local vowel_index=0\n  local start_index=0\n\
    \  local end_index=0\n  local start_char=\"\"\n  local end_char=\"\"\n  local\
    \ vowel_char=\"\"\n  while [ $i -lt $word_length ]\n  do\n    start_index=$((word_length\
    \ - 1 - i))\n    end_index=$((word_length - i))\n    start_char=${word:$start_index:1}\n\
    \    end_char=${word:$end_index:1}\n    for vowel in ${vowels[@]}\n    do\n  \
    \    if [ \"$start_char\" = \"$vowel\" ]\n      then\n        out=\"$start_char\"\
    \n        return 0\n      fi\n      if [ \"$end_char\" = \"$vowel\" ]\n      then\n\
    \        out=\"$end_char\"\n        return 0\n      fi\n    done\n    i=$((i +\
    \ 1))\n  done\n  echo $out", "  local vowels=\"aeiouAEIOU\"\n  for ((i=${#1}-1;\
    \ i>0; i--)); do\n    if [[ $vowels =~ ${1:i:1} ]]; then\n      for ((j=i-1; j>=0;\
    \ j--)); do\n        if [[ $vowels =~ ${1:j:1} ]]; then\n          i=$j\n    \
    \    else\n          echo \"${1:i:1}\"\n          return\n        fi\n      done\n\
    \    fi\n  done\n  echo \"\"", "  word=$1\n  # Convert to lower case\n  word=$(echo\
    \ \"${word}\" | tr '[:upper:]' '[:lower:]')\n  # Empty string to store the result\n\
    \  result=\"\"\n  # Set default distance\n  distance=${#word}\n  # Loop through\
    \ the word\n  for ((i=0; i<${#word}; i++)); do\n    # Get the current character\n\
    \    current=${word:$i:1}\n    # Check if it is a vowel\n    if [[ \"$current\"\
    \ =~ [aeiou] ]]; then\n      # Check if the previous character is a consonant\n\
    \      prev=${word:$((i-1)):1}\n      if [[ \"$prev\" =~ [bcdfghjklmnpqrstvwxyz]\
    \ ]]; then\n        # Check if the next character is a consonant\n        next=${word:$((i+1)):1}\n\
    \        if [[ \"$next\" =~ [bcdfghjklmnpqrstvwxyz] ]]; then\n          # Check\
    \ if the distance is less than current distance\n          if [[ $((i+1)) -lt\
    \ $distance ]]; then\n            # Save the character to result\n           \
    \ result=$current\n            # Update the distance\n            distance=$((i+1))\n\
    \          fi\n        fi\n      fi\n    fi\n  done\n  # Return the result\n \
    \ echo $result", "  # Write your code here\n  exit 0", "    str=\"$1\"\n    n=$(echo\
    \ -n $str | wc -c)\n    idx=$(($n-1))\n    vowels=('a' 'e' 'i' 'o' 'u' 'A' 'E'\
    \ 'I' 'O' 'U')\n    is_vowel() {\n        ch=$1\n        found=0\n        for\
    \ vowel in ${vowels[@]}; do\n            if [ \"$ch\" == \"$vowel\" ]; then\n\
    \                found=1\n                break\n            fi\n        done\n\
    \        echo $found\n    }\n    found_vowel=0\n    for i in $(seq 1 $n); do\n\
    \        ch=$(echo -n $str | cut -c $idx)\n        if [ $(is_vowel $ch) -eq 1\
    \ ]; then\n            found_vowel=1\n            break\n        fi\n        idx=$(($idx-1))\n\
    \    done\n    if [ $found_vowel -eq 1 ]; then\n        idx=$(($idx-1))\n    \
    \    for i in $(seq 1 $n); do\n            ch=$(echo -n $str | cut -c $idx)\n\
    \            if [ $(is_vowel $ch) -eq 1 ]; then\n                break\n     \
    \       fi\n            idx=$(($idx-1))\n        done\n        if [ $idx -lt 0\
    \ ]; then\n            echo \"\"\n        else\n            echo $ch\n       \
    \ fi\n    else\n        echo \"\"\n    fi", "    # your code here\n    arr=($(echo\
    \ $1 | grep -o '[aeiouAEIOU]'))\n    if [ ${#arr[@]} -eq 0 ]; then echo \"\";\
    \ exit; fi\n    idx=($(echo $1 | grep -b -o '[aeiouAEIOU]' | awk -F ':' '{print\
    \ $1}'))\n    #echo ${arr[@]}\n    #echo ${idx[@]}\n    i=${#idx[@]}\n    if [\
    \ ${idx[$i-1]} -eq 0 ]; then echo \"\"; exit; fi\n    if [ ${idx[$i-1]} -eq ${#1}\
    \ ]; then\n        i=$(($i-1))\n        if [ ${idx[$i-1]} -eq 0 ]; then echo \"\
    \"; exit; fi\n    fi\n    echo ${arr[$i-1]}", "    local inp_str=\"$1\"\n    local\
    \ tmp_str=\"\"\n    local tmp_str_idx=\"\"\n    local max_len=${#inp_str}\n  \
    \  for ((i=0; i<max_len; i++)); do\n        if [[ \"${inp_str:i:1}\" =~ [bcdfghjklmnpqrstvwxyz]\
    \ ]]; then\n            tmp_str_idx=$i\n            tmp_str=\"${inp_str:i}\"\n\
    \            break\n        fi\n    done\n    for ((i=0; i<max_len; i++)); do\n\
    \        if [[ \"${tmp_str:i:1}\" =~ [aeiou] ]]; then\n            if [[ \"${tmp_str:i+1:1}\"\
    \ =~ [bcdfghjklmnpqrstvwxyz] ]]; then\n                echo \"${tmp_str:i:1}\"\
    \n                return 0\n            fi\n        fi\n    done\n    echo \"\"",
  "  # TODO: your solution here\n  return 0", "  echo $1 | sed -r 's/([^aeiou]*)([aeiou]{1}).*/\\\
    2/g'", "  local length=${#1}\n  local closest_vowel=\"\"\n  for (( i=length-1;\
    \ i>=0; i-- ))\n  do\n    case ${1:$i:1} in\n      a|e|i|o|u|A|E|I|O|U) closest_vowel=${1:$i:1};;\n\
    \      *) closest_vowel=\"\"; break;;\n    esac\n  done\n  echo \"$closest_vowel\"",
  "    # TODO: Enter your code here\n    return 0", "    # your code here\n    return",
  "    string=$1\n    v1=\"a\"\n    v2=\"e\"\n    v3=\"i\"\n    v4=\"o\"\n    v5=\"\
    u\"\n    v6=\"A\"\n    v7=\"E\"\n    v8=\"I\"\n    v9=\"O\"\n    v10=\"U\"\n \
    \   out=\"\"\n    for((i=${#string}-1;i>=0;i--))\n    do\n        if [[ ${string:$i:1}\
    \ == $v1 || ${string:$i:1} == $v2 || ${string:$i:1} == $v3 || ${string:$i:1} ==\
    \ $v4 || ${string:$i:1} == $v5 || ${string:$i:1} == $v6 || ${string:$i:1} == $v7\
    \ || ${string:$i:1} == $v8 || ${string:$i:1} == $v9 || ${string:$i:1} == $v10\
    \ ]]\n        then\n            out=${string:$i:1}\n            break\n      \
    \  fi\n    done\n    echo $out", "  # The regex to match words that contain at\
    \ least one consonant and at least\n  # one vowel, where the vowel is not in the\
    \ beginning or the end.\n  RE='^[^aeiou].*[aeiou][^aeiou]$'\n  if [[ $1 =~ $RE\
    \ ]]; then\n    # Regex to find the closest vowel from the right.\n    RE='[^aeiou]*([aeiou])[^aeiou]*$'\n\
    \    if [[ $1 =~ $RE ]]; then\n      # The closest vowel from the right is in\
    \ the first capturing group.\n      echo \"${BASH_REMATCH[1]}\"\n    fi\n  fi",
  "  # Write your script here\n  if [[ $1 =~ ([[:lower:]])[aeiou]+([[:lower:]]) ]];\
    \ then\n    echo \"${BASH_REMATCH[2]}\"\n  elif [[ $1 =~ ([[:upper:]])[AEIOU]+([[:upper:]])\
    \ ]]; then\n    echo \"${BASH_REMATCH[2]}\"\n  else\n    echo \"\"\n  fi", " \
    \   # your code here\n    local word=$1\n    local len=${#word}\n    for ((i=$len-1;\
    \ i>=0; i--)); do\n        char=${word:$i:1}\n        if [[ $char =~ [aeiou] ]];\
    \ then\n            return $char\n        fi\n    done\n    return \"\"", "  ##\
    \ your code goes here.\n  local temp=$1\n  local length=${#temp}\n  local i=0\n\
    \  while [ $i -lt $length ]\n  do\n    local char=${temp:$i:1}\n    if [[ $char\
    \ =~ [aeiou] ]]\n    then\n      echo $char\n      return\n    fi\n    i=$(($i+1))\n\
    \  done\n  echo \"\"", "    l=\"$1\"\n    e=\"a\"\n    for ((i=${#l}-1; i>=0;\
    \ i--)); do\n        c=${l:$i:1}\n        if [[ $c =~ [^aeiou] ]]; then\n    \
    \        if [[ $e != \"a\" ]]; then\n                echo \"$e\"\n           \
    \     return\n            fi\n        else\n            e=$c\n        fi\n   \
    \ done\n    echo \"\"", "    local word=$1\n    local word_rev=`echo \"${word}\"\
    \ | rev`\n    local first_cons=`echo \"${word_rev}\" | awk '/[^aeiou]/ { print\
    \ length($0) - index($0,$0); exit; }'`\n    local first_vowel=`echo \"${word_rev}\"\
    \ | awk '{for(i=1;i<=NF;i++) {if(match($i,/[aeiou]/)) {print length($i)-index($i,$i);exit}}}'`\n\
    \    if [ -z \"${first_cons}\" ] || [ -z \"${first_vowel}\" ]\n    then\n    \
    \    echo \"\"\n    else\n        if [ \"${first_cons}\" -lt \"${first_vowel}\"\
    \ ]\n        then\n            echo \"\"\n        else\n            echo \"${word_rev:${first_vowel}:1}\"\
    \ | rev\n        fi\n    fi", "    string=\"$1\"\n    length=${#string}\n    local\
    \ x=0\n    local y=0\n    local i=0\n    local found=0\n    local result=\"\"\n\
    \    local right=0\n    local left=0\n    # read the string from right to left\n\
    \    while [ $i -lt $length ]\n    do\n        right=${string:$i:1}\n        let\
    \ \"i += 1\"\n        if [ $i -eq $length ]\n        then\n            # No vowels\
    \ found\n            break\n        fi\n        left=${string:$i:1}\n        #\
    \ if both sides are consonants, check if the middle is a vowel\n        if [[\
    \ ( \"$left\" =~ [^aeiouAEIOU] ) && ( \"$right\" =~ [^aeiouAEIOU] ) ]]\n     \
    \   then\n            # check if the middle is a vowel\n            if [[ ( \"\
    $middle\" =~ [aeiouAEIOU] ) ]]\n            then\n                result=\"$middle\"\
    \n                found=1\n                break\n            fi\n        fi\n\
    \    done\n    if [ $found -eq 0 ]\n    then\n        result=\"\"\n    fi\n  \
    \  echo \"$result\"", "    local input=$1\n    local input_length=${#input}\n\
    \    local last_consonant=\"\"\n    local first_vowel=\"\"\n    local first_vowel_index=0\n\
    \    local i=0\n    local current_letter=\"\"\n    local vowels=\"AaEeIiOoUu\"\
    \n    local is_vowel=\"\"\n    local message=\"\"\n    local output=\"\"\n\n \
    \   for (( i=input_length-1; i>=0; i-- )); do\n        current_letter=${input:$i:1}\n\
    \        is_vowel=`echo $vowels | grep -c $current_letter`\n        if [ $is_vowel\
    \ -eq 0 ]; then\n            last_consonant=$current_letter\n        else\n  \
    \          first_vowel=$current_letter\n            first_vowel_index=$i\n   \
    \         break\n        fi\n    done\n\n    if [ -z $last_consonant ]; then\n\
    \        message=\"no consonant found\"\n    elif [ -z $first_vowel ]; then\n\
    \        message=\"no vowel found\"\n    elif [ $first_vowel_index -eq 0 ]; then\n\
    \        message=\"no consonant before the first vowel\"\n    else\n        message=\"\
    success\"\n        output=$first_vowel\n    fi\n\n    if [ \"$message\" == \"\
    success\" ]; then\n        echo $output\n    else\n        echo \"\"\n    fi",
  "    #your code here\n    echo $1", "\tif [[ $1 =~ [^A-Za-z] ]]; then \n\t\techo\
    \ \"Please enter an English word.\"\n\t\treturn 1\n\tfi\n\t#TODO\n\tfor((i=${#1}-1;i>=0;i--));\
    \ do\n\t\tlocal c=${1:$i:1}\n\t\tif [[ $c =~ [^aeiouAEIOU] ]]; then\n\t\t\tcontinue\n\
    \t\tfi\n\t\tif [[ $i -eq 0 ]]; then\n\t\t\tbreak\n\t\tfi\n\t\tlocal d=${1:$((i-1)):1}\n\
    \t\tif [[ $d =~ [^aeiouAEIOU] ]]; then\n\t\t\techo \"$c\"\n\t\t\treturn 0\n\t\t\
    fi\n\tdone\n\techo \"\"", "  if [[ $1 =~ ([^aeiou]*[aeiou][^aeiou]*)[aeiou].*\
    \ ]]; then\n    echo \"${BASH_REMATCH[1]}\"\n  else\n    echo \"\"\n  fi", " \
    \ vowel=$(echo \"$1\" | rev | tr 'a-zA-Z' 'A-Za-z' | grep -Eo '([aeiou])([^aeiou])'\
    \ | head -n 1 | rev | cut -d ' ' -f 1)\n  echo \"$vowel\"", "\tlocal word=$1\n\
    \tlocal word_length=${#word}\n\tlocal is_vowel=false\n\tlocal is_right_consonant=false\n\
    \tlocal left_consonant_index=\n\tlocal right_consonant_index=\n\tlocal closest_vowel_index=\n\
    \tlocal closest_vowel=\n\tlocal vowels=\"AaEeIiOoUu\"\n\tfor ((i=word_length-1;\
    \ i>=0; i--)); do\n\t\tlocal char=${word:$i:1}\n\t\tif [[ \"$is_vowel\" == \"\
    true\" ]]; then\n\t\t\tis_vowel=false\n\t\t\tleft_consonant_index=$i\n\t\t\tbreak\n\
    \t\tfi\n\t\tif [[ \"$is_right_consonant\" == \"true\" ]]; then\n\t\t\tif [[ \"\
    $vowels\" =~ \"$char\" ]]; then\n\t\t\t\tis_vowel=true\n\t\t\tfi\n\t\t\tcontinue\n\
    \t\tfi\n\t\tif [[ \"$vowels\" =~ \"$char\" ]]; then\n\t\t\tis_right_consonant=true\n\
    \t\t\tright_consonant_index=$i\n\t\tfi\n\tdone\n\tif [[ \"$left_consonant_index\"\
    \ == \"\" ]]; then\n\t\tleft_consonant_index=-1\n\tfi\n\tfor ((i=left_consonant_index+1;\
    \ i<=right_consonant_index; i++)); do\n\t\tlocal char=${word:$i:1}\n\t\tif [[\
    \ \"$vowels\" =~ \"$char\" ]]; then\n\t\t\tclosest_vowel_index=$i\n\t\t\tbreak\n\
    \t\tfi\n\tdone\n\tif [[ \"$closest_vowel_index\" != \"\" ]]; then\n\t\tclosest_vowel=${word:$closest_vowel_index:1}\n\
    \tfi\n\techo \"$closest_vowel\"", "    local out=''\n    for ((i=${#1}-1; i>=0;\
    \ i--)); do\n        [[ $out == '' ]] && [[ \"${1:i:1}\" == [aeiouAEIOU] ]] &&\
    \ out=\"${1:i:1}\"\n        [[ $out != '' ]] && [[ \"${1:i:1}\" != [aeiouAEIOU]\
    \ ]] && break\n    done\n    echo $out", "    local result=\"\"\n    local vowels=\"\
    a e i o u A E I O U\"\n    local word=\"$1\"\n    local word_length=${#word}\n\
    \    local i\n    for ((i=word_length-1; i>=0; i--)); do\n        if [[ \"${vowels}\"\
    \ =~ \"${word:$i:1}\" ]]; then\n            result=\"${word:$i:1}\"\n        \
    \    break\n        fi\n    done\n    echo \"$result\"", "    # TODO: write this\
    \ function\n    return \"\"", "  local input=$1; local vowels=(\"a\" \"e\" \"\
    i\" \"o\" \"u\"); local output=\"\"\n  local closest_vowel=$( echo \"${input}\"\
    \ | rev | cut -d\" \" -f 1 )\n  local first_letter=$( echo \"${closest_vowel}\"\
    \ | cut -c 1 )\n  if [[ \"${first_letter}\" =~ [^aeiou] ]]; then\n    closest_vowel=$(\
    \ echo \"${closest_vowel}\" | rev | cut -d\" \" -f 1 )\n    first_letter=$( echo\
    \ \"${closest_vowel}\" | cut -c 1 )\n    if [[ \"${first_letter}\" =~ [^aeiou]\
    \ ]]; then\n      closest_vowel=$( echo \"${closest_vowel}\" | rev | cut -d\"\
    \ \" -f 1 )\n      first_letter=$( echo \"${closest_vowel}\" | cut -c 1 )\n  \
    \    if [[ \"${first_letter}\" =~ [^aeiou] ]]; then\n        closest_vowel=$(\
    \ echo \"${closest_vowel}\" | rev | cut -d\" \" -f 1 )\n        first_letter=$(\
    \ echo \"${closest_vowel}\" | cut -c 1 )\n        if [[ \"${first_letter}\" =~\
    \ [^aeiou] ]]; then\n          closest_vowel=$( echo \"${closest_vowel}\" | rev\
    \ | cut -d\" \" -f 1 )\n          first_letter=$( echo \"${closest_vowel}\" |\
    \ cut -c 1 )\n          if [[ \"${first_letter}\" =~ [^aeiou] ]]; then\n     \
    \       output=\"\"\n          else\n            output=\"${first_letter}\"\n\
    \          fi\n        else\n          output=\"${first_letter}\"\n        fi\n\
    \      else\n        output=\"${first_letter}\"\n      fi\n    else\n      output=\"\
    ${first_letter}\"\n    fi\n  else\n    output=\"${first_letter}\"\n  fi\n  echo\
    \ \"${output}\"", "\tvowels=\"aeiouAEIOU\"\n\tstring=$1\n\tresult=\"\"\n\tif [\
    \ -z \"$string\" ]; then\n\t\techo \"\"\n\telse\n\t\tfor (( i=${#string}-1; i>=0;\
    \ i-- )); do\n\t\t\tletter=${string:$i:1}\n\t\t\tif [[ $vowels =~ $letter ]];\
    \ then\n\t\t\t\tletter_left=${string:$i-1:1}\n\t\t\t\tletter_right=${string:$i+1:1}\n\
    \t\t\t\tif [[ ! $vowels =~ $letter_left && ! $vowels =~ $letter_right ]]; then\n\
    \t\t\t\t\tresult=$letter\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone\n\t\t\
    echo $result\n\tfi", "    # Check if $1 is a vowel\n    if [[ \"$1\" =~ [aeiouAEIOU]\
    \ ]]; then\n        echo \"$1\"\n    else\n        # Replace all consonants that\
    \ are not at the end of string with nothing\n        echo \"$1\" | sed -e 's/[^aeiouAEIOU]*$//'\
    \ | sed -e 's/[^aeiouAEIOU]*[aeiouAEIOU]$//' | sed -e 's/[^aeiouAEIOU]*$//' |\
    \ sed -e 's/\\([^aeiouAEIOU]*[aeiouAEIOU]\\).*/\\1/'\n    fi", "  local word=$1\n\
    \  local vowel=\"aeiou\"\n  local result=''\n  for (( i=$((${#word}-1)); i>=0;\
    \ i-- ))\n  do\n    local char=${word:$i:1}\n    if [[ $vowel =~ $char ]]; then\n\
    \      result=$char\n      break\n    fi\n  done\n  echo $result", "    if [ $#\
    \ -ne 1 ]; then\n        echo \"Usage: $0 [string]\"\n        exit 1\n    fi\n\
    \    # YOUR CODE GOES HERE\n    # START OF YOUR CODE\n    str=$1\n    if [[ $str\
    \ =~ ^[aeiou]+$ ]]; then\n        echo \"\"\n    elif [[ $str =~ ^[^aeiou]+[aeiou]+[^aeiou]+$\
    \ ]]; then\n        echo \"\"\n    elif [[ $str =~ ^[^aeiou]+[aeiou]+$ ]]; then\n\
    \        echo \"\"\n    elif [[ $str =~ ^[aeiou]+[^aeiou]+$ ]]; then\n       \
    \ echo \"${str:0:1}\"\n    elif [[ $str =~ ^[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+$\
    \ ]]; then\n        echo \"${str:$((${#str}-1)):1}\"\n    elif [[ $str =~ ^[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+[^aeiou]+$\
    \ ]]; then\n        echo \"${str:$((${#str}-2)):1}\"\n    elif [[ $str =~ ^[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+$\
    \ ]]; then\n        echo \"${str:$((${#str}-3)):1}\"\n    elif [[ $str =~ ^[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+[^aeiou]+$\
    \ ]]; then\n        echo \"${str:$((${#str}-4)):1}\"\n    elif [[ $str =~ ^[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+[^aeiou]+[aeiou]+$\
    \ ]]; then\n        echo \"${str:$((${#str}-5)):1}\"\n    else\n       ", "  \
    \  echo \"$1\" |\n    awk '{\n        s = \"\";\n        for (i = length($1);\
    \ i >= 1; i--) {\n            if (substr($1, i, 1) ~ /[aieou]/i) {\n         \
    \       s = substr($1, i, 1);\n                break;\n            }\n       \
    \ }\n        print s;\n    }'", "    # TODO:\n    # assign the input string to\
    \ a variable called word\n    # remove vowels from the beginning of the word\n\
    \    # remove vowels from the end of the word\n    # assign the final result to\
    \ a variable called result\n    # print out result\n\n    echo \"\"", "    word=\"\
    $1\"\n    # remove all vowels from the word\n    word=${word//[aeiou]/}\n    #\
    \ get the index of the last consonant character\n    char_index=$(expr index \"\
    $word\" [^aeiou]$)\n    # if the string doesn't contain any consonant\n    if\
    \ [ $char_index -eq 0 ]; then\n        echo \"\"\n    else\n        # get all\
    \ the vowels before the last consonant, store them in a string\n        vowels=$(echo\
    \ \"${1:0:$char_index-1}\" | grep -o [aeiou])\n        # find the vowel that is\
    \ closest to the last consonant, store it in a string\n        closest_vowel=$(echo\
    \ \"$vowels\" | tail -c 2 | tac | head -c 1)\n        echo \"$closest_vowel\"\n\
    \    fi", "  local word=${1}\n  local len=${#word}\n  local vowels=\"aeiouAEIOU\"\
    \n  local i\n  local j\n  local vowel\n  local left\n  local right\n  local d\n\
    \  local min_d\n  local min_vowel\n\n  # do not assume there is always a vowel\
    \ in the word\n  # otherwise it's a one-liner\n  min_d=$len\n  min_vowel=''\n\
    \  for ((i=0; i<len; i++)); do\n    vowel=${word:$i:1}\n    if [[ $vowels =~ $vowel\
    \ ]]; then\n      for ((j=0; j<len; j++)); do\n        if [[ $vowels =~ ${word:$j:1}\
    \ ]]; then\n          continue\n        fi\n        d=$((j-i))\n        if ((d\
    \ > 0)) && ((d < min_d)); then\n          min_d=$d\n          min_vowel=$vowel\n\
    \        fi\n      done\n    fi\n  done\n  echo $min_vowel", "    local length=${#1}\n\
    \    local i=${#1}\n    for (( i=$length-1; i>=0; i-- )); do\n        local char=${1:$i:1}\n\
    \        if [ \"$char\" == \"a\" ] || [ \"$char\" == \"e\" ] || [ \"$char\" ==\
    \ \"i\" ] || [ \"$char\" == \"o\" ] || [ \"$char\" == \"u\" ] || [ \"$char\" ==\
    \ \"A\" ] || [ \"$char\" == \"E\" ] || [ \"$char\" == \"I\" ] || [ \"$char\" ==\
    \ \"O\" ] || [ \"$char\" == \"U\" ]; then\n            echo $char\n          \
    \  break\n        fi\n    done", "    vowels='a|e|i|o|u|A|E|I|O|U'\n    prev_char=\"\
    \"\n    for ((i=${#1}-1; i>=0; i--)); do\n        current_char=${1:$i:1}\n   \
    \     if [[ $prev_char =~ $vowels ]]; then\n            if [[ $current_char =~\
    \ $vowels ]]; then\n                echo $current_char\n                return\n\
    \            fi\n        fi\n        prev_char=$current_char\n    done\n    echo\
    \ \"\"", "    local i j\n    local len=${#1}\n    local str=$1\n    local vowels='aAeEiIoOuU'\n\
    \    # loop through the string and get the first index of consonant\n    for ((i=len-1;\
    \ i>=0; i--)); do\n        for ((j=0; j<${#vowels}; j++)); do\n            if\
    \ [[ ${str:$i:1} == ${vowels:$j:1} ]]; then\n                break\n         \
    \   fi\n        done\n        if [[ $j -eq ${#vowels} ]]; then\n            break\n\
    \        fi\n    done\n    # if there's no consonant, return empty string\n  \
    \  if [[ $i -eq -1 ]]; then\n        echo \"\"\n        return\n    fi\n    #\
    \ loop again, this time, search for the vowel\n    for ((j=i-1; j>=0; j--)); do\n\
    \        for ((k=0; k<${#vowels}; k++)); do\n            if [[ ${str:$j:1} ==\
    \ ${vowels:$k:1} ]]; then\n                break\n            fi\n        done\n\
    \        if [[ $k -lt ${#vowels} ]]; then\n            break\n        fi\n   \
    \ done\n    # if there's no vowel, return empty string\n    if [[ $j -eq -1 ]];\
    \ then\n        echo \"\"\n        return\n    fi\n    # return the vowel\n  \
    \  echo ${str:$j:1}", "  if [ $# -ne 1 ]; then\n    echo \"Get closest vowel in\
    \ a string\"\n    echo \"Usage: $(basename $0) STRING\"\n    exit 1\n  fi\n  echo\
    \ $1 | sed -n 's/.*\\([AEIOUaeiou]\\).*\\([bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\\\
    ).*/\\1/p'", "    # write your code here\n    s = $1\n    first = 0\n    last\
    \ = ${#s} - 1\n    empty = -1\n    for ((i=0; i<${#s}; i++)); do\n        if [[\
    \ $first -eq 0 ]]; then\n            if [[ \"${s:$i:1}\" =~ [^aeiou] ]]; then\n\
    \                first = $i\n            fi\n        else\n            if [[ \"\
    ${s:$i:1}\" =~ [aeiou] ]]; then\n                last = $i\n                break\n\
    \            fi\n        fi\n    done\n    if [[ $first -eq 0 || $last -eq empty\
    \ ]]; then\n        echo \"\"\n    else\n        echo \"${s:$first:1}\"\n    fi",
  '    # Your code here:', "    echo $1 | rev | sed 's/[^aeiou]*\\([aeiou]\\)[^aeiou]*/\\\
    1/' | rev", "  if [[ \"$1\" =~ ([^aeiou]*[aeiou])[^aeiou] ]]; then\n    echo \"\
    ${BASH_REMATCH[1]}\"\n  else\n    echo \"\"\n  fi", "  # set right-to-left variable\
    \ IFS to support right-to-left string.\n  IFS=\n  # loop through backward of the\
    \ given string by declaring variable str with given string.\n  for((i=${#1}-1;i>=0;i--));do\n\
    \    [[ \"${1:i:1}\" =~ [aeiou] ]] && {\n      str=$([[ \"${1:i+1:1}\" =~ [aeiou]\
    \ ]] && continue || echo ${1:i:1})\n      break\n    }\n  done\n  echo \"$str\"",
  "  # Get the string length\n  local len=$(echo -n $1 | wc -m)\n  local c=\"$1\"\n\
    \  local c_len=$len\n  local c_end=0\n  local c_i=0\n  local c_r\n  local is_vowel=1\n\
    \  local is_con=1\n  local res\n  local res_set=0\n  local res_i=0\n  local res_len=0\n\
    \  local res_end=0\n  local res_r\n  local res_char\n\n  # Find the first vowel\
    \ which is found from the end\n  for (( i=len-1; i>=0; i-- )); do\n    is_vowel=1\n\
    \    c_char=$(echo -n $c | head -c $i | tail -c 1)\n    case $c_char in\n    \
    \  a | e | i | o | u | A | E | I | O | U )\n        :\n        ;;\n      *)\n\
    \        is_vowel=0\n        ;;\n    esac\n    if [ $is_vowel -eq 1 ]; then\n\
    \      res_set=1\n      res=$c_char\n      res_i=$i\n      res_len=$c_len\n  \
    \    res_end=$c_end\n      res_r=$c_r\n      break\n    fi\n  done\n\n  # Find\
    \ the closest vowel to the first vowel\n  for (( i=len-1; i>=0; i-- )); do\n \
    \   is_vowel=1\n    is_con=1\n    c_char=$(echo -n $c | head -c $i | tail -c 1)\n\
    \    case $c_char in\n      a | e | i | o | u | A | E | I | O | U )\n        :\n\
    \        ;;\n      *)\n        is_vowel=0\n        ;;\n    esac\n    if [ $is_vowel\
    \ -eq 0 ]; then\n      is_con=1\n      c_r=$c_char\n      c_end=$c_i\n      c_len=$i\n\
    \      c_i=$i\n      continue\n    fi\n    # Found a vowel\n", "   for (( i=${#1}-1;\
    \ i>=0; i-- ))\n   do\n      character=${1:$i:1}\n      if [[ \"$character\" ==\
    \ *[AEIOU]* ]]\n      then\n         echo $character\n         return 0\n    \
    \  fi\n   done\n   echo \"\"", "    echo $1 | rev | sed 's/[^aeiouAEIOU]*\\([aeiouAEIOU]\\\
    ).*/\\1/' | rev", "  words=()\n  for ((i=${#1}-1; i>=0; i--)); do\n    char=\"\
    ${1:$i:1}\"\n    if [[ $char =~ [aeiou] ]]; then\n      if [[ ${#words[@]} -eq\
    \ 0 ]]; then\n        words+=(\"$char\")\n      else\n        words+=(\"$char\"\
    )\n        break\n      fi\n    elif [[ ${#words[@]} -eq 0 ]]; then\n      continue\n\
    \    else\n      break\n    fi\n  done\n  [[ ${#words[@]} -eq 0 ]] && echo \"\"\
    \ || echo \"${words[-1]}\"", "  local get_closest_vowel_result=\"\"\n  local get_closest_vowel_length=$(echo\
    \ $1 | wc -c)\n  local get_closest_vowel_correct_length=`expr $get_closest_vowel_length\
    \ - 1`\n  local get_closest_vowel_current_length=$get_closest_vowel_correct_length\n\
    \  local get_closest_vowel_char_is_consonant=1\n  local get_closest_vowel_char_is_vowel=0\n\
    \  local get_closest_vowel_current_char=0\n  local get_closest_vowel_previous_char=0\n\
    \  local get_closest_vowel_previous_previous_char=0\n  local get_closest_vowel_after_vowel=0\n\
    \  local get_closest_vowel_vowel_counter=0\n  local get_closest_vowel_vowel_array=(\
    \ a e i o u )\n  local get_closest_vowel_vowel_array_length=${#get_closest_vowel_vowel_array[@]}\n\
    \  while [ $get_closest_vowel_current_length -gt 0 ]\n  do\n    get_closest_vowel_current_char=`expr\
    \ substr $1 $get_closest_vowel_current_length 1`\n    if [ $get_closest_vowel_current_char\
    \ == \"a\" ] || [ $get_closest_vowel_current_char == \"e\" ] || [ $get_closest_vowel_current_char\
    \ == \"i\" ] || [ $get_closest_vowel_current_char == \"o\" ] || [ $get_closest_vowel_current_char\
    \ == \"u\" ]\n    then\n      get_closest_vowel_char_is_vowel=1\n      if [ $get",
  "    if [ $# -ne 1 ]; then\n        echo \"Wrong argument\"\n        return 0\n\
    \    fi\n    local word=\"$1\"\n    local length=${#word}\n    local i=0\n   \
    \ local next=$length\n    local found=0\n    local pos=0\n    local closest=0\n\
    \    while [ $i -lt $length ]; do\n        local current=${word:$i:1}\n      \
    \  if [[ $current =~ [AEIOUaeiou] ]]; then\n            local next=${word:$i+1:1}\n\
    \            if [[ $next =~ [^AEIOUaeiou] ]]; then\n                found=1\n\
    \                pos=$i\n                if [ $i -gt $closest ]; then\n      \
    \              closest=$i\n                fi\n            fi\n        fi\n  \
    \      i=$(( $i + 1 ))\n    done\n    if [ $found -eq 1 ]; then\n        echo\
    \ \"${word:$closest:1}\"\n    else\n        echo \"\"\n    fi", "    if [ -z \"\
    $1\" ]; then\n        exit 0\n    fi\n    local s=\"$1\"\n    local len=${#s}\n\
    \    local idx=$((len-1))\n    local v=''\n    local v_idx=-1\n    local v_idx_right=-1\n\
    \    local v_idx_left=-1\n    local c=''\n    local res=''\n    local is_consonant=0\n\
    \    local is_vowel=0\n    local is_right_consonant=0\n    local is_left_consonant=0\n\
    \    while [ $idx -ge 0 ]; do\n        c=${s:$idx:1}\n        case $c in\n   \
    \         A | E | I | O | U | Y)\n                v=$c\n                v_idx=$idx\n\
    \                is_vowel=1\n                ;;\n            *)\n            \
    \    is_consonant=1\n                ;;\n        esac\n        idx=$((idx-1))\n\
    \        if [ $is_vowel -eq 1 ] && [ $is_consonant -eq 1 ]; then\n           \
    \ break\n        fi\n    done\n    # check the left side of vowel\n    idx=$((v_idx-1))\n\
    \    while [ $idx -ge 0 ]; do\n        c=${s:$idx:1}\n        case $c in\n   \
    \         A | E | I | O | U | Y)\n                is_left_consonant=0\n      \
    \          break\n                ;;\n            *)\n                is_left_consonant=1\n\
    \                ;;\n        esac\n        idx=$((idx-1))\n    done\n    # check\
    \ the right side of vowel\n    idx=$((v_idx+1))\n    while [ $idx -lt $len ];\
    \ do\n        c=${s:$idx:1}\n        case $c in\n            A | E | I | O | U\
    \ | Y)\n                is_right_consonant=0\n                break\n        \
    \        ;;\n            *)\n                is_right_consonant=1\n          \
    \      ;;\n        esac\n        idx=$((idx+1))", "    local str=\"$1\"\n    local\
    \ str_rev=\"$(rev <<< $str)\"\n    local str_length=\"${#str}\"\n    local i=0\n\
    \    local found_vowel=\"\"\n    local found_vowel_index=0\n    while [ $i -lt\
    \ $str_length ]; do\n        local ch=\"${str_rev:$i:1}\"\n        if [[ \"$ch\"\
    \ =~ [AEIOUaeiou] ]]; then\n            if [ -z \"$found_vowel\" ]; then\n   \
    \             found_vowel=\"$ch\"\n                found_vowel_index=$i\n    \
    \        else\n                if [ $((i-found_vowel_index)) -gt 1 ]; then\n \
    \                   return $(rev <<< $found_vowel)\n                fi\n     \
    \       fi\n        fi\n        ((i++))\n    done\n    echo \"\"", "  length=$(echo\
    \ -n $1 | wc -m)\n  # length = 6 means: 012345 6th character is null character\n\
    \n  for ((i=length-1; i>=0; i--))\n  do\n    if [[ \"${1:$i:1}\" =~ ^[aeiou] ]]\n\
    \    then\n      # found a vowel\n\n      if [[ $i -gt 0 ]]\n      then\n    \
    \    if [[ ! \"${1:$i-1:1}\" =~ ^[aeiou] ]]\n        then\n          # found a\
    \ consonant before\n          echo \"${1:$i:1}\"\n          return 0\n       \
    \ fi\n      fi\n\n      if [[ $i -lt length-1 ]]\n      then\n        if [[ !\
    \ \"${1:$i+1:1}\" =~ ^[aeiou] ]]\n        then\n          # found a consonant\
    \ after\n          echo \"${1:$i:1}\"\n          return 0\n        fi\n      fi\n\
    \    fi\n  done\n\n  echo \"\"", "    local str=$1\n    local last=\"\"\n    for\
    \ (( i=${#str}-1; i>=0; i-- )); do\n        c=${str:$i:1}\n        if [[ $c =~\
    \ [AEIOUaeiou] ]]; then\n            if [[ $last =~ [bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\
    \ ]]; then\n                echo \"$c\"\n                break\n            fi\n\
    \        else\n            last=$c\n        fi\n    done", "    echo \"$1\" |\
    \ grep -o '.\\(.*[aeiou]\\)\\{0,1\\}[^aeiou]*[aeiou][^aeiou]*\\{0,1\\}$' | tail\
    \ -c 2", "    # Step 1: Generate a list of characters from $1\n    lst=`echo $1\
    \ | sed 's/\\(.\\)/\\1 /g'`\n    s=$(echo $lst | sed 's/ *$//')\n    # Step 2:\
    \ Check if there is a character at the end of the list which\n    # is a vowel\n\
    \    #  Step 2.1: Extract the last character\n    last=`echo $s | awk '{print\
    \ $NF}'`\n    #  Step 2.2: Check if it is a vowel or not\n    if [ $(is_vowel\
    \ $last) -eq 1 ]; then\n        echo $last\n        return\n    fi\n    # Step\
    \ 3: If there is no vowel at the end, we should find the closest vowel\n    #\
    \ from the right\n    #  Step 3.1: We generate a list of characters from the first\
    \ letter to the\n    #  last second letter\n    length=`echo $s | wc -w`\n   \
    \ lst=`echo $s | cut -d \" \" -f1-$(($length-1))`\n    #  Step 3.2: We get the\
    \ reverse of the list\n    rlst=`echo $lst | awk '{for (i=NF; i>=1; i--) printf\
    \ $i \" \"}'`\n    #  Step 3.3: We get the list of indexes\n    indexes=`echo\
    \ $rlst | awk '{for (i=1; i<=NF; i++) printf i \" \"}'`\n    #  Step 3.4: Iterate\
    \ through the list of indexes\n    for index in $indexes; do\n        # Get the\
    \ character at index\n        char=`echo $rlst | awk '{print $'$index'}'`\n  \
    \      # Check if it is a vowel\n        if [ $(is_vowel $char) -eq 1 ]; then\n\
    \            # Check if the previous letter is a consonant\n            if [ $(is_vowel\
    \ `echo $rlst | awk '{print $'$(($index-1))'}'`) -eq 0 ]; then\n             \
    \   # Check if the next letter is a consonant\n                if [ $(", "   \
    \ local -i _len=${#1}\n    local _cur_consonant _cur_vowel\n    _cur_consonant=${1:$((\
    \ _len - 1 ))}\n    for (( i = _len - 2; i >= 0; i-- )); do\n        if [[ $_cur_consonant\
    \ =~ ^[^aeiouAEIOU]$ ]]; then\n            _cur_vowel=${1:$i:1}\n            if\
    \ [[ $_cur_vowel =~ ^[aeiouAEIOU]$ ]]; then\n                printf \"%s\" \"\
    $_cur_vowel\"\n                return\n            fi\n        fi\n        _cur_consonant=${1:$i:1}\n\
    \    done\n    printf \"%s\" \"\"", "    w=$1\n    if [ ! -z $w ]; then\n    \
    \    len=${#w}\n        index=$len\n        while [ $index -gt 0 ]; do\n     \
    \       cur=${w:$index-1:1}\n            if [ $cur = \"a\" ] || [ $cur = \"e\"\
    \ ] || [ $cur = \"i\" ] || [ $cur = \"o\" ] || [ $cur = \"u\" ] || [ $cur = \"\
    A\" ] || [ $cur = \"E\" ] || [ $cur = \"I\" ] || [ $cur = \"O\" ] || [ $cur =\
    \ \"U\" ]; then\n                if [ $index -lt $len ]; then\n              \
    \      cur=${w:$index:1}\n                    if [ $cur != \"a\" ] && [ $cur !=\
    \ \"e\" ] && [ $cur != \"i\" ] && [ $cur != \"o\" ] && [ $cur != \"u\" ] && [\
    \ $cur != \"A\" ] && [ $cur != \"E\" ] && [ $cur != \"I\" ] && [ $cur != \"O\"\
    \ ] && [ $cur != \"U\" ]; then\n                        echo ${w:$index-1:1}\n\
    \                        return\n                    fi\n                fi\n\
    \            fi\n            index=$(($index-1))\n        done\n    fi\n    echo\
    \ \"\"", "  local word=\"$1\"\n  local i\n  for i in `seq 0 $((${#word} - 1))`;\
    \ do\n    # Check for a consonant to the left of the current character\n    if\
    \ [ \"$i\" -gt 0 ]; then\n      local left_char=\"${word:$(($i - 1)):1}\"\n  \
    \    if [[ $left_char =~ [^aeiouAEIOU] ]]; then\n        local char=\"${word:$i:1}\"\
    \n        # Check if the current character is a vowel\n        if [[ $char =~\
    \ [aeiouAEIOU] ]]; then\n          # Check for a consonant to the right of the\
    \ current character\n          if [ \"$i\" -lt $((${#word} - 1)) ]; then\n   \
    \         local right_char=\"${word:$(($i + 1)):1}\"\n            if [[ $right_char\
    \ =~ [^aeiouAEIOU] ]]; then\n              echo $char\n              break\n \
    \           fi\n          fi\n        fi\n      fi\n    fi\n  done", "    local\
    \ word=$1\n    local regex=\"([^aeiou]*[aeiou])([^aeiou]*)\"\n    local index=0\n\
    \    local last_match=${word}\n    while [[ $last_match =~ $regex ]]; do\n   \
    \     index=$((${#BASH_REMATCH[1]}-1))\n        last_match=${BASH_REMATCH[2]}\n\
    \    done\n    local length=${#word}\n    if [[ $index -eq $length ]]; then\n\
    \        echo \"\"\n    else\n        local character=${word:$index:1}\n     \
    \   echo $character\n    fi", "    if [ $# -ne 1 ]; then\n        echo \"Usage:\
    \ bash $0 <a string>\"\n        exit 1\n    fi\n    local str=$1\n    local vowel=\"\
    \"\n    local closest_vowel=\"\"\n    local distance=0\n    local closest_distance=0\n\
    \    local vowel_pattern=\"[aeiou]\"\n    local alpha_pattern=\"[a-zA-Z]\"\n \
    \   local is_find_vowel=0\n    local search_end=0\n    local slen=${#str}\n  \
    \  local i=0\n    for ((i=0; i<slen; i++)); do\n        if [ ${str:$i:1} =~ $alpha_pattern\
    \ ]; then\n            if [ ${str:$i:1} =~ $vowel_pattern ]; then\n          \
    \      vowel=${str:$i:1}\n                distance=$(($slen - $i))\n         \
    \       if [ $is_find_vowel -eq 0 ]; then\n                    closest_vowel=$vowel\n\
    \                    closest_distance=$distance\n                    is_find_vowel=1\n\
    \                else\n                    if [ $distance -lt $closest_distance\
    \ ]; then\n                        closest_vowel=$vowel\n                    \
    \    closest_distance=$distance\n                    fi\n                fi\n\
    \            else\n                if [ $is_find_vowel -eq 1 ]; then\n       \
    \             search_end=1\n                fi\n            fi\n        fi\n \
    \       if [ $search_end -eq 1 ]; then\n            break\n        fi\n    done\n\
    \    echo $closest_vowel", "    last_con=0\n    for (( i=${#1}-1; i>=0; i-- ));\
    \ do\n        if [[ ${1:i:1} =~ [aeiou] ]]; then\n            if (( $last_con\
    \ - $i > 1 )); then\n                echo \"${1:i:1}\"\n                return\n\
    \            fi\n        else\n            last_con=$i\n        fi\n    done\n\
    \    echo \"\"", "    # TODO: implement this function\n    # write the code that\
    \ you may need here to construct the output\n    # don't forget to echo the result\
    \ so that it can be captured by the $(..)\n    # you can use the following line:\n\
    \    echo \"\"", "\techo \"$1\" | sed 's/[^aeiou]*\\([aeiou]\\).*/\\1/'", "  \
    \  # must be a string, and non-empty\n    if [[ -z $1 ]]; then\n        echo -n\
    \ \"\"\n        return\n    fi\n\n    # reverse the string and find the index\
    \ of \n    # the first vowel that is followed by a consonent\n    local reverse=$(echo\
    \ -n $1 | rev)\n    local rev_index=$(echo -n $reverse | sed -n 's/[^aeiou]\\\
    ([aeiou]\\).*/\\1/pI' | head -n 1)\n    local index=$(echo -n $rev_index | wc\
    \ -c)\n    if [[ $index -eq 1 ]]; then\n        echo -n $rev_index\n    else\n\
    \        echo -n \"\"\n    fi", '    # your code here', "\t# your code here\n\t\
    # G\xE9rer les cas particuliers\n\tif [ -z \"$1\" ] || [ -z \"$(echo \"$1\" |\
    \ sed -e 's/[^aeiouAEIOU]//g')\" ]\n\tthen\n\t\techo \"\"\n\telse\n\t\t# G\xE9\
    rer les mots avec consonnes multiples entre deux voyelles.\n\t\t# Il suffit de\
    \ boucler sur toutes les consonnes avant la prochaine voyelle.\n\t\t# La voyelle\
    \ est celle qui suit la derni\xE8re consonne boucl\xE9e\n\t\tconsonnes=\"$(echo\
    \ \"$1\" | sed -e 's/[aeiouAEIOU]//g')\"\n\t\tfor consonne in $(echo $consonnes\
    \ | grep -o .)\n\t\tdo\n\t\t\t# R\xE9cup\xE9rer la prochaine voyelle apr\xE8s\
    \ la consonne.\n\t\t\t# On sait qu'il y a une voyelle parce que le mot n'est pas\
    \ vide.\n\t\t\tvoyelle=\"$(echo \"$1\" | sed -e \"s/.*$consonne\\(.\\).*/\\1/\"\
    )\"\n\t\t\t# On v\xE9rifie que c'est bien une voyelle\n\t\t\tif [ ! -z \"$(echo\
    \ \"$voyelle\" | sed -e 's/[aeiouAEIOU]//g')\" ]\n\t\t\tthen\n\t\t\t\t# C'est\
    \ une voyelle\n\t\t\t\t# On la retourne\n\t\t\t\techo \"$voyelle\"\n\t\t\t\tbreak\n\
    \t\t\tfi\n\t\tdone\n\tfi", "    local word=${1}\n    local char\n    local prev_char\n\
    \    local i\n    local vowel\n    local vowel_idx\n    local closest_vowel_idx\n\
    \    local match_idx\n    local match_len\n    for ((i=${#word}-1; i>=0; i--));\
    \ do\n        char=${word:i:1}\n        if [[ \"$char\" =~ [aeiouAEIOU] ]]; then\n\
    \            match_idx=$i\n            match_len=1\n            while [[ \"$prev_char\"\
    \ =~ [aeiouAEIOU] ]]; do\n                ((i--))\n                prev_char=${word:i:1}\n\
    \                ((match_len++))\n            done\n            if [[ $match_len\
    \ -gt 1 ]]; then\n                ((i++))\n                return\n          \
    \  fi\n            vowel=$char\n            vowel_idx=$i\n            if [[ -z\
    \ $closest_vowel_idx ]]; then\n                closest_vowel_idx=$i\n        \
    \    fi\n        fi\n        prev_char=$char\n    done\n    if [[ -z $closest_vowel_idx\
    \ ]]; then\n        return\n    fi\n    match_idx=$closest_vowel_idx\n    ((match_len=1))\n\
    \    echo ${word:match_idx:match_len}", "\ts=$1\n\tfor (( i=${#s}-1; i >= 0; i--\
    \ )); do\n\t\tc=${s:$i:1}\n\t\tif [[ $c =~ [aeiouAEIOU] ]]; then\n\t\t\techo $c\n\
    \t\t\tbreak\n\t\tfi\n\tdone", "    echo \"$1\" | sed -r 's/^.*[^aeiouy]|[^aeiouy].*$//g'",
  "\tlocal word=$1\n\tlocal found=0\n\t\n\t# find rightmost consonant character\n\t\
    local rightmost_consonant_index=`expr index \"$word\" '[^aeiouAEIOU]'`\n\t[ $rightmost_consonant_index\
    \ -gt 0 ] || return\n\n\t# find character to the left of the rightmost consonant\n\
    \tlet left_of_rightmost_consonant_index=$rightmost_consonant_index-1\n\tlocal\
    \ left_of_rightmost_consonant=${word:$left_of_rightmost_consonant_index:1}\n\n\
    \t# if character to the left of the rightmost consonant is a vowel, return it\n\
    \t[ -z \"`echo $left_of_rightmost_consonant | grep '[aeiouAEIOU]'`\" ] || { echo\
    \ $left_of_rightmost_consonant; return; }\n\n\t# else recursively find the closest\
    \ vowel to the left of the rightmost consonant\n\treturn `get_closest_vowel \"\
    ${word:0:$left_of_rightmost_consonant_index}\"`", "\t# TODO: write your function\
    \ here", "  for ((i=${#1}; i>=0; i--)); do\n    if [ \"${1:$i:1}\" == \"A\" ]\
    \ || [ \"${1:$i:1}\" == \"E\" ] || [ \"${1:$i:1}\" == \"I\" ] || [ \"${1:$i:1}\"\
    \ == \"O\" ] || [ \"${1:$i:1}\" == \"U\" ] ||\n       [ \"${1:$i:1}\" == \"a\"\
    \ ] || [ \"${1:$i:1}\" == \"e\" ] || [ \"${1:$i:1}\" == \"i\" ] || [ \"${1:$i:1}\"\
    \ == \"o\" ] || [ \"${1:$i:1}\" == \"u\" ]; then\n      if (( $i != 0 )); then\n\
    \        if [ \"${1:$i-1:1}\" != \"A\" ] && [ \"${1:$i-1:1}\" != \"E\" ] && [\
    \ \"${1:$i-1:1}\" != \"I\" ] && [ \"${1:$i-1:1}\" != \"O\" ] && [ \"${1:$i-1:1}\"\
    \ != \"U\" ] &&\n           [ \"${1:$i-1:1}\" != \"a\" ] && [ \"${1:$i-1:1}\"\
    \ != \"e\" ] && [ \"${1:$i-1:1}\" != \"i\" ] && [ \"${1:$i-1:1}\" != \"o\" ] &&\
    \ [ \"${1:$i-1:1}\" != \"u\" ]; then\n          echo \"${1:$i:1}\"\n         \
    \ break\n        fi\n      else\n        echo \"${1:$i:1}\"\n        break\n \
    \     fi\n    fi\n  done", "    local len=${#1}\n    local i=1\n    local last_consonant_pos=$len\n\
    \    local vowel_before_consonant_pos=$len\n    local vowel_before_consonant=\"\
    \"\n    local chr=\"\"\n    while [ $i -le $len ]; do\n        chr=${1:len-i:1}\n\
    \        case $chr in\n            [AEIOU])\n                vowel_before_consonant_pos=$((last_consonant_pos-i))\n\
    \                vowel_before_consonant=$chr\n                break\n        \
    \        ;;\n            *)\n                last_consonant_pos=$((last_consonant_pos-i))\n\
    \                ;;\n        esac\n        i=$((i+1))\n    done\n    #echo \"\
    vowel_before_consonant_pos=$vowel_before_consonant_pos\"\n    #echo \"vowel_before_consonant=$vowel_before_consonant\"\
    \n    #echo \"last_consonant_pos=$last_consonant_pos\"\n    [ $vowel_before_consonant_pos\
    \ -lt $last_consonant_pos ] && echo $vowel_before_consonant", "  local  _vowels=(a\
    \ e i o u A E I O U)\n  local  _result=\n  local  _rev=\"$(echo $1 | rev)\"\n\
    \  local  _word_len=\"${#1}\"\n  local  _consonants_len=\n  local  _vowels_len=\n\
    \  local  _idx=0\n  for (( i=0; i<_word_len; i++ ))\n  do\n    if [[ \" ${_vowels[@]}\
    \ \" =~ \" ${1:$i:1} \" ]]; then\n      break\n    fi\n    ((_consonants_len++))\n\
    \  done\n  for (( i=0; i<_word_len; i++ ))\n  do\n    if [[ \" ${_vowels[@]} \"\
    \ =~ \" ${_rev:$i:1} \" ]]; then\n      break\n    fi\n    ((_vowels_len++))\n\
    \  done\n  if [ $_consonants_len -eq 0 ] || [ $_vowels_len -eq 0 ]; then\n   \
    \ echo \"\"\n  else\n    _result=\"${1:$((_word_len - _vowels_len - _consonants_len)):1}\"\
    \n    echo \"$_result\"\n  fi", "    string=$1\n    word_len=${#string}\n    vowels=('a'\
    \ 'e' 'i' 'o' 'u' 'A' 'E' 'I' 'O' 'U')\n    consonants=('b' 'c' 'd' 'f' 'g' 'h'\
    \ 'j' 'k' 'l' 'm' 'n' 'p' 'q' 'r' 's' 't' 'v' 'w' 'x' 'y' 'z' 'B' 'C' 'D' 'F'\
    \ 'G' 'H' 'J' 'K' 'L' 'M' 'N' 'P' 'Q' 'R' 'S' 'T' 'V' 'W' 'X' 'Y' 'Z')\n    for\
    \ ((index=0; index<word_len; index++)); do\n        char=${string:$index:1}\n\
    \        if [[ \" ${vowels[@]} \" =~ \" ${char} \" ]]; then\n            vowel_index=$index\n\
    \            for ((index=$vowel_index; index>=0; index--)); do\n             \
    \   char=${string:$index:1}\n                if [[ \" ${consonants[@]} \" =~ \"\
    \ ${char} \" ]]; then\n                    consonant_index=$index\n          \
    \          break\n                fi\n            done\n            if [ \"${consonant_index}\"\
    \ -lt \"${vowel_index}\" ]; then\n                echo \"${string:$vowel_index:1}\"\
    \n                break\n            fi\n        fi\n    done", "    echo \"$1\"\
    \ | tr 'aeiou' 'AEIOU' | grep -o '[^AEIOU][AEIOU]' | head -n 1 | tr -d '[^aeiou]'",
  "    reverse_string \"$1\"\n    string=$(tr '[:upper:]' '[:lower:]' <<< \"${REVERSE_STRING}\"\
    )\n    vowels=\"aeiou\"\n    consonants=\"bcdfghjklmnpqrstvwxyz\"\n    for char\
    \ in $(seq 0 $((${#string} - 1))); do\n        if [[ \"${vowels}\" =~ \"${string:$char:1}\"\
    \ ]]; then\n            if [[ \"${consonants}\" =~ \"${string:$((char + 1)):1}\"\
    \ ]]; then\n                echo \"${string:$char:1}\"\n                return\n\
    \            fi\n        fi\n    done\n    echo \"\"", "    local closest_vowel\n\
    \    for (( i=${#1}-1; i>=0; i-- )); do\n        if [[ ${1:i:1} =~ [aeiouAEIOU]\
    \ ]]; then\n            closest_vowel=${1:i:1}\n            break\n        fi\n\
    \    done\n    echo \"$closest_vowel\"", "    echo \"$1\" | awk '{ print gensub(/(s[aeiou]|[^aeiou]e|[^aeiou]o|[^aeiou]u)/,\
    \ \"\", 1) }'", "\tlocal str=$1\n\tlocal i\n\tfor ((i=${#str}-1; i>=0; i--));\
    \ do\n\t\tif is_consonant ${str:$i:1}; then\n\t\t\tif [ $i -lt $((${#str}-1))\
    \ ]; then\n\t\t\t\tif is_vowel ${str:$(($i+1)):1}; then\n\t\t\t\t\techo ${str:$(($i+1)):1}\n\
    \t\t\t\t\treturn\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\tif [ $i -gt 0 ]; then\n\
    \t\t\t\tif is_consonant ${str:$(($i-1)):1}; then\n\t\t\t\t\techo ${str:$i:1}\n\
    \t\t\t\t\treturn\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tdone\n\techo", "    local vowels=\"\
    aeiouAEIOU\"\n    local word=\"$1\"\n    local result=\"\"\n    local back=\"\
    $(echo \"$word\" | rev)\"\n    for ((i=0; i<${#back}; i++)); do\n        local\
    \ left=\"${back:$i:1}\"\n        if [[ \"$vowels\" =~ \"$left\" ]]; then\n   \
    \         local right=\"${back:$((i+1)):1}\"\n            if [[ ! \"$vowels\"\
    \ =~ \"$right\" ]]; then\n                result=\"$left\"\n                break\n\
    \            fi\n        fi\n    done\n    echo \"$result\"", "\t# Write your\
    \ codes here\n\tlocal word=`echo \"$1\" | rev`\n\techo \"$word\" | awk '/[aeiou]/\
    \ {for(i=2;i<=NF;i++) if(!match($i,\"[aeiou]\")) {print $i;exit}}' | rev", " \
    \   word=$1\n    length=$((${#word}-1))\n    found=\n    for (( i=$length; i >=\
    \ 0; i-- ))\n    do\n        c=${word:$i:1}\n        if [ \"$c\" = \"a\" ] ||\
    \ [ \"$c\" = \"e\" ] || [ \"$c\" = \"i\" ] || [ \"$c\" = \"o\" ] || [ \"$c\" =\
    \ \"u\" ] || [ \"$c\" = \"A\" ] || [ \"$c\" = \"E\" ] || [ \"$c\" = \"I\" ] ||\
    \ [ \"$c\" = \"O\" ] || [ \"$c\" = \"U\" ]\n        then\n            echo $c\n\
    \            return\n        else\n            if [ \"$found\" = \"true\" ]\n\
    \            then\n                echo \"\"\n                return\n       \
    \     fi\n        fi\n        found=true\n    done\n    echo \"\"", "\tresult=\"\
    \"\n\tchar_list=`echo $1 | sed 's/./& /g'`\n\tfor ch in $char_list\n\tdo\n\t\t\
    if [[ \"$ch\" =~ [AEIOU] ]]; then\n\t\t\tresult=\"$ch\"\n\t\t\tbreak\n\t\tfi\n\
    \tdone\n\t# replace the last blank line with a newline to make the output be correct\n\
    \techo \"$result\" | sed '$a\\'", "\tvowels=\"a e i o u A E I O U\"\n\tfor ((i=${#1}-1;\
    \ i>=0; i--)); do\n\t\tchar=\"${1:$i:1}\"\n\t\tif [[ $vowels =~ $char ]]; then\n\
    \t\t\tif ((i+1<${#1})); then\n\t\t\t\tsubstring=\"${1:$i+1}\"\n\t\t\t\tif [[ !\
    \ $vowels =~ $substring ]]; then\n\t\t\t\t\techo $char\n\t\t\t\t\tbreak\n\t\t\t\
    \tfi\n\t\t\tfi\n\t\tfi\n\tdone", "  local str=$1\n  local l=${#str}\n  local c1=\"\
    [aeiou]\"\n  local c2=\"[^aeiou]\"\n  local i=0\n  local tmp=\"\"\n  for (( i=l-1;\
    \ i>=0; i-- )) ; do\n    local c=${str:$i:1}\n    if [[ $c =~ $c1 ]] ; then\n\
    \      tmp=\"$c$tmp\"\n    elif [[ $c =~ $c2 ]] ; then\n      if [[ -n $tmp ]]\
    \ ; then\n        echo $tmp\n        break\n      fi\n    fi\n  done", "    local\
    \ WORD=$1\n    local VOWELS=\"AaEeIiOoUu\"\n    local CONSONANTS=\"BbCcDdFfGgHhJjKkLlMmNnPpQqRrSsTtVvWwXxYyZz\"\
    \n    local REV_WORD=$(rev <<< \"$WORD\")\n    local FIRST_CONSONANT\n    local\
    \ FIRST_VOWEL\n    local CONSONANT_COUNT=0\n    local VOWEL_COUNT=0\n    local\
    \ ITER=0\n    # loop through string and find first vowel after first consonant\n\
    \    for (( ITER=0; ITER<${#REV_WORD}; ITER++ )); do\n        local CUR_CHAR=${REV_WORD:$ITER:1}\n\
    \        if [[ $VOWELS =~ $CUR_CHAR ]]; then\n            (( VOWEL_COUNT++ ))\n\
    \            if [[ $CONSONANT_COUNT -ne 0 ]]; then\n                FIRST_VOWEL=$CUR_CHAR\n\
    \                break\n            fi\n        elif [[ $CONSONANTS =~ $CUR_CHAR\
    \ ]]; then\n            (( CONSONANT_COUNT++ ))\n            if [[ $CONSONANT_COUNT\
    \ -eq 1 ]]; then\n                FIRST_CONSONANT=$CUR_CHAR\n            fi\n\
    \        fi\n    done\n    # if at least one consonant and one vowel were found\
    \ and consonant was found first\n    if [[ $CONSONANT_COUNT -ne 0 && $VOWEL_COUNT\
    \ -ne 0 && $FIRST_CONSONANT ]]; then\n        echo \"$FIRST_VOWEL\"\n    else\n\
    \        echo \"\"\n    fi", "  is_consonant() { \n    test \"`echo $1 | cut -c\
    \ 1 | grep -E '[BbCcDdFfGgHhJjKkLlMmNnPpQqRrSsTtVvWwXxYyZz]'`\" != \"\"\n  }\n\
    \  is_vowel() { \n    test \"`echo $1 | cut -c 1 | grep -E '[AaEeIiOoUu]'`\" !=\
    \ \"\"\n  }\n  is_capital() { \n    test \"`echo $1 | cut -c 1 | grep -E '[A-Z]'`\"\
    \ != \"\"\n  }\n  to_upper() {\n    echo $1 | tr \"[:lower:]\" \"[:upper:]\"\n\
    \  }\n  while [ -n \"$1\" ]; do\n    curr=`echo $1 | cut -c 1`\n    # echo \"\
    curr: $curr\"\n    case \"$1\" in\n      [!aeiou]* | *[!aeiou]) is_consonant $curr\
    \ && is_consonant `echo $1 | cut -c 2` && \\\n        is_vowel `echo $1 | cut\
    \ -c 3` && echo `is_capital $curr && to_upper $curr || echo $curr` && return 0;;\n\
    \      [aeiou]*) echo \"\" && return 0;;\n    esac\n    shift\n  done", "  local\
    \ word=$1\n  local pattern='[^aeiou]'\n  local vcount=0\n  local ccount=0\n  for\
    \ (( i=$((${#word}-1)); i>=0; i-- )); do\n    if [[ ${word:$i:1} =~ $pattern ]];\
    \ then\n      ((ccount++))\n      if [[ $vcount -gt 0 ]]; then\n        echo \"\
    ${word:$i+1:1}\"\n        break\n      fi\n    else\n      ((vcount++))\n    fi\n\
    \  done", "  local len=$(echo -n $1 | wc -c)\n  local vowels=\"aeiouAEIOU\"\n\
    \  local last=\"\"\n  local i\n  for ((i=len-1; i>=0; i--)); do\n    local c=$(echo\
    \ -n $1 | cut -c $i)\n    # If a consonent is found then check for vowels\n  \
    \  if [[ ! $vowels =~ $c ]]; then\n      for ((j=i-1; j>=0; j--)); do\n      \
    \  local c=$(echo -n $1 | cut -c $j)\n        if [[ $vowels =~ $c ]]; then\n \
    \         echo $c\n          return\n        fi\n      done\n      break\n   \
    \ fi\n  done\n  echo \"\"", "    local current_vowel=\"\"\n    local current_consonant=\"\
    \"\n    local prev_vowel=\"\"\n    local prev_consonant=\"\"\n    local word=\"\
    $1\"\n    local result=\"\"\n    local i=${#word}\n    while [[ $i -gt 0 ]]; do\n\
    \        current_char=${word:$i-1:1}\n        if [[ $current_char =~ [aeiouAEIOU]\
    \ ]]; then\n            current_vowel=$current_char\n        else\n          \
    \  current_consonant=$current_char\n        fi\n        if [[ $prev_vowel != \"\
    \" && $current_consonant != \"\" ]]; then\n            result=$prev_vowel\n  \
    \          break\n        fi\n        if [[ $current_vowel != \"\" ]]; then\n\
    \            prev_vowel=$current_vowel\n        else\n            prev_consonant=$current_consonant\n\
    \        fi\n        i=$((i-1))\n    done\n    echo $result", "    local word=${1:?Word\
    \ is required}\n    local result=\"\"\n    local current_char=\"\"\n    local\
    \ first_char=\"\"\n    local second_char=\"\"\n    local vowel_char=\"\"\n   \
    \ local first_char_is_vowel=0\n    local second_char_is_vowel=0\n    local vowel_char_is_found=0\n\
    \    local vowel_chars=\"aAeEiIoOuU\"\n    local char_index=0\n    local vowel_index=0\n\
    \    local loop_index=0\n    for ((loop_index=${#word}-1; loop_index>0; loop_index--));\
    \ do\n        current_char=${word:loop_index:1}\n        first_char=${word:loop_index-1:1}\n\
    \        second_char=${word:loop_index-2:1}\n        first_char_is_vowel=0\n \
    \       second_char_is_vowel=0\n        vowel_char_is_found=0\n        for ((char_index=0;\
    \ char_index<${#vowel_chars}; char_index++)); do\n            vowel_char=${vowel_chars:char_index:1}\n\
    \            if [[ \"${first_char}\" == \"${vowel_char}\" ]]; then\n         \
    \       first_char_is_vowel=1\n            fi\n            if [[ \"${second_char}\"\
    \ == \"${vowel_char}\" ]]; then\n                second_char_is_vowel=1\n    \
    \        fi\n            if [[ \"${current_char}\" == \"${vowel_char}\" ]]; then\n\
    \                vowel_char_is_found=1\n            fi\n        done\n       \
    \ if [[ ${vowel_char_is_found} -eq 1 && ${first_char_is_vowel} -eq 0 && ${second_char_is_vowel}\
    \ -eq 0 ]]; then\n            result=\"${current_char}\"\n            break\n\
    \        fi\n    done\n    echo \"${result}\"", "\tlocal str=$1\n\tlocal vowels=\"\
    AEIOU\"\n\tlocal backwards_str=`echo ${str} | rev`\n\tfor (( i=0; i<${#backwards_str};\
    \ i++ )); do\n\t\tlocal char=${backwards_str:$i:1}\n\t\tif [[ $vowels =~ $char\
    \ ]]; then\n\t\t\tif [[ $i -eq 0 ]]; then\n\t\t\t\t# If a vowel is found at the\
    \ end of the string,\n\t\t\t\t# there is no valid vowel\n\t\t\t\treturn \"\"\n\
    \t\t\telse\n\t\t\t\t# Found a vowel!\n\t\t\t\tlocal next_char=${backwards_str:$i-1:1}\n\
    \t\t\t\tif [[ ! $vowels =~ $next_char ]]; then\n\t\t\t\t\t# Check that next char\
    \ is not a vowel\n\t\t\t\t\techo $char | rev\n\t\t\t\t\treturn\n\t\t\t\tfi\n\t\
    \t\tfi\n\t\tfi\n\tdone\n\t# No valid vowel found\n\treturn \"\"", '    # TODO:
    Your solution here', "    # replace all char except vowel into a new line\n  \
    \  # cut the string from the end and get the first char\n    # return empty string\
    \ if the last char is vowel\n    echo \"$1\" | sed 's/[^aeiouAEIOU]/\\n/g' | rev\
    \ | sed -n '/^[aeiouAEIOU]/p' | head -1", "    local word=\"$1\"\n    local len=${#word}\n\
    \    local len2=$((len-1))\n    local temp=\"\"\n    for ((i=len2; i>=0; i--));\
    \ do\n        if [ \"${word:$i:1}\" != \"a\" ] && [ \"${word:$i:1}\" != \"e\"\
    \ ] && [ \"${word:$i:1}\" != \"i\" ] && [ \"${word:$i:1}\" != \"o\" ] && [ \"\
    ${word:$i:1}\" != \"u\" ] && [ \"${word:$i:1}\" != \"A\" ] && [ \"${word:$i:1}\"\
    \ != \"E\" ] && [ \"${word:$i:1}\" != \"I\" ] && [ \"${word:$i:1}\" != \"O\" ]\
    \ && [ \"${word:$i:1}\" != \"U\" ]; then\n            temp=\"${word:$i:1}\"\n\
    \            break\n        fi\n    done\n    local res=$temp\n    if [ \"$res\"\
    \ == \"\" ]; then\n        res=\"\"\n    else\n        for ((i=len; i>=0; i--));\
    \ do\n            if [ \"${word:$i:1}\" == \"a\" ] || [ \"${word:$i:1}\" == \"\
    e\" ] || [ \"${word:$i:1}\" == \"i\" ] || [ \"${word:$i:1}\" == \"o\" ] || [ \"\
    ${word:$i:1}\" == \"u\" ] || [ \"${word:$i:1}\" == \"A\" ] || [ \"${word:$i:1}\"\
    \ == \"E\" ] || [ \"${word:$i:1}\" == \"I\" ] || [ \"${word:$i:1}\" == \"O\" ]\
    \ || [ \"${word:$i:1}\" == \"U\" ]; then\n                temp=\"${word:$i:1}\"\
    \n                if [ \"$res\" != \"\" ]; then\n                    res=\"$temp\"\
    \n                    break\n                fi\n            else\n          \
    \      res=\"\"\n            fi\n        done\n    fi\n    echo \"$res\"", " \
    \   local ret=\"\"\n    local word=\"$1\"\n    for (( i=${#word}-1; i>=0; i--\
    \ )); do\n        if [[ \"bcdfghjklmnpqrstvwxyz\" =~ ${word:$i:1} ]]; then\n \
    \           if [[ \"aeiou\" =~ ${word:$((i+1)):1} ]]; then\n                ret=\"\
    ${word:$((i+1)):1}\"\n                break\n            fi\n        fi\n    done\n\
    \    echo $ret", "  echo \"$1\" | rev | grep -o '\\([^aeiou]\\)\\{1\\}[aeiou]\\\
    ([^aeiou]\\)\\{1\\}' | head -1 | rev", "    # String length minus one to be used\
    \ as index\n    str_length=${#1}-1\n    # Vowels\n    VOWELS=\"AEIOU\"\n    #\
    \ Vowels should not be in the beginning of the string\n    while [[ \"${1:$str_length:1}\"\
    \ =~ [$VOWELS] ]]; do\n        str_length=$((str_length-1))\n    done\n    if\
    \ [ \"$str_length\" -lt 0 ]; then\n        # String contains vowels only\n   \
    \     echo \"\"\n    else\n        # String doesn't contain vowels in the beginning\n\
    \        while [[ ! \"${1:$str_length:1}\" =~ [$VOWELS] ]]; do\n            str_length=$((str_length-1))\n\
    \        done\n        # Vowels should not be in the end of the string\n     \
    \   if [ \"$str_length\" -lt 0 ]; then\n            echo \"\"\n        else\n\
    \            # String doesn't contain vowels in the end\n            echo \"${1:$str_length:1}\"\
    \n        fi\n    fi", "  local word=\"$1\"\n  local wordlen=${#word}\n  local\
    \ prev=' '\n  local next=' '\n  local n=0\n  local nvowel=0\n  local closest_vowel=''\n\
    \  local closest_vowel_dist=0\n  # loop through the letters in the string\n  while\
    \ [[ $n -lt $wordlen ]]; do\n    local c=${word:$n:1}\n    if [[ $c =~ [aeiouAEIOU]\
    \ ]]; then\n      if [[ $prev =~ [^aeiouAEIOU] ]] && [[ $next =~ [^aeiouAEIOU]\
    \ ]]; then\n        nvowel=$((nvowel+1))\n        local dist=$((n-wordlen))\n\
    \        local abs_dist=$((-dist))\n        if [[ $nvowel -eq 1 ]]; then\n   \
    \       closest_vowel=\"$c\"\n          closest_vowel_dist=$((abs_dist))\n   \
    \     elif [[ $abs_dist -lt $closest_vowel_dist ]]; then\n          closest_vowel=\"\
    $c\"\n          closest_vowel_dist=$((abs_dist))\n        fi\n      fi\n    fi\n\
    \    prev=\"$c\"\n    n=$((n+1))\n    next=${word:$n:1}\n  done\n  echo \"$closest_vowel\"",
  "  first_occurrence=\"\"\n  counter=${#1}\n  while [[ $counter -gt 0 ]]; do\n  \
    \  current_character=\"${1:$counter-1:1}\"\n    if [[ $current_character =~ [aeiou]\
    \ ]]; then\n      first_occurrence=$current_character\n      counter=0\n    else\n\
    \      counter=$((counter-1))\n    fi\n  done\n  echo $first_occurrence", "  local\
    \ word=$1\n  local i=0\n  local vowels=\"aAeEiIoOuU\"\n  local is_last_char_vowel=false\n\
    \  local is_previous_char_vowel=false\n  local result=\"\"\n  local current_char\n\
    \  local next_char\n  local previous_char\n  local last_char\n  local current_char_is_vowel\n\
    \  local current_char_position\n  local next_char_is_vowel\n  local previous_char_is_vowel\n\
    \  local last_char_is_vowel\n  local next_char_position\n  local previous_char_position\n\
    \  local last_char_position\n  # find the closest vowel from the right side of\
    \ the word\n  for (( i = ${#word} - 1; i >= 0; i-- )); do\n    current_char=\"\
    ${word:$i:1}\"\n    current_char_position=$i\n    current_char_is_vowel=$(contains_element\
    \ $current_char $vowels)\n    if [ $current_char_is_vowel = false ]; then\n  \
    \    next_char_position=$(( $i + 1 ))\n      previous_char_position=$(( $i - 1\
    \ ))\n      last_char_position=$(( ${#word} - 1 ))\n      next_char=\"${word:$next_char_position:1}\"\
    \n      previous_char=\"${word:$previous_char_position:1}\"\n      last_char=\"\
    ${word:$last_char_position:1}\"\n      if [ $i -lt $(( ${#word} - 1 )) ]; then\n\
    \        next_char_is_vowel=$(contains_element $next_char $vowels)\n      fi\n\
    \      if [ $i -gt 0 ]; then\n        previous_char_is_vowel=$(contains_element\
    \ $previous_char $vowels)\n      fi\n      if [ $i -eq $(( ${#word} - 1 )) ];\
    \ then\n        last_char_is_vowel=$(contains_element $last_char $vowels)\n  \
    \    fi\n      if [ $next_", "  string=$1\n  last_char=$(echo $string | sed -n\
    \ '$p')\n  re='[^aeiouAEIOU]'\n  # if last char is a consonant then no need to\
    \ check\n  if [[ $last_char =~ $re ]]; then\n    return\n  fi\n  # remove the\
    \ last character\n  string=${string%?}\n  re='[aeiouAEIOU]'\n  # if last char\
    \ is a vowel and the string length is 1 then no need to check\n  if [[ ! $string\
    \ =~ $re && ${#string} == 1 ]]; then\n    return\n  fi\n  # check from the end\
    \ of the string whether we can find a vowel between two consonants\n  for ((i=${#string};\
    \ i>=0; i--)); do\n    char=$(echo $string | cut -c $i)\n    if [[ $char =~ $re\
    \ ]]; then\n      return\n    fi\n    if [[ $char =~ [^aeiouAEIOU] ]]; then\n\
    \      echo $char\n      return\n    fi\n  done", "  if [ $# -ne 1 ]; then\n \
    \   echo \"Usage: $0 STRING\"\n    return 1\n  fi\n  local STRING=\"$1\"\n  local\
    \ VOWELS=\"aeiouAEIOU\"\n  local VOWEL_LIST=$(echo \"$VOWELS\" | fold -w1)\n \
    \ local CONSONANTS=$(echo \"${VOWEL_LIST}\" | tr -d \"$VOWELS\")\n  local word=$(echo\
    \ \"$STRING\" | rev)\n  local letter\n  local found=0\n  for letter in $(echo\
    \ \"$word\" | fold -w1); do\n    if [[ $found -eq 0 ]]; then\n      if [[ \"$CONSONANTS\"\
    \ =~ \"$letter\" ]]; then\n        found=1\n      fi\n    else\n      if [[ \"\
    $VOWEL_LIST\" =~ \"$letter\" ]]; then\n        echo \"$letter\"\n        break\n\
    \      fi\n    fi\n  done", "    # Code goes here\n    echo \"\"", "    w=$1\n\
    \    for ((i=${#w}-1; i>=0; i--)); do\n        if [[ ${w:$i:1} =~ [aeiou] ]];\
    \ then\n            if [[ $i == ${#w}-1 ]]; then\n                v=${w:$i:1}\n\
    \                break\n            elif [[ ${w:$i-1:1} =~ [^aeiou] ]]; then\n\
    \                v=${w:$i:1}\n                break\n            fi\n        fi\n\
    \    done\n    echo $v", "    if [ -z \"$1\" ]; then\n        echo \"No input\
    \ given\"\n        return 1\n    fi\n    consonants=\"[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\"\
    \n    vowels=\"[aeiouAEIOU]\"\n    word=\"$1\"\n    len=${#word}\n    for (( i=len-1;\
    \ i>0; i-- )); do\n        if [[ ${word:$i:1} =~ $consonants ]]; then\n      \
    \      for (( j=i-1; j>=0; j-- )); do\n                if [[ ${word:$j:1} =~ $vowels\
    \ ]]; then\n                    echo ${word:$j:1}\n                    return\
    \ 0\n                fi\n            done\n        fi\n    done\n    echo \"\"\
    \n    return 0", "  word=$1\n  # Write your code here.\n  # Do not redirect the\
    \ output.\n  for i in {0..4}\n  do\n    for j in {0..4}\n    do\n      for k in\
    \ {0..4}\n      do\n        for l in {0..4}\n        do\n          for m in {0..4}\n\
    \          do\n            if [ $i == 4 ] && [ $j == 4 ] && [ $k == 4 ] && [ $l\
    \ == 4 ] && [ $m == 4 ]\n            then\n              if [ ${word:$i:1} ==\
    \ \"y\" ]\n              then\n                echo ${word:$i:1}\n           \
    \     return\n              fi\n            fi\n            if [ $i == 4 ] &&\
    \ [ $j == 4 ] && [ $k == 4 ] && [ $l == 4 ]\n            then\n              if\
    \ [ ${word:$i:1} == \"u\" ] || [ ${word:$i:1} == \"o\" ] || [ ${word:$i:1} ==\
    \ \"i\" ] || [ ${word:$i:1} == \"e\" ] || [ ${word:$i:1} == \"a\" ]\n        \
    \      then\n                echo ${word:$i:1}\n                return\n     \
    \         fi\n            fi\n            if [ $i == 4 ] && [ $j == 4 ] && [ $k\
    \ == 4 ]\n            then\n              if [ ${word:$i:1} == \"u\" ] || [ ${word:$i:1}\
    \ == \"o\" ] || [ ${word:$i:1} == \"i\" ] || [ ${word:$i:1} == \"e\" ] || [ ${word:$i:1}\
    \ == \"a\" ]\n              then\n                echo ${word:$i:1}\n        \
    \        return\n              fi\n            fi\n            if [ $i == 4 ]\
    \ && [ $j == 4 ]\n            then\n              if [ ${word:$i:1} == \"u\" ]\
    \ || [ ${word:$i:1} == \"o\" ] || [ ${word:$i:1} == \"i\" ] || [ ${word:$i:1}\
    \ == \"e\" ] || [ ${word:", "  local word=$1\n  local vowels=\"AEIOUaeiou\"\n\
    \  local consonants=\"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n  local i=${#word}\n\
    \  local is_vowel=false\n  local is_consonant=false\n  local closest_vowel=\"\"\
    \n  while [[ $i -gt 0 ]]; do\n    # Check if the current character is vowel\n\
    \    if [[ $vowels =~ ${word:$i-1:1} ]]; then\n      is_vowel=true\n    else\n\
    \      is_vowel=false\n    fi\n    # Check if the current character is consonant\n\
    \    if [[ $consonants =~ ${word:$i-1:1} ]]; then\n      is_consonant=true\n \
    \   else\n      is_consonant=false\n    fi\n    # Check if we have already found\
    \ the closest vowel\n    if [[ $is_vowel == true && $is_consonant == true ]];\
    \ then\n      closest_vowel=${word:$i-1:1}\n      break\n    fi\n    i=$((i-1))\n\
    \  done\n  echo $closest_vowel", "  local word=\"$1\"\n  local vowels=\"AaEeIiOoUu\"\
    \n  local c1=\n  local c2=\n  local c3=\n  local char_cnt=$(echo $word | wc -c)\n\
    \  local closest_vowel_index=\n  local i=\n\n  if [ $char_cnt -lt 2 ]; then\n\
    \    echo \"\"\n    return\n  fi\n\n  for ((i=2; i <= $char_cnt; i++)); do\n \
    \   c1=${word: -$i:1}\n    c2=${word: -$((i-1)):1}\n    c3=${word: -$((i-2)):1}\n\
    \    echo \"c1: $c1 c2: $c2 c3: $c3\"\n    if [[ $vowels =~ $c1 ]]; then\n   \
    \   echo \"c1 is vowel\"\n      if [[ ! $vowels =~ $c2 ]]; then\n        echo\
    \ \"c2 is not vowel\"\n        if [[ ! $vowels =~ $c3 ]]; then\n          echo\
    \ \"c3 is not vowel\"\n          closest_vowel_index=$i\n          break\n   \
    \     fi\n      fi\n    fi\n  done\n\n  if [ -z $closest_vowel_index ]; then\n\
    \    echo \"\"\n  else\n    echo \"${word: -$closest_vowel_index:1}\"\n  fi",
  "    word=$1\n    length=${#word}\n    res=''\n    for (( i=$length-1; i>=0; i--\
    \ )); do\n        char=${word:$i:1}\n        if [[ $char =~ [aAeEiIoOuU] ]]; then\n\
    \            res=$char\n            break\n        fi\n    done\n    echo $res",
  "    local word=$1\n    local wlen=${#word}\n    local vfound=0\n    local vcount=0\n\
    \    for (( i=wlen-1; i>=0; i-- )) do\n        c=${word:$i:1}\n        if [[ $c\
    \ =~ [aeiouAEIOU] ]]; then\n            vfound=1\n            (( vcount++ ))\n\
    \        else\n            if [[ $vfound == 1 ]]; then\n                break\n\
    \            fi\n        fi\n    done\n    (( i++ ))\n    if [[ $vcount > 1 ]];\
    \ then\n        echo -n ${word:$i:1}\n    else\n        echo -n ''\n    fi", " \
    \ # get the length of the string\n  # use awk '{print length}' or ${#str}\n  #\
    \ or use expr length or expr ${#str}\n  # or use awk -v a=\"$str\" 'BEGIN{print\
    \ length(a)}'\n  local str_len=$(expr length \"$1\")\n  # loop from length to\
    \ 1\n  for ((i=$str_len; i>=1; i--)); do\n    # get the character at position\
    \ i\n    # use awk -v a=\"$i\" 'BEGIN{print substr(\"'$1'\", a, 1)}'\n    # or\
    \ use expr substr str i i\n    # or use awk '{print substr(\"'$1'\", \"'$i'\"\
    , 1)}'\n    # or use echo \"${str:i-1:1}\"\n    local letter=$(expr substr \"\
    $1\" \"$i\" 1)\n    # check if the letter is a vowel\n    if [[ \"$letter\" =~\
    \ ^[aeiou]$ ]]; then\n      # reverse the string\n      # use rev\n      # or\
    \ use echo \"${str:i-1:1}\"\n      local reverse_str=$(rev <<<\"$1\")\n      #\
    \ get the character before the vowel\n      # use awk -v a=\"$i\" 'BEGIN{print\
    \ substr(\"'$reverse_str'\", a-1, 1)}'\n      # or use echo \"${reverse_str:i-2:1}\"\
    \n      local letter_before=$(expr substr \"$reverse_str\" \"$i\" 1)\n      #\
    \ check if the character before the vowel is a consonant\n      if [[ \"$letter_before\"\
    \ =~ ^[^aeiou]$ ]]; then\n        # get the character after the vowel\n      \
    \  # use awk -v a=\"$i\" 'BEGIN{print substr(\"'$reverse_str'\", a+1, 1)}'\n \
    \       # or use echo \"${reverse_str:i:1}\"\n        local letter_after=$(expr\
    \ substr \"$reverse_str\" \"$((i+1))\" 1)\n        # check if the character after\
    \ the vowel is a consonant\n        if [[ \"$letter_after\" =~ ^[^aeiou]", "\t\
    if [[ ${#1} -le 1 ]]; then\n\t\techo \"\"\n\t\treturn\n\tfi\n\tvowels=(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n\ts=${1: -2:1}\n\tc=${1:\
    \ -1:1}\n\tfor v in ${vowels[@]}; do\n\t\tif [[ $v == $s ]]; then\n\t\t\techo\
    \ $s\n\t\t\treturn\n\t\tfi\n\tdone\n\techo $(get_closest_vowel ${1::-1})", " \
    \ local word=$1\n  local len=${#word}\n  local i=1\n  local prev_is_vowel=0\n\
    \  local next_is_vowel=0\n  local chr\n  local vowel_chr\n  while [ $i -lt $len\
    \ ]; do\n    chr=${word:$i:1}\n    next_is_vowel=0\n    case $chr in\n      a|e|i|o|u|A|E|I|O|U)\n\
    \        next_is_vowel=1\n        vowel_chr=$chr\n        ;;\n    esac\n    if\
    \ [ $prev_is_vowel -eq 0 ] && [ $next_is_vowel -eq 1 ]; then\n      echo \"$vowel_chr\"\
    \n      return\n    fi\n    prev_is_vowel=$next_is_vowel\n    let i+=1\n  done\n\
    \  echo \"\"", "  word=$1\n  vowel_list=$(echo $word | grep -o \"[aeiouAEIOU]\"\
    \ | sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n//g')\n  for (( i=0; i<${#word}; i++\
    \ )); do\n    char=${word:i:1}\n    prev_char=${word:i-1:1}\n    if [[ $char =~\
    \ [aeiouAEIOU] ]]; then\n      if [[ $prev_char =~ [aeiouAEIOU] ]]; then\n   \
    \     continue\n      fi\n      next_char=${word:i+1:1}\n      if [[ $next_char\
    \ =~ [aeiouAEIOU] ]]; then\n        continue\n      fi\n      echo $char\n   \
    \   return\n    fi\n  done\n  echo \"\"", "  local string=$1;\n  local i=$(expr\
    \ ${#string} - 1);\n  while [ $i -ge 0 ]; do\n    if [ $(is_vowel ${string:$i:1})\
    \ -eq 1 ]; then\n      return $(echo ${string:$i:1});\n    fi\n    ((i--));\n\
    \  done\n  return $(echo \"\");", "    vowels=(\"a\" \"e\" \"i\" \"o\" \"u\" \"\
    A\" \"E\" \"I\" \"O\" \"U\")\n    vowels_len=${#vowels[@]}\n    word=$1\n    for\
    \ (( i=${#word}-1; i>0; i-- )); do\n        char=${word:$i:1}\n        for ((\
    \ j=0; j<vowels_len; j++ )); do\n            if [ \"$char\" == \"${vowels[$j]}\"\
    \ ]; then\n                char_previous=${word:$i-1:1}\n                for ((\
    \ k=0; k<vowels_len; k++ )); do\n                    if [ \"$char_previous\" ==\
    \ \"${vowels[$k]}\" ]; then\n                        break 2\n               \
    \     fi\n                done\n                char_next=${word:$i+1:1}\n   \
    \             for (( k=0; k<vowels_len; k++ )); do\n                    if [ \"\
    $char_next\" == \"${vowels[$k]}\" ]; then\n                        break 2\n \
    \                   fi\n                done\n                echo $char\n   \
    \             return\n            fi\n        done\n    done\n    echo \"\"",
  "    local s=$1\n    local l=$(echo $s | rev)\n    local i=0\n    local c=0\n  \
    \  local v=0\n    local v_pos=0\n    local c_pos=0\n    local r=\"\"\n    for\
    \ ((i=0; i<${#l}; i++)); do\n        if [[ \"${l:$i:1}\" =~ ^[aeiou]$ ]]; then\n\
    \            if [[ $v -eq 0 ]]; then\n                v=1\n                v_pos=$i\n\
    \            fi\n        else\n            if [[ $v -eq 1 ]]; then\n         \
    \       c=1\n                c_pos=$i\n                break\n            fi\n\
    \        fi\n    done\n    if [[ $c -eq 1 ]]; then\n        for ((i=c_pos; i<${#l};\
    \ i++)); do\n            if [[ \"${l:$i:1}\" =~ ^[aeiou]$ ]]; then\n         \
    \       r=${l:$i:1}\n                break\n            fi\n        done\n   \
    \ fi\n    echo \"$r\"", "\tword=$1\n\tlen=$((${#word} - 1))\n\tfor ((i=len; i\
    \ >= 0; i--)); do\n\t\tchar=${word:$i:1}\n\t\tif [[ $char =~ [^aeiouAEIOU] ]];\
    \ then\n\t\t\techo -n $(get_next_vowel $word $i)\n\t\t\tbreak\n\t\tfi\n\tdone",
  "    local str=$1\n    local vowels=\"[AEIOUaeiou]\"\n    local pattern=$(printf\
    \ '\\(.\\+\\)\\(%s\\+\\)\\(%s\\)' $vowels $vowels)\n    if [[ $str =~ $pattern\
    \ ]]; then\n        printf '%s' \"${BASH_REMATCH[3]}\"\n    else\n        printf\
    \ ''\n    fi", "\t", "    local string=\"$1\"\n    local i\n    local vowel_list=\"\
    aeiouAEIOU\"\n    local vowel\n    local vowel_pos\n    local closest_vowel\n\
    \    local closest_vowel_pos\n    local closest_vowel_dist\n    local rev_string\n\
    \    local rev_i\n    local rev_consonant_pos\n\n    if [[ -z $string ]]; then\n\
    \        echo \"\"\n        return\n    fi\n\n    closest_vowel_dist=1000\n  \
    \  closest_vowel_pos=0\n    rev_string=\"$(rev <<< \"$string\")\"\n    for ((i=0;\
    \ i<${#string}; i++)); do\n        vowel=\"${string:$i:1}\"\n        if [[ ${vowel_list}\
    \ =~ $vowel ]]; then\n            vowel_pos=$((i+1))\n            for ((rev_i=0;\
    \ rev_i<${#rev_string}; rev_i++)); do\n                if [[ ! ${vowel_list} =~\
    \ ${rev_string:$rev_i:1} ]]; then\n                    rev_consonant_pos=$((rev_i+1))\n\
    \                    break\n                fi\n            done\n           \
    \ if [[ $rev_consonant_pos -eq 0 ]]; then\n                continue\n        \
    \    fi\n            if [[ $((rev_consonant_pos+vowel_pos)) -lt $closest_vowel_dist\
    \ ]]; then\n                closest_vowel_dist=$((rev_consonant_pos+vowel_pos))\n\
    \                closest_vowel_pos=$i\n            fi\n        fi\n    done\n\n\
    \    if [[ $closest_vowel_pos -eq 0 ]]; then\n        echo \"\"\n    else\n  \
    \      echo \"${string:$closest_vowel_pos:1}\"\n    fi", "  local str=\"$1\"\n\
    \  local vowels=\"aeiouAEIOU\"\n  local found_vowel=\"\"\n  local closest_vowel=\"\
    \"\n  local closest_vowel_index=${#str}\n  local index=${#str}\n\n  while [ $index\
    \ -ge 0 ]; do\n    local char=${str:$index:1}\n    if [[ $vowels =~ $char ]];\
    \ then\n      found_vowel=$char\n    else\n      if [ ! -z \"$found_vowel\" ];\
    \ then\n        if [ $((index + 1)) -lt $closest_vowel_index ]; then\n       \
    \   closest_vowel=$found_vowel\n          closest_vowel_index=$((index + 1))\n\
    \        fi\n        found_vowel=\"\"\n      fi\n    fi\n    index=$((index -\
    \ 1))\n  done\n\n  echo $closest_vowel", "    str=$1\n    vowel=(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n    for ((i=${#str}-1; i >= 0;\
    \ i--)); do\n        for c in ${vowel[@]}; do\n            if [[ ${str:$i:1} ==\
    \ $c ]]; then\n                if [[ $i == ${#str}-1 ]]; then\n              \
    \      echo \"\"\n                    return\n                fi\n           \
    \     if [[ ${str:$((i+1)):1} =~ [bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\
    \ ]]; then\n                    echo \"${str:$i:1}\"\n                    return\n\
    \                fi\n            fi\n        done\n    done\n    echo \"\"", " \
    \   local word=$1\n    local start=${word##*[^aeiouAEIOU]}\n    local end=${word%%[^aeiouAEIOU]*}\n\
    \    echo ${start:0:1}", "    # your code is here\n    #echo ${1//[^aeiou]/}\n\
    \    str=${1,,}\n    str_rev=`echo $str | rev`\n    for i in {0..${#str_rev}};\
    \ do\n        ch=${str_rev:$i:1}\n        if [[ \"$ch\" == \"a\" || \"$ch\" ==\
    \ \"e\" || \"$ch\" == \"i\" || \"$ch\" == \"o\" || \"$ch\" == \"u\" ]]; then\n\
    \            echo \"$ch\"\n            return\n        fi\n    done\n    return",
  "    local vowels='aeiouAEIOU'\n    local word=$1\n    local word_len=${#word}\n\
    \    local closest_vowel=''\n    local last_consonant_index=0\n    for ((i=word_len-1;\
    \ i>=0; i--)); do\n        if [[ $vowels == *${word:$i:1}* ]]; then\n        \
    \    closest_vowel=${word:$i:1}\n            break\n        else\n           \
    \ last_consonant_index=$i\n        fi\n    done\n    local j=$i\n    while ((j>=0));\
    \ do\n        if [[ $vowels == *${word:$j:1}* ]]; then\n            j=$j-1\n \
    \       else\n            break\n        fi\n    done\n    if (($j+1 == $last_consonant_index));\
    \ then\n        echo $closest_vowel\n    else\n        echo ''\n    fi", "   \
    \ local string=\"$1\"\n    local tmp=\"\"\n    local result=\"\"\n    local i=0\n\
    \    for (( i=0; i<${#string}; i++ )); do\n        if [[ $string == *\"${string:$i:1}\"\
    * ]]; then\n            tmp=\"${tmp}${string:$i:1}\"\n        fi\n    done\n \
    \   for (( i=0; i<${#tmp}; i++ )); do\n        if [[ ${tmp:$i:1} =~ [aeiou] ]];\
    \ then\n            break\n        fi\n    done\n    if [[ $i -gt ${#tmp} ]];\
    \ then\n        result=\"\"\n    else\n        result=\"${tmp:$i:1}\"\n    fi\n\
    \    echo \"$result\"", "  local s=\"$1\"\n  local r=\"\"\n  local i=0\n  for\
    \ (( i = ${#s} - 1; i >= 0; i-- )); do\n    r=\"${s:$i:1}\"\n    if [[ $r =~ [aeiou]\
    \ ]]; then\n      if [ $i -eq ${#s} - 1 ]; then\n        echo \"\"\n        break\n\
    \      else\n        echo \"$r\"\n        break\n      fi\n    elif [[ $r =~ [bcdfghjklmnpqrstvwxyz]\
    \ ]]; then\n      echo \"\"\n      break\n    fi\n  done", "    local word=$1\n\
    \    local word_rev=`rev <<<\"$word\"`\n    local is_vowel=`echo {a..z} {A..Z}\
    \ | grep \"[$1]\"`\n    local is_not_vowel=`echo {b..z} {B..Z} | grep \"[$1]\"\
    `\n    local length=${#word}\n    local length_without_vowel=`echo ${#word} -\
    \ 1 | bc`\n    if [[ $length -eq 0 ]]; then\n\techo \"\"\n    elif [[ $is_vowel\
    \ ]]; then\n\tfor i in $(seq 1 $length_without_vowel); do\n\t    local letter_rev=`echo\
    \ \"$word_rev\" | cut -c$i`\n\t    local letter=`rev <<<\"$letter_rev\"`\n\t \
    \   if [[ $is_not_vowel ]]; then\n\t\tlocal word_1=`echo \"$word\" | cut -c$i-$length`\n\
    \t\tlocal check_for_vowel=`echo $word_1 | grep \"[aeiouAEIOU]\"`\n\t\tif [[ $check_for_vowel\
    \ ]]; then\n\t\t    echo $check_for_vowel\n\t\t    break\n\t\tfi\n\t    fi\n\t\
    done\n    fi", "    local word=\"$1\"\n    local found=0\n    for (( i=${#word}-1;\
    \ i>=0; i-- )); do\n        if [[ \"${word:$i:1}\" =~ [^aeiouAEIOU] ]]; then\n\
    \            found=1\n        elif [[ \"${word:$i:1}\" =~ [aeiouAEIOU] ]] && [[\
    \ $found == 1 ]]; then\n            echo \"${word:$i:1}\"\n            return\n\
    \        fi\n    done\n    echo \"\"", "    local word=\"$1\"\n    local word_len=${#word}\n\
    \    local VOWELS=\"a,A,e,E,i,I,o,O,u,U\"\n    local COUNT=0\n    local CLOSEST_VOWEL=\"\
    \"\n    local CLOSEST_VOWEL_IDX=0\n    local CLOSEST_DISTANCE=0\n    local i=0\n\
    \    # For every letter in the word, starting from the second letter\n    for\
    \ (( i=1; i<$word_len; i++ ))\n    do\n        # If this letter is a vowel\n \
    \       if [[ $VOWELS =~ \"${word:$i:1}\" ]]\n        then\n            # If this\
    \ is not the first vowel we find in the word,\n            # and the distance\
    \ from this vowel to the previous one\n            # is smaller than the distance\
    \ from the previous vowel to\n            # the previous one, then this new vowel\
    \ is the closest\n            # to the previous one\n            if [ $COUNT -gt\
    \ 0 ] && [ $i -lt $CLOSEST_DISTANCE ]\n            then\n                CLOSEST_VOWEL=\"\
    ${word:$i:1}\"\n                CLOSEST_VOWEL_IDX=$i\n                CLOSEST_DISTANCE=$i\n\
    \            fi\n            # If this is the first vowel we find in the word,\
    \ then\n            # update the indices to this vowel\n            if [ $COUNT\
    \ -eq 0 ]\n            then\n                CLOSEST_VOWEL=\"${word:$i:1}\"\n\
    \                CLOSEST_VOWEL_IDX=$i\n                CLOSEST_DISTANCE=$i\n \
    \           fi\n            # Increment the count of vowel we find\n         \
    \   ((COUNT++))\n        fi\n    done\n    # If the closest vowel is found in\
    \ between two consonants, then print\n    # it, else print empty string\n    if\
    \ [ $CLOSEST_VOWEL_IDX -gt 0 ] && [ $CLOSEST_VOWEL_IDX -lt $word_len ]\n    then\n\
    \        if [[ $VOWELS =~ \"${word:$((CLOSEST_VOWEL_IDX - 1)):1", '  # write your
    code here', "    local VALID_VOWELS=\"[AEIOUaeiou]\"\n    local CONSONANTS=\"\
    [BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz]\"\n    local INPUT_WORD=$1\n    local\
    \ FIRST_CONSONANT_IDX=$((${#INPUT_WORD}-1))\n    local LAST_CONSONANT_IDX=0\n\
    \    local VOWEL_IDX=0\n    local START_IDX=0\n    local END_IDX=0\n    local\
    \ FIRST_VOWEL_IDX=0\n    local SECOND_VOWEL_IDX=0\n    local first_word_length=$((${#INPUT_WORD}-1))\n\
    \    local second_word_length=$((${#INPUT_WORD}-1))\n    local CLOSEST_VOWEL=''\n\
    \    local VOWEL_DISTANCE=0\n    local TEMP_DISTANCE=0\n    for (( c=first_word_length;\
    \ c>=0; c-- ))\n    do\n        if [[ \"${INPUT_WORD:$c:1}\" =~ $CONSONANTS ]]\n\
    \        then\n            FIRST_CONSONANT_IDX=$c\n            break\n       \
    \ fi\n    done\n    for (( d=0; d<=second_word_length; d++ ))\n    do\n      \
    \  if [[ \"${INPUT_WORD:$d:1}\" =~ $CONSONANTS ]]\n        then\n            LAST_CONSONANT_IDX=$d\n\
    \            break\n        fi\n    done\n    START_IDX=$(($FIRST_CONSONANT_IDX+1))\n\
    \    END_IDX=$(($LAST_CONSONANT_IDX-1))\n    for (( e=START_IDX; e<=END_IDX; e++\
    \ ))\n    do\n        if [[ \"${INPUT_WORD:$e:1}\" =~ $VALID_VOWELS ]]\n     \
    \   then\n            FIRST_VOWEL_IDX=$e\n            break\n        fi\n    done\n\
    \    for (( f=END_", "  # -------------\n  # Your code here\n  # -------------",
  "    if [[ \"$1\" == \"\" ]]; then\n        echo \"\"\n        return\n    fi\n\
    \    local word=$1\n    local new_word=\"\"\n    for (( i=${#word}-1; i>=0; i--\
    \ )); do\n        local c=${word:$i:1}\n        if [[ \"$c\" == [^aeiouAEIOU]\
    \ ]]; then\n            new_word=\"$c$new_word\"\n        else\n            echo\
    \ \"$c\"\n            return\n        fi\n    done\n    echo \"\"", "  local str=\"\
    $1\"\n  local vowels=(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")\n  local found_vowel\n  local last_consonant\n  local counter\n\n  counter=$((${#str}\
    \ - 1))\n  while [[ $counter -ge 0 ]]; do\n    [[ \"${vowels[@]}\" =~ \"${str:$counter:1}\"\
    \ ]] && found_vowel=\"true\"\n    [[ ! \"${vowels[@]}\" =~ \"${str:$counter:1}\"\
    \ ]] && [[ -z \"$last_consonant\" ]] && last_consonant=\"true\"\n\n    if [[ \"\
    $found_vowel\" == \"true\" ]] && [[ \"$last_consonant\" == \"true\" ]]; then\n\
    \      echo \"${str:$counter:1}\"\n      return\n    fi\n\n    [[ \"${vowels[@]}\"\
    \ =~ \"${str:$counter:1}\" ]] && found_vowel=\"\"\n    [[ ! \"${vowels[@]}\" =~\
    \ \"${str:$counter:1}\" ]] && last_consonant=\"\"\n    counter=$((counter - 1))\n\
    \  done", "\tlocal word=$1\n\tlocal word_len=${#word}\n\tlocal result\n\tfor ((i=$word_len-1;\
    \ i>0; i--)); do\n\t\tlocal c=${word:$i:1}\n\t\tif [[ \"$c\" =~ [aeiouAEIOU] ]];\
    \ then\n\t\t\tresult=\"$c\"\n\t\t\tbreak\n\t\tfi\n\tdone\n\techo \"$result\"",
  "  # Let's check whether our arguments variable is empty\n  if [ -z \"${1}\" ];\
    \ then\n    echo \"Empty string.\"\n    exit 1\n  fi\n  # Remove all vowels from\
    \ the string and then turn a string in a list of letters\n  # Then we'll reverse\
    \ it and return a new list of strings\n  consonants=( $(echo ${1} | sed -e 's/[aeiouAEIOU]//g'\
    \ | fold -w1 | rev) )\n  # Let's save a length of our list\n  count=${#consonants[@]}\n\
    \  # Let's go through the list and return a first encountered vowel\n  for ((\
    \ i=0; i<=${count}; i++ )); do\n    case ${consonants[$i]} in\n      [aeiouAEIOU])\n\
    \        # We've got it! Let's return this vowel\n        echo ${consonants[$i]}\n\
    \        exit 0\n        ;;\n    esac\n  done\n  # If we're here, it means that\
    \ we didn't find any vowel between two consonants\n  echo \"\"", "    local word=\"\
    $1\"\n    local closest_vowel=\"\"\n    local number_of_consonants_found=0\n \
    \   local last_letter_is_vowel=0\n    local rindex=${#word}\n    local len=${#word}\n\
    \    local vowel\n\n    # are there any vowels?\n    # FIXME - bash regular expressions\
    \ are not POSIX\n    [[ \"$word\" =~ [aeiouAEIOU] ]] && return \"\"\n\n    for\
    \ (( i=$len; i>=0; i-- )) ; do\n        vowel=\"${word:$i:1}\"\n        #echo\
    \ -n \"$vowel \"\n        if [[ \"$vowel\" =~ [aeiouAEIOU] ]] ; then\n       \
    \     if [[ $last_letter_is_vowel -eq 1 ]] ; then\n                number_of_consonants_found=0\n\
    \            fi\n            number_of_consonants_found=$((number_of_consonants_found+1))\n\
    \            last_letter_is_vowel=1\n        else\n            last_letter_is_vowel=0\n\
    \        fi\n        if [[ $number_of_consonants_found -eq 2 ]] ; then\n     \
    \       closest_vowel=\"$vowel\"\n            break\n        fi\n    done\n  \
    \  echo \"$closest_vowel\"", "    local word=\"$1\"\n    # Write your solution\
    \ here\n    echo", '    # TODO: write your solution here', "  # your code starts\
    \ here\n  return", "  # last consonant index, -1 if not found\n  last_consonant_index=-1\n\
    \  last_vowel_index=-1\n  for (( c=${#1}-1; c>=0; c-- )) do\n    if [[ \"${1:$c:1}\"\
    \ =~ [aeiou] ]]; then\n      last_vowel_index=$c\n    fi\n    if [[ \"${1:$c:1}\"\
    \ =~ [^aeiou] ]]; then\n      last_consonant_index=$c\n      break\n    fi\n \
    \ done\n  if [[ $last_consonant_index -ge 0 && $last_vowel_index -ge 0 && $last_consonant_index\
    \ -lt $last_vowel_index ]]; then\n    echo \"${1:$last_vowel_index:1}\"\n  else\n\
    \    echo \"\"\n  fi", "    for ((i=$((${#1}-1)); i>=0; i--)); do\n        case\
    \ ${1:$i:1} in\n            [[:alpha:]])\n                [[ ${1:$i:1} =~ [aeiou]\
    \ ]] && {\n                    echo ${1:$i:1}\n                    return\n  \
    \              }\n                ;;\n            *)\n                break\n\
    \                ;;\n        esac\n    done\n    echo ''", "    if [[ ! $1 =~\
    \ [aeiou] ]]; then\n        echo \"\"\n        return\n    fi\n    str=$1\n  \
    \  if [[ $str =~ ([^aeiou][aeiou].*[^aeiou]) ]]; then\n        result=${BASH_REMATCH[1]}\n\
    \        echo \"${result: -1}\"\n    else\n        echo \"\"\n    fi", "  declare\
    \ -a not_vowels=(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"\
    n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")\n  declare -a\
    \ vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n  declare -a char_array=($(echo $1 |\
    \ grep -o .))\n  declare -a rev_char_array=($(echo $1 | grep -o . | tac -s ''))\n\
    \  #find the closest vowel to the right of the word\n  declare -a closest_vowel\n\
    \  #find the closest consonant to the left of the word\n  declare -a closest_consonant\n\
    \  for ((i=0; i<${#rev_char_array[@]}; i++)); do\n    for ((j=0; j<${#vowels[@]};\
    \ j++)); do\n      if [[ ${rev_char_array[$i]} == ${vowels[$j]} ]]; then\n   \
    \     closest_vowel=(${vowels[$j]})\n        break\n      fi\n    done\n    for\
    \ ((j=0; j<${#not_vowels[@]}; j++)); do\n      if [[ ${rev_char_array[$i]} ==\
    \ ${not_vowels[$j]} ]]; then\n        closest_consonant=(${not_vowels[$j]})\n\
    \        break\n      fi\n    done\n    if [[ ${#closest_vowel[@]} -ne 0 && ${#closest_consonant[@]}\
    \ -ne 0 ]]; then\n      break\n    fi\n  done\n  if [[ ${#closest_vowel[@]} -eq\
    \ 0 || ${#closest_consonant[@]} -eq 0 ]]; then\n    echo \"\"\n  else\n    for\
    \ ((i=0; i<${#char_array[@]}; i++)); do\n      if [[ ${char_array[$i]} == ${closest_vowel[0]}\
    \ ]", "    local word=$1\n    local right_side=${word%?}\n    local vowel=$(echo\
    \ \"$right_side\" | sed -n 's/.*\\([aeiouAEIOU]\\).*/\\1/p')\n    echo \"$vowel\"",
  "    local word=$1\n    local word_len=${#word}\n    local letter\n    local vowel_pos\n\
    \n    # Find vowels\n    for (( pos=word_len-1; pos>=0; pos-- ))\n    do\n   \
    \     letter=${word:$pos:1}\n        if [[ $letter =~ [[:alpha:]] ]]\n       \
    \ then\n            if [[ $letter =~ [[:lower:]] ]]\n            then\n      \
    \          if [[ $letter =~ [aeiou] ]]\n                then\n               \
    \     vowel_pos=$pos\n                    break\n                fi\n        \
    \    else\n                if [[ $letter =~ [AEIOU] ]]\n                then\n\
    \                    vowel_pos=$pos\n                    break\n             \
    \   fi\n            fi\n        fi\n    done\n\n    # Find the closest one\n \
    \   if [[ -n $vowel_pos ]]\n    then\n        for (( pos=vowel_pos-1; pos>=0;\
    \ pos-- ))\n        do\n            letter=${word:$pos:1}\n            if [[ $letter\
    \ =~ [[:alpha:]] ]]\n            then\n                if [[ $letter =~ [[:lower:]]\
    \ ]]\n                then\n                    if [[ ! $letter =~ [aeiou] ]]\n\
    \                    then\n                        echo ${word:$vowel_pos:1}\n\
    \                        return\n                    fi\n                else\n\
    \                    if [[ ! $letter =~ [AEIOU] ]]\n                    then\n\
    \                        echo ${word:$vowel_pos:1}\n                        return\n\
    \                    fi\n                fi\n            fi\n        done\n  \
    \  fi\n\n    echo \"\"", "    echo $1 | awk '{\n        match($0, /[^aeiouAEIOU]*/)\
    \ \n        start = RSTART\n        length = RLENGTH\n        print substr($0,length)\n\
    \    }' | awk '{\n        match($0, /[aeiouAEIOU][^aeiouAEIOU]*/)\n        if\
    \ (RSTART) {\n            print substr($0, RSTART, RLENGTH)\n        } else {\n\
    \            print \"\"\n        }\n    }'", "  if [ -z \"$1\" ]; then\n    return\
    \ 1\n  fi\n  count=${#1}\n  i=0\n  result=\"\"\n  while [ $i -lt $count ]; do\n\
    \    char=${1:$i:1}\n    if [ \"$char\" == \"a\" ] || [ \"$char\" == \"e\" ] ||\
    \ [ \"$char\" == \"i\" ] || [ \"$char\" == \"o\" ] || [ \"$char\" == \"u\" ] ||\
    \ [ \"$char\" == \"A\" ] || [ \"$char\" == \"E\" ] || [ \"$char\" == \"I\" ] ||\
    \ [ \"$char\" == \"O\" ] || [ \"$char\" == \"U\" ]; then\n      if [ \"$result\"\
    \ != \"\" ]; then\n        break\n      fi\n      if [ $i -gt 0 ]; then\n    \
    \    prev=${1:$i-1:1}\n        if [ \"$prev\" != \"a\" ] && [ \"$prev\" != \"\
    e\" ] && [ \"$prev\" != \"i\" ] && [ \"$prev\" != \"o\" ] && [ \"$prev\" != \"\
    u\" ] && [ \"$prev\" != \"A\" ] && [ \"$prev\" != \"E\" ] && [ \"$prev\" != \"\
    I\" ] && [ \"$prev\" != \"O\" ] && [ \"$prev\" != \"U\" ]; then\n          result=$char\n\
    \        fi\n      fi\n    else\n      if [ \"$result\" != \"\" ]; then\n    \
    \    next=${1:$i+1:1}\n        if [ \"$next\" != \"a\" ] && [ \"$next\" != \"\
    e\" ] && [ \"$next\" != \"i\" ] && [ \"$next\" != \"o\" ] && [ \"$next\" != \"\
    u\" ] && [ \"$next\" != \"A\" ] && [ \"$next\" != \"E\" ] && [ \"$next\" != \"\
    I\" ] && [ \"$next\" != \"O\" ] && [ \"$next\" != \"U\" ]; then\n          break\n\
    \        fi\n      fi\n    fi\n    i=$((i+1))\n  done\n  echo $result", "  local\
    \ str=\"$1\"\n  local vowels=\"aAeEiIoOuU\"\n  local consonants=\"bBcCdDfFgGhHjJkKlLmMnNpPqQrRsStTvVwWxXyYzZ\"\
    \n  local i\n  local j\n  local k\n  for i in `seq ${#str}`; do\n    for j in\
    \ `seq ${#consonants}`; do\n      if [ \"${str: -$i:1}\" == \"${consonants:$j-1:1}\"\
    \ ]; then\n        for k in `seq ${#vowels}`; do\n          if [ \"${str: -$i-1:1}\"\
    \ == \"${vowels:$k-1:1}\" ]; then\n            echo \"${str: -$i-1:1}\"\n    \
    \        return\n          fi\n        done\n      fi\n    done\n  done\n  echo\
    \ \"\"", "    # Complete the function\n    string=$1\n    string=$(echo $string\
    \ | rev)\n    flag=0\n    for (( i=0; i<${#string}; i++ )); do\n        ascii=$(printf\
    \ \"%d\" \"'${string:$i:1}\")\n        if [[ $ascii -ge 65 && $ascii -le 90 ]];\
    \ then\n            ascii=$((ascii+32))\n        fi\n        if [[ $ascii -ge\
    \ 97 && $ascii -le 122 ]]; then\n            if [[ $ascii == 97 || $ascii == 101\
    \ || $ascii == 105 || $ascii == 111 || $ascii == 117 ]]; then\n              \
    \  if [[ $flag == 1 ]]; then\n                    char=$(printf \"\\x$(printf\
    \ %x $ascii)\")\n                    break\n                fi\n            else\n\
    \                flag=1\n            fi\n        fi\n    done\n    if [[ $flag\
    \ == 0 ]]; then\n        char=\"\"\n    fi\n    echo $char", "  _p=$1\n  # Write\
    \ your code here.\n  # u, e, o, a\n  # 10, 9, 8, 7\n  # 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1, 0\n  # CASE=`echo ${_p} | awk '{print toupper($0)}'`\n  _s=`echo ${_p} |\
    \ sed 's/[aeiouAEIOU]//g'`\n  _len=`echo ${_s} | wc -c`\n  echo $_len\n  if [[\
    \ ${_len} -eq `echo ${_p} | wc -c` ]]; then\n    echo \"\"\n    return\n  fi\n\
    \  # echo ${_s}\n  IFS=' '\n  _lst=($_s)\n  # for i in ${_lst[@]}; do\n  #   echo\
    \ $i\n  # done\n  for i in `seq 0 $((_len-1))`; do\n    # echo $_len\n    # echo\
    \ $i\n    _tmp=`echo ${_lst[${i}]}`\n    # echo $_tmp\n    # echo $((_len-1-i))\n\
    \    if [[ ${_tmp} == '0' ]]; then\n      continue\n    fi\n    _tmp2=`echo ${_lst[$((_len-1-i))]}`\n\
    \    # echo $_tmp2\n    if [[ ${_tmp2} == '0' ]]; then\n      continue\n    fi\n\
    \    _pos=`echo ${_p} | awk -v b=${_tmp} -v e=${_tmp2} 'BEGIN{print index($0,\
    \ b)}'`\n    # echo $_pos\n    echo ${_p:$((_pos+1)):1}\n    break\n  done", " \
    \ word=$1\n  length=${#word}\n  for ((i=0; i<$length; i++)); do\n    char=\"${word:$i:1}\"\
    \n    if [ \"${char,,}\" == \"a\" ] || [ \"${char,,}\" == \"e\" ] || [ \"${char,,}\"\
    \ == \"i\" ] || [ \"${char,,}\" == \"o\" ] || [ \"${char,,}\" == \"u\" ]; then\n\
    \      current=$char\n      if [ -z \"${word:$i-1:1}\" ] || [ \"${word:$i-1:1}\"\
    \ == \" \" ]; then\n        continue\n      fi\n      if [ -z \"${word:$i+1:1}\"\
    \ ] || [ \"${word:$i+1:1}\" == \" \" ]; then\n        continue\n      fi\n   \
    \   if [ \"${word:$i-1:1}\" == \"${word:$i-1:1,,}\" ] && [ \"${word:$i+1:1}\"\
    \ == \"${word:$i+1:1,,}\" ]; then\n        if [ ! -z \"$current\" ]; then\n  \
    \        echo $current\n          break\n        fi\n      fi\n    fi\n  done",
  "  # Define an array of vowels\n  VOWELS=(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")\n  # Define an empty array to store consonants found in\
    \ the word\n  CONSONANTS=()\n  # Iterate through the string backwards\n  for ((\
    \ i=$((${#1}-1)); i>=0; i-- )); do\n    # Check if the letter is a vowel\n   \
    \ if [[ ${VOWELS[*]} =~ ${1:$i:1} ]]; then\n      # If letter is a vowel, check\
    \ if there is at least 1 consonant in the array\n      if [ ${#CONSONANTS[@]}\
    \ -gt 0 ]; then\n        # If there is at least 1 consonant in the array, return\
    \ the vowel\n        printf \"${1:$i:1}\"\n        return\n      fi\n    else\n\
    \      # If letter is not a vowel, store it in the array\n      CONSONANTS+=(${1:$i:1})\n\
    \    fi\n  done\n  # If no vowel is found between 2 consonants, return an empty\
    \ string\n  printf \"\"", "  # Write your code here\n  word=$1\n  if [[ $word\
    \ == \"\" ]]; then\n    echo \"\"\n    return\n  fi\n  IFS=$'\\n'\n  num=$(expr\
    \ ${#word} - 1)\n  temp_word=$(echo $word | rev)\n  for i in $(eval echo {0..$num});\
    \ do\n    if [[ $temp_word == \"a\" || $temp_word == \"e\" || $temp_word == \"\
    i\" || $temp_word == \"o\" || $temp_word == \"u\" ]]; then\n      echo $temp_word\
    \ | rev\n      return\n    fi\n    if [[ $temp_word == \"A\" || $temp_word ==\
    \ \"E\" || $temp_word == \"I\" || $temp_word == \"O\" || $temp_word == \"U\" ]];\
    \ then\n      echo $temp_word | rev\n      return\n    fi\n    temp_word=$(echo\
    \ ${temp_word:1})\n  done\n  echo \"\"", "    for (( i=${#1}-1; i>=0; i-- ));\
    \ do\n        if [[ ${1:i:1} =~ ^[aeiou]$ ]]; then\n            if [[ ${1:i-1:1}\
    \ =~ ^[^aeiou]$ ]]; then\n                if [[ $i != ${#1}-1 ]]; then\n     \
    \               if [[ ${1:i+1:1} =~ ^[^aeiou]$ ]]; then\n                    \
    \    echo ${1:i:1}\n                        break\n                    fi\n  \
    \              fi\n            fi\n        fi\n    done", "    local answer=$(echo\
    \ $1 | tr -d '[^aeiouAEIOU]' | rev | cut -c 1)\n    if [ \"$answer\" != \"\" ];\
    \ then\n        echo $answer\n    else\n        echo \"\"\n    fi", "    word=$1\n\
    \    result=\"\"\n    last_is_consonant=0\n    for (( i=${#word}-1; i>=0; i--\
    \ ))\n    do\n        if [[ $last_is_consonant == 1 ]]; then\n            case\
    \ ${word:$i:1} in\n                a|e|i|o|u|A|E|I|O|U)\n                    result=${word:$i:1}\n\
    \                    break\n                    ;;\n                *)\n     \
    \               ;;\n            esac\n        fi\n        case ${word:$i:1} in\n\
    \            a|e|i|o|u|A|E|I|O|U)\n                last_is_consonant=0\n     \
    \           ;;\n            *)\n                last_is_consonant=1\n        \
    \        ;;\n        esac\n    done\n    echo $result", "    local word=\"$1\"\
    \n    local word_len=${#word}\n    local right_end=$(( word_len - 1 ))\n    local\
    \ vowels=\"a e i o u A E I O U\"\n    local closest_vowel=''\n    for (( i = right_end;\
    \ i >= 0; i-- )); do\n        local c=${word:$i:1}\n        for vowel in $vowels;\
    \ do\n            if [[ \"$c\" == \"$vowel\" ]]; then\n                local left_c=${word:$((\
    \ i - 1 )):1}\n                local right_c=${word:$(( i + 1 )):1}\n        \
    \        if [[ \"$left_c\" =~ [^aeiou] ]] && [[ \"$right_c\" =~ [^aeiou] ]]; then\n\
    \                    closest_vowel=\"$c\"\n                    break\n       \
    \         fi\n            fi\n        done\n        if [[ -n \"$closest_vowel\"\
    \ ]]; then\n            break\n        fi\n    done\n    echo \"$closest_vowel\"",
  "    echo \"$1\" | grep -oP '(?<=[^aeiouAEIOU][aeiouAEIOU])[aeiouAEIOU](?=[^aeiouAEIOU])'",
  '    # fill in the code', "    arg_len=${#1}\n    vowels=('a' 'e' 'i' 'o' 'u' 'A'\
    \ 'E' 'I' 'O' 'U')\n    for ((i=arg_len-1; i>=0; i--)); do\n        char=${1:$i:1}\n\
    \        for v in ${vowels[@]}; do\n            if [[ $char == $v ]]; then\n \
    \               if [[ $i == 0 ]]; then\n                    return\n         \
    \       fi\n                char2=${1:$((i-1)):1}\n                for v in ${vowels[@]};\
    \ do\n                    if [[ $char2 == $v ]]; then\n                      \
    \  return\n                    fi\n                done\n                echo\
    \ $char\n                return\n            fi\n        done\n    done", "  \
    \  [ $# -ne 1 ] && {\n        echo \"function get_closest_vowel needs exactly\
    \ 1 argument.\"\n        exit 1\n    }\n    str=$1\n    # check each character\
    \ and store the distance to the last consonant in\n    # an array.\n    lastc=${#str}\n\
    \    for i in $(seq 0 $((${#str}-1))); do\n        case ${str:$i:1} in\n     \
    \       \"a\"|\"e\"|\"i\"|\"o\"|\"u\"|\"A\"|\"E\"|\"I\"|\"O\"|\"U\")\n       \
    \         vowel=${str:$i:1}\n                distances[$i]=$(($lastc-$i))\n  \
    \              ;;\n            *)\n                lastc=$i\n                ;;\n\
    \        esac\n    done\n    # Find the closest vowel, and return the corresponding\
    \ vowel.\n    min=${distances[0]}\n    for i in ${distances[@]}; do\n        [\
    \ $i -lt $min ] && min=$i\n    done\n    [ -z $min ] && echo \"\" || echo $vowel",
  "    vowels='aeiou'\n    reverse=$(echo $1 | rev)\n    for ((i=0; i<${#reverse};\
    \ i++)); do\n        if [[ \"${vowels}\" =~ \"${reverse:$i:1}\" ]]; then\n   \
    \         if [[ \"${i}\" -gt 0 ]]; then\n                if [[ ! \"${vowels}\"\
    \ =~ \"${reverse:$(($i-1)):1}\" ]]; then\n                    echo \"${reverse:$i:1}\"\
    \n                    return\n                fi\n            fi\n        fi\n\
    \    done\n    echo \"\"", "    local word=$1\n    local vowels=(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")\n    local rev_word=$(echo \"${word}\"\
    \ | rev)\n    for ((i=0; i<${#rev_word}; i++)); do\n        for vowel in \"${vowels[@]}\"\
    ; do\n            if [[ \"${rev_word:$i:1}\" == \"${vowel}\" ]]; then\n      \
    \          local index=$((i + 1))\n                if [[ \"${rev_word:$index:1}\"\
    \ =~ [^aeiouAEIOU] ]]; then\n                    echo \"${vowel}\"\n         \
    \           return\n                fi\n            fi\n        done\n    done\n\
    \    echo \"\"", "  local word=$1\n  local vowels=({a..z},{A..Z})\n  local consonants=({0..9})\n\
    \  local i=${#word}\n  local is_consonant=1\n  local is_vowel=0\n  local index=0\n\
    \  # echo ${#word}\n  for index in $(eval echo {0..$((${#word}-1))}); do\n   \
    \ for i in ${vowels[@]}; do\n      if [[ ${word:$index:1} == $i ]]; then\n   \
    \     is_vowel=1\n        break\n      fi\n    done\n    for i in ${consonants[@]};\
    \ do\n      if [[ ${word:$index:1} == $i ]]; then\n        is_consonant=1\n  \
    \      break\n      fi\n    done\n    if [[ $is_vowel == 1 && $is_consonant ==\
    \ 1 ]]; then\n      echo ${word:$index:1}\n      return\n    fi\n    is_vowel=0\n\
    \    is_consonant=0\n  done\n  echo \"\"", "    # Please write your code here\n\
    \    echo \"\"", "    local str=\"$1\"\n    # put your code here\n    str=($(echo\
    \ $str | fold -w1))\n    local index=$((${#str[@]}-1))\n    while [ $index -ge\
    \ 0 ]; do\n        local chr=${str[$index]}\n        if [[ $chr =~ [b-df-hj-np-tv-z]\
    \ ]]; then\n            if [[ $index -eq $((${#str[@]}-1)) ]]; then\n        \
    \        if [[ ${str[$(($index-1))]} =~ [a-z] ]]; then\n                    echo\
    \ ${str[$(($index-1))]}\n                    return\n                fi\n    \
    \        elif [[ ${str[$(($index+1))]} =~ [a-z] ]]; then\n                echo\
    \ ${str[$(($index+1))]}\n                return\n            fi\n        fi\n\
    \        index=$(($index-1))\n    done\n    echo \"\"", "\tinput=\"$1\"\n\tlast_consecutive_vowel_index=0\n\
    \tfor (( i=${#input}-1; i>=0; i-- )); do\n\t\tif ! [[ ${input:$i:1} =~ [aeiou]\
    \ ]]; then\n\t\t\tbreak\n\t\tfi\n\t\tlast_consecutive_vowel_index=$i\n\tdone\n\
    \tfor (( i=$last_consecutive_vowel_index-1; i>=0; i-- )); do\n\t\tif [[ ${input:$i:1}\
    \ =~ [aeiou] ]]; then\n\t\t\techo \"${input:$i:1}\"\n\t\t\treturn\n\t\tfi\n\t\
    done\n\techo \"\"", '    # Your code here', "  str=$1\n  len=${#str}\n  for ((\
    \ i=len-1; i>=0; i-- )); do\n    cur_char=${str:$i:1}\n    if [[ $cur_char =~\
    \ [aeiou] ]]; then\n      echo $cur_char\n      break\n    fi\n  done", "\tlocal\
    \ word=$1\n\tlocal len=$((${#word}-1))\n\tlocal wordr=\"$(echo $word | rev)\"\n\
    \tlocal i=0\n\tlocal ch\n\tlocal j=1\n\tlocal found=0\n\tfor i in $( seq 0 $len\
    \ ); do\n\t\tch=${wordr:$i:1}\n\t\tif [[ \"$ch\" =~ [aeiouAEIOU] ]]; then\n\t\t\
    \tfound=1\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif [ $found -eq 0 ]; then\n\t\treturn\n\
    \tfi\n\tfor j in $( seq 0 $len ); do\n\t\tch=${wordr:$j:1}\n\t\tif [[ ! \"$ch\"\
    \ =~ [aeiouAEIOU] ]]; then\n\t\t\tbreak\n\t\tfi\n\tdone\n\techo ${wordr:$i:$j}\
    \ | rev", "  local str=\"$1\"\n  local last_consonant_ind=0\n  local last_consonant_char=\"\
    \"\n  local last_vowel_ind=0\n  local last_vowel_char=\"\"\n  local i\n  local\
    \ char\n\n  for ((i=0; i<${#str}; i++)); do\n    char=\"${str:$i:1}\"\n    if\
    \ [[ \"$char\" =~ ^[AEIOUaeiou]$ ]]; then\n      last_vowel_ind=$i\n      last_vowel_char=\"\
    $char\"\n    elif [[ \"$char\" =~ ^[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$\
    \ ]]; then\n      last_consonant_ind=$i\n      last_consonant_char=\"$char\"\n\
    \    fi\n  done\n\n  if [ $last_consonant_ind -gt $last_vowel_ind ]; then\n  \
    \  echo \"$last_vowel_char\"\n  else\n    echo \"\"\n  fi", "\tlocal word=$1\n\
    \tlocal result=\"\"\n\tlocal is_vowel=0\n\tlocal i=1\n\tlocal current=\"\"\n\t\
    local x=$((${#word} - 1))\n\t\n\techo $x\n\t\n\twhile [ $i -le $x ]\n\tdo\n\t\t\
    is_vowel=0\n\t\tcurrent=${word:$i:1}\n\t\t\n\t\tif [ $current == \"a\" ] || [\
    \ $current == \"e\" ] || [ $current == \"i\" ] || [ $current == \"o\" ] || [ $current\
    \ == \"u\" ] || [ $current == \"A\" ] || [ $current == \"E\" ] || [ $current ==\
    \ \"I\" ] || [ $current == \"O\" ] || [ $current == \"U\" ]\n\t\tthen\n\t\t\t\
    if [ $is_vowel -eq 0 ]\n\t\t\tthen\n\t\t\t\tis_vowel=1\n\t\t\t\tresult=$current\n\
    \t\t\tfi\n\t\telse\n\t\t\tif [ $is_vowel -eq 1 ]\n\t\t\tthen\n\t\t\t\tbreak\n\t\
    \t\tfi\n\t\tfi\n\t\t\n\t\t((i++))\n\tdone\n\t\n\techo $result", "\techo \"UNIMPLEMENTED\""]
stop_tokens:
- "\n}"
