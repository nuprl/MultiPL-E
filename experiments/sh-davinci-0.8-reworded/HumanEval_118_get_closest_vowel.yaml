name: HumanEval_118_get_closest_vowel
language: sh
prompt: "#!/bin/bash\n# You are given a word. Your task is to find the closest vowel\
  \ that stands between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\"\
  )\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel\
  \ \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\n\
  get_closest_vowel() {\n"
tests: "}\n\ncandidate() {\n    get_closest_vowel \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"yogurt\") = \"u\" ]]\n    [[ $(candidate \"full\") = \"\
  u\" ]]\n    [[ $(candidate \"easy\") = \"\" ]]\n    [[ $(candidate \"eAsy\") = \"\
  \" ]]\n    [[ $(candidate \"ali\") = \"\" ]]\n    [[ $(candidate \"bad\") = \"a\"\
  \ ]]\n    [[ $(candidate \"most\") = \"o\" ]]\n    [[ $(candidate \"ab\") = \"\"\
  \ ]]\n    [[ $(candidate \"ba\") = \"\" ]]\n    [[ $(candidate \"quick\") = \"\"\
  \ ]]\n    [[ $(candidate \"anime\") = \"i\" ]]\n    [[ $(candidate \"Asia\") = \"\
  \" ]]\n    [[ $(candidate \"Above\") = \"o\" ]]\n}\n\nrun_test"
completions: ["    # write your code here\n    A=\"$1\"\n    c=${#A}\n    while [\
    \ $c -gt 0 ]\n    do\n        temp=${A:$c-1:1}\n        if [ $temp = \"a\" ] ||\
    \ [ $temp = \"e\" ] || [ $temp = \"i\" ] || [ $temp = \"o\" ] || [ $temp = \"\
    u\" ] || [ $temp = \"A\" ] || [ $temp = \"E\" ] || [ $temp = \"I\" ] || [ $temp\
    \ = \"O\" ] || [ $temp = \"U\" ]\n        then\n            echo $temp\n     \
    \       return\n        fi\n        c=$((c-1))\n    done\n    echo \"\"", "  \
    \  if [[ $1 =~ ^[a-zA-Z]+$ ]]; then\n        echo $1 | sed -rn 's/.*([AEIOUaeiou]).*/\\\
    1/p'\n    else\n        echo \"Error: word should contain English letter only.\"\
    \n    fi", "\tlocal strlen=${#1}\n\tlocal count=0\n\tlocal character=''\n\tlocal\
    \ prev=''\n\tlocal next=''\n\tlocal index=0\n\tlocal start=0\n\tlocal end=0\n\t\
    local value=''\n\tlocal closest=0\n\twhile [ $count -lt $strlen ]; do\n\t\tcharacter=${1:$count:1}\n\
    \t\tif [[ $character =~ [AEIOU] ]]; then\n\t\t\tif [ $count -gt 0 ]; then\n\t\t\
    \t\tstart=$count\n\t\t\t\tbreak\n\t\t\tfi\n\t\tfi\n\t\tlet count++\n\tdone\n\t\
    while [ $count -gt 0 ]; do\n\t\tcharacter=${1:$count:1}\n\t\tif [[ $character\
    \ =~ [AEIOU] ]]; then\n\t\t\tif [ $count -gt 0 ]; then\n\t\t\t\tif [ $count -lt\
    \ $strlen ]; then\n\t\t\t\t\tindex=$count\n\t\t\t\t\tend=$count\n\t\t\t\t\tbreak\n\
    \t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\t\tlet count--\n\tdone\n\tlet closest=$index-$start\n\
    \tlet count++\n\twhile [ $count -lt $strlen ]; do\n\t\tcharacter=${1:$count:1}\n\
    \t\tif [[ $character =~ [AEIOU] ]]; then\n\t\t\tif [ $count -gt 0 ]; then\n\t\t\
    \t\tif [ $count -lt $strlen ]; then\n\t\t\t\t\tif [ $(( $count-$start )) -lt $closest\
    \ ]; then\n\t\t\t\t\t\tclosest=$(( $count-$start ))\n\t\t\t\t\t\tend=$count\n\t\
    \t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\t\tlet count++\n\tdone\n\t#echo \"\
    Closest=$closest\"\n\tif [ $closest -eq 0 ]; then\n\t\techo \"\"\n\telse\n\t\t\
    value=${1:$end:1}\n\t\techo \"$value\"\n\tfi", "    local str=\"$1\"\n    local\
    \ vowel=\"\"\n    local counter=0\n    for (( i=$((${#str}-1)); i>=0; i-- ))\n\
    \    do\n        if [[ \"${str:$i:1}\" =~ [aeiou] ]]; then\n            vowel=\"\
    ${str:$i:1}\"\n            counter=$(($i+1))\n            break\n        fi\n\
    \    done\n    if [[ $counter == 0 ]]; then\n        return\n    fi\n    local\
    \ consonant_counter=0\n    local vowel_counter=0\n    for (( i=$((${#str}-1));\
    \ i>=0; i-- ))\n    do\n        if [[ \"${str:$i:1}\" =~ [aeiou] ]]; then\n  \
    \          vowel_counter=$(($vowel_counter+1))\n        else\n            consonant_counter=$(($consonant_counter+1))\n\
    \        fi\n        if [[ $vowel_counter -eq 2 && $consonant_counter -eq 1 ]];\
    \ then\n            echo \"$vowel\"\n            return\n        fi\n    done",
  "  local string=$1\n  local len=${#string}\n  local ans=''\n  for ((i=$len-1; i>=0;\
    \ i--)); do\n    local char=${string:$i:1}\n    if [[ $char =~ [aeiouAEIOU] ]];\
    \ then\n      ans=$char\n      continue\n    elif [[ $ans =~ [aeiouAEIOU] ]];\
    \ then\n      echo $ans\n      break\n    fi\n  done", "  if [[ $1 =~ ^[^aeiou]+([aeiou]).*[^aeiou]+$\
    \ ]]; then\n    echo \"${BASH_REMATCH[1]}\"\n  else\n    echo \"\"\n  fi", " \
    \   local word=$1\n    local result=\"\"\n    local old_IFS=$IFS\n    IFS=\"\"\
    \n    for ((i=${#word}-1; i>=0; i--)); do\n        local c=${word:$i:1}\n    \
    \    if [[ \"$c\" =~ ^[AEIOUaeiou]$ ]]; then\n            result=\"$c\"\n    \
    \        break\n        fi\n    done\n    IFS=$old_IFS\n    echo \"$result\"",
  "  echo $1 | awk '{\n    vowels=\"aeiouAEIOU\"\n    len=length($0)\n    found=\"\
    \"\n    for (i=len; i>0; i--) {\n      if (index(vowels, substr($0, i, 1)) > 0)\
    \ {\n        found=substr($0, i, 1)\n        break\n      }\n    }\n    if (found\
    \ == \"\") {\n      printf(\"\")\n    } else {\n      if (i == 1) {\n        printf(\"\
    \")\n      } else {\n        printf(\"%s\", found)\n      }\n    }\n  }'", " \
    \   local i\n    local len=$((${#1}-1))\n    for ((i=$len; i>=0; i--)); do\n \
    \       local char=${1:$i:1}\n        if [[ $char =~ [aeiou] ]]; then\n      \
    \      local prev_char=${1:$(($i-1)):1}\n            local next_char=${1:$(($i+1)):1}\n\
    \            if [[ $prev_char =~ [^aeiou] ]] && [[ $next_char =~ [^aeiou] ]];\
    \ then\n                echo $char\n                return\n            fi\n \
    \       fi\n    done\n    echo \"\"", "    if [[ $1 =~ [^AEIOUaeiou]*([AEIOUaeiou])[^AEIOUaeiou]*$\
    \ ]]; then\n        echo \"${BASH_REMATCH[1]}\"\n    else\n        echo \"\"\n\
    \    fi", "\t\tlocal word=\"$1\"\n\t\tlocal current_char\n\t\tlocal last_was_consonant=false\n\
    \t\tlocal last_was_vowel=false\n\t\tlocal index\n\t\tfor ((index = ${#word} -\
    \ 1; index >= 0; index--)); do\n\t\t\tcurrent_char=\"${word:$index:1}\"\n\t\t\t\
    if ! $last_was_vowel && [[ \"$current_char\" =~ ^[aeiouAEIOU]$ ]]; then\n\t\t\t\
    \techo \"$current_char\"\n\t\t\t\treturn\n\t\t\telif ! $last_was_consonant &&\
    \ [[ \"$current_char\" =~ ^[aeiouAEIOU]$ ]]; then\n\t\t\t\tlast_was_vowel=true\n\
    \t\t\telse\n\t\t\t\tlast_was_consonant=true\n\t\t\tfi\n\t\tdone\n\t\techo \"\"",
  '    # write your code here', "    local str=$1;\n    local char;\n    local front=0;\n\
    \    local back=0;\n    local list=('a' 'e' 'i' 'o' 'u');\n    local list_len=${#list[@]};\n\
    \    local index;\n    local i;\n    local rear=$((${#str}-1));\n    local vowel='';\n\
    \    local temp;\n    local result;\n    for ((index=0; index<list_len; index++));\
    \ do\n        for ((i=rear; i>=0; i--)); do\n            char=${str:$i:1};\n \
    \           if [[ ${list[$index]} == \"$char\" ]]; then\n                vowel=$char;\n\
    \                front=$(($i-1));\n                back=$(($i+1));\n         \
    \       break;\n            fi\n        done\n        if [[ ! -z $vowel ]]; then\n\
    \            break;\n        fi\n    done\n    if [[ $vowel == '' ]]; then\n \
    \       echo \"\";\n        return;\n    fi\n    if [[ $front -lt 0 ]]; then\n\
    \        front=$((${#str}-1));\n    fi\n    if [[ $back -ge ${#str} ]]; then\n\
    \        back=0;\n    fi\n    char=${str:$front:1};\n    if [[ $char =~ ^[a-zA-Z]\
    \ ]]; then\n        temp=`curl -s https://en.wikipedia.org/wiki/Wikipedia:IPA_for_English\
    \ | tr -d [:space:] | grep \"$char\"`;\n        if [[ $temp =~ .*consonant.* ]];\
    \ then\n            result=$vowel;\n        fi\n    fi\n    char=${str:$back:1};\n\
    \    if [[ $char =~ ^[a-zA-Z] ]]; then\n        temp=`curl -s https://en.wikipedia.org/wiki/Wikipedia:IPA_for_English\
    \ | tr -d [:space:] | grep \"$char\"`;\n        if [[ $temp =~ .*consonant.* ]];\
    \ then\n            result=$vowel;\n        fi\n    fi", "    if [[ -z \"$1\"\
    \ ]]; then\n        echo \"\"\n        return\n    fi\n    for (( i=${#1}-1; i>=0;\
    \ i-- )); do\n        if [[ \"${1:$i:1}\" =~ ^[aeiouAEIOU]$ ]]; then\n       \
    \     # Found a vowel, now check the previous letter\n            if [[ \"$i\"\
    \ -eq 0 ]]; then\n                echo \"\"\n                return\n        \
    \    elif [[ \"${1:$((i-1)):1}\" =~ ^[aeiouAEIOU]$ ]]; then\n                #\
    \ The previous letter is also a vowel, which means this letter is not valid\n\
    \                continue\n            else\n                echo \"${1:$i:1}\"\
    \n                return\n            fi\n        fi\n    done\n    echo \"\"",
  "  local string=\"$1\"\n  local count=$((${#string}-1))\n  local result=''\n  for\
    \ (( i=count; i>0; i-- )); do\n    local char=$(echo \"${string:$i:1}\")\n   \
    \ local char_left=$(echo \"${string:$i-1:1}\")\n    if [[ $char == [aeiou] &&\
    \ $char_left == [^aeiou] ]]; then\n      result=$char\n      break\n    fi\n \
    \ done\n  echo $result", "    for ((i=$((${#1}-1)); i >= 0; i--)); do\n      \
    \  c=${1:$i:1}\n        if [[ \"$c\" =~ [aeiou] ]]; then\n            echo \"\
    $c\"\n            break\n        fi\n    done", "  if [[ $1 =~ ^[aeiouAEIOU].*[^aeiouAEIOU][aeiouAEIOU]$\
    \ ]]; then\n    echo $1 | sed -E 's/^[^aeiouAEIOU]*([aeiouAEIOU]).*[^aeiouAEIOU]([aeiouAEIOU])$/\\\
    2/g'\n  else\n    echo \"\"\n  fi", "  word=$1\n  len=${#word}\n  # your code\
    \ here\n  cnt=$((len-1))\n  while [ $cnt -ge 0 ]; do\n  \tchr=${word:$cnt:1}\n\
    \  \tif [[ $chr =~ [aeiou] ]]; then\n  \t\techo $chr\n  \t\treturn\n  \tfi\n \
    \ \tcnt=$((cnt-1))\n  done\n  echo \"\"", "  declare -a vowels=('a' 'e' 'i' 'o'\
    \ 'u' 'A' 'E' 'I' 'O' 'U')\n  local word=$1\n  local word_length=${#word}\n  local\
    \ out=\"\"\n  local i=0\n  local j=0\n  local vowel_index=0\n  local start_index=0\n\
    \  local end_index=0\n  local start_char=\"\"\n  local end_char=\"\"\n  local\
    \ vowel_char=\"\"\n  while [ $i -lt $word_length ]\n  do\n    start_index=$((word_length\
    \ - 1 - i))\n    end_index=$((word_length - i))\n    start_char=${word:$start_index:1}\n\
    \    end_char=${word:$end_index:1}\n    for vowel in ${vowels[@]}\n    do\n  \
    \    if [ \"$start_char\" = \"$vowel\" ]\n      then\n        out=\"$start_char\"\
    \n        return 0\n      fi\n      if [ \"$end_char\" = \"$vowel\" ]\n      then\n\
    \        out=\"$end_char\"\n        return 0\n      fi\n    done\n    i=$((i +\
    \ 1))\n  done\n  echo $out", "  local vowels=\"aeiouAEIOU\"\n  for ((i=${#1}-1;\
    \ i>0; i--)); do\n    if [[ $vowels =~ ${1:i:1} ]]; then\n      for ((j=i-1; j>=0;\
    \ j--)); do\n        if [[ $vowels =~ ${1:j:1} ]]; then\n          i=$j\n    \
    \    else\n          echo \"${1:i:1}\"\n          return\n        fi\n      done\n\
    \    fi\n  done\n  echo \"\""]
stop_tokens:
- "\n}"
