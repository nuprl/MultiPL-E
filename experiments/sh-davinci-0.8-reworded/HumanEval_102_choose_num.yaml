name: HumanEval_102_choose_num
language: sh
prompt: "#!/bin/bash\n# This function takes two positive numbers x and y and returns\
  \ the\n# biggest even integer number that is in the range [x, y] inclusive. If \n\
  # there's no such number, then the function should return -1.\n# For example:\n\
  # >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n\
  # \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n"
tests: "}\n\ncandidate() {\n    choose_num \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"12\" \"15\") = \"14\" ]]\n    [[ $(candidate \"13\" \"12\") =\
  \ \"-1\" ]]\n    [[ $(candidate \"33\" \"12354\") = \"12354\" ]]\n    [[ $(candidate\
  \ \"5234\" \"5233\") = \"-1\" ]]\n    [[ $(candidate \"6\" \"29\") = \"28\" ]]\n\
  \    [[ $(candidate \"27\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"7\" \"7\")\
  \ = \"-1\" ]]\n    [[ $(candidate \"546\" \"546\") = \"546\" ]]\n}\n\nrun_test"
completions: ["    ans=0\n    for ((i=$1; i<=$2; i++)); do\n        if [ $((i%2))\
    \ -eq 0 ]; then\n            ans=$i\n        fi\n    done\n    if [ $ans -eq 0\
    \ ]; then\n        echo \"-1\"\n    else\n        echo $ans\n    fi", "    if\
    \ [[ $1 -lt $2 ]]; then\n        if [[ $(($1 % 2)) -eq 0 ]]; then\n          \
    \  echo $1\n        else\n            echo $(($1 + 1))\n        fi\n    else\n\
    \        echo '-1'\n    fi", "    local even_num\n    for i in $(seq $1 $2); do\n\
    \        if [ $((i % 2)) -eq 0 ]; then\n            even_num=$i\n        fi\n\
    \    done\n    if [ -z $even_num ]; then\n        echo \"-1\"\n    else\n    \
    \    echo $even_num\n    fi", "    # enter your code here\n    if [[ $1 -lt 0\
    \ || $2 -lt 0 ]]; then\n        echo \"-1\"\n    elif [ $1 -gt $2 ]; then\n  \
    \      echo \"-1\"\n    elif [ $1 -eq $2 ]; then\n        if [[ $1 -eq 0 || $2\
    \ -eq 0 ]]; then\n            echo \"0\"\n        elif [[ $1 -eq 1 || $2 -eq 1\
    \ ]]; then\n            echo \"-1\"\n        elif [[ $1 -eq 2 || $2 -eq 2 ]];\
    \ then\n            echo \"2\"\n        elif [[ $1 -eq 3 || $2 -eq 3 ]]; then\n\
    \            echo \"-1\"\n        elif [[ $1 -eq 4 || $2 -eq 4 ]]; then\n    \
    \        echo \"4\"\n        elif [[ $1 -eq 5 || $2 -eq 5 ]]; then\n         \
    \   echo \"-1\"\n        elif [[ $1 -eq 6 || $2 -eq 6 ]]; then\n            echo\
    \ \"6\"\n        elif [[ $1 -eq 7 || $2 -eq 7 ]]; then\n            echo \"-1\"\
    \n        elif [[ $1 -eq 8 || $2 -eq 8 ]]; then\n            echo \"8\"\n    \
    \    elif [[ $1 -eq 9 || $2 -eq 9 ]]; then\n            echo \"-1\"\n        else\n\
    \            echo \"$1\"\n        fi\n    else\n        for i in `seq $1 $2`;\
    \ do\n            if [[ $i -eq 0 || $i -eq 2 || $i -eq 4 || $i -eq 6 || $i -eq\
    \ 8 ]]; then\n                echo \"$i\"\n            fi\n        done\n    fi",
  "  for i in $(seq $1 $2); do\n    if [[ $(($i % 2)) -eq 0 ]]; then\n      echo $i\n\
    \      return\n    fi\n  done\n  echo -1", "    local integer=$1\n    local integer2=$2\n\
    \    local max\n    local check=0\n    if [[ $integer -lt $integer2 ]]; then\n\
    \twhile [[ $integer -le $integer2 ]]; do\n\t    if [[ $integer -ge $check ]];\
    \ then\n\t\tcheck=$integer\n\t    fi\n\t    ((integer++))\n\tdone\n\tmax=$check\n\
    \    else\n\twhile [[ $integer2 -le $integer ]]; do\n\t    if [[ $integer2 -ge\
    \ $check ]]; then\n\t\tcheck=$integer2\n\t    fi\n\t    ((integer2++))\n\tdone\n\
    \tmax=$check\n    fi\n    if [[ $max%2 -eq 0 ]]; then\n\techo $max\n    else\n\
    \techo \"-1\"\n    fi", "    b=$1\n    e=$2\n    if [ $1 -gt $2 ]; then\n    \
    \    return -1\n    fi\n    for i in $(seq $b $e); do\n        if [ $(($i % 2))\
    \ -eq 0 ]; then\n            echo $i\n            return\n        fi\n    done\n\
    \    echo -1", "\tlargest_even=-1\n\n\tfor i in $(seq $1 $2); do\n\t\tif [ $(expr\
    \ $i % 2) -eq 0 ]; then\n\t\t\tif [ $i -gt $largest_even ]; then\n\t\t\t\tlargest_even=$i\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\n\techo $largest_even", "    if [[ $1 -gt $2 ]]; then\n\
    \        echo \"-1\"\n    else\n        for (( i=$1; i<=$2; i++ )); do\n     \
    \       if [[ $(( i % 2 )) -eq 0 ]]; then\n                echo \"$i\"\n     \
    \           return 0\n            fi\n        done\n        echo \"-1\"\n    fi",
  "    local x=\"$1\"\n    local y=\"$2\"\n    if [ $x -gt $y ]; then\n        echo\
    \ \"-1\"\n    else\n        local count=$((x % 2))\n        local num=$x\n   \
    \     while [ $count -eq 1 ]; do\n            num=$((num + 1))\n            count=$((num\
    \ % 2))\n        done\n        echo $num\n    fi", "    # Your code here.\n  \
    \  if [ $1 -lt $2 ]; then\n        low=$1\n        high=$2\n    else\n       \
    \ low=$2\n        high=$1\n    fi\n    for ((i=$low; i<=$high; i++)); do\n   \
    \     if [ $((i%2)) -eq 0 ]; then\n            echo $i\n            return\n \
    \       fi\n    done\n    echo -1", "    if [[ \"$1\" -lt \"$2\" ]]; then\n  \
    \      echo \"$2\"\n    elif [[ \"$1\" -gt \"$2\" ]]; then\n        echo \"$1\"\
    \n    else\n        echo \"$1\"\n    fi", "    # Don't touch this line!\n    declare\
    \ -i x=\"$1\"\n    declare -i y=\"$2\"\n    ############## Your code goes here\
    \ ################\n    if [ $x -gt $y ]; then\n        echo -1\n    elif [ $x\
    \ -eq $y ]; then\n        if [[ $x%2 -eq 0 ]]; then\n            echo $x\n   \
    \     else\n            echo -1\n        fi\n    else\n        for ((i = $x; i\
    \ <= $y; i++)); do\n            if [[ $i%2 -eq 0 ]]; then\n                echo\
    \ $i\n                break\n            fi\n        done\n    fi", "  local num_list\n\
    \  local x=$1\n  local y=$2\n  local i\n  if [ $x -gt $y ]; then\n    return -1\n\
    \  fi\n  for ((i=$x; i<=$y; i++)); do\n    if [ $((i%2)) -eq 0 ]; then\n     \
    \ num_list=\"$num_list $i\"\n    fi\n  done\n  # Sort the num_list numerically\
    \ and output the last element\n  echo \"$num_list\" | xargs -n1 | sort -n | tail\
    \ -n1", "  if [[ \"$1\" -ge \"$2\" ]]; then\n    echo \"-1\"\n  else\n    if [[\
    \ \"$2\" -eq \"$(($2/2*2))\" ]]; then\n      echo \"$2\"\n    else\n      choose_num\
    \ \"$1\" \"$(($2-1))\"\n    fi\n  fi", "    local x y\n    x=$1\n    y=$2\n  \
    \  # TODO: choose the biggest even number in [x, y]\n    # If there's no such\
    \ number, return -1.\n    # You may assume that x <= y\n    echo $x", "  if [\
    \ \"$#\" -ne 2 ]; then\n    echo \"$2\"\n    return\n  fi\n  if [ \"$1\" -ge \"\
    $2\" ]; then\n    echo \"$2\"\n    return\n  fi\n  if [ \"$1\" -gt \"$2\" ]; then\n\
    \    echo \"-1\"\n    return\n  fi\n  echo \"$1\"\n  return", "    local num1=$1\n\
    \    local num2=$2\n    if [[ $num1 -gt $num2 ]]; then\n        for ((i = $num1;\
    \ i >= $num2; i--)); do\n            if [[ $((i % 2)) -eq 0 ]]; then\n       \
    \         echo $i\n                break\n            fi\n        done\n    else\n\
    \        for ((i = $num2; i >= $num1; i--)); do\n            if [[ $((i % 2))\
    \ -eq 0 ]]; then\n                echo $i\n                break\n           \
    \ fi\n        done\n    fi", "    if [[ \"$1\" -gt \"$2\" ]]; then\n        echo\
    \ -1\n    else\n        for i in $(seq \"$1\" \"$2\"); do\n            if [[ \"\
    $i\" -gt \"$2\" ]]; then\n                break\n            elif [[ \"$i\"%2\
    \ -eq 0 ]]; then\n                echo \"$i\"\n            fi\n        done\n\
    \    fi", "    local x=\"$1\"\n    local y=\"$2\"\n    echo \" $(for i in $(seq\
    \ $x $y); do [[ $((i%2)) == 0 ]] && echo $i; done) \" | sed 's/ /\\n/g' | tail\
    \ -n 1"]
stop_tokens:
- "\n}"
