language: sh
name: HumanEval_109_move_one_ball
results:
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local temp\n    local count=0\n\
    \    local len=${#1}\n    # The length of $1 is the number of elements in the\
    \ list\n    len=$((len+1))\n    # mapfile can create an array from a string\n\
    \    mapfile -t arr < <(echo $1)\n    # The length of the array we just created\
    \ is the number of elements in the list\n    len=${#arr[@]}\n    if [ $len -eq\
    \ 0 ]; then\n        echo \"true\"\n        return\n    fi\n    if [ $len -eq\
    \ 1 ]; then\n        echo \"true\"\n        return\n    fi\n    while true; do\n\
    \        temp=${arr[0]}\n        arr[0]=${arr[$len-1]}\n        arr[$len-1]=$temp\n\
    \        count=$((count+1))\n        if [ $count -eq $len ]; then\n          \
    \  echo \"false\"\n            return\n        fi\n        for ((i=1; i<len; i++));\
    \ do\n            if [[ $((arr[$i-1])) -gt $((arr[$i])) ]]; then\n           \
    \     break\n            fi\n            if [ $i -eq $((len-1)) ]; then\n    \
    \            echo \"true\"\n                return\n            fi\n        done\n\
    \    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    #create an array from the\
    \ input\n    IFS=\" \" read -r -a arr <<< \"$1\"\n    #keep the initial number\
    \ of elements for comparison\n    n=${#arr[@]}\n    #check the list is not empty\n\
    \    if [ ${#arr[@]} -eq 0 ]; then\n        echo \"true\"\n        return\n  \
    \  fi\n    #while the list is not empty\n    while [ ${#arr[@]} -ne 0 ]; do\n\
    \        #variable to keep the last element of the array\n        last=${arr[${#arr[@]}-1]}\n\
    \        #remove the last element\n        unset arr[${#arr[@]}-1]\n        #if\
    \ we have shifted all the elements to the right, then the last element\n     \
    \   #must be in the first position and the array must be sorted\n        if [\
    \ ${#arr[@]} -eq 0 ] && [ $last -eq 1 ]; then\n            echo \"true\"\n   \
    \         return\n        fi\n        #if the array was not sorted and the last\
    \ element is not equal to the\n        #number of elements in the array, then\
    \ the array can not be sorted\n        if [ ${#arr[@]} -ne $last ]; then\n   \
    \         echo \"false\"\n            return\n        fi\n    done\n    #if the\
    \ number of elements of the array is equal to the initial number of\n    #elements\
    \ of the array, then the array can not be sorted\n    if [ ${#arr[@]} -eq $n ];\
    \ then\n        echo \"false\"\n        return\n    fi\n}\n\ncandidate() {\n \
    \   move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if ((arr[i] > arr[$((i+1))])); then\n            j=$((i+1))\n\
    \            for ((; j<${#arr[@]}; j++)); do\n                if ((arr[i] > arr[$((j+1))]));\
    \ then\n                    if ((j == ${#arr[@]}-1)); then\n                 \
    \       echo \"true\"\n                        return\n                    fi\n\
    \                else\n                    break\n                fi\n       \
    \     done\n            if ((j == ${#arr[@]})); then\n                echo \"\
    true\"\n                return\n            fi\n            echo \"false\"\n \
    \           return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local list=$1\n    local sorted=$(echo\
    \ $list | sed 's/ /\\n/g' | sort -g)\n    local arr\n    local max\n    local\
    \ count=0\n    declare -A index\n\n    IFS=' ' read -r -a arr <<< \"$sorted\"\n\
    \    max=${arr[-1]}\n    local -i i=0\n    while [[ $i -lt ${#arr[@]} ]]; do\n\
    \        index[${arr[$i]}]=$i\n        i+=1\n    done\n\n    i=0\n    while [[\
    \ $i -lt ${#arr[@]} ]]; do\n        if [[ $i -ne ${index[${arr[$i]}]} ]]; then\n\
    \            count+=1\n        fi\n        i+=1\n    done\n\n    if [[ $count\
    \ -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $count -eq 1 ]]; then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"Hello world\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    read -a arr <<< $1\n    n=${#arr[@]}\n\
    \    local last_index=$((n-1))\n    if [[ $last_index -eq -1 ]]; then\n      \
    \  echo true\n        return\n    fi\n    local second_last_index=$((last_index-1))\n\
    \    min_index=$second_last_index\n    min_value=${arr[$second_last_index]}\n\
    \    for i in $(seq 0 $second_last_index); do\n        if ((${arr[$i]} < min_value));\
    \ then\n            min_index=$i\n            min_value=${arr[$i]}\n        fi\n\
    \    done\n    #echo \"min_index:$min_index\"\n    for i in $(seq $min_index $second_last_index);\
    \ do\n        if ((${arr[$i]} > ${arr[$i+1]})); then\n            echo false\n\
    \            return\n        fi\n    done\n    if ((${arr[$last_index]} < min_value));\
    \ then\n        echo false\n        return\n    fi\n    echo true\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Check that the given array\
    \ is not empty\n    if [ -z \"$1\" ]; then\n        echo \"true\"\n        return\
    \ 0\n    fi\n    # Create an array by splitting on space\n    IFS=' ' read -r\
    \ -a array <<< \"$1\"\n    length=${#array[@]}\n    # Iterate over the length\
    \ of the array\n    for i in `seq 0 $(($length - 1))`; do\n        # Check if\
    \ the element at the last position of the array is not equal to\n        # the\
    \ element on the current position\n        if [ \"${array[$(($length - 1))]}\"\
    \ != \"${array[$i]}\" ]; then\n            # Check if the element on the current\
    \ position is less than the\n            # element on the next position\n    \
    \        if [ \"${array[$i]}\" -lt \"${array[$(($i + 1))]}\" ]; then\n       \
    \         # Move the element on the current position to the last position\n  \
    \              # of the array\n                array=(\"${array[@]:0:$i}\" \"\
    ${array[@]:$(($i + 1))}\" \"${array[$i]}\")\n                # Check if the array\
    \ is in non-decreasing order\n                if \"$(is_array_nondecreasing \"\
    ${array[@]}\")\"; then\n                    echo \"true\"\n                  \
    \  return 0\n                fi\n            fi\n        fi\n    done\n    echo\
    \ \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcry5y4nq.sh: line 46: is_array_nondecreasing: command not found

    /tmp/tmpcry5y4nq.sh: line 46: : command not found

    /tmp/tmpcry5y4nq.sh: line 46: is_array_nondecreasing: command not found

    /tmp/tmpcry5y4nq.sh: line 46: : command not found

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tif [[ $# -lt 1 ]]; then\n\t\t\
    echo \"false\"\n\t\treturn\n\tfi\n\t#\n\tif [[ $# -eq 1 ]]; then\n\t\techo \"\
    true\"\n\t\treturn\n\tfi\n\t#\n\tlocal n=\"$1\"\n\tlocal arr=(\"$@\")\n\tlocal\
    \ sorted=(\"$@\")\n\tlocal len=${#arr[@]}\n\tlocal cnt=0\n\tlocal i=0\n\t#\n\t\
    #echo \"input arr:\" \"${arr[@]}\"\n\t#\n\t# Base case:\n\tif [[ ${arr[1]} -le\
    \ ${arr[0]} ]]; then\n\t\techo \"true\"\n\t\treturn\n\tfi\n\t#\n\t# Sort the array\n\
    \tsort -n -o \"${sorted[@]}\"\n\t#\n\t# Compare the sorted array with input array\n\
    \tfor ((i=0; i<$len; i++)); do\n\t\tif [[ ${arr[i]} -ne ${sorted[i]} ]]; then\n\
    \t\t\t((cnt++))\n\t\tfi\n\tdone\n\t#\n\t# If number of differences are equal to\
    \ 1, then we can move one ball\n\t# to achive the sorted array.\n\tif [[ $cnt\
    \ -eq 1 ]]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arg1 arg2 arg3 arg4\
    \ arg5\n    read -r arg1 arg2 arg3 arg4 arg5 <<< \"$1\"\n    local result\n  \
    \  case \"$arg1\" in\n        \"3\" )\n            case \"$arg2\" in\n       \
    \         \"4\" )\n                    result=\"true\"\n                    ;;\n\
    \                \"5\" )\n                    result=\"false\"\n             \
    \       ;;\n                * )\n                    result=\"false\"\n      \
    \              ;;\n            esac\n            ;;\n        * )\n           \
    \ result=\"false\"\n            ;;\n    esac\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=$1\n    N=$(echo $arr\
    \ | wc -w)\n    for i in `seq 1 $N`; do\n        val=$(echo $arr | cut -d \" \"\
    \ -f $i)\n        if [ $i -eq $N ]; then\n            if [ $val -lt ${arr[1]}\
    \ ]; then\n                echo \"false\"\n                return\n          \
    \  fi\n        else\n            if [ $val -lt ${arr[$((i+1))]} ]; then\n    \
    \            echo \"false\"\n                return\n            fi\n        fi\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7u1yo1he.sh: line 36: [: 3: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 4: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 5: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 1: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 31: [: 2: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 3: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 5: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 10: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 1: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 31: [: 2: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 4: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 3: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 36: [: 1: unary operator expected

    /tmp/tmp7u1yo1he.sh: line 31: [: 2: unary operator expected

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    temp=${arr[0]}\n\
    \    for ((i=0; i<${#arr[@]}; i++)); do\n        if (( ${arr[$i]} < temp)); then\n\
    \            echo \"false\"\n            return\n        fi\n        temp=${arr[$i]}\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Create an array from input\
    \ string\n    ar_IFS=$IFS\n    IFS=' ' read -r -a arr <<< \"$1\"\n    # Call helper\
    \ function\n    _move_one_ball \"${arr[@]}\"\n    IFS=$ar_IFS\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptv79595h.sh: line 30: _move_one_ball: command not found

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local i j\n    local -a array\n\
    \    array=($1)\n    local result=\"true\"\n    for ((i=0; i<${#array[@]}; i++));\
    \ do\n        j=$((i+1))\n        if [[ $j -lt ${#array[@]} ]]; then\n       \
    \     [[ \"${array[$i]}\" -gt \"${array[$j]}\" ]] && result=\"false\"\n      \
    \  fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a b\n  IFS=' ' read -a\
    \ b <<< $1\n  [ ${#b[@]} -eq 0 ] && echo \"true\" && return \n  local i j m\n\
    \  for i in ${!b[@]}; do\n    for j in ${!b[@]}; do\n      [ $j -gt $i ] && continue\n\
    \      [ ${b[$i]} -lt ${b[$j]} ] && break 2\n    done\n  done\n  [ $j -eq ${#b[@]}\
    \ ] && echo \"true\" && return\n  for (( i = $j - 1; i >= 0; i-- )); do\n    [\
    \ ${b[$i]} -lt ${b[$j]} ] && break\n  done\n  [ $i -eq -1 ] && echo \"false\"\
    \ && return\n  m=$(( ${b[$i]} - ${b[$j]} ))\n  (( ${b[$i]} - m >= ${b[$j]} ))\
    \ && echo \"true\" && return\n  echo \"false\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=(\"$@\")\n    # assign\
    \ the first element of the array to the last element.\n    temp=${arr[${#arr[@]}-1]}\n\
    \    (( ${#arr[@]}-1 ))\n    arr[0]=$temp\n    # from the end of the array to\
    \ the beginning, shift elements left.\n    for (( i=${#arr[@]}-1; i > 0; i-- ));\
    \ do\n        arr[$i]=${arr[$(( $i-1 ))]}\n    done\n    echo \"${arr[@]}\"\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a arr=(${@})\n  \
    \  local sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if [ ${arr[$i]} -ne ${sorted[$i]} ]; then\n            return\
    \ 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr=($1)\n  local -a\
    \ src=($1)\n  local n=\"${#arr[@]}\"\n  local i\n  local j\n  local k\n  local\
    \ pos\n  local flag\n\n  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++));\
    \ do\n      for ((k=0; k<n; k++)); do\n        if [[ ${arr[k]} -eq ${src[j]} ]];\
    \ then\n          pos=$k\n          break\n        fi\n      done\n      if [[\
    \ $j -lt $pos ]]; then\n        flag=true\n      else\n        flag=false\n  \
    \      break\n      fi\n    done\n    if [[ $flag == true ]]; then\n      echo\
    \ \"true\"\n      return\n    fi\n    arr=(\"${arr[@]:1}\" \"${arr[0]}\")\n  done\n\
    \  echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Start from the last element\
    \ of the array and check if the element is\n    # greater than any one of the\
    \ preceding elements.\n    # If the element is greater than any one of the preceding\
    \ elements then\n    # return 'false' as it is not possible to get non-decreasing\
    \ order by\n    # performing right shift operation.\n    # Else return 'true'\n\
    \    # To check whether the element is greater than any one of the preceding\n\
    \    # elements, start comparing the element with each of the preceding elements\n\
    \    # one by one, in reverse order and if any element is greater than the\n \
    \   # preceding element then return 'false' else return 'true'.\n\n    # If the\
    \ given array is empty then return 'true'\n    if [ $# -eq 0 ]; then\n       \
    \ echo \"true\"\n        return\n    fi\n\n    flag=1\n    for index in $(seq\
    \ $# -1 1); do\n        for index2 in $(seq $index -1 1); do\n            if [\
    \ ${!index} -lt ${!index2} ]; then\n                flag=0\n                break\n\
    \            fi\n        done\n        if [ $flag -eq 0 ]; then\n            break\n\
    \        fi\n    done\n\n    if [ $flag -eq 0 ]; then\n        echo \"false\"\n\
    \    else\n        echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi5klo9b2.sh: line 46: [: too many arguments

    /tmp/tmpi5klo9b2.sh: line 46: [: too many arguments

    /tmp/tmpi5klo9b2.sh: line 46: [: too many arguments

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -n arr=$1\n  arr=($arr)\n\
    \  local flag=0\n  local temp=0\n  for i in ${!arr[@]}; do\n    for j in ${!arr[@]};\
    \ do\n      if [[ \"${arr[$i]}\" -gt \"${arr[$j]}\" ]]; then\n        let flag=flag+1\n\
    \      fi\n    done\n    if [[ $flag -gt 1 ]]; then\n      echo \"false\"\n  \
    \    return\n    fi\n    let flag=0\n  done\n  echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5z5oh47b.sh: line 26: local: `3 4 5 1 2'': invalid variable name
    for name reference

    /tmp/tmp5z5oh47b.sh: line 26: local: `3 5 10 1 2'': invalid variable name for
    name reference

    /tmp/tmp5z5oh47b.sh: line 26: local: `4 3 1 2'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  input=$1\n  prev=\"$(echo $input\
    \ | awk '{print $1}')\"\n  for val in $input\n  do\n    if [[ $val -lt $prev ]]\n\
    \    then\n      echo \"false\"\n      return\n    fi\n    prev=$val\n  done\n\
    \  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # Write your code here\n  #\
    \ To print results to the standard output you can use echo\n  # Example: echo\
    \ \"Hello world\"\n  if [ $# -eq 0 ]; then\n    echo \"true\"\n    return\n  fi\n\
    \  n=$#\n  len=0\n  #echo $#\n  for ((i=1;i<$n;i++)); do\n    if [ $1 -lt $2 ];\
    \ then\n      len=$((len+1))\n    fi\n    shift\n  done\n  #echo $len\n  if [\
    \ $len -eq $((n-1)) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  for (( i=1; i<${#arr[@]}; i++\
    \ )); do\n    [[ ${arr[$i]} -lt ${arr[$((i-1))]} ]] && echo \"false\" && exit\n\
    \  done\n  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a arr=($1)\n    n=${#arr[@]}\n\
    \    for ((i=0; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n        \
    \    if [ ${arr[i]} -gt ${arr[j]} ]; then\n                temp=${arr[i]}\n  \
    \              arr[i]=${arr[j]}\n                arr[j]=$temp\n            fi\n\
    \        done\n    done\n    echo ${arr[@]}\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local list=($1)\n    local\
    \ array=(\"0\" \"${list[@]}\")\n    local -i i=${#array[@]}-1 # N-1\n    while\
    \ [ $i -gt 0 ]; do\n        local -i j=$i\n        while [ $j -gt 0 ]; do\n  \
    \          if [ \"${array[$j]}\" -lt \"${array[$((j-1))]}\" ]; then\n        \
    \        # Swap elements at j and j-1\n                local temp=\"${array[$j]}\"\
    \n                array[$j]=\"${array[$((j-1))]}\"\n                array[$((j-1))]=\"\
    $temp\"\n            fi\n            j=$((j-1))\n        done\n        i=$((i-1))\n\
    \    done\n    # Here the array must be sorted, see if it is non-decreasing\n\
    \    local -i i=1\n    while [ $i -lt ${#array[@]} ]; do\n        if [ \"${array[$i]}\"\
    \ -lt \"${array[$((i-1))]}\" ]; then\n            echo \"false\"\n           \
    \ return\n        fi\n        i=$((i+1))\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local str=$(echo \"$1\" | tr\
    \ ' ' '\\n' | sort -n | tr '\\n' ' ')\n  if [[ \"$str\" == \"$1\" ]]; then\n \
    \   echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local i x y\n  declare -a arr=\"\
    (${1})\"; arr=($(printf \"%d\\n\" \"${arr[@]}\" | sort -n))\n  for ((i=0; i<=${#arr[@]};\
    \ i++)); do\n    y=${arr[$i]}\n    x=${arr[$((i+1))]}\n    if [[ -z $x ]]; then\n\
    \      return 0\n    elif [[ $y -gt $x ]]; then\n      return 1\n    fi\n  done\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=$1\n    ans=\"true\"\n\
    \    # write your solution here\n    #\n    echo $ans\n}\n\ncandidate() {\n  \
    \  move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  arr=($1)\n  len=${#arr[@]}\n\
    \  idx=0\n  for (( i=0; i<len; i++ )); do\n    if (( ${arr[i]} > ${arr[i+1]} ));\
    \ then\n      if (( i==len-1 )); then\n        (( idx++ ))\n      else\n     \
    \   idx=$(( idx+1 ))\n      fi\n    fi\n  done\n  if (( idx==1 )); then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphmivtmsf.sh: line 30: ((: 2 >  : syntax error: operand expected
    (error token is ">  ")

    /tmp/tmphmivtmsf.sh: line 30: ((: 2 >  : syntax error: operand expected (error
    token is ">  ")

    /tmp/tmphmivtmsf.sh: line 30: ((: 2 >  : syntax error: operand expected (error
    token is ">  ")

    /tmp/tmphmivtmsf.sh: line 30: ((: 2 >  : syntax error: operand expected (error
    token is ">  ")

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  echo \"${1}\" |\n  # Sort input\
    \ by sorted array\n  xargs -n1 |\n  sort -g |\n  # Remove duplicates\n  uniq |\n\
    \  # Check if sorted array contains all elements from input\n  diff -u <(echo\
    \ -e \"${1}\") - |\n  # Return true or false\n  grep -q '^+' && echo \"false\"\
    \ || echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    a=($1)\n    n=${#a[@]}\n \
    \   p=${a[0]}\n    if [[ $n -eq 0 ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n    if [[ $n -eq 1 ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n    if [[ $n -eq 2 ]]; then\n        if [[ ${a[0]} -gt ${a[1]} ]]; then\n\
    \            echo \"false\"\n            return\n        else\n            echo\
    \ \"true\"\n            return\n        fi\n    fi\n    for (( i=1; i<n; i++ ));\
    \ do\n        if [[ ${a[$i]} -lt $p ]]; then\n            echo \"false\"\n   \
    \         return\n        fi\n        p=${a[$i]}\n    done\n    echo \"true\"\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\t# write your code here\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyrotp3wc.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmpyrotp3wc.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local x=\"\"\n    local y=\"\
    \"\n    local a=\"\"\n    local b=\"\"\n    local arr=\"\"\n    while [ -n \"\
    $1\" ]; do\n        x=\"$1\"\n        y=\"$2\"\n        if [ \"$x\" -gt \"$y\"\
    \ ]; then\n            a=\"$x\"\n            b=\"$y\"\n        else\n        \
    \    a=\"$y\"\n            b=\"$x\"\n        fi\n        if [ -z \"$arr\" ]; then\n\
    \            arr=\"$a,$b\"\n        else\n            arr=\"$arr,$a,$b\"\n   \
    \     fi\n        shift\n        shift\n    done\n    echo \"$arr\" | tr , '\\\
    n' | sort -n | tr '\\n' , | sed -e 's/,$//'\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl9jezyal.sh: line 34: [: 3 4 5 1 2: integer expression expected

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Shift all elements of the\
    \ list to the right by 1. The last element of the\n    # list is now the 0th element\n\
    \    shift_right() {\n        list=\"$1\"\n        result=\"$(echo \"${list}\"\
    \ | cut -d' ' -f2-)\"\n        result=\"$(echo \"${result} ${list}\" | cut -d'\
    \ ' -f1)\"\n        echo \"${result}\"\n    }\n    #\n    list=\"$(echo \"$1\"\
    \ | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\"\n    #\n    for((i=0; i<$(echo \"\
    ${list}\" | wc -w); i++)); do\n        result=\"$(shift_right \"${list}\")\"\n\
    \        if [[ \"${result}\" == \"${list}\" ]]; then\n            echo \"true\"\
    \n            return\n        fi\n        list=\"${result}\"\n    done\n    echo\
    \ \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=( $1 )\n    n=${#arr[@]}\n\
    \    for i in $(seq 0 $(( n - 2 )))\n    do\n        if [ ${arr[$i]} -gt ${arr[$((\
    \ i + 1 ))]} ]\n        then\n            # ${arr[$i]} > ${arr[$(( i + 1 ))]}\n\
    \            # This means that the current element is bigger than the next one.\n\
    \            # It is fine, if it is the largest element of the array.\n      \
    \      # This can be checked by checking if the previous element is bigger\n \
    \           # or not.\n            if [ $i -eq 0 ] || [ ${arr[$(( i - 1 ))]} -le\
    \ ${arr[$i]} ]\n            then\n                # ${arr[$(( i - 1 ))]} <= ${arr[$i]}\n\
    \                # The element at the $i is the largest element of the array and\n\
    \                # it is at the right position.\n                continue\n  \
    \          else\n                # ${arr[$(( i - 1 ))]} > ${arr[$i]}\n       \
    \         # The element at the $i is the largest element of the array but\n  \
    \              # it is not at the right position. It is also at a wrong\n    \
    \            # position.\n                echo \"false\"\n                return\n\
    \            fi\n        else\n            # ${arr[$i]} < ${arr[$(( i + 1 ))]}\n\
    \            # This means that the current element is smaller than the next one.\n\
    \            # It is fine, if it is the smallest element of the array.\n     \
    \       # This can be checked by checking if the next element is smaller or\n\
    \            # not.\n            if [ $(( i + 2 )) -eq $n ] || [ ${arr[$(( i +\
    \ 2 ))]} -le ${arr[$(( i + 1 ))]} ]\n            then\n                # ${arr[$((\
    \ i + 2 ))]} <= ${arr[$(( i + 1 ))]}\n                # The element at the $((\
    \ i + 1 )) is the smallest element of\n                # the array and it is at\
    \ the right position.\n                continue\n            else\n          \
    \      # ${arr[$(( i + 2 ))]} > ${arr[$(( i + 1 ))]}\n                # The element\
    \ at the $(( i + 1 )) is the\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1b3lku1p.sh: line 66: syntax error near unexpected token `}''

    /tmp/tmp1b3lku1p.sh: line 66: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # Local Vars\n  local OUTPUT_ARRAY\
    \  \n  local COUNTER\n  local VARIABLE\n  local TEMP\n  local INPUT_LIST\n  INPUT_LIST=$1\n\
    \  TEMP=\"\"\n  COUNTER=0\n  # Increment by one as shift doesn't read the first\
    \ element in the list \n  let COUNTER++\n  # Convert all elements of the list\
    \ to integers\n  for VARIABLE in $INPUT_LIST\n  do\n    OUTPUT_ARRAY[$COUNTER]=$(echo\
    \ \"$VARIABLE\" | bc)\n    let COUNTER++\n  done\n  let COUNTER--\n  # Sort the\
    \ array and compare it with the original list\n  for VARIABLE in $(echo \"${OUTPUT_ARRAY[@]}\"\
    \ | tr \" \" \"\\n\" | sort -n)\n  do\n    TEMP=\"$TEMP $VARIABLE\"\n  done\n\
    \  if [ \"$1\" == \"$TEMP\" ]\n  then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # The function will find the\
    \ smallest number in the list and output\n    # the index of that number.\n  \
    \  #\n    # Output: An integer\n    #\n    # $1 is a space-separated list\n  \
    \  #\n    # Examples:\n    # >>> find_index_of_smallest_number $(echo 1 2 3)\n\
    \    # \"0\"\n    # >>> find_index_of_smallest_number $(echo 3 2 1)\n    # \"\
    2\"\n    find_index_of_smallest_number() {\n        local arr=\"$1\"\n       \
    \ local smallest=$(echo \"$arr\" | head -n 1)\n        local index=0\n       \
    \ local current_index=0\n        for i in $arr; do\n            if [ $i -lt $smallest\
    \ ]; then\n                smallest=$i\n                index=$current_index\n\
    \            fi\n            current_index=$(( $current_index + 1 ))\n       \
    \ done\n        echo $index\n    }\n\n    local -i N=$(echo \"$1\" | wc -w)\n\
    \    local arr=$1\n    local sorted_arr=$(echo \"$arr\" | sort -n)\n    local\
    \ -i i=0\n    local -i index_of_smallest_number\n    while [ \"$arr\" != \"$sorted_arr\"\
    \ ] && [ $i -lt $N ]; do\n        index_of_smallest_number=$(find_index_of_smallest_number\
    \ \"$arr\")\n        arr=$(echo \"$arr\" | tail -n +$(( $index_of_smallest_number\
    \ + 1 )) | tr '\\n' ' ' | tr -s ' ')\n        arr=$(echo \"$arr\" $(echo \"$arr\"\
    \ | head -n 1))\n        i=$(( $i + 1 ))\n    done\n    if [ \"$arr\" == \"$sorted_arr\"\
    \ ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr_string=\"$1\"\n\
    \    IFS=' ' read -r -a arr <<< \"$arr_string\"\n    if [ -z \"$arr_string\" ];\
    \ then\n        echo \"true\"\n        return\n    fi\n    local i=0\n    local\
    \ j=0\n    local i_max=$((${#arr[@]} - 1))\n    local j_max=$((${#arr[@]} - 1))\n\
    \    for ((i=0; i<i_max; i++)); do\n        for ((j=i+1; j<=j_max; j++)); do\n\
    \            if [ ${arr[i]} -gt ${arr[j]} ]; then\n                local tmp=${arr[i]}\n\
    \                arr[i]=${arr[j]}\n                arr[j]=$tmp\n            fi\n\
    \        done\n    done\n    echo \"${arr[@]}\"\n    if [ ${arr[0]} -eq $1 ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzb47f6q7.sh: line 46: [: too many arguments

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a arr=($1)\n    #\
    \ Return true if arr is empty\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo\
    \ true\n        return\n    fi\n    # Find the minimum element in arr\n    declare\
    \ -i min=${arr[0]}\n    for i in ${arr[@]}; do\n        [[ $i -lt $min ]] && min=$i\n\
    \    done\n    # Return true if all elements are equal to the minimum element\n\
    \    [[ ${#arr[@]} -eq $(printf '%s\\n' \"${arr[@]}\" | grep -c $min) ]] && {\n\
    \        echo true\n        return\n    }\n    # Return false if array is unsorted\n\
    \    [[ $(printf '%s\\n' \"${arr[@]}\" | sort -n) != $(printf '%s\\n' \"${arr[@]}\"\
    ) ]] && {\n        echo false\n        return\n    }\n    # Return true if array\
    \ is sorted\n    echo true\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a numbers=($1)\n  \
    \  local n=$((${#numbers[@]}-1))\n    local m=0\n    if [ \"$n\" -le \"0\" ];\
    \ then\n        echo \"true\"\n        return\n    fi\n    # sort array in increasing\
    \ order\n    for ((i=0; i<$n; i++)); do\n        for ((j=i+1; j<=$n; j++)); do\n\
    \            if [ \"${numbers[$i]}\" -gt \"${numbers[$j]}\" ]; then\n        \
    \        tmp=${numbers[$i]}\n                numbers[$i]=${numbers[$j]}\n    \
    \            numbers[$j]=$tmp\n            fi\n        done\n    done\n    # check\
    \ if non-decreasing order can be obtained by shifting elements\n    # right.\n\
    \    #   If a[i] is greater than a[i+1] then min(a[j]) > a[i+1] or\n    #   min(a[j])\
    \ > a[i] for all 0 <= j <= i.\n    for ((i=0; i<$n; i++)); do\n        for ((j=0;\
    \ j<=$i; j++)); do\n            if [ \"${numbers[$j]}\" -lt \"${numbers[$i+1]}\"\
    \ ]; then\n                break\n            fi\n        done\n        if [ \"\
    $j\" -eq \"$i\" ]; then\n            echo \"false\"\n            return\n    \
    \    fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  echo \"$1\" |\n  sed -e 's/[[:space:]]\\\
    +/\\n/g' | # separate the numbers by newlines\n  # `sort -n` will sort the numbers\
    \ in ascending order,\n  # but it is considered to be a right shift operation\n\
    \  # to get the sorted array\n  # `head -n 1` will get the first element\n  #\
    \ `tail -n +2` will take everything after the first element\n  awk '{ print $0\
    \ } END { print NR - 1 }' | # number of right shift operations\n  sort -n |\n\
    \  head -n 1 |\n  tail -n +2\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -n arr=$1\n  local next_ball\n\
    \  local -a ball_nums\n  for ball in $arr; do\n    if [[ \"$ball\" =~ ^[0-9]+$\
    \ ]]; then\n      next_ball=$(( ball + 1 ))\n      if [[ \"${ball_nums[@]}\" =~\
    \ \"$next_ball\" ]]; then\n        echo \"true\"\n        break\n      else\n\
    \        ball_nums+=( \"$ball\" )\n      fi\n    else\n      echo \"error: non-numeric\
    \ input\"\n      break\n    fi\n  done\n  if [[ \"${#ball_nums[@]}\" -eq \"${#arr[@]}\"\
    \ ]]; then\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp67fg_th8.sh: line 26: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local a=(\"$@\")\n  local b=(\"\
    $@\")\n  sort -n <<<\"${a[*]}\"\n  if [ \"${a[*]}\" = \"${b[*]}\" ]; then\n  \
    \  echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # The maximum value can be\
    \ stored in a variable.\n    local max=$(max_array \"$1\")\n    # The minimum\
    \ value can be stored in a variable.\n    local min=$(min_array \"$1\")\n    #\
    \ Sort the array and store the sorted array in a variable.\n    local sorted=$(sort_array\
    \ \"$1\")\n    # Write your code here.\n    # Store the result in a variable 'result'\
    \ and return it.\n    # In place of 0 you can return 'true' or 'false'\n    #\
    \ depending on the result.\n    local result=\"false\"\n    [ \"$min\" -eq \"\
    1\" ] && [ \"$max\" -eq \"$(echo \"$1\" | wc -w)\" ] && [ \"$1\" == \"$sorted\"\
    \ ] && result=\"true\"\n    echo \"$result\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_gqcn13u.sh: line 27: max_array: command not found

    /tmp/tmp_gqcn13u.sh: line 29: min_array: command not found

    /tmp/tmp_gqcn13u.sh: line 31: sort_array: command not found

    /tmp/tmp_gqcn13u.sh: line 37: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    temp=${1}\n    # Let's split\
    \ the string into an array\n    declare -a arr=(\"${temp// /}\")\n    # We have\
    \ to check if the last element is greater than the \n    # second last element.\n\
    \    local len=${#arr[@]}\n    if [ ${arr[$len-1]} -gt ${arr[$len-2]} ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local l=()\n    local n\n\
    \    IFS=' ' read -r -a l <<< \"$1\"\n    local n=${#l[@]}\n    local val=${l[0]}\n\
    \    for ((i=1; i<n; i++)); do\n        if (( ${l[i]} < val )); then\n       \
    \     echo \"false\"\n            return\n        fi\n        val=${l[i]}\n  \
    \  done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 0
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    count=0\n    last_num=0\n\
    \    arr=$(echo $1 | tr \" \" \"\\n\")\n    for num in $arr\n    do\n        if\
    \ [[ $num -lt $last_num ]]\n        then\n            count=$((count+1))\n   \
    \     fi\n        last_num=$num\n    done\n    if [[ $count -gt 1 ]]\n    then\n\
    \        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  echo $1 | awk '{ delete n; n[$1]++;\
    \ n[$2]++; n[$3]++; n[$4]++; n[$5]++;\n    if ((n[1] == 0 || n[2] == 0 || n[3]\
    \ == 0 || n[4] == 0 || n[5] == 0) &&\n    (n[1] == 1 || n[2] == 1 || n[3] == 1\
    \ || n[4] == 1 || n[5] == 1))\n    print \"true\"; else print \"false\"; }'\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local list=($1)\n  # TODO\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tlocal -a arr\n\tIFS=' ' read\
    \ -a arr <<< $1\n\tif [[ ${#arr[@]} == 0 ]]; then\n\t\techo true\n\t\treturn\n\
    \tfi\n\tlocal count=0\n\tfor i in ${arr[@]}; do\n\t\tif [[ $i -lt ${arr[0]} ]];\
    \ then\n\t\t\t((count++))\n\t\tfi\n\tdone\n\tif [[ count -eq ${#arr[@]} || count\
    \ -eq 0 ]]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ arrSize=${#arr[@]}\n    local j=1\n    local g=$((arrSize - 1))\n    for ((\
    \ i=0; i<g; i++ )); do\n        if [[ ${arr[i]} -gt ${arr[j]} ]]; then\n     \
    \       for (( j=i+1; j<arrSize; j++ )); do\n                if [[ ${arr[i]} -gt\
    \ ${arr[j]} ]]; then\n                    echo \"false\"\n                   \
    \ return\n                fi\n            done\n        fi\n    done\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=\"$1\"\n  local count=0\n\
    \  while IFS=' ' read -ra arr; do\n    echo \"Current array: ${arr[@]}\"\n   \
    \ for i in \"${!arr[@]}\"; do\n      for j in \"${!arr[@]}\"; do\n        if [[\
    \ $i -lt $j ]]; then\n          if [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n   \
    \         echo \"Switching ${arr[$i]} and ${arr[$j]}\"\n            arr[$i]=\"\
    ${arr[$j]}\"\n            arr[$j]=\"${arr[$i]}\"\n            count=$((count+1))\n\
    \          fi\n        fi\n      done\n    done\n  done <<< \"$arr\"\n  if [[\
    \ $count -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  shift $((OPTIND-1))\n  arr=($1)\n\
    \  # Write your code here\n  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tif [[ $# -eq 0 ]]; then\n\t\t\
    return 1\n\tfi\n\tlocal arr=(\"$@\")\n\tlocal len=${#arr[@]}\n\tlocal i=0\n\t\
    local is_a_match=0\n\tlocal max=${arr[$i]}\n\tfor ((i=1; i<$len; i++)); do\n\t\
    \tif [[ $max -gt ${arr[$i]} ]]; then\n\t\t\treturn 1\n\t\tfi\n\t\tmax=${arr[$i]}\n\
    \tdone\n\techo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  array=( $1 )\n  n=${#array[@]}\n\
    \  if [[ $n -le 1 ]]; then\n    echo true\n    return\n  fi\n  i=0\n  while [[\
    \ $i -lt $n && ${array[$i]} -le ${array[$i+1]} ]]; do\n    ((i++))\n  done\n \
    \ if [[ $i -eq $n ]]; then\n    echo true\n    return\n  fi\n  i=$((n-1))\n  while\
    \ [[ $i -gt 0 && ${array[$i]} -ge ${array[$i-1]} ]]; do\n    ((i--))\n  done\n\
    \  j=$((i-1))\n  while [[ $j -ge 0 && ${array[$j]} -ge ${array[$i]} ]]; do\n \
    \   ((j--))\n  done\n  if [[ $j -ge 0 ]]; then\n    echo false\n    return\n \
    \ fi\n  j=$((i+1))\n  while [[ $j -lt $n && ${array[$j]} -ge ${array[$i]} ]];\
    \ do\n    ((j++))\n  done\n  if [[ $j -lt $n ]]; then\n    echo false\n    return\n\
    \  fi\n  echo true\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a arr\n    arr=(${1})\n\
    \    declare -i size=${#arr[@]}\n    declare -i i=0 j=0\n    for (( i=0; i<${size};\
    \ i++ )); do\n        for (( j=i+1; j<${size}; j++ )); do\n            if [[ ${arr[i]}\
    \ -gt ${arr[j]} ]]; then\n                break\n            fi\n        done\n\
    \        if [[ ${j} -eq ${size} ]]; then\n            echo \"true\"\n        \
    \    return\n        fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n  \
    \  move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    if [ -z \"$1\" ]; then\n \
    \       echo \"true\"\n        return\n    fi\n    arr=( $1 )\n    n=${#arr[@]}\n\
    \    i=0\n    while [ $i -lt $n ]\n    do\n        if [ $i -eq $(($n-1)) ]; then\n\
    \            echo \"true\"\n            return\n        fi\n        j=$(($i+1))\n\
    \        if [ ${arr[$i]} -gt ${arr[$j]} ]; then\n            ((j++))\n       \
    \     while [ $j -lt $n ]\n            do\n                if [ ${arr[$i]} -gt\
    \ ${arr[$j]} ]; then\n                    echo \"false\"\n                   \
    \ return\n                fi\n                ((j++))\n            done\n    \
    \        echo \"true\"\n            return\n        fi\n        ((i++))\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # 1. Convert the space-separated\
    \ list to an array\n    arr=($1)\n    # 2. Check if the number of elements in\
    \ the array is 1\n    # If so, the number is 0, since the list is not empty.\n\
    \    if [ ${#arr[@]} -eq 1 ]; then\n        echo \"true\"\n        return\n  \
    \  fi\n    # 3. Initialize the start and end of the array to 1 and the total number\
    \ of\n    # elements, respectively.\n    start=1\n    end=${#arr[@]}\n    # 4.\
    \ Check if the first number of the array is 0.\n    # If so, the number is 0,\
    \ since the list is not empty.\n    if [ ${arr[0]} -eq 0 ]; then\n        echo\
    \ \"true\"\n        return\n    fi\n    # 5. Loop through the array elements and\
    \ check if the next element is either\n    # the first number of the array, or\
    \ the first number + 1.\n    while [ $start -lt $end ]; do\n        if [ ${arr[$start]}\
    \ -eq ${arr[0]} -o ${arr[$start]} -eq $(( ${arr[0]} + 1 )) ]; then\n         \
    \   # If so, increment the counter.\n            start=$(( start + 1 ))\n    \
    \    else\n            # Else, it is not possible to sort the array.\n       \
    \     echo \"false\"\n            return\n        fi\n    done\n    # If all numbers\
    \ check out, it is possible to sort the array.\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # init all variables\n   \
    \ curr=0;\n    i=0;\n    # iterate over the list and right-shift by 1\n    for\
    \ itr in $1; do\n        # the array is 0-indexed, so the initial index is 0\n\
    \        curr=`expr $i % $#`\n        # update the ith element and increment the\
    \ iterator by 1\n        arr[$curr]=$itr\n        i=`expr $i + 1`\n    done\n\
    \    # we got the required array in `arr`\n    # now check if the array is sorted\n\
    \    for ((i=0; i<$#-1; i++)); do\n        if [ ${arr[$i]} -gt ${arr[$i+1]} ];\
    \ then\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 0
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    [[ ${#arr[@]}\
    \ == 0 ]] && echo \"true\" && return\n    i=0\n    while (( i < ${#arr[@]} ))\
    \ && (( ${arr[i]} < ${arr[i+1]} )); do\n        ((i++))\n    done\n    [[ $i ==\
    \ $(( ${#arr[@]} - 1 )) ]] && echo \"true\" && return\n    j=$(( i + 1 ))\n  \
    \  while (( j < ${#arr[@]} )) && (( ${arr[j]} < ${arr[j+1]} )); do\n        ((j++))\n\
    \    done\n    [[ $j == $(( ${#arr[@]} - 1 )) ]] && echo \"true\" && return\n\
    \    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpvjzbxxgh.sh: line 34: ((: 2 <  : syntax error: operand expected
    (error token is "<  ")

    /tmp/tmpvjzbxxgh.sh: line 34: ((: 2 <  : syntax error: operand expected (error
    token is "<  ")

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # write your solution here\n\
    \  local ball_list=\"$1\"\n  local num_swaps=0\n  local count=0\n  local i=0\n\
    \  local j=0\n  local temp=0\n  local total_balls=0\n  local ball_arr=()\n  #change\
    \ all whitespace to a single space\n  IFS=' '\n  ball_list=$(echo $ball_list |\
    \ tr -s ' ')\n  total_balls=$(echo $ball_list | wc -w)\n  ball_arr=($ball_list)\n\
    \  for ((i=0; i<(total_balls-1); i++))\n  do\n    for ((j=(i+1); j<total_balls;\
    \ j++))\n    do\n      if [[ ${ball_arr[$i]} -gt ${ball_arr[$j]} ]]\n      then\n\
    \        ((count++))\n      fi\n    done\n  done\n  if [[ $count -eq 0 ]]\n  then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ n=${#arr[@]}\n    local flag=0\n    for((i=0;i<n-1;i++))\n    do\n        if\
    \ [ \"${arr[$i]}\" -gt \"${arr[$((i+1))]}\" ]\n        then\n            flag=1\n\
    \            break\n        fi\n    done\n    if [ $flag -eq 0 ]\n    then\n \
    \       echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    result=\"\"\n    arr=(\"$@\"\
    )\n    first=$(echo ${arr[0]} | cut -d \" \" -f 1)\n    #For all elements in the\
    \ array:\n    for ((i=1; i<${#arr[@]}; i++)); do\n        #echo ${arr[$i]}\n \
    \       #If the element is less than the first element in the array,\n       \
    \ #we can right shift once.\n        if [ ${arr[$i]} -lt $first ]; then\n    \
    \        #echo ${arr[$i]}\n            result=\"true\"\n            break\n  \
    \      fi\n    done\n    #If no element was less than the first element in the\
    \ array,\n    #it is not possible to sort.\n    if [ -z $result ]; then\n    \
    \    result=\"false\"\n    fi\n    echo $result\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    echo \"$1\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  arr=($1)\n  arraylen=${#arr[@]}\n\
    \  for (( i=0; i<$arraylen; i++ ))\n  do\n    if [ ${arr[$i]} -gt ${arr[$(( $i\
    \ + 1 ))]} ]\n    then\n      break\n    fi\n  done\n  for (( j=$(( $i + 1 ));\
    \ j<$arraylen; j++ ))\n  do\n    if [ ${arr[$j]} -lt ${arr[$i]} ]\n    then\n\
    \      echo \"false\"\n      exit 0\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: -1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local array=($1)\n    local\
    \ N=${#array[@]}\n    for i in `seq 0 $(( $N - 2 ))`; do\n        [[ ${array[$i]}\
    \ -gt ${array[$(( $i + 1 ))]} ]] && {\n            local j=$(( $i + 1 ))\n   \
    \         while [[ ${array[$j]} -lt ${array[$i]} ]]; do\n                let j++\n\
    \            done\n            local tmp=${array[$i]}\n            array[$i]=${array[$j]}\n\
    \            array[$j]=$tmp\n        }\n    done\n    [[ ${array[$(( $N - 1 ))]}\
    \ -gt ${array[0]} ]] && echo \"false\" || echo \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=43 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660022873
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n        num=${arr[$i]}\n        if [ \"$num\" -lt\
    \ \"$min\" ]; then\n            max=$min\n            min=$num\n        elif [\
    \ \"$num\" -gt \"$max\" ]; then\n            max=$num\n        elif [ \"$num\"\
    \ -lt \"$max\" ]; then\n            echo \"false\"\n            return 0\n   \
    \     fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 29: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 32: [: : integer expression expected

    /tmp/tmpnvnt6896.sh: line 34: [:'
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=$1\n    if [[ \"$arr\"\
    \ == \"\" ]]; then\n        echo \"true\"\n        return\n    fi\n    sorted=`echo\
    \ \"$arr\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '`\n    if [[ \"$arr\" == \"\
    $sorted\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($@)\n    arr2=($@)\n\
    \    # check if empty\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo \"true\"\
    \n        return 0\n    fi\n    # sort\n    for ((j=0; j<${#arr[@]}; j++)); do\n\
    \        for ((i=0; i<${#arr[@]}-1; i++)); do\n            if [[ ${arr[i]} -gt\
    \ ${arr[i+1]} ]]; then\n                arr[i]=${arr[i+1]}\n                arr[i+1]=${arr[i]}\n\
    \            fi\n        done\n    done\n    for ((i=0; i<${#arr[@]}; i++)); do\n\
    \        if [[ ${arr[i]} -ne ${arr2[i]} ]]; then\n            echo \"true\"\n\
    \            return 0\n        fi\n    done\n    echo \"false\"\n    return 0\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local max=0 min=0\n  for i in\
    \ $1; do\n    if [[ $i -gt $max ]]; then\n      max=$i\n    fi\n    if [[ $i -lt\
    \ $min ]]; then\n      min=$i\n    fi\n  done\n  [[ $max -eq $min ]] && echo \"\
    true\" || echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  arr=($1)\n  # Ensure we're working\
    \ on a local copy of the array\n  arr_copy=(\"${arr[@]}\")\n  # If all the elements\
    \ of the array are same, we can't use right shift to\n  # reach non-decreasing\
    \ order\n  same=1\n  for i in ${arr[@]}\n  do\n    if [[ ${arr[0]} -ne $i ]]\n\
    \    then\n      same=0\n      break\n    fi\n  done\n  if [[ $same -eq 1 ]]\n\
    \  then\n    echo \"false\"\n    return\n  fi\n  # Since the given array is of\
    \ size N, we could get a maximum of N-1 right\n  # shifts\n  for i in `seq 0 $((${#arr[@]}-1))`\n\
    \  do\n    # Find the minimum element in the array\n    min=${arr[0]}\n    min_index=0\n\
    \    for j in `seq 1 $((${#arr[@]}-1))`\n    do\n      if [[ ${arr[$j]} -lt $min\
    \ ]]\n      then\n        min=${arr[$j]}\n        min_index=$j\n      fi\n   \
    \ done\n    # We have obtained the minimum element in the array. Now we need to\
    \ check\n    # if this is at the correct position\n    # If the minimum is at\
    \ the correct position i.e. 0th index, we need to\n    # look for the next minimum\
    \ element in the array\n    if [[ $min_index -eq 0 ]]\n    then\n      continue\n\
    \    fi\n    # If we have found an element which is less than the element at position\
    \ 0\n    # then we need to check whether it is possible to get the sorted array\
    \ by\n    # performing right shift operations.\n    # We need to perform the right\
    \ shift operation so that the minimum element\n    # is at the 0th index, and\
    \ then see if the rest of the array is sorted\n    # Use the original array to\
    \ perform right shift operation and then compare\n    # the resulting array with\
    \ the sorted array\n    # If these two arrays are identical, then we can return\
    \ true else we\n    # return false\n    # This will also ensure that we don't\
    \ need to perform all the right shift\n   \n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1e5jm575.sh: line 79: syntax error near unexpected token `}''

    /tmp/tmp1e5jm575.sh: line 79: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=( $1 )\n    count=${#arr[@]}\n\
    \    for ((i=0; i<count; i++)); do\n        tmp=${arr[@]:0:i}\n        tmp+=\"\
    \ ${arr[@]:$((i+1)):$((count-i-1))}\"\n        tmp+=\" ${arr[$i]}\"\n        tmp=(\
    \ $tmp )\n        if [[ \"${tmp[*]}\" = \"${arr[*]}\" ]]; then\n            echo\
    \ \"true\"\n            return\n        fi\n    done\n    echo \"false\"\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Given an array of integers,\
    \ sort it, and compare it to the\n    # original. If they are the same, then it's\
    \ possible.\n    local new_array=()\n    local i\n    for i in $1; do\n      \
    \  new_array+=(\"$i\")\n    done\n    # Sort\n    old_IFS=$IFS\n    IFS=$' '\n\
    \    new_array=($(sort <<< \"${new_array[*]}\"))\n    IFS=$old_IFS\n    # Compare\n\
    \    local j\n    for j in \"${!new_array[@]}\"; do\n        if [[ \"${new_array[$j]}\"\
    \ != \"${1[$j]}\" ]]; then\n            echo \"false\"\n            return 0\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpczine4z_.sh: line 41: ${1[$j]}: bad substitution

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    #\n    # Write your code here.\n\
    \    #\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmvdxkxij.sh: line 29: syntax error near unexpected token `}''

    /tmp/tmpmvdxkxij.sh: line 29: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local answer=$(mawk 'BEGIN{\n\
    \      RS=\" \";\n      ORS=\" \";\n      sorted=1;\n      while(( getline x )>0){\n\
    \        ar[NR] = x;\n        if (NR>1 && ar[NR-1] > ar[NR]){sorted=0}\n     \
    \ }\n      if (sorted==1){print 1}else{print 0}\n    }'< <(echo $@))\n  echo $answer\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  declare -a vars=$1\n  if [[\
    \ ${#vars[@]} -lt 2 ]]; then\n    echo true\n    return\n  fi\n  declare -a diffs\n\
    \  for ((i=0; i<${#vars[@]}; i++)); do\n    diffs+=($(( vars[$((i+1))] - vars[$i]\
    \ )))\n  done\n  sum=0\n  for ((i=0; i<${#diffs[@]}; i++)); do\n    sum=$(( sum\
    \ + diffs[$i] ))\n  done\n  if [[ $sum -ge 0 ]]; then\n    echo true\n  else\n\
    \    echo false\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    if [[ ! $1 ]]; then\n    \
    \    # Empty list: true\n        echo \"true\"\n        return\n    fi\n    #\
    \ Array of integers\n    local arr=($1)\n    local num_balls=${#arr[@]}\n    if\
    \ [[ $num_balls -le 1 ]]; then\n        # One or zero ball: true\n        echo\
    \ \"true\"\n        return\n    fi\n    # Check if elements are the same\n   \
    \ # NOTE: This only works because we have integers.\n    if [[ \"$(printf \"%s\\\
    n\" \"${arr[@]}\" | sort -u | wc -l)\" -eq 1 ]]; then\n        # Same ball: true\n\
    \        echo \"true\"\n        return\n    fi\n    # List of increasing distances\
    \ (radii)\n    local dist_arr=(0)\n    # Pre-initialize array\n    for (( i=1;\
    \ i<${#arr[@]}; i++ )); do\n        dist_arr+=(0)\n    done\n    # Distance is\
    \ number of balls between a given ball and the next smallest\n    for (( i=0;\
    \ i<${#arr[@]}; i++ )); do\n        for (( j=0; j<${#arr[@]}; j++ )); do\n   \
    \         if [[ $j -ne $i ]]; then\n                if [[ ${arr[$j]} -lt ${arr[$i]}\
    \ ]]; then\n                    dist_arr[$i]=$((dist_arr[$i]+1))\n           \
    \     fi\n            fi\n        done\n    done\n    local all_same=true\n  \
    \  for (( i=0; i<${#dist_arr[@]}; i++ )); do\n        if [[ ${dist_arr[$i]} -ne\
    \ ${dist_arr[0]} ]]; then\n            all_same=false\n            break\n   \
    \     fi\n    done\n    if $all_same; then\n        # Sorted list: true\n    \
    \    echo \"true\"\n        return\n    fi\n    echo \"false\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=$1\n    local sorted=\"\
    $(echo \"$arr\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\"\n    if [[ \"$arr\"\
    \ = \"$sorted\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    re='^[0-9]+$'\n    for n in\
    \ $1; do\n        if ! [[ $n =~ $re ]]; then\n            echo \"error: Not a\
    \ number\" >&2; exit 1\n        fi\n    done\n    local target=$(echo $1 | awk\
    \ '{print $1}')\n    local arr=($1)\n    local len=${#arr[@]}\n    for (( i=1;\
    \ i<$len; i++ )); do\n        if [ ${arr[$i]} -ge $target ]; then\n          \
    \  target=${arr[$i]}\n        else\n            echo \"false\"\n            exit\
    \ 0\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    list=$1\n    arr=($list)\n\
    \    n=${#arr[@]}\n    i=0\n    while [[ $i -lt $n ]]; do\n        if [[ ${arr[$i]}\
    \ -lt ${arr[$((i+1))]} ]]; then\n            ((i++))\n        else\n         \
    \   arr=(${arr[@]:$((i+1))} ${arr[@]:0:$((i+1))})\n            break\n       \
    \ fi\n    done\n    ((n > 0)) && [[ ${arr[@]} = $list ]] && echo \"true\" || echo\
    \ \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  local size=${#arr[@]}\n\
    \  # start with the second value\n  local curr=1\n  while [ $curr -lt $size ];\
    \ do\n    if [ ${arr[$curr]} -gt ${arr[$((curr - 1))]} ]; then\n      (( curr++\
    \ ))\n    else\n      # Move the last value to the first position\n      local\
    \ curr_val=${arr[$curr]}\n      for (( i=$curr; i > 0; i-- )); do\n        arr[$i]=${arr[$((i\
    \ - 1))]}\n      done\n      arr[0]=$curr_val\n      (( curr++ ))\n    fi\n  done\n\
    \  # Determine if the array is sorted\n  local is_sorted=true\n  for (( i=1; i\
    \ < size; i++ )); do\n    if [ ${arr[$i]} -lt ${arr[$((i - 1))]} ]; then\n   \
    \   is_sorted=false\n      break\n    fi\n  done\n  echo $is_sorted\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=( $1 )\n    if [ ${#arr[@]}\
    \ -lt 1 ]; then\n        echo \"true\"\n        return\n    fi\n    for i in ${!arr[@]};\
    \ do\n        if [ $i -eq 0 ]; then\n            continue\n        fi\n      \
    \  if [ ${arr[$i]} -lt ${arr[$i-1]} ]; then\n            # It cannot be sorted\
    \ by this shift\n            echo \"false\"\n            return\n        fi\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    [[ $# -ne 1 ]] && { echo \"\
    move_one_ball(): Need exactly one argument\" >&2; exit 1; }\n    [[ \"$1\" ==\
    \ \"\" ]] && { echo \"true\"; return; }\n\n    # Convert to numeric array\n  \
    \  read -a arr <<< \"$1\"\n    # Base case: All elements in array are same; return\
    \ true\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -ne ${arr[0]}\
    \ ]]; then\n            break\n        fi\n    done\n    if [[ $i -eq ${#arr[@]}\
    \ ]]; then\n        echo \"true\"\n        return\n    fi\n\n    # Check if decreasing\
    \ order\n    for ((i=1; i<${#arr[@]}; i++)); do\n        if [[ ${arr[$i]} -gt\
    \ ${arr[$i-1]} ]]; then\n            echo \"true\"\n            return\n     \
    \   fi\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=$1\n    n=0\n    for i\
    \ in $arr; do\n        arr[$n]=$i\n        n=$((n+1))\n    done\n    # Binary\
    \ search to find the index of the maximum element in the array\n    lo=0\n   \
    \ hi=$((n-1))\n    while ((lo<hi)); do\n        mid=$((lo+(hi-lo)/2))\n      \
    \  if ((arr[mid]<arr[mid+1])); then\n            lo=$((mid+1))\n        else\n\
    \            hi=$mid\n        fi\n    done\n    max_index=$lo\n    # Check if\
    \ the maximum element is at index 0\n    if ((max_index==0)); then\n        echo\
    \ \"true\"\n    else\n        # Check if all the elements to the left of the maximum\
    \ element\n        # are smaller than it\n        for ((i=0; i<max_index; i++));\
    \ do\n            if ((arr[i]>arr[max_index])); then\n                echo \"\
    false\"\n                return\n            fi\n        done\n        echo \"\
    true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local list=($1)\n    local\
    \ len=$((${#list[@]} - 1))\n    local l=0\n    local f=0\n    for ((l = 0; l <\
    \ len; l++)); do\n        if [[ ${list[$l]} -gt ${list[$((l + 1))]} ]]; then\n\
    \            if [[ ${list[$((len))]} -gt ${list[$l]} ]]; then\n              \
    \  list[$l]=${list[$((len))]}\n                list[$((len))]=${list[$((l + 1))]}\n\
    \                f=1\n            fi\n        fi\n    done\n    if [[ $f -eq 1\
    \ ]]; then\n        echo \"$(move_one_ball \"${list[@]}\")\"\n    else\n     \
    \   echo \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    # shellcheck\
    \ disable=SC2207\n    arr=($1)\n    local -i i=0\n    local -i temp j count=0\n\
    \    for (( i=0; i<${#arr[@]}; i++ ))\n    do\n        # shellcheck disable=SC2034\n\
    \        temp=${arr[$i]}\n        # shellcheck disable=SC2034\n        j=$i\n\
    \        while (( j>0 && temp<arr[j-1] ))\n        do\n            arr[j]=${arr[j-1]}\n\
    \            (( j-- ))\n        done\n        arr[j]=$temp\n    done\n    for\
    \ (( i=0; i<${#arr[@]}-1; i++ ))\n    do\n        if (( arr[i]>arr[i+1] ))\n \
    \       then\n            (( count++ ))\n        fi\n    done\n    if (( count\
    \ == 0 ))\n    then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tlocal arr=(${1// / })\n\tlocal\
    \ len=${#arr[@]}\n\tif [ $len -eq 0 ]; then\n\t\techo \"true\"\n\t\treturn\n\t\
    fi\n\t# Find the last index of the max element in the array. This will be the\n\
    \t# pivot point.\n\tlocal index_max=$(($len - 1))\n\tlocal max=${arr[$index_max]}\n\
    \tfor (( i = $index_max - 1; i >= 0; i-- )); do\n\t\tif [ ${arr[$i]} -gt $max\
    \ ]; then\n\t\t\tmax=${arr[$i]}\n\t\t\tindex_max=$i\n\t\tfi\n\tdone\n\t# If the\
    \ last element is at the pivot point then the array is already\n\t# sorted.\n\t\
    if [ $index_max -eq $(($len - 1)) ]; then\n\t\techo \"true\"\n\t\treturn\n\tfi\n\
    \tlocal found=false\n\tfor (( i = 0; i < $index_max; i++ )); do\n\t\tif [ ${arr[$i]}\
    \ -gt ${arr[$(($i + 1))]} ]; then\n\t\t\tfound=true\n\t\t\tbreak\n\t\tfi\n\tdone\n\
    \tif [ $found = true ]; then\n\t\techo \"false\"\n\telse\n\t\techo \"true\"\n\t\
    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  local -i i max=0\n\
    \  local temp\n  read -a arr <<< $1\n  for ((i=0; i<${#arr[@]}; i++)); do\n  \
    \  ((arr[i] > max)) && max=${arr[i]}\n  done\n  ((max > 1)) && echo \"true\" ||\
    \ echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Code here\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0mjboloo.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmp0mjboloo.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # By performing one shift operation,\
    \ it will become possible to get a\n  # non-decreasing order if the minimum element\
    \ is at index 0, and the maximum\n  # element is at index \"i\", where \"i\" is\
    \ the last index of the array.\n  # So the logic is: to find an index \"i\" where\
    \ the maximum element is at that\n  # index and the minimum element is at the\
    \ index 0.\n  # To find the minimum element at index 0, we can find the minimum\
    \ element in\n  # the list and simply check if it is at the index 0 of the array.\n\
    \  # However, there is another short cut to do so.\n  # We can find the maximum\
    \ element in the array and check if it is at the\n  # index \"i\" of the array.\n\
    \  local nums=($(echo $1))\n  local max_elem=$(echo ${nums[@]} | awk '{for(i=1;i<=NF;i++)if($i>max)max=$i;print\
    \ max}')\n  # We can find the maximum value in the list using a shell loop too:\n\
    \  #for i in ${nums[@]}; do\n  #  if [ $i -gt $max_elem ]; then\n  #    max_elem=$i\n\
    \  #  fi\n  #done\n  #echo $max_elem\n  if [ ${nums[${#nums[@]}-1]} -eq $max_elem\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    if [[ -z \"$1\" ]]; then\n\
    \        echo \"true\"\n        return\n    fi\n    local input=($(echo \"$1\"\
    ))\n    local largest_value=$(echo \"${input[@]}\" | sort -nr | head -n 1)\n \
    \   local largest_value_index=$(index_of \"$largest_value\" \"${input[@]}\")\n\
    \    local left_array=(\"${input[@]:0:$largest_value_index}\")\n    local right_array=(\"\
    ${input[@]:$largest_value_index}\")\n    local shift_array=(\"${right_array[@]}\"\
    \ \"${left_array[@]}\")\n    local shift_array_sorted=($(echo \"${shift_array[@]}\"\
    \ | sort -n))\n    if [[ \"${shift_array[@]}\" == \"${shift_array_sorted[@]}\"\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpq7ewd8fg.sh: line 32: index_of: command not found

    /tmp/tmpq7ewd8fg.sh: line 32: index_of: command not found

    /tmp/tmpq7ewd8fg.sh: line 32: index_of: command not found

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a arr\n    arr=($1)\n\
    \    for ((i=1; i<=${#arr[@]}; i++)); do\n        for ((j=i+1; j<=${#arr[@]};\
    \ j++)); do\n            if [[ ${arr[$i-1]} -gt ${arr[$j-1]} ]]; then\n      \
    \          declare -a arr2\n                counter=0\n                for ((k=1;\
    \ k<=${#arr[@]}; k++)); do\n                    if [[ $k -ne $i ]]; then\n   \
    \                     arr2[$counter]=${arr[$k-1]}\n                        ((counter++))\n\
    \                    fi\n                done\n                arr=(\"${arr2[@]}\"\
    )\n                arr[$((j-1))]=${arr2[$i-1]}\n                ((i--))\n    \
    \            break\n            fi\n        done\n    done\n    echo \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    return $(bash ./is_one_ball_movable.sh\
    \ \"$1\")\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'bash: ./is_one_ball_movable.sh: No such file or directory

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a nums=( $1 )\n   \
    \ local -a sorted=( $(for num in ${nums[@]}; do echo $num; done | sort) )\n  \
    \  local -a ids=( $(for index in ${!nums[@]}; do echo $index; done) )\n    local\
    \ -a sids=( $(for index in ${!sorted[@]}; do echo $index; done) )\n    [[ ${nums[${ids[0]}]}\
    \ -lt ${nums[${ids[1]}]} ]] && nums=(${nums[@]:$((${ids[0]} + 1))}) || nums=(${nums[@]:$((${ids[1]}\
    \ + 1))})\n    for index in ${!nums[@]}; do\n        [[ ${nums[$index]} -lt ${nums[$(($index\
    \ + 1))]} ]] && return \"true\"\n    done\n    return \"false\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg392g09q.sh: line 32: return: true: numeric argument required

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    IFS=' '\
    \ read -r -a arr <<< \"$1\"\n    local len=\"${#arr[@]}\"\n    local right_shifts=0\n\
    \    for ((i=0; i<${len}; i++)); do\n        if (( arr[i] != $i+1 )); then\n \
    \           (( right_shifts++ ))\n        fi\n    done\n    # Need exactly two\
    \ elements to be shifted so that the first element\n    # occurs as the last element\n\
    \    if (( right_shifts == 2 )); then\n        echo \"true\"\n    else\n     \
    \   echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # Use the below expression to\
    \ generate an array from the input string.\n  # arr=(${1// / })\n  if [ $# ==\
    \ 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1) # length-n\
    \ array\n    local N=${#arr[@]}\n    local arr_sorted=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -n))\n    local limit=1\n    local l=0\n    local r=1\n    local ball_pos=$((\
    \ N - 1 ))\n    while [ $l -lt $(( N - 1 )) ]; do\n        while [ $r -lt $((\
    \ N - 1 )) ]; do\n            if [ ${arr[r]} -lt ${arr[r-1]} ]; then\n       \
    \         return false\n            fi\n            if [ ${arr[r]} -lt ${arr[l]}\
    \ ]; then\n                limit=$(( r - l ))\n            fi\n            r=$((\
    \ r + 1 ))\n        done\n        l=$(( l + 1 ))\n        r=$(( l + 1 ))\n   \
    \ done\n    if [ $ball_pos -ge $limit ]; then\n        return true\n    else\n\
    \        return false\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwh3uuy4l.sh: line 36: return: false: numeric argument required

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local ball_positions=$1\n  echo\
    \ -n \"for ball positions: \"\n  echo $ball_positions | sed -e 's/ /,/g'\n  local\
    \ current_position=0\n  local goal_position=0\n  local position=0\n  local next_position=0\n\
    \  local max_position=0\n  local min_position=0\n  local num_right_shifts=0\n\
    \  local ball_position\n  local num_balls=0\n  local right_shift_limit=0\n  local\
    \ right_shift_overflow=0\n  local result=false\n  local ball_positions_sorted=$(echo\
    \ $ball_positions | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  echo \"ball positions\
    \ sorted $ball_positions_sorted\"\n  # default min_position and max_position to\
    \ max possible values\n  min_position=999\n  max_position=0\n  # check if it's\
    \ possible to get the ball to the goal\n  for ball_position in $ball_positions\n\
    \  do\n    num_balls=$((num_balls + 1))\n    if [[ $ball_position -gt $max_position\
    \ ]]\n    then\n      #echo \"$ball_position is greater than $max_position\"\n\
    \      max_position=$ball_position\n    fi\n    if [[ $ball_position -lt $min_position\
    \ ]]\n    then\n      #echo \"$ball_position is less than $min_position\"\n  \
    \    min_position=$ball_position\n    fi\n  done\n  #echo \"min_position is $min_position\"\
    \n  #echo \"max_position is $max_position\"\n  # we have to be able to right shift\
    \ at least once\n  right_shift_limit=$((max_position - min_position))\n  #echo\
    \ \"right_shift_limit is $right_shift_limit\"\n  # check if there is enough room\
    \ to shift right to get the ball to the goal\n  if [[ $right_shift_limit -gt $num_balls\
    \ ]]\n  then\n    result=false\n  else\n    # we need a loop to check if we can\
    \ sort the balls\n    while [[ $current_position -lt\n}\n\ncandidate() {\n   \
    \ move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n   \
    \ [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_v4okqw_.sh: line 72: unexpected argument `newline'' to conditional
    binary operator

    /tmp/tmp_v4okqw_.sh: line 72: syntax error near `-lt''

    /tmp/tmp_v4okqw_.sh: line 72: `    while [[ $current_position -lt''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local max_index=0\n    local\
    \ i=$max_index\n    for x in $1; do\n        ((i++))\n        if ((x > max_index));\
    \ then\n            max_index=$x\n        fi\n    done\n    if ((i == max_index));\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\t# fill in this function\n\n\n\
    \treturn\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tIFS=\" \" read -a arr <<< \"\
    $1\"\n\tn=${#arr[@]}\n\tfor (( i=0; i<${n}; i++ )); do\n\t\tj=$(( i + 1 ))\n\t\
    \twhile [[ $j -lt $n ]]; do\n\t\t\tif [[ ${arr[$i]} -gt ${arr[$j]} ]]; then\n\t\
    \t\t\ttmp=${arr[$i]}\n\t\t\t\tarr[$i]=${arr[$j]}\n\t\t\t\tarr[$j]=$tmp\n\t\t\t\
    fi\n\t\t\tj=$(( j + 1 ))\n\t\tdone\n\tdone\n\tfor (( i=0; i<${n}; i++ )); do\n\
    \t\tj=$(( i + 1 ))\n\t\twhile [[ $j -lt $n ]]; do\n\t\t\tif [[ ${arr[$i]} -gt\
    \ ${arr[$j]} ]]; then\n\t\t\t\tprintf \"false\"\n\t\t\t\treturn 0\n\t\t\tfi\n\t\
    \t\tj=$(( j + 1 ))\n\t\tdone\n\tdone\n\tprintf \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n   local array=(\"$@\")\n   for\
    \ (( i=0; i<$((${#array[@]}-1)); i++ )); do\n      if [[ ${array[$i]} -gt ${array[$(($i+1))]}\
    \ ]]; then\n         echo \"true\"\n         return 0\n      fi\n   done\n   echo\
    \ \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -r str=\"$1\"\n  local\
    \ -r arr=($str)\n  local -r n=${#arr[@]}\n  for (( i=0; i<n; i++ )); do\n    local\
    \ -r curr=${arr[$i]}\n    for (( j=i+1; j<n; j++ )); do\n      local -r next=${arr[$j]}\n\
    \      [[ \"$curr\" -gt \"$next\" ]] && return 1\n    done\n  done\n  return 0\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 30: local: curr: readonly variable

    /tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 30: local: curr: readonly variable

    /tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 30: local: curr: readonly variable

    /tmp/tmp22yjd2lp.sh: line 32: local: next: readonly variable

    /tmp/tmp22yjd2lp.sh: line 30: local: curr: readonly variable

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tlocal -n arr=$1\n\techo \"${arr[@]}\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmph65n_uuy.sh: line 26: local: `3 4 5 1 2'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    len=${#arr[@]}\n\
    \    for (( i=0; i<$len; i++ )); do\n        if [[ $i -gt 0 ]]; then\n       \
    \     if [[ ${arr[$i]} -le ${arr[$i-1]} ]]; then\n                echo \"true\"\
    \n                exit 0\n            fi\n        fi\n    done\n    echo \"false\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  if [[ \"$1\" == \"\" ]]; then\n\
    \    echo \"true\"\n    return 0\n  fi\n  arr=($(echo \"$1\" | tr ' ' '\\n' |\
    \ sort -n))\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ \"${arr[$i]}\" !=\
    \ \"${arr[0]}\" ]]; then\n      echo \"false\"\n      return 0\n    fi\n  done\n\
    \  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Solution 1\n    #\n    #\
    \ Note: Bash only supports integer arithmetics, so if you have a list of\n   \
    \ # integers like \"3 4 5 1 2\", you can't sort it as if it was a list of\n  \
    \  # strings.\n    #\n    # Python was used to sort the array.\n    python -c\
    \ \"print(sorted(map(int, '$1'.split())))\" | tr ' ' '\\n' | \\\n        paste\
    \ -sd ' ' -\n\n    # Solution 2\n    #\n    # At first, try sorting the input\
    \ array without a temporary sorted array.\n    #\n    # Note: Bash only supports\
    \ integer arithmetics, so if you have a list of\n    # integers like \"3 4 5 1\
    \ 2\", you can't sort it as if it was a list of\n    # strings.\n    #\n    #\
    \ Python was used to sort the array.\n    #\n    #local arr=( $(python -c \"print(sorted(map(int,\
    \ '$1'.split())))\" | tr ' ' '\\n') )\n    #local index=0\n    #while read item;\
    \ do\n    #    arr[$index]=$item\n    #    (( index+=1 ))\n    #done < <(echo\
    \ \"$1\" | tr ' ' '\\n')\n    #\n    #echo \"${arr[@]}\" | tr ' ' '\\n' | paste\
    \ -sd ' ' -\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr\n    local i j\n\
    \    local tmp\n    local pass_cnt\n    IFS=' ' read -r -a arr <<< \"$1\"\n  \
    \  (( pass_cnt = 0 ))\n    for (( i = 0; i < ${#arr[@]}; i++ )); do\n        for\
    \ (( j = i + 1; j < ${#arr[@]}; j++ )); do\n            (( tmp = arr[i] ))\n \
    \           if (( arr[i] > arr[j] )); then\n                (( arr[i] = arr[j]\
    \ ))\n                (( arr[j] = tmp ))\n                (( pass_cnt++ ))\n \
    \           fi\n        done\n    done\n    if (( pass_cnt > ${#arr[@]} )); then\n\
    \        echo \"false\"\n    else\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local IFS=$' '\n  local input=($1)\n\
    \  local left=0\n  local right=${#input[@]}-1\n  while [[ $left -lt $right ]];\
    \ do\n    local middle=$(($left + (right-$left)/2))\n    if [[ ${input[$middle]}\
    \ -gt ${input[$right]} ]]; then\n      left=$(($middle+1))\n    else\n      right=$(($middle))\n\
    \    fi\n  done\n  local min=${input[$left]}\n  local max=${input[$left]}\n  for\
    \ i in ${input[@]}; do\n    [[ $i -lt $min ]] && min=$i\n    [[ $i -gt $max ]]\
    \ && max=$i\n  done\n  if [[ $max -gt $min ]]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tarr=($1)\n\tfor i in ${!arr[@]};\
    \ do\n\t\tif [ \"${arr[$i]}\" -gt \"${arr[$(((i+1)%${#arr[@]}))]}\" ]; then\n\t\
    \t\techo \"false\"\n\t\t\texit 0\n\t\tfi\n\tdone\n\techo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local lst\n    lst=($1)\n\
    \    local i\n    local j\n    local prev\n    local curr\n    local cand\n  \
    \  local found\n    found=0\n    for ((i=0; i<${#lst[@]}; i++)); do\n        for\
    \ ((j=i+1; j<${#lst[@]}; j++)); do\n            prev=${lst[$((i%${#lst[@]}))]}\n\
    \            curr=${lst[$((j%${#lst[@]}))]}\n            if [[ $curr -ge $prev\
    \ ]]; then\n                continue\n            fi\n            cand=${lst[$(((j+1)%${#lst[@]}))]}\n\
    \            if [[ $cand -ge $prev ]]; then\n                continue\n      \
    \      fi\n            found=1\n            break\n        fi\n        if [[ $found\
    \ -eq 1 ]]; then\n            break\n        fi\n    done\n    if [[ $found -eq\
    \ 1 ]]; then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmpu9ele6ix.sh: line 48: syntax error near unexpected token `fi''

    /tmp/tmpu9ele6ix.sh: line 48: `        fi''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Your code goes here\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxshmodoo.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmpxshmodoo.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    vals=($1)\n    if [ ${#vals[@]}\
    \ -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n    current_min=${vals[0]}\n\
    \    for value in ${vals[@]}; do\n        if [ $value -lt $current_min ]; then\n\
    \            echo \"false\"\n            return\n        fi\n        current_min=$value\n\
    \    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local str=$(echo \"$1\" | sed\
    \ -r 's/\\s+/ /g')\n  local count=0\n  local arr=($str)\n  local len=${#arr[@]}\n\
    \  local i\n  local j\n  local min\n  local min_index\n  local temp\n  if [[ \"\
    $len\" -eq 0 ]]; then\n    echo \"true\"\n    return\n  fi\n  for ((i=0; i<len;\
    \ i++)); do\n    min=${arr[i]}\n    min_index=$i\n    for ((j=i+1; j<len; j++));\
    \ do\n      if [[ \"${arr[j]}\" -lt \"$min\" ]]; then\n        min=${arr[j]}\n\
    \        min_index=$j\n      fi\n    done\n    temp=${arr[i]}\n    arr[i]=${arr[min_index]}\n\
    \    arr[min_index]=$temp\n    count=$((count+min_index-i))\n  done\n  if [[ \"\
    $count\" -gt \"$((len*(len-1)/2))\" ]]; then\n    echo \"false\"\n  else\n   \
    \ echo \"true\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=$1\n    local sorted=$(echo\
    \ \"${arr}\" | sort -n)\n    if [[ \"${arr}\" == \"${sorted}\" ]]; then\n    \
    \    echo \"true\"\n    else\n        local len=$(echo \"${arr}\" | wc -w)\n \
    \       local last_item=$(echo \"${arr}\" | awk '{print $NF}')\n        local\
    \ new_arr=$(echo \"${arr}\" | sed \"s/ ${last_item}$//\")\n        new_arr=\"\
    ${last_item} ${new_arr}\"\n        if [[ $(move_one_ball \"${new_arr}\") == \"\
    true\" ]]; then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Place your solution between\
    \ the hyphens below\n    ------------------------------------------------\n  \
    \  # Check if the list is empty\n    if [ \"$1\" == \"\" ]; then\n        echo\
    \ \"true\"\n        return 0\n    fi\n    # Get the first element, if it is not\
    \ 1, then return false\n    first_element=$(echo \"$1\" | awk '{print $1}')\n\
    \    if [ \"$first_element\" != \"1\" ]; then\n        echo \"false\"\n      \
    \  return 0\n    fi\n    # Make a copy of the list\n    list_copy=$1\n    # Cycle\
    \ through the list, starting from the second element.\n    for i in $(seq 2 $(echo\
    \ \"$list_copy\" | wc -w)); do\n        # Check if the number is not the next\
    \ natural number\n        current_number=$(echo \"$list_copy\" | awk -v i=$i '{print\
    \ $i}')\n        if [ \"$current_number\" != \"$(($i))\" ]; then\n           \
    \ echo \"false\"\n            return 0\n        fi\n    done\n    # If the list\
    \ is valid, then return true\n    echo \"true\"\n    ------------------------------------------------\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpwb53phun.sh: line 27: ------------------------------------------------:
    command not found

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local input=\"$1\"\n    echo\
    \ $input | sed 's/^ //g' | sed 's/ $//g'\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  result=\"true\"\n  local str_sorted=($(echo\
    \ \"$1\" | xargs -n1 | sort -n))\n  local str_sorted_len=\"${#str_sorted[@]}\"\
    \n  local str_sorted_last=\"${str_sorted[${str_sorted_len}-1]}\"\n  local str_sorted_first=\"\
    ${str_sorted[0]}\"\n  if [ \"${str_sorted_first}\" -ne \"1\" ]; then\n    result=\"\
    false\"\n  fi\n  for ((i=0; i<str_sorted_len-1; i++)); do\n    local str_sorted_cur=\"\
    ${str_sorted[$i]}\"\n    local str_sorted_next=\"${str_sorted[$i+1]}\"\n    if\
    \ [ \"${str_sorted_cur}\" -eq \"${str_sorted_next}\" ]; then\n      result=\"\
    false\"\n      break\n    fi\n  done\n  echo \"${result}\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: -1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local left=\"$1\"\n    local\
    \ right=\"\"\n    while [[ -n \"$left\" ]]; do\n        [[ -z \"$right\" ]] &&\
    \ {\n            right=$(echo \"$left\" | cut -d ' ' -f 1)\n            left=$(echo\
    \ \"$left\" | cut -d ' ' -f 2-)\n            continue\n        }\n        [[ $left\
    \ -lt $right ]] && {\n            echo \"false\"\n            return\n       \
    \ }\n        right=$(echo \"$left\" | cut -d ' ' -f 1)\n        left=$(echo \"\
    $left\" | cut -d ' ' -f 2-)\n    done\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=47 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=42 encoding='utf-8'>
  timestamp: 1660022873
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=(\"$@\")\n    len=${#arr[@]}\n\
    \    max=${arr[0]}\n    if [[ $len -eq 0 ]]; then\n        echo \"true\"\n   \
    \     return 0\n    fi\n    for ((i=1; i<len; i++)); do\n        if [[ ${arr[$i]}\
    \ -lt $max ]]; then\n            echo \"false\"\n            return 0\n      \
    \  fi\n        if [[ ${arr[$i]} -gt $max ]]; then\n            max=${arr[$i]}\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=$1\n    nums=( $arr )\n\
    \    max=${nums[0]}\n    for i in ${nums[@]}; do\n        if [ \"$max\" -lt \"\
    $i\" ]; then\n            max=$i\n        fi\n    done\n    for i in ${nums[@]};\
    \ do\n        if [ \"$max\" -eq \"$i\" ]; then\n            continue\n       \
    \ else\n            echo \"false\"\n            exit 0\n        fi\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=$1\n    local\
    \ -i cnt=0\n    for i in $arr; do\n        local -i val=$i\n        if ((val >=\
    \ 1 && val <= 1000000000)); then\n            let cnt+=1\n        fi\n    done\n\
    \    echo \"${cnt}\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=\"$1\"\n    local\
    \ -a temp\n    local i\n    local is_sorted\n\n    # Remove spaces and store the\
    \ array in an indexed array\n    temp=(${arr// / })\n\n    # Perform right shift\
    \ until sorted\n    while [ 1 ]; do\n        is_sorted=1\n        # Traverse array\
    \ to check if sorted\n        for ((i=0; i<${#temp[@]}-1; i++)); do\n        \
    \    if [ ${temp[$i]} -gt ${temp[$i+1]} ]; then\n                is_sorted=0\n\
    \                break\n            fi\n        done\n        if [ $is_sorted\
    \ -eq 1 ]; then\n            echo \"true\"\n            break\n        fi\n  \
    \      # Right shift\n        last=${temp[$i]}\n        for ((i=${#temp[@]}-1;\
    \ i>0; i--)); do\n            temp[$i]=${temp[$i-1]}\n        done\n        temp[0]=$last\n\
    \    done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    IFS=' '\
    \ read -r -a arr <<< \"$1\"\n    if [[ ${#arr[@]} -eq 0 ]]; then\n        echo\
    \ \"true\"\n        return\n    fi\n    local min=$(( ${arr[0]} ))\n    for ((\
    \ i=1; i<${#arr[@]}; i++ ))\n    do\n        if [[ ${arr[$i]} -ge $min ]]; then\n\
    \            echo \"true\"\n            return\n        fi\n        min=$(( ${arr[$i]}\
    \ ))\n    done\n    echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # To get the result, we'll\
    \ write all the items to a temp file and run\n    # sort -n against it.  We'll\
    \ use the return code of sort to know if it's\n    # possible or not.\n    local\
    \ arr=($1)\n    local temp_file=\"$(mktemp)\"\n    echo \"${arr[@]}\" > \"$temp_file\"\
    \n    local result=$(sort -n \"$temp_file\")\n    local exit_code=$?\n    rm \"\
    $temp_file\"\n    if [[ \"$exit_code\" -eq 0 ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  local i j k\
    \ n\n  arr=( $1 )\n  n=${#arr[@]}\n  let j=n-1\n  for (( i=0; i<j; i++ )); do\n\
    \    if [[ ${arr[i]} -ge ${arr[i+1]} ]]; then\n      let j=i\n      break\n  \
    \  fi\n  done\n  for (( k=i+1; k<n; k++ )); do\n    if [[ ${arr[k]} -lt ${arr[j]}\
    \ ]]; then\n      let j=k\n    fi\n  done\n  if [[ $j -eq $n-1 ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: -1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # clear out any existing data\n\
    \  unset ARR\n  # set up array with the numbers from the command line\n  IFS='\
    \ ' read -a ARR <<< \"$1\"\n  # repeat the process of shifting the array to the\
    \ right, until it is sorted\n  while !( is_sorted \"${ARR[@]}\" ); do\n    shift_array_right\
    \ \"${ARR[@]}\"\n  done\n  # return the result\n  echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=37 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660022873
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a arr=$1\n    if\
    \ [ ${#arr[@]} -eq 0 ]; then\n        echo \"true\"\n        return\n    fi\n\
    \    local smallest=${arr[0]}\n    local smallest_i=0\n    local max=${arr[0]}\n\
    \    local max_i=0\n    for i in ${!arr[@]}; do\n        if [ ${arr[$i]} -lt $smallest\
    \ ]; then\n            smallest=${arr[$i]}\n            smallest_i=$i\n      \
    \  fi\n        if [ ${arr[$i]} -gt $max ]; then\n            max=${arr[$i]}\n\
    \            max_i=$i\n        fi\n    done\n    if [ $smallest_i -eq $max_i ];\
    \ then\n        echo \"true\"\n        return\n    fi\n    if [ $smallest_i -eq\
    \ 0 ] && [ $max_i -eq $((${#arr[@]}-1)) ]; then\n        echo \"true\"\n     \
    \   return\n    fi\n    if [ $max_i -eq 0 ] && [ $smallest_i -eq $((${#arr[@]}-1))\
    \ ]; then\n        echo \"true\"\n        return\n    fi\n    echo \"false\"\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: '/tmp/tmpl6mkiibn.sh: line 36: [: too many arguments

    /tmp/tmpl6mkiibn.sh: line 40: [: too many arguments

    /tmp/tmpl6mkiibn.sh: line 36: [: too many arguments

    /tmp/tmpl6mkiibn.sh: line 40: [: too many arguments

    /tmp/tmpl6mkiibn.sh: line 36: [: too many arguments

    /tmp/tmpl6mkiibn.sh: line 40: [: too many arguments

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=\"$1\"\n  local flag=0\n\
    \  local i=0\n  local arr=($arr)\n  local len=\"${#arr[@]}\"\n  while [[ \"$i\"\
    \ -lt \"$len\" ]]; do\n    if [[ \"$flag\" -eq 0 ]]; then\n      if [[ \"${arr[$i]}\"\
    \ -gt \"${arr[$(( i + 1 ))]}\" ]]; then\n        flag=1\n      fi\n    elif [[\
    \ \"$flag\" -eq 1 ]]; then\n      if [[ \"${arr[$i]}\" -gt \"${arr[$(( i + 1 ))]}\"\
    \ ]]; then\n        echo \"false\"\n        return\n      fi\n    fi\n    i=$((\
    \ i + 1 ))\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  val=\"$1\"\n  arr=($val)\n \
    \ len=${#arr[@]}\n  if [[ $len == 0 ]]; then\n    echo \"true\"\n    return 0\n\
    \  fi\n  sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort -n))\n  max_i=0\n  for\
    \ ((i=0; i<$len; i++)); do\n    if [[ ${arr[$i]} -gt ${sorted[$i]} ]]; then\n\
    \      echo \"false\"\n      return 0\n    fi\n    if [[ ${arr[$i]} -eq ${sorted[$i]}\
    \ ]]; then\n      if [[ ${arr[$i]} -gt ${arr[$max_i]} ]]; then\n        max_i=$i\n\
    \      fi\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local count=0\n    local current_height=0\n\
    \    for height in $1; do\n        if (( $current_height <= $height )); then\n\
    \            current_height=$height\n        else\n            (( count++ ))\n\
    \        fi\n    done\n    if (( $count == 1 )); then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    for ((i=0; i<${#arr[@]};\
    \ i++)); do\n        if [[ $i -ne ${#arr[@]}-1 ]]; then\n            if [[ ${arr[$i]}\
    \ -gt ${arr[$((i+1))]} ]]; then\n                return 1\n            fi\n  \
    \      fi\n    done\n    return 0\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # Fill in the code here\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi5_y0zd3.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmpi5_y0zd3.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # TODO: Write your code here\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp5nmvs77m.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmp5nmvs77m.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a balls\n    local\
    \ ball\n    local i\n    local j\n    i=0\n    for ball in $1\n    do\n      \
    \  balls[$i]=$ball\n        i=$((i+1))\n    done\n    echo ${balls[@]}\n    for\
    \ i in `seq 0 $((${#balls[@]}-1))`\n    do\n        for j in `seq 0 $((${#balls[@]}-2))`\n\
    \        do\n            if [ ${balls[$j]} -gt ${balls[$((j+1))]} ]\n        \
    \    then\n                tmp=${balls[$j]}\n                balls[$j]=${balls[$((j+1))]}\n\
    \                balls[$((j+1))]=$tmp\n            fi\n        done\n    done\n\
    \    echo ${balls[@]}\n    if [ \"${balls[@]}\" = \"$1\" ]\n    then\n       \
    \ echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp56lwkq2m.sh: line 50: [: too many arguments

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    [ $# -eq 0 ] && return 1\n\
    \    local -r arr=$1\n    local -r n=$(echo $arr | tr ' ' '\\n' | wc -l)\n   \
    \ # 1st element is the starting position of the ball in the array\n    local -i\
    \ pos=0\n    # 1st element is the current number of elements in the queue.\n \
    \   local -i que_size=0\n    # 1st element is the current position of the ball.\n\
    \    local -i que_pos=0\n    # array to maintain the current elements in the queue\n\
    \    local -a que=([0]=0)\n    for i in $(seq 1 $n); do\n        if [ \"$i\" -eq\
    \ \"$((pos+1))\" ]; then\n            # ball arrived at a position already sorted\n\
    \            ((que_size--))\n            # ball is moved to the position in the\
    \ queue\n            ((pos=que[que_pos]))\n            ((que_pos++))\n       \
    \ else\n            # ball is waiting at a position to be swapped\n          \
    \  ((que_size++))\n            # the position in the queue where the ball is waiting\n\
    \            que[$que_size]=$pos\n            # the current location of the ball\n\
    \            ((pos=i))\n        fi\n    done\n    if [ \"$que_size\" -eq 0 ];\
    \ then\n        echo true\n    else\n        echo false\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  IFS=' ' read\
    \ -r -a arr <<< \"${1}\"\n  # Check that elements are unique\n  local -a unique=(\
    \ $(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ') )\n  if [[ ${#arr[@]}\
    \ -ne ${#unique[@]} ]]; then\n    echo \"false\"\n    return 0\n  fi\n  local\
    \ current_max=${arr[0]}\n  local i\n  for (( i=1; i<${#arr[@]}; i++ )); do\n \
    \   local elem=${arr[i]}\n    if [[ $elem -lt $current_max ]]; then\n      echo\
    \ \"false\"\n      return 0\n    fi\n    if [[ $elem -gt $current_max ]]; then\n\
    \      current_max=$elem\n    fi\n  done\n  echo \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp91c6yu9q.sh: line 29: syntax error near unexpected token `}''

    /tmp/tmp91c6yu9q.sh: line 29: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tlocal -a arr=(\"$@\")\n\tlocal\
    \ -i sorted=\"1\"\n\tfor i in ${!arr[@]}; do\n\t\t[ \"$i\" -eq \"0\" ] && continue\n\
    \t\t[[ \"${arr[i]}\" -lt \"${arr[i-1]}\" ]] && sorted=\"0\"\n\tdone\n\techo \"\
    $sorted\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($(echo $1 | tr\
    \ \" \" \"\\n\"))\n    # If the array is empty, we're good\n    if [[ ${#arr[@]}\
    \ -eq 0 ]]; then\n        echo \"true\"\n        return\n    fi\n    local largest_so_far=${arr[0]}\n\
    \    for idx in \"${!arr[@]}\"; do\n        local val=${arr[$idx]}\n        if\
    \ [[ $val -gt $largest_so_far ]]; then\n            largest_so_far=$val\n    \
    \    else\n            echo \"false\"\n            return\n        fi\n    done\n\
    \    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # This is a space-separated\
    \ list\n  arr=\"$1\"\n  # Check if there is more than one element\n  # If the\
    \ size of the list is 1, we can return true\n  if [[ \"$arr\" =~ \" \" ]]; then\n\
    \    # There are at least two elements\n    # Get first element, this is a string\n\
    \    num_1=$(echo \"$arr\" | cut -d ' ' -f 1)\n    # Get second element, this\
    \ is a string\n    num_2=$(echo \"$arr\" | cut -d ' ' -f 2)\n    # Compare the\
    \ two elements. If the second element is smaller than the first,\n    # we can\
    \ not achieve the desired order. Thus, return false.\n    if [[ \"$num_2\" -lt\
    \ \"$num_1\" ]]; then\n      echo \"false\"\n    else\n      # This is a space-separated\
    \ list with more than 2 elements\n      # Get the substring of the list, starting\
    \ from the third element\n      rest_of_arr=$(echo \"$arr\" | cut -d ' ' -f 3-)\n\
    \      # Move the second element to the end of the list\n      new_arr=\"$rest_of_arr\
    \ $num_2\"\n      # Call the function recursively\n      move_one_ball \"$new_arr\"\
    \n    fi\n  else\n    # There is only one element\n    echo \"true\"\n  fi\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    if [[ ${#arr[@]}\
    \ -lt 2 ]]; then\n        echo \"true\"\n        return\n    fi\n    c=0\n   \
    \ while [ ${arr[${#arr[@]}-1]} -lt ${arr[0]} ]; do\n        ((c++))\n        last=${arr[${#arr[@]}-1]}\n\
    \        arr=(\"${arr[@]:0:${#arr[@]}-1}\" \"${arr[@]:0:${#arr[@]}-1}\")\n   \
    \     arr[0]=$last\n    done\n    for ((i=1; i<${#arr[@]}; i++)); do\n       \
    \ if [[ ${arr[$i]} -lt ${arr[$i-1]} ]]; then\n            echo \"false\"\n   \
    \         return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  declare -a balls=($1)\n  len=${#balls[@]}\n\
    \  if [[ $len -eq 0 ]]; then\n    echo true\n    return\n  fi\n  declare -a balls_sorted=($(echo\
    \ ${balls[@]} | tr ' ' '\\n' | sort -n))\n  declare -a ball_seq=()\n  for ((i=0;\
    \ i<len; i++)); do\n    ball_seq+=($(\n      echo ${balls[@]} | tr ' ' '\\n' |\
    \ awk -v j=$i '{x=x$0; print substr(x,j,1)}'))\n  done\n  for ((i=0; i<len; i++));\
    \ do\n    if [[ ${balls_sorted[$i]} -ne ${ball_seq[$i]} ]]; then\n      echo false\n\
    \      return\n    fi\n  done\n  echo true\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    if [ -z \"$1\" ]; then\n \
    \       echo \"true\"\n        return\n    fi\n    local -a arr=($(echo \"$1\"\
    \ | tr ' ' '\\n' | sort -n))\n    local first=\"${arr[0]}\"\n    local last=\"\
    ${arr[-1]}\"\n    if [ \"$first\" -eq 1 ] && [ \"$last\" -eq \"${#arr[@]}\" ];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local input=(\"$@\")\n  local\
    \ i=0\n  local j=0\n  local is_possible=true\n  echo \"input: ${input[@]}\"\n\
    \  while [[ $i -lt ${#input[@]} ]]; do\n    echo \"i is: $i\"\n    if [[ \"${input[$i]}\"\
    \ -ge \"${input[$((i+1))]}\" ]]; then\n      (( i++ ))\n      continue\n    else\n\
    \      (( j++ ))\n      if [[ $j -gt 1 ]]; then\n        is_possible=false\n \
    \       break\n      fi\n      for (( s = i; s < ${#input[@]} - 1; s++ )); do\n\
    \        input[$s]=${input[$((s+1))]}\n      done\n      input[$(( ${#input[@]}\
    \ - 1 ))]=${input[$i]}\n      i=0\n    fi\n  done\n  echo \"is_possible: $is_possible\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp2l2d9ho0.sh: line 33: [[: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")

    /tmp/tmp2l2d9ho0.sh: line 33: [[: 3 4 5 1 2: syntax error in expression (error
    token is "4 5 1 2")

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=(\"$@\")\n  \
    \  local idx=$(( ${#arr[@]} - 1 ))\n    for (( i = ${#arr[@]} - 1; i > 0; i--\
    \ )); do\n        if (( ${arr[i]} < ${arr[$((i - 1))]} )); then\n            idx=$((i\
    \ - 1))\n            break\n        fi\n    done\n    if (( $idx == ${#arr[@]}\
    \ - 1 )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local temp_arr=()\n  local result=true\n\
    \  for item in $1; do\n    temp_arr+=(\"$item\")\n  done\n  for (( i=1; i<${#temp_arr[@]};\
    \ i++ )); do\n    if (( ${temp_arr[$i]} < ${temp_arr[$i-1]} )); then\n      result=false\n\
    \      break\n    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local i\n\
    \    local temp\n    local is_equal=0\n    # IFS is the internal field separator\n\
    \    IFS=' ' read -r -a arr <<< \"$1\"\n    while [ $is_equal -eq 0 ]\n    do\n\
    \        if [ \"${arr[0]}\" -gt \"${arr[1]}\" ]; then\n            temp=${arr[0]}\n\
    \            arr[0]=${arr[1]}\n            arr[1]=$temp\n        else\n      \
    \      for (( i=1; i<$((${#arr[@]}-1)); i++ )); do\n                if [ \"${arr[$i]}\"\
    \ -gt \"${arr[$((i+1))]}\" ]; then\n                    temp=${arr[$i]}\n    \
    \                arr[$i]=${arr[$((i+1))]}\n                    arr[$((i+1))]=$temp\n\
    \                fi\n            done\n        fi\n        # in below line of\
    \ code, \"echo\" is important to be written before \"[]\" \n        if [ \"$(echo\
    \ ${arr[@]})\" == \"$(echo ${arr[@]} | sort -n)\" ]; then\n            is_equal=1\n\
    \        fi\n    done\n    if [ \"$is_equal\" -eq 1 ]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local count=0\n    local out=false\n\
    \    local min=$(printf \"%s\\n\" $1 | sort -n | head -1)\n    for i in $1; do\n\
    \        if [[ $i -eq $min ]]; then\n            ((count++))\n        fi\n   \
    \ done\n    if [[ $count -gt 1 ]]; then\n        out=true\n    fi\n    echo $out\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: -1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  arr=($1)\n  arr_length=\"${#arr[@]}\"\
    \n  last=${arr[@]: -1}\n  if [[ \"$arr_length\" -eq 0 ]]; then\n    echo \"true\"\
    \n    return 0\n  fi\n  for (( i=0; i<$arr_length; i++ )); do\n    if [[ \"$last\"\
    \ -le \"${arr[$i]}\" ]]; then\n      for (( j=0; j<$i; j++ )); do\n        arr[$j]=${arr[$((\
    \ $j + 1 ))]}\n      done\n      arr[$i]=$last\n      i=0\n    fi\n  done\n  for\
    \ (( i=0; i<$(( $arr_length - 1 )); i++ )); do\n    if [[ \"${arr[$i]}\" -gt \"\
    ${arr[$(( $i + 1 ))]}\" ]]; then\n      echo \"false\"\n      return 0\n    fi\n\
    \  done\n  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=58 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=55 encoding='utf-8'>
  timestamp: 1660022873
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  if [ -z \"$1\" ]; then\n   \
    \ echo \"true\"\n    return\n  fi\n  arr=($1)\n  l=$((${#arr[@]}-1))\n  k=0\n\
    \  #echo \"Length: $l\"\n  #echo \"${arr[@]}\"\n  while ((k < l)); do\n    i=0\n\
    \    #echo \"${arr[@]}\"\n    while ((i < l)); do\n      if ((${arr[i]} > ${arr[i+1]}));\
    \ then\n        #echo \"Swapping ${arr[i]} and ${arr[i+1]}\"\n        temp=${arr[i]}\n\
    \        arr[i]=${arr[i+1]}\n        arr[i+1]=$temp\n        break\n      fi\n\
    \      ((i=i+1))\n    done\n    ((k=k+1))\n  done\n  #echo \"${arr[@]}\"\n  if\
    \ [ ${arr[0]} -eq 1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a arr=($1)\n    if\
    \ [[ ${#arr[@]} -eq 0 ]]; then\n        echo \"true\"\n        return\n    fi\n\
    \    count=$(./sort.py)\n    if [[ $count -gt 0 ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoe9erxsx.sh: line 31: ./sort.py: No such file or directory

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr\n  local -a sorted\n\
    \  declare -i is_sorted\n  arr=( $1 )\n  sorted=($(printf \"%s\\n\" \"${arr[@]}\"\
    \ | sort -n))\n  is_sorted=1\n  for i in \"${!arr[@]}\"; do\n    if [[ ${arr[$i]}\
    \ -ne ${sorted[$i]} ]]; then\n      is_sorted=0\n      break\n    fi\n  done\n\
    \  echo \"$is_sorted\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a arr=($1)\n  local len=${#arr[@]}\n\
    \  if [[ \"$len\" -eq 0 ]]; then\n    echo \"true\"\n    return\n  fi\n  local\
    \ -i s=0\n  local -i e=$((len-1))\n  while [[ \"$s\" -lt \"$e\" ]]; do\n    local\
    \ -i m=$(((s+e)/2))\n    if [[ \"${arr[$m]}\" -lt \"${arr[$e]}\" ]]; then\n  \
    \    e=$((m))\n    else\n      s=$((m+1))\n    fi\n  done\n  if [[ \"$s\" -lt\
    \ \"$len\" ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  # TODO\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0gblc012.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmp0gblc012.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  echo \"false\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr=($1)\n    local\
    \ n=${#arr[@]}\n    local -a result=()\n    local stack=()\n    local current=-1\n\
    \    local i\n    for ((i=0; i<n; i++)); do\n        while ${#stack[@]} -gt 0\
    \ && ((${stack[-1]} > ${arr[i]})); do\n            current=${stack[-1]}\n    \
    \        unset stack[-1]\n        done\n        if [[ $current -ge 0 ]]; then\n\
    \            result+=($current)\n            current=-1\n        fi\n        stack+=(${arr[i]})\n\
    \    done\n    if [[ $current -ge 0 ]]; then\n        result+=($current)\n   \
    \ fi\n    if [[ ${#result[@]} -eq 0 ]]; then\n        echo \"true\"\n    else\n\
    \        for ((i=0; i<${#result[@]}; i++)); do\n            if ((${result[i]}\
    \ > ${result[i+1]})); then\n                echo \"false\"\n                return\n\
    \            fi\n        done\n        echo \"true\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpikghwtwv.sh: line 33: 0: command not found

    /tmp/tmpikghwtwv.sh: line 33: 1: command not found

    /tmp/tmpikghwtwv.sh: line 33: 2: command not found

    /tmp/tmpikghwtwv.sh: line 33: 3: command not found

    /tmp/tmpikghwtwv.sh: line 33: 4: command not found

    /tmp/tmpikghwtwv.sh: line 33: 0: command not found

    /tmp/tmpikghwtwv.sh: line 33: 1: command not found

    /tmp/tmpikghwtwv.sh: line 33: 2: command not found

    /tmp/tmpikghwtwv.sh: line 33: 3: command not found

    /tmp/tmpikghwtwv.sh: line 33: 4: command not found

    /tmp/tmpikghwtwv.sh: line 33: 0: command not found

    /tmp/tmpikghwtwv.sh: line 33: 1: command not found

    /tmp/tmpikghwtwv.sh: line 33: 2: command not found

    /tmp/tmpikghwtwv.sh: line 33: 3: command not found

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 0
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    if [[ \"$1\" == \"\" ]]; then\n\
    \        echo \"true\"\n        return\n    fi\n    if [[ \"$1\" == *\" \"* ]];\
    \ then\n        local arr=( $1 )\n        local len=${#arr[@]}\n        local\
    \ sorted=true\n        for (( i=0; i<$len-1; i++ )); do\n            if [[ \"\
    ${arr[$i]}\" -gt \"${arr[$i+1]}\" ]]; then\n                sorted=false\n   \
    \             break\n            fi\n        done\n        if [[ \"$sorted\" ==\
    \ \"true\" ]]; then\n            echo \"true\"\n            return\n        fi\n\
    \        for (( i=0; i<$len; i++ )); do\n            local tmp=${arr[0]}\n   \
    \         for (( j=0; j<$len-1; j++ )); do\n                arr[$j]=${arr[$j+1]}\n\
    \            done\n            arr[$len-1]=$tmp\n            local sorted=true\n\
    \            for (( k=0; k<$len-1; k++ )); do\n                if [[ \"${arr[$k]}\"\
    \ -gt \"${arr[$k+1]}\" ]]; then\n                    sorted=false\n          \
    \          break\n                fi\n            done\n            if [[ \"$sorted\"\
    \ == \"true\" ]]; then\n                echo \"true\"\n                return\n\
    \            fi\n        done\n        echo \"false\"\n    else\n        echo\
    \ \"true\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=()\n  arr=($1)\n \
    \ local i=0\n  local swapped=0\n  local len=${#arr[@]}\n  if [ $len -eq 0 ]; then\n\
    \    echo \"true\"\n    return 0\n  fi\n  while [ $i -lt $len ]; do\n    if [\
    \ $i -lt $len ]; then\n      if [ $((arr[$i])) -gt $((arr[$((i+1))])) ]; then\n\
    \        let swapped=1\n        break\n      fi\n    fi\n    let i=i+1\n  done\n\
    \  if [ $swapped -eq 0 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local balls=\"$1\"\n    local\
    \ count=0\n    for ball in ${balls[@]}; do\n        count=$((count + 1))\n   \
    \ done\n    local max=$((count - 1))\n    local min=0\n    local done=false\n\
    \    while [[ \"$done\" = false ]]; do\n        local index=$(((max + min) / 2))\n\
    \        echo \"DEBUG: $(get_ball \"$balls\" \"$index\")\"\n        if [[ \"$(get_ball\
    \ \"$balls\" \"$index\")\" = \"$(get_ball \"$balls\" \"$((index + 1))\")\" ]];\
    \ then\n            done=true\n        else\n            if [[ \"$(get_ball \"\
    $balls\" \"$index\")\" -gt \"$(get_ball \"$balls\" \"$((index + 1))\")\" ]]; then\n\
    \                max=$((index - 1))\n            else\n                min=$((index\
    \ + 1))\n            fi\n        fi\n    done\n    if [[ \"$index\" -eq \"$((count\
    \ - 1))\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpex83mfpa.sh: line 36: get_ball: command not found

    /tmp/tmpex83mfpa.sh: line 37: get_ball: command not found

    /tmp/tmpex83mfpa.sh: line 37: get_ball: command not found

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -i\
    \ a0 a1\n    IFS=' ' read -a arr <<< $1\n    if [[ ${#arr[@]} -eq 0 ]]; then\n\
    \        echo true\n        return\n    fi\n    for (( i=1; i<${#arr[@]}; i++\
    \ )); do\n        for (( j=0; j<$i; j++ )); do\n            a0=${arr[j]}\n   \
    \         a1=${arr[j+1]}\n            if [[ $a0 -gt $a1 ]]; then\n           \
    \     arr[j]=$a1\n                arr[j+1]=$a0\n            fi\n        done\n\
    \    done\n    for (( i=0; i<${#arr[@]}-1; i++ )); do\n        if [[ ${arr[i]}\
    \ -gt ${arr[i+1]} ]]; then\n            echo false\n            return\n     \
    \   fi\n    done\n    echo true\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a arr\n    local -a\
    \ sorted\n    local -i idx=0\n    IFS=' ' read -r -a arr <<< \"$1\"\n    for i\
    \ in \"${arr[@]}\"; do\n        sorted[idx++]=$i\n    done\n    sort -n <(printf\
    \ \"%s\\n\" \"${sorted[@]}\") | awk '{printf \"%s \", $0}'\n}\n\ncandidate() {\n\
    \    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=($1)\n    local\
    \ arr_len=${#arr[@]}\n    local i=0\n    local flag=0\n    local min=${arr[0]}\n\
    \    for ((i=1; i<arr_len; i++)); do\n        if [ ${arr[i]} -lt $min ]; then\n\
    \            flag=1\n            break\n        fi\n        if [ ${arr[i]} -eq\
    \ $min ]; then\n            continue\n        fi\n        min=${arr[i]}\n    done\n\
    \    if [ $flag -eq 0 ]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=()\n\n    for i\
    \ in $1; do\n        arr+=(\"$i\")\n    done\n\n    local sorted=($(printf \"\
    %s\\n\" \"${arr[@]}\" | sort -n))\n    local inc=\"true\"\n\n    for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n        if [[ ${arr[$i]} -ne ${sorted[$i]} ]]; then\n          \
    \  inc=\"false\"\n            break\n        fi\n    done\n\n    echo \"$inc\"\
    \n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1\
    \ 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 0
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    for ((i=1; i<${#arr[@]};\
    \ i++)); do\n        if [[ ${arr[i]} -lt ${arr[i-1]} ]]; then\n            for\
    \ ((j=i+1; j<${#arr[@]}; j++)); do\n                if [[ ${arr[j]} -lt ${arr[j-1]}\
    \ ]]; then\n                    echo \"false\"\n                    return\n \
    \               fi\n            done\n            echo \"true\"\n            return\n\
    \        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local min=$1\n    shift\n\
    \    for i in $@\n    do\n        (( i <= min )) && min=$i\n    done\n    echo\
    \ $min\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=()\n    local n=\"\
    \"\n    IFS=' ' read -r -a arr <<< \"$1\"\n    if [[ \"${#arr[@]}\" -eq 0 ]];\
    \ then\n        echo \"true\"\n        return\n    fi\n    for ((n=0; n<${#arr[@]};\
    \ n++)); do\n        if [[ \"$n\" -gt 0 ]]; then\n            if [[ \"${arr[n]}\"\
    \ -lt \"${arr[n-1]}\" ]]; then\n                echo \"false\"\n             \
    \   return\n            fi\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -a array=($1)\n    local\
    \ sarray=(\"${array[@]}\")\n    local num_shift=0\n    local num_elements=${#array[@]}\n\
    \    local i=0\n    local -a first_positions=()\n    local -a last_positions=()\n\
    \    local j=0\n    local s=0\n    local result=false\n    local e=0\n    local\
    \ shift_count=0\n    local temp=0\n    # Sort the array\n    IFS=$'\\n' sorted=($(sort\
    \ <<<\"${array[*]}\"))\n    # Create a copy of the original array in 'sarray'\n\
    \    while [ $i -lt $num_elements ]\n    do\n        sarray[$i]=${array[$i]}\n\
    \        let i++\n    done\n    # Iterate over the array looking for elements\
    \ that are out of place\n    i=0\n    while [ $i -lt $num_elements ]\n    do\n\
    \        # If the element at position 'i' is not equal to the element that is\n\
    \        # supposed to be at this position, store 'i' in the first_positions array\n\
    \        if [ ${array[$i]} -ne ${sorted[$i]} ]\n        then\n            first_positions[$j]=$i\n\
    \            j=$((j+1))\n        fi\n        # If the element at position 'i'\
    \ is not equal to the element that is\n        # supposed to be at this position,\
    \ store 'i' in the last_positions array\n        if [ ${array[$i]} -ne ${sorted[$((num_elements-i-1))]}\
    \ ]\n        then\n            last_positions[$s]=$i\n            s=$((s+1))\n\
    \        fi\n        let i++\n    done\n    # If there is only one element out\
    \ of place\n    if [ ${#first_positions[@]} -eq 1 ]\n    then\n        result=true\n\
    \    else\n        # If there are no elements out of place\n        if [ ${#first_positions[@]}\
    \ -eq 0 ]\n        then\n            result=true\n        else\n            #\
    \ Iterate over the first_\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpme2_9860.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmpme2_9860.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local array=(${@});\n    local\
    \ len=${#array[@]};\n    local i;\n    local last=${array[$(( len - 1 ))]};\n\
    \    # Traverse the array (right to left) and check whether the current\n    #\
    \ element is less than the last element.\n    for (( i=${#array[@]}-1; i>=0; i--\
    \ )); do\n        if [[ ${array[$i]} -lt $last ]]; then\n            echo \"false\"\
    ;\n            return;\n        fi\n        last=${array[$i]};\n    done\n   \
    \ echo \"true\";\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local -n ref=$1\n    local\
    \ len=${#ref[@]}\n    if [ $len -eq 0 ]; then\n        echo \"true\"\n       \
    \ return\n    fi\n    if [ $len -eq 1 ]; then\n        echo \"true\"\n       \
    \ return\n    fi\n    local -A counter\n    for i in ${ref[@]}; do\n        if\
    \ [ -z ${counter[$i]} ]; then\n            counter[$i]=1\n        else\n     \
    \       counter[$i]=$((counter[$i]+1))\n        fi\n    done\n    local -a sorted_keys=($(echo\
    \ ${!counter[@]} | tr ' ' '\\n' | sort -n))\n    local -a values\n    for i in\
    \ ${sorted_keys[@]}; do\n        values+=(\"${counter[$i]}\")\n    done\n    local\
    \ max_ones=0\n    local curr_ones=0\n    for i in ${values[@]}; do\n        if\
    \ [ $i -eq 1 ]; then\n            curr_ones=$((curr_ones+1))\n        else\n \
    \           if [ $curr_ones -gt $max_ones ]; then\n                max_ones=$curr_ones\n\
    \            fi\n            curr_ones=0\n        fi\n    done\n    if [ $curr_ones\
    \ -gt $max_ones ]; then\n        max_ones=$curr_ones\n    fi\n    if [ $max_ones\
    \ -lt 2 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10\
    \ 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdnls25kh.sh: line 26: local: `3 4 5 1 2'': invalid variable name
    for name reference

    /tmp/tmpdnls25kh.sh: line 26: local: `3 5 10 1 2'': invalid variable name for
    name reference

    /tmp/tmpdnls25kh.sh: line 26: local: `4 3 1 2'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tlocal input=$(echo \"$1\" |\
    \ tr ' ' '\\n' | sort -nu)\n\tlocal i=0\n\tlocal res=\"true\"\n\tfor j in $input;\
    \ do\n\t\t[ $i -ne $j ] && res=\"false\"\n\t\t((i++))\n\tdone\n\techo $res\n}\n\
    \ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Write your code here\n \
    \   # To print results to the standard output you can use echo\n    # Example:\
    \ echo \"Hello world\"\n    echo \"\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    [ $# -eq 0 ] && return 0\n\
    \    declare -a arr\n    arr=($1)\n    length=${#arr[@]}\n    count=0\n    i=0\n\
    \    while [ $i -lt $length ]\n    do\n        index=$(echo \"${arr[$i]} - 1\"\
    \ | bc)\n        if [ $index -ne $i ]\n        then\n            arr[$i]=${arr[$index]}\n\
    \            arr[$index]=$(echo \"$index + 1\" | bc)\n            let \"count\
    \ = count + 1\"\n        else\n            let \"i = i + 1\"\n        fi\n   \
    \ done\n    if [ $count -eq $length ]\n    then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    n=$((${#arr[@]}-1))\n\
    \    min=0\n    for ((i=0; i<=n; i++)); do\n        if [[ ${arr[$i]} -gt ${arr[$min]}\
    \ ]]; then\n            min=$i\n        fi\n    done\n    if [[ $min -eq $n ]];\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=($1)\n  for((i=0;i<${#arr[@]};i++));\
    \ do\n    ((arr[i]==${arr[0]})) && return 0\n  done\n  return 1\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022868
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # write your code here.\n\
    \    declare -a in_arr=($1)\n    declare -a sorted_arr=($1)\n    declare -a arr1\n\
    \    declare -a arr2\n    declare -a arr3\n    declare -a temp\n    declare -a\
    \ temp2\n    declare -a t_arr1\n    declare -a t_arr2\n    if [[ ${#in_arr[@]}\
    \ == 0 ]]; then\n        echo \"true\"\n        return\n    fi\n    #echo \"In\
    \ Arr: ${in_arr[@]}\"\n    if [[ ${#in_arr[@]} == 1 ]]; then\n        echo \"\
    true\"\n        return\n    fi\n    if [[ ${#in_arr[@]} == 2 ]]; then\n      \
    \  if [[ ${in_arr[0]} -gt ${in_arr[1]} ]]; then\n            echo \"false\"\n\
    \            return\n        else\n            echo \"true\"\n            return\n\
    \        fi\n    fi\n    if [[ ${#in_arr[@]} == 3 ]]; then\n        if [[ ${in_arr[0]}\
    \ -gt ${in_arr[1]} ]]; then\n            arr1=(${in_arr[1]} ${in_arr[0]} ${in_arr[2]})\n\
    \            if [[ ${arr1[0]} -gt ${arr1[1]} ]]; then\n                arr2=(${arr1[1]}\
    \ ${arr1[0]} ${arr1[2]})\n                if [[ ${arr2[0]} -gt ${arr2[1]} ]];\
    \ then\n                    echo \"false\"\n                    return\n     \
    \           else\n                    echo \"true\"\n                    return\n\
    \                fi\n            else\n                echo \"true\"\n       \
    \         return\n            fi\n        else\n            echo \"true\"\n  \
    \          return\n        fi\n    fi\n    if [[ ${#in_arr[@]} == 4 ]]; then\n\
    \        if [[ ${in_arr[0]} -gt ${in_arr[1]} ]]; then\n            arr1=(${in_arr[1]}\
    \ ${in_arr[0]} ${in_arr[2]} ${in_arr[3]})\n            if [[ ${arr1[0]} -gt ${arr1[1]}\
    \ ]]; then\n\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdm7cjqh6.sh: line 80: syntax error near unexpected token `}''

    /tmp/tmpdm7cjqh6.sh: line 80: `}''

    '
  stdout: ''
  timestamp: 1660022868
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  declare -a arr=()\n  local i\
    \ j tmp\n  for i in $1; do\n    arr+=($i)\n  done\n  if [[ ${#arr[@]} -le 1 ]];\
    \ then\n    echo \"true\"\n    return\n  fi\n  for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n    tmp=${arr[$i]}\n    j=$(( $i - 1 ))\n    while [[ j -ge 0 && ${arr[$j]}\
    \ -gt $tmp ]]; do\n      arr[$j+1]=${arr[$j]}\n      j=$(( $j - 1 ))\n    done\n\
    \    arr[$j+1]=$tmp\n  done\n  if [[ ${arr[@]} == $1 ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 0
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local result=\"true\"\n  \
    \  local arr=()\n    local num_ops=0\n    local temp=()\n    local len=0\n   \
    \ local i=0\n    local j=0\n    local k=0\n    local flag=0\n    local count=0\n\
    \    # Push elements into array\n    arr=($1)\n    # Obtain length of array\n\
    \    len=${#arr[@]}\n    # Find the number of possible right shift operations\n\
    \    while [ $num_ops -le $len ]\n    do\n        # Rotate array to right\n  \
    \      for ((i=0; i<num_ops; i++))\n        do\n            temp=(${arr[@]})\n\
    \            temp=(\"${temp[@]:1}\")\n            arr=(\"${temp[@]}\" \"${arr[0]}\"\
    )\n        done\n        # Check if array is sorted\n        for ((i=0; i<len-1;\
    \ i++))\n        do\n            if [[ ${arr[i]} -gt ${arr[i+1]} ]]\n        \
    \    then\n                flag=1\n                break\n            fi\n   \
    \     done\n        if [[ $flag -eq 0 ]]\n        then\n            result=\"\
    true\"\n            break\n        else\n            result=\"false\"\n      \
    \      num_ops=$((num_ops+1))\n            flag=0\n        fi\n    done\n    #\
    \ Print result\n    echo \"$result\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    for((i=0;i<$((${#arr[@]}-1));i++));\
    \ do\n        if [[ ${arr[$i]} -gt ${arr[$(($i+1))]} ]]; then\n            return\
    \ 1\n        fi\n    done\n    return 0\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  [[ -z \"$1\" ]] && echo \"true\"\
    \ && return 0\n  max=$(echo \"$1\" | tr ' ' '\\n' | sort -nr | head -1)\n  local\
    \ -a arr\n  arr=($1)\n  for ((i=0; i<=${#arr[@]}; i++)); do\n    [[ $i -eq ${#arr[@]}\
    \ ]] && echo \"true\" && return 0\n    [[ $i -gt 0 ]] && [[ ${arr[$i]} -ge ${arr[$i-1]}\
    \ ]] && echo \"false\" && return 0\n    if [[ $max -eq ${arr[$i]} ]]; then\n \
    \     max=$(echo \"${arr[@]:$((i+1))}\" | tr ' ' '\\n' | sort -nr | head -1)\n\
    \    fi\n  done\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    len=${#arr[@]}\n\
    \    for ((j=0; j<len; j++)); do\n        largest=${arr[j]}\n        for ((i=j+1;\
    \ i<len; i++)); do\n            if [[ ${arr[i]} -gt $largest ]]; then\n      \
    \          largest=${arr[i]}\n            fi\n        done\n        if [[ $largest\
    \ -gt ${arr[j]} ]]; then\n            echo \"false\"\n            return\n   \
    \     fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  min=1\n  max=1\n  # Find the\
    \ minimum\n  for n in $1; do\n    if [[ $n -lt $min ]]; then\n      min=$n\n \
    \   fi\n  done\n  # Print the numbers, one per line, removing the minimum\n  for\
    \ n in $1; do\n    if [[ $n -gt $min ]]; then\n      echo $n\n    fi\n  done\n\
    \  # Find the maximum of the remaining numbers\n  for n in $1; do\n    if [[ $n\
    \ -gt $min ]]; then\n      if [[ $n -gt $max ]]; then\n        max=$n\n      fi\n\
    \    fi\n  done\n  # echo $max\n  # Print the sorted list\n  if [[ $min -eq $max\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local input=$1\n  local list=()\n\
    \  for i in $input; do\n    list+=(\"$i\")\n  done\n  local output=true\n  if\
    \ [ ${#list[@]} -eq 0 ]; then\n    output=true\n  elif [ ${#list[@]} -eq 1 ];\
    \ then\n    output=true\n  else\n    for i in $(seq 1 $((${#list[@]} - 1))); do\n\
    \      if [[ ${list[i]} -gt ${list[i-1]} ]]; then\n        continue\n      else\n\
    \        output=false\n        break\n      fi\n    done\n  fi\n  echo $output\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  arr=(\"$@\")\n  l=${#arr[@]}\n\
    \  if [[ l -eq 0 ]]; then\n    echo \"true\"\n    return\n  fi\n  for ((i=0; i<=l-1;\
    \ i++)); do\n    for ((j=i+1; j<=l-1; j++)); do\n      if [[ ${arr[i]} -gt ${arr[j]}\
    \ ]]; then\n        temp=${arr[i]}\n        arr[i]=${arr[j]}\n        arr[j]=$temp\n\
    \      fi\n    done\n  done\n  if [[ ${arr[0]} -eq 1 ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi\n}\n\ncandidate() {\n    move_one_ball \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[\
    \ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzojaezqu.sh: line 41: [[: 3 4 5 1 2: syntax error in expression
    (error token is "4 5 1 2")

    '
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a nums\n  IFS=\" \" read\
    \ -a nums <<< \"$1\"\n  # shift our array to the right a max of ${#nums[@]} times\n\
    \  local max_shifts=${#nums[@]}\n  for (( i=0; i<max_shifts; i++ )); do\n    local\
    \ -a new_nums=()\n    for (( j=1; j<${#nums[@]}; j++ )); do\n      new_nums+=(${nums[$j]})\n\
    \    done\n    new_nums+=(${nums[0]})\n    # if the new array is sorted, we're\
    \ done!\n    if [[ \"$(space_join new_nums)\" == \"$(sort -n <<< \"$(space_join\
    \ new_nums)\")\" ]]; then\n      echo \"true\"\n      return\n    fi\n    # otherwise,\
    \ we shift the array again\n    nums=(\"${new_nums[@]}\")\n  done\n  # if we've\
    \ shifted the entire array and it's not sorted, it's not possible to do so\n \
    \ echo \"false\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate\
    \ \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") =\
    \ \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcnnzedj0.sh: line 37: space_join: command not found

    /tmp/tmpcnnzedj0.sh: line 37: space_join: command not found

    /tmp/tmpcnnzedj0.sh: line 37: space_join: command not found

    /tmp/tmpcnnzedj0.sh: line 37: space_join: command not found

    /tmp/tmpcnnzedj0.sh: line 37: space_join: command not found

    /tmp/tmpcnnzedj0.sh: line 37: space_join: command not found

    '
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # Input validation\n    if\
    \ [[ -z \"$1\" ]]; then\n        echo \"false\"\n        return\n    fi\n    #\
    \ shift all elements one position in the right direction\n    shift=$(echo \"\
    $1\" | awk '{print $NF; $NF=\"\"} 1')\n    echo \"$shift $1\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    declare -a arr\n    arr=($1)\n\
    \    # echo arr: ${arr[@]}\n    # sorted=($(echo ${arr[@]} | tr ' ' '\\n' | sort\
    \ -u | tr '\\n' ' '))\n    sorted=($(printf \"%s\\n\" \"${arr[@]}\" | sort -u))\n\
    \    # echo sorted: ${sorted[@]}\n    len=${#arr[@]}\n    len1=${#sorted[@]}\n\
    \    # echo len: $len\n    # echo len1: $len1\n    if [[ len -eq len1 ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local result=\"true\"\n  local\
    \ array=($1)\n  for ((i=0; i<${#array[@]}; i++)); do\n    if (( $i != 0 )) &&\
    \ (( ${array[$i]} < ${array[$i-1]} )); then\n      result=\"false\"\n      break\n\
    \    fi\n  done\n  echo $result\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n\tlocal t=()\n\tlocal j=0\n\t\
    for i in $1; do\n\t\tt[$j]=$i\n\t\tj=$(($j+1))\n\tdone\n\tn=${#t[@]}\n\ti=0\n\t\
    while [[ $i -lt $n-1 ]]; do\n\t\tif [[ ${t[$i]} -lt ${t[$i+1]} ]]; then\n\t\t\t\
    i=$(($i+1))\n\t\telse\n\t\t\tbreak\n\t\tfi\n\tdone\n\tfor j in $(seq $i $(($n-1)));\
    \ do\n\t\tif [[ ${t[$j]} -lt ${t[$i]} ]]; then\n\t\t\ti=$j\n\t\tfi\n\tdone\n\t\
    j=$(($i+1))\n\twhile [[ $j -lt $n ]]; do\n\t\tif [[ ${t[$j]} -lt ${t[$i]} ]];\
    \ then\n\t\t\techo \"false\"\n\t\t\treturn 0\n\t\tfi\n\t\tj=$(($j+1))\n\tdone\n\
    \techo \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=( $1 )\n    sort=( $(echo\
    \ \"${arr[@]}\" | tr ' ' '\\n' | sort -n) )\n    for ((i=0; i<${#arr[@]}; i++));\
    \ do\n        if [[ \"${arr[$i]}\" != \"${sort[$i]}\" ]]; then\n            break\n\
    \        fi\n    done\n    if [[ \"${arr[$i-1]}\" == \"${sort[$i]}\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  arr=$1\n  # fill in your code\
    \ here\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local arr=(\"$@\")\n  local\
    \ sorted=(\"$@\")\n  local i=0\n  local start\n  if [ ${#arr[@]} -eq 0 ]; then\n\
    \    echo \"true\"\n    return\n  fi\n  sort -n <<< \"${arr[@]}\" > /dev/null\
    \ 2>&1\n  if [ $? -eq 0 ]; then\n    echo \"true\"\n    return\n  fi\n  while\
    \ [ $i -lt ${#arr[@]} ]; do\n    if [ $i -eq 0 ]; then\n      start=${arr[$i]}\n\
    \    else\n      if [ $start -gt ${arr[$i]} ]; then\n        echo \"false\"\n\
    \        return\n      fi\n    fi\n    ((i++))\n  done\n  echo \"true\"\n}\n\n\
    candidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5\
    \ 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local list=($1)\n    local\
    \ length=${#list[@]}\n    local i=0\n    local diff=0\n    # We compare only the\
    \ first half of the array since the other half would be\n    # the reverse order.\n\
    \    while [ $i -lt $((length/2)) ]; do\n        diff=$((list[i]-list[$((length-i-1))]))\n\
    \        if [ $diff -lt 0 ]; then\n            echo \"false\"\n            return\n\
    \        fi\n        i=$((i+1))\n    done\n    echo \"true\"\n}\n\ncandidate()\
    \ {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n\
    \    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1\
    \ 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n  local -a array=( $1 )\n  local\
    \ i=1\n  local -i min=0\n  for value in \"${array[@]}\"; do\n    if [[ $value\
    \ -lt $min ]]; then\n      echo \"false\"\n      return\n    fi\n    min=$value\n\
    \    (( i++ ))\n  done\n  echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 2
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n   # Write your solution here\n\
    }\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\"\
    ) = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\n\
    run_test"
  status: SyntaxError
  stderr: '/tmp/tmp1_xycq4g.sh: line 27: syntax error near unexpected token `}''

    /tmp/tmp1_xycq4g.sh: line 27: `}''

    '
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # initialize with the sorted\
    \ version of the list\n    local sorted=\"$(printf \"%s\\n\" $1 | sort -n | tr\
    \ '\\n' ' ')\"\n    # uncomment to debug the result\n    # echo \"sorted: $sorted\"\
    \n    # iterate over elements in the list\n    for n in $1; do\n        # uncomment\
    \ to debug the result\n        # echo \"element: $n\"\n        # remove the element\
    \ from the list\n        # use printf to remove only the first occurrence of the\
    \ element\n        # use xargs to trim the spaces\n        local list=\"$(printf\
    \ \"%s\\n\" $1 | sed -e \"s/$n//\" | xargs)\"\n        # uncomment to debug the\
    \ result\n        # echo \"list: $list\"\n        # if the list is not sorted,\
    \ return \"false\"\n        if [ \"$(printf \"%s\\n\" $list | sort -n | tr '\\\
    n' ' ')\" != \"$sorted\" ]; then\n            echo \"false\"\n            return\
    \ 0\n        fi\n    done\n    # if the list is sorted return \"true\"\n    echo\
    \ \"true\"\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5\
    \ 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n  \
    \  [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate \"\") = \"\
    true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    read -r -a arr <<< \"$1\"\n\
    \    len=${#arr[@]}\n    if [ $len -eq 0 ]; then\n        echo \"true\"\n    \
    \    return 0\n    fi\n    if [ $len -eq 1 ]; then\n        echo \"true\"\n  \
    \      return 0\n    fi\n    if [ $len -eq 2 ]; then\n        if [ ${arr[0]} -lt\
    \ ${arr[1]} ]; then\n            echo \"true\"\n            return 0\n       \
    \ else\n            echo \"false\"\n            return 0\n        fi\n    fi\n\
    \    min=${arr[0]}\n    max=${arr[0]}\n    flag=\"true\"\n    for ((i=1; i<$len;\
    \ i++)); do\n        if [ ${arr[$i]} -gt $max ]; then\n            max=${arr[$i]}\n\
    \        fi\n        if [ ${arr[$i]} -lt $min ]; then\n            min=${arr[$i]}\n\
    \        fi\n        if [ ${arr[$i]} -lt ${arr[$i-1]} ]; then\n            flag=\"\
    false\"\n        fi\n    done\n    for ((i=0; i<$len; i++)); do\n        if [\
    \ ${arr[$i]} -eq $min ]; then\n            for ((j=$i; j<$len; j++)); do\n   \
    \             if [ ${arr[$j]} -eq $max ]; then\n                    if [ $j -gt\
    \ $i ]; then\n                        echo \"true\"\n                        return\
    \ 0\n                    fi\n                fi\n            done\n        fi\n\
    \    done\n    echo $flag\n}\n\ncandidate() {\n    move_one_ball \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\" ]]\n    [[\
    \ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"4 3 1 2\") =\
    \ \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n    [[ $(candidate\
    \ \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    local arr=(\"$@\")\n    local\
    \ N=${#arr[@]}\n    if [[ $N -eq 0 ]]; then\n        echo \"true\"\n        return\n\
    \    fi\n    local max_elem=${arr[0]}\n    for (( i=1; i<$N; i++ )); do\n    \
    \    local elem=${arr[$i]}\n        if [[ $elem -gt $max_elem ]]; then\n     \
    \       max_elem=$elem\n        else\n            echo \"false\"\n           \
    \ return\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    # TODO\n    declare -a arr=($1)\n\
    \    if [ $# -lt 1 ]; then\n        echo \"true\"\n        return\n    fi\n  \
    \  arrsize=${#arr[@]}\n    for ((i=0; i<$arrsize; i++)); do\n        for ((j=i+1;\
    \ j<$arrsize; j++)); do\n            if [ ${arr[$i]} -gt ${arr[$j]} ]; then\n\
    \                echo \"false\"\n                return\n            fi\n    \
    \    done\n    done\n    echo \"true\"\n}\n\ncandidate() {\n    move_one_ball\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4 5 1 2\") = \"true\"\
    \ ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n    [[ $(candidate \"\
    4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\") = \"false\" ]]\n\
    \    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
- exit_code: 1
  program: "#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ...,\
    \ arr[N].The\n# numbers in the array will be randomly ordered. Your task is to\
    \ determine if\n# it is possible to get an array sorted in non-decreasing order\
    \ by performing \n# the following operation on the given array:\n# You are allowed\
    \ to perform right shift operation any number of times.\n# One right shift operation\
    \ means shifting all elements of the array by one\n# position in the right direction.\
    \ The last element of the array will be moved to\n# the starting position in the\
    \ array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing\
    \ the above operation\n# then return true else return false.\n# If the given array\
    \ is empty then return true.\n# Note: The given list is guaranteed to have unique\
    \ elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n\
    # Explanation: By performin 2 right shift operations, non-decreasing order can\n\
    # be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"\
    false\"\n# Explanation:It is not possible to get non-decreasing order for the\
    \ given\n# array by performing any number of right shift operations.\n#\n# $1\
    \ is a space-separated list\nmove_one_ball() {\n    arr=($1)\n    # The number\
    \ of balls\n    n=${#arr[@]}\n    # Store the original order of the balls\n  \
    \  for ((i=0; i<n; i++)); do\n        original[$i]=$i\n    done\n    # Find the\
    \ largest ball\n    l=0\n    for ((i=1; i<n; i++)); do\n        if [[ ${arr[$i]}\
    \ -gt ${arr[$l]} ]]; then\n            l=$i\n        fi\n    done\n    # Now,\
    \ see if we can get the ball to the right place by right shifting\n    # the array\n\
    \    for ((i=1; i<n; i++)); do\n        if [[ ${arr[$i]} -lt ${arr[$((i-1))]}\
    \ ]]; then\n            # If the largest ball isn't in the place it's supposed\
    \ to be,\n            # then we can't sort the list in non-decreasing order\n\
    \            if [[ $i -ne $l ]]; then\n                echo \"false\"\n      \
    \          return\n            else\n                # Check to see if the balls\
    \ to the left of the largest ball are\n                # in the correct places\n\
    \                for ((j=0; j<i; j++)); do\n                    if [[ ${arr[$j]}\
    \ -gt ${arr[$((j+1))]} ]]; then\n                        echo \"false\"\n    \
    \                    return\n                    fi\n                done\n  \
    \          fi\n        fi\n    done\n    echo \"true\"\n}\n\ncandidate() {\n \
    \   move_one_ball \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"3 4\
    \ 5 1 2\") = \"true\" ]]\n    [[ $(candidate \"3 5 10 1 2\") = \"true\" ]]\n \
    \   [[ $(candidate \"4 3 1 2\") = \"false\" ]]\n    [[ $(candidate \"3 5 4 1 2\"\
    ) = \"false\" ]]\n    [[ $(candidate \"\") = \"true\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660022869
