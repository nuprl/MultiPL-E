name: HumanEval_94_skjkasdkd
language: sh
prompt: "#!/bin/bash\n# You are given a list of integers.\n# You need to find the\
  \ largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd\
  \ \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd\
  \ \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1\
  \ 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd\
  \ \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12\
  \ 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a\
  \ space-separated list\nskjkasdkd() {\n"
tests: "}\n\ncandidate() {\n    skjkasdkd \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\") = \"10\" ]]\n\
  \    [[ $(candidate \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\") = \"25\" ]]\n \
  \   [[ $(candidate \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\") = \"\
  13\" ]]\n    [[ $(candidate \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\") = \"11\" ]]\n\
  \    [[ $(candidate \"0 81 12 3 1 21\") = \"3\" ]]\n    [[ $(candidate \"0 8 1 2\
  \ 1 7\") = \"7\" ]]\n    [[ $(candidate \"8191\") = \"19\" ]]\n    [[ $(candidate\
  \ \"8191 123456 127 7\") = \"19\" ]]\n    [[ $(candidate \"127 97 8192\") = \"10\"\
  \ ]]\n}\n\nrun_test"
completions: ["\tsolution=''\n\tsolution=`echo $1 | tr ' ' '\\n' | sort -nr | head\
    \ -n 1`\n\techo \"Solution is: $solution\"\n\tsum=0\n\tsum=`echo $solution | sed\
    \ 's/\\(.\\)/\\1 + /g' | sed 's/\\(.*\\) + $/\\1/' | bc`\n\techo \"Sum of digits\
    \ is: $sum\"", "  # Wrote your code here\n  local max_prime=0\n  local sum=0\n\
    \  local num\n  local i\n\n  for num in $1; do\n    is_prime=1\n    for ((i=2;\
    \ i<=num/2; i++)); do\n      if (( $num % $i == 0 )); then\n        is_prime=0\n\
    \        break\n      fi\n    done\n    if (( is_prime && num > max_prime ));\
    \ then\n      max_prime=$num\n    fi\n  done\n\n  for (( i=0; i<${#max_prime};\
    \ i++ )); do\n    sum=$(( 10 * sum + ${max_prime:$i:1} ))\n  done\n\n  echo $sum",
  "  local primes=($(echo \"$1\" |\n    tr ' ' '\\n' |\n    sort -n |\n    uniq |\n\
    \    awk '$1>1{for(i=2;i<=$1;i++){if($1%i==0){break};if(i==$1-1){print $1}}}'))\n\
    \  local biggest=\"${primes[-1]}\"\n  local biggest_list=($(echo \"$biggest\"\
    \ | grep -o .)\n  local sum=0\n  for n in \"${biggest_list[@]}\"; do\n    sum=$((sum\
    \ + n))\n  done\n  echo \"$sum\"", "    local max=0\n    for i in $1; do\n   \
    \     if [ $i -gt $max ]; then\n            max=$i\n        fi\n    done\n   \
    \ # max is now the largest number in the list\n\n    for (( i=$max; i>0; i-- ));\
    \ do\n        is_prime $i && break\n    done\n    echo \"$i\" | sed 's/\\(.\\\
    )/\\1\\n/g' | paste -sd+ | bc", "  result=\"\"\n  for num in $1; do\n    if [\
    \ $num -gt $result ]; then\n      result=$num\n    fi\n  done\n  # if $result\
    \ is prime\n  if [ $(($result % 2)) -eq 0 ] || [ $(($result % 3)) -eq 0 ] || [\
    \ $(($result % 5)) -eq 0 ] || [ $(($result % 7)) -eq 0 ]; then\n    result=\"\
    0\"\n  fi\n  echo $result", "    local prime=2\n    for ((i=0; i<${#1}; i++));\
    \ do\n        [ ${1:$i:1} -gt $prime ] && prime=${1:$i:1}\n    done\n    echo\
    \ $prime | tr -d 0 | sed 's/./&\\n/g' | paste -sd+ | bc", "    local -a numbers=($1)\n\
    \    local -i greatest_prime=0\n    local -i current_number\n    local -i i\n\
    \    for current_number in \"${numbers[@]}\"; do\n        i=2\n        while [[\
    \ $((i*i)) -le $current_number ]]; do\n            if [[ $((current_number%i))\
    \ -eq 0 ]]; then\n                break\n            fi\n            i=$((i+1))\n\
    \        done\n        if [[ $((i*i)) -gt $current_number ]]; then\n         \
    \   if [[ $current_number -gt $greatest_prime ]]; then\n                greatest_prime=$current_number\n\
    \            fi\n        fi\n    done\n    echo $greatest_prime | tr -cd [:digit:]\
    \ | fold -w1 | paste -sd+ | bc", "\tlocal list_of_numbers=$1\n\tlocal largest_prime=0\n\
    \tlocal tmp\n\tlocal sum=0\n\tfor i in $list_of_numbers; do\n\t\tif [[ $i -eq\
    \ 0 ]]; then\n\t\t\tcontinue\n\t\tfi\n\t\ttmp=$(awk -v num=$i 'BEGIN { if (num\
    \ % 2 == 0) { print 0; exit } for (i = 3; i <= sqrt(num); i += 2) { if (num %\
    \ i == 0) { print 0; exit } } print 1 }')\n\t\tif [[ $tmp -eq 1 ]]; then\n\t\t\
    \tif [[ $i -gt $largest_prime ]]; then\n\t\t\t\tlargest_prime=$i\n\t\t\tfi\n\t\
    \tfi\n\tdone\n\twhile [[ $largest_prime -gt 0 ]]; do\n\t\tsum=$(( $sum + $largest_prime\
    \ % 10 ))\n\t\tlargest_prime=$(( $largest_prime / 10 ))\n\tdone\n\techo $sum",
  '  # write your code here', "    local input=($1)\n    local largest_prime=0\n \
    \   local prime_sum=0\n    for e in ${input[@]}; do\n        if [[ $(is_prime\
    \ $e) -eq 1 ]]; then\n            if [[ $e -gt $largest_prime ]]; then\n     \
    \           largest_prime=$e\n            fi\n        fi\n    done\n    local\
    \ digits=$(echo \"$largest_prime\" | sed -e 's/\\(.\\)/\\1 /g')\n    local sum=0\n\
    \    for e in $digits; do\n        sum=$((sum + e))\n    done\n    echo $sum",
  "    arr=($@)\n    arr=($(for e in \"${arr[@]}\"; do echo \"$e\"; done | sort -nr))\n\
    \    largest_prime=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n        if [[\
    \ \"${arr[$i]}\" -gt 1 ]]; then\n            prime=1\n            for (( j=2;\
    \ j<${arr[$i]}; j++ )); do\n                if [ $((${arr[$i]}%$j)) == 0 ]; then\n\
    \                    prime=0\n                    break\n                fi\n\
    \            done\n            if [ $prime == 1 ]; then\n                largest_prime=${arr[$i]}\n\
    \                break\n            fi\n        fi\n    done\n    largest_prime_as_str=$(echo\
    \ $largest_prime | grep -o .)\n    largest_prime_sum=0\n    for (( i=0; i<${#largest_prime_as_str[@]};\
    \ i++ )); do\n        largest_prime_sum=$(($largest_prime_sum+${largest_prime_as_str[$i]}))\n\
    \    done\n    echo $largest_prime_sum", "  local largest=0\n  for x in $1\n \
    \ do\n    if [[ $x -gt $largest ]]\n    then\n      largest=$x\n    fi\n  done\n\
    \  local prime=$(get_prime_number $largest)\n  local sum=0\n  for (( i=0; i<${#prime};\
    \ i++ ))\n  do\n    digit=\"${prime:$i:1}\"\n    sum=$((sum + digit))\n  done\n\
    \  echo $sum", "    echo \"$1\" | tr ' ' '\\n' |\n        awk '$1==int($1) { a[$1]\
    \ = 1; next } END { for (i in a) {print i} }' |\n        awk 'length($1)>1 {print;\
    \ next}\n        $1==int($1) {\n            for (i=2; i<=$1; i++) {\n        \
    \        if ($1 % i == 0) next\n            }\n            print $1\n        }'\
    \ |\n        awk '$1>largest {largest=$1} END { print largest }' |\n        awk\
    \ '{split($1,arr,\"\"); \n            for (i in arr) {\n                sum +=\
    \ arr[i]\n            }\n            print sum}'", "\tlocal IFS=$' '\n\tlocal\
    \ max_number=0\n\tlocal sum=0\n\tlocal arr=(\"$@\")\n\tfor number in \"${arr[@]}\"\
    ; do\n\t\tif [[ $number > $max_number ]]; then\n\t\t\tlocal max_number=$number\n\
    \t\tfi\n\tdone\n\tfor((i=2; i <= $max_number; i++)); do\n\t\tlocal prime=1\n\t\
    \tfor((j=2; j <= i/2; j++)); do\n\t\t\tif [[ $((i%j)) -eq 0 ]]; then\n\t\t\t\t\
    local prime=0\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif [[ $prime -eq 1 ]]; then\n\
    \t\t\tfor number in \"${arr[@]}\"; do\n\t\t\t\tif [[ $number -eq $i ]]; then\n\
    \t\t\t\t\tlocal sum=$((sum + i))\n\t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\tdone\n\techo\
    \ \"$sum\"", "  local primes=$(echo \"$1\" | tr ' ' '\\n' | uniq |\n    sort --numeric-sort\
    \ --reverse)\n  local largest_prime=0\n  local largest_prime_sum=0\n  for prime\
    \ in $primes; do\n    local is_prime=1\n    for (( i=2; i < $prime; i++ )); do\n\
    \      (( $prime % $i == 0 )) && is_prime=0 && break\n    done\n    if (( $is_prime\
    \ )); then\n      local sum=0\n      for digit in $(echo \"$prime\" | sed 's/./&\
    \ /g'); do\n        (( sum += $digit ))\n      done\n      if (( $sum > $largest_prime_sum\
    \ )); then\n        largest_prime_sum=$sum\n        largest_prime=$prime\n   \
    \   fi\n    fi\n  done\n  echo \"$largest_prime_sum\"", "  local list=$1\n  local\
    \ number\n  local len\n  local x\n  local max=0\n  # Find maximum prime\n  for\
    \ number in $list; do\n    len=${#number}\n    # Check if prime\n    x=2\n   \
    \ while [ $x -lt $len ]; do\n      if [ $(( number % x )) -eq 0 ]; then\n    \
    \    break\n      fi\n      x=$(( x + 1 ))\n    done\n    if [ $x -eq $len ];\
    \ then\n      if [ $number -gt $max ]; then\n        max=$number\n      fi\n \
    \   fi\n  done\n  # Get sum of digits\n  local sum=0\n  for (( i=0; i<${#max};\
    \ i++ )); do\n    sum=$(( sum + ${max:$i:1} ))\n  done\n  echo $sum", "  # $1,\
    \ $2, $3 are the digits of the largest prime value\n  local -i sum=0 max1=0 max2=0\
    \ max3=0\n  # $prime is the current prime number, initialized with the first input\n\
    \  local -i prime=\"$1\"\n  # $n is the current input number\n  local -i n\n \
    \ shift\n\n  # Main cycle: scan all the remaining inputs\n  for n in \"$@\"; do\n\
    \    # If the input number is a multiple of the current prime,\n    # simply skip\
    \ it.\n    if (( n % prime == 0 )); then\n      continue\n    fi\n\n    # If the\
    \ input number is not a multiple of the current prime,\n    # it's not a prime\
    \ number itself.\n    # If it has three digits and is greater than the current\n\
    \    # largest prime value, update the latter.\n    if (( n > prime && n < 1000\
    \ )); then\n      prime=\"$n\"\n      max1=\"$(( prime / 100 ))\"\n      max2=\"\
    $(( prime / 10 % 10 ))\"\n      max3=\"$(( prime % 10 ))\"\n    fi\n  done\n\n\
    \  # Show the output\n  printf '%d' \"$(( max1 + max2 + max3 ))\"", "  # Write\
    \ your code here\n  echo \"\"", "    local res=\"$(echo $1 | tr ' ' '\\n' | sort\
    \ -nr | uniq |\\\n    awk 'BEGIN {res = 0} NR == 1 {res = $1} NR > 1 {if ($1 ==\
    \ 1) {print res; exit 0}; if ($1 % (NR - 1) != 0) {res = $1}} END {print res}')\"\
    \n    echo -n $(echo $res | grep -o . | paste -sd+ | bc)", "  \n  declare -a arr=()\n\
    \  local args=(\"$@\")\n  local c=0\n\n  # Assign each arg a value\n  for arg\
    \ in $@; do\n    arr[$c]=$arg\n    c=$(($c+1))\n  done\n\n  # The first number\
    \ of the list is the length of the list\n  local length=${arr[0]}\n\n  # All possible\
    \ prime numbers between 2 and maximum number of the list\n  local primes=\"2 3\
    \ 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107\
    \ 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211\
    \ 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317\
    \ 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439\
    \ 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569\
    \ 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677\
    \ 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821\
    \ 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947\
    \ 953 967 971 977 983 991 997\"\n\n  # Iterate through all possible prime numbers.\n\
    \  # If the prime number exists in the list, break.\n  for prime in $primes; do\n\
    \    for i in ${arr[@]}; do\n      if [ $i -eq $prime ]; then\n        final_prime=$prime\n\
    \        break 2\n      fi\n    done\n  done\n\n  # Get the value of the largest\
    \ prime as a string\n  local str_prime=$(echo $final_prime | tr -d \"\\\\n\")\n\
    \n  # Assign each digit to an array\n  c=0\n  for (( i=0; i<${#str_prime}; i++\
    \ )); do\n    arr[$"]
stop_tokens:
- "\n}"
