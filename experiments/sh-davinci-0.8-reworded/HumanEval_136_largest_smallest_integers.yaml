name: HumanEval_136_largest_smallest_integers
language: sh
prompt: "#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n\
  # the largest of negative integers, and 'b' is the smallest\n# of positive integers\
  \ in a list.\n# If there is no negative or positive integers, return them as None.\n\
  # Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"',\
  \ '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n\
  # >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is\
  \ a space-separated list\nlargest_smallest_integers() {\n"
tests: "}\n\ncandidate() {\n    largest_smallest_integers \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"2 4 1 3 5 7\") = \"None 1\" ]]\n    [[ $(candidate \"\
  2 4 1 3 5 7 0\") = \"None 1\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 -2\") = \"-2\
  \ 1\" ]]\n    [[ $(candidate \"4 5 3 6 2 7 -7\") = \"-7 2\" ]]\n    [[ $(candidate\
  \ \"7 3 8 4 9 2 5 -9\") = \"-9 2\" ]]\n    [[ $(candidate \"\") = \"None None\"\
  \ ]]\n    [[ $(candidate \"0\") = \"None None\" ]]\n    [[ $(candidate \"-1 -3 -5\
  \ -6\") = \"-1 None\" ]]\n    [[ $(candidate \"-1 -3 -5 -6 0\") = \"-1 None\" ]]\n\
  \    [[ $(candidate \"-6 -4 -4 -3 1\") = \"-3 1\" ]]\n    [[ $(candidate \"-6 -4\
  \ -4 -3 -100 1\") = \"-3 1\" ]]\n}\n\nrun_test"
completions: ["  local -a negs=()\n  local -a poss=()\n  local -a ints=($1)\n  for\
    \ i in \"${ints[@]}\"; do\n    if ((i < 0)); then\n      negs+=(\"$i\")\n    elif\
    \ ((i > 0)); then\n      poss+=(\"$i\")\n    fi\n  done\n  local -a result=(\"\
    \\\"None\\\"\" \"\\\"None\\\"\")\n  if [[ ${#negs[@]} -gt 0 ]]; then\n    result[0]=\"\
    \\\"$(printf '%s\\n' \"${negs[@]}\" | sort -nr | head -n 1)\\\"\"\n  fi\n  if\
    \ [[ ${#poss[@]} -gt 0 ]]; then\n    result[1]=\"\\\"$(printf '%s\\n' \"${poss[@]}\"\
    \ | sort -n | head -n 1)\\\"\"\n  fi\n  echo \"[${result[0]}, ${result[1]}]\"",
  "  if [ \"$#\" -gt 0 ]; then\n    printf \"[\\\"%s\\\", \\\"%s\\\"]\" \"$(largest_integer\
    \ \"$@\")\" \"$(smallest_integer \"$@\")\"\n  else\n    printf \"[\\\"None\\\"\
    , \\\"None\\\"]\"\n  fi", "  if [ -z \"$1\" ]; then\n    echo \"\\\"None\\\" \\\
    \"None\\\"\"\n    return\n  fi\n\n  local largest_negative\n  local smallest_positive\n\
    \n  for i in $1; do\n    if [ \"$i\" -lt 0 ]; then\n      if [ -z \"$largest_negative\"\
    \ ] || [ \"$i\" -gt \"$largest_negative\" ]; then\n        largest_negative=\"\
    $i\"\n      fi\n    elif [ \"$i\" -gt 0 ]; then\n      if [ -z \"$smallest_positive\"\
    \ ] || [ \"$i\" -lt \"$smallest_positive\" ]; then\n        smallest_positive=\"\
    $i\"\n      fi\n    fi\n  done\n\n  if [ -z \"$largest_negative\" ]; then\n  \
    \  largest_negative=\"None\"\n  fi\n\n  if [ -z \"$smallest_positive\" ]; then\n\
    \    smallest_positive=\"None\"\n  fi\n\n  echo \"\\\"$largest_negative\\\" \\\
    \"$smallest_positive\\\"\"", "    # echo \"$1\"\n    # do something\n    # echo\
    \ $1 | tr \" \" \"\\n\"\n    echo '\"\"'", "    # your code is here\n    if [[\
    \ -z $1 ]]; then\n        echo None None\n    else\n        min=`echo $1 | awk\
    \ '{print $1}'`\n        max=`echo $1 | awk '{print $1}'`\n        for i in $1;\
    \ do\n            if [[ $i -lt $min ]]; then\n                min=$i\n       \
    \     fi\n            if [[ $i -gt $max ]]; then\n                max=$i\n   \
    \         fi\n        done\n        echo ${min:-None} ${max:-None}\n    fi", " \
    \ local arg=\"$1\"\n\n  local result=\"$(python -c \"\nimport sys\nif sys.version_info[0]\
    \ < 3:\n  i = int\nelse:\n  i = lambda x: int(x, 0)\n\ndef largest_smallest_integers(arg):\n\
    \  data = [i(x) for x in arg.split()]\n  negatives = [x for x in data if x < 0]\n\
    \  positives = [x for x in data if x > 0]\n  if negatives:\n    largest_negative\
    \ = max(negatives)\n  else:\n    largest_negative = None\n  if positives:\n  \
    \  smallest_positive = min(positives)\n  else:\n    smallest_positive = None\n\
    \  return largest_negative, smallest_positive\n\nif __name__ == '__main__':\n\
    \  arg = sys.argv[1]\n  largest_negative, smallest_positive = largest_smallest_integers(arg)\n\
    \  print('[\\\\'{0}\\\\', \\\\\"{1}\\\\\"]'.format(\n    largest_negative, smallest_positive))\n\
    \")\"\n  echo \"$result\"", "\tdeclare -a list\n\tfor e in $1; do\n\t\tlist+=(\"\
    $e\")\n\tdone\n\tdeclare -a positive=(${list[@]##-})\n\tdeclare -a negative=(${list[@]%%+})\n\
    \tdeclare -a sorted_positive\n\tdeclare -a sorted_negative\n\tfor e in ${positive[@]};\
    \ do\n\t\tsorted_positive+=(\"$e\")\n\tdone\n\tsorted_positive=($(bubble_sort\
    \ \"${sorted_positive[@]}\"))\n\tfor e in ${negative[@]}; do\n\t\tsorted_negative+=(\"\
    $e\")\n\tdone\n\tsorted_negative=($(bubble_sort \"${sorted_negative[@]}\"))\n\t\
    if [[ -z ${sorted_positive[0]} ]]; then\n\t\tsorted_positive=(None)\n\tfi\n\t\
    if [[ -z ${sorted_negative[0]} ]]; then\n\t\tsorted_negative=(None)\n\tfi\n\t\
    echo \"[\\\"${sorted_negative[-1]}\\\", \\\"${sorted_positive[0]}\\\"]\"", " \
    \ local -a nums=()\n  for num in $1; do\n    if ((num != 0)); then\n      nums+=(\"\
    $num\")\n    fi\n  done\n  if ((${#nums[@]} == 0)); then\n    echo \"\\\"None\\\
    \" \\\"None\\\"\"\n    return\n  fi\n  local smallest_positive=${nums[0]}\n  local\
    \ largest_negative=${nums[0]}\n  for num in \"${nums[@]}\"; do\n    if ((num >\
    \ 0 && num < smallest_positive)); then\n      smallest_positive=$num\n    elif\
    \ ((num < 0 && num > largest_negative)); then\n      largest_negative=$num\n \
    \   fi\n  done\n  if ((smallest_positive == 0)); then\n    smallest_positive=\"\
    None\"\n  fi\n  if ((largest_negative == 0)); then\n    largest_negative=\"None\"\
    \n  fi\n  echo \"\\\"$largest_negative\\\" \\\"$smallest_positive\\\"\"", "  #\
    \ Your code here.\n  # Also, change the return value to return the answer.\n \
    \ return", "    declare -a numbers=($1)\n    small=None\n    large=None\n    for\
    \ i in \"${numbers[@]}\"; do\n        if [[ \"$i\" == -* ]]; then\n          \
    \  if [[ -z \"$large\" ]] || [[ $i -gt $large ]]; then\n                large=$i\n\
    \            fi\n        else\n            if [[ -z \"$small\" ]] || [[ $i -lt\
    \ $small ]]; then\n                small=$i\n            fi\n        fi\n    done\n\
    \    echo \"['\"$large\"', '\"$small\"']\"", "  local largest=None\n  local smallest=None\n\
    \  local number\n  for number in $1; do\n    [ \"$number\" -gt 0 ] &&\n      [\
    \ \"$smallest\" = None ] &&\n      smallest=$number ||\n      [ \"$number\" -lt\
    \ \"$smallest\" ] &&\n      smallest=$number\n    [ \"$number\" -lt 0 ] &&\n \
    \     [ \"$largest\" = None ] &&\n      largest=$number ||\n      [ \"$number\"\
    \ -gt \"$largest\" ] &&\n      largest=$number\n  done\n  echo \"[\\\"$largest\\\
    \", \\\"$smallest\\\"]\"", "  if [[ -z \"$1\" ]]; then\n    echo ['\"None\"',\
    \ '\"None\"']\n    return\n  fi\n\n  local -a nums=($1)\n  local largest=-Inf\n\
    \  local smallest=Inf\n\n  for num in \"${nums[@]}\"; do\n    if [[ $num -lt 0\
    \ ]]; then\n      if [[ $num -gt $largest ]]; then\n        largest=$num\n   \
    \   fi\n    elif [[ $num -lt $smallest ]]; then\n      smallest=$num\n    fi\n\
    \  done\n\n  if [[ $largest == -Inf ]]; then\n    largest='\"None\"'\n  else\n\
    \    largest=\"\\\"$largest\\\"\"\n  fi\n\n  if [[ $smallest == Inf ]]; then\n\
    \    smallest='\"None\"'\n  else\n    smallest=\"\\\"$smallest\\\"\"\n  fi\n\n\
    \  echo [$largest, $smallest]", "\t#\n\t# Your code here\n\t#", '    # Your code
    here', "    local a b\n\n    for n in $1; do\n        case $n in\n           \
    \ -*)\n                if [[ \"$n\" -gt \"$a\" ]]; then\n                    a=$n\n\
    \                fi\n                ;;\n            *)\n                if [[\
    \ \"$n\" -lt \"$b\" ]]; then\n                    b=$n\n                fi\n \
    \               ;;\n        esac\n    done\n\n    echo \"['\"$a\"', '\"$b\"']\"",
  "    [ $# -eq 0 ] && return 1\n\n    local min max\n    min=${1:-0}\n    max=${1:-0}\n\
    \n    for i in $*; do\n        if [ $i -gt 0 ] && [ $i -lt $min ]; then\n    \
    \        min=$i\n        elif [ $i -lt 0 ] && [ $i -gt $max ]; then\n        \
    \    max=$i\n        fi\n    done\n\n    [ $min -eq 0 ] && min=None\n    [ $max\
    \ -eq 0 ] && max=None\n\n    echo \"[\\\"$max\\\", \\\"$min\\\"]\"", "    local\
    \ negative_max=\"\"\n    local positive_min=\"\"\n    for num in $1; do\n    \
    \    ((num<0)) && ((num>negative_max)) && negative_max=$num\n        ((num>0))\
    \ && ((positive_min==\"\" || num<positive_min)) && positive_min=$num\n    done\n\
    \    if [[ \"$negative_max\" == \"\" ]]; then\n        negative_max=\"None\"\n\
    \    fi\n    if [[ \"$positive_min\" == \"\" ]]; then\n        positive_min=\"\
    None\"\n    fi\n    echo ['\"'$negative_max'\"', '\"'\"$positive_min\"'\"']",
  "\tlocal pos=()\n\tlocal neg=()\n\tfor i in $1; do\n\t\tif [[ $i -lt 0 ]]; then\n\
    \t\t\tneg+=(\"$i\")\n\t\telif [[ $i -gt 0 ]]; then\n\t\t\tpos+=(\"$i\")\n\t\t\
    fi\n\tdone\n\tmax_neg=$(python -c \"\n\timport sys\n\tif len(sys.argv) > 1:\n\t\
    \tprint(max(int(i) for i in sys.argv[1:]))\n\telse:\n\t\tprint('None')\n\t\" \"\
    ${neg[@]}\")\n\tmin_pos=$(python -c \"\n\timport sys\n\tif len(sys.argv) > 1:\n\
    \t\tprint(min(int(i) for i in sys.argv[1:]))\n\telse:\n\t\tprint('None')\n\t\"\
    \ \"${pos[@]}\")\n\techo \"[\\\"$max_neg\\\", \\\"$min_pos\\\"]\"", "    local\
    \ list=$1\n    local a_list=$(echo $list | tr \" \" \"\\n\" | awk '/^-/ {print\
    \ $1}' | sort -nr)\n    local b_list=$(echo $list | tr \" \" \"\\n\" | awk '/^[0-9]/\
    \ {print $1}' | sort -n)\n    local a=$(echo $a_list | awk '{print $1}')\n   \
    \ local b=$(echo $b_list | awk '{print $1}')\n    [ -z \"$a\" ] && a=\"None\"\n\
    \    [ -z \"$b\" ] && b=\"None\"\n    echo ['\"'$a'\"', '\"'$b'\"']", "  input=$1\n\
    \  # Initialize output\n  output=()\n  # Iterate through each item in the list\n\
    \  for i in $input; do\n    # If the item is a positive integer, append it to\
    \ the output\n    if [ $i -gt 0 ]; then\n      output+=(\"$i\")\n    fi\n  done\n\
    \  # If the list of positive integers is empty, output None\n  if [ -z \"$output\"\
    \ ]; then\n    output+=(\"None\")\n  fi\n  # Initialize output\n  output=()\n\
    \  # Iterate through each item in the list\n  for i in $input; do\n    # If the\
    \ item is a negative integer, append it to the output\n    if [ $i -lt 0 ]; then\n\
    \      output+=(\"$i\")\n    fi\n  done\n  # If the list of negative integers\
    \ is empty, output None\n  if [ -z \"$output\" ]; then\n    output+=(\"None\"\
    )\n  fi\n  # Print the output to the console\n  echo \"${output[@]}\""]
stop_tokens:
- "\n}"
