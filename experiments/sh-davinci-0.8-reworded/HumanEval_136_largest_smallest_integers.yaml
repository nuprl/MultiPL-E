name: HumanEval_136_largest_smallest_integers
language: sh
prompt: "#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n\
  # the largest of negative integers, and 'b' is the smallest\n# of positive integers\
  \ in a list.\n# If there is no negative or positive integers, return them as None.\n\
  # Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"',\
  \ '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n\
  # >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is\
  \ a space-separated list\nlargest_smallest_integers() {\n"
tests: "}\n\ncandidate() {\n    largest_smallest_integers \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"2 4 1 3 5 7\") = \"None 1\" ]]\n    [[ $(candidate \"\
  2 4 1 3 5 7 0\") = \"None 1\" ]]\n    [[ $(candidate \"1 3 2 4 5 6 -2\") = \"-2\
  \ 1\" ]]\n    [[ $(candidate \"4 5 3 6 2 7 -7\") = \"-7 2\" ]]\n    [[ $(candidate\
  \ \"7 3 8 4 9 2 5 -9\") = \"-9 2\" ]]\n    [[ $(candidate \"\") = \"None None\"\
  \ ]]\n    [[ $(candidate \"0\") = \"None None\" ]]\n    [[ $(candidate \"-1 -3 -5\
  \ -6\") = \"-1 None\" ]]\n    [[ $(candidate \"-1 -3 -5 -6 0\") = \"-1 None\" ]]\n\
  \    [[ $(candidate \"-6 -4 -4 -3 1\") = \"-3 1\" ]]\n    [[ $(candidate \"-6 -4\
  \ -4 -3 -100 1\") = \"-3 1\" ]]\n}\n\nrun_test"
completions: ["  local -a negs=()\n  local -a poss=()\n  local -a ints=($1)\n  for\
    \ i in \"${ints[@]}\"; do\n    if ((i < 0)); then\n      negs+=(\"$i\")\n    elif\
    \ ((i > 0)); then\n      poss+=(\"$i\")\n    fi\n  done\n  local -a result=(\"\
    \\\"None\\\"\" \"\\\"None\\\"\")\n  if [[ ${#negs[@]} -gt 0 ]]; then\n    result[0]=\"\
    \\\"$(printf '%s\\n' \"${negs[@]}\" | sort -nr | head -n 1)\\\"\"\n  fi\n  if\
    \ [[ ${#poss[@]} -gt 0 ]]; then\n    result[1]=\"\\\"$(printf '%s\\n' \"${poss[@]}\"\
    \ | sort -n | head -n 1)\\\"\"\n  fi\n  echo \"[${result[0]}, ${result[1]}]\"",
  "  if [ \"$#\" -gt 0 ]; then\n    printf \"[\\\"%s\\\", \\\"%s\\\"]\" \"$(largest_integer\
    \ \"$@\")\" \"$(smallest_integer \"$@\")\"\n  else\n    printf \"[\\\"None\\\"\
    , \\\"None\\\"]\"\n  fi", "  if [ -z \"$1\" ]; then\n    echo \"\\\"None\\\" \\\
    \"None\\\"\"\n    return\n  fi\n\n  local largest_negative\n  local smallest_positive\n\
    \n  for i in $1; do\n    if [ \"$i\" -lt 0 ]; then\n      if [ -z \"$largest_negative\"\
    \ ] || [ \"$i\" -gt \"$largest_negative\" ]; then\n        largest_negative=\"\
    $i\"\n      fi\n    elif [ \"$i\" -gt 0 ]; then\n      if [ -z \"$smallest_positive\"\
    \ ] || [ \"$i\" -lt \"$smallest_positive\" ]; then\n        smallest_positive=\"\
    $i\"\n      fi\n    fi\n  done\n\n  if [ -z \"$largest_negative\" ]; then\n  \
    \  largest_negative=\"None\"\n  fi\n\n  if [ -z \"$smallest_positive\" ]; then\n\
    \    smallest_positive=\"None\"\n  fi\n\n  echo \"\\\"$largest_negative\\\" \\\
    \"$smallest_positive\\\"\"", "    # echo \"$1\"\n    # do something\n    # echo\
    \ $1 | tr \" \" \"\\n\"\n    echo '\"\"'", "    # your code is here\n    if [[\
    \ -z $1 ]]; then\n        echo None None\n    else\n        min=`echo $1 | awk\
    \ '{print $1}'`\n        max=`echo $1 | awk '{print $1}'`\n        for i in $1;\
    \ do\n            if [[ $i -lt $min ]]; then\n                min=$i\n       \
    \     fi\n            if [[ $i -gt $max ]]; then\n                max=$i\n   \
    \         fi\n        done\n        echo ${min:-None} ${max:-None}\n    fi", " \
    \ local arg=\"$1\"\n\n  local result=\"$(python -c \"\nimport sys\nif sys.version_info[0]\
    \ < 3:\n  i = int\nelse:\n  i = lambda x: int(x, 0)\n\ndef largest_smallest_integers(arg):\n\
    \  data = [i(x) for x in arg.split()]\n  negatives = [x for x in data if x < 0]\n\
    \  positives = [x for x in data if x > 0]\n  if negatives:\n    largest_negative\
    \ = max(negatives)\n  else:\n    largest_negative = None\n  if positives:\n  \
    \  smallest_positive = min(positives)\n  else:\n    smallest_positive = None\n\
    \  return largest_negative, smallest_positive\n\nif __name__ == '__main__':\n\
    \  arg = sys.argv[1]\n  largest_negative, smallest_positive = largest_smallest_integers(arg)\n\
    \  print('[\\\\'{0}\\\\', \\\\\"{1}\\\\\"]'.format(\n    largest_negative, smallest_positive))\n\
    \")\"\n  echo \"$result\"", "\tdeclare -a list\n\tfor e in $1; do\n\t\tlist+=(\"\
    $e\")\n\tdone\n\tdeclare -a positive=(${list[@]##-})\n\tdeclare -a negative=(${list[@]%%+})\n\
    \tdeclare -a sorted_positive\n\tdeclare -a sorted_negative\n\tfor e in ${positive[@]};\
    \ do\n\t\tsorted_positive+=(\"$e\")\n\tdone\n\tsorted_positive=($(bubble_sort\
    \ \"${sorted_positive[@]}\"))\n\tfor e in ${negative[@]}; do\n\t\tsorted_negative+=(\"\
    $e\")\n\tdone\n\tsorted_negative=($(bubble_sort \"${sorted_negative[@]}\"))\n\t\
    if [[ -z ${sorted_positive[0]} ]]; then\n\t\tsorted_positive=(None)\n\tfi\n\t\
    if [[ -z ${sorted_negative[0]} ]]; then\n\t\tsorted_negative=(None)\n\tfi\n\t\
    echo \"[\\\"${sorted_negative[-1]}\\\", \\\"${sorted_positive[0]}\\\"]\"", " \
    \ local -a nums=()\n  for num in $1; do\n    if ((num != 0)); then\n      nums+=(\"\
    $num\")\n    fi\n  done\n  if ((${#nums[@]} == 0)); then\n    echo \"\\\"None\\\
    \" \\\"None\\\"\"\n    return\n  fi\n  local smallest_positive=${nums[0]}\n  local\
    \ largest_negative=${nums[0]}\n  for num in \"${nums[@]}\"; do\n    if ((num >\
    \ 0 && num < smallest_positive)); then\n      smallest_positive=$num\n    elif\
    \ ((num < 0 && num > largest_negative)); then\n      largest_negative=$num\n \
    \   fi\n  done\n  if ((smallest_positive == 0)); then\n    smallest_positive=\"\
    None\"\n  fi\n  if ((largest_negative == 0)); then\n    largest_negative=\"None\"\
    \n  fi\n  echo \"\\\"$largest_negative\\\" \\\"$smallest_positive\\\"\"", "  #\
    \ Your code here.\n  # Also, change the return value to return the answer.\n \
    \ return", "    declare -a numbers=($1)\n    small=None\n    large=None\n    for\
    \ i in \"${numbers[@]}\"; do\n        if [[ \"$i\" == -* ]]; then\n          \
    \  if [[ -z \"$large\" ]] || [[ $i -gt $large ]]; then\n                large=$i\n\
    \            fi\n        else\n            if [[ -z \"$small\" ]] || [[ $i -lt\
    \ $small ]]; then\n                small=$i\n            fi\n        fi\n    done\n\
    \    echo \"['\"$large\"', '\"$small\"']\"", "  local largest=None\n  local smallest=None\n\
    \  local number\n  for number in $1; do\n    [ \"$number\" -gt 0 ] &&\n      [\
    \ \"$smallest\" = None ] &&\n      smallest=$number ||\n      [ \"$number\" -lt\
    \ \"$smallest\" ] &&\n      smallest=$number\n    [ \"$number\" -lt 0 ] &&\n \
    \     [ \"$largest\" = None ] &&\n      largest=$number ||\n      [ \"$number\"\
    \ -gt \"$largest\" ] &&\n      largest=$number\n  done\n  echo \"[\\\"$largest\\\
    \", \\\"$smallest\\\"]\"", "  if [[ -z \"$1\" ]]; then\n    echo ['\"None\"',\
    \ '\"None\"']\n    return\n  fi\n\n  local -a nums=($1)\n  local largest=-Inf\n\
    \  local smallest=Inf\n\n  for num in \"${nums[@]}\"; do\n    if [[ $num -lt 0\
    \ ]]; then\n      if [[ $num -gt $largest ]]; then\n        largest=$num\n   \
    \   fi\n    elif [[ $num -lt $smallest ]]; then\n      smallest=$num\n    fi\n\
    \  done\n\n  if [[ $largest == -Inf ]]; then\n    largest='\"None\"'\n  else\n\
    \    largest=\"\\\"$largest\\\"\"\n  fi\n\n  if [[ $smallest == Inf ]]; then\n\
    \    smallest='\"None\"'\n  else\n    smallest=\"\\\"$smallest\\\"\"\n  fi\n\n\
    \  echo [$largest, $smallest]", "\t#\n\t# Your code here\n\t#", '    # Your code
    here', "    local a b\n\n    for n in $1; do\n        case $n in\n           \
    \ -*)\n                if [[ \"$n\" -gt \"$a\" ]]; then\n                    a=$n\n\
    \                fi\n                ;;\n            *)\n                if [[\
    \ \"$n\" -lt \"$b\" ]]; then\n                    b=$n\n                fi\n \
    \               ;;\n        esac\n    done\n\n    echo \"['\"$a\"', '\"$b\"']\"",
  "    [ $# -eq 0 ] && return 1\n\n    local min max\n    min=${1:-0}\n    max=${1:-0}\n\
    \n    for i in $*; do\n        if [ $i -gt 0 ] && [ $i -lt $min ]; then\n    \
    \        min=$i\n        elif [ $i -lt 0 ] && [ $i -gt $max ]; then\n        \
    \    max=$i\n        fi\n    done\n\n    [ $min -eq 0 ] && min=None\n    [ $max\
    \ -eq 0 ] && max=None\n\n    echo \"[\\\"$max\\\", \\\"$min\\\"]\"", "    local\
    \ negative_max=\"\"\n    local positive_min=\"\"\n    for num in $1; do\n    \
    \    ((num<0)) && ((num>negative_max)) && negative_max=$num\n        ((num>0))\
    \ && ((positive_min==\"\" || num<positive_min)) && positive_min=$num\n    done\n\
    \    if [[ \"$negative_max\" == \"\" ]]; then\n        negative_max=\"None\"\n\
    \    fi\n    if [[ \"$positive_min\" == \"\" ]]; then\n        positive_min=\"\
    None\"\n    fi\n    echo ['\"'$negative_max'\"', '\"'\"$positive_min\"'\"']",
  "\tlocal pos=()\n\tlocal neg=()\n\tfor i in $1; do\n\t\tif [[ $i -lt 0 ]]; then\n\
    \t\t\tneg+=(\"$i\")\n\t\telif [[ $i -gt 0 ]]; then\n\t\t\tpos+=(\"$i\")\n\t\t\
    fi\n\tdone\n\tmax_neg=$(python -c \"\n\timport sys\n\tif len(sys.argv) > 1:\n\t\
    \tprint(max(int(i) for i in sys.argv[1:]))\n\telse:\n\t\tprint('None')\n\t\" \"\
    ${neg[@]}\")\n\tmin_pos=$(python -c \"\n\timport sys\n\tif len(sys.argv) > 1:\n\
    \t\tprint(min(int(i) for i in sys.argv[1:]))\n\telse:\n\t\tprint('None')\n\t\"\
    \ \"${pos[@]}\")\n\techo \"[\\\"$max_neg\\\", \\\"$min_pos\\\"]\"", "    local\
    \ list=$1\n    local a_list=$(echo $list | tr \" \" \"\\n\" | awk '/^-/ {print\
    \ $1}' | sort -nr)\n    local b_list=$(echo $list | tr \" \" \"\\n\" | awk '/^[0-9]/\
    \ {print $1}' | sort -n)\n    local a=$(echo $a_list | awk '{print $1}')\n   \
    \ local b=$(echo $b_list | awk '{print $1}')\n    [ -z \"$a\" ] && a=\"None\"\n\
    \    [ -z \"$b\" ] && b=\"None\"\n    echo ['\"'$a'\"', '\"'$b'\"']", "  input=$1\n\
    \  # Initialize output\n  output=()\n  # Iterate through each item in the list\n\
    \  for i in $input; do\n    # If the item is a positive integer, append it to\
    \ the output\n    if [ $i -gt 0 ]; then\n      output+=(\"$i\")\n    fi\n  done\n\
    \  # If the list of positive integers is empty, output None\n  if [ -z \"$output\"\
    \ ]; then\n    output+=(\"None\")\n  fi\n  # Initialize output\n  output=()\n\
    \  # Iterate through each item in the list\n  for i in $input; do\n    # If the\
    \ item is a negative integer, append it to the output\n    if [ $i -lt 0 ]; then\n\
    \      output+=(\"$i\")\n    fi\n  done\n  # If the list of negative integers\
    \ is empty, output None\n  if [ -z \"$output\" ]; then\n    output+=(\"None\"\
    )\n  fi\n  # Print the output to the console\n  echo \"${output[@]}\"", "  local\
    \ list=($1)\n  local largest_neg number_neg smallest_pos number_pos\n  largest_neg=$(printf\
    \ '%s\\n' \"${list[@]}\" | grep -vx '-\\|[0-9]' | sort -nr | head -n1)\n  number_neg=$(printf\
    \ '%s\\n' \"${list[@]}\" | grep -vx '-\\|[0-9]' | wc -l)\n  smallest_pos=$(printf\
    \ '%s\\n' \"${list[@]}\" | grep -vx '-\\|[0-9]' | sort -n | head -n1)\n  number_pos=$(printf\
    \ '%s\\n' \"${list[@]}\" | grep -vx '-\\|[0-9]' | wc -l)\n  if [ \"$number_neg\"\
    \ -eq 0 ]; then\n    largest_neg=\"None\"\n  fi\n  if [ \"$number_pos\" -eq 0\
    \ ]; then\n    smallest_pos=\"None\"\n  fi\n  printf '[\"%s\", \"%s\"]' \"$largest_neg\"\
    \ \"$smallest_pos\"", "  negative=$( echo $1 | tr \" \" \"\\n\" | sort -nr | head\
    \ -n 1 )\n  positive=$( echo $1 | tr \" \" \"\\n\" | sort -n | head -n 1 )\n \
    \ negative=${negative:-\"None\"}\n  positive=${positive:-\"None\"}\n  echo \"\
    [\\\"$negative\\\", \\\"$positive\\\"]\"", "  # OPTIONAL:\n  # Do error checking\
    \ to make sure that '$1' is a valid list\n  # and return error message that explains\
    \ what is wrong.\n  if [ ! -z \"$1\" ]; then\n    negatives=()\n    positives=()\n\
    \    for i in $1; do\n      if [ $i -lt 0 ]; then\n        negatives+=(\"$i\"\
    )\n      elif [ $i -gt 0 ]; then\n        positives+=(\"$i\")\n      fi\n    done\n\
    \    if [ ${#negatives[@]} -eq 0 ]; then\n      negatives=(\"None\")\n    fi\n\
    \    if [ ${#positives[@]} -eq 0 ]; then\n      positives=(\"None\")\n    fi\n\
    \    echo \"[\\\"$(echo \"${negatives[@]}\" | tr ' ' ',' | sort -nr | head -n\
    \ 1)\\\", \\\n\\\"$(echo \"${positives[@]}\" | tr ' ' ',' | sort -n | head -n\
    \ 1)\\\"]\"\n  else\n    echo \"[\\\"None\\\", \\\"None\\\"]\"\n  fi", "  # We\
    \ use local variables here to avoid them being exported.\n  local -r number_list=$(echo\
    \ \"$1\" | xargs echo)\n  local largest_negative=\n  local smallest_positive=\n\
    \  # TODO: Write your solution to this exercise here.\n  for number in $number_list;\
    \ do\n    if [[ $number -lt 0 ]]; then\n      if [[ $largest_negative ]]; then\n\
    \        if [[ $number -gt $largest_negative ]]; then\n          largest_negative=$number\n\
    \        fi\n      else\n        largest_negative=$number\n      fi\n    elif\
    \ [[ $number -gt 0 ]]; then\n      if [[ $smallest_positive ]]; then\n       \
    \ if [[ $number -lt $smallest_positive ]]; then\n          smallest_positive=$number\n\
    \        fi\n      else\n        smallest_positive=$number\n      fi\n    fi\n\
    \  done\n  echo \"['$largest_negative', '$smallest_positive']\"", "  if [ -z \"\
    $1\" ]; then\n    echo '\"None\" \"None\"'\n    return\n  fi\n\n  negatives=\"\
    \"\n  positives=\"\"\n  for num in $1; do\n    if [ \"$num\" -lt 0 ]; then\n \
    \     negatives=\"$negatives $num\"\n    elif [ \"$num\" -gt 0 ]; then\n     \
    \ positives=\"$positives $num\"\n    fi\n  done\n\n  if [ -z \"$negatives\" ];\
    \ then\n    negatives=\"None\"\n  else\n    negatives=$(echo $negatives | tr \"\
    \ \" \"\\n\" | sort -nr | head -n 1)\n  fi\n\n  if [ -z \"$positives\" ]; then\n\
    \    positives=\"None\"\n  else\n    positives=$(echo $positives | tr \" \" \"\
    \\n\" | sort -n | head -n 1)\n  fi\n\n  echo \"\\\"$negatives\\\" \\\"$positives\\\
    \"\"", "  # Write your code here\n  if [[ $1 =~ ^[+-]?[0-9]+ ]]; then\n    max_val=$1\n\
    \    min_val=$1\n    for i in $1; do\n      if [[ $i -lt $min_val ]]; then\n \
    \       min_val=$i\n      fi\n      if [[ $i -gt $max_val ]]; then\n        max_val=$i\n\
    \      fi\n    done\n    printf \"[\\\"%s\\\", \\\"%s\\\"]\" $max_val $min_val\n\
    \  else\n    printf \"[\\\"None\\\", \\\"None\\\"]\"\n  fi", "    # Replace this\
    \ for solution\n    echo '[\\\"None\\\", \\\"None\\\"]'", "    # TODO:\n    #\
    \ This function should return a string, as follows:\n    # \"['a', 'b']\"\n  \
    \  # where a and b are the largest and smallest integers in the list\n    # (see\
    \ examples above).\n    # If there is no negative or positive integers, return\
    \ them as \"None\".\n    # Otherwise, if an error occurs, return:\n    # \"['None',\
    \ 'None']\"\n    #\n    # Hint: Try using the following command to check if a\
    \ string is a number:\n    # [ -z \"$(echo $string | sed 's/[0-9]//g')\" ]\n \
    \   # Returns 0 if $string contains only digits, 1 otherwise\n    #\n    # Hint:\
    \ Try using the following command to check if a string is negative:\n    # [ \"\
    $(echo $string | grep '^-')\" ]\n    # Returns 0 if $string starts with '-', 1\
    \ otherwise\n    #\n    # Here is the template for referencing the elements of\
    \ an array:\n    # ${array[@]}\n    # Here is an example:\n    # >>> numbers=\"\
    2 4 1 3 5 7\"\n    # >>> array=($numbers)\n    # >>> echo ${array[@]}\n    # 2\
    \ 4 1 3 5 7\n    #\n    # There are 2 steps to complete this function:\n    #\
    \ 1. Create a new array containing only positive and negative integers\n    #\
    \ 2. Find the largest of negative integers, and the smallest of positive integers\n\
    \    #\n    # Hint: For step 1, try using a condition and the above mentioned\
    \ commands\n    # to filter the provided list.\n    #\n    # Hint: For step 2,\
    \ try using a loop and the above mentioned commands to\n    # find the largest\
    \ of negative integers, and the smallest of positive integers.\n    #\n    # Hint:\
    \ Remember to break the loop once the largest of negative integers,\n    # and\
    \ the smallest of positive integers are found.\n    #\n    # Start coding here\n\
    \    largest=`echo $1 | awk '{for(i=1;i<=NF;i++)if($i<0)print $i}' | sort -nr\
    \ | head -1`\n    smallest=`echo $1 | awk '{for(i=", "\t# Extract all negative\
    \ numbers from $1\n\t# Don't worry about using `grep`\n\tnegatives=\"$(echo \"\
    $1\" | grep -o '\\-[0-9]\\+')\"\n\t# Extract all positive numbers from $1\n\t\
    positives=\"$(echo \"$1\" | grep -o '[0-9]\\+')\"\n\tlargest=\"\"\n\tsmallest=\"\
    \"\n\tif [ -n \"$negatives\" ]; then\n\t\t# Get the maximum negative number\n\t\
    \tlargest=\"$(echo \"$negatives\" | tr ' ' '\\n' | sort -n | tail -n 1)\"\n\t\
    fi\n\tif [ -n \"$positives\" ]; then\n\t\t# Get the minimum positive number\n\t\
    \tsmallest=\"$(echo \"$positives\" | tr ' ' '\\n' | sort -n | head -n 1)\"\n\t\
    fi\n\t# If the maximum negative number is empty, set it to None\n\tif [ -z \"\
    $largest\" ]; then\n\t\tlargest=\"None\"\n\tfi\n\t# If the minimum positive number\
    \ is empty, set it to None\n\tif [ -z \"$smallest\" ]; then\n\t\tsmallest=\"None\"\
    \n\tfi\n\t# Return the list (largest, smallest)\n\techo \"[\\\"$largest\\\", \\\
    \"$smallest\\\"]\"", "  # Replace this with your implementation\n  echo \"\\\"\
    None\\\" \\\"None\\\"\"", "    local smallest=$(echo \"$*\" | tr ' ' '\\n' | grep\
    \ '^[+]*[0-9]\\+$' | sort -n | head -n 1)\n    local largest=$(echo \"$*\" | tr\
    \ ' ' '\\n' | grep '^-[0-9]\\+$' | sort -n | tail -n 1)\n    printf \"[\\\"%s\\\
    \", \\\"%s\\\"]\" \"${largest:-None}\" \"${smallest:-None}\"", "  local sorted_by_number=($(echo\
    \ \"$*\" | tr ' ' '\\n' | sort -n))\n  local length=${#sorted_by_number[@]}\n\
    \  local positive_index=$((length - 1))\n  local negative_index=0\n  local positive_integer=${sorted_by_number[$positive_index]}\n\
    \  local negative_integer=${sorted_by_number[$negative_index]}\n  local largest_negative_integer=None\n\
    \  local smallest_positive_integer=None\n\n  while [[ $positive_integer -lt 0\
    \ ]] && [[ $positive_index -gt 0 ]]; do\n    positive_index=$((positive_index\
    \ - 1))\n    positive_integer=${sorted_by_number[$positive_index]}\n  done\n\n\
    \  while [[ $negative_integer -gt 0 ]] && [[ $negative_index -lt $length ]]; do\n\
    \    negative_index=$((negative_index + 1))\n    negative_integer=${sorted_by_number[$negative_index]}\n\
    \  done\n\n  if [[ $positive_integer -ge 0 ]]; then\n    smallest_positive_integer=$positive_integer\n\
    \  fi\n\n  if [[ $negative_integer -le 0 ]]; then\n    largest_negative_integer=$negative_integer\n\
    \  fi\n\n  echo \"[\\\"$largest_negative_integer\\\", \\\"$smallest_positive_integer\\\
    \"]\"", "    local positive=($1)\n    local negative=($1)\n    local neg_int=0\n\
    \    local pos_int=0\n    local i=0\n    local n=0\n    local len=${#positive[@]}\n\
    \    local len2=${#negative[@]}\n    for (( i=0; i<len; i++ )); do\n        if\
    \ [[ \"${positive[$i]}\" -ge 0 ]]; then\n            pos_int=\"${positive[$i]}\"\
    \n            break\n        fi\n    done\n    for (( n=0; n<len2; n++ )); do\n\
    \        if [[ \"${negative[$n]}\" -lt 0 ]]; then\n            neg_int=\"${negative[$n]}\"\
    \n            break\n        fi\n    done\n    echo \"[\\\"${neg_int}\\\", \\\"\
    ${pos_int}\\\"]\"", "    # Write your code here...\n    local -a arr=(\"$@\")\n\
    \    local smallest=\"\"\n    local largest=\"\"\n    local -i ret\n    local\
    \ -i count=0\n    for e in \"${arr[@]}\"; do\n        ((ret = e < 0)) && ((count\
    \ += 1))\n        if ((ret)); then\n            if [[ -z \"$largest\" ]]; then\n\
    \                largest=\"$e\"\n            elif (( e > largest )); then\n  \
    \              largest=\"$e\"\n            fi\n        else\n            if [[\
    \ -z \"$smallest\" ]]; then\n                smallest=\"$e\"\n            elif\
    \ (( e < smallest )); then\n                smallest=\"$e\"\n            fi\n\
    \        fi\n    done\n    if ((count == 0)); then\n        echo '[\\\"None\\\"\
    , \\\"None\\\"]'\n    else\n        if [[ -z \"$smallest\" ]]; then\n        \
    \    smallest=\"None\"\n        fi\n        if [[ -z \"$largest\" ]]; then\n \
    \           largest=\"None\"\n        fi\n        echo \"[\\\"$largest\\\", \\\
    \"$smallest\\\"]\"\n    fi", "\t#You can use built-in bash functions to sort numbers.\n\
    \t#Use the following syntax to sort a list of numbers in ascending order:\n\t\
    #sorted_list=$(echo $list | xargs -n1 | sort -n | xargs)\n\t#Use the following\
    \ syntax to sort a list of numbers in descending order:\n\t#sorted_list=$(echo\
    \ $list | xargs -n1 | sort -nr | xargs)\n\t#If you would like to save both ascending\
    \ and descending sorted list, do the following:\n\t#IFS=$'\\n' sorted_ascending=($(sort\
    \ <<<\"${list[*]}\"))\n\t#IFS=$'\\n' sorted_descending=($(sort -r <<<\"${list[*]}\"\
    ))\n\tlargest_negative_integer=None\n\tsmallest_positive_integer=None\n\tIFS=$'\\\
    n' sorted_ascending=($(sort <<<\"${list[*]}\"))\n\tIFS=$'\\n' sorted_descending=($(sort\
    \ -r <<<\"${list[*]}\"))\n\tfor element in ${sorted_ascending[@]}; do\n\t\tif\
    \ [ $element -lt 0 ]; then\n\t\t\tlargest_negative_integer=$element\n\t\t\tbreak\n\
    \t\tfi\n\tdone\n\tfor element in ${sorted_descending[@]}; do\n\t\tif [ $element\
    \ -gt 0 ]; then\n\t\t\tsmallest_positive_integer=$element\n\t\t\tbreak\n\t\tfi\n\
    \tdone\n\techo ['\"'$largest_negative_integer'\"', '\"'$smallest_positive_integer'\"\
    ']", "    local answer\n    local a b i val\n    # Extract into array\n    local\
    \ -a array=($1)\n    a=b=val=0\n    for ((i=0; i<${#array[@]}; i++)); do\n   \
    \     # Check for negative integers\n        if [[ ${array[$i]} -lt 0 ]]; then\n\
    \            if [[ ${array[$i]} -gt $a ]]; then\n                a=${array[$i]}\n\
    \            fi\n        else\n            # Check for positive integers\n   \
    \         if [[ ${array[$i]} -gt 0 ]]; then\n                if [[ $b -eq 0 ]];\
    \ then\n                    b=${array[$i]}\n                elif [[ ${array[$i]}\
    \ -lt $b ]]; then\n                    b=${array[$i]}\n                fi\n  \
    \          fi\n        fi\n    done\n    # If no negative or positive integers,\
    \ return None\n    [[ $a -eq 0 ]] && a=\"None\"\n    [[ $b -eq 0 ]] && b=\"None\"\
    \n    echo \"[\\\"$a\\\", \\\"$b\\\"]\"", "\tmax_n=0\n\tmin_p=0\n\tfor num in\
    \ $1; do\n\t\tif [[ $num -gt 0 ]]; then\n\t\t\tif [[ $min_p -eq 0 ]]; then\n\t\
    \t\t\tmin_p=$num\n\t\t\telse\n\t\t\t\tif [[ $num -lt $min_p ]]; then\n\t\t\t\t\
    \tmin_p=$num\n\t\t\t\tfi\n\t\t\tfi\n\t\telif [[ $num -lt 0 ]]; then\n\t\t\tif\
    \ [[ $max_n -eq 0 ]]; then\n\t\t\t\tmax_n=$num\n\t\t\telse\n\t\t\t\tif [[ $num\
    \ -gt $max_n ]]; then\n\t\t\t\t\tmax_n=$num\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\t\
    done\n\tif [[ $max_n -eq 0 ]]; then\n\t\tmax_n=\"None\"\n\tfi\n\tif [[ $min_p\
    \ -eq 0 ]]; then\n\t\tmin_p=\"None\"\n\tfi\n\techo \"[\\\"$max_n\\\", \\\"$min_p\\\
    \"]\"", "  local set=`echo $1 | sed 's/ //g'`\n  if [ -z \"$set\" ]; then\n  \
    \  echo \"\\\"None\\\" \\\"None\\\"\"\n    return\n  fi\n  local min=\"\"\n  local\
    \ max=\"\"\n  for n in `echo $set | sed 's/ //g'`; do\n    if [ -z \"$min\" ];\
    \ then\n      min=$n\n    fi\n    if [ $n -lt $min ]; then\n      min=$n\n   \
    \ fi\n    if [ -z \"$max\" ]; then\n      max=$n\n    fi\n    if [ $n -gt $max\
    \ ]; then\n      max=$n\n    fi\n  done\n  if [ -z \"$min\" ]; then\n    min=\"\
    None\"\n  fi\n  if [ -z \"$max\" ]; then\n    max=\"None\"\n  fi\n  echo \"\\\"\
    $max\\\" \\\"$min\\\"\"", "    # your code here\n    local largest=\n    local\
    \ smallest=\n    local n=0\n    local re=\"^-?[0-9]+$\"\n    local -a intArr\n\
    \    # 1. split the string into an array\n    intArr=($1)\n    # 2. go through\
    \ each element of the array\n    for ((i=0; i<${#intArr[@]}; i++)); do\n     \
    \   # 3. check if the element matches the pattern\n        if [[ ${intArr[$i]}\
    \ =~ $re ]]; then\n            # 4. if yes, increase the counter\n           \
    \ n=$((n+1))\n            # 5. if n=1, then the element is the smallest and largest\n\
    \            if [ $n -eq 1 ]; then\n                largest=${intArr[$i]}\n  \
    \              smallest=${intArr[$i]}\n            # 6. else, compare it with\
    \ the current largest/smallest\n            else\n                if [ ${intArr[$i]}\
    \ -gt $largest ]; then\n                    largest=${intArr[$i]}\n          \
    \      fi\n                if [ ${intArr[$i]} -lt $smallest ]; then\n        \
    \            smallest=${intArr[$i]}\n                fi\n            fi\n    \
    \    fi\n    done\n    # 7. if n=0, then there is no integer\n    if [ $n -eq\
    \ 0 ]; then\n        echo ['\"None\"', '\"None\"']\n    else\n        echo ['\"\
    '$largest'\"', '\"'$smallest'\"']\n    fi", "  local sorted_list=($(echo $1 |\
    \ tr ' ' '\\n' | sort -n))\n  local len=${#sorted_list[@]}\n  if [[ ${len} -eq\
    \ 0 ]]; then\n    echo [\"\\\"None\\\"\",\"\\\"None\\\"\"]\n  else\n    for i\
    \ in $(seq 0 $((${len} - 1))); do\n      local item=${sorted_list[$i]}\n     \
    \ if [[ ${item} -lt 0 ]]; then\n        local largest_negative_int=${item}\n \
    \     else\n        break\n      fi\n    done\n    for i in $(seq $((${len} -\
    \ 1)) 0); do\n      local item=${sorted_list[$i]}\n      if [[ ${item} -gt 0 ]];\
    \ then\n        local smallest_positive_int=${item}\n      else\n        break\n\
    \      fi\n    done\n    if [[ -z ${largest_negative_int} ]]; then\n      local\
    \ largest_negative_int=\"None\"\n    fi\n    if [[ -z ${smallest_positive_int}\
    \ ]]; then\n      local smallest_positive_int=\"None\"\n    fi\n    echo [\"\\\
    \"${largest_negative_int}\\\"\",\"\\\"${smallest_positive_int}\\\"\"]\n  fi",
  "  local list=$1\n  local largest_negative=None\n  local smallest_positive=None\n\
    \  for x in $list; do\n    if [[ $x -lt 0 ]]; then\n      if [[ $largest_negative\
    \ == \"None\" ]] || [[ $x -gt $largest_negative ]]; then\n        largest_negative=$x\n\
    \      fi\n    elif [[ $x -gt 0 ]]; then\n      if [[ $smallest_positive == \"\
    None\" ]] || [[ $x -lt $smallest_positive ]]; then\n        smallest_positive=$x\n\
    \      fi\n    fi\n  done\n  echo [\\\"$largest_negative\\\", \\\"$smallest_positive\\\
    \"]", "    # your code here\n    echo -n \"[\"\n    echo -n $(for i in ${1}; do\n\
    \        if [ ${i} -lt 0 ]; then\n            echo -n \"\\\"${i}\\\"\"\n     \
    \   fi\n    done | sort -nr | head -n 1)\n    echo -n \", \"\n    echo -n $(for\
    \ i in ${1}; do\n        if [ ${i} -gt 0 ]; then\n            echo -n \"\\\"${i}\\\
    \"\"\n        fi\n    done | sort -n | head -n 1)\n    echo -n \"]\"", "    local\
    \ min_pos=Inf max_neg=-Inf\n\n    for num in $1; do\n        if ((num < 0)); then\n\
    \            ((num > max_neg)) && max_neg=${num}\n        else\n            ((num\
    \ < min_pos)) && min_pos=${num}\n        fi\n    done\n\n    if ((min_pos != Inf));\
    \ then\n        echo \"\\\"${min_pos}\\\"\"\n    else\n        echo \"\\\"None\\\
    \"\"\n    fi\n\n    if ((max_neg != -Inf)); then\n        echo \"\\\"${max_neg}\\\
    \"\"\n    else\n        echo \"\\\"None\\\"\"\n    fi", "    numbers=($1)\n  \
    \  negative=()\n    positive=()\n    for n in ${numbers[@]}; do\n        if [[\
    \ $n -lt 0 ]]; then\n            negative+=($n)\n        else\n            positive+=($n)\n\
    \        fi\n    done\n    echo \"[\\\"${negative[-1]}\\\", \\\"${positive[0]}\\\
    \"]\"", "  local largest_negative=\n  local smallest_positive=\n  local cnt=1\n\
    \  for e in ${@}; do\n    if [[ $cnt -eq 1 ]]; then\n      smallest_positive=$e\n\
    \    fi\n    if [[ $e -gt 0 ]]; then\n      if [[ $e -lt $smallest_positive ]];\
    \ then\n        smallest_positive=$e\n      fi\n    else\n      if [[ -z $largest_negative\
    \ ]]; then\n        largest_negative=$e\n      elif [[ $e -gt $largest_negative\
    \ ]]; then\n        largest_negative=$e\n      fi\n    fi\n    cnt=$(( cnt + 1\
    \ ))\n  done\n  if [[ -z $largest_negative ]]; then\n    largest_negative='None'\n\
    \  fi\n  if [[ -z $smallest_positive ]]; then\n    smallest_positive='None'\n\
    \  fi\n  echo \"['\"$largest_negative\"', '\"$smallest_positive\"']\"", "    if\
    \ [ -z \"$1\" ]; then\n        echo '[\\\"None\\\", \\\"None\\\"]'\n        return\n\
    \    fi\n\n    # Declare an array of strings.\n    declare -a arr=();\n\n    #\
    \ Split the string into an array.\n    IFS=' ' read -r -a arr <<< \"$1\"\n\n \
    \   # Declare the smallest positive number.\n    smallest_positive_num=${arr[0]}\n\
    \n    # Find the smallest positive number.\n    for i in \"${arr[@]}\"; do\n \
    \       if [ $i -lt $smallest_positive_num ] && [ $i -gt 0 ]; then\n         \
    \   smallest_positive_num=$i\n        fi\n    done\n\n    # Declare the largest\
    \ negative number.\n    largest_negative_num=${arr[0]}\n\n    # Find the largest\
    \ negative number.\n    for i in \"${arr[@]}\"; do\n        if [ $i -gt $largest_negative_num\
    \ ] && [ $i -lt 0 ]; then\n            largest_negative_num=$i\n        fi\n \
    \   done\n\n    # If the smallest positive number is greater than 0, return it.\n\
    \    # Otherwise, return None.\n    if [ $smallest_positive_num -gt 0 ]; then\n\
    \        smallest_positive=\"$smallest_positive_num\"\n    else\n        smallest_positive=\"\
    None\"\n    fi\n\n    # If the largest negative number is less than 0, return\
    \ it.\n    # Otherwise, return None.\n    if [ $largest_negative_num -lt 0 ];\
    \ then\n        largest_negative=\"$largest_negative_num\"\n    else\n       \
    \ largest_negative=\"None\"\n    fi\n\n    # Return the result as a list of strings.\n\
    \    echo \"[\\\"$largest_negative\\\", \\\"$smallest_positive\\\"]\"", "    local\
    \ largest_negative_number=\"None\"\n    local smallest_positive_number=\"None\"\
    \n    local TMP_FILE_LARGEST_NEGATIVE=\"$(mktemp)\"\n    local TMP_FILE_SMALLEST_POSITIVE=\"\
    $(mktemp)\"\n    local TMP_FILE_SORTED_LIST=\"$(mktemp)\"\n    local SPACE_SEPARATED_LIST=($1)\n\
    \    for number in \"${SPACE_SEPARATED_LIST[@]}\"; do\n        if [[ $number -lt\
    \ 0 ]]; then\n            echo \"$number\" >> $TMP_FILE_LARGEST_NEGATIVE\n   \
    \     elif [[ $number -gt 0 ]]; then\n            echo \"$number\" >> $TMP_FILE_SMALLEST_POSITIVE\n\
    \        fi\n    done\n    sort -nr $TMP_FILE_LARGEST_NEGATIVE > $TMP_FILE_SORTED_LIST\n\
    \    largest_negative_number=$(head -n 1 $TMP_FILE_SORTED_LIST)\n    sort -n $TMP_FILE_SMALLEST_POSITIVE\
    \ > $TMP_FILE_SORTED_LIST\n    smallest_positive_number=$(head -n 1 $TMP_FILE_SORTED_LIST)\n\
    \    echo \"[\\\"$largest_negative_number\\\", \\\"$smallest_positive_number\\\
    \"]\"\n    rm -f $TMP_FILE_LARGEST_NEGATIVE $TMP_FILE_SMALLEST_POSITIVE $TMP_FILE_SORTED_LIST",
  "  local largest=\n  local smallest=\n  local number\n  for number in $1; do\n \
    \   if [ \"$number\" -lt 0 ] && ([ \"$number\" -gt \"$largest\" ] || [ -z \"$largest\"\
    \ ]); then\n      largest=\"$number\"\n    elif [ \"$number\" -gt 0 ] && ([ \"\
    $number\" -lt \"$smallest\" ] || [ -z \"$smallest\" ]); then\n      smallest=\"\
    $number\"\n    fi\n  done\n  if [ -z \"$largest\" ]; then\n    largest=\"None\"\
    \n  fi\n  if [ -z \"$smallest\" ]; then\n    smallest=\"None\"\n  fi\n  echo \"\
    [\\\"$largest\\\", \\\"$smallest\\\"]\"", "  local elements=($1)\n  local smallest=None\n\
    \  local largest=None\n  local val\n  for val in \"${elements[@]}\"; do\n    if\
    \ [[ $val -gt 0 ]]; then\n      if [[ $smallest = \"None\" ]] || [[ $val -lt $smallest\
    \ ]]; then\n        smallest=$val\n      fi\n    else\n      if [[ $largest =\
    \ \"None\" ]] || [[ $val -gt $largest ]]; then\n        largest=$val\n      fi\n\
    \    fi\n  done\n  echo [\\\"$largest\\\", \\\"$smallest\\\"]", "    # return\
    \ '[\"None\", \"None\"]' if the length of the list is less than 1\n    [[ \"$#\"\
    \ -lt 1 ]] && echo '[\"None\", \"None\"]' && return\n\n    positive=\n    negative=\n\
    \    for number in $@; do\n        [[ \"$number\" -lt 0 ]] && negative=\"$number\"\
    \n        [[ \"$number\" -gt 0 ]] && positive=\"$number\"\n    done\n\n    if\
    \ [[ \"$negative\" ]]; then\n        negative=$(echo \"$negative\" | sort -nr\
    \ | head -n 1)\n    else\n        negative=\"None\"\n    fi\n\n    if [[ \"$positive\"\
    \ ]]; then\n        positive=$(echo \"$positive\" | sort -n | head -n 1)\n   \
    \ else\n        positive=\"None\"\n    fi\n\n    echo \"[\\\"$negative\\\", \\\
    \"$positive\\\"]\"", "  local numbers=($(echo \"$1\" | tr ' ' '\\n'))\n  local\
    \ number_count=\"${#numbers[@]}\"\n  local negative_count=0\n  local negative_numbers=()\n\
    \  local positive_count=0\n  local positive_numbers=()\n  for ((i=0; i<${number_count};\
    \ i++)); do\n    if (( ${numbers[$i]} < 0 )); then\n      negative_numbers+=(\"\
    ${numbers[$i]}\")\n      negative_count=$((negative_count + 1))\n    elif (( ${numbers[$i]}\
    \ > 0 )); then\n      positive_numbers+=(\"${numbers[$i]}\")\n      positive_count=$((positive_count\
    \ + 1))\n    fi\n  done\n  if ((negative_count == 0)); then\n    printf '\"None\"\
    '\n  else\n    printf '\"%s\"' \"$(printf '%s\\n' \"${negative_numbers[@]}\" |\
    \ sort -nr | head -n1)\"\n  fi\n  printf ' '\n  if ((positive_count == 0)); then\n\
    \    printf '\"None\"'\n  else\n    printf '\"%s\"' \"$(printf '%s\\n' \"${positive_numbers[@]}\"\
    \ | sort -n | head -n1)\"\n  fi", "    declare -a positives negatives\n    while\
    \ read -r number; do\n        if ((number >= 0)); then\n            positives+=(\"\
    $number\")\n        else\n            negatives+=(\"$number\")\n        fi\n \
    \   done <<< \"$1\"\n    # Sort the arrays\n    positives=($(printf '%s\\n' \"\
    ${positives[@]}\" | sort -g))\n    negatives=($(printf '%s\\n' \"${negatives[@]}\"\
    \ | sort -rg))\n    # Find the largest (last) and smallest (first) number\n  \
    \  local largest_negative=${negatives[-1]}\n    local smallest_positive=${positives[0]}\n\
    \    # If both are empty, then all numbers were 0, so return None\n    if [[ -z\
    \ $largest_negative && -z $smallest_positive ]]; then\n        largest_negative=\"\
    None\"\n        smallest_positive=\"None\"\n    fi\n    echo \"[\\\"$largest_negative\\\
    \", \\\"$smallest_positive\\\"]\"", "  if [[ $# -eq 0 ]]; then\n    echo '[None,\
    \ None]'\n    return\n  fi\n\n  # split the string into words\n  for i in $1;\
    \ do\n    # omit the word if it is not an integer\n    if [[ $i =~ ^-?[0-9]+$\
    \ ]]; then\n      integer_list+=($i)\n    fi\n  done\n\n  if [[ ${#integer_list[@]}\
    \ -eq 0 ]]; then\n    echo '[None, None]'\n    return\n  fi\n\n  # get the largest\
    \ negative integer\n  sorted=$(printf '%s\\n' \"${integer_list[@]}\" | sort -g)\n\
    \  largest_negative=$(echo \"$sorted\" | head -n 1)\n  if [[ $largest_negative\
    \ -gt 0 ]]; then\n    largest_negative=None\n  fi\n\n  # get the smallest positive\
    \ integer\n  sorted=$(printf '%s\\n' \"${integer_list[@]}\" | sort -gr)\n  smallest_positive=$(echo\
    \ \"$sorted\" | head -n 1)\n  if [[ $smallest_positive -lt 0 ]]; then\n    smallest_positive=None\n\
    \  fi\n\n  echo \"[\\\"$largest_negative\\\", \\\"$smallest_positive\\\"]\"",
  "  local a=($1)\n  local max=0\n  local min=0\n  local found_min=false\n  local\
    \ found_max=false\n  local i\n  for i in \"${a[@]}\"; do\n    if [[ $i -lt 0 ]];\
    \ then\n      if [[ $i -gt $max ]]; then\n        max=$i\n        found_max=true\n\
    \      fi\n    elif [[ $i -gt 0 ]]; then\n      if [[ $found_min = false ]]; then\n\
    \        min=$i\n        found_min=true\n      elif [[ $i -lt $min ]]; then\n\
    \        min=$i\n      fi\n    fi\n  done\n  if [[ $found_max = false ]]; then\n\
    \    max=\"None\"\n  fi\n  if [[ $found_min = false ]]; then\n    min=\"None\"\
    \n  fi\n  echo \"[\\\"$max\\\", \\\"$min\\\"]\"", "    local negative_max=0\n\
    \    local positive_min=0\n    for i in $1; do\n        if [ $i -lt 0 ]; then\n\
    \            if [ $i -gt $negative_max ]; then\n                negative_max=$i\n\
    \            fi\n        elif [ $i -gt 0 ]; then\n            if [ $i -lt $positive_min\
    \ ] || [ $positive_min -eq 0 ]; then\n                positive_min=$i\n      \
    \      fi\n        fi\n    done\n    echo \"[\\\"${negative_max:-None}\\\", \\\
    \"${positive_min:-None}\\\"]\"", "    declare -a array=($1)\n    size=${#array[@]}\n\
    \    declare -a neg_int\n    declare -a pos_int\n    for (( i=0; i<${size}; i++\
    \ )); do\n        if [ ${array[$i]} -lt 0 ]; then\n            neg_int+=(${array[$i]})\n\
    \        elif [ ${array[$i]} -gt 0 ]; then\n            pos_int+=(${array[$i]})\n\
    \        fi\n    done\n    size_neg=${#neg_int[@]}\n    size_pos=${#pos_int[@]}\n\
    \    if [ $size_neg -eq 0 ]; then\n        largest=\"None\"\n    else\n      \
    \  largest=${neg_int[0]}\n        for (( i=1; i<${size_neg}; i++ )); do\n    \
    \        if [ ${neg_int[$i]} -gt $largest ]; then\n                largest=${neg_int[$i]}\n\
    \            fi\n        done\n    fi\n    if [ $size_pos -eq 0 ]; then\n    \
    \    smallest=\"None\"\n    else\n        smallest=${pos_int[0]}\n        for\
    \ (( i=1; i<${size_pos}; i++ )); do\n            if [ ${pos_int[$i]} -lt $smallest\
    \ ]; then\n                smallest=${pos_int[$i]}\n            fi\n        done\n\
    \    fi\n    echo \"[\\\"$largest\\\", \\\"$smallest\\\"]\"", "    [[ -z \"$1\"\
    \ ]] && echo '[\"None\", \"None\"]' && return\n    local negative_integers=()\n\
    \    local positive_integers=()\n    for word in $1; do\n        if [[ \"$word\"\
    \ =~ ^[0-9]+$ ]]; then\n            if [[ \"$word\" -ge 0 ]]; then\n         \
    \       positive_integers+=(\"$word\")\n            else\n                negative_integers+=(\"\
    $word\")\n            fi\n        fi\n    done\n    local len_negative_integers=${#negative_integers[@]}\n\
    \    local len_positive_integers=${#positive_integers[@]}\n    if [[ \"$len_negative_integers\"\
    \ -eq 0 || \"$len_positive_integers\" -eq 0 ]]; then\n        echo '[\"None\"\
    , \"None\"]'\n        return\n    fi\n    local largest_negative_integer=${negative_integers[0]}\n\
    \    local smallest_positive_integer=${positive_integers[0]}\n    local i\n  \
    \  for ((i=1; i<len_negative_integers; i++)); do\n        largest_negative_integer=$(python\
    \ -c \"print(max($largest_negative_integer, ${negative_integers[$i]}))\")\n  \
    \  done\n    for ((i=1; i<len_positive_integers; i++)); do\n        smallest_positive_integer=$(python\
    \ -c \"print(min($smallest_positive_integer, ${positive_integers[$i]}))\")\n \
    \   done\n    echo \"[\\\"$largest_negative_integer\\\", \\\"$smallest_positive_integer\\\
    \"]\"", "  local sorted_numbers=$(echo \"$1\" | tr ' ' '\\n' | sort -n)\n  local\
    \ largest_negative=$(echo \"$sorted_numbers\" | head -n 1)\n  local smallest_positive=$(echo\
    \ \"$sorted_numbers\" | tail -n 1)\n  local output=$(echo \"$1\" | tr ' ' '\\\
    n' | grep '^-')\n  local output2=$(echo \"$1\" | tr ' ' '\\n' | grep -v '^-')\n\
    \  if [ -z \"$output\" ]\n  then\n    largest_negative=\"None\"\n  fi\n  if [\
    \ -z \"$output2\" ]\n  then\n    smallest_positive=\"None\"\n  fi\n  echo \"[\\\
    \"$largest_negative\\\", \\\"$smallest_positive\\\"]\"", "    # Write your solution\
    \ here\n    input=$1\n    arr=($input)\n    max=0\n    min=0\n    for i in \"\
    ${arr[@]}\"\n    do\n        if [ $i -gt 0 ] && [ $min -eq 0 ]\n        then\n\
    \            min=$i\n        elif [ $i -gt 0 ] && [ $i -lt $min ]\n        then\n\
    \            min=$i\n        elif [ $i -lt 0 ] && [ $max -eq 0 ]\n        then\n\
    \            max=$i\n        elif [ $i -lt 0 ] && [ $i -gt $max ]\n        then\n\
    \            max=$i\n        fi\n    done\n    echo \"[\\\"$max\\\", \\\"$min\\\
    \"]\"", '  # Your code here', "  local input_str=\"$1\"\n  local negative_list=\"\
    \"\n  local positive_list=\"\"\n  local num=\"\"\n  local a=\"\"\n  local b=\"\
    \"\n\n  while read -r num; do\n    # Negative number\n    if [[ \"$num\" =~ ^-\
    \ ]]; then\n      negative_list=\"$negative_list $num\"\n    # Positive number\n\
    \    elif [[ \"$num\" =~ ^[0-9]+$ ]]; then\n      positive_list=\"$positive_list\
    \ $num\"\n    fi\n  done <<< \"${input_str}\"\n\n  # Find the largest negative\
    \ number\n  a=$(awk 'BEGIN {max = -9999999999} $1 < 0 && $1 > max {max = $1} END\
    \ {print max}' <<< \"${negative_list}\")\n  # Find the smallest positive number\n\
    \  b=$(awk 'BEGIN {min = 9999999999} $1 > 0 && $1 < min {min = $1} END {print\
    \ min}' <<< \"${positive_list}\")\n\n  # If there is no negative or positive integers,\
    \ return them as None.\n  [ -z \"$a\" ] && a=\"None\"\n  [ -z \"$b\" ] && b=\"\
    None\"\n\n  echo '[\"'\"$a\"'\", \"'\"$b\"'\"]'", "    local arg=$1\n    local\
    \ arg_array\n    local n\n    local pos=()\n    local neg=()\n    # if arg is\
    \ empty, return \"None\"\n    if [ -z \"$arg\" ]; then\n        echo '\"None\"\
    '\n        echo '\"None\"'\n        return\n    fi\n    # convert arg to array\n\
    \    arg_array=($arg)\n    # iterate over array elements\n    for n in \"${arg_array[@]}\"\
    ; do\n        # if integer is negative, add it to neg array\n        if (( n <\
    \ 0 )); then\n            neg+=($n)\n        # if integer is positive, add it\
    \ to pos array\n        elif (( n > 0 )); then\n            pos+=($n)\n      \
    \  fi\n    done\n    # if neg array is empty, print \"None\"\n    if [ ${#neg[@]}\
    \ -eq 0 ]; then\n        echo '\"None\"'\n    # else print the min integer in\
    \ neg array\n    else\n        echo \"\\\"$(printf '%s\\n' \"${neg[@]}\" | sort\
    \ -n | head -n 1)\\\"\"\n    fi\n    # if pos array is empty, print \"None\"\n\
    \    if [ ${#pos[@]} -eq 0 ]; then\n        echo '\"None\"'\n    # else print\
    \ the max integer in pos array\n    else\n        echo \"\\\"$(printf '%s\\n'\
    \ \"${pos[@]}\" | sort -n | tail -n 1)\\\"\"\n    fi", "    # if there is no argument,\
    \ then return both None\n    if [ -z \"$1\" ]; then\n        echo \"['\"None'',\
    \ '''None''']\"\n        return 0\n    fi\n\n    local smallest_positive=None\n\
    \    local largest_negative=None\n\n    for i in $1; do\n        # integer check:\n\
    \        # https://stackoverflow.com/questions/806906/how-do-i-test-if-a-variable-is-a-number-in-bash\n\
    \        # (space-separated list only)\n        if [[ $i =~ ^-?[0-9]+$ ]]; then\n\
    \            if [ $i -lt 0 ]; then\n                if [ $largest_negative ==\
    \ None ] || [ $i -gt $largest_negative ]; then\n                    largest_negative=$i\n\
    \                fi\n            else\n                if [ $smallest_positive\
    \ == None ] || [ $i -lt $smallest_positive ]; then\n                    smallest_positive=$i\n\
    \                fi\n            fi\n        fi\n    done\n\n    echo \"['\"$largest_negative\"\
    ', '\"$smallest_positive\"']\"", "    local neg_integer\n    local pos_integer\n\
    \    local neg_integers\n    local pos_integers\n    while [ $# -gt 0 ]; do\n\
    \        if [ $(echo \"$1 >= 0\" | bc) -eq 1 ]; then\n            if [ -z \"$pos_integer\"\
    \ ]; then\n                pos_integer=$1\n            else\n                if\
    \ [ $(echo \"$1 < $pos_integer\" | bc) -eq 1 ]; then\n                    pos_integer=$1\n\
    \                fi\n            fi\n            pos_integers=\"$pos_integers\
    \ $1\"\n        elif [ $(echo \"$1 < 0\" | bc) -eq 1 ]; then\n            if [\
    \ -z \"$neg_integer\" ]; then\n                neg_integer=$1\n            else\n\
    \                if [ $(echo \"$1 > $neg_integer\" | bc) -eq 1 ]; then\n     \
    \               neg_integer=$1\n                fi\n            fi\n         \
    \   neg_integers=\"$neg_integers $1\"\n        fi\n        shift\n    done\n \
    \   if [ -z \"$neg_integers\" ]; then\n        neg_integer=\"None\"\n    fi\n\
    \    if [ -z \"$pos_integers\" ]; then\n        pos_integer=\"None\"\n    fi\n\
    \    echo \"[\\\"$neg_integer\\\", \\\"$pos_integer\\\"]\"", "  awk 'BEGIN {\n\
    \    max_negative = -9999999999\n    min_positive =  9999999999\n  }\n  {\n  \
    \  if ($1 >= 0 && $1 < min_positive) {\n      min_positive = $1\n    }\n    if\
    \ ($1 < 0 && $1 > max_negative) {\n      max_negative = $1\n    }\n  }\n  END\
    \ {\n    if (max_negative == -9999999999) {\n      max_negative = \"None\"\n \
    \   }\n    if (min_positive == 9999999999) {\n      min_positive = \"None\"\n\
    \    }\n    print \"[\\\"\" max_negative \"\\\", \\\"\" min_positive \"\\\"]\"\
    \n  }' <<< \"$1\"", "    local min=\n    local max=\n    local i=\n    local minSet=\n\
    \    local maxSet=\n    for i in $1; do\n        if [[ $i -eq 0 ]]; then\n   \
    \         :\n        elif [[ -z $maxSet ]] && [[ $i -gt 0 ]]; then\n         \
    \   max=$i\n            maxSet=1\n        elif [[ -z $minSet ]] && [[ $i -lt 0\
    \ ]]; then\n            min=$i\n            minSet=1\n        elif [[ $i -gt $max\
    \ ]] && [[ $i -gt 0 ]]; then\n            max=$i\n        elif [[ $i -lt $min\
    \ ]] && [[ $i -lt 0 ]]; then\n            min=$i\n        fi\n    done\n    echo\
    \ \"[\\\"$min\\\", \\\"$max\\\"]\"", "  local a b c d e\n  declare -i a b c d\
    \ e\n  a=$(echo \"$1\" | tr ' ' '\\n' | grep '^-' | sort -nr | head -n1)\n  b=$(echo\
    \ \"$1\" | tr ' ' '\\n' | grep -v '^-' | sort -n | head -n1)\n  if [ -z \"$a\"\
    \ ]; then\n    a=\"None\"\n  fi\n  if [ -z \"$b\" ]; then\n    b=\"None\"\n  fi\n\
    \  echo \"['\"$a\"', '\"$b\"']\"", "  local integers=$(echo \"$1\" | tr \" \"\
    \ \"\\n\")\n  local largest_negative=\"\"\n  local smallest_positive=\"\"\n  for\
    \ i in $integers; do\n    if (( i < 0 )) && (( i > largest_negative )); then\n\
    \      largest_negative=$i\n    elif (( i > 0 )) && (( i < smallest_positive ))\
    \ || (( smallest_positive == 0 )); then\n      smallest_positive=$i\n    fi\n\
    \  done\n  if [[ ! $largest_negative ]]; then\n    largest_negative='\"None\"\
    '\n  else\n    largest_negative=\"\\\"$largest_negative\\\"\"\n  fi\n  if [[ !\
    \ $smallest_positive ]]; then\n    smallest_positive='\"None\"'\n  else\n    smallest_positive=\"\
    \\\"$smallest_positive\\\"\"\n  fi\n  echo \"($largest_negative, $smallest_positive)\"",
  "  local largest=`cut -d \" \" -f 1 <<< \"$1\"`\n  local smallest=`cut -d \" \"\
    \ -f 1 <<< \"$1\"`\n  local int=0\n  for val in $1; do\n    if [[ $val -lt 0 ]];\
    \ then\n      if [[ $val -gt $largest ]]; then\n        largest=$val\n      fi\n\
    \    elif [[ $val -gt 0 ]]; then\n      if [[ $val -lt $smallest ]]; then\n  \
    \      smallest=$val\n      fi\n    fi\n  done\n  if [[ $largest -eq 0 ]]; then\n\
    \    largest=None\n  fi\n  if [[ $smallest -eq 0 ]]; then\n    smallest=None\n\
    \  fi\n  echo \"[\\\"$largest\\\", \\\"$smallest\\\"]\"", "  local -r integers=($1)\n\
    \  local -r negatives=($(echo ${integers[@]} | tr ' ' '\\n' | sort -rn | grep\
    \ -e '^-.*'))\n  local -r positives=($(echo ${integers[@]} | tr ' ' '\\n' | sort\
    \ -n | grep -e '^[^-].*'))\n  local largest_negative=None\n  local smallest_positive=None\n\
    \  if [[ -n ${negatives[0]} ]]; then\n    largest_negative=${negatives[0]}\n \
    \ fi\n  if [[ -n ${positives[0]} ]]; then\n    smallest_positive=${positives[0]}\n\
    \  fi\n  echo ['\"'${largest_negative}'\"', '\"'${smallest_positive}'\"']", " \
    \ local largest smallest\n  local list\n  largest=\"None\"\n  smallest=\"None\"\
    \n  for i in $1; do\n    if [[ $i -lt 0 ]]; then\n      if [[ $largest = \"None\"\
    \ ]]; then\n        largest=$i\n      elif [[ $i -gt $largest ]]; then\n     \
    \   largest=$i\n      fi\n    elif [[ $i -gt 0 ]]; then\n      if [[ $smallest\
    \ = \"None\" ]]; then\n        smallest=$i\n      elif [[ $i -lt $smallest ]];\
    \ then\n        smallest=$i\n      fi\n    fi\n  done\n  echo \"[\\\"$largest\\\
    \", \\\"$smallest\\\"]\"", "  a=\"None\"\n  b=\"None\"\n  for i in $1; do\n  \
    \  if [ \"$i\" -gt 0 ]; then\n      if [ \"$b\" == \"None\" ]; then\n        b=\"\
    $i\"\n      elif [ \"$i\" -lt \"$b\" ]; then\n        b=\"$i\"\n      fi\n   \
    \ elif [ \"$i\" -lt 0 ]; then\n      if [ \"$a\" == \"None\" ]; then\n       \
    \ a=\"$i\"\n      elif [ \"$i\" -gt \"$a\" ]; then\n        a=\"$i\"\n      fi\n\
    \    fi\n  done\n  echo \"['\"$a\"', '\"$b\"']\"", "  local -a array=($1)\n  local\
    \ -a negatives\n  local -a positives\n  local -i n\n  local -i p\n  local result\n\
    \n  for n in \"${array[@]}\"; do\n    if ((n < 0)); then\n      negatives+=($n)\n\
    \    elif ((n > 0)); then\n      positives+=($n)\n    fi\n  done\n\n  if [[ ${#negatives[@]}\
    \ -eq 0 ]]; then\n    result='\"None\"'\n  else\n    result=$(printf '\"%s\"'\
    \ \"${negatives[@]}\")\n  fi\n\n  result+=' '\n\n  if [[ ${#positives[@]} -eq\
    \ 0 ]]; then\n    result+='\"None\"'\n  else\n    result+=$(printf '\"%s\"' \"\
    ${positives[@]}\")\n  fi\n\n  printf '%s\\n' \"$result\"", "  local smallest\n\
    \  local largest\n  local arg\n  local arg_is_negative\n\n  for arg in $1; do\n\
    \    arg_is_negative=0\n    [[ $arg =~ - ]] && arg_is_negative=1\n    # Check\
    \ if arg is a negative number\n    if [ $arg_is_negative -eq 1 ]; then\n     \
    \ if [ -z \"$largest\" ]; then\n        largest=$arg\n      else\n        [[ \"\
    $arg\" -gt \"$largest\" ]] && largest=$arg\n      fi\n    # If arg is not a negative\
    \ number\n    else\n      if [ -z \"$smallest\" ]; then\n        smallest=$arg\n\
    \      else\n        [[ \"$arg\" -lt \"$smallest\" ]] && smallest=$arg\n     \
    \ fi\n    fi\n  done\n\n  if [ -z \"$smallest\" ]; then\n    smallest=\"None\"\
    \n  fi\n\n  if [ -z \"$largest\" ]; then\n    largest=\"None\"\n  fi\n\n  printf\
    \ '[\"%s\", \"%s\"]' \"$largest\" \"$smallest\"", "    local neg_nums=()\n   \
    \ local pos_nums=()\n    local str_num\n\n    for str_num in $1; do\n        if\
    \ [[ $str_num -gt 0 ]]; then\n            pos_nums+=($str_num)\n        elif [[\
    \ $str_num -lt 0 ]]; then\n            neg_nums+=($str_num)\n        fi\n    done\n\
    \n    if [[ ${#neg_nums[@]} -gt 0 ]]; then\n        max_neg_num=${neg_nums[0]}\n\
    \        for num in ${neg_nums[@]}; do\n            if [[ $num -gt $max_neg_num\
    \ ]]; then\n                max_neg_num=$num\n            fi\n        done\n \
    \   else\n        max_neg_num=\"None\"\n    fi\n\n    if [[ ${#pos_nums[@]} -gt\
    \ 0 ]]; then\n        min_pos_num=${pos_nums[0]}\n        for num in ${pos_nums[@]};\
    \ do\n            if [[ $num -lt $min_pos_num ]]; then\n                min_pos_num=$num\n\
    \            fi\n        done\n    else\n        min_pos_num=\"None\"\n    fi\n\
    \n    echo \"[\\\"$max_neg_num\\\", \\\"$min_pos_num\\\"]\"", "  local -r list=$1\n\
    \  local pos=None\n  local neg=None\n  # Write your code here!\n  for num in $list;\
    \ do\n    if [ $num -lt 0 ]; then\n      if [ $neg = \"None\" ]; then\n      \
    \  neg=$num\n      else\n        [ $num -gt $neg ] && neg=$num\n      fi\n   \
    \ elif [ $num -gt 0 ]; then\n      if [ $pos = \"None\" ]; then\n        pos=$num\n\
    \      else\n        [ $num -lt $pos ] && pos=$num\n      fi\n    fi\n  done\n\
    \  echo \"[\\\"$neg\\\", \\\"$pos\\\"]\"", "    if [ \"$#\" -ne 1 ]; then\n  \
    \      echo ['\"None\"', '\"None\"']\n        return 1\n    fi\n\n    local -a\
    \ negative_numbers\n    local -a positive_numbers\n    local number\n\n    for\
    \ number in $1; do\n        if [ \"$number\" -lt 0 ]; then\n            negative_numbers+=($number)\n\
    \        elif [ \"$number\" -gt 0 ]; then\n            positive_numbers+=($number)\n\
    \        fi\n    done\n\n    if [ \"${#negative_numbers[@]}\" -gt 0 ]; then\n\
    \        echo '[\\\"'$(printf %.0f $(echo ${negative_numbers[*]} | tr ' ' '\\\
    n' | sort -nr | head -n 1))'\\\"]'\n    else\n        echo '\\\"None\\\"'\n  \
    \  fi\n\n    if [ \"${#positive_numbers[@]}\" -gt 0 ]; then\n        echo '[\\\
    \"'$(printf %.0f $(echo ${positive_numbers[*]} | tr ' ' '\\n' | sort -n | head\
    \ -n 1))'\\\"]'\n    else\n        echo '\\\"None\\\"'\n    fi", "    # determine\
    \ largest of negative integers\n    [[ \"$1\" =~ \"-[0-9]*\" ]] && largest_neg=$(echo\
    \ \"$1\" | tr ' ' '\\n' | egrep -n \"^-.*\" | sort -nrk 1 | head -n 1 | cut -d:\
    \ -f2)\n    # determine smallest of positive integers\n    [[ \"$1\" =~ \"[0-9]*\"\
    \ ]] && smallest_pos=$(echo \"$1\" | tr ' ' '\\n' | egrep -n \"^.*\" | sort -nk\
    \ 1 | head -n 1 | cut -d: -f2)\n    # if there is no negative integers or positive\
    \ integers, return None\n    [[ -z \"$largest_neg\" ]] && largest_neg=\"None\"\
    \n    [[ -z \"$smallest_pos\" ]] && smallest_pos=\"None\"\n    echo \"[\\\"$largest_neg\\\
    \", \\\"$smallest_pos\\\"]\"", "  if ! [[ \"$1\" =~ ^[[:digit:]] ]]; then\n  \
    \  echo '[\\\"None\\\", \\\"None\\\"]'\n    return\n  fi\n\n  sorted=$(echo \"\
    $1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n  smallest=${sorted%% *}\n  largest=${sorted##*\
    \ }\n\n  if [[ $smallest -lt 0 ]]; then\n    smallest='None'\n  fi\n\n  if [[\
    \ $largest -gt 0 ]]; then\n    largest='None'\n  fi\n\n  echo \"[\\\"$largest\\\
    \", \\\"$smallest\\\"]\"", "    # sort -n\n    # sort --numeric-sort\n    # sort\
    \ -g sort -g using the \"general numerical value\"\n    local -a NUMS\n    NUMS=($(echo\
    \ \"$1\" | sed -e 's/ /\\n/g' | sort -g))\n    local MAX=\n    local MIN=\n  \
    \  local LEN=${#NUMS[@]}\n    for ((i=0; i<$LEN; i++)); do\n        if [ ${NUMS[$i]}\
    \ -ge 0 ]; then\n            MIN=${NUMS[$i]}\n            break\n        else\n\
    \            MAX=${NUMS[$i]}\n        fi\n    done\n    if [ -z \"$MAX\" ]; then\n\
    \        MAX=\"None\"\n    fi\n    if [ -z \"$MIN\" ]; then\n        MIN=\"None\"\
    \n    fi\n    echo \"[\\\"$MAX\\\", \\\"$MIN\\\"]\"", "  local largest_negative_number=None\n\
    \  local smallest_positive_number=None\n  local number\n  for number in $1; do\n\
    \    if [ $number -lt 0 ]; then\n      if [ $largest_negative_number == None ]\
    \ || \\\n         [ $number -gt $largest_negative_number ]; then\n        largest_negative_number=$number\n\
    \      fi\n    else\n      if [ $smallest_positive_number == None ] || \\\n  \
    \       [ $number -lt $smallest_positive_number ]; then\n        smallest_positive_number=$number\n\
    \      fi\n    fi\n  done\n  echo \\[\\\"$largest_negative_number\\\", \\\"$smallest_positive_number\\\
    \"\\]", "\tlocal my_list\n\tlocal my_list_tmp\n\tlocal my_list_sorted\n\tlocal\
    \ my_list_sorted_tmp\n\tlocal my_list_sorted_positive\n\tlocal my_list_sorted_negative\n\
    \tmy_list_tmp=$(echo \"$1\" | xargs -n1 | grep -oP '^-?\\d+')\n\tif [ -z \"$my_list_tmp\"\
    \ ]; then\n\t\techo '[\\'None\\', \\'None\\']'\n\t\treturn\n\tfi\n\tmy_list=$(echo\
    \ \"$my_list_tmp\" | xargs | sed -e 's/ /, /g')\n\tmy_list_sorted_tmp=$(echo \"\
    $my_list_tmp\" | sort -n)\n\tmy_list_sorted=$(echo \"$my_list_sorted_tmp\" | xargs\
    \ | sed -e 's/ /, /g')\n\t# Split the list into positive and negative elements.\n\
    \tmy_list_sorted_positive=$(echo \"$my_list_sorted_tmp\" | xargs -n1 | grep -oP\
    \ '^\\d+' | xargs | sed -e 's/ /, /g')\n\tmy_list_sorted_negative=$(echo \"$my_list_sorted_tmp\"\
    \ | xargs -n1 | grep -oP '^-\\d+' | xargs | sed -e 's/ /, /g')\n\t# Check if the\
    \ sorted list has positive and negative elements.\n\tif [ ! -z \"$my_list_sorted_positive\"\
    \ ] && [ ! -z \"$my_list_sorted_negative\" ]; then\n\t\techo \"[$(echo \"$my_list_sorted_negative\"\
    \ | sed -e 's/^\\([^,]*\\),.*$/\\1/')], [$(echo \"$my_list_sorted_positive\" |\
    \ sed -e 's/^\\([^,]*\\),.*$/\\1/')]\"\n\telse\n\t\techo '[\\'None\\', \\'None\\\
    ']'\n\tfi", "    local a=()\n    local b=()\n    local c=()\n    local x\n   \
    \ local y\n    local z\n    local i\n    IFS=' '\n    read -r -a x <<<\"$1\"\n\
    \    IFS=\n    for i in \"${x[@]}\"; do\n        if ((i < 0)); then\n        \
    \    a+=($i)\n        elif ((i > 0)); then\n            b+=($i)\n        else\n\
    \            c+=($i)\n        fi\n    done\n    if ((${#a[@]} > 0)); then\n  \
    \      y=$(printf \"%s\\n\" \"${a[@]}\" | sort -n | tail -n 1)\n    else\n   \
    \     y='None'\n    fi\n    if ((${#b[@]} > 0)); then\n        z=$(printf \"%s\\\
    n\" \"${b[@]}\" | sort -n | head -n 1)\n    else\n        z='None'\n    fi\n \
    \   printf \"[%s, %s]\" \"$y\" \"$z\"", "    echo $(echo \"$1\" | \\\n       \
    \ tr ' ' '\\n' | \\\n        sed -r -e '/^0+$/d' -e '/^\\-0+$/d' | \\\n      \
    \  sort -nr | \\\n        awk 'NR==1 { print \"\\\"\"$1\"\\\"\" } END { if (NR>1)\
    \ print \"\\\"\"$NR\"\\\"\" }')", "    if [ $# -eq 0 ]; then\n        return\n\
    \    fi\n\n    local integers=$1\n\n    if [ -z \"$integers\" ]; then\n      \
    \  echo \"[\\\"None\\\", \\\"None\\\"]\"\n        return\n    fi\n\n    local\
    \ maximum=$(echo \"$integers\" | sort -nr | head -n 1)\n    local minimum=$(echo\
    \ \"$integers\" | sort -n | head -n 1)\n\n    if [ \"$maximum\" -lt 0 ]; then\n\
    \        maximum=\"None\"\n    fi\n\n    if [ \"$minimum\" -gt 0 ]; then\n   \
    \     minimum=\"None\"\n    fi\n\n    echo \"[\\\"$maximum\\\", \\\"$minimum\\\
    \"]\"", "  a=$(echo $1 | sed -E 's/\\s+/\\n/g' | grep \"^-[0-9]\" | sort -nr |\
    \ head -n 1)\n  b=$(echo $1 | sed -E 's/\\s+/\\n/g' | grep \"^[0-9]\" | sort -n\
    \ | head -n 1)\n  echo \"[\\\"${a:-None}\\\", \\\"${b:-None}\\\"]\"", "    # Write\
    \ your code here\n    #echo $1\n    arr=()\n    IFS=\" \"\n    for i in $1\n \
    \   do\n        #echo \"$i\"\n        arr+=(\"$i\")\n    done\n    #echo ${arr[*]}\n\
    \    #print every element\n    #for j in ${arr[*]}\n    #do\n    #    echo $j\n\
    \    #done\n    #print the array length\n    len=${#arr[@]}\n    #echo $len\n\
    \    count=0\n    big=0\n    small=0\n    #echo \"len = $len\"\n    for k in ${arr[*]}\n\
    \    do\n        #echo \"k = $k\"\n        if [ $k -gt 0 ]\n        then\n   \
    \         #echo \">0\"\n            if [ $count -eq 0 ]\n            then\n  \
    \              #echo \"count = 0\"\n                small=$k\n               \
    \ count=1\n            else\n                #echo \"count != 0\"\n          \
    \      if [ $k -lt $small ]\n                then\n                    #echo \"\
    $k < $small\"\n                    small=$k\n                fi\n            fi\n\
    \        elif [ $k -lt 0 ]\n        then\n            #echo \"<0\"\n         \
    \   if [ $count -eq 0 ]\n            then\n                #echo \"count = 0\"\
    \n                big=$k\n                count=1\n            else\n        \
    \        #echo \"count != 0\"\n                if [ $k -gt $big ]\n          \
    \      then\n                    #echo \"$k > $big\"\n                    big=$k\n\
    \                fi\n            fi\n        fi\n    done\n    #echo $big\n  \
    \  #echo $small\n    if [ $count -eq 0 ]\n    then\n        echo \"['\\\"None\\\
    \"', '\\\"None\\\"']\"\n    else\n        echo \"['\\\"$big\\\"', '\\\"$small\\\
    \"']\"\n    fi", "    local largest=\"\"\n    local smallest=\"\"\n    for number\
    \ in $1; do\n        if [[ $number -gt 0 ]]; then\n            if [[ -z $smallest\
    \ ]]; then\n                smallest=$number\n            elif [[ $number -lt\
    \ $smallest ]]; then\n                smallest=$number\n            fi\n     \
    \   elif [[ $number -lt 0 ]]; then\n            if [[ -z $largest ]]; then\n \
    \               largest=$number\n            elif [[ $number -gt $largest ]];\
    \ then\n                largest=$number\n            fi\n        fi\n    done\n\
    \    if [[ -z $largest ]]; then\n        largest=\"None\"\n    fi\n    if [[ -z\
    \ $smallest ]]; then\n        smallest=\"None\"\n    fi\n    echo \"[\\\"$largest\\\
    \", \\\"$smallest\\\"]\"", "  # Write a function body here\n  negative=$(echo\
    \ $1 | sed -r 's/([^-]*-){0,1}([0-9]+)/\\2/g' | sort -r -n | head -n 1)\n  positive=$(echo\
    \ $1 | sed -r 's/([^-]*-){0,1}([0-9]+)/\\2/g' | sort -n | head -n 1)\n  [ \"$negative\"\
    \ == \"\" ] && negative=\"None\"\n  [ \"$positive\" == \"\" ] && positive=\"None\"\
    \n  echo [\\\"$negative\\\", \\\"$positive\\\"]", "  LEN=$(($#-1))\n  for i in\
    \ $(seq 0 $LEN); do\n    ARR[$i]=${!i}\n  done\n  NEG=$(echo ${ARR[@]} | tr '\
    \ ' '\\n' | grep -w '^-')\n  POS=$(echo ${ARR[@]} | tr ' ' '\\n' | grep -w '^[1-9]')\n\
    \  LARGE_NEGATIVE=$(echo $NEG | tr ' ' '\\n' | sort -n | tail -1)\n  SMALL_POSITIVE=$(echo\
    \ $POS | tr ' ' '\\n' | sort -n | head -1)\n  [ \"$LARGE_NEGATIVE\" == \"\" ]\
    \ && LARGE_NEGATIVE=\"None\"\n  [ \"$SMALL_POSITIVE\" == \"\" ] && SMALL_POSITIVE=\"\
    None\"\n  echo '[\"'\"$LARGE_NEGATIVE\"'\", \"'\"$SMALL_POSITIVE\"'\"]'", "  \
    \  if [[ -z \"${1}\" ]]; then\n        echo \"['\"None'', 'None']\"\n        return\n\
    \    fi\n\n    local -i largest_negative_integer=0\n    local -i smallest_positive_integer=0\n\
    \    local -i integer\n    for integer in ${1}; do\n        if [[ ${integer} -lt\
    \ 0 ]]; then\n            if [[ ${integer} -gt ${largest_negative_integer} ]];\
    \ then\n                largest_negative_integer=${integer}\n            fi\n\
    \        elif [[ ${integer} -gt 0 ]]; then\n            if [[ ${smallest_positive_integer}\
    \ -eq 0 ]]; then\n                smallest_positive_integer=${integer}\n     \
    \       fi\n            if [[ ${integer} -lt ${smallest_positive_integer} ]];\
    \ then\n                smallest_positive_integer=${integer}\n            fi\n\
    \        fi\n    done\n\n    if [[ ${largest_negative_integer} -eq 0 ]]; then\n\
    \        largest_negative_integer=\"None\"\n    fi\n    if [[ ${smallest_positive_integer}\
    \ -eq 0 ]]; then\n        smallest_positive_integer=\"None\"\n    fi\n\n    echo\
    \ \"['\"${largest_negative_integer}\"'', '\"${smallest_positive_integer}\"']\"",
  "  local -a a\n  local l c\n  l=\"\"\n  for c in $1; do\n    (( c < 0 )) && l=\"\
    $l $c\" || l=\"$c $l\"\n  done\n  a=($l)\n  [[ ${#a[@]} == 0 ]] && echo ['\"None\"\
    ', '\"None\"'] && return\n  [[ ${#a[@]} == 1 ]] && echo ['\"None\"', '\"None\"\
    '] && return\n  [[ ${#a[@]} == 2 ]] && echo ['\"None\"', '\"None\"'] && return\n\
    \  [[ ${#a[@]} == 3 ]] && echo ['\"None\"', '\"None\"'] && return\n  [[ ${#a[@]}\
    \ > 3 ]] && echo ['\"'\"${a[0]}\"'\", '\"'\"${a[${#a[@]}-1]}\"'\"]'] && return",
  "    local positive_values=($(echo $1 | tr ' ' '\\n' | grep -E '^[1-9][0-9]*$' |\
    \ sort -n))\n    local negative_values=($(echo $1 | tr ' ' '\\n' | grep -E '^-[1-9][0-9]*$'\
    \ | sort -n))\n    local positive=${positive_values[-1]}\n    local negative=${negative_values[0]}\n\
    \    if [ -z \"$positive\" ]; then\n        positive=\"None\"\n    fi\n    if\
    \ [ -z \"$negative\" ]; then\n        negative=\"None\"\n    fi\n    echo \"[\\\
    \"$negative\\\", \\\"$positive\\\"]\"", "    # write your solution here\n    pos=()\n\
    \    neg=()\n    for num in $1; do\n        if [ $num -lt 0 ]; then\n        \
    \    neg+=(\"$num\")\n        elif [ $num -gt 0 ]; then\n            pos+=(\"\
    $num\")\n        fi\n    done\n    if [ ${#neg[@]} -eq 0 ]; then\n        neg=(\"\
    None\")\n    else\n        neg=(\"$(echo ${neg[@]} | tr ' ' '\\n' | sort -n |\
    \ tail -n 1)\")\n    fi\n    if [ ${#pos[@]} -eq 0 ]; then\n        pos=(\"None\"\
    )\n    else\n        pos=(\"$(echo ${pos[@]} | tr ' ' '\\n' | sort -n | head -n\
    \ 1)\")\n    fi\n    echo \"${neg[@]}\" \"${pos[@]}\"", "  echo -n '['\n  l=()\n\
    \  for e in $1; do\n    if [ $e -lt 0 ]; then\n      l=(\"${l[@]}\" $e)\n    fi\n\
    \  done\n  if [ ${#l[@]} -eq 0 ]; then\n    echo -n '\"None\"'\n  else\n    echo\
    \ -n '\"'\n    printf '%s\\n' \"${l[@]}\" | sort -n | tail -n 1\n    echo -n '\"\
    '\n  fi\n  echo -n ', '\n  l=()\n  for e in $1; do\n    if [ $e -gt 0 ]; then\n\
    \      l=(\"${l[@]}\" $e)\n    fi\n  done\n  if [ ${#l[@]} -eq 0 ]; then\n   \
    \ echo -n '\"None\"'\n  else\n    echo -n '\"'\n    printf '%s\\n' \"${l[@]}\"\
    \ | sort -n | head -n 1\n    echo -n '\"'\n  fi\n  echo ']'", "  local a b\n \
    \ a=$(echo \"$1\" | tr ' ' '\\n' | grep -v '^0$' | sort -n | tail -n 1)\n  b=$(echo\
    \ \"$1\" | tr ' ' '\\n' | grep -v '^0$' | sort -n | head -n 1)\n  [ -z \"$a\"\
    \ ] && a=\"None\"\n  [ -z \"$b\" ] && b=\"None\"\n  echo \"($a, $b)\"", "    local\
    \ n\n    local a=None\n    local b=None\n    for n in $1; do\n        if [ ${n}\
    \ -lt 0 ]; then\n            if [ \"${a}\" == \"None\" ] || [ ${n} -gt ${a} ];\
    \ then\n                a=${n}\n            fi\n        elif [ ${n} -gt 0 ]; then\n\
    \            if [ \"${b}\" == \"None\" ] || [ ${n} -lt ${b} ]; then\n        \
    \        b=${n}\n            fi\n        fi\n    done\n    echo \"[\\\"${a}\\\"\
    , \\\"${b}\\\"]\"", "    list=$1\n    negatives=\n    positives=\n    while [\
    \ -n \"$list\" ]; do\n        # Get the first integer of the list\n        integer=${list%%\
    \ *}\n        if [ $integer -lt 0 ]; then\n            negatives=\"$negatives\
    \ $integer\"\n        elif [ $integer -gt 0 ]; then\n            positives=\"\
    $positives $integer\"\n        fi\n        # Remove the first integer from the\
    \ list\n        list=${list#* }\n    done\n    echo \"[\\\"$(max $negatives)\\\
    \", \\\"$(min $positives)\\\"]\"", "    local arg\n    local arg_is_negative\n\
    \    local arg_is_positive\n    local largest_negative_arg\n    local smallest_positive_arg\n\
    \    for arg in $1; do\n        arg_is_negative=0\n        arg_is_positive=0\n\
    \        # Check if argument is negative\n        if ((arg < 0)); then\n     \
    \       arg_is_negative=1\n        elif ((arg > 0)); then\n            arg_is_positive=1\n\
    \        fi\n        # Update largest negative argument\n        if ((arg_is_negative\
    \ && (largest_negative_arg == null || arg > largest_negative_arg))); then\n  \
    \          largest_negative_arg=$arg\n        fi\n        # Update smallest positive\
    \ argument\n        if ((arg_is_positive && (smallest_positive_arg == null ||\
    \ arg < smallest_positive_arg))); then\n            smallest_positive_arg=$arg\n\
    \        fi\n    done\n    if [[ $largest_negative_arg == null ]]; then\n    \
    \    largest_negative_arg=\"None\"\n    fi\n    if [[ $smallest_positive_arg ==\
    \ null ]]; then\n        smallest_positive_arg=\"None\"\n    fi\n    echo \"[\\\
    \"$largest_negative_arg\\\", \\\"$smallest_positive_arg\\\"]\"", "  #\n  # Write\
    \ your code here.\n  #\n  if [ $# -eq 0 ]; then\n    echo ['\"None\"', '\"None\"\
    ']\n    return\n  fi\n  max_neg=0\n  min_pos=0\n  is_neg=0\n  is_pos=0\n  for\
    \ i in $@; do\n    if [ $i -lt 0 ] && [ $i -gt $max_neg ]; then\n      max_neg=$i\n\
    \      is_neg=1\n    fi\n    if [ $i -gt 0 ] && [ $i -lt $min_pos ]; then\n  \
    \    min_pos=$i\n      is_pos=1\n    fi\n  done\n  echo ['\"'$max_neg'\"', '\"\
    '$min_pos'\"']", "    # Get the list of negative integers, and sort them\n   \
    \ negative_numbers=$(echo \"$1\" | tr ' ' '\\n' | grep -E -v '^([+-]?[0-9]+|0)$'\
    \ | sort -nr)\n    if [ -z \"$negative_numbers\" ]; then\n        negative_numbers=\"\
    None\"\n    fi\n\n    # Get the list of positive integers, and sort them\n   \
    \ positive_numbers=$(echo \"$1\" | tr ' ' '\\n' | grep -E '^([+-]?[0-9]+|0)$'\
    \ | sort -n)\n    if [ -z \"$positive_numbers\" ]; then\n        positive_numbers=\"\
    None\"\n    fi\n\n    echo \"[\\\"$negative_numbers\\\", \\\"$positive_numbers\\\
    \"]\"", "\teval declare -a arr=( $(echo \"$1\") )\n\tlargest=0\n\tsmallest=0\n\
    \tfor i in \"${arr[@]}\"; do\n\t\t[ \"$i\" -lt 0 ] && largest=$((largest > i ?\
    \ largest : i))\n\t\t[ \"$i\" -gt 0 ] && smallest=$((smallest < i ? smallest :\
    \ i))\n\tdone\n\techo \"[\\\"${largest:-None}\\\", \\\"${smallest:-None}\\\"]\"",
  "  MAX_NEGATIVE=None\n  MIN_POSITIVE=None\n  for number in $1; do\n    [ $number\
    \ -lt 0 ] && [ $MAX_NEGATIVE -lt $number ] && MAX_NEGATIVE=$number\n    [ $number\
    \ -gt 0 ] && [ -z $MIN_POSITIVE ] && MIN_POSITIVE=$number\n    [ $number -gt 0\
    \ ] && [ $MIN_POSITIVE -gt $number ] && MIN_POSITIVE=$number\n  done\n  # echo\
    \ \"[\\\"$MAX_NEGATIVE\\\", \\\"$MIN_POSITIVE\\\"]\"\n  echo \"['\"$MAX_NEGATIVE\"\
    ', '\"$MIN_POSITIVE\"']\"", "    local result=(\"None\" \"None\")\n    for x in\
    \ $1; do\n        if [[ \"$x\" =~ ^-?[0-9]+$ ]]; then\n            if [[ \"$x\"\
    \ -lt 0 ]]; then\n                if [[ \"${result[0]}\" = \"None\" ]] || [[ \"\
    $x\" -gt \"${result[0]}\" ]]; then\n                    result[0]=\"$x\"\n   \
    \             fi\n            else\n                if [[ \"${result[1]}\" = \"\
    None\" ]] || [[ \"$x\" -lt \"${result[1]}\" ]]; then\n                    result[1]=\"\
    $x\"\n                fi\n            fi\n        fi\n    done\n    echo \"${result[@]}\"",
  "    local integers=\"$1\"\n    local a b largest smallest\n    if [[ \"$integers\"\
    \ == \"\" ]]; then\n        echo ['\"None\"', '\"None\"']\n        return\n  \
    \  fi\n    for i in $integers; do\n        if [[ $i -lt 0 ]]; then\n         \
    \   if [[ $a == \"\" ]]; then\n                a=$i\n            else\n      \
    \          [[ $i -gt $a ]] && a=$i\n            fi\n        elif [[ $i -gt 0 ]];\
    \ then\n            if [[ $b == \"\" ]]; then\n                b=$i\n        \
    \    else\n                [[ $i -lt $b ]] && b=$i\n            fi\n        fi\n\
    \    done\n    if [[ $a == \"\" ]]; then\n        a=\"None\"\n    fi\n    if [[\
    \ $b == \"\" ]]; then\n        b=\"None\"\n    fi\n    echo ['\"'$a'\"', '\"'$b'\"\
    ']", "  local _largest_smallest_integers_RESULTS\n\n  # Filter the arguments to\
    \ only integers\n  local _largest_smallest_integers_LIST=$(echo $@ | tr ' ' '\\\
    n' | grep '^[0-9]\\+$')\n\n  # Replace the whitespace in the list with a comma\n\
    \  local _largest_smallest_integers_LIST=$(echo $_largest_smallest_integers_LIST\
    \ | tr ' ' ',')\n\n  # Process the list using Python to find the largest and smallest\n\
    \  local _largest_smallest_integers_RESULTS=$(python -c \"import operator; print(','.join(map(str,\
    \ map(operator.neg, sorted(map(operator.neg, map(int, \\\"$_largest_smallest_integers_LIST\\\
    \".split(','))), reverse=True)))));\" | tr '\\n' ' ')\n  local _largest_smallest_integers_RESULTS=$(echo\
    \ \"$_largest_smallest_integers_RESULTS\" | tr ' ' ',')\n  local _largest_smallest_integers_RESULTS=$(python\
    \ -c \"import operator; print(','.join(map(str, sorted(map(int, \\\"$_largest_smallest_integers_RESULTS\\\
    \".split(','))))));\" | tr '\\n' ' ')\n\n  # Replace any None elements with null\
    \ in the list\n  local _largest_smallest_integers_RESULTS=$(echo $_largest_smallest_integers_RESULTS\
    \ | tr 'N' 'n' | tr ' ' ',')\n  local _largest_smallest_integers_RESULTS=$(python\
    \ -c \"print(','.join(map(str, ['' if x=='None' else x for x in \\\"$_largest_smallest_integers_RESULTS\\\
    \".split(',')])));\" | tr '\\n' ' ')\n\n  # Return the results\n  echo $_largest_smallest_integers_RESULTS",
  "  # Get the negative and positive integers\n  n=$(echo $1 | tr ' ' '\\n' | grep\
    \ '^-' | sort -nr | head -n1)\n  p=$(echo $1 | tr ' ' '\\n' | grep -v '^-' | sort\
    \ -n | head -n1)\n  # If there is no negative or positive integers, return them\
    \ as None\n  if [ -z \"$n\" ]; then\n    n=\"None\"\n  fi\n  if [ -z \"$p\" ];\
    \ then\n    p=\"None\"\n  fi\n  echo ['\"'\"$n\"'\"', '\"'\"$p\"'\"']", "  if\
    \ [ $# -eq 0 ]; then\n    echo \"None None\"\n    return\n  fi\n\n  local -a nlist=($@)\n\
    \  local -a plist=()\n  local -a nglist=()\n  local min=0\n  local max=0\n\n \
    \ for n in ${nlist[@]}; do\n    if [[ \"$n\" =~ ^-?[0-9]+$ ]]; then\n      if\
    \ [ \"$n\" -lt 0 ]; then\n        nglist=(\"${nglist[@]}\" \"$n\")\n      else\n\
    \        plist=(\"${plist[@]}\" \"$n\")\n      fi\n    fi\n  done\n\n  for p in\
    \ ${plist[@]}; do\n    if [ \"$p\" -lt \"$min\" ]; then\n      min=\"$p\"\n  \
    \  fi\n  done\n\n  for n in ${nglist[@]}; do\n    if [ \"$n\" -gt \"$max\" ];\
    \ then\n      max=\"$n\"\n    fi\n  done\n\n  if [ \"$min\" -eq 0 ]; then\n  \
    \  min=\"None\"\n  fi\n\n  if [ \"$max\" -eq 0 ]; then\n    max=\"None\"\n  fi\n\
    \n  echo \"$max $min\"", "  # Write your code here\n  local numbers=($1)\n  local\
    \ negative=()\n  local positive=()\n  for (( i=0; i<${#numbers[@]}; i++ )); do\n\
    \    number=${numbers[$i]}\n    if (( number < 0 )); then\n      negative+=($number)\n\
    \    elif (( number > 0 )); then\n      positive+=($number)\n    fi\n  done\n\
    \  if [[ ${#negative[@]} -eq 0 ]]; then\n    echo \"\\\"None\\\"\"\n  else\n \
    \   printf '\"%s\"' $(sort -n ${negative[@]} | tail -n 1)\n  fi\n  echo \",\"\n\
    \  if [[ ${#positive[@]} -eq 0 ]]; then\n    echo \"\\\"None\\\"\"\n  else\n \
    \   printf '\"%s\"' $(sort -n ${positive[@]} | head -n 1)\n  fi", "    negative_list=()\n\
    \    positive_list=()\n    if [[ -z \"$1\" ]]; then\n        echo ['\"None\"',\
    \ '\"None\"']\n        return\n    fi\n    for i in $1; do\n        if [[ $i -gt\
    \ 0 ]]; then\n            positive_list+=(\"$i\")\n        elif [[ $i -lt 0 ]];\
    \ then\n            negative_list+=(\"$i\")\n        fi\n    done\n    if [[ ${#negative_list[@]}\
    \ -eq 0 ]]; then\n        negative_largest=\"None\"\n    else\n        negative_largest=$(echo\
    \ ${negative_list[@]} | tr \" \" \"\\n\" | sort -nr | head -n 1)\n    fi\n   \
    \ if [[ ${#positive_list[@]} -eq 0 ]]; then\n        positive_smallest=\"None\"\
    \n    else\n        positive_smallest=$(echo ${positive_list[@]} | tr \" \" \"\
    \\n\" | sort -n | head -n 1)\n    fi\n    echo ['\"'$negative_largest'\"', '\"\
    '$positive_smallest'\"']", "  # only positive integers\n  if [[ $1 =~ ^[0-9]+\\\
    s+[0-9]+ ]]; then\n    max=0\n    min=0\n    for i in $1; do\n      if [[ $i -lt\
    \ $min ]]; then\n        min=$i\n      fi\n      if [[ $i -gt $max ]]; then\n\
    \        max=$i\n      fi\n    done\n    echo -e '\"'$min'\"\\n\"'$max'\"'\n \
    \ # only negative integers\n  elif [[ $1 =~ ^- ]]; then\n    min=$1\n    max=$1\n\
    \    for i in $1; do\n      if [[ $i -lt $min ]]; then\n        min=$i\n     \
    \ fi\n      if [[ $i -gt $max ]]; then\n        max=$i\n      fi\n    done\n \
    \   echo -e '\"'$min'\"\\n\"'$max'\"'\n  # not positive or negative integers\n\
    \  else\n    echo -e '\"None\"\\n\"None\"'\n  fi", "\tlocal neg=0 # The largest\
    \ negative integer.\n\tlocal pos=0 # The smallest positive integer.\n\tlocal is_neg=true\
    \ # A flag that shows if the number is negative.\n\tlocal is_pos=true # A flag\
    \ that shows if the number is positive.\n\tfor num in $1; do\n\t\tif [ $num -lt\
    \ 0 ]; then\n\t\t\tis_neg=false\n\t\t\tif [ $neg -eq 0 ] || [ $num -gt $neg ];\
    \ then\n\t\t\t\tneg=$num\n\t\t\tfi\n\t\tfi\n\t\tif [ $num -gt 0 ]; then\n\t\t\t\
    is_pos=false\n\t\t\tif [ $pos -eq 0 ] || [ $num -lt $pos ]; then\n\t\t\t\tpos=$num\n\
    \t\t\tfi\n\t\tfi\n\tdone\n\tif $is_neg; then\n\t\tneg='None'\n\tfi\n\tif $is_pos;\
    \ then\n\t\tpos='None'\n\tfi\n\tprintf '[\"%s\", \"%s\"]' \"$neg\" \"$pos\"",
  "    echo '[' $(echo \"$1\" | sed -E 's/-/x/g' | tr ' ' '\\n' | sort -g | uniq |\
    \ grep x | head -n 1 | sed -E 's/x/-/g') \",$(echo \"$1\" | sed -E 's/-/x/g' |\
    \ tr ' ' '\\n' | sort -g | uniq | grep -v x | head -n 1)\" ]\"", "    a=$(echo\
    \ \"$1\" | tr ' ' '\\n' | grep -E '^-?[0-9]+$' | sort -nr | head -n1)\n    b=$(echo\
    \ \"$1\" | tr ' ' '\\n' | grep -E '^-?[0-9]+$' | sort -n | head -n1)\n    [[ -z\
    \ \"$a\" ]] && a=\"None\"\n    [[ -z \"$b\" ]] && b=\"None\"\n    echo \"[\\\"\
    $a\\\", \\\"$b\\\"]\"", "    negative_integers=()\n    positive_integers=()\n\
    \    for num in $1; do\n        if [ \"$num\" -ge 0 ]; then\n            positive_integers+=($num)\n\
    \        else\n            negative_integers+=($num)\n        fi\n    done\n \
    \   if [ \"${#negative_integers[@]}\" -eq 0 ]; then\n        echo \"\\\"None\\\
    \"\"\n    else\n        echo \"\\\"${negative_integers[0]}\\\"\"\n    fi\n   \
    \ if [ \"${#positive_integers[@]}\" -eq 0 ]; then\n        echo \"\\\"None\\\"\
    \"\n    else\n        echo \"\\\"${positive_integers[0]}\\\"\"\n    fi", "   \
    \ local list=$1\n    local largest=None\n    local smallest=None\n    for n in\
    \ $list; do\n        if [ $n -lt 0 ]; then\n            if [ \"$largest\" == \"\
    None\" ] || [ $n -gt $largest ]; then\n                largest=$n\n          \
    \  fi\n        elif [ $n -gt 0 ]; then\n            if [ \"$smallest\" == \"None\"\
    \ ] || [ $n -lt $smallest ]; then\n                smallest=$n\n            fi\n\
    \        fi\n    done\n    echo \"[\\\"$largest\\\", \\\"$smallest\\\"]\"", " \
    \   if [[ -z \"$1\" ]]; then\n        echo \"['\\\"None\\\"', '\\\"None\\\"']\"\
    \n        return\n    fi\n\n    maxNegative=''\n    minPositive=''\n    for i\
    \ in $1; do\n        if [[ $i -lt 0 ]]; then\n            if [[ -z \"$maxNegative\"\
    \ ]]; then\n                maxNegative=$i\n            elif [[ $i -gt $maxNegative\
    \ ]]; then\n                maxNegative=$i\n            fi\n        elif [[ $i\
    \ -gt 0 ]]; then\n            if [[ -z \"$minPositive\" ]]; then\n           \
    \     minPositive=$i\n            elif [[ $i -lt $minPositive ]]; then\n     \
    \           minPositive=$i\n            fi\n        fi\n    done\n\n    echo \"\
    ['\\\"${maxNegative:-None}\\\"', '\\\"${minPositive:-None}\\\"']\"", "    local\
    \ result=(\"None\" \"None\")\n    local counter\n    for counter in $1; do\n \
    \       if [ $counter -lt 0 ] && [ $counter -gt ${result[0]} ]; then\n       \
    \     result[0]=$counter\n        elif [ $counter -gt 0 ] && [ $counter -lt ${result[1]}\
    \ ]; then\n            result[1]=$counter\n        fi\n    done\n    echo \"${result[@]}\"",
  "  largest_negative=\"\"\n  smallest_positive=\"\"\n  for number in $1; do\n   \
    \ if [ $number -lt 0 ]; then\n      if [ -z \"$largest_negative\" ]; then\n  \
    \      largest_negative=$number\n      elif [ $number -gt $largest_negative ];\
    \ then\n        largest_negative=$number\n      fi\n    else\n      if [ -z \"\
    $smallest_positive\" ]; then\n        smallest_positive=$number\n      elif [\
    \ $number -lt $smallest_positive ]; then\n        smallest_positive=$number\n\
    \      fi\n    fi\n  done\n  largest_negative=${largest_negative:-\"None\"}\n\
    \  smallest_positive=${smallest_positive:-\"None\"}\n  echo \"[\\\"$largest_negative\\\
    \", \\\"$smallest_positive\\\"]\"", "\t# Code here", "  # YOUR CODE HERE\n  list=($1)\n\
    \  [[ -z $list ]] && echo '[\\\"None\\\", \\\"None\\\"]' && return\n  str=\"\"\
    \n  for e in ${list[@]}; do\n    [[ $e =~ ^[-+]?[0-9]+$ ]] && str+=\" $e\"\n \
    \ done\n  [[ -z $str ]] && echo '[\\\"None\\\", \\\"None\\\"]' && return\n  str=$(echo\
    \ $str | sed -e 's/\\ /\\n/g' | sort -n)\n  echo -e \"[\\\"$(echo $str | sed -e\
    \ 's/\\ /\\n/g' | tail -n 1)\\\", \\\"$(echo $str | sed -e 's/\\ /\\n/g' | head\
    \ -n 1)\\\"]\"", "  negative_integers=()\n  positive_integers=()\n  for x in $1;\
    \ do\n    if [ \"$x\" -lt 0 ]; then\n      negative_integers+=($x)\n    else\n\
    \      positive_integers+=($x)\n    fi\n  done\n  if [ ${#negative_integers[@]}\
    \ -eq 0 ]; then\n    echo '\"None\"'\n  else\n    echo $(echo \"${negative_integers[@]}\"\
    \ | tr ' ' '\\n' | sort -n | tail -n 1)\n  fi\n  if [ ${#positive_integers[@]}\
    \ -eq 0 ]; then\n    echo '\"None\"'\n  else\n    echo $(echo \"${positive_integers[@]}\"\
    \ | tr ' ' '\\n' | sort -n | head -n 1)\n  fi", "  echo \"[\\\"$(echo $1 | tr\
    \ ' ' '\\n' | grep '^-' | sort -rn | head -n 1)\\\", \\\"$(echo $1 | tr ' ' '\\\
    n' | grep '^[^-]' | sort -n | head -n 1)\\\"]\"", "    local l s=()\n    for i\
    \ in $1; do\n        if [ $i -lt 0 ]; then\n            [ \"$l\" ] && [ $i -gt\
    \ $l ] && l=$i\n            [ ! \"$l\" ] && l=$i\n        else\n            s+=($i)\n\
    \        fi\n    done\n    [ ! \"$l\" ] && l=\"None\"\n    [ ! \"${s[*]}\" ] &&\
    \ s=\"None\"\n    [ \"${s[*]}\" ] && s=$(echo ${s[*]} | tr ' ' '\\n' | sort -n\
    \ | head -n 1)\n    echo ['\"'$l'\"', '\"'$s'\"']", "  if [[ -z \"$1\" ]]; then\n\
    \    echo \"['\\\"None\\\"', '\\\"None\\\"']\"\n    return 0\n  fi\n\n  local\
    \ -a arr=($1)\n  local -a neg_arr\n  local -a pos_arr\n  local a=\"\"\n  local\
    \ b=\"\"\n\n  for i in \"${arr[@]}\"; do\n    if (( i < 0 )); then\n      neg_arr+=($i)\n\
    \    elif (( i > 0 )); then\n      pos_arr+=($i)\n    fi\n  done\n\n  if (( ${#neg_arr[@]}\
    \ > 0 )); then\n    a=$(printf '%s\\n' \"${neg_arr[@]}\" | sort -nr | head -n1)\n\
    \  else\n    a=\"None\"\n  fi\n\n  if (( ${#pos_arr[@]} > 0 )); then\n    b=$(printf\
    \ '%s\\n' \"${pos_arr[@]}\" | sort -n | head -n1)\n  else\n    b=\"None\"\n  fi\n\
    \n  echo \"['\\\"$a\\\"', '\\\"$b\\\"']\"", "  local input=$1\n  local list=($input)\n\
    \  local max_neg\n  local min_pos\n  for i in \"${list[@]}\"; do\n    [[ \"$i\"\
    \ =~ ^-?[0-9]+$ ]] || return\n    if [ \"$i\" -lt 0 ]; then\n      if [ \"${max_neg:-$i}\"\
    \ -gt \"$i\" ]; then\n        max_neg=$i\n      fi\n    elif [ \"$i\" -gt 0 ];\
    \ then\n      if [ \"${min_pos:-$i}\" -lt \"$i\" ]; then\n        min_pos=$i\n\
    \      fi\n    fi\n  done\n  echo \"[\\\"${max_neg:-None}\\\", \\\"${min_pos:-None}\\\
    \"]\"", "  if [ $# -eq 0 ]; then\n    echo \"\\\"None\\\" \\\"None\\\"\"\n   \
    \ return\n  fi\n\n  # Check if all of the values are numbers\n  for arg in $@;\
    \ do\n    if ! [[ \"$arg\" =~ ^[0-9]+$ ]]; then\n      echo \"\\\"None\\\" \\\"\
    None\\\"\"\n      return\n    fi\n  done\n\n  local max_negative_int=None\n  local\
    \ min_positive_int=None\n\n  for arg in $@; do\n    if [ \"$arg\" -lt 0 ]; then\n\
    \      if [ \"$max_negative_int\" == \"None\" ] || [ \"$arg\" -gt \"$max_negative_int\"\
    \ ]; then\n        max_negative_int=\"$arg\"\n      fi\n    else\n      if [ \"\
    $min_positive_int\" == \"None\" ] || [ \"$arg\" -lt \"$min_positive_int\" ]; then\n\
    \        min_positive_int=\"$arg\"\n      fi\n    fi\n  done\n\n  echo \"\\\"\
    $max_negative_int\\\" \\\"$min_positive_int\\\"\"", "  MAX_NEG=0\n  MIN_POS=0\n\
    \  SPACE_SEPARATED=\"$1\"\n  if [ -z \"$SPACE_SEPARATED\" ]; then\n    echo ['\"\
    None\"', '\"None\"']\n    return\n  fi\n  for NUM in $SPACE_SEPARATED; do\n  \
    \  if [ $NUM -lt 0 ] && [ $NUM -gt $MAX_NEG ]; then\n      MAX_NEG=$NUM\n    fi\n\
    \    if [ $NUM -gt 0 ] && [ $NUM -lt $MIN_POS ]; then\n      MIN_POS=$NUM\n  \
    \  fi\n  done\n  if [ $MAX_NEG = 0 ] && [ $MIN_POS = 0 ]; then\n    echo ['\"\
    None\"', '\"None\"']\n    return\n  fi\n  if [ $MAX_NEG = 0 ]; then\n    echo\
    \ ['\"None\"', \"$MIN_POS\"]\n    return\n  fi\n  if [ $MIN_POS = 0 ]; then\n\
    \    echo [\"$MAX_NEG\", '\"None\"']\n    return\n  fi\n  echo [\"$MAX_NEG\",\
    \ \"$MIN_POS\"]", "  read -ra int_list <<< \"$1\"\n  max_neg=\n  min_pos=\n  for\
    \ i in \"${int_list[@]}\"; do\n    case \"${i}\" in\n      -[[:digit:]]*)\n  \
    \      if [[ -z \"${max_neg}\" ]] || [[ \"${i}\" -gt \"${max_neg}\" ]]; then\n\
    \          max_neg=\"${i}\"\n        fi\n        ;;\n      +[[:digit:]]*)\n  \
    \      if [[ -z \"${min_pos}\" ]] || [[ \"${i}\" -lt \"${min_pos}\" ]]; then\n\
    \          min_pos=\"${i}\"\n        fi\n        ;;\n    esac\n  done\n  echo\
    \ \"[\\\"${max_neg:-None}\\\", \\\"${min_pos:-None}\\\"]\"", "  local values=($1)\n\
    \  local negatives=()\n  local positives=()\n  for value in \"${values[@]}\";\
    \ do\n    if [[ \"$value\" -lt 0 ]]; then\n      negatives+=(\"$value\")\n   \
    \ elif [[ \"$value\" -gt 0 ]]; then\n      positives+=(\"$value\")\n    fi\n \
    \ done\n  local largest_negative=\"None\"\n  if [[ \"${#negatives[@]}\" -gt 0\
    \ ]]; then\n    largest_negative=\"$(printf '%s\\n' \"${negatives[@]}\" | sort\
    \ -nr | head -n 1)\"\n  fi\n  local smallest_positive=\"None\"\n  if [[ \"${#positives[@]}\"\
    \ -gt 0 ]]; then\n    smallest_positive=\"$(printf '%s\\n' \"${positives[@]}\"\
    \ | sort -n | head -n 1)\"\n  fi\n  printf '[\"%s\", \"%s\"]' \"$largest_negative\"\
    \ \"$smallest_positive\"", "    positive_integers=$(awk 'BEGIN {ret = \"\";} $1\
    \ > 0 {ret = ret (ret == \"\" ? \"\" : \" \") $1;} END {print ret;}' <<< \"$1\"\
    )\n    negative_integers=$(awk 'BEGIN {ret = \"\";} $1 < 0 {ret = ret (ret ==\
    \ \"\" ? \"\" : \" \") $1;} END {print ret;}' <<< \"$1\")\n    max_negative=$(printf\
    \ \"%s\\n\" $negative_integers | sort -nr | head -n 1)\n    min_positive=$(printf\
    \ \"%s\\n\" $positive_integers | sort -n | head -n 1)\n    echo \"[\\\"$max_negative\\\
    \", \\\"$min_positive\\\"]\"", "    nums=($1)\n    largest=None\n    smallest=None\n\
    \    for n in ${nums[@]}; do\n        if [[ $n -lt 0 ]]; then\n            if\
    \ [[ $largest == None ]] || [[ $n -gt $largest ]]; then\n                largest=$n\n\
    \            fi\n        elif [[ $n -gt 0 ]]; then\n            if [[ $smallest\
    \ == None ]] || [[ $n -lt $smallest ]]; then\n                smallest=$n\n  \
    \          fi\n        fi\n    done\n    echo \"[\\\"$largest\\\", \\\"$smallest\\\
    \"]\"", "  local -n _largest_smallest_integers_arr=\"$1\"\n  # insert code here\n\
    \  pos=()\n  neg=()\n  for num in \"${_largest_smallest_integers_arr[@]}\"; do\n\
    \    if [[ \"$num\" -eq 0 ]]; then\n      continue\n    elif [[ \"$num\" -lt 0\
    \ ]]; then\n      neg+=(\"$num\")\n    else\n      pos+=(\"$num\")\n    fi\n \
    \ done\n  a=\"None\"\n  b=\"None\"\n  if [[ \"${#neg[@]}\" -gt 0 ]]; then\n  \
    \  a=\"$(sort -nr <<< \"${neg[*]}\")\"\n    a=\"${a%%$'\\n'*}\"\n  fi\n  if [[\
    \ \"${#pos[@]}\" -gt 0 ]]; then\n    b=\"$(sort -n <<< \"${pos[*]}\")\"\n    b=\"\
    ${b%%$'\\n'*}\"\n  fi\n  echo \"[\\\"$a\\\", \\\"$b\\\"]\"", "  # Using bash only\n\
    \  # Get list of negative integers\n  # Get list of positive integers\n  # Sort\
    \ them\n  # Return the first and last element\n  return 0", "  if [ $# -eq 0 ];\
    \ then\n    echo \"['\\\"None\\\"', '\\\"None\\\"']\"\n    return\n  fi\n\n  local\
    \ largest_negative smallest_positive numbers\n  local first_number=1\n  for number\
    \ in $1; do\n    if [ $first_number -eq 1 ]; then\n      if [ $number -lt 0 ];\
    \ then\n        largest_negative=$number\n      elif [ $number -gt 0 ]; then\n\
    \        smallest_positive=$number\n      fi\n      first_number=0\n    else\n\
    \      if [ $number -lt 0 ]; then\n        if [ $number -gt $largest_negative\
    \ ]; then\n          largest_negative=$number\n        fi\n      elif [ $number\
    \ -gt 0 ]; then\n        if [ $number -lt $smallest_positive ]; then\n       \
    \   smallest_positive=$number\n        fi\n      fi\n    fi\n  done\n\n  if [\
    \ -z $largest_negative ]; then\n    largest_negative=\"None\"\n  fi\n  if [ -z\
    \ $smallest_positive ]; then\n    smallest_positive=\"None\"\n  fi\n  echo \"\
    ['\\\"$largest_negative\\\"', '\\\"$smallest_positive\\\"']\"", "    local n i\
    \ nl sp\n    local -a p nt\n    nt=(${1})\n    if [[ ${nt[@]} ]]; then\n     \
    \   for n in ${nt[@]}; do\n            if [[ $n =~ ^-?[0-9]+$ ]]; then\n     \
    \           if [[ $n -ge 0 ]]; then\n                    p[${#p[@]}]=$n\n    \
    \            else\n                    nl[${#nl[@]}]=$n\n                fi\n\
    \            fi\n        done\n    fi\n    if [[ ${nl[@]} ]]; then\n        sp=${nl[0]}\n\
    \        for i in ${nl[@]}; do\n            [[ $i -lt $sp ]] && sp=$i\n      \
    \  done\n    else\n        sp=\"None\"\n    fi\n    if [[ ${p[@]} ]]; then\n \
    \       nl=${p[0]}\n        for i in ${p[@]}; do\n            [[ $i -gt $nl ]]\
    \ && nl=$i\n        done\n    else\n        nl=\"None\"\n    fi\n    echo \"[\\\
    \"$sp\\\", \\\"$nl\\\"]\"", "    if [[ $# -eq 0 ]]; then\n        echo \"[\\\"\
    None\\\", \\\"None\\\"]\"\n        return\n    fi\n\n    for arg in $@; do\n \
    \       if [[ $arg -lt 0 ]]; then\n            if [[ -z $neg_max ]]; then\n  \
    \              neg_max=$arg\n            elif [[ $arg -gt $neg_max ]]; then\n\
    \                neg_max=$arg\n            fi\n        elif [[ $arg -gt 0 ]];\
    \ then\n            if [[ -z $pos_min ]]; then\n                pos_min=$arg\n\
    \            elif [[ $arg -lt $pos_min ]]; then\n                pos_min=$arg\n\
    \            fi\n        fi\n    done\n\n    if [[ -z $neg_max ]]; then\n    \
    \    neg_max=\"None\"\n    fi\n\n    if [[ -z $pos_min ]]; then\n        pos_min=\"\
    None\"\n    fi\n\n    echo \"[\\\"$neg_max\\\", \\\"$pos_min\\\"]\"", "  local\
    \ largest_negative=\n  local smallest_positive=\n  for i in $(echo $1 | tr ' '\
    \ '\\n'); do\n    if [ $i -lt 0 ]; then\n      if [ -z \"$largest_negative\" ]\
    \ || [ $i -gt $largest_negative ]; then\n        largest_negative=$i\n      fi\n\
    \    elif [ $i -gt 0 ]; then\n      if [ -z \"$smallest_positive\" ] || [ $i -lt\
    \ $smallest_positive ]; then\n        smallest_positive=$i\n      fi\n    fi\n\
    \  done\n  if [ -z \"$largest_negative\" ]; then\n    largest_negative='None'\n\
    \  fi\n  if [ -z \"$smallest_positive\" ]; then\n    smallest_positive='None'\n\
    \  fi\n  echo ['\"'$largest_negative'\"', '\"'$smallest_positive'\"']", "  local\
    \ -r m=$(echo $1 | sed -E 's/[0-9]+/-\\0 -\\0/g')\n  local -r a=$(echo $m | awk\
    \ '{ max = $1; for (i = 2; i <= NF; i++) if ($i > max) max = $i; print max }')\n\
    \  local -r b=$(echo $m | awk '{ min = $1; for (i = 2; i <= NF; i++) if ($i <\
    \ min) min = $i; print min }')\n  local -r c=$(echo $a | sed -E 's/-//g')\n  local\
    \ -r d=$(echo $b | sed -E 's/-//g')\n  local -r output=\"[$(echo $c | awk '{if\
    \ ($1 ~ /^-?[0-9]+$/) print \"\\\"\"$1\"\\\"\"; else print \"\\\"None\\\"\"}'),\
    \ $(echo $d | awk '{if ($1 ~ /^-?[0-9]+$/) print \"\\\"\"$1\"\\\"\"; else print\
    \ \"\\\"None\\\"\"}')]\"\n  echo $output", "  local min=\"None\"\n  local max=\"\
    None\"\n  for i in ${1//[^-]/ }; do\n    if [[ $i -lt $min ]]; then\n      min=$i\n\
    \    fi\n  done\n  for i in ${1//[^-]/ }; do\n    if [[ $i -gt $max ]]; then\n\
    \      max=$i\n    fi\n  done\n  echo \"[\\\"$min\\\", \\\"$max\\\"]\"", "  local\
    \ arr=( $1 )\n  local smallest_positive=${arr[0]}\n  local largest_negative=${arr[0]}\n\
    \  for e in \"${arr[@]}\"; do\n    if [[ $e -gt 0 ]]; then\n      if [[ $e -lt\
    \ $smallest_positive ]]; then\n        smallest_positive=$e\n      fi\n    elif\
    \ [[ $e -lt 0 ]]; then\n      if [[ $e -gt $largest_negative ]]; then\n      \
    \  largest_negative=$e\n      fi\n    fi\n  done\n  if [[ $smallest_positive -gt\
    \ 0 ]]; then\n    smallest_positive=\"\\\"$smallest_positive\\\"\"\n  else\n \
    \   smallest_positive=\"\\\"None\\\"\"\n  fi\n  if [[ $largest_negative -lt 0\
    \ ]]; then\n    largest_negative=\"\\\"$largest_negative\\\"\"\n  else\n    largest_negative=\"\
    \\\"None\\\"\"\n  fi\n  echo \"[$largest_negative, $smallest_positive]\"", " \
    \ local text_string=$1\n  local text_array=($text_string)\n  local negative_array=()\n\
    \  local positive_array=()\n  local negative_max\n  local positive_min\n  for\
    \ (( i=0; i<${#text_array[@]}; i++ )); do\n    if [[ ${text_array[$i]} -lt 0 ]];\
    \ then\n      negative_array+=(${text_array[$i]})\n    elif [[ ${text_array[$i]}\
    \ -gt 0 ]]; then\n      positive_array+=(${text_array[$i]})\n    fi\n  done\n\
    \  negative_max=$(echo ${negative_array[@]} | tr \" \" \"\\n\" | sort -rn | head\
    \ -n 1)\n  positive_min=$(echo ${positive_array[@]} | tr \" \" \"\\n\" | sort\
    \ -n | head -n 1)\n  if [[ \"$negative_max\" = \"\" ]]; then\n    negative_max=\"\
    None\"\n  fi\n  if [[ \"$positive_min\" = \"\" ]]; then\n    positive_min=\"None\"\
    \n  fi\n  echo \"[\\\"$negative_max\\\", \\\"$positive_min\\\"]\"", '    # your
    code is here', "  local neg_max=\n  local pos_min=\n  local neg_max_set=false\n\
    \  local pos_min_set=false\n  for i in $1; do\n    if [[ $i -gt 0 ]]; then\n \
    \     if [[ $pos_min_set = false ]]; then\n        pos_min=$i\n        pos_min_set=true\n\
    \      elif [[ $i -lt $pos_min ]]; then\n        pos_min=$i\n      fi\n    elif\
    \ [[ $i -lt 0 ]]; then\n      if [[ $neg_max_set = false ]]; then\n        neg_max=$i\n\
    \        neg_max_set=true\n      elif [[ $i -gt $neg_max ]]; then\n        neg_max=$i\n\
    \      fi\n    fi\n  done\n  if [[ $neg_max_set = false ]]; then\n    neg_max=\"\
    None\"\n  fi\n  if [[ $pos_min_set = false ]]; then\n    pos_min=\"None\"\n  fi\n\
    \  echo \"[\\\"$neg_max\\\", \\\"$pos_min\\\"]\"", "    [ $# -lt 1 ] && { echo\
    \ '\"None\"'; echo '\"None\"'; return; }\n    largest=-1\n    smallest=1\n   \
    \ for item in $@; do\n        if ((item < 0)) && ((item > largest)); then\n  \
    \          largest=${item}\n        elif ((item > 0)) && ((item < smallest));\
    \ then\n            smallest=${item}\n        fi\n    done\n    [ ${largest} -eq\
    \ -1 ] && echo '\"None\"' || echo ${largest}\n    [ ${smallest} -eq 1 ] && echo\
    \ '\"None\"' || echo ${smallest}", "    if [ $# -eq 0 ]; then\n        echo '[\"\
    None\", \"None\"]'\n        return\n    fi\n\n    pos_re='^[0-9]+$'\n    neg_re='^-[0-9]+$'\n\
    \    # Loop over all integers\n    for i in $1; do\n        # Integers are either\
    \ positive or negative\n        if [[ $i =~ $pos_re ]]; then\n            # If\
    \ the smallest positive integer is not found\n            if [ -z $smallest_pos\
    \ ]; then\n                smallest_pos=$i\n            else\n               \
    \ # If the current integer is smaller than the smallest positive integer\n   \
    \             if [ $i -lt $smallest_pos ]; then\n                    smallest_pos=$i\n\
    \                fi\n            fi\n        elif [[ $i =~ $neg_re ]]; then\n\
    \            # If the largest negative integer is not found\n            if [\
    \ -z $largest_neg ]; then\n                largest_neg=$i\n            else\n\
    \                # If the current integer is smaller than the largest negative\
    \ integer\n                if [ $i -gt $largest_neg ]; then\n                \
    \    largest_neg=$i\n                fi\n            fi\n        fi\n    done\n\
    \n    # The function returns a list containing the largest of negative integers,\n\
    \    # and the smallest of positive integers\n    echo \"[\\\"${largest_neg}\\\
    \", \\\"${smallest_pos}\\\"]\"", "  local list=$(grep -oE '[-]?[0-9]+' <<< \"\
    $1\")\n  local largest_negative=$(echo \"$list\" | grep -oE '[-][0-9]+' | sort\
    \ -n | tail -n 1)\n  local smallest_positive=$(echo \"$list\" | grep -oE '[0-9]+'\
    \ | sort -n | head -n 1)\n  echo \"[\\\"${largest_negative:-None}\\\", \\\"${smallest_positive:-None}\\\
    \"]\"", "    # Write your solution here.\n    # Check for empty string or 0\n\
    \    [[ -z \"$1\" || \"$1\" == \"0\" ]] && echo ['\"None\"', '\"None\"'] && return\n\
    \    # Create local variables\n    local negative=\n    local positive=\n    local\
    \ min=\n    local max=\n    # Read in string into array\n    IFS=' ' read -r -a\
    \ array <<< \"$1\"\n    # Loop through array values\n    for i in \"${array[@]}\"\
    ; do\n        # Check if negative\n        [[ \"$i\" =~ ^- ]] && [[ -z \"$negative\"\
    \ || \"$i\" -gt \"$negative\" ]] && negative=\"$i\"\n        # Check if positive\n\
    \        [[ \"$i\" =~ ^- ]] || [[ -z \"$positive\" || \"$i\" -lt \"$positive\"\
    \ ]] && positive=\"$i\"\n    done\n    # Check for unset variables\n    [[ -z\
    \ \"$negative\" ]] && negative=\"None\"\n    [[ -z \"$positive\" ]] && positive=\"\
    None\"\n    # Print results\n    echo \"[\\\"$negative\\\", \\\"$positive\\\"\
    ]\"", "    max=\n    min=\n    for i in $1; do\n        if [[ $i =~ ^-?[0-9]+$\
    \ ]]; then\n            if [[ -z $max ]] || [[ $i -lt $max ]]; then\n        \
    \        max=$i\n            fi\n            if [[ -z $min ]] || [[ $i -gt $min\
    \ ]]; then\n                min=$i\n            fi\n        fi\n    done\n   \
    \ echo \"[\\\"${max:-None}\\\", \\\"${min:-None}\\\"]\"", "  local -r a=\"$1\"\
    \n  local -r negative_integers=$(echo \"$a\" | grep -o '-' | wc -l)\n  local -r\
    \ positive_integers=$(echo \"$a\" | grep -o '^[^-]' | wc -l)\n  local -r negative_integers_sorted=$(echo\
    \ \"$a\" | grep -o '-' | sort -n)\n  local -r positive_integers_sorted=$(echo\
    \ \"$a\" | grep -o '^[^-]' | sort -n)\n  if [ $negative_integers == 0 ]; then\n\
    \    echo \"[\\\"None\\\", \\\"${positive_integers_sorted:0:1}\\\"]\"\n  elif\
    \ [ $positive_integers == 0 ]; then\n    echo \"[\\\"${negative_integers_sorted:\
    \ -1}\\\", \\\"None\\\"]\"\n  else\n    echo \"[\\\"${negative_integers_sorted:\
    \ -1}\\\", \\\"${positive_integers_sorted:0:1}\\\"]\"\n  fi", "  if [[ $# -lt\
    \ 1 ]]; then\n    echo '[-1, -1]'\n    return\n  fi\n\n  # Catch instances where\
    \ there are no integers in the list\n  if [[ $1 =~ ^[0-9-]+$ ]]; then\n    echo\
    \ '[-1, -1]'\n    return\n  fi\n\n  # Split the list into an array\n  IFS=' '\
    \ read -r -a int_array <<< \"$1\"\n\n  # Initialize the max and min variables\n\
    \  max=-1\n  min=-1\n\n  # Loop through the array\n  for i in \"${int_array[@]}\"\
    ; do\n    # If the element is greater than 0, assign to min if min is unassigned\n\
    \    # or if the element is less than min\n    if [[ $i -gt 0 ]]; then\n     \
    \ if [[ $min -eq -1 ]] || [[ $i -lt $min ]]; then\n        min=$i\n      fi\n\
    \    # If the element is less than 0, assign to max if max is unassigned\n   \
    \ # or if the element is greater than max\n    elif [[ $i -lt 0 ]]; then\n   \
    \   if [[ $max -eq -1 ]] || [[ $i -gt $max ]]; then\n        max=$i\n      fi\n\
    \    fi\n  done\n\n  # Return the max and min in a comma-separated list\n  echo\
    \ \"['$max', '$min']\"", "  # Write your code here\n  #if [ -z \"$1\" ]; then\n\
    \  #  echo \"[\\\"None\\\", \\\"None\\\"]\"\n  #fi\n  max=$1\n  min=$1\n  for\
    \ i in $1; do\n    if [ \"$i\" -gt 0 ]; then\n      if [ \"$i\" -lt \"$min\" ];\
    \ then\n        min=$i\n      fi\n    elif [ \"$i\" -lt 0 ]; then\n      if [\
    \ \"$i\" -gt \"$max\" ]; then\n        max=$i\n      fi\n    fi\n  done\n  if\
    \ [ \"$max\" -eq \"$1\" ]; then\n    max=\"None\"\n  fi\n  if [ \"$min\" -eq \"\
    $1\" ]; then\n    min=\"None\"\n  fi\n  echo \"[\\\"$max\\\", \\\"$min\\\"]\"",
  "    local list=\"$1\"\n    local largest=\n    local smallest=\n    local pos=0\n\
    \    local neg=0\n    for i in ${list}; do\n        if [[ ${i} -eq 0 ]]; then\n\
    \            continue\n        elif [[ ${i} -lt 0 ]]; then\n            if [[\
    \ ${neg} -eq 0 ]]; then\n                neg=${i}\n            elif [[ ${i} -gt\
    \ ${neg} ]]; then\n                neg=${i}\n            fi\n        elif [[ ${i}\
    \ -gt 0 ]]; then\n            if [[ ${pos} -eq 0 ]]; then\n                pos=${i}\n\
    \            elif [[ ${i} -lt ${pos} ]]; then\n                pos=${i}\n    \
    \        fi\n        fi\n    done\n    if [[ ${pos} -eq 0 ]]; then\n        smallest='\"\
    None\"'\n    else\n        smallest=\"${pos}\"\n    fi\n    if [[ ${neg} -eq 0\
    \ ]]; then\n        largest='\"None\"'\n    else\n        largest=\"${neg}\"\n\
    \    fi\n    echo \"[${largest}, ${smallest}]\"", "  local numbers=($1)\n  local\
    \ biggest_negative=\n  local smallest_positive=\n  local number=\n  local is_negative=\n\
    \n  for number in \"${numbers[@]}\"; do\n    is_negative=$(awk '{if ($1 < 0) {\
    \ print \"yes\"; exit 0 } else { print \"no\"; exit 0 } }' <<< $number)\n    if\
    \ [[ $is_negative == \"yes\" ]]; then\n      if [[ -z $biggest_negative ]]; then\n\
    \        biggest_negative=$number\n      elif [[ $number -gt $biggest_negative\
    \ ]]; then\n        biggest_negative=$number\n      fi\n    else\n      if [[\
    \ -z $smallest_positive ]]; then\n        smallest_positive=$number\n      elif\
    \ [[ $number -lt $smallest_positive ]]; then\n        smallest_positive=$number\n\
    \      fi\n    fi\n  done\n\n  local result=\"$(awk -v biggest_negative=\"$biggest_negative\"\
    \ -v smallest_positive=\"$smallest_positive\" '{\n    if (biggest_negative ==\
    \ \"\") {\n      biggest_negative = \"None\"\n    }\n    if (smallest_positive\
    \ == \"\") {\n      smallest_positive = \"None\"\n    }\n    print \"[\\\"\" biggest_negative\
    \ \"\\\", \\\"\" smallest_positive \"\\\"]\"\n  }' <<< '')\"\n\n  echo $result",
  "    local numbers=$(\n        # Removes all spaces\n        tr -d ' ' <<<\"$1\"\
    \ |\n        # Reorders the string in descending order\n        sed 's/./&\\n/g'\
    \ | sort -nr | tr -d '\\n'\n    )\n    local reverse_list=$(\n        # Reorders\
    \ the string in ascending order\n        echo \"$numbers\" | sed 's/./&\\n/g'\
    \ | sort -n | tr -d '\\n'\n    )\n    local largest_negative_number=$(\n     \
    \   # Returns the number with negative sign if it exist,\n        #   else returns\
    \ 'None'\n        echo \"$numbers\" | grep \"^-\" | head -n 1\n    )\n    local\
    \ smallest_positive_number=$(\n        # Returns the smallest positive number\
    \ if it exist,\n        #   else returns 'None'\n        echo \"$reverse_list\"\
    \ | grep \"^[1-9]\" | head -n 1\n    )\n    echo \"[\\\"$largest_negative_number\\\
    \", \\\"$smallest_positive_number\\\"]\"", "  local a=\"None\"\n  local b=\"None\"\
    \n  local int_list=$1\n  local pos_list=`echo $int_list | tr ' ' '\\n' | egrep\
    \ '^[0-9]+$' | sort -g`\n  local neg_list=`echo $int_list | tr ' ' '\\n' | egrep\
    \ '^-[0-9]+$' | sort -g`\n  if [ \"$pos_list\" != \"\" ]; then\n    b=`echo $pos_list\
    \ | head -n 1`\n  fi\n  if [ \"$neg_list\" != \"\" ]; then\n    a=`echo $neg_list\
    \ | tail -n 1`\n  fi\n  echo \"[\\\"$a\\\", \\\"$b\\\"]\"", "  local max_neg_num=\n\
    \  local min_pos_num=\n  local num\n  local is_first=1\n  for num in ${1}; do\n\
    \    if [[ ${num} -gt 0 ]]; then\n      if [[ ${is_first} -eq 1 ]]; then\n   \
    \     min_pos_num=${num}\n        is_first=0\n      elif [[ ${num} -lt ${min_pos_num}\
    \ ]]; then\n        min_pos_num=${num}\n      fi\n    elif [[ ${num} -lt 0 ]];\
    \ then\n      if [[ ${is_first} -eq 1 ]]; then\n        max_neg_num=${num}\n \
    \       is_first=0\n      elif [[ ${num} -gt ${max_neg_num} ]]; then\n       \
    \ max_neg_num=${num}\n      fi\n    fi\n  done\n  echo \"['\\\"${max_neg_num}\\\
    \"', '\\\"${min_pos_num}\\\"']\"", "  local -a list=(${1// / })\n  local -a negative=()\n\
    \  local -a positive=()\n  local smallest_positive=()\n  local largest_negative=()\n\
    \  for element in \"${list[@]}\"; do\n    if [[ $element -lt 0 ]]; then\n    \
    \  negative+=($element)\n    elif [[ $element -gt 0 ]]; then\n      positive+=($element)\n\
    \    fi\n  done\n  if [ \"${#negative[@]}\" -eq 0 ]; then\n    largest_negative=\"\
    None\"\n  else\n    largest_negative=\"$(printf \"%s\\n\" \"${negative[@]}\" |\
    \ sort -nr | head -n1)\"\n  fi\n  if [ \"${#positive[@]}\" -eq 0 ]; then\n   \
    \ smallest_positive=\"None\"\n  else\n    smallest_positive=\"$(printf \"%s\\\
    n\" \"${positive[@]}\" | sort -n | head -n1)\"\n  fi\n  echo \"[\\\"$largest_negative\\\
    \", \\\"$smallest_positive\\\"]\"", "  local max_negative min_positive=\"\" v=\"\
    \"\n  for v in $1; do\n    if (( $v > 0 )); then\n      if [[ -z $min_positive\
    \ ]]; then\n        min_positive=$v\n      elif (( $v < $min_positive )); then\n\
    \        min_positive=$v\n      fi\n    elif (( $v < 0 )); then\n      if [[ -z\
    \ $max_negative ]]; then\n        max_negative=$v\n      elif (( $v > $max_negative\
    \ )); then\n        max_negative=$v\n      fi\n    fi\n  done\n  if [[ -z $max_negative\
    \ ]]; then\n    max_negative=\"None\"\n  fi\n  if [[ -z $min_positive ]]; then\n\
    \    min_positive=\"None\"\n  fi\n  echo \"[\\\"$max_negative\\\", \\\"$min_positive\\\
    \"]\"", "  echo \"['$(largest_negative \"$1\")', '$(smallest_positive \"$1\")']\"",
  "    local a\n    local b\n    local num\n    local array\n    array=($(tr ' ' '\\\
    n' <<< \"$1\"))\n    for num in \"${array[@]}\"; do\n        if [[ \"$num\" -gt\
    \ 0 ]]; then\n            if [[ -z \"$b\" ]] || [[ \"$num\" -lt \"$b\" ]]; then\n\
    \                b=\"$num\"\n            fi\n        elif [[ \"$num\" -lt 0 ]];\
    \ then\n            if [[ -z \"$a\" ]] || [[ \"$num\" -gt \"$a\" ]]; then\n  \
    \              a=\"$num\"\n            fi\n        fi\n    done\n    if [[ -z\
    \ \"$a\" ]]; then\n        echo \\\"None\\\"\n    else\n        echo \\\"$a\\\"\
    \n    fi\n    if [[ -z \"$b\" ]]; then\n        echo \\\"None\\\"\n    else\n\
    \        echo \\\"$b\\\"\n    fi", "  local -a arr=($1)\n  local min=0\n  local\
    \ max=0\n  for (( i=0; i<${#arr[@]}; i++ ))\n  do\n    if [[ ${arr[$i]} -lt 0\
    \ ]] && [[ ${arr[$i]} -gt $max ]]\n    then\n      max=${arr[$i]}\n    fi\n  \
    \  if [[ ${arr[$i]} -gt 0 ]] && [[ ${arr[$i]} -lt $min ]]\n    then\n      min=${arr[$i]}\n\
    \    fi\n  done\n  local str=\"[\"\n  if [[ $max -eq 0 ]]\n  then\n    str+='\"\
    None\"'\n  else\n    str+='\"'$max'\"'\n  fi\n  str+=','\n  if [[ $min -eq 0 ]]\n\
    \  then\n    str+='\"None\"'\n  else\n    str+='\"'$min'\"'\n  fi\n  str+=\"]\"\
    \n  echo \"$str\"", "    local input=\"$*\"\n\n    local smallest_positive_integer=\"\
    None\"\n    local largest_negative_integer=\"None\"\n\n    local number\n    for\
    \ number in $input; do\n        if [[ $number -gt 0 ]]; then\n            if [[\
    \ $smallest_positive_integer == \"None\" ]]; then\n                smallest_positive_integer=$number\n\
    \            elif [[ $number -lt $smallest_positive_integer ]]; then\n       \
    \         smallest_positive_integer=$number\n            fi\n        elif [[ $number\
    \ -lt 0 ]]; then\n            if [[ $largest_negative_integer == \"None\" ]];\
    \ then\n                largest_negative_integer=$number\n            elif [[\
    \ $number -gt $largest_negative_integer ]]; then\n                largest_negative_integer=$number\n\
    \            fi\n        fi\n    done\n\n    echo \"[\\\"$largest_negative_integer\\\
    \", \\\"$smallest_positive_integer\\\"]\"", "  local a=$(echo \"$1\" | grep -v\
    \ \"[0-9]\" | tr \" \" \"\\n\" | sort -n | head -n 1)\n  local b=$(echo \"$1\"\
    \ | grep -v \"[0-9]\" | tr \" \" \"\\n\" | sort -nr | head -n 1)\n  echo \"[\\\
    \"${a:-None}\\\", \\\"${b:-None}\\\"]\"", "\tdeclare -a input_array=($1)\n\tlocal\
    \ min=0\n\tlocal max=0\n\tfor i in \"${input_array[@]}\"; do\n\t\tif [[ $i -lt\
    \ 0 ]]; then\n\t\t\tif [[ $i -gt $max ]]; then\n\t\t\t\tmax=$i\n\t\t\tfi\n\t\t\
    elif [[ $i -gt 0 ]]; then\n\t\t\tif [[ $i -lt $min ]]; then\n\t\t\t\tmin=$i\n\t\
    \t\tfi\n\t\tfi\n\tdone\n\tif [[ $min -eq 0 && $max -eq 0 ]]; then\n\t\techo ['\"\
    None\"', '\"None\"']\n\telse\n\t\techo ['\"'\"$max\"'\"', '\"'\"$min\"'\"']\n\t\
    fi", "    local _result='['\n    local _sep=''\n    local -i _n=0\n    local -i\
    \ _i\n    for _i in $1; do\n        _n=${_i}\n        if (( _n < 0 )); then\n\
    \            _result=${_result}${_sep}'\"'${_n}'\"'\n            _sep=', '\n \
    \       fi\n    done\n    if (( _n >= 0 )); then\n        _result=${_result}${_sep}'\"\
    None\"'\n    fi\n    _result=${_result}' , '\n    _sep=''\n    _n=0\n    for _i\
    \ in $1; do\n        _n=${_i}\n        if (( _n > 0 )); then\n            _result=${_result}${_sep}'\"\
    '${_n}'\"'\n            _sep=', '\n        fi\n    done\n    if (( _n <= 0 ));\
    \ then\n        _result=${_result}${_sep}'\"None\"'\n    fi\n    _result=${_result}']'\n\
    \    echo ${_result}", "    local -a array=()\n    IFS=' ' read -r -a array <<<\
    \ \"$1\"\n    local -i min=${array[0]}\n    local -i max=${array[0]}\n    for\
    \ i in \"${array[@]}\"; do\n        if [[ $i -lt 0 ]]; then\n            (( min\
    \ > i )) && min=$i\n        else\n            (( max < i )) && max=$i\n      \
    \  fi\n    done\n    [[ $min -gt 0 ]] && min=\"None\"\n    [[ $max -lt 0 ]] &&\
    \ max=\"None\"\n    echo \"\\\"$min\\\" \\\"$max\\\"\"", "  declare -a negative_array=($(printf\
    \ '%s\\n' \"$1\" | grep -E '\\-[[:digit:]]+' | sort -rn));\n  declare -a positive_array=($(printf\
    \ '%s\\n' \"$1\" | grep -E '[[:digit:]]+' | sort -n));\n  declare -a result=(\"\
    ${negative_array[-1]}\" \"${positive_array[0]}\");\n  printf '[\"%s\", \"%s\"\
    ]' \"${result[@]}\";", "  local largest_neg=\n  local smallest_pos=\n  local integer=\n\
    \n  for integer in $1; do\n    # Process only integers\n    #\n    # This is not\
    \ good enough:\n    # if ! [[ $integer =~ ^-?[0-9]+$ ]]; then\n    # because this\
    \ one passes too:\n    # if ! [[ $integer =~ ^-?[0-9]*$ ]]; then\n    # for example\
    \ for \"0xFFFF\"\n    if ! [[ $integer =~ ^-?[0-9]+$ ]]; then\n      continue\n\
    \    fi\n\n    if [[ $integer -lt 0 ]]; then\n      if [[ -z $largest_neg ]] ||\
    \ [[ $integer -gt $largest_neg ]]; then\n        largest_neg=$integer\n      fi\n\
    \    else\n      if [[ -z $smallest_pos ]] || [[ $integer -lt $smallest_pos ]];\
    \ then\n        smallest_pos=$integer\n      fi\n    fi\n  done\n\n  if [[ -z\
    \ $largest_neg ]]; then\n    largest_neg=\"None\"\n  fi\n\n  if [[ -z $smallest_pos\
    \ ]]; then\n    smallest_pos=\"None\"\n  fi\n\n  echo \"[\\\"$largest_neg\\\"\
    , \\\"$smallest_pos\\\"]\"", "    local a=None b=None\n    for i in $1; do\n \
    \       if [ \"$i\" -lt 0 ]; then\n            [ \"$a\" = None ] && a=$i || [\
    \ \"$i\" -gt \"$a\" ] && a=$i\n        else\n            [ \"$b\" = None ] &&\
    \ b=$i || [ \"$i\" -lt \"$b\" ] && b=$i\n        fi\n    done\n    echo \"[\\\"\
    $a\\\", \\\"$b\\\"]\"", "    local input_list=$1\n    local min=None\n    local\
    \ max=None\n    for i in $input_list; do\n        if [[ $i -gt 0 ]]; then\n  \
    \          if [[ $min = None ]]; then\n                min=$i\n            elif\
    \ [[ $i -lt $min ]]; then\n                min=$i\n            fi\n        fi\n\
    \        if [[ $i -lt 0 ]]; then\n            if [[ $max = None ]]; then\n   \
    \             max=$i\n            elif [[ $i -gt $max ]]; then\n             \
    \   max=$i\n            fi\n        fi\n    done\n    echo \"[\\\"$max\\\", \\\
    \"$min\\\"]\"", "    local sorted_list=$(sort -n <<< \"${1}\")\n    largest_negative=$(sed\
    \ -n '1 p' <<< \"${sorted_list}\")\n    smallest_positive=$(sed -n '$ p' <<< \"\
    ${sorted_list}\")\n    if [ ${largest_negative} -lt 0 ]; then\n        largest_negative=${largest_negative}\n\
    \    else\n        largest_negative=\"None\"\n    fi\n    if [ ${smallest_positive}\
    \ -gt 0 ]; then\n        smallest_positive=${smallest_positive}\n    else\n  \
    \      smallest_positive=\"None\"\n    fi\n    echo \"[\\\"${largest_negative}\\\
    \", \\\"${smallest_positive}\\\"]\"", "    local list=($1)\n    local negatives=()\n\
    \    local positives=()\n    for num in \"${list[@]}\"; do\n        if ((num <\
    \ 0)); then\n            negatives+=(\"$num\")\n        elif ((num > 0)); then\n\
    \            positives+=(\"$num\")\n        fi\n    done\n    if ((${#negatives[@]}\
    \ > 0)); then\n        printf \"\\\"%s\\\"\" \"${negatives[@]}\" | tr ' ' '\\\
    n' | sort -n | tail -n 1\n    else\n        printf \"\\\"None\\\"\"\n    fi\n\
    \    printf \", \"\n    if ((${#positives[@]} > 0)); then\n        printf \"\\\
    \"%s\\\"\" \"${positives[@]}\" | tr ' ' '\\n' | sort -n | head -n 1\n    else\n\
    \        printf \"\\\"None\\\"\"\n    fi", "    local -a negative_integers\n \
    \   local -a positive_integers\n    for integer in $1; do\n        if [[ $integer\
    \ -lt 0 ]]; then\n            negative_integers+=(\"$integer\")\n        elif\
    \ [[ $integer -gt 0 ]]; then\n            positive_integers+=(\"$integer\")\n\
    \        fi\n    done\n    local largest_negative_integer\n    local smallest_positive_integer\n\
    \    if [[ ${#negative_integers[@]} -eq 0 ]]; then\n        largest_negative_integer='None'\n\
    \    else\n        largest_negative_integer=$(printf '%s\\n' \"${negative_integers[@]}\"\
    \ | sort -nr | head -n 1)\n    fi\n    if [[ ${#positive_integers[@]} -eq 0 ]];\
    \ then\n        smallest_positive_integer='None'\n    else\n        smallest_positive_integer=$(printf\
    \ '%s\\n' \"${positive_integers[@]}\" | sort -n | head -n 1)\n    fi\n    printf\
    \ '[%s, %s]' \"$largest_negative_integer\" \"$smallest_positive_integer\"", " \
    \   local positive_list=\"\"\n    local negative_list=\"\"\n    local largest_negative\n\
    \    local smallest_positive\n    local integer\n\n    for integer in $1; do\n\
    \        if [[ $integer -lt 0 ]]; then\n            negative_list=\"$negative_list\
    \ $integer\"\n        else\n            positive_list=\"$positive_list $integer\"\
    \n        fi\n    done\n\n    if [[ $negative_list == \"\" ]]; then\n        largest_negative=\"\
    None\"\n    else\n        largest_negative=$(echo $negative_list | tr \" \" \"\
    \\n\" | sort -n | tail -n 1)\n    fi\n\n    if [[ $positive_list == \"\" ]]; then\n\
    \        smallest_positive=\"None\"\n    else\n        smallest_positive=$(echo\
    \ $positive_list | tr \" \" \"\\n\" | sort -n | head -n 1)\n    fi\n\n    echo\
    \ ['\"'\"$largest_negative\"'\"', '\"'\"$smallest_positive\"'\"']", "  local arr=($1)\n\
    \  for i in \"${arr[@]}\"; do\n    if [[ $i -lt 0 ]]; then\n      if [[ -z $smallest\
    \ ]]; then\n        smallest=$i\n      else\n        if [[ $i -gt $smallest ]];\
    \ then\n          smallest=$i\n        fi\n      fi\n    else\n      if [[ -z\
    \ $largest ]]; then\n        largest=$i\n      else\n        if [[ $i -lt $largest\
    \ ]]; then\n          largest=$i\n        fi\n      fi\n    fi\n  done\n  echo\
    \ \"[\\\"${smallest:-\"None\"}\\\", \\\"${largest:-\"None\"}\\\"]\"", "  local\
    \ neg=${1:-\"\"}\n  local pos=${1:-\"\"}\n  neg=$(echo $neg | sed -e 's/^-//')\n\
    \  pos=$(echo $pos | sed -e 's/^-//')\n  neg=$(echo $neg | sed -e 's/^ //')\n\
    \  pos=$(echo $pos | sed -e 's/^ //')\n  local res1=`echo \"$neg\" | grep -v '[0-9]'`\n\
    \  local res2=`echo \"$pos\" | grep -v '[0-9]'`\n  if [ -z \"$res1\" ]; then\n\
    \    neg=`echo \"$neg\" | sort -nr | head -n 1`\n  else\n    neg=\"None\"\n  fi\n\
    \  if [ -z \"$res2\" ]; then\n    pos=`echo \"$pos\" | sort -n | head -n 1`\n\
    \  else\n    pos=\"None\"\n  fi\n  echo \"[\\\"$neg\\\", \\\"$pos\\\"]\"", " \
    \   positive=;\n    negative=;\n    for i in $1; do\n        if [ $i -lt 0 ];\
    \ then\n            if [ -z \"$negative\" ]; then\n                negative=$i;\n\
    \            else\n                if [ $i -gt $negative ]; then\n           \
    \         negative=$i;\n                fi\n            fi\n        elif [ $i\
    \ -gt 0 ]; then\n            if [ -z \"$positive\" ]; then\n                positive=$i;\n\
    \            else\n                if [ $i -lt $positive ]; then\n           \
    \         positive=$i;\n                fi\n            fi\n        fi\n    done\n\
    \n    echo [\\\"$negative\\\", \\\"$positive\\\"]", "  local a b\n  if [[ $1 =~\
    \ (-?)\\ ([1-9][0-9]*)\\ (-?) ]]; then\n    a=\"${BASH_REMATCH[1]}\"\n    if [[\
    \ \"${BASH_REMATCH[1]}\" = \"-\" ]]; then\n      a=\"${BASH_REMATCH[2]}\"\n  \
    \  fi\n    b=\"${BASH_REMATCH[3]}\"\n    if [[ \"${BASH_REMATCH[3]}\" = \"-\"\
    \ ]]; then\n      b=\"${BASH_REMATCH[2]}\"\n    fi\n  else\n    a=None\n    b=None\n\
    \  fi\n  echo \"[\\\"$a\\\", \\\"$b\\\"]\"", "  local i  # loop counter\n  local\
    \ j  # loop counter\n  local m  # current value in list\n  local p  # true if\
    \ 'm' is positive\n  local n  # true if 'm' is negative\n  local a  # largest\
    \ of negative integers\n  local b  # smallest of positive integers\n  local c\
    \  # used to hold a list element\n  local x  # used to hold a list element\n \
    \ local a  # candidate for largest of negative integers\n  local b  # candidate\
    \ for smallest of positive integers\n  local r  # return string\n  local v=''\
    \  # value to return\n  a=None\n  b=None\n  for i in $(eval echo {1..$#}); do\n\
    \    eval c=\\$$i\n    case $c in\n      -* )\n        m=$c\n        n=true\n\
    \        p=false\n        ;;\n      +* )\n        m=$c\n        n=false\n    \
    \    p=true\n        ;;\n      * )\n        m=$c\n        n=false\n        p=false\n\
    \        ;;\n    esac\n    case $n in\n      true )\n        case $a in\n    \
    \      None )\n            a=$m\n            ;;\n          * )\n            for\
    \ j in $a $m; do\n              case $j in\n                $a ) x=$j;;\n    \
    \            $m ) x=$j;;\n              esac\n            done\n            a=$x\n\
    \            ;;\n        esac\n        ;;\n    esac\n    case $p in\n      true\
    \ )\n        case $b in\n          None )\n            b=$m\n            ;;\n\
    \          * )\n            for j in $b $m; do\n              case $j in\n   \
    \             $b ) x=$j;;\n                $m ) x=$j;;\n              esac\n \
    \           done\n            b=$x\n            ;;\n        esac\n        ;;\n\
    \    esac\n  done\n  echo '[\\\"'\"$a\"'\\\"', '\\\"'\"$b\"'\\\"']", "  # TODO:\
    \ Place your code here\n  if [ $# -eq 0 ]; then\n    echo \"\\\"None\\\" \\\"\
    None\\\"\"\n    return\n  fi\n  max=0\n  min=0\n  for i in $@; do\n    if [[ $i\
    \ =~ ^[\\-][0-9]+$ ]]; then\n      (( $i > $max )) && max=$i\n    fi\n    if [[\
    \ $i =~ ^[0-9]+$ ]]; then\n      (( $i < $min )) && min=$i\n    fi\n  done\n \
    \ if [ $max -eq 0 ]; then\n    max=\"None\"\n  fi\n  if [ $min -eq 0 ]; then\n\
    \    min=\"None\"\n  fi\n  echo \"\\\"$max\\\" \\\"$min\\\"\"", "  largest=-1\n\
    \  smallest=1\n  for i in $1; do\n    if [ $i -lt 0 ] && [ $i -gt $largest ];\
    \ then\n      largest=$i\n    elif [ $i -gt 0 ] && [ $i -lt $smallest ]; then\n\
    \      smallest=$i\n    fi\n  done\n  if [ $largest -eq -1 ]; then\n    largest=None\n\
    \  fi\n  if [ $smallest -eq 1 ]; then\n    smallest=None\n  fi\n  echo \"[\\\"\
    $largest\\\", \\\"$smallest\\\"]\"", "  # The length of the input string\n  local\
    \ len=\"$(echo \"$1\" | wc -w)\"\n  if [ \"$len\" -gt 0 ]; then\n    # The list\
    \ of negative integers\n    local negatives=()\n    # The list of positive integers\n\
    \    local positives=()\n    for i in $1; do\n      if [ \"$i\" -lt 0 ]; then\n\
    \        negatives+=(\"$i\")\n      elif [ \"$i\" -gt 0 ]; then\n        positives+=(\"\
    $i\")\n      fi\n    done\n    local negatives_len=\"${#negatives[@]}\"\n    local\
    \ positives_len=\"${#positives[@]}\"\n    # The largest of negative integers\n\
    \    local a\n    # The smallest of positive integers\n    local b\n    if [ \"\
    $negatives_len\" -gt 0 ]; then\n      a=\"$(echo \"${negatives[@]}\" | tr ' '\
    \ '\\n' | sort -nr | head -n 1)\"\n    else\n      a=\"None\"\n    fi\n    if\
    \ [ \"$positives_len\" -gt 0 ]; then\n      b=\"$(echo \"${positives[@]}\" | tr\
    \ ' ' '\\n' | sort -n | head -n 1)\"\n    else\n      b=\"None\"\n    fi\n   \
    \ echo \"[\\\"$a\\\", \\\"$b\\\"]\"\n  else\n    echo \"[\\\"None\\\", \\\"None\\\
    \"]\"\n  fi", "    [[ -z \"$1\" ]] && { echo -n '\"None\"'; return 0; }\n    local\
    \ integers=${1/0/}; integers=${integers% }\n    [[ -z \"$integers\" ]] && { echo\
    \ -n '\"None\"'; return 0; }\n    local -a pos_ints neg_ints; local num\n    for\
    \ num in $integers; do\n        [[ \"$num\" -lt 0 ]] && neg_ints+=(\"$num\")\n\
    \        [[ \"$num\" -gt 0 ]] && pos_ints+=(\"$num\")\n    done\n    if [[ -z\
    \ \"${neg_ints[*]}\" ]]; then\n        echo -n '\"None\"'\n    else\n        echo\
    \ -n \"$(echo \"${neg_ints[*]}\" | tr ' ' '\\n' | sort -rn | head -n 1)\"\n  \
    \  fi\n    echo -n ' '\n    if [[ -z \"${pos_ints[*]}\" ]]; then\n        echo\
    \ -n '\"None\"'\n    else\n        echo -n \"$(echo \"${pos_ints[*]}\" | tr '\
    \ ' '\\n' | sort -n | head -n 1)\"\n    fi", "    declare -a numbers=($1)\n  \
    \  res=(\"None\" \"None\")\n    for i in \"${numbers[@]}\"; do\n        if [[\
    \ $i -eq 0 ]]; then\n            continue\n        elif [[ $i -lt 0 ]]; then\n\
    \            if [[ \"${res[0]}\" == \"None\" ]] || [[ $i -gt \"${res[0]}\" ]];\
    \ then\n                res[0]=$i\n            fi\n        else\n            if\
    \ [[ \"${res[1]}\" == \"None\" ]] || [[ $i -lt \"${res[1]}\" ]]; then\n      \
    \          res[1]=$i\n            fi\n        fi\n    done\n    echo \"${res[@]}\"",
  "  # Declare an array with all items on the list\n  declare -a theList=($1)\n  #\
    \ Declare variables to hold the largest and smallest numbers\n  largestNumber=0\n\
    \  smallestNumber=0\n  # When we find the first negative number, change the variable\n\
    \  # so that we don't keep changing it\n  foundLargest=0\n  # When we find the\
    \ first positive number, change the variable\n  # so that we don't keep changing\
    \ it\n  foundSmallest=0\n  # Loop through the list, checking each number\n  for\
    \ i in \"${theList[@]}\"\n  do\n    # Regex to check for non-integers\n    if\
    \ [[ $i =~ ^[-]?[0-9]+$ ]]; then\n      # If the number is negative and we haven't\
    \ found the largest number yet\n      if [ \"$i\" -lt 0 ] && [ \"$foundLargest\"\
    \ -eq 0 ]; then\n        # Set the largest number to the negative number, and\
    \ change\n        # the variable so that we don't keep changing it\n        largestNumber=$i\n\
    \        foundLargest=1\n      # If the number is negative and the negative number\
    \ is less than\n      # the current largest number\n      elif [ \"$i\" -lt 0\
    \ ] && [ \"$foundLargest\" -eq 1 ] && [ \"$i\" -gt \"$largestNumber\" ]; then\n\
    \        # Set the largest number to the negative number\n        largestNumber=$i\n\
    \      # If the number is positive and we haven't found the smallest number yet\n\
    \      elif [ \"$i\" -gt 0 ] && [ \"$foundSmallest\" -eq 0 ]; then\n        #\
    \ Set the smallest number to the positive number, and change\n        # the variable\
    \ so that we don't keep changing it\n        smallestNumber=$i\n        foundSmallest=1\n\
    \      # If the number is positive and the positive number is less than\n    \
    \  # the current smallest number\n      elif [ \"$i\" -gt 0 ] && [ \"$foundSmallest\"\
    \ -eq 1 ] && [ \"$i\" -lt \"$smallestNumber\" ]; then\n        # Set the smallest\
    \ number to the positive number\n        smallestNumber=$i\n      fi\n    else\n\
    \      # If the number is not an integer, set the variables to None", "    if\
    \ [ $# -lt 1 ]; then\n        echo \"[\\\"None\\\", \\\"None\\\"]\"\n        return\
    \ 0\n    fi\n\n    local arg=$(echo \"$*\" | tr ' ' '\\n' | sort -n)\n    local\
    \ max_neg=0\n    local min_pos=0\n    local max_neg_is_set=0\n    local min_pos_is_set=0\n\
    \n    for number in $arg; do\n        if [ $number -lt 0 ]; then\n           \
    \ if [ $max_neg_is_set -eq 0 ]; then\n                max_neg=$number\n      \
    \          max_neg_is_set=1\n            elif [ $number -gt $max_neg ]; then\n\
    \                max_neg=$number\n            fi\n        elif [ $number -gt 0\
    \ ]; then\n            if [ $min_pos_is_set -eq 0 ]; then\n                min_pos=$number\n\
    \                min_pos_is_set=1\n            elif [ $number -lt $min_pos ];\
    \ then\n                min_pos=$number\n            fi\n        fi\n    done\n\
    \n    if [ $max_neg_is_set -eq 0 ]; then\n        max_neg='None'\n    fi\n\n \
    \   if [ $min_pos_is_set -eq 0 ]; then\n        min_pos='None'\n    fi\n\n   \
    \ echo \"[\\\"$max_neg\\\", \\\"$min_pos\\\"]\"", "    # For now, just sort the\
    \ list and return the first and last element.\n    # Change the code below to\
    \ return the correct output.\n    sorted=($(echo $1 | tr \" \" \"\\n\" | sort\
    \ -n))\n    echo '[\\\"${sorted[0]}\\\", \\\"${sorted[-1]}\\\"]'", "  if [ \"\
    $#\" -ne 1 ]; then\n    echo [\\\"\"None\"\\\", \\\"None\\\"]\n    return\n  fi\n\
    \  nums=($1)\n  max_neg=''\n  min_pos=''\n  for num in \"${nums[@]}\"; do\n  \
    \  if [ -z \"$num\" ]; then\n      continue\n    fi\n    if [ \"$num\" -lt 0 ];\
    \ then\n      if [ -z \"$max_neg\" ]; then\n        max_neg=\"$num\"\n      elif\
    \ [ \"$num\" -gt \"$max_neg\" ]; then\n        max_neg=\"$num\"\n      fi\n  \
    \  elif [ \"$num\" -gt 0 ]; then\n      if [ -z \"$min_pos\" ]; then\n       \
    \ min_pos=\"$num\"\n      elif [ \"$num\" -lt \"$min_pos\" ]; then\n        min_pos=\"\
    $num\"\n      fi\n    fi\n  done\n  if [ -z \"$max_neg\" ]; then\n    max_neg=\"\
    None\"\n  fi\n  if [ -z \"$min_pos\" ]; then\n    min_pos=\"None\"\n  fi\n  echo\
    \ [\\\"\"$max_neg\"\\\", \\\"$min_pos\"\\\"]", "\tlocal MIN MAX\n\t[[ \"$@\" ]]\
    \ || echo '\"None\" \"None\"' && return\n\tMIN=0\n\tMAX=0\n\tfor i in $@; do\n\
    \t\t[[ $i -eq 0 ]] && continue\n\t\tif [[ $i -lt 0 ]]; then\n\t\t\t[[ $i -gt $MAX\
    \ ]] && MAX=$i\n\t\telse\n\t\t\t[[ $i -lt $MIN ]] && MIN=$i\n\t\tfi\n\tdone\n\t\
    if [[ $MAX -eq 0 ]]; then\n\t\tMAX='\"None\"'\n\telse\n\t\tMAX='\"'$MAX'\"'\n\t\
    fi\n\tif [[ $MIN -eq 0 ]]; then\n\t\tMIN='\"None\"'\n\telse\n\t\tMIN='\"'$MIN'\"\
    '\n\tfi\n\techo $MAX $MIN", "  local list=\"$@\"\n  local out_1=None\n  local\
    \ out_2=None\n  for item in $list; do\n    if [ $item -lt 0 ]; then\n      if\
    \ [ $out_1 = None ] || [ $item -gt $out_1 ]; then\n        out_1=$item\n     \
    \ fi\n    else\n      if [ $out_2 = None ] || [ $item -lt $out_2 ]; then\n   \
    \     out_2=$item\n      fi\n    fi\n  done\n  echo \"[\\\"$out_1\\\", \\\"$out_2\\\
    \"]\"", "  local largest_negative=0\n  local smallest_positive=0\n  local is_positive=true\n\
    \  local items=($1)\n  local number\n\n  for number in \"${items[@]}\"; do\n \
    \   # Convert to integer\n    let number=$number\n    if [[ $number -eq 0 ]];\
    \ then\n      continue\n    fi\n\n    if [[ $number -gt 0 ]]; then\n      if [[\
    \ $is_positive || $number -lt $smallest_positive ]]; then\n        smallest_positive=$number\n\
    \      fi\n    else\n      if [[ ! $is_positive || $number -gt $largest_negative\
    \ ]]; then\n        largest_negative=$number\n      fi\n    fi\n  done\n\n  local\
    \ largest_negative_string\n  if [[ $largest_negative -eq 0 ]]; then\n    largest_negative_string=\"\
    None\"\n  else\n    largest_negative_string=$largest_negative\n  fi\n\n  local\
    \ smallest_positive_string\n  if [[ $smallest_positive -eq 0 ]]; then\n    smallest_positive_string=\"\
    None\"\n  else\n    smallest_positive_string=$smallest_positive\n  fi\n\n  echo\
    \ ['\"'$largest_negative_string'\"', '\"'\"$smallest_positive_string\"'\"']",
  "    local new_array\n    for n in $1; do\n        n=${n/' '}  # Remove space\n\
    \        if [[ $n == +([[:digit:]]) ]]; then\n            new_array+=( $n )\n\
    \        fi\n    done\n    # If there is no array element, returns None\n    [\
    \ ${#new_array[@]} -eq 0 ] && echo '\"None\"' && return\n    local largest_neg=\"\
    None\" smallest_pos=\"None\"\n    for n in ${new_array[@]}; do\n        # Find\
    \ the largest negative integer\n        if [[ $n -lt 0 ]]; then\n            if\
    \ [[ $largest_neg == \"None\" ]]; then\n                largest_neg=$n\n     \
    \       elif [[ $n -gt $largest_neg ]]; then\n                largest_neg=$n\n\
    \            fi\n        # Find the smallest positive integer\n        elif [[\
    \ $n -gt 0 ]]; then\n            if [[ $smallest_pos == \"None\" ]]; then\n  \
    \              smallest_pos=$n\n            elif [[ $n -lt $smallest_pos ]]; then\n\
    \                smallest_pos=$n\n            fi\n        fi\n    done\n    echo\
    \ \"[\\\"$largest_neg\\\", \\\"$smallest_pos\\\"]\"", "    _f() {\n        if\
    \ [ $1 -gt 0 ]; then\n            echo $1\n        fi\n    }\n    _b() {\n   \
    \     if [ $1 -lt 0 ]; then\n            echo $1\n        fi\n    }\n    if [\
    \ -z \"$1\" ]; then\n        echo '[\"None\", \"None\"]'\n    else\n        echo\
    \ '['$(echo \"$1\" | tr ' ' '\\n' | xargs -I {} bash -c \"_f {}\" | sort -n |\
    \ tail -n 1 | xargs -I {} bash -c \"_b {}\" | xargs)', '$(echo \"$1\" | tr ' '\
    \ '\\n' | xargs -I {} bash -c \"_f {}\" | sort -n | head -n 1 | xargs -I {} bash\
    \ -c \"_b {}\" | xargs)']'\n    fi", "    local a b=\"None\"\n    for x in $1;\
    \ do\n        if [[ $x =~ ^-?[0-9]+$ ]]; then\n            if [[ $x -lt 0 ]];\
    \ then\n                a=${a:-$x}\n                if [[ $x -gt $a ]]; then\n\
    \                    a=$x\n                fi\n            else\n            \
    \    b=${b:-$x}\n                if [[ $x -lt $b ]]; then\n                  \
    \  b=$x\n                fi\n            fi\n        fi\n    done\n    echo \"\
    [\\\"${a:-None}\\\", \\\"${b:-None}\\\"]\"", "  # write your solution here\n \
    \ local space_separated_list=\"$1\"\n  local list\n  local largest_negative_integer=\"\
    None\"\n  local smallest_positive_integer=\"None\"\n  IFS=' ' read -ra list <<<\
    \ \"$space_separated_list\"\n  for value in \"${list[@]}\"; do\n    if [[ \"$value\"\
    \ =~ ^-?[0-9]+$ ]]; then\n      if [[ \"${value:0:1}\" == \"-\" ]]; then\n   \
    \     if [[ \"$largest_negative_integer\" == \"None\" ]]; then\n          largest_negative_integer=\"\
    $value\"\n        elif [[ \"$value\" -gt \"$largest_negative_integer\" ]]; then\n\
    \          largest_negative_integer=\"$value\"\n        fi\n      else\n     \
    \   if [[ \"$smallest_positive_integer\" == \"None\" ]]; then\n          smallest_positive_integer=\"\
    $value\"\n        elif [[ \"$value\" -lt \"$smallest_positive_integer\" ]]; then\n\
    \          smallest_positive_integer=\"$value\"\n        fi\n      fi\n    fi\n\
    \  done\n  echo \"[\\\"$largest_negative_integer\\\", \\\"$smallest_positive_integer\\\
    \"]\"", "    local -n list=$1\n    local -i min=0 max=0 flag=0\n    min=${list[0]}\n\
    \    max=${list[0]}\n    for v in \"${list[@]}\"; do\n        if [[ $v -gt 0 ]];\
    \ then\n            (( flag |= 1 ))\n            if [[ $v -lt $min ]]; then\n\
    \                min=$v\n            fi\n        elif [[ $v -lt 0 ]]; then\n \
    \           (( flag |= 2 ))\n            if [[ $v -gt $max ]]; then\n        \
    \        max=$v\n            fi\n        fi\n    done\n    [[ $flag -eq 0 ]] &&\
    \ echo \"None\" || echo $max\n    [[ $flag -eq 0 ]] && echo \"None\" || echo $min",
  "    local numbers=$(echo \"$@\" | tr ' ' '\\n' | sort -nr)\n    local is_there_negativ_int=0\n\
    \    local is_there_positiv_int=0\n    local largest_negativ\n    local smallest_positiv\n\
    \    for i in $numbers; do\n        if [ \"$i\" -lt 0 ]; then\n            largest_negativ=$i\n\
    \            is_there_negativ_int=1\n        elif [ \"$i\" -gt 0 ]; then\n   \
    \         smallest_positiv=$i\n            is_there_positiv_int=1\n        fi\n\
    \    done\n    if [ $is_there_negativ_int -eq 0 ]; then\n        largest_negativ=\"\
    None\"\n    fi\n    if [ $is_there_positiv_int -eq 0 ]; then\n        smallest_positiv=\"\
    None\"\n    fi\n    echo \"[\\\"${largest_negativ}\\\", \\\"${smallest_positiv}\\\
    \"]\"", "  if [[ -z \"$1\" ]]; then\n    echo '['\"\\\"None\\\"\"', '\"\\\"None\\\
    \"\"']'\n    return\n  fi\n\n  # Store the list as an array and delete the element\
    \ with 0 value.\n  list=(\"$@\")\n  unset list[$(expr \"${#list[@]}\" - 1)]\n\n\
    \  # Count the number of positive integers and negative integers\n  # to store\
    \ the result in $large and $small variables.\n  large=$(echo \"${list[@]}\" |\
    \ sed 's/ /\\n/g' | grep -cE '^-?[0-9]+$' | awk '{print $1}')\n  small=$(echo\
    \ \"${list[@]}\" | sed 's/ /\\n/g' | grep -cE '^[0-9]+$' | awk '{print $1}')\n\
    \n  # If $large and $small is equal to 0, return them as None.\n  if [[ $large\
    \ -eq 0 && $small -eq 0 ]]; then\n    echo '['\"\\\"None\\\"\"', '\"\\\"None\\\
    \"\"']'\n    return\n  fi\n\n  # Sort the elements in $list. (Decending order\
    \ for negative integers,\n  # Ascending order for positive integers)\n  IFS=$'\\\
    n' sorted=($(sort -r -g -k1 <<<\"${list[*]}\"))\n  unset IFS\n\n  # Store the\
    \ largest of negative integers in $large_neg,\n  # and the smallest of positive\
    \ integers in $small_pos.\n  large_neg=${sorted[-1]}\n  small_pos=${sorted[0]}\n\
    \n  # If there is no negative integers, return $large_neg as None.\n  if [[ $large\
    \ -eq 0 ]]; then\n    large_neg='None'\n  fi\n\n  # If there is no positive integers,\
    \ return $small_pos as None.\n  if [[ $small -eq 0 ]]; then\n    small_pos='None'\n\
    \  fi\n\n  # Return the result in the form of a list.\n  echo '['\"\\\"$large_neg\\\
    \"\"', '\"\\\"$small_pos\\\"\"']'", "    if [[ $# -eq 0 ]]; then\n        echo\
    \ \"[\\\"None\\\", \\\"None\\\"]\"\n        return\n    fi\n\n    largest=$1\n\
    \    smallest=$1\n    for number in \"$@\"; do\n        if (( number > 0 )); then\n\
    \            smallest=${number#-}\n        elif (( number < 0 )); then\n     \
    \       largest=${number#-}\n        fi\n    done\n\n    if (( largest == smallest\
    \ )); then\n        echo \"[\\\"None\\\", \\\"None\\\"]\"\n    else\n        echo\
    \ \"[\\\"-${largest}\\\", \\\"${smallest}\\\"]\"\n    fi"]
stop_tokens:
- "\n}"
