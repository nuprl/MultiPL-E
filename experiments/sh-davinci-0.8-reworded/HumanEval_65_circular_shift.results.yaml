language: sh
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local num=$1\n    local shift=$2\n\
    \    local len=${#num}\n    if [ \"$shift\" -gt \"$len\" ]; then\n        echo\
    \ \"$num\" | rev\n    else\n        echo \"$num\" | cut -c \"$(( len - shift +\
    \ 1 ))-$len\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  num=$1\n  shift=$2\n  # Take care of\
    \ negative shifting.\n  # Perhaps it's not strictly necessary.\n  if [[ $shift\
    \ -lt 0 ]]; then\n    shift=$((10+shift))\n  fi\n  if [[ $shift -gt ${#num} ]];\
    \ then\n    echo $num | rev\n  else\n    echo ${num:$shift}${num:0:$shift}\n \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local result=\"\"\n  local num=$1\n\
    \  local shift=$2\n  local digits=${#num}\n  local i=0\n  local t=0\n  local tmp=0\n\
    \  for (( ; ; )); do\n    t=$(( shift + i ))\n    if (( shift >= digits )); then\n\
    \      # swap digits\n      tmp=${num:$i:1}\n      result=\"${result}${num:$((\
    \ digits - t )):1}\"\n      result=\"${result}${tmp}\"\n    else\n      result=\"\
    ${result}${num:$(( i + shift )):1}\"\n    fi\n    (( ++i ))\n    if (( i >= digits\
    \ )); then\n      break\n    fi\n  done\n  echo $result\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=$1\n    local shift=$2\n \
    \   local n_digits=$(echo \"$n\" | wc -c)\n    local n_digits_div=$(( $n_digits\
    \ / $shift ))\n    local n_digits_mod=$(( $n_digits % $shift ))\n    local n_digits_mod_neg=$((\
    \ $shift - $n_digits_mod ))\n    local n_digits_div_inv=$(( $n_digits_div - 1\
    \ ))\n    local n_digits_mod_neg_inv=$(( $n_digits_mod - 1 ))\n    local n_digits_mod_inv=$((\
    \ $n_digits_mod - 1 ))\n    echo \"$n\" | sed -r \\\n        -e \"s/^(.{$n_digits_mod})(.{$n_digits_mod_neg})$/\\\
    2\\1/\" \\\n        -e \"s/^(.{$n_digits_mod})(.{$n_digits_mod_neg})$/\\2\\1/\"\
    \ \\\n        -e \"s/^(.{$n_digits_mod})(.{$n_digits_mod_neg})$/\\2\\1/\" \\\n\
    \        -e \"s/^(.{$n_digits_mod})(.{$n_digits_mod_neg})$/\\2\\1/\" \\\n    \
    \    -e \"s/^(.{$n_digits_mod})(.{$n_digits_mod_neg})$/\\2\\1/\" \\\n        -e\
    \ \"s/^(.{$n_digits_mod})(.{$n_digits_mod_neg})$/\\2\\1/\" \\\n        -e \"s/^(.{$n_digits_mod})(.{$n_digits_mod_neg})$/\\\
    2\\1/\" \\\n        -e \"s/^(.{$n_digits_mod})(.{$n_digits_mod_neg})$/\\2\\1/\"\
    \ \\\n        -e \"s/^(.{$n_dig\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxnnno56c.sh: line 44: unexpected EOF while looking for matching
    `"''

    /tmp/tmpxnnno56c.sh: line 48: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local ret=\"\"\n    local s=\"\"\n    local m=$(($shift % ${#x}))\n    if\
    \ [ $m -eq 0 ]; then\n        ret=$x\n    else\n        s=${x:0:$m}\n        x=${x:$m}\n\
    \        ret=$x$s\n    fi\n    echo $ret\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # takes advantage of the fact that\
    \ string comparison is done digit by digit\n    local x=$1\n    local shift=$2\n\
    \    local len=$(echo \"${x}\" | wc -c)\n    local diff=$((len - shift))\n   \
    \ if [ \"${diff}\" -gt \"0\" ]; then\n        echo \"${x: -shift}${x:0:diff}\"\
    \n    else\n        echo \"${x:0:len}\" | rev\n    fi\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    [ $# -eq 2 ] || { echo \"Usage: $0\
    \ integer integer\" >&2; return 1; }\n    [ \"$2\" -ge \"0\" ] || { echo \"shift\
    \ must be positive or zero\" >&2; return 1; }\n    local d; d=\"$1\"\n    local\
    \ s; s=\"$2\"\n    local len; len=$(echo \"$d\" | wc -c)\n    local dlen; dlen=$((len\
    \ - 1))\n    local s2; s2=$((dlen - s))\n    local r2; r2=$(echo \"$d\" | rev)\n\
    \    [ \"$s\" -ge \"$dlen\" ] && { echo \"$r2\"; return 0; }\n    local tail;\
    \ tail=$(echo \"$r2\" | cut -c1-\"$s\")\n    local head; head=$(echo \"$r2\" |\
    \ cut -c\"$((s + 1))-\"$len)\n    local r3; r3=$(echo \"$head\"\"$tail\" | rev)\n\
    \    echo \"$r3\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=\"${#x}\"\n    if [ \"$shift\" -gt \"$digits\" ]; then\n    \
    \    rev <<< \"$x\"\n    else\n        local end=\"${x:0:digits-shift}\"\n   \
    \     local start=\"${x:digits-shift:shift}\"\n        printf \"%s%s\" \"$start\"\
    \ \"$end\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # I hate bash and its inability to\
    \ do modulus.\n    local -i num_digits=${#1}\n    local -i shift=$(( $2 % $num_digits\
    \ ))\n    echo \"$1\" | tail -c $shift | tac | head -c $num_digits\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x\n    local shift\n    local\
    \ x_length\n    local x_last_digit\n    local x_last_digit_length\n    x=$1\n\
    \    shift=$2\n    x_length=${#x}\n    if (( shift > x_length )); then\n     \
    \   echo \"${x} | rev\" | bash\n    else\n        x_last_digit=${x: -$shift}\n\
    \        x_last_digit_length=${#x_last_digit}\n        printf \"%0*d\" $x_last_digit_length\
    \ \"$x_last_digit\"\n        echo \"${x:0:$(( x_length - shift ))}\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'bash: line 1: 97: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ result=\"\"\n  local l=${#x}\n  if (( $shift > $l )); then\n    for (( i = $l-1;\
    \ i >= 0; i-- )); do\n      result+=\"${x:$i:1}\"\n    done\n  else\n    local\
    \ tmp=\"${x:$shift:$l}\"\n    result=\"${x:0:$shift}$tmp\"\n  fi\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=$(echo \"$1\" | fold -w1)\n\
    \  local num_digits=$(echo \"$digits\" | wc -l)\n  local shift=$2\n  if [[ shift\
    \ -gt num_digits ]]; then\n    echo \"$digits\" | tac\n  else\n    echo \"$digits\"\
    \ | tail -n$shift | tac | tr -d '\\n'\n    echo \"$digits\" | head -n$((num_digits\
    \ - shift)) | tr -d '\\n'\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=\"$1\"\n  local shift=\"\
    $2\"\n  local numdigits=$(num_digits \"$digits\")\n  local shift=$((shift % numdigits))\n\
    \  local front=\"\"\n  local back=\"\"\n  if [ \"$shift\" -gt \"0\" ]; then\n\
    \    front=\"${digits:0:$shift}\"\n    back=\"${digits:$shift}\"\n  fi\n  echo\
    \ \"$back$front\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmptsj8ve6k.sh: line 15: num_digits: command not found

    /tmp/tmptsj8ve6k.sh: line 16: shift % numdigits: division by 0 (error token is
    "numdigits")

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local num=$1\n  local shift=$2\n  local\
    \ count=$(echo $num | wc -c)\n  local rev_num=$(rev $num)\n  if [ $shift -gt $count\
    \ ]; then\n    echo $rev_num\n  else\n    local shift_digits=$(echo $rev_num |\
    \ tail -c $shift)\n    local reversed_result=$(echo $rev_num | head -c $((count\
    \ - shift)))\n    echo $shift_digits$reversed_result | rev\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'rev: cannot open 100: No such file or directory

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local integer=$1\n    local shift=$2\n\
    \    local length=$(echo $integer | wc -c)\n    if [[ $shift -gt $length ]]; then\n\
    \        # reverse the digits\n        echo $integer | rev\n    else\n       \
    \ # calculate the remainder\n        local rem=$(( $shift % $length ))\n     \
    \   # circular shift right by the remainder\n        local right=$(echo $integer\
    \ | rev | cut -c1-$rem | rev)\n        local left=$(echo $integer | rev | cut\
    \ -c$(( $rem + 1 ))-$length | rev)\n        echo \"$right$left\"\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    n=$(echo -n\
    \ \"$x\" | wc -c)\n    let m=$shift%$n\n    let diff=$n-$m\n    x0=${x:0:$diff}\n\
    \    x1=${x:$diff}\n    echo -n \"$x1$x0\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [[ -z \"$1\" ]]; then\n       \
    \ echo \"circular_shift: Missing first argument\" >&2\n        return 1\n    fi\n\
    \    if [[ -z \"$2\" ]]; then\n        echo \"circular_shift: Missing second argument\"\
    \ >&2\n        return 1\n    fi\n    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n   \
    \     echo \"circular_shift: First argument must be a number\" >&2\n        return\
    \ 1\n    fi\n    if [[ ! \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"circular_shift:\
    \ Second argument must be a number\" >&2\n        return 1\n    fi\n    local\
    \ number=\"$1\"\n    local num_digits=\"${#number}\"\n    local shift=\"$2\"\n\
    \    if [[ $shift -gt $num_digits ]]; then\n        echo $number | rev\n     \
    \   return 0\n    fi\n    echo \"${number:(-shift)}${number:0:(-shift)}\"\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Get the number of digits in the\
    \ number\n    local digits=$(echo \"$1\" | wc -c)\n    # Convert the digits to\
    \ an array\n    local arr=($(echo \"$1\" | fold -w1))\n    local arr_new=()\n\
    \    # Shift the digits\n    for i in $(seq 1 $digits); do\n        shift_digit=$(((i\
    \ + $2 - 1) % $digits))\n        arr_new[$i-1]=${arr[$shift_digit]}\n    done\n\
    \    echo ${arr_new[@]}\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  [[ -z \"$1\" ]] && return\n\n  local\
    \ x=$1\n  local shift=$2\n  local len=$(echo -n $x | wc -c)\n  (( shift %= len\
    \ ))\n  local digits=\"$(echo -n \"$x\" | cut -c -$shift)\"\n  local shift_val=\"\
    $(echo -n \"$x\" | cut -c $(( shift + 1 ))-$len)\"\n  echo -n \"$shift_val$digits\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  digits=$(wc -c < \"$1\")\n  digits=$((digits\
    \ - 1))\n  shift_by=$((digits - $2))\n  printf \"%s\" \"$1\" | rev | cut -c \"\
    $shift_by-\" | rev\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoo_tqi6k.sh: line 13: 100: No such file or directory

    cut: invalid byte or character range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=$(expr length \"$x\")\n    if [ \"$shift\" -ge \"$len\" ];\
    \ then\n        echo \"$x\" | rev\n    else\n        echo \"$x\" | rev | cut -c\
    \ \"$shift-$len\" | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local length=$(echo \"$1\" | wc -c)\n\
    \    local new_length=$(($length - 1))\n    local shift=$(($2 % $new_length))\n\
    \    if [ $shift -eq 0 ]; then\n        echo \"$1\"\n    else\n        echo \"\
    $1\" | cut -c$shift- | rev | cut -c$shift- | rev\n    fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    rev=\"$(rev \"$1\")\"\n    out=\"\
    $(cut -c \"1-${2}\" <<<\"$rev\")\"\n    out+=\"$(cut -c \"$((${2} + 1))-${#rev}\"\
    \ <<<\"$rev\")\"\n    echo \"$out\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'rev: cannot open 100: No such file or directory

    cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=\"$1\"\n    shift=\"$2\"\n    length=\"\
    ${#x}\"\n    if [ \"$shift\" -ge \"$length\" ]; then\n        echo \"$(rev <<<\
    \ \"$x\")\"\n    else\n        # shellcheck disable=SC2046\n        echo $(cut\
    \ -c \"$(( shift + 1))-$length\" <<< \"$x\")$(cut -c \"1-$shift\" <<< \"$x\")\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    [ $# -eq 2 ] || return 1\n    [ -n\
    \ \"$1\" ] || return 1\n    [ -n \"$2\" ] || return 1\n    [ \"$2\" -eq \"$2\"\
    \ ] || return 1\n    local numdigits=$(digits_in_integer \"$1\")\n    [ \"$numdigits\"\
    \ -eq \"$numdigits\" ] || return 1\n    if [ \"$2\" -ge \"$numdigits\" ]; then\n\
    \        reverse_digits \"$1\"\n    else\n        local x=\"$1\"\n        while\
    \ [ \"$2\" -gt 0 ]; do\n            local digit=\"$(leftmost_digit \"$x\")\"\n\
    \            shift_digits_right \"$x\"\n            x=\"$x$digit\"\n         \
    \   shift\n        done\n        echo \"$x\"\n    fi\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbeawshtx.sh: line 17: digits_in_integer: command not found

    /tmp/tmpbeawshtx.sh: line 18: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    digit_count=$(echo \"$1\" | wc -c)\n\
    \    shift=$(($2 % $digit_count))\n    if [ $shift == 0 ]; then\n        echo\
    \ \"$1\"\n    else\n        echo \"$1\" | head -c $shift | rev\n        echo \"\
    $1\" | tail -c $((digit_count - shift))\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    if [[ -z $x ]]; then\n        echo \"usage: circular_shift <x> <shift>\"\
    \n        return 1\n    fi\n    if [[ -z $shift ]]; then\n        echo \"usage:\
    \ circular_shift <x> <shift>\"\n        return 1\n    fi\n    local digits=${#x}\n\
    \    local index=$((digits - shift))\n    local new_x=\"\"\n    local new_x+=\"\
    ${x:$index:$shift}\"\n    local new_x+=\"${x:0:$index}\"\n    echo \"$new_x\"\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg27hirgh.sh: line 27: $index: substring expression < 0

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    if [[ -z $x ]]; then\n        echo \"No integer argument 1\"\n     \
    \   return 1\n    fi\n    if [[ -z $shift ]]; then\n        echo \"No integer\
    \ argument 2\"\n        return 1\n    fi\n    if [[ \"$shift\" -gt ${#x} ]]; then\n\
    \        local i\n        local rx=\"\"\n        for (( i = ${#x} - 1; i >= 0;\
    \ i--)); do\n            rx=\"$rx${x:$i:1}\"\n        done\n        echo \"$rx\"\
    \n    else\n        echo \"${x:${#x} - $shift}${x:0:${#x} - $shift}\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x\n  x=$1\n  shift=$2\n  len=$(echo\
    \ \"$x\" | wc -c)\n  for (( i=1; i<=shift; i++ ))\n  do\n    last_digit=$(echo\
    \ \"$x\" | tail -c 1)\n    x=$(echo \"$x\" | head -c -1)\n    x=$(echo \"$last_digit$x\"\
    )\n  done\n  if [ \"$shift\" -ge \"$len\" ]\n  then\n    echo \"$x\" | rev\n \
    \ else\n    echo \"$x\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # find the length of the string\n  local\
    \ _tmp=${1//[^[:digit:]]/}\n  local _n_digits=$((${#_tmp} - 1))\n  # echo \"Number\
    \ of digits is ${_n_digits}\"\n\n  # reverse the string\n  local _tmp=$(echo \"\
    $1\" | rev)\n  # echo \"Reversed string is ${_tmp}\"\n\n  # cut the string at\
    \ the end of the shift\n  local _shift_length=$((_n_digits - $2))\n  # echo \"\
    shift length is ${_shift_length}\"\n  _tmp=$(echo \"${_tmp}\" | cut -c \"-${_shift_length}-\"\
    )\n  # echo \"Cut string is ${_tmp}\"\n\n  # reverse the string\n  _tmp=$(echo\
    \ \"${_tmp}\" | rev)\n  # echo \"Reversed string is ${_tmp}\"\n\n  # echo the\
    \ string\n  echo \"${_tmp}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid byte or character range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"\
    $2\" =~ ^[0-9]+$ ]]; then\n    local ndigits=${#1}\n    local shift=$(( $2 % $ndigits\
    \ ))\n    echo ${1:$shift}${1:0:$shift}\n  else\n    echo \"Error: Circular shift\
    \ requires two integer arguments\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digit_count=$(echo -n \"$x\" | wc -c)\n    if [[ \"$shift\" -gt \"$digit_count\"\
    \ ]]; then\n        # Reversing the digits\n        echo -n \"$x\" | rev\n   \
    \ else\n        # Circular shift\n        local rest=$(echo -n \"$x\" | cut -c\
    \ \"$shift\"-99)\n        local prefix=$(echo -n \"$x\" | cut -c 1-\"$((shift\
    \ - 1))\")\n        echo -n \"$rest$prefix\"\n    fi\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ $2 -gt ${#1} ]; then\n    echo\
    \ $1 | rev\n  else\n    local L=${1:0:$2}\n    local R=${1:$2}\n    echo $R$L\n\
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  [[ -z \"$1\" ]] && { echo \"No argument\
    \ 1\"; exit 1; }\n  [[ -z \"$2\" ]] && { echo \"No argument 2\"; exit 1; }\n \
    \ local digits=\"$1\"\n  local shift=\"$2\"\n  local num_digits=\"${#digits}\"\
    \n  local shifted\n  if [[ $shift -ge $num_digits ]]; then\n    shifted=$(echo\
    \ $digits | rev)\n  else\n    shifted=$(echo $digits | cut -c \"$((shift + 1))-$num_digits\"\
    )$(echo $digits | cut -c 1-$shift)\n  fi\n  echo \"$shifted\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i x=$1\n    local -i shift=$2\n\
    \    local -i p\n    local -i q\n    local -i r\n\n    if [[ \"$1\" =~ ^-?[0-9]+$\
    \ ]] && [[ \"$2\" =~ ^-?[0-9]+$ ]]; then\n        if ((x < 0)); then\n       \
    \     x=$((x * -1))\n            r=1\n        fi\n        p=$x\n        while\
    \ ((p > 0)); do\n            ((q=q*10+p%10))\n            ((p=p/10))\n       \
    \ done\n        while ((shift > 0)); do\n            ((p=q%10))\n            ((q=q/10))\n\
    \            ((q=q*10+p))\n            ((shift=shift-1))\n        done\n     \
    \   if ((r)); then\n            ((q=q*-1))\n        fi\n        echo \"$q\"\n\
    \    else\n        echo 'circular_shift: parameters must be integers'\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local num=$1\n  local shift=$2\n  if\
    \ [[ $shift -lt ${#num} ]]; then\n    local front=${num:0:$shift}\n    local end=${num:$shift}\n\
    \    echo \"$end$front\"\n  else\n    # Reverse the order of the digits if shift\
    \ >= number of digits\n    echo \"$(reverse_digits \"$num\")\"\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local n=$1\n  local shift=$2\n  local\
    \ n_string=$(echo $n | awk '{print tostring($0)}')\n  local n_len=${#n_string}\n\
    \  if [ $shift -gt $n_len ]; then\n    echo $n_string | rev\n  else\n    local\
    \ n_suffix=${n_string:0:$shift}\n    local n_prefix=${n_string:$shift}\n    echo\
    \ \"$n_prefix$n_suffix\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: cmd. line:1: (FILENAME=- FNR=1) fatal: function `tostring'' not defined

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  echo \"$1\" | grep -Eq \"^[0-9]+$\"\
    \ || return\n  local shift=\"$2\"\n  local s=\"$(expr $shift % ${#1})\"\n  local\
    \ -i l=${#1}\n  if [ $s -eq 0 ]; then\n    echo \"$1\"\n  elif [ $s -eq $l ];\
    \ then\n    echo \"$1\" | rev\n  else\n    local a=${1:$l-$s}\n    local b=${1:0:$l-$s}\n\
    \    echo \"$a$b\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i x=$1\n    local -i shift=$2\n\
    \    local digits=${#x}\n    # shift right by shift\n    x=$((x/10**shift))\n\
    \    if ((shift<digits)); then\n        x=$((x+10**shift*(10**digits%x)))\n  \
    \  else\n        x=$((x%10**digits))\n    fi\n    echo $x\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    printf \"%s\" \"$1\" | rev | cut -c\
    \ 1-\"$2\" | rev; printf \"%s\" \"$1\" | rev | cut -c \"$((1+$2))\"-;\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ \"$1\" -lt 10 ]; then\n    echo\
    \ $1\n    return\n  fi\n  local shift=$(( $2 % ${#1} ))\n  if [ \"$shift\" ==\
    \ \"0\" ]; then\n    echo $1\n    return\n  fi\n  local x=$1\n  while [ \"${#x}\"\
    \ -gt 1 ]; do\n    local y=$(echo \"$x\" | cut -c 2-)\n    local y=$(echo \"$y$(echo\
    \ \"$x\" | cut -c 1)\")\n    x=$y\n  done\n  echo $x\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=39 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660023586
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local dig=$(echo \"$1\" | grep -oP\
    \ '(\\d)')\n    local len=$(echo -n \"$dig\" | wc -c)\n    if [[ \"$2\" -gt \"\
    $len\" ]]; then\n        echo -n \"$dig\" | rev\n    else\n        local shift=$((len\
    \ - \"$2\"))\n        echo -n \"$dig\" | tail -c \"+$shift\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local i=\"$1\"\n    local s=\"$2\"\
    \n    local L=${#i}\n    if [ $s -lt $L ]; then\n        echo \"${i:$L-$s:$s}${i:0:$L-$s}\"\
    \n    else\n        echo \"${i:$L-$(($s%$L)):$(($s%$L))}${i:0:$L-$(($s%$L))}\"\
    \ | rev\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local n=${#x}\n  if (( shift >= n )); then\n    echo \"$x\" | rev\n  else\n\
    \    local y=${x:shift}\n    local z=${x:0:shift}\n    echo \"$y$z\"\n  fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=\"$1\"\n    local shift=\"\
    $2\"\n    local n_len=${#n}\n    local out=\"\"\n    # Apply the shift.\n    while\
    \ (( $shift > $n_len )); do\n        shift=$(( $shift - $n_len ))\n    done\n\
    \    if (( $shift > 0 )); then\n        out=\"${n:$shift:$n_len}\"\n        out=\"\
    ${out}${n:0:$shift}\"\n    else\n        out=\"$n\"\n    fi\n    echo \"$out\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Check that input is an integer\n\
    \    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Invalid integer: $1\"\
    \n        return 1\n    fi\n    if [[ ! \"$2\" =~ ^[0-9]+$ ]]; then\n        echo\
    \ \"Invalid integer: $2\"\n        return 1\n    fi\n\n    local x=\"$1\"\n  \
    \  local shift=\"$2\"\n    local n=$(echo \"$x\" | wc -c)\n    local n_digit=$((n\
    \ - 1))\n    shift=$((shift % n_digit))\n    echo \"${x:shift:n_digit}${x:0:shift}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ \"$#\" -ne 2 ]; then\n      \
    \  echo >&2 \"usage: circular_shift INTEGER SHIFT\"\n        return 1\n    fi\n\
    \    local x\n    local shift\n    x=\"$1\"\n    shift=\"$2\"\n    if ! [[ \"\
    $x\" =~ ^[0-9]+$ ]]; then\n        echo >&2 \"argument INTEGER, $x, must be an\
    \ integer\"\n        return 1\n    fi\n    if ! [[ \"$shift\" =~ ^[0-9]+$ ]];\
    \ then\n        echo >&2 \"argument SHIFT, $shift, must be an integer\"\n    \
    \    return 1\n    fi\n    local len\n    len=$(echo -n \"$x\" | wc -c)\n    shift=$((shift\
    \ % len))\n    # zero-pad the left side to account for shifts that are too large\n\
    \    local i\n    for ((i=0; i<shift; i++)); do\n        x=\"0$x\"\n    done\n\
    \    x=\"${x:0:$len}\"\n    local ret\n    ret=\"${x:$shift}${x:0:$shift}\"\n\
    \    echo \"$ret\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    ((shift %= ${#x}))\n    echo \"${x: -shift}${x: 0 : ${#x} - shift}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # the index to the last digit of the\
    \ string\n    # replace with a mathematical expression\n    len=$(printf '%s'\
    \ \"$1\" | wc -c)\n    len=$((len-1))\n    # the number of digits of the integer\n\
    \    # replace with a mathematical expression\n    num_digits=$len\n    # the\
    \ first digit of the integer\n    # replace with an expression containing `printf`\n\
    \    first=$(printf '%s' \"$1\" | cut -c 1)\n    # the rest of the digits of the\
    \ integer\n    # replace with an expression containing `printf`\n    rest=$(printf\
    \ '%s' \"$1\" | cut -c 2-$len)\n    if [ \"$2\" -gt \"$num_digits\" ]; then\n\
    \        printf '%s' \"$rest$first\" | rev\n    else\n        printf '%s' \"$rest$first\"\
    \ | cut -c $2-$len\n        printf '%s' \"$rest$first\" | cut -c 1-$((2-1))\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local digits=\"${#x}\"\n    if [[ \"$shift\" -ge \"$digits\" ]]; then\n\
    \        echo \"$(echo $x | rev)\"\n    else\n        echo \"$(echo $x | cut -c$((shift+1))-$digits)$(echo\
    \ $x | cut -c1-$shift)\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [[ -z $1 ]]; then\n    echo \"Usage:\
    \ $0 integer integer\"\n    exit 1\n  fi\n  local x=$1\n  local shift=$2\n  #\
    \ Bring the shift number down to a reasonable size.\n  shift=$(( shift % ${#x}\
    \ ))\n  # If the shift number is larger than the number of digits, just return\
    \ the\n  # digits in reverse order.\n  if [[ $shift -gt ${#x} ]]; then\n    echo\
    \ \"$(rev <<< \"$x\")\"\n    return\n  fi\n  # The problem is that ${x:0:$shift}\
    \ picks up all but the last $shift digits,\n  # and ${x:$shift} picks up all but\
    \ the first $shift digits.\n  # This forces the first part to have all the digits.\n\
    \  local first_part=${x:0:${#x}}\n  # This forces the second part to have all\
    \ the digits.\n  local second_part=${x:0:${#x}}\n  # Drop the first $shift digits\
    \ from the first part.\n  first_part=${first_part:$shift}\n  # Drop the last $shift\
    \ digits from the second part.\n  second_part=${second_part:0:$(( ${#x} - shift\
    \ ))}\n  # Concatenate the two parts.\n  echo \"$first_part$second_part\"\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ -z \"$1\" ] || [ -z \"$2\" ];\
    \ then\n        return\n    fi\n    if [ \"$1\" -eq 0 ]; then\n        printf\
    \ \"0\"\n        return\n    fi\n    if [ \"$2\" -eq 0 ]; then\n        printf\
    \ \"%s\" \"$1\"\n        return\n    fi\n    local local_counter=0\n    local\
    \ local_x=\"$1\"\n    local local_shift=\"$2\"\n    local local_result=\"\"\n\
    \    local local_digit\n    while [ $local_counter -lt \"$local_shift\" ]; do\n\
    \        local_digit=$(echo \"$local_x\" | rev | cut -c1)\n        local_x=$(echo\
    \ \"$local_x\" | rev | cut -c2- | rev)\n        local_result=\"$local_digit$local_result\"\
    \n        local_counter=$((local_counter + 1))\n    done\n    printf \"%s\" \"\
    $local_x$local_result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=$1\n    local shift=$2\n \
    \   local n_digits=$(echo \"$n\" | wc -c)\n    local shifted\n    # If shift >\
    \ number of digits, reverse the digits.\n    if [ \"$shift\" -ge \"$n_digits\"\
    \ ]; then\n        echo \"$n\" | rev\n    else\n        shifted=$(echo \"$n\"\
    \ | rev | cut -c $shift- | rev)\n        echo $shifted$(echo \"$n\" | rev | cut\
    \ -c 1-$((shift-1)) | rev)\n    fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -n _cir=$1\n  local shift=$2\n\
    \  if [ ${#_cir} -lt $shift ]; then\n    local -r _cir=$(rev <<<$_cir)\n  else\n\
    \    local -r _cir=$(rev <<<${_cir:0:${#_cir}-$shift})\"${_cir:${#_cir}-$shift}\"\
    )\n  fi\n  echo $_cir\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp59fxjq35.sh: line 18: syntax error near unexpected token `)''

    /tmp/tmp59fxjq35.sh: line 18: `    local -r _cir=$(rev <<<${_cir:0:${#_cir}-$shift})"${_cir:${#_cir}-$shift}")''

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  x=${x//[^0-9]/}\n\
    \  if [ -z \"$x\" ]; then\n    echo\n    return\n  fi\n  while [ $shift -gt ${#x}\
    \ ]; do\n    shift=$((shift - ${#x}))\n  done\n  while [ $shift -gt 0 ]; do\n\
    \    x=$(rev <<<\"$x\")\n    x=$(sed 's/\\(.\\)\\(.*\\)/\\2\\1/' <<<\"$x\")\n\
    \    x=$(rev <<<\"$x\")\n    shift=$((shift - 1))\n  done\n  echo \"$x\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local length=\"${#1}\"\n  if [ $2 -lt\
    \ $length ]; then\n    echo \"${1: -$2}${1:0:$(($length - $2))}\"\n  else\n  \
    \  echo \"$(rev <<< \"$1\")\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=$1\n  shift=$2\n  if [[ ${#x} -lt\
    \ $shift ]]; then\n    echo $(reverse $x)\n  else\n    echo ${x:$shift}${x:0:$shift}\n\
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  # split digits into array\n  local -a d=($(string_split \"$x\"))\n  # number\
    \ of digits\n  local l=\"${#d[@]}\"\n  # shift > digits\n  if [ \"$shift\" -gt\
    \ \"$l\" ]; then\n    string_reverse \"$x\"\n    return 0\n  fi\n  # shift to\
    \ do\n  local s=$((shift % l))\n  # start at $s and iterate l times\n  # at each\
    \ loop take the last element and insert it at the front\n  for i in $(seq 0 $((l\
    \ - 1))); do\n    # take last element\n    local last=\"${d[${#d[@]} - 1]}\"\n\
    \    # insert it at the front\n    d=($last \"${d[@]}\")\n    # remove last element\n\
    \    unset d[${#d[@]} - 1]\n  done\n  # join array\n  echo \"${d[@]}\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpys569zwm.sh: line 16: string_split: command not found

    /tmp/tmpys569zwm.sh: line 21: string_reverse: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # Find number of digits\n  local n=$((${#1}-1))\n\
    \  local -i shift=$(($2 % ($n+1)))\n\n  # Circularly shift digits\n  local -i\
    \ x=10**$n\n  local -i val=$1\n  local -i shifted=0\n  local -i digit\n  for ((i=0;\
    \ i<=$n; i++)); do\n    digit=$((($val / $x) % 10))\n    shifted=$((shifted +\
    \ $digit * 10**$((i+$shift)) ))\n    x=$((x / 10))\n  done\n\n  # Shift right\
    \ by shift\n  echo $((shifted / 10**$shift))\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Print the digits of $1 in reverse\n\
    \    reverse_digits() {\n        local x=$1;\n        while [ $x -gt 0 ]; do\n\
    \            local digit=$((x % 10));\n            x=$((x / 10));\n          \
    \  printf \"%d\" \"$digit\";\n        done;\n    }\n\n    # Print the digits of\
    \ $1 in reverse and shift to the right by $2\n    circular_shift_digits() {\n\
    \        local x=$1;\n        local shift=$2;\n        reverse_digits $x | cut\
    \ -c$((shift + 1))- | sed -e 's/^0*//';\n    }\n\n    local x=$1;\n    local shift=$2;\n\
    \    local num_digits=$(echo \"$x\" | wc -c);\n    if [ $shift -lt $num_digits\
    \ ]; then\n        circular_shift_digits $x $shift;\n    else\n        reverse_digits\
    \ $x;\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local shifted_x\n    if [ $# -ne 2\
    \ ]; then\n        echo \"Invalid arguments.\"\n        return 1\n    fi\n   \
    \ local x=\"$1\"\n    local shift=\"$2\"\n    local x_len=${#x}\n    if [ \"$x_len\"\
    \ -eq \"1\" ]; then\n        echo \"$x\"\n        return 0\n    fi\n    if [ \"\
    $shift\" -ge \"$x_len\" ]; then\n        echo \"$x\" | rev\n        return 0\n\
    \    fi\n    local x_head=${x:0:$shift}\n    local x_tail=${x:$shift}\n    shifted_x=\"\
    $x_tail$x_head\"\n    echo \"$shifted_x\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ n=$(echo $x | wc -c)\n  if [[ $shift -ge $n ]]; then\n    echo $(echo $x | tr\
    \ '0123456789' '9876543210')\n  else\n    echo $(echo $x | tail -c $shift)$(echo\
    \ $x | head -c $(($n-$shift)))\n  fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    digit_count=$(echo \"$1\" | wc -c)\
    \ # wc -c returns number of characters including newline\n    digit_count=$((digit_count\
    \ - 1)) # remove newline from count\n    if [ \"$2\" -gt \"$digit_count\" ]; then\n\
    \        echo \"$1\" | rev\n    else\n        echo \"$1\" | cut -c\"$2-$digit_count\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -r __doc__='Usage: circular_shift\
    \ $integer $shift'\n  local -r num=$1\n  local -r shift=$2\n  printf %s \"${num}\"\
    \ | rev | cut -c -$((shift % ${#num})) | rev\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local shift2=$((shift % ${#x}))\n    if [[ $shift2 -eq 0 ]]; then\n\
    \        echo \"$x\"\n    else\n        local left=\"${x:0:${#x} - $shift2}\"\n\
    \        local right=\"${x:$shift2}\"\n        echo \"$right$left\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    [ $# -eq 2 ] || { echo \"Usage: circular_shift\
    \ X SHIFT\" >&2; return 1; }\n    [ \"$1\" -gt 0 ] || { echo \"X must be > 0\"\
    \ >&2; return 1; }\n    [ \"$2\" -gt 0 ] || { echo \"SHIFT must be > 0\" >&2;\
    \ return 1; }\n    local digits=${#1}\n    local shift=$2\n    if [ $shift -ge\
    \ $digits ]; then\n        echo \"$1\" | rev\n    else\n        local shifted=${1:0:$digits-$shift}\n\
    \        local rev=${1:$digits-$shift}\n        echo \"$rev$shifted\"\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local number_of_digits=\"${#1}\"\n\
    \    local shift_distance=\"$2\"\n    # Convert to reverse index\n    local index=$((number_of_digits\
    \ - shift_distance))\n    # Handle index < 0, i.e. a circular shift, by reversing\
    \ the digits\n    if [ \"$index\" -lt \"0\" ]; then\n        index=$((index +\
    \ number_of_digits))\n    fi\n    # Extract the shifted digit\n    local digit=$(echo\
    \ \"$1\" | sed -E \"s/^(.{$index})(.)(.*)/\\2/\")\n    # Extract everything before\
    \ the shifted digit\n    local prefix=$(echo \"$1\" | sed -E \"s/^(.{$index})(.)(.*)/\\\
    1/\")\n    # Extract everything after the shifted digit\n    local suffix=$(echo\
    \ \"$1\" | sed -E \"s/^(.{$index})(.)(.*)/\\3/\")\n    # Concatenate the suffix\
    \ + shifted digit + prefix and output\n    echo \"${suffix}${digit}${prefix}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  # Figure\
    \ out how many digits\n  local digits=$(echo -n \"$x\" | wc -c)\n  # Pad x with\
    \ 0's to make it the same number of digits\n  while [ $(echo -n \"$x\" | wc -c)\
    \ -lt $digits ]; do\n    x=\"0$x\"\n  done\n  # Right circular shift by $shift\n\
    \  if [ $shift -lt $digits ]; then\n    # Right circular shift by $shift\n   \
    \ local y=$(echo \"$x\" | rev | cut -c $(($shift + 1))-$digits | rev)\n    local\
    \ z=$(echo \"$x\" | rev | cut -c 1-$shift | rev)\n    x=\"$y$z\"\n  elif [ $shift\
    \ -eq $digits ]; then\n    x=$(echo \"$x\" | rev)\n  else\n    local y=$(echo\
    \ \"$x\" | rev | cut -c $(($digits + 1 - $shift))-$digits | rev)\n    local z=$(echo\
    \ \"$x\" | rev | cut -c 1-$(($digits - $shift)) | rev)\n    x=\"$y$z\"\n  fi\n\
    \  echo \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [[ -z \"$1\" ]]; then\n    return\
    \ 1\n  fi\n  if [[ -z \"$2\" ]]; then\n    return 1\n  fi\n  local x=\"$1\"\n\
    \  local shift=\"$2\"\n  local -i len=${#x}\n  if (( shift % len == 0 )); then\n\
    \    echo -n \"$x\"\n    return 0\n  fi\n  if (( shift > len )); then\n    echo\
    \ -n \"$(reverse \"$x\")\"\n    return 0\n  fi\n  local res=\"${x:shift:len}\"\
    \n  res=\"${res}${x:0:shift}\"\n  echo -n \"$res\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  num=\"$1\"\n  shift=\"$2\"\n  len=${#num}\n\
    \  shift=$((shift % len))\n  num=\"${num:shift}${num:0:shift}\"\n  printf \"%s\"\
    \ \"$num\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ n=$(echo -n $x | wc -c)\n\n  if [ $shift -gt $n ]; then\n    # return digits\
    \ reversed\n    x=$(echo -n $x | rev)\n  else\n    while [ $shift -gt 0 ]; do\n\
    \      shift=$((shift - 1))\n      # Rotate right.\n      x=$(echo -n $x | tail\
    \ -c 1)$(echo -n $x | head -c $((n - 1)))\n    done\n  fi\n\n  echo -n $x\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  [ $# -eq 2 ] || { echo \"Missing arguments\
    \ in $FUNCNAME\" >&2; return 1; }\n  [ -z \"$1\" ] && { echo \"Empty first argument\
    \ in $FUNCNAME\" >&2; return 1; }\n  [ -z \"$2\" ] && { echo \"Empty second argument\
    \ in $FUNCNAME\" >&2; return 1; }\n  local x=\"$1\"\n  local shift=\"$2\"\n  echo\
    \ \"${x:${shift}}${x:0:${shift}}\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ length=$(echo $x | wc -c)\n  (( length-- ))\n  if (( shift >= length )); then\n\
    \    echo $x | rev\n  else\n    echo ${x:$shift}${x:0:$shift}\n  fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local result i\n    # Reverse the\
    \ digits.\n    digits=\"$(reverse_digits \"$1\")\"\n    # Shift the digits\n \
    \   for ((i=0; i<$2; i++)); do\n        result=\"${digits:0:1}${result}\"\n  \
    \      digits=\"${digits:1}\"\n    done\n    # Reverse the digits.\n    echo \"\
    $(reverse_digits \"$result\")\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp782re0er.sh: line 15: reverse_digits: command not found

    /tmp/tmp782re0er.sh: line 22: reverse_digits: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i x=$1\n    local -i shift=$2\n\
    \    local -i n=${#x}\n    if [ $shift -le $n ]; then\n        for ((i=1; i<=shift;\
    \ i++)); do\n            local -i last=$((x%10))\n            x=$((x/10))\n  \
    \          x=$((x+last*(10**(n-1))))\n        done\n    else\n        x=$(reverse\
    \ $x)\n    fi\n    echo $x\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # reversed x\n  local y=$(reverse_digits\
    \ \"$1\")\n  # number of digits in y\n  local y_digit_count=$(digit_count \"$y\"\
    )\n  # shift\n  local shift=$2\n  # number of digits to rotate\n  local rotate=$((\
    \ $shift % $y_digit_count ))\n  # split y into two parts\n  local y_left=${y:0:$rotate}\n\
    \  local y_right=${y:$rotate}\n  # concatenate y_right followed by y_left\n  local\
    \ z=\"$y_right$y_left\"\n  # reversed z\n  echo $(reverse_digits \"$z\")\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvyxmpmrm.sh: line 14: reverse_digits: command not found

    /tmp/tmpvyxmpmrm.sh: line 16: digit_count: command not found

    /tmp/tmpvyxmpmrm.sh: line 20: 2 %  : syntax error: operand expected (error token
    is "%  ")

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local result\n    local reversed\n    # Reversed is the integer with the digits\
    \ reversed.\n    reversed=$(rev \"$x\")\n    # If the shift is greater than the\
    \ number of digits, return the integer reversed.\n    if [[ \"$shift\" -gt \"\
    ${#x}\" ]]; then\n        result=\"$reversed\"\n    else\n        local left=\"\
    \"\n        local right=\"\"\n        # Split the reversed integer in two parts,\
    \ left being the digits from the first\n        # to the shift position (included)\
    \ and right being the rest.\n        left=\"${reversed:0:$shift}\"\n        right=\"\
    ${reversed:$shift}\"\n        # The result is right reversed with left appended.\n\
    \        result=\"$(rev \"$right\")$left\"\n    fi\n    echo \"$result\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'rev: cannot open 100: No such file or directory

    rev: cannot open : No such file or directory

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local int=\"$1\"\n    local shift=\"\
    $2\"\n    local int_len=\"${#int}\"\n    # echo \"length: $int_len\"\n    if [\
    \ \"$int_len\" -lt \"$shift\" ]; then\n        # echo \"less than shift\"\n  \
    \      local i\n        local int_rev=''\n        for (( i=$int_len-1; i>=0; i--\
    \ )); do\n            int_rev+=\"${int:$i:1}\"\n        done\n        echo \"\
    $int_rev\"\n    else\n        # echo \"more than shift\"\n        local int_shifted=\"\
    ${int:${shift}:${int_len}}${int:0:${shift}}\"\n        echo \"$int_shifted\"\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # Get the length of the number.\n  local\
    \ x=\"$1\"\n  local len=\"${#x}\"\n  local shift=\"$2\"\n  # If shift > number\
    \ of digits, return the digits reversed.\n  if [ \"$shift\" -ge \"$len\" ]; then\n\
    \    echo \"$x\" | rev\n    return\n  fi\n  # Circular shift the digits right\
    \ by shift.\n  local start=\"${x:0:$shift}\"\n  local end=\"${x:$shift}\"\n  echo\
    \ \"$end$start\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local integer=$1\n    local shift=$2\n\
    \    if [[ ${shift} -gt ${#integer} ]]; then\n        echo $1 | rev\n    else\n\
    \        echo ${integer:${shift}}${integer:0:${shift}}\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Reverse string\n    local reversed=$(echo\
    \ $1 | rev)\n    # Circular shift\n    local num_digits=$((${#1} - $2))\n    local\
    \ shifted=\"${reversed:0:$num_digits}\"\n    local result=\"${reversed:$num_digits}\"\
    \n    echo \"${result}${shifted}\"\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=\"$1\"\n    shift=\"$2\"\n    if\
    \ [[ $shift -gt ${#x} ]]; then\n        x=$(rev <<<\"$x\")\n    else\n       \
    \ for (( i=0; i<$shift; i++ )); do\n            x=\"${x%?}${x:0:1}\"\n       \
    \ done\n    fi\n    echo \"$x\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    n=$(($2 % ${#1}))\n    head -c $n\
    \ <(echo $1 | rev) | rev\n    echo -n ${1:0:$(( ${#1} - $n ))}\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=\"$1\"\n    local shift=\"\
    $2\"\n    local s=\"\"\n    local nd=$(expr length \"$digits\")\n    local sh=0\n\
    \    local i=0\n    local digit=\"\"\n    [ \"$shift\" -gt \"$nd\" ] && echo \"\
    $digits\" | rev && return 0\n    for digit in $(echo \"$digits\" | fold -w1);\
    \ do\n        i=$(expr $i + 1)\n        sh=$(expr $shift % $nd)\n        if [\
    \ \"$i\" -le \"$sh\" ]; then\n            s=\"$s$digit\"\n        else\n     \
    \       echo -n \"$digit\"\n        fi\n    done\n    echo \"$s\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=$(echo $1 | grep -o . |\
    \ rev)\n  local shift_num=$2\n  for ((i=0; i<shift_num; i++)); do\n    digits=$(echo\
    \ $digits | tr '0-9' \"$SHIFT_CHARS\")\n  done\n  echo $digits | rev\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'tr: when not truncating set1, string2 must be non-empty

    tr: when not truncating set1, string2 must be non-empty

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n\
    \        if [[ \"$2\" =~ ^[0-9]+$ ]]; then\n            len=${#1}\n          \
    \  len_shift=$2\n            if [ $len_shift -gt $len ]; then\n              \
    \  echo \"$1\" | rev\n            else\n                len_shift=$(( $len_shift\
    \ % $len ))\n                echo \"${1:len_shift}${1:0:len_shift}\"\n       \
    \     fi\n        else\n            # error\n            echo \"$0: Error: $2\
    \ is not an integer\" >&2\n            exit 1\n        fi\n    else\n        #\
    \ error\n        echo \"$0: Error: $1 is not an integer\" >&2\n        exit 1\n\
    \    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local num_digits=\"${#x}\"\n    local reversed_digits=$(echo \"${x}\" | rev)\n\
    \    local shifted_digits\n    if [[ \"${shift}\" -gt \"${num_digits}\" ]]; then\n\
    \        shifted_digits=\"${reversed_digits}\"\n    else\n        shifted_digits=$(echo\
    \ \"${reversed_digits}\" | cut -c 1-\"${shift}\" | rev)\n        local remaining_digits=$(echo\
    \ \"${reversed_digits}\" | cut -c \"$((shift + 1))\"- | rev)\n        shifted_digits=\"\
    ${remaining_digits}${shifted_digits}\"\n    fi\n    echo \"${shifted_digits}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=${#1}\n    if (( $2 > $n ));\
    \ then\n        local reverse=\"\"\n        for (( i = n - 1; i >= 0; i-- ));\
    \ do\n            reverse+=${1:$i:1}\n        done\n        echo \"$reverse\"\n\
    \    else\n        echo \"${1:$2}${1:0:$2}\"\n    fi\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local digits=$(echo\
    \ \"$x\" | wc -c)\n    local shift=$2\n    if [ \"$shift\" -ge \"$digits\" ];\
    \ then\n        echo $x | rev\n    else\n        local last_digits=$(echo \"$x\"\
    \ | tail -c $shift)\n        local first_digits=$(echo \"$x\" | cut -c -$((digits\
    \ - shift)))\n        echo \"$last_digits$first_digits\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits\n    if [[ $1 =~ [[:digit:]]+\
    \ ]]; then\n        digits=$1\n    else\n        echo \"Expected a positive integer,\
    \ got '$1'\"\n        return 1\n    fi\n    local shift\n    if [[ $2 =~ [[:digit:]]+\
    \ ]]; then\n        shift=$2\n    else\n        echo \"Expected a positive integer,\
    \ got '$2'\"\n        return 1\n    fi\n    if (( shift > ${#digits} )); then\n\
    \        digits=\"$(rev <<< \"$digits\")\"\n    else\n        digits=\"$(<<< \"\
    $digits\" sed \"s/\\(.*\\)\\(.\\{$shift\\}\\)/\\2\\1/\")\"\n    fi\n    echo \"\
    $digits\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # $1 is an integer\n  # $2 is an integer\n\
    \  local  l=${#1}\n  local shift=$((l - $2))\n  local ishift=$((l + $2))\n  echo\
    \ \"${1:$shift:$l}${1:0:$shift}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppjrqj1ig.sh: line 18: $shift: substring expression < 0

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  if [[ $shift == 0 ]]; then\n    echo \"$x\"\n    return\n  fi\n  local d=\"\
    ${#x}\"\n  if [[ $shift -gt $d ]]; then\n    echo \"$(reverse \"$x\")\"\n    return\n\
    \  fi\n  shift=$((shift%d))\n  echo \"${x:$shift}${x:0:$shift}\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=\"${#x}\"\n  local len=$((len+1))\n  if [[ \"$len\" -lt \"$shift\"\
    \ ]]; then\n    local x=$(echo \"$x\" | rev)\n  else\n    local shift=$((shift%len))\n\
    \    local x=\"${x:$shift:$len}${x:0:$shift}\"\n  fi\n  echo \"$x\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -i x=$1\n  local -i shift=$2\n\
    \  local digits\n  digits=$(echo \"$x\" | wc -c)\n  shift=$(( (shift % digits)\
    \ + 1 ))\n  echo $x | rev | cut -c$shift- | rev\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local length=\"${#x}\"\n    if ((shift >= length)); then\n        #\
    \ Shift is longer than the number of digits, so shift the digits back\n      \
    \  # and reverse them.\n        local digits=\"$(echo \"${x:0:$length}\" | sed\
    \ 's/./& /g')\"\n        local result=\"\"\n        for i in $digits; do\n   \
    \         result=\"$i$result\"\n        done\n        echo \"$result\"\n    else\n\
    \        # Shift the digits to the right.\n        local right=\"${x: -$shift}\"\
    \n        local left=\"${x:0:$((length - shift))}\"\n        echo \"$right$left\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local length=${#x}\n    if (( shift >= length )); then\n        rev <<< \"\
    $x\"\n    else\n        local y=$((x % 10**shift))\n        local z=$((x / 10**shift))\n\
    \        echo \"$y$z\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local s=$2\n  local len=${#x}\n\
    \  local shift=$((s % len))\n  local start=$((len - shift))\n  echo ${x:start:len}${x:0:start}\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local y=$2\n  local result=\n\
    \  for (( i=0; i<${#x}; i++ )); do\n    result+=${x:$(( (i+y) % ${#x} )):1}\n\
    \  done\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i n=\"$1\"\n    local -i s=\"\
    $2\"\n    local -i i\n    local digits=\"$(echo \"$n\" | wc -c)\"\n    if [ \"\
    $s\" -gt \"$digits\" ]; then\n        digits=\"$s\"\n    fi\n    if [ \"$s\" -eq\
    \ 0 ]; then\n        echo \"$n\"\n        return\n    fi\n    local shifted=\"\
    \"\n    for ((i=1; i<=digits; i++)); do\n        shifted+=\"$(echo \"$n\" | sed\
    \ -r 's/.(.*)/\\1/;t;d' | sed -r 's/.*(.)/\\1/')\"\n        n=\"$(echo \"$n\"\
    \ | sed -r 's/(.)(.*)/\\2/')\"\n    done\n    echo \"$shifted\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    echo \"$1\" | (read -r x ; echo \"\
    $x\" | rev | cut -c 1-\"$2\" | rev)\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local len=\"${#x}\"\n  shift=$((shift % len))\n  # If shift>len then shift=len-shift\n\
    \  if ((shift > len/2)); then\n    shift=$((len-shift))\n  fi\n  echo \"${x:shift}${x:0:shift}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local number=\"$1\"\n  local shift=\"\
    $2\"\n  local digits\n  local i\n  # Split number into digits.\n  digits=$(echo\
    \ $number | grep -o .)\n  # If shift exceeds the number of digits, reverse digits.\n\
    \  if [ \"$shift\" -gt \"${#digits}\" ]; then\n    for ((i = \"${#digits}\"; i\
    \ > 0; i--)); do\n      echo -n \"${digits:i-1:1}\"\n    done\n  else\n    # Start\
    \ from the end of the array and return the last shift elements.\n    for ((i =\
    \ \"${#digits}\"; i > \"${#digits}-$shift\"; i--)); do\n      echo -n \"${digits:i-1:1}\"\
    \n    done\n    # Continue from the start of the array and return all remaining\
    \ elements.\n    for ((i = \"${#digits}-$shift\"; i > 0; i--)); do\n      echo\
    \ -n \"${digits:i-1:1}\"\n    done\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local num_digits=\"${#1}\"\n    shift=$((\
    \ shift % num_digits ))\n    #echo \"num_digits is $num_digits\"\n    #echo \"\
    shift is $shift\"\n    head -c \"$shift\" <<< \"$1\" | tr -d '\\n'\n    head -c\
    \ \"$num_digits\" <<< \"$1\" | tail -c +\"$(( shift + 1 ))\" | tr -d '\\n'\n \
    \   head -c \"$shift\" <<< \"$1\" | tail -c +\"$(( num_digits - shift + 1 ))\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=$1\n  shift=$2\n  if [ $shift -gt\
    \ ${#x} ]; then\n    x=$(rev <<< $x)\n  else\n    while [ $shift -gt 0 ]; do\n\
    \      digit=${x: -1}\n      x=${x:0:-1}\n      x=$digit$x\n      shift=$((shift\
    \ - 1))\n    done\n  fi\n  echo $x\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # TODO: Implement this\n    echo $(printf\
    \ '%s' $1 | rev | cut -c 1-$2 | rev)$(printf '%s' $1 | rev | cut -c $((2-$2))-\
    \ | rev)\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: 'cut: byte/character positions are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    num_digits=\"${#1}\"\n    if [ $num_digits\
    \ -eq 0 ]; then\n        echo \"\"\n        return\n    fi\n    # Add num_digits\
    \ to shift so shift is always positive\n    shift=$(( (($2 + num_digits) % num_digits)\
    \ ))\n    if [ $shift -eq 0 ]; then\n        echo \"$1\"\n    else\n        echo\
    \ \"${1:$shift}${1:0:$shift}\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ \"$#\" -ne 2 ]; then\n    echo\
    \ \"Usage: $0 <integer> <integer>\"\n    return 1\n  fi\n  echo \"$1\" | {\n \
    \   read x\n    reverse() {\n      local s=\"\"\n      for (( i = ${#1} - 1; i\
    \ >= 0; i-- )); do\n        s+=${1:$i:1}\n      done\n      echo \"$s\"\n    }\n\
    \    l=$(reverse \"$x\")\n    r=$(reverse \"${l:0:$2}\")\n    l=$(reverse \"${l:$2}\"\
    )\n    echo \"$r$l\"\n  }\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local -i x=${1:-\"0\"}\n  local -i shift=${2:-\"\
    0\"}\n  local result=\"\"\n  local -i c\n  local -i i\n  local -i d\n  local -i\
    \ num_digits=${#1}\n  for ((i=0; i<num_digits; i++)); do\n    c=$((x % 10))\n\
    \    x=$((x / 10))\n    d=$((shift % num_digits))\n    shift=$((shift / num_digits))\n\
    \    result=\"${result:${#result}-$d:$d}${result:0:${#result}-$d}${c}\"\n  done\n\
    \  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphh3ieo2j.sh: line 25: ${#result}-$d: substring expression < 0

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # Argument validation and handling\n\
    \  if [ -z \"$1\" ]\n  then\n    echo \"ERROR: circular_shift function missing\
    \ 1st argument (integer)\"\n    return 1\n  fi\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]\n\
    \  then\n    echo \"ERROR: circular_shift function 1st argument ($1) is not an\
    \ integer\"\n    return 1\n  fi\n  if [ -z \"$2\" ]\n  then\n    echo \"ERROR:\
    \ circular_shift function missing 2nd argument (integer)\"\n    return 1\n  fi\n\
    \  if ! [[ \"$2\" =~ ^[0-9]+$ ]]\n  then\n    echo \"ERROR: circular_shift function\
    \ 2nd argument ($2) is not an integer\"\n    return 1\n  fi\n  if [ \"$2\" -gt\
    \ ${#1} ]\n  then\n    # shift was greater than number of digits, so return digits\
    \ reversed\n    for (( i=${#1}-1; i>=0; i-- ))\n    do\n      echo -n \"${1:$i:1}\"\
    \n    done\n    echo\n    return 0\n  fi\n  # Standard case\n  echo \"$1\" | cut\
    \ -c $2- | tr -d '\\n'\n  echo \"$1\" | cut -c 1-$(( $2 - 1 ))\n  return 0\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    [ $# -eq 2 ] || die \"Invalid number\
    \ of arguments passed to ${FUNCNAME[0]}\"\n    [ -n \"$1\" ] || die \"Empty value\
    \ passed to ${FUNCNAME[0]}\"\n    [ -n \"$2\" ] || die \"Empty value passed to\
    \ ${FUNCNAME[0]}\"\n    printf \"%s\" \"$1\" | rev | cut -c -\"$2\" | rev | rev\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local num=$1\n  local len=${#num}\n\
    \  local shift=$2\n  local abs_shift=$(($len-($shift%$len)))\n  local -i i\n \
    \ local result=\"\"\n  for ((i=$abs_shift; i<$len; i++)); do\n    result=\"$result${num:$i:1}\"\
    \n  done\n  for ((i=0; i<$abs_shift; i++)); do\n    result=\"$result${num:$i:1}\"\
    \n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x\n    x=$1\n    shift=$2\n\
    \    # If the shift number is greater than the number of digits, reverse\n   \
    \ if [ ${#x} -lt $shift ]; then\n        echo \"$(rev <<< \"$x\")\"\n    else\n\
    \        # Remove the rightmost $shift digits, reverse, and prepend to $x\n  \
    \      echo \"$(rev <<< \"${x:0:$((${#x} - $shift))}\")${x:$((${#x} - $shift))}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=$1\n  shift=$2\n  # find the length\
    \ of the integer x\n  xlength=${#x}\n  if [ $shift -gt $xlength ]; then\n    x=$(reverse\
    \ $x)\n  else\n    # Get the first two digits of the integer x\n    first_two=${x:0:$shift}\n\
    \    # Get the last digit of the integer x\n    second_digit=${x:$shift:1}\n \
    \   # Get the last digit of the integer x\n    last_digit=${x:$xlength-1:1}\n\
    \    # remove the first and last digit from the integer x\n    x=${x:1:$xlength-2}\n\
    \    # concatenate the first two digits of the integer x with the removed last\
    \ digit\n    x=$first_two$x$second_digit\n    # concatenate the removed first\
    \ digit with the resultant integer x\n    x=$last_digit$x\n  fi\n  echo $x\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Digits of $1 reversed\n    local\
    \ x=\"$(rev <<< \"$1\")\"\n    local s=\"$2\"\n    # Number of digits\n    local\
    \ d=\"${#x}\"\n    # If shift is greater than number of digits, reverse the digits\n\
    \    if (( s >= d )); then\n        echo \"$x\"\n    else\n        # Split string\
    \ into prefix, suffix\n        echo \"$(cut -c1-\"$s\" <<< \"$x\")$(cut -c\"$((\
    \ s + 1 ))\"-\"$d\" <<< \"$x\")\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   if [[ -z $x ]]; then\n        echo \"Missing x\" >&2\n        return 1\n \
    \   fi\n    if [[ -z $shift ]]; then\n        echo \"Missing shift\" >&2\n   \
    \     return 1\n    fi\n    if [[ ! $x =~ ^[0-9]+$ ]]; then\n        echo \"x\
    \ is not an integer\" >&2\n        return 1\n    fi\n    if [[ ! $shift =~ ^[0-9]+$\
    \ ]]; then\n        echo \"shift is not an integer\" >&2\n        return 1\n \
    \   fi\n    echo $x | cut -c -$shift | rev\n    echo $x | cut -c $shift- | rev\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local l=$((${#x} - shift))\n  local prefix=${x:0:$l}\n  local suffix=${x:$l}\n\
    \  echo $suffix$prefix\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqhjgec10.sh: line 16: $l: substring expression < 0

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -i num=$1\n    local -i shift=$2\n\
    \    local -i len=$((${#num}))\n    while ((shift >= len)); do\n        shift=$((shift\
    \ - len))\n    done\n    shift=$((shift * -1))\n    if ((shift == 0)); then\n\
    \        printf \"%d\" \"$num\"\n    else\n        printf \"%d\" \"$(( num % (10\
    \ ** shift) * (10 ** (len - shift)) + num / (10 ** shift) ))\"\n    fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn7veotje.sh: line 23: num % (10 ** shift) * (10 ** (len - shift))
    + num / (10 ** shift) : exponent less than 0 (error token is ") * (10 ** (len
    - shift)) + num / (10 ** shift) ")

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local c=${1:0:1}\n    local d=${1:1}\n\
    \    local res\n    if [ -z \"$d\" ]; then\n        res=$c\n    else\n       \
    \ res=$(circular_shift \"$d\" \"$(( $2 - 1 ))\")$c\n    fi\n    echo $res\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=$1\n    local -r shift=$2\n\
    \    if [[ -z $shift ]]; then shift=\"0\"; fi\n    if [[ ${#x} -le $shift ]];\
    \ then echo \"$x\" | rev; return 0; fi\n    local -r xlen=${#x}\n    local -r\
    \ blen=$((xlen - shift))\n    local -r beg=$(echo \"$x\" | cut -c1-$blen)\n  \
    \  local -r end=$(echo \"$x\" | cut -c$((blen + 1))-$xlen)\n    echo \"$end$beg\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=$( echo \"$1\" | grep\
    \ -o . )\n    local length=$( echo \"$digits\" | wc -c )\n    (( length-- ))\n\
    \    local index=0\n    local result=\"\"\n    (( shift = shift % length ))\n\
    \    while [ $index -le $length ]; do\n        (( index2 = index + shift ))\n\
    \        if [ $index2 -gt $length ]; then\n            (( index2 -= length ))\n\
    \        fi\n        local digit=$( echo \"$digits\" | cut -c \"$(( index2 + 1\
    \ ))\" )\n        result+=\"$digit\"\n        (( index++ ))\n    done\n    echo\
    \ \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local integer=$1\n  local shift=$2\n\
    \  local digits=$(echo \"$integer\" | wc -c)\n  local result=\"\"\n  if [ $shift\
    \ -gt $digits ]; then\n    for (( i=$digits-1; i>=0; i-- )); do\n      result=\"\
    $result$(echo $integer | cut -c $i)\"\n    done\n  else\n    for (( i=$shift;\
    \ i<$digits; i++ )); do\n      result=\"$result$(echo $integer | cut -c $i)\"\n\
    \    done\n    for (( i=1; i<=$shift; i++ )); do\n      result=\"$result$(echo\
    \ $integer | cut -c $i)\"\n    done\n  fi\n  echo $result\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=${#x}\n    shift=$((shift % len))\n    if ((shift == 0)); then\n\
    \        printf \"%s\" \"$x\"\n    else\n        local prefix=${x%${x: -shift}}\n\
    \        local suffix=${x: -shift}\n        local result=\"$suffix$prefix\"\n\
    \        printf \"%s\" \"$result\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local -r x=$1\n    local -r shift=$2\n\
    \    local reversed=''\n\n    reverse_digits $x\n    reversed=$(cat)\n\n    shift_digits\
    \ $reversed $shift\n    cat\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=56 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660023586
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # if $2 > length of $1, return reversed.\n\
    \  if [[ ${#1} -lt $2 ]]; then\n    echo $1 | rev\n  # else, use bash substring\
    \ to get the right most `$2` digits and shift them\n  # left.\n  else\n    printf\
    \ \"%s%s\" \"${1:(-1 * $2)}\" \"${1:0:(-1 * $2)}\"\n  fi\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local number=$1\n  local shift=$2\n\
    \  local length=${#number}\n  if [ $shift -ge $length ]; then\n    rev <<< \"\
    $number\"\n  else\n    local right=${number: -$shift}\n    local left=${number::-$shift}\n\
    \    echo \"$right$left\"\n  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  len=$(echo -n \"$1\" | wc -c)\n  if\
    \ [ \"$2\" -ge \"$len\" ]; then\n    echo -n \"$1\" | rev\n  else\n    echo -n\
    \ \"$1\" | cut -c \"$((1 + $2))\"- | rev\n    echo -n \"$1\" | cut -c -\"$2\"\n\
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    number=\"$1\"\n    shift=\"$2\"\n\
    \    n=${#number}\n    shift=$((shift % n))\n    echo \"${number:shift}${number:0:shift}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # shellcheck disable=SC2046\n    local\
    \ x=($(printf '%s' \"$1\" | xargs -n1))\n    local shift=$(( $2 % ${#x[@]} ))\n\
    \    local result=''\n    for i in \"${x[@]:shift}\"; do\n        result+=\"$i\"\
    \n    done\n    for i in \"${x[@]:0:shift}\"; do\n        result+=\"$i\"\n   \
    \ done\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    len=$(echo\
    \ -n $x | wc -c)\n    if [[ $shift -gt $len ]]; then\n        echo -n $x | rev\n\
    \    else\n        right=$(echo -n $x | rev | cut -c -$shift | rev)\n        left=$(echo\
    \ -n $x | rev | cut -c $((shift+1))- | rev)\n        echo -n $left$right\n   \
    \ fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"\
    2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n\
    \    echo \"Usage: $0 <int> <int>\";\n    return 1;\n  fi\n  local -i x shift\n\
    \  x=$1\n  shift=$2\n  local -i n_digits\n  n_digits=$(n_digits \"$x\")\n  if\
    \ [ \"$shift\" -lt \"$n_digits\" ]; then\n    (( x = x%10**shift ))\n    printf\
    \ \"%0$(( n_digits - shift ))d\" \"$x\"\n    (( x = x/10**shift ))\n    echo \"\
    $x\"\n  else\n    reverse \"$x\"\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy_atxj3c.sh: line 21: n_digits: command not found

    /tmp/tmpy_atxj3c.sh: line 28: reverse: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # shift is greater than number of\
    \ digits\n    if [[ $2 -gt ${#1} ]]; then\n        rev=$(rev $1)\n        echo\
    \ $rev\n    else\n        # length - shift the number of digits\n        echo\
    \ ${1:${#1}-$2}${1:0:${#1}-$2}\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'rev: cannot open 97: No such file or directory

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [[ -z \"$1\" ]]; then\n       \
    \ echo \"ERROR: No argument supplied to $(circular_shift)\"\n        return 1\n\
    \    fi\n    local digits=$(strlen \"$1\")\n    local shift=${2:-1}\n    if [[\
    \ $shift -gt $digits ]]; then\n        reverse_string \"$1\"\n    else\n     \
    \   # return the right shift of the digits.\n        local right_shift=$(rshift_string\
    \ \"$1\" \"$shift\")\n        # return the left shift of the digits.\n       \
    \ local left_shift=$(lshift_string \"$1\" \"$shift\")\n        # Combine the left\
    \ and right shifts.\n        echo \"${right_shift}${left_shift}\"\n    fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpoudw16_2.sh: line 17: strlen: command not found

    /tmp/tmpoudw16_2.sh: line 20: reverse_string: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local i j length\n    local x=$1\n\
    \    shift=$2\n    length=${#x}\n    for ((i=0; i<shift; i++)); do\n        j=$((length-1))\n\
    \        x=\"${x:$j:1}${x:0:$j}\"\n    done\n    echo \"$x\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local string_length=${#x}\n    local shift_by_string_length=$((string_length\
    \ - shift))\n    local to_shift=${x:0:shift_by_string_length}\n    local shifted=${x:shift_by_string_length}\n\
    \    if [[ $shift -gt $string_length ]]; then\n        echo $shifted | rev\n \
    \   else\n        echo $shifted$to_shift\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsxaxlvzw.sh: line 17: shift_by_string_length: substring expression
    < 0

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=$1\n    local shift=$2\n \
    \   local n_digits=${#n}\n    if [ $shift -gt $n_digits ]; then\n        echo\
    \ \"$n\" | rev\n    else\n        local first=${n:0:$shift}\n        local last=${n:$shift}\n\
    \        echo \"$last$first\"\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits reversed x\n    digits=$(echo\
    \ \"$1\" | sed -e 's/\\(.\\)/\\1\\n/g')\n    reversed=$(echo \"$digits\" | rev)\n\
    \    x=$(echo \"$digits\" | tail -n +$2)\n    x=\"$x\"\"$(echo \"$digits\" | head\
    \ -n $(( $2 - 1 )))\"\n    if [[ $2 -ge $(echo \"$digits\" | wc -l) ]]; then\n\
    \        echo \"$reversed\"\n    else\n        echo \"$x\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local digits=$(echo \"$x\" | sed 's/./& /g')\n    local num_digits=$(echo\
    \ \"$digits\" | wc -w)\n    local shifted=$(echo \"$digits\" | cut -d' ' -f\"\
    $((num_digits-shift+1))-\" -f\"$num_digits\" -f1-\"$((num_digits-shift))\")\n\
    \    echo \"$shifted\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: only one type of list may be specified

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local integer=\"$1\"\n    local shift=\"\
    $2\"\n    local result=\"\"\n    local number_of_digits=$(printf \"%s\" \"$integer\"\
    \ | wc -c)\n    local i=0\n    if [ \"$shift\" -ge \"$number_of_digits\" ]; then\n\
    \        for ((i=0; i<$number_of_digits; i++)); do\n            result=$(printf\
    \ \"%s%s\" \"$result\" \"$(printf \"%s\" \"$integer\" | awk '{print substr($0,\
    \ '$number_of_digits'-'$i', 1)}')\")\n        done\n    else\n        for ((i=0;\
    \ i<$number_of_digits; i++)); do\n            result=$(printf \"%s%s\" \"$result\"\
    \ \"$(printf \"%s\" \"$integer\" | awk '{print substr($0, '$i'+'$shift', 1)}')\"\
    )\n        done\n    fi\n    printf \"%s\" \"$result\"\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [[ \"$1\" == 0 ]]; then\n    # no\
    \ shifting zero\n    echo \"0\"\n    return\n  fi\n  # number of digits\n  local\
    \ n=$(trim \"$(num_digits \"$1\")\")\n  # shift\n  local shift=$(trim \"$2\")\n\
    \  # circular shift\n  local x=$(trim \"$(echo \"$1\" | rev)\")\n  for i in $(seq\
    \ 1 $shift); do\n    # extract and remove first digit\n    local f=\"${x:0:1}\"\
    \n    x=\"${x:1}\"\n    # append to end\n    x=\"$x$f\"\n  done\n  # return circular\
    \ shift\n  echo \"$(trim \"$(echo \"$x\" | rev)\")\"\n}\n\ncandidate() {\n   \
    \ circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwc4fwmml.sh: line 19: num_digits: command not found

    /tmp/tmpwc4fwmml.sh: line 19: trim: command not found

    /tmp/tmpwc4fwmml.sh: line 21: trim: command not found

    /tmp/tmpwc4fwmml.sh: line 23: trim: command not found

    /tmp/tmpwc4fwmml.sh: line 32: trim: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    shift_str=$1\n    shift_by=$2\n  \
    \  if [[ $shift_by -gt ${#shift_str} ]]; then\n        # This is a way to reverse\
    \ a string in bash:\n        #   declare -a shift_array\n        #   shift_array=(\
    \ $(echo $shift_str | grep -o . | tr -d '\\n') )\n        #   for i in $(seq ${#shift_array[@]}\
    \ -1 0); do\n        #       echo -n ${shift_array[$i]}\n        #   done\n  \
    \      #   echo \"\"\n        echo \"$shift_str\" | rev\n    else\n        echo\
    \ \"${shift_str:$shift_by}${shift_str:0:$shift_by}\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=\"$1\"\n    local shift=\"\
    $2\"\n    local length=\"${#digits}\"\n    local reversed=\"$(rev_str \"$digits\"\
    )\"\n    if [ \"$shift\" -gt \"$length\" ]; then\n        echo \"$reversed\"\n\
    \    else\n        local shift_right=$((length - shift))\n        local right=\"\
    ${reversed:0:shift_right}\"\n        local left=\"${reversed:shift_right}\"\n\
    \        echo \"$(rev_str \"$left\")$(rev_str \"$right\")\"\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1vs5k167.sh: line 16: rev_str: command not found

    /tmp/tmp1vs5k167.sh: line 23: rev_str: command not found

    /tmp/tmp1vs5k167.sh: line 23: rev_str: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    echo \"$1\" | awk -v shift=\"$2\"\
    \ '\n        BEGIN {\n            digits = length($1)\n            if (shift >\
    \ digits) {\n                print rev\n            } else {\n               \
    \ shift = shift % digits\n                shift = digits - shift\n           \
    \     rev = substr($1, shift+1) substr($1, 1, shift)\n                print rev\n\
    \            }\n        }'\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    if [ $shift\
    \ -ge ${#x} ]; then\n        echo $(echo \"$x\" | rev)\n    else\n        x=$(echo\
    \ \"$x\" | rev)\n        echo $(echo \"$x\" | cut -c1-$shift | rev)$(echo \"$x\"\
    \ | cut -c$((shift+1))- | rev)\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=\"$1\"\n  local shift=\"$2\"\
    \n  local digits=\"${#x}\"\n  local vals=\"$(echo \"${x}\" | fold -w1)\"\n  if\
    \ [ \"${shift}\" -gt \"${digits}\" ]; then\n    echo \"${vals}\" | rev\n  else\n\
    \    echo \"${vals}\" | tail -n \"${shift}\" | head -n \"${digits}\"\n  fi\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local __reversed=$(rev $1)\n    local\
    \ __newlength=$(($2%${#1}))\n    local __output=$(echo ${__reversed:$__newlength}${__reversed:0:$__newlength})\n\
    \    echo $__output\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'rev: cannot open 100: No such file or directory

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local reverse=$(echo $x | rev)\n    local result=\"\"\n    if [ ${#x} -eq\
    \ 1 ]; then\n        result=$x\n    elif [ $shift -ge ${#x} ]; then\n        result=$reverse\n\
    \    else\n        result=$(echo $reverse | cut -c 1-$shift)$(echo $reverse |\
    \ cut -c $((shift+1))-${#x})\n    fi\n    echo $result\n}\n\ncandidate() {\n \
    \   circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ $# -ne 2 ]; then\n        echo\
    \ \"circular_shift() takes 2 arguments\"\n        return 1\n    fi\n    local\
    \ x=$1\n    local shift=$2\n    local l=$(len \"${x}\")\n    local lshift=$(len\
    \ \"${shift}\")\n    if [ ${lshift} -gt ${l} ]; then\n        return 1\n    fi\n\
    \    for i in $(seq 1 ${shift}); do\n        x=$(echo \"${x}\" | rev)\n      \
    \  x=$(rotate_digits_right \"${x}\")\n        x=$(echo \"${x}\" | rev)\n    done\n\
    \    echo \"${x}\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp99tnr7hx.sh: line 19: len: command not found

    /tmp/tmp99tnr7hx.sh: line 20: len: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=\"$1\"\n  local shift=\"\
    $2\"\n  local len=\"${#digits}\"\n  local overflow=$((len-shift))\n  if [ $overflow\
    \ -lt 0 ]; then\n    # Put the digits in reverse.\n    digits=\"$(echo $digits\
    \ | rev)\"\n    overflow=$((len+overflow))\n  fi\n  local head=\"${digits:0:$overflow}\"\
    \n  local tail=\"${digits:$overflow}\"\n  echo \"$tail$head\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpaenozlrc.sh: line 22: $overflow: substring expression < 0

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if (($# < 2)); then\n        echo\
    \ \"Error. Usage: circular_shift x shift\"\n        return\n    fi\n    local\
    \ -i x=\"$1\" shift=\"$2\"\n    echo \"$x\" | rev | cut -c \"-$((shift % ${#x}))\"\
    \ | rev\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [[ \"$1\" =~ ^-?[0-9]+$ ]] && [[\
    \ \"$2\" =~ ^-?[0-9]+$ ]]; then\n    local digits=\"${#1}\"\n    if [[ \"$2\"\
    \ -gt \"$digits\" ]]; then\n      # If shift > number of digits, return digits\
    \ reversed.\n      local result=$(rev \"$1\")\n    else\n      local first=$(echo\
    \ \"$1\" | cut -c1-\"$2\")\n      local last=$(echo \"$1\" | cut -c\"$(($2 + 1))\"\
    -)\n      local result=\"$last$first\"\n    fi\n    echo \"$result\"\n  else\n\
    \    echo \"ERROR: Not an integer. Argument $1 or $2.\" >&2\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  x=$1\n  shift=$2\n  if [ \"$shift\"\
    \ -eq \"0\" ]; then\n    #echo \"$x\"\n    printf \"%s\" \"$x\"\n    return\n\
    \  fi\n  # Find number of digits in x\n  len=$(echo -n \"$x\" | wc -c)\n  #echo\
    \ \"len = $len\"\n  if [ \"$shift\" -ge \"$len\" ]; then\n    #echo \"$x\" | rev\n\
    \    printf \"%s\" \"$x\" | rev\n    return\n  fi\n  # Split x into two strings:\
    \ pre and post\n  pre=$(echo -n \"$x\" | head -c \"$shift\")\n  post=$(echo -n\
    \ \"$x\" | tail -c +\"$((shift + 1))\")\n  #echo \"pre = $pre, post = $post\"\n\
    \  # Concatenate post+pre\n  postpre=$(echo -n \"$post$pre\")\n  #echo \"$postpre\"\
    \n  printf \"%s\" \"$postpre\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local int=$1\n  local shift=$2\n  local\
    \ len=${#int}\n  if [ $shift -ge $len ]; then\n    echo ${int} | rev\n  else\n\
    \    local result=$(echo $int | rev)\n    local result=$(echo $result | cut -c\
    \ $shift-$len)\n    local result=$(echo $result | rev)\n    local result=$(echo\
    \ $result | cut -c 1-$shift)\n    local result=$(echo $result | rev)\n    echo\
    \ $result$(echo $int | cut -c $shift-$len)\n  fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local y=\"\"\n    local i=0\n    local len=${#x}\n    while [[ $i -lt\
    \ $len ]]; do\n        y=\"${y}${x:$((i+shift)%len):1}\"\n        ((i++))\n  \
    \  done\n    echo \"$y\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjaj2b30j.sh: command substitution: line 19: syntax error near unexpected
    token `%len''

    /tmp/tmpjaj2b30j.sh: command substitution: line 19: `(i+shift)%len''

    /tmp/tmpjaj2b30j.sh: command substitution: line 19: syntax error near unexpected
    token `%len''

    /tmp/tmpjaj2b30j.sh: command substitution: line 19: `(i+shift)%len''

    /tmp/tmpjaj2b30j.sh: command substitution: line 19: syntax error near unexpected
    token `%len''

    /tmp/tmpjaj2b30j.sh: command substitution: line 19: `(i+shift)%len''

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local s=$(rev_digits \"$1\")\n   \
    \ local i=0\n    while [ $i -lt $2 ]; do\n        s=\"${s#?}${s:0:1}\"\n     \
    \   ((i++))\n    done\n    echo \"$s\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4web1ok_.sh: line 13: rev_digits: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  echo \"$1\" | rev | cut -c -\"$2\" |\
    \ rev | sed -e 's/^/'\"$(echo \"$1\" | rev | cut -c \"$2\"- | rev)\"'/'\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(printf '%s' \"$x\" | wc -c)\n    printf '%s' \"$x\"\n    if [ \"\
    $n\" -gt \"$shift\" ]; then\n        for i in $(seq $(($n-$shift))); do\n    \
    \        printf '\\b'\n        done\n    else\n        for i in $(seq $(($n-1)));\
    \ do\n            printf '\\b'\n        done\n    fi\n    for i in $(seq $(($shift)));\
    \ do\n        printf '%s' \"${x: -1}\"\n        for j in $(seq $(($n-1))); do\n\
    \            printf '\\b'\n        done\n    done\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    num=$1\n    shift=$2\n    while ((\
    \ shift > ${#num} )); do\n        shift=shift-num.length\n    done\n    echo ${num:shift:${#num}}${num:0:shift}\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [[ $1 == \"\" ]]; then\n      \
    \  return\n    fi\n    local s\n    s=$(echo \"$1\" | sed 's/./& /g')\n    local\
    \ digits\n    digits=( $s )\n    local digitcnt\n    digitcnt=$(echo \"$s\" |\
    \ wc -w)\n    local shiftcnt\n    shiftcnt=$(expr $2 % $digitcnt)\n    if [[ $shiftcnt\
    \ == 0 ]]; then\n        echo \"$1\"\n        return\n    fi\n    local i\n  \
    \  for (( i = 0; i < $shiftcnt; i++ )); do\n        digits=( \"${digits[@]: -1}\"\
    \ \"${digits[@]:0:$digitcnt}\" )\n    done\n    printf \"%s\" \"${digits[@]}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 2
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    echo \"$1\" | sed \"s/\\(.*\\)\\(.\\\
    )/\\2\\1/\"$2\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgsh87nv4.sh: line 26: unexpected EOF while looking for matching
    `"''

    /tmp/tmpgsh87nv4.sh: line 30: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local s=\"$1\"\n    local shift=\"\
    $2\"\n    local s=\"$(echo -n \"$s\" | sed 's/\\(.\\)/\\1 /g')\"\n    local s=\"\
    $(echo -n \"$s\" | cut -d ' ' -f \"${shift}-\")\"\n    local s=\"$(echo -n \"\
    $s\" | sed 's/\\(.\\)/\\1\\n/g')\"\n    local s=\"$(echo -n \"$s\" | sed ':a;N;$!ba;s/\\\
    n//g')\"\n    echo -n \"$s\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x\n    local shift\n    x=$1\n\
    \    shift=$2\n    if [ $shift -ge ${#x} ]; then\n        echo $x | rev\n    else\n\
    \        echo ${x: -$shift}${x:0:$(( ${#x} - $shift ))}\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=( $(echo \"$1\" | grep\
    \ -o .) )\n  local len=${#digits[@]}\n  local shift=${2:-1}\n  shift=$((shift\
    \ % len))\n\n  if [ $shift -eq 0 ]; then\n    echo \"$1\"\n  else\n    local new_digits=(\
    \ ${digits[@]:$shift} ${digits[@]:0:$shift} )\n    echo ${new_digits[@]}\n  fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits number_of_digits shift_result\n\
    \    digits=\"$1\"\n    shift_result=\"$2\"\n    number_of_digits=$((${#digits}-1))\n\
    \    if [ \"$shift_result\" -gt \"$number_of_digits\" ]; then\n        digits=\"\
    $(echo \"$digits\" | rev)\"\n    else\n        digits=\"$(echo \"$digits\" | rev\
    \ | cut -c \"$shift_result\"- | rev)\"\n    fi\n    echo \"$digits\"\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local input=$1\n  local shift=$2\n \
    \ local length=${#input}\n  local result\n  if ((length <= shift)); then\n   \
    \ result=$(reverse_string \"$input\")\n  else\n    local first_part=${input:0:length-shift}\n\
    \    local second_part=${input:length-shift}\n    result=\"$second_part$first_part\"\
    \n  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpysop25fy.sh: line 18: reverse_string: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=\"$1\"\n    local shift=\"\
    $2\"\n    if [ $# -ne 2 ]; then\n        echo \"Usage: $0 <number> <shift>\"\n\
    \        return 1\n    fi\n    if ! [[ \"$digits\" =~ ^[0-9]+$ ]]; then\n    \
    \    echo \"Number must contain only digits\"\n        return 1\n    fi\n    if\
    \ ! [[ \"$shift\" =~ ^[0-9]+$ ]]; then\n        echo \"Shift must contain only\
    \ digits\"\n        return 1\n    fi\n    if [ \"${#digits}\" -le \"$shift\" ];\
    \ then\n        rev <<< \"$digits\"\n    else\n        echo \"${digits:$shift:${#digits}}\"\
    \"${digits:0:$shift}\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: -1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # Get the number of digits in $1\n\
    \    num_digits=\"${#1}\"\n    # Store $1 in digits\n    digits=\"$1\"\n    #\
    \ Shift the digits right by shift\n    while [ \"$2\" -ne 0 ]; do\n        # Shift\
    \ the digits right by 1\n        right_digit=\"${digits: -1}\"\n        digits=\"\
    ${right_digit}${digits: 0: -1}\"\n        # Decrement $2 by 1\n        shift=$((shift\
    \ - 1))\n    done\n    # If shift > number of digits, reverse digits\n    if [\
    \ \"$shift\" -gt \"$num_digits\" ]; then\n        digits=\"$(rev <<< \"$digits\"\
    )\"\n    fi\n    # Return the result as a string\n    echo \"$digits\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=35 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660023586
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ ${#1} -lt $2 ]; then\n      \
    \  echo $1 | rev\n    else\n        echo ${1:$2}${1:0:$2}\n    fi\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  s=\"$1\"\n  num=\"$2\"\n  new_s=\"$s\"\
    \n  for (( i=0; i<num; i++ )); do\n    first=${new_s:0:1}\n    new_s=\"${new_s:1}$first\"\
    \n  done\n  echo \"$new_s\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[\
    \ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"\
    79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\"\
    \ \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    echo -n \"$1\" | sed \"s/.*/&$(printf\
    \ '%*s' \"$2\" | tr ' ' '0')/\" | rev | cut -c$2- | rev\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local len=\"${#x}\"\n    [ \"$shift\" -ge \"$len\" ] && echo \"$x\"\
    \ | rev && return\n    local l=${x:0:$((len-shift))}\n    local r=${x:$((len-shift))}\n\
    \    echo \"$r$l\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    shift=\"$2\"\n    chars=\"$(echo -n\
    \ \"$1\" | grep -o .)\"\n    for i in $(seq 1 \"$shift\"); do\n        last=\"\
    $(echo -n \"$chars\" | grep -o . | tail -n 1)\"\n        chars=\"$(echo -n \"\
    $chars\" | grep -o . | tail -n +2)$last\"\n    done\n    echo -n \"$chars\"\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local len=$(echo \"$x\" | wc -c)\n    local len=$((len - 1))\n\n    if [ $shift\
    \ -ge $len ]; then\n        echo \"$x\" | rev\n    else\n        local shift=$((len\
    \ - shift))\n        echo \"$x\" | cut -c$shift- | rev\n        echo \"$x\" |\
    \ cut -c1-$((shift - 1)) | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=\"$1\"\n    local shift=\"\
    $2\"\n    local size=\"${#digits}\"\n    shift=$((shift % size))\n    [[ $shift\
    \ -eq 0 ]] && echo \"$digits\" && return\n    echo \"${digits:size-shift:shift}${digits:0:size-shift}\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local n=$(echo \"$1\" | rev)\n   \
    \ local s=$(($2 % ${#1}))\n    echo $n | cut -c1-${s} | rev\n}\n\ncandidate()\
    \ {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local digits=\"$1\"\n    local shift=\"\
    $2\"\n    local chars=${#digits}\n    if [ \"$shift\" -lt \"$chars\" ]; then\n\
    \        echo \"${digits: -$shift}${digits:0:$(($chars-$shift))}\"\n    else\n\
    \        echo \"${digits:0:$chars}\" | rev\n    fi\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local length=$((${#x} - 1))\n    local last=$((length - shift))\n  \
    \  local reversed=$(reverse $x)\n    local digits=$(head -c $last <<<\"$reversed\"\
    )\n    local digits_reversed=$(reverse $digits)\n    echo \"$digits_reversed\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3z4ztg23.sh: line 17: reverse: command not found

    /tmp/tmp3z4ztg23.sh: line 19: reverse: command not found

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    local n_digits=\"${#x}\"\n    local shift_mod=\"$(( shift % n_digits\
    \ ))\"\n    local remaining_digits=\"$(( n_digits - shift_mod ))\"\n    local\
    \ x_before=\"${x:0:remaining_digits}\"\n    local x_after=\"${x:remaining_digits}\"\
    \n    local x_shifted=\"${x_after}${x_before}\"\n    echo \"$x_shifted\"\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    if [ ${#x}\
    \ -lt $shift ]; then\n        echo \"${x// /*}\" | rev\n    else\n        echo\
    \ ${x:$shift}${x:0:$shift}\n    fi\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    printf \"\
    %s\" $x | rev | cut -c $shift- | rev\n}\n\ncandidate() {\n    circular_shift \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n\
    \    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\"\
    ) = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local base1=$(echo \"$1\" | sed 's/.\\\
    {1\\}/& /g')\n    local shift_len=${#2}\n    local start=$(( ${#base1} - shift_len\
    \ ))\n    local start_from_end=$(( ${#base1} - start ))\n    local shifted=$(echo\
    \ \"$base1\" | awk -v start=$start '{\n        for (i = 1; i <= start; i++)\n\
    \            printf \"%s \", $i\n        for (i = start + 1; i <= NF; i++)\n \
    \           printf \"%s \", $i\n        for (i = 1; i <= start; i++)\n       \
    \     printf \"%s \", $i\n    }')\n    echo \"$shifted\" | awk -v start=$start_from_end\
    \ '{\n        for (i = start + 1; i <= NF; i++)\n            printf \"%s\", $i\n\
    \        for (i = 1; i <= start; i++)\n            printf \"%s\", $i\n    }'\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [ $# -ne 2 ]; then\n    return -1\n\
    \  fi\n  local reverse_str=$(reverse_str \"$1\")\n  local shift_len=$((${#reverse_str}\
    \ - $2))\n  echo \"${reverse_str:$shift_len}${reverse_str:0:$shift_len}\"\n}\n\
    \ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") =\
    \ \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4manjdvx.sh: line 16: reverse_str: command not found

    /tmp/tmp4manjdvx.sh: line 18: $shift_len: substring expression < 0

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [[ -z $1 ]]; then\n    echo \"circular_shift:\
    \ Missing argument (number).\"\n    return 1\n  fi\n  if [[ -z $2 ]]; then\n \
    \   echo \"circular_shift: Missing argument (shift).\"\n    return 1\n  fi\n \
    \ if [[ $2 -eq 0 ]]; then\n    echo $1\n    return 0\n  fi\n  if [[ $2 -lt 0 ]];\
    \ then\n    circular_shift \"$1\" \"$(( $2 * -1 ))\"\n    return 0\n  fi\n  local\
    \ number=\"$1\"\n  local digits=${#number}\n  local shift=$2\n  local result\n\
    \  if [[ $shift -ge $digits ]]; then\n    result=$( reverse_digits \"$number\"\
    \ )\n  else\n    result=${number:$shift}${number:0:$shift}\n  fi\n  echo $result\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local y=$2\n  local z=\"\
    $x\"\n  # Use the modulus operator (%) to get the remainder:\n  while [ \"$y\"\
    \ -gt 0 ]; do\n    z=${z%?}${z#?}\n    y=$(( y - 1 ))\n  done\n  echo \"$z\"\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    declare -i x=10#$1\n    declare -i\
    \ shift=$2\n    while (( shift-- )) ; do\n        declare -i a=${x}%10\n     \
    \   x=${x}/10\n        x=$(( 10 * x + a ))\n    done\n    printf \"%d\" \"$x\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  if [[ $1 =~ ^[0-9]+$ ]]; then\n    local\
    \ s=$(rev <<< \"$1\")\n    local m=$(echo \"$s\" | sed -e 's/^\\(.\\).*/\\1/')\n\
    \    local r=$(echo \"$s\" | sed -e 's/^.//')\n    local i=0\n    for (( ; ; ));\
    \ do\n      [[ $i -ge $2 ]] && break\n      s=\"$m$r\"\n      m=$(echo \"$s\"\
    \ | sed -e 's/^\\(.\\).*/\\1/')\n      r=$(echo \"$s\" | sed -e 's/^.//')\n  \
    \    ((i++))\n    done\n    echo \"$s\"\n  else\n    echo \"$1\"\n  fi\n}\n\n\
    candidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n\
    \    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\"\
    ) = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local string=\"$1\"\n    local shift=\"\
    $2\"\n    string=\"${string:$shift}${string:0:$shift}\"\n    echo \"$string\"\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [ ${#1} -lt $2 ]; then\n      \
    \  echo \"$1\" | rev\n    else\n        echo \"${1: -$2}${1:0:${#1}-$2}\"\n  \
    \  fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local x=$1\n  local shift=$2\n  local\
    \ num_digits=${#x}\n  local rem=$((shift % num_digits))\n  [ $rem -eq 0 ] && echo\
    \ \"$x\" && return\n  echo \"${x:$rem}${x:0:$rem}\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 0
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=\"$1\"\n    local shift=\"\
    $2\"\n    if (( shift > ${#x} )); then\n        rev <<< \"$x\"\n    else\n   \
    \     echo -e \"${x: -$shift}\\n${x:0:${#x}-$shift}\" | tr -d '\\n'\n    fi\n\
    }\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   local n=$(echo -n $x | wc -c)\n    local m=$(($n - $shift))\n    if [ $shift\
    \ -gt $n ]; then\n        echo $x | rev\n    else\n        echo -n $x | cut -c\
    \ $shift-$n\n        echo -n $x | cut -c 1-$m\n    fi\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    if [[ \"$1\" =~ ^-?[0-9]+$ ]] && [[\
    \ \"$2\" =~ ^-?[0-9]+$ ]]; then\n        length=\"${#1}\"\n        local foo=$1\n\
    \        for i in $(seq 1 $length); do\n            local digit=$(echo $foo |\
    \ cut -c 1)\n            local bar=$(echo $foo | cut -c 2-)\n            foo=$bar$digit\n\
    \            if [[ $i -eq $2 ]]; then\n                echo $foo\n           \
    \     return\n            fi\n        done\n        echo $foo | rev\n    else\n\
    \        echo \"$1\"\n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local int shift len\n    int=\"$1\"\
    \n    shift=\"$2\"\n    len=\"${#int}\"\n    if (( shift > len )); then\n    \
    \    echo \"${int::-1}\" | rev\n    else\n        echo \"${int:shift:len}${int:0:shift}\"\
    \n    fi\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\"\
    \ \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    x=$1\n    shift=$2\n    if [ $# -ne\
    \ 2 ]; then\n        error_exit \"circular_shift: invalid number of arguments.\
    \ Usage: circular_shift <integer> <integer>\"\n    fi\n    if ! [[ $x =~ ^[0-9]+$\
    \ ]]; then\n        error_exit \"circular_shift: argument 1 is not an integer.\"\
    \n    fi\n    if ! [[ $shift =~ ^[0-9]+$ ]]; then\n        error_exit \"circular_shift:\
    \ argument 2 is not an integer.\"\n    fi\n    if [ $shift -eq 0 ]; then\n   \
    \     echo $x\n    else\n        len=$(echo -n $x | wc -c)\n        len=$((len\
    \ - 1))\n        if [ $shift -gt $len ]; then\n            echo $x | rev\n   \
    \     else\n            len2=$((len - shift))\n            echo -n ${x:shift:len2}\n\
    \            echo -n ${x:0:shift}\n        fi\n    fi\n}\n\ncandidate() {\n  \
    \  circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    rev <<< \"$1\" | cut -c -\"$2\" |\
    \ rev | tail -c +\"$2\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate\
    \ \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n  \
    \  [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\"\
    ) = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  # shellcheck disable=SC2034\n  local\
    \ digits=\"${#1}\"\n  local shift=\"$2\"\n  # shellcheck disable=SC2034\n  local\
    \ shifts=\"$digits\"\n  local n=0\n  local str=\"\"\n  if [[ \"$shift\" -gt \"\
    $digits\" ]]; then\n    shift=\"$digits\"\n  fi\n  for (( i = 0; i < \"$digits\"\
    ; i++ )); do\n    local j=$(((i + shift) % shifts))\n    local digit=\"${1:j:1}\"\
    \n    str+=\"$digit\"\n  done\n  echo \"$str\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local digits=$(echo \"$1\" | sed 's/./&\
    \ /g')\n  local result=\"\"\n  if [ ${#digits} -gt $2 ]; then\n    result=\"$(echo\
    \ \"$digits\" | sed 's/./& /g' | grep -o . | sed '1,'${2}'d' | tr -d '\\n')$(echo\
    \ \"$digits\" | sed 's/./& /g' | grep -o . | sed 1,${2}'d' | tr -d '\\n')\"\n\
    \  else\n    result=\"$(echo \"$digits\" | sed 's/./& /g' | grep -o . | rev |\
    \ tr -d '\\n')\"\n  fi\n  echo \"$result\"\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    local x=$1\n    local shift=$2\n \
    \   if [[ \"$x\" =~ [^0-9] ]]; then\n        echo \"Error: '$x' is not an integer\"\
    \n        return 1\n    fi\n    if [[ \"$shift\" =~ [^0-9] ]]; then\n        echo\
    \ \"Error: '$shift' is not an integer\"\n        return 1\n    fi\n    if [[ \"\
    $x\" -eq 0 ]]; then\n        echo \"0\"\n        return 0\n    fi\n    local n=$(digit_count\
    \ \"$x\")\n    shift=$((shift % n))\n    if [[ \"$shift\" -eq 0 ]]; then\n   \
    \     echo \"$x\"\n        return 0\n    fi\n    local x_str=$(reverse_str \"\
    $x\")\n    local x_str_shifted=\"${x_str:shift}\"\n    local x_shifted=\"${x_str_shifted}${x_str:0:shift}\"\
    \n    local reversed_x_shifted=$(reverse_str \"$x_shifted\")\n    echo \"$reversed_x_shifted\"\
    \n}\n\ncandidate() {\n    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"100\" \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\"\
    ) = \"12\" ]]\n    [[ $(candidate \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate\
    \ \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate \"11\" \"101\") = \"11\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyo8h_neq.sh: line 27: digit_count: command not found

    /tmp/tmpyo8h_neq.sh: line 28: shift % n: division by 0 (error token is "n")

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  local shift=$1\n  local x=$2\n  local\
    \ num_digits=${#x}\n  local s=$(echo $x | cut -c \"$(($shift+1))-$num_digits\"\
    )\n  local s+=$(echo $x | cut -c \"1-$shift\")\n  echo $s\n}\n\ncandidate() {\n\
    \    circular_shift \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\"\
    \ \"2\") = \"001\" ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate\
    \ \"97\" \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n  \
    \  [[ $(candidate \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: invalid decreasing range

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n  echo \"$1\" | rev | cut -c -$2 | rev;\n\
    \  echo \"$1\" | rev | cut -c $(( $2 + 1 ))- | rev;\n}\n\ncandidate() {\n    circular_shift\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\"\
    \ ]]\n    [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\"\
    \ \"8\") = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
- exit_code: 1
  program: "#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits\
    \ right by shift\n# and return the result as a string.\n# If shift > number of\
    \ digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"\
    21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n\
    # $2 is an integer\ncircular_shift() {\n    # check if $1 is an integer\n    if\
    \ ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"circular_shift() requires an\
    \ integer argument\"\n        return 1\n    fi\n    # check if $2 is an integer\n\
    \    if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"circular_shift() requires\
    \ an integer argument\"\n        return 1\n    fi\n    # length of $1\n    local\
    \ len\n    len=$(echo $1 | wc -c)\n    # return $1 reversed if $2 is larger than\
    \ $1\n    if [[ $2 -gt $len ]]; then\n        echo \"$1\" | rev\n        return\
    \ 0\n    fi\n    local result\n    # shift once if shift == length, else shift\
    \ $2 times\n    # shift right by 1\n    if [[ $2 -eq $len ]]; then\n        result=$((\
    \ $1 / 10 + $1 % 10 * 10 ** (len - 2) ))\n    # shift right by n\n    else\n \
    \       result=$(( $1 / 10 ** $2 + $1 % 10 ** $2 * 10 ** (len - $2 - 1) ))\n \
    \   fi\n    echo \"$result\"\n}\n\ncandidate() {\n    circular_shift \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"100\" \"2\") = \"001\" ]]\n  \
    \  [[ $(candidate \"12\" \"2\") = \"12\" ]]\n    [[ $(candidate \"97\" \"8\")\
    \ = \"79\" ]]\n    [[ $(candidate \"12\" \"1\") = \"21\" ]]\n    [[ $(candidate\
    \ \"11\" \"101\") = \"11\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023581
