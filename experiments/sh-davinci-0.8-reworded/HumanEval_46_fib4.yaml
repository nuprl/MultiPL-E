name: HumanEval_46_fib4
language: sh
prompt: "#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2)\
  \ -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
  # Please write a function to efficiently compute the n-th element of the fib4 number\
  \ sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"\
  6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n"
tests: "}\n\ncandidate() {\n    fib4 \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\") = \"4\" ]]\n    [[ $(candidate \"8\") = \"28\" ]]\n    [[ $(candidate \"\
  10\") = \"104\" ]]\n    [[ $(candidate \"12\") = \"386\" ]]\n}\n\nrun_test"
completions: ["    a=0\n    b=0\n    c=2\n    d=0\n    e=0\n    if [ $1 -lt 3 ]; then\n\
    \        echo \"$1\"\n    else\n        for (( i=3; i<=$1; i++ )); do\n      \
    \      e=$(expr $a + $b + $c + $d)\n            a=$b\n            b=$c\n     \
    \       c=$d\n            d=$e\n        done\n        echo \"$e\"\n    fi", " \
    \   if [ \"$1\" -eq \"0\" ]; then\n        echo \"0\"\n    elif [ \"$1\" -eq \"\
    1\" ]; then\n        echo \"0\"\n    elif [ \"$1\" -eq \"2\" ]; then\n       \
    \ echo \"2\"\n    elif [ \"$1\" -eq \"3\" ]; then\n        echo \"0\"\n    else\n\
    \        a=$(fib4 $((\"$1\" - 1)))\n        b=$(fib4 $((\"$1\" - 2)))\n      \
    \  c=$(fib4 $((\"$1\" - 3)))\n        d=$(fib4 $((\"$1\" - 4)))\n        echo\
    \ $((a + b + c + d))\n    fi", "    n=$1\n    let n1=n-1\n    let n2=n-2\n   \
    \ let n3=n-3\n    let n4=n-4\n    if [[ $n -eq 0 ]]; then\n        echo 0\n  \
    \  elif [[ $n -eq 1 ]]; then\n        echo 0\n    elif [[ $n -eq 2 ]]; then\n\
    \        echo 2\n    elif [[ $n -eq 3 ]]; then\n        echo 0\n    else\n   \
    \     let f=fib4 $n1 + fib4 $n2 + fib4 $n3 + fib4 $n4\n        echo $f\n    fi",
  "    if [[ $1 == \"0\" ]]; then\n        echo \"0\"\n    elif [[ $1 == \"1\" ]];\
    \ then\n        echo \"0\"\n    elif [[ $1 == \"2\" ]]; then\n        echo \"\
    2\"\n    elif [[ $1 == \"3\" ]]; then\n        echo \"0\"\n    else\n        number=$1\n\
    \        f0=0\n        f1=0\n        f2=2\n        f3=0\n        for i in $(seq\
    \ 4 $number); do\n            f4=$((f0+f1+f2+f3))\n            f0=$f1\n      \
    \      f1=$f2\n            f2=$f3\n            f3=$f4\n        done\n        echo\
    \ $f4\n    fi", "    declare -i A=0\n    declare -i B=0\n    declare -i C=2\n\
    \    declare -i D=0\n    for (( i=0; i<$1; i++ )); do\n        D=$(($A + $B +\
    \ $C))\n        A=$B\n        B=$C\n        C=$D\n    done\n    echo $D", "  #\
    \ TODO: Write your solution here\n  echo \"Not Implemented\"", "    p0=0\n   \
    \ p1=0\n    p2=2\n    p3=0\n    p4=0\n    n=$1\n    while (( $n -gt 3 )); do\n\
    \        (( p4 = p3 + p2 + p1 + p0 ))\n        (( p0 = p1 ))\n        (( p1 =\
    \ p2 ))\n        (( p2 = p3 ))\n        (( p3 = p4 ))\n        (( n-- ))\n   \
    \ done\n    echo $p4", "  if [ $1 -le 1 ]; then\n    echo 0\n  elif [ $1 -eq 2\
    \ ]; then\n    echo 2\n  else\n    n=$1\n    x=0\n    y=0\n    z=2\n    u=0\n\
    \    while [ $n -gt 3 ]; do\n      n=$((n-1))\n      u=$((x+y+z))\n      x=$y\n\
    \      y=$z\n      z=$u\n    done\n    echo $u\n  fi", "    if [ $1 -eq 0 ]; then\n\
    \        echo \"0\"\n    elif [ $1 -eq 1 ]; then\n        echo \"0\"\n    elif\
    \ [ $1 -eq 2 ]; then\n        echo \"2\"\n    elif [ $1 -eq 3 ]; then\n      \
    \  echo \"0\"\n    else\n        echo \"$(($(fib4 \"$(($1-1))\") + $(fib4 \"$(($1-2))\"\
    ) + $(fib4 \"$(($1-3))\") + $(fib4 \"$(($1-4))\")))\"\n    fi", '    echo $1',
  "    [[ $1 == 0 ]] && echo 0 && return\n    [[ $1 == 1 ]] && echo 0 && return\n\
    \    [[ $1 == 2 ]] && echo 2 && return\n    [[ $1 == 3 ]] && echo 0 && return\n\
    \    prev4=0\n    prev3=0\n    prev2=2\n    prev1=0\n    for ((i=4; i<=$1; i++));\
    \ do\n        current=$(( prev4 + prev3 + prev2 + prev1 ))\n        prev4=$prev3\n\
    \        prev3=$prev2\n        prev2=$prev1\n        prev1=$current\n    done\n\
    \    echo $current", "  local a b c d e n=$1\n  case $n in\n    [0-2]) echo $n;\
    \ return;;\n    3) echo 0; return;;\n    *) a=0; b=1; c=2; d=0; e=0; while ((\
    \ n-- > 3 )); do a=$b; b=$c; c=$d; d=$e; e=$((a+b+c+d)); done; echo $e;;\n  esac",
  "  local n=$1\n  local x=0\n  local y=0\n  local z=2\n  local w=0\n  local i\n \
    \ for ((i=3; i<=n; i++)); do\n    x=$y\n    y=$z\n    z=$w\n    w=$((x+y+z))\n\
    \  done\n  echo $w", "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ];\
    \ then\n    echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ];\
    \ then\n    echo 0\n  else\n    fib4_index=4\n    fib4_array[0]=0\n    fib4_array[1]=0\n\
    \    fib4_array[2]=2\n    fib4_array[3]=0\n    while [ $fib4_index -le $1 ]; do\n\
    \      fib4_array[$fib4_index]=$((${fib4_array[$(($fib4_index-1))]}+${fib4_array[$(($fib4_index-2))]}+${fib4_array[$(($fib4_index-3))]}+${fib4_array[$(($fib4_index-4))]}))\n\
    \      fib4_index=$(($fib4_index+1))\n    done\n    echo ${fib4_array[$(($fib4_index-1))]}\n\
    \  fi", "    if [ $1 -lt 4 ]; then\n        echo \"0\"\n    elif [ $1 -eq 4 ];\
    \ then\n        echo \"2\"\n    else\n        # Still using the fib0() function\
    \ from the fibbonacci sequence, but it's straightforward to convert to an iterative\n\
    \        # function, in order to avoid the recursion\n        fib0 $1\n    fi",
  "    a=0\n    b=0\n    c=2\n    d=0\n    for (( i=2; i<$1; i++ ))\n    do\n    \
    \    a=$b\n        b=$c\n        c=$d\n        d=$((a+b+c))\n    done\n    echo\
    \ $d", "    if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n\
    \        echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq\
    \ 3 ]; then\n        echo 0\n    else\n        local n=$1\n        local n_1=$(fib4\
    \ $(($n-1)))\n        local n_2=$(fib4 $(($n-2)))\n        local n_3=$(fib4 $(($n-3)))\n\
    \        local n_4=$(fib4 $(($n-4)))\n        echo $((n_1+n_2+n_3+n_4))\n    fi",
  "  if [ \"$1\" == \"0\" ]; then\n    echo \"0\"\n  elif [ \"$1\" == \"1\" ]; then\n\
    \    echo \"0\"\n  elif [ \"$1\" == \"2\" ]; then\n    echo \"2\"\n  elif [ \"\
    $1\" == \"3\" ]; then\n    echo \"0\"\n  else\n    echo $(( $(fib4 \"$(( $1 -\
    \ 1 ))\") + $(fib4 \"$(( $1 - 2 ))\") + $(fib4 \"$(( $1 - 3 ))\") + $(fib4 \"\
    $(( $1 - 4 ))\") ))\n  fi", "  #echo \"Sorry, the function `fib4` is not implemented.\"\
    \n  fib4Recur(){\n    if [ $1 -eq 0 ]; then\n      echo \"0\"\n    elif [ $1 -eq\
    \ 1 ]; then\n      echo \"0\"\n    elif [ $1 -eq 2 ]; then\n      echo \"2\"\n\
    \    elif [ $1 -eq 3 ]; then\n      echo \"0\"\n    else\n      fib4Recur $((\
    \ $1 - 1 ))\n      fib4Recur $(( $1 - 2 ))\n      fib4Recur $(( $1 - 3 ))\n  \
    \    fib4Recur $(( $1 - 4 ))\n    fi\n  }\n  local result=$(fib4Recur $1)\n  echo\
    \ \"$result\"", "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq\
    \ 1 ]]; then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo 2\n\
    \    elif [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        local step_1=3\n\
    \        local step_2=2\n        local step_3=0\n        local step_4=0\n    \
    \    local n=$1\n        for (( i=4; i<=$n; i++ )); do\n            step_4=$((\
    \ step_3 + step_2 + step_1 + step_4 ))\n            step_3=$step_2\n         \
    \   step_2=$step_1\n            step_1=$step_4\n        done\n        echo $step_4\n\
    \    fi", "\tif [[ $1 -eq 0 ]]; then\n\t\techo \"0\"\n\telif [[ $1 -eq 1 ]]; then\n\
    \t\techo \"0\"\n\telif [[ $1 -eq 2 ]]; then\n\t\techo \"2\"\n\telif [[ $1 -eq\
    \ 3 ]]; then\n\t\techo \"0\"\n\telse\n\t\techo $(($(fib4 $(($1-1))) + $(fib4 $(($1-2)))\
    \ + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n\tfi", "  local a=0 b=0 c=2 d=0\n\
    \  local n=$1\n  # Write your code here\n  return 0", "        if [ \"$1\" -eq\
    \ 0 ]; then\n                printf \"0\"\n        elif [ \"$1\" -eq 1 ]; then\n\
    \                printf \"0\"\n        elif [ \"$1\" -eq 2 ]; then\n         \
    \       printf \"2\"\n        elif [ \"$1\" -eq 3 ]; then\n                printf\
    \ \"0\"\n        else\n                #echo \"$1\"\n                number1=$(fib4\
    \ \"$(($1-1))\")\n                number2=$(fib4 \"$(($1-2))\")\n            \
    \    number3=$(fib4 \"$(($1-3))\")\n                number4=$(fib4 \"$(($1-4))\"\
    )\n                #echo \"$number1\"\n                #echo \"$number2\"\n  \
    \              #echo \"$number3\"\n                #echo \"$number4\"\n      \
    \          printf \"%d\" \"$(($number1+$number2+$number3+$number4))\"\n      \
    \  fi", "    [[ $1 =~ ^-?[0-9]+$ ]] || {\n        echo \"error: argument must\
    \ be an integer\"\n        return 1\n    }\n    # Since fib4(0) -> 0, we need\
    \ to adjust the input by 1.\n    (( input = $1 + 1 ))\n    # List of values for\
    \ first 8 inputs to fib4().\n    declare -a fib4_list=(0 0 2 0 4 8 14)\n    #\
    \ Calculate values for n > 7.\n    (( input > 7 )) && {\n        for (( i = 8;\
    \ i <= input; i++ )); do\n            (( fib4_list[i] = fib4_list[i-1] + fib4_list[i-2]\
    \ + fib4_list[i-3] + fib4_list[i-4] ))\n        done\n    }\n    echo ${fib4_list[$input]}",
  "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif\
    \ [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n    echo 0\n  else\n\
    \    i=4\n    fib4array=(0 0 2 0)\n    while [ $i -le $1 ]; do\n      # echo \"\
    i=$i\"\n      fib4previous=$((${fib4array[0]} + ${fib4array[1]} + ${fib4array[2]}\
    \ + ${fib4array[3]}))\n      fib4array=(${fib4array[1]} ${fib4array[2]} ${fib4array[3]}\
    \ $fib4previous)\n      i=$(($i + 1))\n    done\n    echo $fib4previous\n  fi",
  "    local i=1\n    local a=0\n    local b=0\n    local c=2\n    local d=0\n   \
    \ local n=$1\n    while [ $i -lt $n ]; do\n        i=$((i+1))\n        d=$((a+b+c))\n\
    \        a=$b\n        b=$c\n        c=$d\n    done\n    echo $d", "    local\
    \ input=\"$1\"\n    local output=\"0\"\n    local input_temp=$input\n    local\
    \ i=0\n    local fib4_temp=0\n    local fib4_temp2=0\n    local fib4_temp3=0\n\
    \    local fib4_temp4=0\n    if [[ $input -eq 1 ]]; then\n        output=\"0\"\
    \n    elif [[ $input -eq 2 ]]; then\n        output=\"2\"\n    elif [[ $input\
    \ -eq 3 ]]; then\n        output=\"0\"\n    else\n        output=\"0\"\n     \
    \   for i in $(seq 4 $input); do\n            fib4_temp=$(($output))\n       \
    \     fib4_temp2=$(($input_temp - 1))\n            fib4_temp3=$(($input_temp -\
    \ 2))\n            fib4_temp4=$(($input_temp - 3))\n            fib4_temp2=$(fib4\
    \ \"$fib4_temp2\")\n            fib4_temp3=$(fib4 \"$fib4_temp3\")\n         \
    \   fib4_temp4=$(fib4 \"$fib4_temp4\")\n            output=$(($fib4_temp + $fib4_temp2\
    \ + $fib4_temp3 + $fib4_temp4))\n            input_temp=$(($input_temp - 1))\n\
    \        done\n    fi\n    echo \"$output\"", "  local n=$1\n  local fib=0\n \
    \ local a=$fib\n  local b=$fib\n  local c=$fib\n  local d=$fib\n  local i=0\n\
    \  while [ $i -lt $n ]; do\n    let d=$a+$b+$c+$fib\n    let a=$b\n    let b=$c\n\
    \    let c=$fib\n    let fib=$d\n    let i++\n  done\n  echo $fib", "    # Initialize\
    \ fib4\n    fib4=()\n    fib4[0]=0\n    fib4[1]=0\n    fib4[2]=2\n    fib4[3]=0\n\
    \    if [[ \"$1\" -le 3 ]]; then\n        echo ${fib4[$1]}\n    else\n       \
    \ for ((i=4; i<=$1; i++)); do\n            fib4[$i]=$(( ${fib4[$((i-1))]} + ${fib4[$((i-2))]}\
    \ + ${fib4[$((i-3))]} + ${fib4[$((i-4))]} ))\n        done\n        echo ${fib4[$1]}\n\
    \    fi", "    a=0\n    b=0\n    c=2\n    d=0\n    n=$1\n    while [ \"$((--n))\"\
    \ -ge \"0\" ]; do\n        d=$(echo \"$a + $b + $c + $d\" | bc)\n        a=$b\n\
    \        b=$c\n        c=$d\n    done\n    echo $d", "    a=0\n    b=0\n    c=2\n\
    \    d=0\n    n=$1\n    for (( i=3; i<=n; i++ ))\n    do\n        d=$(( a + b\
    \ + c + d ))\n        a=$b\n        b=$c\n        c=$d\n    done\n    echo $d",
  "  # Write your code here\n  echo \"\"", "    local n=$1\n    if [[ $n -eq 0 ]];\
    \ then\n        echo 0\n    elif [[ $n -eq 1 ]]; then\n        echo 0\n    elif\
    \ [[ $n -eq 2 ]]; then\n        echo 2\n    elif [[ $n -eq 3 ]]; then\n      \
    \  echo 0\n    else\n        local -i a=0\n        local -i b=0\n        local\
    \ -i c=2\n        local -i d=0\n        for (( i=4; i<=n; i++ )); do\n       \
    \     a=$b\n            b=$c\n            c=$d\n            d=$(( a + b + c +\
    \ d ))\n        done\n        echo $d\n    fi", "  if [ -z \"$1\" ] || ! [[ \"\
    $1\" =~ ^[0-9]+$ ]]; then\n    return 1\n  fi\n  if [ \"$1\" -le 3 ]; then\n \
    \   echo $(((1 << ($1 + 1)) - 1))\n    return 0\n  fi\n  local n=$(( $1 - 4 ))\n\
    \  local v1=$(( 1 << 4 ))\n  local v2=$(( (1 << 5) - 1 ))\n  local v3=$(( (1 <<\
    \ 6) - 1 ))\n  local v4=$(( (1 << 7) - 1 ))\n  for i in $(seq 0 $n); do\n    local\
    \ v0=$((v1 + v2 + v3 + v4))\n    v1=$v2\n    v2=$v3\n    v3=$v4\n    v4=$v0\n\
    \  done\n  echo $v0", "    [ $1 -le 0 ] && echo \"0\" && return\n    [ $1 -le\
    \ 1 ] && echo \"0\" && return\n    [ $1 -le 2 ] && echo \"2\" && return\n    [\
    \ $1 -le 3 ] && echo \"0\" && return\n    declare -a fibarr=( 0 0 2 0 )\n    for\
    \ (( idx=4; idx<=$1; idx++ )); do\n        fibarr[0]=${fibarr[1]}\n        fibarr[1]=${fibarr[2]}\n\
    \        fibarr[2]=${fibarr[3]}\n        fibarr[3]=$(( ${fibarr[0]} + ${fibarr[1]}\
    \ + ${fibarr[2]} + ${fibarr[3]} ))\n    done\n    echo \"${fibarr[3]}\"", "  \
    \  v_a=0\n    v_b=0\n    v_c=2\n    v_d=0\n    for i in $(seq 2 $1); do\n    \
    \    v_e=$((v_a + v_b + v_c + v_d))\n        v_a=$v_b\n        v_b=$v_c\n    \
    \    v_c=$v_d\n        v_d=$v_e\n    done\n    echo $v_e", "    if [[ ! \"$1\"\
    \ =~ ^[0-9]+$ ]]; then\n        echo \"ERROR: $1 is not an integer\" >&2\n   \
    \     return 1\n    fi\n    for (( i=0; i<=$1; i++ )); do\n        if (( i <=\
    \ 3 )); then\n            echo -n \"0 \"\n        else\n            echo -n \"\
    $(( $(fib4 \"$((i-1))\") + $(fib4 \"$((i-2))\") + $(fib4 \"$((i-3))\") + $(fib4\
    \ \"$((i-4))\") )) \"\n        fi\n    done | cut -d ' ' -f $1", '  echo $1',
  "  if [[ $1 == \"0\" ]]; then\n    echo \"0\"\n  elif [[ $1 == \"1\" ]]; then\n\
    \    echo \"0\"\n  elif [[ $1 == \"2\" ]]; then\n    echo \"2\"\n  elif [[ $1\
    \ == \"3\" ]]; then\n    echo \"0\"\n  else\n    n=\"$(($1-1))\"\n    fib4n1=\"\
    $(fib4 \"$n\")\"\n    n=\"$(($1-2))\"\n    fib4n2=\"$(fib4 \"$n\")\"\n    n=\"\
    $(($1-3))\"\n    fib4n3=\"$(fib4 \"$n\")\"\n    n=\"$(($1-4))\"\n    fib4n4=\"\
    $(fib4 \"$n\")\"\n    result=\"$(($fib4n1+$fib4n2+$fib4n3+$fib4n4))\"\n    echo\
    \ \"$result\"\n  fi", "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[\
    \ $1 -eq 1 ]]; then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo\
    \ 2\n    elif [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        local f1=0\n\
    \        local f2=0\n        local f3=2\n        local f4=0\n        local fn\n\
    \        for (( i=4; i<=$1; i++ )); do\n            fn=$(( f1 + f2 + f3 + f4 ))\n\
    \            f1=$f2\n            f2=$f3\n            f3=$f4\n            f4=$fn\n\
    \        done\n        echo $fn\n    fi", "    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n\
    \        echo \"Usage: fib4 <integer>\"\n        return 1\n    fi\n    if [ $1\
    \ -lt 0 ]; then\n        echo \"fib4(n) is undefined for n < 0\"\n        return\
    \ 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo 0\n        return 0\n   \
    \ fi\n    if [ $1 -eq 1 ]; then\n        echo 0\n        return 0\n    fi\n  \
    \  if [ $1 -eq 2 ]; then\n        echo 2\n        return 0\n    fi\n    if [ $1\
    \ -eq 3 ]; then\n        echo 0\n        return 0\n    fi\n    local n1=0 n2=0\
    \ n3=2 n4=0 n=$1\n    (( n-- ))\n    while [ $n -gt 0 ]; do\n        n4=$(( n1\
    \ + n2 + n3 + n4 ))\n        n1=$n2\n        n2=$n3\n        n3=$n4\n        ((\
    \ n-- ))\n    done\n    echo $n4", "    awk \"BEGIN {\n        a = 0;\n      \
    \  b = 0;\n        c = 2;\n        d = 0;\n        for (i = 3; i <= $1; i++) {\n\
    \            e = a + b + c + d;\n            a = b;\n            b = c;\n    \
    \        c = d;\n            d = e;\n        }\n        print d;\n    }\"", " \
    \   if [ $1 -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n     \
    \   echo 0\n    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ];\
    \ then\n        echo 0\n    else\n        n=$1\n        fn1=0\n        fn2=0\n\
    \        fn3=2\n        fn4=0\n        for (( i=4; i<=n; i++ )); do\n        \
    \    fn4=$(( fn1 + fn2 + fn3 + fn4 ))\n            fn1=$fn2\n            fn2=$fn3\n\
    \            fn3=$fn4\n        done\n        echo $fn4\n    fi", "    if [ $1\
    \ -eq 0 ]; then\n        echo 0\n    elif [ $1 -eq 1 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 2 ]; then\n        echo 2\n    elif [ $1 -eq 3 ]; then\n  \
    \      echo 0\n    else\n        # I have no idea how many digits is big enough.\n\
    \        local n_1=$(echo \"2\" | bc -l)\n        local n_2=$(echo \"0\" | bc\
    \ -l)\n        local n_3=$(echo \"0\" | bc -l)\n        local n_4=$(echo \"0\"\
    \ | bc -l)\n        local n_5=$(echo \"0\" | bc -l)\n        for ((i=4; i<=$1;\
    \ i++)); do\n            n_5=$(echo \"$n_1 + $n_2 + $n_3 + $n_4\" | bc -l)\n \
    \           n_4=$n_3\n            n_3=$n_2\n            n_2=$n_1\n           \
    \ n_1=$n_5\n        done\n        echo $n_5\n    fi", "    local f0=0\n    local\
    \ f1=0\n    local f2=2\n    local f3=0\n    local f4=4\n    local n=$1\n    for\
    \ i in $(seq $n); do\n        if [ $n -gt 3 ]; then\n            f0=$f1\n    \
    \        f1=$f2\n            f2=$f3\n            f3=$f4\n            f4=$((f4+f3+f2+f1))\n\
    \        fi\n    done\n    echo $f4", "  local a=0 b=0 c=2 d=0;\n  for (( i=1;\
    \ i <= $1; i++ )); do\n    a=$b;\n    b=$c;\n    c=$d;\n    d=$((a+b+c));\n  done\n\
    \  echo $a;", "\t# Please write your code here\n\ta=0; b=0; c=2; d=0; tmp=0\n\t\
    for ((i=1; i<=$1; i++)); do\n\t\ttmp=$(($a+$b+$c+$d))\n\t\ta=$b; b=$c; c=$d; d=$tmp\n\
    \tdone\n\techo $a", "    [ $1 -le 0 ] && echo 0 && return\n    [ $1 -le 1 ] &&\
    \ echo 0 && return\n    [ $1 -le 2 ] && echo 2 && return\n    [ $1 -le 3 ] &&\
    \ echo 0 && return\n    f0=0; f1=0; f2=2; f3=0; fn=0\n    for ((i=4; i<=$1; i++));\
    \ do\n        f0=$f1; f1=$f2; f2=$f3; f3=$fn\n        fn=$((f0+f1+f2+f3))\n  \
    \  done\n    echo $fn", "    # ** INSERT CODE HERE **\n    # Write a function\
    \ to compute fib4(\"$1\") without using recursion. \n    # For example, for fib4(\"\
    5\"), the function should return \"4\".\n    # You may not use a loop, or the\
    \ keyword recursion, or the keyword\n    # recursive, or any word that is related\
    \ to them, in your function.", "  n=$1\n  [[ n -le 3 ]] && echo 0 && return\n\
    \  [[ n -eq 4 ]] && echo 2 && return\n  nums=$(seq 0 $(($n-1)))\n  # Compute fib4(n-1),\
    \ fib4(n-2), fib4(n-3), fib4(n-4).\n  # Each is computed in the same way.\n  #\
    \ For each of these recursively compute fib4(n-1), fib4(n-2), fib4(n-3), fib4(n-4)\n\
    \  # up to fib4(0), fib4(1), fib4(2), fib4(3).\n  # That is fib4(n-4) = 0, fib4(n-3)\
    \ = 0, fib4(n-2) = 2, fib4(n-1) = 0.\n  # fib4(n) is then fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\n  fib4() {\n    n=$1\n    [[ n -le 3 ]] && echo 0\
    \ && return\n    [[ n -eq 4 ]] && echo 2 && return\n    echo $(( $(fib4 $(($n-1)))\
    \ + $(fib4 $(($n-2))) + $(fib4 $(($n-3))) + $(fib4 $(($n-4))) ))\n  }\n  nums_fib4=$(map\
    \ fib4 \"$nums\")\n  echo $nums_fib4 | cut -d ' ' -f $n", "    if [ \"$1\" -eq\
    \ \"0\" ]; then\n        echo \"0\"\n    elif [ \"$1\" -eq \"1\" ]; then\n   \
    \     echo \"0\"\n    elif [ \"$1\" -eq \"2\" ]; then\n        echo \"2\"\n  \
    \  elif [ \"$1\" -eq \"3\" ]; then\n        echo \"0\"\n    else\n        n=3\n\
    \        fib3=0\n        fib2=2\n        fib1=0\n        fib=2\n        while\
    \ [ \"$n\" -lt \"$1\" ]; do\n            fib3=$fib2\n            fib2=$fib1\n\
    \            fib1=$fib\n            fib=$((fib3+fib2+fib1+fib))\n            n=$((n+1))\n\
    \        done\n        echo \"$fib\"\n    fi", "\tn=$1\n\tif [[ $n -eq 0 ]]; then\n\
    \t\techo \"0\"\n\telif [[ $n -eq 1 ]]; then\n\t\techo \"0\"\n\telif [[ $n -eq\
    \ 2 ]]; then\n\t\techo \"2\"\n\telif [[ $n -eq 3 ]]; then\n\t\techo \"0\"\n\t\
    else\n\t\ta=0\n\t\tb=0\n\t\tc=2\n\t\td=0\n\t\tfor i in $(seq 4 $n); do\n\t\t\t\
    let \"a = b\"\n\t\t\tlet \"b = c\"\n\t\t\tlet \"c = d\"\n\t\t\tlet \"d = a + b\
    \ + c\"\n\t\tdone\n\t\techo \"$d\"\n\tfi", "    if [[ $1 -eq 0 ]]; then\n    \
    \    echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 0\n    elif [[ $1 -eq\
    \ 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo 0\n\
    \    else\n        echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4\
    \ $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))\n    fi", "\tawk -v n=$1 'BEGIN {\
    \ print int(2*(1-exp(-n*atan(1)*4))*sin(n*atan(1)*4))}'", "\t# initialize array,\
    \ first four values of fib4\n\ta=(0 0 2 0)\n\t# it's a safe assumption that $1\
    \ is greater than 3\n\t# initialize variables\n\tn=$1\n\t# index of the array,\
    \ remember that the array starts at 0\n\ti=0\n\t# $(($n - 4)) is the number of\
    \ loops to perform\n\twhile [ $i -lt $(($n - 4)) ]; do\n\t\t# a is the array,\
    \ b is the n-th term, c is the n-1 term, d is the n-2 term, and e is the n-3 term\n\
    \t\t# the n-th term of the sequence is found by summing the previous four terms\n\
    \t\ta+=($((${a[${#a[@]}-1]} + ${a[${#a[@]}-2]} + ${a[${#a[@]}-3]} + ${a[${#a[@]}-4]})))\n\
    \t\t# increment the index by 1\n\t\ti=$(($i + 1))\n\tdone\n\t# return the n-th\
    \ term\n\techo ${a[$n]}", "  [[ $1 =~ ^[0-9]+$ ]] || { echo \"Non-integer arg\"\
    ; return 1; }\n  # We construct an array of the four previous values\n  # (note:\
    \ the initial values must be in reverse order).\n  declare -a nums=($(for (( i=0;\
    \ i<4; i++ )); do echo 0; done))\n  # We return the requested value.\n  # The\
    \ value is the sum of the values in the array.\n  for (( i=4; i<=$1; i++ )); do\n\
    \    # Calculate the value and add it to the beginning of the array.\n    (( nums[$i\
    \ % 4] = ${nums[0]} + ${nums[1]} + ${nums[2]} + ${nums[3]} ))\n    # Shift the\
    \ array left (actually, rotate it right).\n    nums=(${nums[@]: -3} ${nums[@]:0:1})\n\
    \  done\n  echo ${nums[0]}", '  ', "    local fib_m2 fib_m3 fib_m4 fib_m1 fib_m0\n\
    \    case $1 in\n        0) echo 0 ;;\n        1) echo 0 ;;\n        2) echo 2\
    \ ;;\n        3) echo 0 ;;\n        *)\n            fib_m2=0\n            fib_m3=0\n\
    \            fib_m4=2\n            fib_m1=0\n            fib_m0=0\n          \
    \  for i in $(seq 4 $1); do\n                ((fib_m0 = fib_m1 + fib_m2 + fib_m3\
    \ + fib_m4))\n                ((fib_m4 = fib_m3))\n                ((fib_m3 =\
    \ fib_m2))\n                ((fib_m2 = fib_m1))\n                ((fib_m1 = fib_m0))\n\
    \            done\n            echo $fib_m0\n            ;;\n    esac", "  # Keep\
    \ the last fib4 sequence\n  seq=\"0 0 2 0\"\n  # Initialize count\n  c=3\n  while\
    \ [ $c -lt $1 ]; do\n    # Update fib4 sequence\n    seq=\"$(echo $seq | sed -r\
    \ 's/^([^ ]+ [^ ]+ [^ ]+ [^ ]+).*/\\1/') $(($(echo $seq | sed -r 's/^([^ ]+).*/\\\
    1/') + $(echo $seq | sed -r 's/^[^ ]+ ([^ ]+).*/\\1/') + $(echo $seq | sed -r\
    \ 's/^[^ ]+ [^ ]+ ([^ ]+).*/\\1/') + $(echo $seq | sed -r 's/^[^ ]+ [^ ]+ [^ ]+\
    \ ([^ ]+).*/\\1/')))\"\n    # Increment count\n    c=$(($c+1))\n  done\n  # Print\
    \ the last digit of the sequence\n  echo $seq | sed -r 's/^[^ ]+ [^ ]+ [^ ]+ ([^\
    \ ]+).*/\\1/'", "    if (( $1 == 0 )); then\n        echo 0\n    elif (( $1 ==\
    \ 1 )); then\n        echo 0\n    elif (( $1 == 2 )); then\n        echo 2\n \
    \   elif (( $1 == 3 )); then\n        echo 0\n    else\n        a=0\n        b=0\n\
    \        c=2\n        d=0\n        for (( i=4; i<=$1; i++ )); do\n           \
    \ e=$(( a + b + c + d ))\n            a=$b\n            b=$c\n            c=$d\n\
    \            d=$e\n        done\n        echo $e\n    fi", "    if [[ $1 == 0\
    \ ]]; then\n        echo \"0\"\n    elif [[ $1 == 1 ]]; then\n        echo \"\
    0\"\n    elif [[ $1 == 2 ]]; then\n        echo \"2\"\n    elif [[ $1 == 3 ]];\
    \ then\n        echo \"0\"\n    else\n        value=0\n        previous=0\n  \
    \      current=2\n        second_previous=0\n        third_previous=0\n      \
    \  fourth_previous=0\n        n=2\n        while [[ $n -lt $1 ]]; do\n       \
    \     value=$(( $previous + $current + $second_previous + $third_previous + $fourth_previous\
    \ ))\n            previous=$current\n            current=$value\n            fourth_previous=$third_previous\n\
    \            third_previous=$second_previous\n            second_previous=$previous\n\
    \            n=$(( $n + 1 ))\n        done\n        echo \"$value\"\n    fi",
  "\tlocal n=$1\n\tlocal i=1\n\tlocal arr=(0 0 2 0)\n\twhile [ $i -lt $n ]; do\n\t\
    \tarr[0]=${arr[1]}\n\t\tarr[1]=${arr[2]}\n\t\tarr[2]=${arr[3]}\n\t\tarr[3]=$((\
    \ ${arr[0]} + ${arr[1]} + ${arr[2]} + ${arr[3]} ))\n\t\ti=$(( $i + 1 ))\n\tdone\n\
    \techo ${arr[3]}", "  # initialize variables\n  local n=$1\n  local fib0=0\n \
    \ local fib1=0\n  local fib2=2\n  local fib3=0\n  local fib4=0\n  local i=0\n\n\
    \  # find the index of fib4\n  for ((i=4; i<=n; i++)); do\n    fib4=$((fib3 +\
    \ fib2 + fib1 + fib0))\n    fib0=$fib1\n    fib1=$fib2\n    fib2=$fib3\n    fib3=$fib4\n\
    \  done\n\n  # return the fib4 value\n  echo $fib4", "    local fibs=$(seq 0 1\
    \ 1 4)\n    local lastIdx=$(($1-1))\n    if [ $lastIdx -lt 4 ]; then\n       \
    \ echo ${fibs[$lastIdx]}\n        return\n    fi\n    for i in $(seq 4 $lastIdx);\
    \ do\n        local sum=0\n        for j in $(seq 0 1 4); do\n            sum=$(($sum+${fibs[$j]}))\n\
    \        done\n        local temp=${fibs[0]}\n        fibs[0]=$sum\n        fibs[1]=${fibs[2]}\n\
    \        fibs[2]=${fibs[3]}\n        fibs[3]=$temp\n    done\n    echo ${fibs[0]}",
  "\tnum=$1\n\t[[ $num =~ ^[0-9]+$ ]] || { echo \"Parameter $num must be an integer\"\
    ; return 1; }\n\t[[ $num -ge 0 ]] || { echo \"Parameter $num must be greater than\
    \ or equal to 0\"; return 1; }\n\tif [ $num -eq 0 ]; then\n\t\tprintf \"0\"\n\t\
    \treturn 0\n\tfi\n\tif [ $num -eq 1 ]; then\n\t\tprintf \"0\"\n\t\treturn 0\n\t\
    fi\n\tif [ $num -eq 2 ]; then\n\t\tprintf \"2\"\n\t\treturn 0\n\tfi\n\tif [ $num\
    \ -eq 3 ]; then\n\t\tprintf \"0\"\n\t\treturn 0\n\tfi\n\tif [ $num -gt 3 ]; then\n\
    \t\tfib4_1=0\n\t\tfib4_2=0\n\t\tfib4_3=2\n\t\tfib4_4=0\n\t\tcount=4\n\t\twhile\
    \ [ $count -le $num ]; do\n\t\t\tfib4_5=$(( $fib4_1 + $fib4_2 + $fib4_3 + $fib4_4\
    \ ))\n\t\t\tfib4_1=$fib4_2\n\t\t\tfib4_2=$fib4_3\n\t\t\tfib4_3=$fib4_4\n\t\t\t\
    fib4_4=$fib4_5\n\t\t\tcount=$(( $count + 1 ))\n\t\tdone\n\t\tprintf \"$fib4_5\"\
    \n\t\treturn 0\n\tfi", "    case $1 in\n        0)\n            echo 0;;\n   \
    \     1)\n            echo 0;;\n        2)\n            echo 2;;\n        3)\n\
    \            echo 0;;\n        *)\n            let a=0\n            let b=0\n\
    \            let c=2\n            let d=0\n            i=4\n            while\
    \ [ $i -le $1 ]; do\n                let e=a+b+c+d\n                let a=b\n\
    \                let b=c\n                let c=d\n                let d=e\n \
    \               let i=i+1\n            done\n            echo $e;;\n    esac",
  "    declare -i a b c d e=\"$1\"\n    if (( e < 2 )); then\n        echo $e\n  \
    \  else\n        a=0; b=0; c=2; d=0\n        for (( i=2; i<e; i++ )); do\n   \
    \         let a=b b=c c=d d=a+b+c+d\n        done\n        echo $d\n    fi", " \
    \ if [[ \"$1\" -lt \"3\" ]]; then\n    echo \"0\"\n  elif [[ \"$1\" -eq \"3\"\
    \ ]]; then\n    echo \"2\"\n  else\n    f1=0\n    f2=0\n    f3=2\n    f4=0\n \
    \   fn=0\n    for i in $(seq 4 $1); do\n      fn=$((f1+f2+f3+f4))\n      f1=$f2\n\
    \      f2=$f3\n      f3=$f4\n      f4=$fn\n    done\n    echo \"$fn\"\n  fi",
  "  local n=\"$1\"\n  [[ \"$n\" -gt 2 ]] && local f1=0 f2=2 f3=0 f4=0\n  [[ \"$n\"\
    \ -gt 3 ]] && local f3=2\n  [[ \"$n\" -gt 4 ]] && local f4=4\n  for ((i=5; i<=n;\
    \ i++)); do\n    local f4=\"$((f1+f2+f3+f4))\"\n    local f1=\"$f2\"\n    local\
    \ f2=\"$f3\"\n    local f3=\"$f4\"\n  done\n  echo \"$f4\"", "  if [ $1 -le 3\
    \ ]; then\n    echo \"0\"\n  else\n    echo \"2\"\n  fi", "    # TODO\n    ans=\"\
    0\"\n    if [[ \"$1\" == \"1\" ]]; then\n        ans=\"0\"\n    elif [[ \"$1\"\
    \ == \"2\" ]]; then\n        ans=\"2\"\n    elif [[ \"$1\" == \"3\" ]]; then\n\
    \        ans=\"0\"\n    else\n        pre2=\"0\"\n        pre3=\"0\"\n       \
    \ pre4=\"2\"\n        pre1=\"0\"\n        let count=\"$1-3\"\n        while [[\
    \ \"$count\" != \"0\" ]]; do\n            let ans=\"$pre1+$pre2+$pre3+$pre4\"\n\
    \            pre4=\"$pre3\"\n            pre3=\"$pre2\"\n            pre2=\"$pre1\"\
    \n            pre1=\"$ans\"\n            let count=\"$count-1\"\n        done\n\
    \    fi\n    echo \"$ans\"", "\tlocal n=$1\n\tlocal n_minus_4=0\n\tlocal n_minus_3=0\n\
    \tlocal n_minus_2=2\n\tlocal n_minus_1=0\n\t\n\twhile [ $n -gt 3 ]; do\n\t\tlet\
    \ 'n_minus_4 = n_minus_3'\n\t\tlet 'n_minus_3 = n_minus_2'\n\t\tlet 'n_minus_2\
    \ = n_minus_1'\n\t\tlet 'n_minus_1 = n_minus_4 + n_minus_3 + n_minus_2 + n_minus_1'\n\
    \t\tlet 'n--'\n\tdone\n\techo $n_minus_1", "    a=0\n    b=0\n    c=2\n    d=0\n\
    \    if [ $1 -eq 0 ]; then\n        printf \"0\"\n    elif [ $1 -eq 1 ]; then\n\
    \        printf \"0\"\n    elif [ $1 -eq 2 ]; then\n        printf \"2\"\n   \
    \ elif [ $1 -eq 3 ]; then\n        printf \"0\"\n    else\n        for (( i=3;\
    \ i<=$1; i++ ))\n        do\n            d=$(($a+$b+$c))\n            a=$b\n \
    \           b=$c\n            c=$d\n        done\n        printf \"$d\"\n    fi",
  "    local n=$1\n    local a=0\n    local b=0\n    local c=2\n    local d=0\n  \
    \  local i=2\n    local tmp=0\n    if [ \"$n\" -le \"2\" ]; then\n        echo\
    \ \"$c\"\n        return\n    fi\n    while [ \"$i\" -lt \"$n\" ]; do\n      \
    \  tmp=$((a+b+c+d))\n        a=$b\n        b=$c\n        c=$d\n        d=$tmp\n\
    \        i=$((i+1))\n    done\n    echo \"$tmp\"", "  local n=$1\n  local a b\
    \ c d e f\n  a=0\n  b=0\n  c=2\n  d=0\n  e=0\n  for ((f=4; f<=n; f++)); do\n \
    \   ((d=a+b+c+d))\n    ((a=b))\n    ((b=c))\n    ((c=d))\n  done\n  echo $d",
  "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif\
    \ [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n    echo 0\n  else\n\
    \    # $1 is not 0, 1, 2, or 3\n    # answer = fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4)\n    n=3\n    fib4_last=0\n    fib4_lastlast=2\n    fib4_lastlastlast=0\n\
    \    fib4_lastlastlastlast=0\n    fib4_answer=2\n    while [ $n -lt $1 ]; do\n\
    \      # fib4_answer = fib4_last + fib4_lastlast + fib4_lastlastlast + fib4_lastlastlastlast\n\
    \      fib4_answer=$(($fib4_last + $fib4_lastlast + $fib4_lastlastlast + $fib4_lastlastlastlast))\n\
    \      fib4_lastlastlastlast=$fib4_lastlastlast\n      fib4_lastlastlast=$fib4_lastlast\n\
    \      fib4_lastlast=$fib4_last\n      fib4_last=$fib4_answer\n      n=$(($n +\
    \ 1))\n    done\n    echo $fib4_answer\n  fi", "  declare -i n=$1 i=0\n  declare\
    \ -a f\n  f[0]=0\n  f[1]=0\n  f[2]=2\n  f[3]=0\n  for((i=4;i<=n;i++)); do\n  \
    \  f[i]=${f[i-1]}+${f[i-2]}+${f[i-3]}+${f[i-4]}\n  done\n  echo ${f[n]}", "  \
    \  # Your code goes here.\n    (( $1 == 0 )) && echo 0 && return\n    (( $1 ==\
    \ 1 )) && echo 0 && return\n    (( $1 == 2 )) && echo 2 && return\n    (( $1 ==\
    \ 3 )) && echo 0 && return\n    echo $(($(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1\
    \ - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 )))))", "  seq1=0\n  seq2=0\n\
    \  seq3=2\n  seq4=0\n  fib4=\"$seq4\"\n  for ((i=1; i<=$1; i++)); do\n    fib4=$((seq1\
    \ + seq2 + seq3 + seq4))\n    seq1=$seq2\n    seq2=$seq3\n    seq3=$seq4\n   \
    \ seq4=$fib4\n  done\n  echo \"$fib4\"", "    local n=$1\n    local fib_0=0\n\
    \    local fib_1=0\n    local fib_2=2\n    local fib_3=0\n    local i=3\n    while\
    \ [[ $i -lt $n ]]; do\n        let \"fib_0=fib_1\"\n        let \"fib_1=fib_2\"\
    \n        let \"fib_2=fib_3\"\n        let \"fib_3=fib_0+fib_1+fib_2+fib_3\"\n\
    \        let \"i=i+1\"\n    done\n    if [[ $n -gt 2 ]]; then\n        echo $fib_3\n\
    \    else\n        echo $fib_2\n    fi", "  local ints=(0 0 2 0)\n  local fib_val=0\n\
    \  local input=$1\n  local i=0\n  if [ -z \"$input\" ]; then\n    return\n  fi\n\
    \  if [[ $input -eq 0 ]]; then\n    fib_val=0\n  elif [[ $input -eq 1 ]]; then\n\
    \    fib_val=0\n  elif [[ $input -eq 2 ]]; then\n    fib_val=2\n  elif [[ $input\
    \ -eq 3 ]]; then\n    fib_val=0\n  else\n    for ((i=4; i<=input; i++)); do\n\
    \      fib_val=$((ints[0] + ints[1] + ints[2] + ints[3]))\n      ints[0]=${ints[1]}\n\
    \      ints[1]=${ints[2]}\n      ints[2]=${ints[3]}\n      ints[3]=$fib_val\n\
    \    done\n  fi\n  echo $fib_val", "  local n=\"$1\"\n  local index=0\n  local\
    \ fib_1=0\n  local fib_2=0\n  local fib_3=0\n  local fib_4=0\n  local tmp=0\n\
    \  while (( index < n )); do\n    let tmp=\"fib_4\"\n    let fib_4=\"fib_1 + fib_2\
    \ + fib_3 + fib_4\"\n    let fib_1=\"fib_2\"\n    let fib_2=\"fib_3\"\n    let\
    \ fib_3=\"tmp\"\n    let index=\"index + 1\"\n  done\n  echo \"$fib_4\"", "  \
    \  local n=$1\n    local -a A=(0 0 2 0)\n    local i=4\n\n    while [[ $i -le\
    \ $n ]]; do\n        A[0]=${A[1]}\n        A[1]=${A[2]}\n        A[2]=${A[3]}\n\
    \        A[3]=$((A[0]+A[1]+A[2]+A[3]))\n        i=$((i+1))\n    done\n\n    echo\
    \ ${A[3]}", "  local a b c d e i=0\n  a=0\n  b=0\n  c=2\n  d=0\n  e=$(($1 - 4))\n\
    \  while [[ \"$e\" -gt 0 ]]; do\n    a=$b\n    b=$c\n    c=$d\n    d=$((a + b\
    \ + c + d))\n    e=$((e - 1))\n  done\n  echo \"$d\"", "    if [[ $1 -eq 0 ]];\
    \ then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 0\n    elif\
    \ [[ $1 -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n      \
    \  echo 0\n    else\n        echo $(($(fib4 $(( $1 - 1 )) ) + $(fib4 $(( $1 -\
    \ 2 )) ) + $(fib4 $(( $1 - 3 )) ) + $(fib4 $(( $1 - 4 )) )))\n    fi", "    if\
    \ [ $1 -eq 0 ]; then\n        echo \"0\"\n    elif [ $1 -eq 1 ]; then\n      \
    \  echo \"0\"\n    elif [ $1 -eq 2 ]; then\n        echo \"2\"\n    elif [ $1\
    \ -eq 3 ]; then\n        echo \"0\"\n    else\n        x=0\n        y=0\n    \
    \    z=2\n        w=0\n        n=$1\n        while [ $n -gt 3 ]; do\n        \
    \    temp=$((x+y+z+w))\n            x=$y\n            y=$z\n            z=$w\n\
    \            w=$temp\n            ((n--))\n        done\n        echo \"$temp\"\
    \n    fi", "    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n        echo \"invalid input\"\
    \n        return 1\n    fi\n    awk -v n=$1 'BEGIN {\n        if (n == 0) exit\
    \ 1;\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n     \
    \   fib4[3] = 0;\n        for (i = 4; i <= n; i++) {\n            fib4[i] = fib4[i-1]\
    \ + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        print fib4[n];\n  \
    \  }'", "  local i\n  local a=0\n  local b=0\n  local c=2\n  local d=0\n  local\
    \ m=0\n  if [ $1 -eq 0 ]; then\n    echo $a\n  elif [ $1 -eq 1 ]; then\n    echo\
    \ $b\n  elif [ $1 -eq 2 ]; then\n    echo $c\n  elif [ $1 -eq 3 ]; then\n    echo\
    \ $d\n  else\n    for ((i = 4; i <= $1; i++)); do\n      m=$((a + b + c + d))\n\
    \      a=$b\n      b=$c\n      c=$d\n      d=$m\n    done\n    echo $m\n  fi",
  "  #check if the string is all numbers\n  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n    echo\
    \ \"Input parameter is not an integer.\"\n    exit\n  fi\n  #check if the string\
    \ is negative\n  if [[ $1 -lt 0 ]]; then\n    echo \"Input parameter is not a\
    \ positive integer.\"\n    exit\n  fi\n  local fib_n_minus_1=0\n  local fib_n_minus_2=0\n\
    \  local fib_n_minus_3=2\n  local fib_n_minus_4=0\n  local fib_n=0\n  for (( i=0;\
    \ i<$1; i++ )) do\n    fib_n=$(($fib_n_minus_1 + $fib_n_minus_2 + $fib_n_minus_3\
    \ + $fib_n_minus_4))\n    fib_n_minus_4=$fib_n_minus_3\n    fib_n_minus_3=$fib_n_minus_2\n\
    \    fib_n_minus_2=$fib_n_minus_1\n    fib_n_minus_1=$fib_n\n  done\n  echo $fib_n",
  "  if [ $1 -eq 0 ]; then\n    echo 0\n  elif [ $1 -eq 1 ]; then\n    echo 0\n  elif\
    \ [ $1 -eq 2 ]; then\n    echo 2\n  elif [ $1 -eq 3 ]; then\n    echo 0\n  else\n\
    \    # $fib4[0] = 0\n    # $fib4[1] = 0\n    # $fib4[2] = 2\n    # $fib4[3] =\
    \ 0\n    # $fib4[4] = 4\n    # $fib4[5] = 8\n    # $fib4[6] = 14\n    # $fib4[7]\
    \ = 24\n    # $fib4[8] = 42\n    fib4_prev4=0\n    fib4_prev3=0\n    fib4_prev2=2\n\
    \    fib4_prev1=0\n    for (( i=4; i<$1; i++ )); do\n      fib4_n=`expr $fib4_prev1\
    \ + $fib4_prev2 + $fib4_prev3 + $fib4_prev4`\n      fib4_prev4=$fib4_prev3\n \
    \     fib4_prev3=$fib4_prev2\n      fib4_prev2=$fib4_prev1\n      fib4_prev1=$fib4_n\n\
    \    done\n    echo $fib4_n\n  fi", "# delect invalid input\n    if [[ $1 =~ ^[0-9]+$\
    \ ]]; then\n    # 0\n        if [[ $1 -eq 0 ]]; then\n            echo 0\n   \
    \ # 1\n        elif [[ $1 -eq 1 ]]; then\n            echo 0\n    # 2\n      \
    \  elif [[ $1 -eq 2 ]]; then\n            echo 2\n    # 3\n        elif [[ $1\
    \ -eq 3 ]]; then\n            echo 0\n    # >3\n        else\n            fib4_1=0\n\
    \            fib4_2=0\n            fib4_3=2\n            fib4_4=0\n          \
    \  for (( i=4; i<=$1; i++ ))\n            do\n                fib4_res=$(( fib4_1\
    \ + fib4_2 + fib4_3 + fib4_4 ))\n                fib4_1=$fib4_2\n            \
    \    fib4_2=$fib4_3\n                fib4_3=$fib4_4\n                fib4_4=$fib4_res\n\
    \            done\n            echo $fib4_res\n        fi\n    else\n        echo\
    \ \"Invalid input\"\n    fi", "    local n\n    local a b c d\n    n=$1\n    a=0\n\
    \    b=0\n    c=2\n    d=0\n    while [ \"$n\" -gt 3 ]; do\n        d=$((a+b+c))\n\
    \        a=$b\n        b=$c\n        c=$d\n        ((n--))\n    done\n    echo\
    \ $d", "    local n=$1\n    if [ $n -eq 0 ]; then\n        echo \"0\"\n    elif\
    \ [ $n -eq 1 ]; then\n        echo \"0\"\n    elif [ $n -eq 2 ]; then\n      \
    \  echo \"2\"\n    elif [ $n -eq 3 ]; then\n        echo \"0\"\n    else\n   \
    \     local a=0\n        local b=0\n        local c=2\n        local d=0\n   \
    \     for ((i=4; i<=n; i++)); do\n            let a=b\n            let b=c\n \
    \           let c=d\n            let d=a+b+c\n        done\n        echo \"$d\"\
    \n    fi", "\t# n is too large for bash's built-in math, use bc instead\n\tn=$1\n\
    \tif [ $n -eq 0 ]; then\n\t\techo 0\n\telif [ $n -eq 1 ]; then\n\t\techo 0\n\t\
    elif [ $n -eq 2 ]; then\n\t\techo 2\n\telif [ $n -eq 3 ]; then\n\t\techo 0\n\t\
    else\n\t\techo \"$(($(echo \"$(($(echo \"$(($(echo \"scale=0; $n-1\" | bc) - $(echo\
    \ \"scale=0; $n-2\" | bc))) + $(echo \"scale=0; $n-3\" | bc))) + $(echo \"scale=0;\
    \ $n-4\" | bc)))\" | bc))\"\n\tfi", "  local n=\"$1\"\n  local a=0\n  local b=0\n\
    \  local c=2\n  local d=0\n  local i=3\n  while [ $i -le $n ]; do\n    d=$(( $a\
    \ + $b + $c + $d ))\n    a=$b\n    b=$c\n    c=$d\n    i=$(( $i + 1 ))\n  done\n\
    \  echo $d", "    local n=$1\n    local fib4_0=0\n    local fib4_1=0\n    local\
    \ fib4_2=2\n    local fib4_3=0\n    local fib4_4=0\n    for (( i=4; i<=n; i++\
    \ )); do\n        fib4_4=$fib4_3\n        fib4_3=$fib4_2\n        fib4_2=$fib4_1\n\
    \        fib4_1=$fib4_0\n        fib4_0=$((fib4_1 + fib4_2 + fib4_3 + fib4_4))\n\
    \    done\n    echo $fib4_0", "    if [ $1 -eq 0 ]; then\n        echo \"0\"\n\
    \    elif [ $1 -eq 1 ]; then\n        echo \"0\"\n    elif [ $1 -eq 2 ]; then\n\
    \        echo \"2\"\n    elif [ $1 -eq 3 ]; then\n        echo \"0\"\n    else\n\
    \        f1=0\n        f2=0\n        f3=2\n        f4=0\n        for i in $(seq\
    \ 4 $1); do\n            let f5=$f1+$f2+$f3+$f4\n            f1=$f2\n        \
    \    f2=$f3\n            f3=$f4\n            f4=$f5\n        done\n        echo\
    \ $f5\n    fi", "  local n=$1\n  local i=2\n  local f[0]=0\n  local f[1]=0\n \
    \ local f[2]=2\n  local f[3]=0\n  # first use base cases\n  if [ \"$n\" -eq \"\
    0\" ]; then\n    echo 0\n  elif [ \"$n\" -eq \"1\" ]; then\n    echo 0\n  elif\
    \ [ \"$n\" -eq \"2\" ]; then\n    echo 2\n  elif [ \"$n\" -eq \"3\" ]; then\n\
    \    echo 0\n  else\n    while [ \"$i\" -lt \"$n\" ]; do\n      # n-th element\
    \ is the sum of the previous 4\n      # echo $i\n      # echo ${f[@]}\n      f[$i]=$((f[i-1]+f[i-2]+f[i-3]+f[i-4]))\n\
    \      i=$((i+1))\n    done\n    echo ${f[$((i-1))]}\n  fi", "  # Insert your\
    \ code here\n  return 0", "\tlocal a=0 b=0 c=2 d=0 n=$1\n\twhile (( n > 0 ));\
    \ do\n\t\t(( n-- ))\n\t\t(( a=b, b=c, c=d, d=a+b+c+d ))\n\tdone\n\techo $a", " \
    \ if [[ $1 -eq 0 ]]; then\n    echo \"0\"\n  elif [[ $1 -eq 1 ]]; then\n    echo\
    \ \"0\"\n  elif [[ $1 -eq 2 ]]; then\n    echo \"2\"\n  elif [[ $1 -eq 3 ]]; then\n\
    \    echo \"0\"\n  else\n    f1=0\n    f2=0\n    f3=2\n    f4=0\n    n=$1\n  \
    \  while [[ $n -gt 3 ]]; do\n      f1=$f2\n      f2=$f3\n      f3=$f4\n      f4=$(($f1\
    \ + $f2 + $f3))\n      ((n--))\n    done\n    echo \"$f4\"\n  fi", "  n=$1\n \
    \ a=0\n  b=0\n  c=2\n  d=0\n  if [[ $n == 0 ]]; then\n    echo \"0\"\n  elif [[\
    \ $n == 1 ]]; then\n    echo \"0\"\n  elif [[ $n == 2 ]]; then\n    echo \"2\"\
    \n  elif [[ $n == 3 ]]; then\n    echo \"0\"\n  else\n    for i in $(seq 4 $n);\
    \ do\n      d=$((a+b+c))\n      a=$b\n      b=$c\n      c=$d\n    done\n    echo\
    \ \"$d\"\n  fi", '  echo "set the function for fib4, next re-write the fib4 function"',
  "\tif [[ $1 -lt 0 ]]; then\n\t\treturn 1\n\tfi\n\tif [[ $1 -eq 0 ]]; then\n\t\t\
    echo 0\n\t\treturn 0\n\tfi\n\tif [[ $1 -eq 1 ]]; then\n\t\techo 0\n\t\treturn\
    \ 0\n\tfi\n\tif [[ $1 -eq 2 ]]; then\n\t\techo 2\n\t\treturn 0\n\tfi\n\tif [[\
    \ $1 -eq 3 ]]; then\n\t\techo 0\n\t\treturn 0\n\tfi\n\ta=0\n\tb=0\n\tc=2\n\td=0\n\
    \tfor (( i=4; i<=$1; i++ ))\n\tdo\n\t\te=$((a+b+c+d))\n\t\ta=$b\n\t\tb=$c\n\t\t\
    c=$d\n\t\td=$e\n\tdone\n\techo $e", "    local i fib0 fib1 fib2 fib3 fib4\n  \
    \  local -i n=$1\n    if [ $n -eq 0 ]; then\n        fib0=0\n    elif [ $n -eq\
    \ 1 ]; then\n        fib1=0\n    elif [ $n -eq 2 ]; then\n        fib2=2\n   \
    \ elif [ $n -eq 3 ]; then\n        fib3=0\n    else\n        fib0=0\n        fib1=0\n\
    \        fib2=2\n        fib3=0\n        for i in $(seq 4 $n); do\n          \
    \  fib4=$((fib0 + fib1 + fib2 + fib3))\n            fib0=$fib1\n            fib1=$fib2\n\
    \            fib2=$fib3\n            fib3=$fib4\n        done\n    fi\n    echo\
    \ $fib4", "    a=0\n    b=0\n    c=2\n    if [ $1 -eq 0 ]; then\n        echo\
    \ \"0\"\n    elif [ $1 -eq 1 ]; then\n        echo \"0\"\n    elif [ $1 -eq 2\
    \ ]; then\n        echo \"2\"\n    elif [ $1 -eq 3 ]; then\n        echo \"0\"\
    \n    else\n        n=$1\n        while [ $n -gt 3 ]; do\n            d=$((a+b+c))\n\
    \            a=$b\n            b=$c\n            c=$d\n            n=$((n-1))\n\
    \        done\n        echo \"$d\"\n    fi", "    case $1 in\n        \"1\") echo\
    \ \"0\";;\n        \"2\") echo \"2\";;\n        \"3\") echo \"0\";;\n        *)\
    \ echo $(($(fib4 $(($1-1))) + $(fib4 $(($1-2))) + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n\
    \    esac", "  local prev1=0\n  local prev2=0\n  local prev3=2\n  local prev4=0\n\
    \  local n=$1\n  local sum=0\n  let n--\n  while [ $n -gt 0 ]; do\n    sum=$((prev1\
    \ + prev2 + prev3 + prev4))\n    prev1=$prev2\n    prev2=$prev3\n    prev3=$prev4\n\
    \    prev4=$sum\n    let n--\n  done\n  echo $sum", "    local n=$1\n    if [[\
    \ $n -lt 2 ]]; then\n        echo 0\n    elif [[ $n -eq 2 ]]; then\n        echo\
    \ 2\n    else\n        local a=0\n        local b=0\n        local c=2\n     \
    \   local d\n        for (( i=3; i<=$n; i++ )); do\n            d=$(( a + b +\
    \ c ))\n            a=$b\n            b=$c\n            c=$d\n        done\n \
    \       echo $d\n    fi", "    if [[ $1 -le 3 ]]; then\n        echo 0\n    elif\
    \ [[ $1 -eq 4 ]]; then\n        echo 2\n    else\n        num1=0\n        num2=0\n\
    \        num3=0\n        num4=2\n        for (( i=5; i<=$1; i++)); do\n      \
    \      num5=$((num1+num2+num3+num4))\n            num1=$num2\n            num2=$num3\n\
    \            num3=$num4\n            num4=$num5\n        done\n        echo $num5\n\
    \    fi", "    case $1 in\n        0)\n            echo 0;;\n        1)\n    \
    \        echo 0;;\n        2)\n            echo 2;;\n        3)\n            echo\
    \ 0;;\n        *)\n            echo \"$(($(fib4 \"$(($1-1))\") + $(fib4 \"$(($1-2))\"\
    ) + $(fib4 \"$(($1-3))\") + $(fib4 \"$(($1-4))\")))\";;\n    esac", "  # TODO:\
    \ Your code here\n  echo \"0\"", '    echo "TODO"', "    local n=$1\n    local\
    \ n4 n3 n2 n1\n    n4=0\n    n3=0\n    n2=2\n    n1=0\n    if [[ $n -eq 0 ]];\
    \ then\n        echo $n4\n    elif [[ $n -eq 1 ]]; then\n        echo $n3\n  \
    \  elif [[ $n -eq 2 ]]; then\n        echo $n2\n    elif [[ $n -eq 3 ]]; then\n\
    \        echo $n1\n    else\n        for ((i=4; i<=n; i++)); do\n            local\
    \ tmp=$n1\n            n1=$n2\n            n2=$n3\n            n3=$n4\n      \
    \      n4=$((n1+n2+n3+n4))\n        done\n        echo $n4\n    fi", "  \n  if\
    \ [ $1 -eq 0 ]; then\n    echo \"0\"\n  elif [ $1 -eq 1 ]; then\n    echo \"0\"\
    \n  elif [ $1 -eq 2 ]; then\n    echo \"2\"\n  elif [ $1 -eq 3 ]; then\n    echo\
    \ \"0\"\n  else\n    counter=$(( $1 - 3 ))\n    accumulator=0\n    fib4_prev_prev=0\n\
    \    fib4_prev=0\n    fib4_next=2\n    while [ $counter -gt 0 ]; do\n      accumulator=$((\
    \ $fib4_prev_prev + $fib4_prev + $fib4_next ))\n      fib4_prev_prev=$fib4_prev\n\
    \      fib4_prev=$fib4_next\n      fib4_next=$accumulator\n      counter=$(( $counter\
    \ - 1 ))\n    done\n    echo \"$accumulator\"\n  fi\n", "    local n=$1\n    local\
    \ a=0\n    local b=0\n    local c=2\n    local d=0\n    local i=3\n    local temp=0\n\
    \    if [ $n -lt 3 ]; then\n        echo \"$a\"\n    else\n        while [ $i\
    \ -le $n ]; do\n            let temp=a+b+c+d\n            let a=b\n          \
    \  let b=c\n            let c=d\n            let d=temp\n            let i=i+1\n\
    \        done\n        echo \"$temp\"\n    fi", "    if [ $1 -le 3 ]; then\n \
    \       echo $(( $1 % 4 ))\n    else\n        local n=$(( $1 - 4 ))\n        local\
    \ a0=0\n        local a1=0\n        local a2=2\n        local a3=0\n        local\
    \ an\n        while [ $n -gt 0 ]; do\n            an=$(( $a0 + $a1 + $a2 + $a3\
    \ ))\n            let a0=$a1\n            let a1=$a2\n            let a2=$a3\n\
    \            let a3=$an\n            let n-=1\n        done\n        echo $an\n\
    \    fi", "  local -a fib4=()\n  local n=$1\n  if [[ $n -lt 4 ]]; then\n    echo\
    \ \"$n\"\n    return\n  fi\n  fib4[0]=0\n  fib4[1]=0\n  fib4[2]=2\n  fib4[3]=0\n\
    \  for i in $(seq 4 $n); do\n    fib4[$i]=$(( ${fib4[$(($i-1))]} + ${fib4[$(($i-2))]}\
    \ + ${fib4[$(($i-3))]} + ${fib4[$(($i-4))]} ))\n  done\n  echo \"${fib4[$n]}\"",
  "  if [ $1 -lt 2 ]; then\n    echo 0\n  elif [ $1 -eq 2 ]; then\n    echo 2\n  else\n\
    \    if [ -n \"$2\" ]; then\n      n_1=$2\n    else\n      n_1=0\n    fi\n   \
    \ if [ -n \"$3\" ]; then\n      n_2=$3\n    else\n      n_2=0\n    fi\n    if\
    \ [ -n \"$4\" ]; then\n      n_3=$4\n    else\n      n_3=2\n    fi\n    if [ -n\
    \ \"$5\" ]; then\n      n_4=$5\n    else\n      n_4=0\n    fi\n    if [ $1 -lt\
    \ 5 ]; then\n      echo $((n_1 + n_2 + n_3 + n_4))\n    else\n      fib4 $(( $1\
    \ - 1 )) $((n_1 + n_2 + n_3 + n_4)) $n_1 $n_2 $n_3\n    fi\n  fi", "\tif [ $1\
    \ -eq 0 ]; then\n\t\techo \"0\"\n\telif [ $1 -eq 1 ]; then\n\t\techo \"0\"\n\t\
    elif [ $1 -eq 2 ]; then\n\t\techo \"2\"\n\telif [ $1 -eq 3 ]; then\n\t\techo \"\
    0\"\n\telse\n\t\ta=0\n\t\tb=0\n\t\tc=2\n\t\td=0\n\t\tfor (( i=4; i<=$1; i++ ));\
    \ do\n\t\t\tsum=$(( a + b + c + d ))\n\t\t\ta=$b\n\t\t\tb=$c\n\t\t\tc=$d\n\t\t\
    \td=$sum\n\t\tdone\n\t\techo \"$sum\"\n\tfi", '    echo "not implemented"', " \
    \   a=0\n    b=0\n    c=2\n    d=0\n    n=$1\n    if [[ $n -lt 3 ]]; then\n  \
    \      echo \"0\"\n    elif [[ $n -eq 3 ]]; then\n        echo \"2\"\n    else\n\
    \        for (( i=4; i<=n; i++ )); do\n            d=$((a+b+c))\n            a=$b\n\
    \            b=$c\n            c=$d\n        done\n        echo \"$d\"\n    fi",
  "    n=$1\n    arr=(0 0 2 0 0 0)\n    for (( i=4; i<=n; i++ ))\n    do\n\tarr[$i]=$((arr[i-1]+arr[i-2]+arr[i-3]+arr[i-4]))\n\
    \    done\n    echo ${arr[$n]}", "    if [ $1 -eq 0 ]; then\n        echo 0\n\
    \    elif [ $1 -eq 1 ]; then\n        echo 0\n    elif [ $1 -eq 2 ]; then\n  \
    \      echo 2\n    elif [ $1 -eq 3 ]; then\n        echo 0\n    else\n       \
    \ echo $(($(fib4 $(($1-1))) + $(fib4 $(($1-2))) + $(fib4 $(($1-3))) + $(fib4 $(($1-4)))))\n\
    \    fi", "  # Do not use recursion\n  old_ifs=$IFS\n  IFS=\",\"\n  for i in $(seq\
    \ 4 $1); do\n    echo $(( $(fib4 \"$((i-1))\") + $(fib4 \"$((i-2))\") + $(fib4\
    \ \"$((i-3))\") + $(fib4 \"$((i-4))\") ))\n  done\n  IFS=$old_ifs", "    cur=0\n\
    \    for (( c=0; c<=1000000; c++ ))\n    do\n        if [ $c -eq 0 ]\n       \
    \ then\n            fib[$c]=0\n        elif [ $c -eq 1 ]\n        then\n     \
    \       fib[$c]=0\n        elif [ $c -eq 2 ]\n        then\n            fib[$c]=2\n\
    \        elif [ $c -eq 3 ]\n        then\n            fib[$c]=0\n        else\n\
    \            fib[$c]=$((fib[$c-1]+fib[$c-2]+fib[$c-3]+fib[$c-4]))\n        fi\n\
    \        #echo \"c=$c and fib=$((${fib[$c]}))\"\n        #echo \"c=$c and fib4=$((${fib[$c]}))\"\
    \n        if [ $c -eq $1 ]\n        then\n            cur=${fib[$c]}\n       \
    \     break\n        fi\n    done\n    echo $cur", "  local a=0\n  local b=0\n\
    \  local c=2\n  local d=0\n  local i=0\n  local n=$1\n  if [ $n -eq 0 ]; then\n\
    \    echo \"0\"\n  elif [ $n -eq 1 ]; then\n    echo \"0\"\n  elif [ $n -eq 2\
    \ ]; then\n    echo \"2\"\n  elif [ $n -eq 3 ]; then\n    echo \"0\"\n  else\n\
    \    for ((i=4; i<=n; i++)); do\n      d=$(( a + b + c ))\n      a=$b\n      b=$c\n\
    \      c=$d\n    done\n    echo \"$d\"\n  fi", "  if [ $1 -eq \"0\" ]; then\n\
    \    echo \"0\"\n  elif [ $1 -eq \"1\" ]; then\n    echo \"0\"\n  elif [ $1 -eq\
    \ \"2\" ]; then\n    echo \"2\"\n  elif [ $1 -eq \"3\" ]; then\n    echo \"0\"\
    \n  else\n    echo \"###\"\n  fi", "  local -i i=1\n  local -i f0=0\n  local -i\
    \ f1=0\n  local -i f2=2\n  local -i f3=0\n  local -i f4=$((f0 + f1 + f2 + f3))\n\
    \  local -i n=$1\n  while (( i < n )); do\n    f0=$f1\n    f1=$f2\n    f2=$f3\n\
    \    f3=$f4\n    f4=$((f0 + f1 + f2 + f3))\n    (( i += 1 ))\n  done\n  echo \"\
    $f4\"", "  if [ $1 -le 3 ]; then echo $((2 ** $1)); else\n    declare -a a=(0\
    \ 0 2 0)\n    for i in $(seq 5 $1); do\n      a[0]=${a[1]}\n      a[1]=${a[2]}\n\
    \      a[2]=${a[3]}\n      a[3]=$((a[0] + a[1] + a[2] + a[3]))\n    done\n   \
    \ echo ${a[3]}\n  fi", "  local a=0\n  local b=0\n  local c=2\n  local d=0\n \
    \ while [ $1 -gt 3 ]; do\n    ((d=a+b+c))\n    ((a=b))\n    ((b=c))\n    ((c=d))\n\
    \    ((1--))\n  done\n  echo $d", "    if [[ \"$1\" -lt 4 ]]; then\n        echo\
    \ \"0\"\n    else\n        a=0\n        b=0\n        c=2\n        d=0\n      \
    \  e=0\n        while [[ \"$1\" -gt 4 ]]; do\n            e=$((a+b+c+d))\n   \
    \         a=$b\n            b=$c\n            c=$d\n            d=$e\n       \
    \     let \"1--\"\n        done\n        echo \"$e\"\n    fi", "    local count=$1\n\
    \    local fib4_prev_prev_prev=\"0\"\n    local fib4_prev_prev=\"0\"\n    local\
    \ fib4_prev=\"2\"\n    local fib4_curr=\"\"\n    if [ $count -eq 0 ]; then\n \
    \       fib4_curr=\"0\"\n    elif [ $count -eq 1 ]; then\n        fib4_curr=\"\
    0\"\n    elif [ $count -eq 2 ]; then\n        fib4_curr=\"2\"\n    elif [ $count\
    \ -eq 3 ]; then\n        fib4_curr=\"0\"\n    else\n        for i in $(seq 4 $count);\
    \ do\n            fib4_curr=$((fib4_prev + fib4_prev_prev + fib4_prev_prev_prev))\n\
    \            fib4_prev_prev_prev=$fib4_prev_prev\n            fib4_prev_prev=$fib4_prev\n\
    \            fib4_prev=$fib4_curr\n        done\n    fi\n    echo $fib4_curr",
  "  a=0; b=0; c=2; d=0; e=0;\n  for ((i=0; i<$1; i++)); do\n    e=$((a+b+c+d))\n\
    \    a=$b; b=$c; c=$d; d=$e;\n  done\n  echo $a", "    fib4_result[0]=0\n    fib4_result[1]=0\n\
    \    fib4_result[2]=2\n    fib4_result[3]=0\n    i=4\n    while [ $i -le $1 ]\n\
    \    do\n        # fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    \        fib4_result[$i]=$((${fib4_result[$(($i-1))]} + ${fib4_result[$(($i-2))]}\
    \ + ${fib4_result[$(($i-3))]} + ${fib4_result[$(($i-4))]}))\n        let i++\n\
    \    done\n    echo ${fib4_result[$1]}", "  # last four elements\n  local -a a=(0\
    \ 0 2 0)\n  local a0 a1 a2 a3\n  local i\n  if [ $1 -le 0 ]; then\n    echo 0\n\
    \  elif [ $1 -le 3 ]; then\n    echo ${a[$1]}\n  else\n    for ((i=4; i<=${1};\
    \ i++)); do\n      # rotate\n      a0=${a[0]}\n      a1=${a[1]}\n      a2=${a[2]}\n\
    \      a3=${a[3]}\n      a[0]=$((a0+a1+a2+a3))\n      a[1]=$a0\n      a[2]=$a1\n\
    \      a[3]=$a2\n    done\n    echo ${a[0]}\n  fi", "  a=0;b=0;c=2;d=0;e=0;i=0\n\
    \  f=$1\n  while [ $i -lt $f ]\n  do\n    e=$(( $a + $b + $c + $d ))\n    a=$b;b=$c;c=$d;d=$e\n\
    \    i=$(( $i + 1 ))\n  done\n  echo $e", "    let \"n = $1\"\n    let \"a = 0\"\
    \n    let \"b = 0\"\n    let \"c = 2\"\n    let \"d = 0\"\n    for (( i=0; i<$n;\
    \ i++ )); do\n        let \"e = a + b + c + d\"\n        let \"a = b\"\n     \
    \   let \"b = c\"\n        let \"c = d\"\n        let \"d = e\"\n    done\n  \
    \  echo \"$e\"", "  let i=0\n  let j=0\n  let k=2\n  let l=0\n  let n=$1\n  for\
    \ ((a=1; a <= n-3; a++))\n  do\n    let l=j+k+i\n    let i=j\n    let j=k\n  \
    \  let k=l\n  done\n  echo $l", "        local -i a=0 b=0 c=2 d=0\n        while\
    \ [ \"$1\" -gt 0 ]; do\n                let d=a+b+c\n                let a=b\n\
    \                let b=c\n                let c=d\n                let --1\n \
    \       done\n        echo \"$d\"", "    if (($1<=0)); then\n        echo 0\n\
    \    elif (($1<=1)); then\n        echo 0\n    elif (($1<=2)); then\n        echo\
    \ 2\n    elif (($1<=3)); then\n        echo 0\n    else\n        fib1=0\n    \
    \    fib2=0\n        fib3=2\n        fib4=0\n        count=4\n        while (($count<=$1));\
    \ do\n            fib5=$((fib1+fib2+fib3+fib4))\n            fib1=$fib2\n    \
    \        fib2=$fib3\n            fib3=$fib4\n            fib4=$fib5\n        \
    \    count=$((count+1))\n        done\n        echo $fib5\n    fi", "    fib4_zero()\
    \ {\n        echo 0\n    }\n    fib4_one() {\n        echo 0\n    }\n    fib4_two()\
    \ {\n        echo 2\n    }\n    fib4_three() {\n        echo 0\n    }\n    fib4_four()\
    \ {\n        echo 6\n    }\n    fib4_five() {\n        echo 4\n    }\n    fib4_six()\
    \ {\n        echo 8\n    }\n    fib4_seven() {\n        echo 14\n    }\n    fib4_eight()\
    \ {\n        echo 24\n    }\n    fib4_nine() {\n        echo 42\n    }\n    fib4_ten()\
    \ {\n        echo 70\n    }\n    fib4_eleven() {\n        echo 118\n    }\n  \
    \  fib4_twelve() {\n        echo 196\n    }\n    fib4_thirteen() {\n        echo\
    \ 322\n    }\n    fib4_fourteen() {\n        echo 528\n    }\n    fib4_fifteen()\
    \ {\n        echo 858\n    }\n    fib4_sixteen() {\n        echo 1402\n    }\n\
    \    fib4_seventeen() {\n        echo 2290\n    }\n    fib4_eighteen() {\n   \
    \     echo 3778\n    }\n    fib4_nineteen() {\n        echo 6176\n    }\n    fib4_twenty()\
    \ {\n        echo 10154\n    }\n    fib4_twentyone() {\n        echo 16630\n \
    \   }\n    fib4_twentytwo() {\n        echo 27184\n    }\n    fib4_twentythree()\
    \ {\n        echo 44414\n    }\n    fib4_twentyfour() {\n        echo 72598\n\
    \    }\n    fib4_twentyfive() {\n        echo 118792\n    }\n    fib4_twentysix()\
    \ {\n        echo 194390\n    }\n    fib4_twentyseven() {\n        echo 317182\n\
    \    }\n    fib4_twentyeight() {\n        echo 511572\n    }\n    fib4_twentynine()\
    \ {\n        echo 828754\n    }\n    fib4_thirty() {\n        echo", "    local\
    \ -i n=$1\n    local -i a=$((n-1))\n    local -i b=$((n-2))\n    local -i c=$((n-3))\n\
    \    local -i d=$((n-4))\n    local -i f1=1\n    local -i f2=1\n    local -i f3=2\n\
    \    local -i f4=2\n    local -i tmp\n    if (($n < 4)); then\n        echo $((n*n))\n\
    \        return\n    fi\n    while ((a > 0)); do\n        ((a % 2 == 0)) && ((f1\
    \ *= ((f1+f2)%10)))\n        ((b % 2 == 0)) && ((f2 *= ((f1+f2)%10)))\n      \
    \  ((c % 2 == 0)) && ((f3 *= ((f3+f4)%10)))\n        ((d % 2 == 0)) && ((f4 *=\
    \ ((f3+f4)%10)))\n        ((a /= 2))\n        ((b /= 2))\n        ((c /= 2))\n\
    \        ((d /= 2))\n        tmp=$f1\n        f1=$(((f1+f2)%10))\n        f2=$(((tmp+f2)%10))\n\
    \        tmp=$f3\n        f3=$(((f3+f4)%10))\n        f4=$(((tmp+f4)%10))\n  \
    \  done\n    echo $(((f1+f2+f3+f4)%10))", "    # Write your code here\n    :",
  "    if [ $1 -lt 2 ]; then\n        echo 0\n    elif [ $1 -eq 2 ]; then\n      \
    \  echo 2\n    else\n        # Use tail call optimization to efficiently compute\
    \ the fib4 number sequence\n        # Please explain how your optimization works.\n\
    \        #\n        # The fib4() function is recursive.  Recursion requires storing\
    \ each recursive call on the stack,\n        # and this stack can quickly grow\
    \ large (e.g. fib4(n-2) to fib4(n) must each be stored on the stack).\n      \
    \  # Therefore, we introduce tail call optimization.  Tail call optimization is\
    \ a mechanism where we\n        # use iteration instead of recursion, and we don't\
    \ store the calls on the stack (e.g. only the current\n        # function call\
    \ is stored on the stack).  This can dramatically reduce the stack usage and will\
    \ reduce\n        # the chance of a stack overflow.\n        #\n        # The\
    \ fib4() function is recursive because it calls itself in the fib4(n-2) to fib4(n)\
    \ calls.  To use\n        # tail call optimization, we must change the recursive\
    \ calls to iterative calls.  To do this, we\n        # introduce variables for\
    \ each of the recursive calls and use them to compute the next value in the sequence.\n\
    \        # Once we've computed the next value, we update the current value.  We\
    \ then loop until we've reached the\n        # iteration limit.  In this case,\
    \ we want to compute the n-th element of the fib4 number sequence, so we\n   \
    \     # loop until the iteration count is equal to n.\n        local fib4_1=0\n\
    \        local fib4_2=0\n        local fib4_3=2\n        local fib4_4=0\n    \
    \    local count=2\n        while [ $count -lt $1 ]; do\n            fib4_4=$(($fib4_1\
    \ + $fib4_2 + $fib4_3 + $fib4_4))\n            fib4_1=$fib4_2\n            fib4_2=$fib4_3\n\
    \            fib4_3=$fib4_4\n            count=$(($count + 1))\n        done\n\
    \        echo $fib4_4\n    fi", '  # YOUR CODE HERE', "\tif [ $1 -eq 0 ]; then\n\
    \t\techo 0\n\telif [ $1 -eq 1 ]; then\n\t\techo 0\n\telif [ $1 -eq 2 ]; then\n\
    \t\techo 2\n\telif [ $1 -eq 3 ]; then\n\t\techo 0\n\telse\n\t\tn=$(($1-4))\n\t\
    \tfib4=$(($(fib4 $n)+$(fib4 $(($n+1)))+$(fib4 $(($n+2)))+$(fib4 $(($n+3)))))\n\
    \t\techo $fib4\n\tfi", "    a=0\n    b=0\n    c=2\n    d=0\n    n=$1\n    while\
    \ [[ $n -gt 3 ]]; do\n        a=$b\n        b=$c\n        c=$d\n        d=$((\
    \ a + b + c + d ))\n        n=$(( n - 1 ))\n    done\n    echo $d", "\tlocal i=\"\
    ${1}\"\n\tlocal n=0\n\tlocal n1=0\n\tlocal n2=2\n\tlocal n3=0\n\tlocal n4=0\n\t\
    while [[ \"${i}\" -gt 3 ]]; do\n\t\tn4=\"${n3}\"\n\t\tn3=\"${n2}\"\n\t\tn2=\"\
    ${n1}\"\n\t\tn1=\"${n}\"\n\t\tn=$(( n1 + n2 + n3 + n4 ))\n\t\ti=$(( i - 1 ))\n\
    \tdone\n\techo \"${n}\"", "    if [[ $1 -le 2 ]]; then\n        echo $1\n    elif\
    \ [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        echo $(( $(fib4 $((\
    \ $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 -\
    \ 4 ))) ))\n    fi", "    local -a ary\n    local n=$1\n    ary[0]=0\n    ary[1]=0\n\
    \    ary[2]=2\n    ary[3]=0\n    # set elements in ary array to their correct\
    \ values\n    for (( i=4; i<=n; i++ )); do\n        ary[i]=$(( ${ary[i-1]} + ${ary[i-2]}\
    \ + ${ary[i-3]} + ${ary[i-4]} ))\n    done\n    echo ${ary[n]}", "  local fib4_N=\"\
    $1\"\n  local fib4_A=\"0\"\n  local fib4_B=\"0\"\n  local fib4_C=\"2\"\n  local\
    \ fib4_D=\"0\"\n  local fib4_F=\"0\"\n  local fib4_N_LESS_1=\"$((fib4_N-1))\"\n\
    \  local fib4_N_LESS_2=\"$((fib4_N-2))\"\n  local fib4_N_LESS_3=\"$((fib4_N-3))\"\
    \n  local fib4_N_LESS_4=\"$((fib4_N-4))\"\n  while [ \"$fib4_N_LESS_4\" -gt \"\
    0\" ]; do\n    fib4_F=\"$((fib4_A+fib4_B+fib4_C+fib4_D))\"\n    fib4_A=\"$fib4_B\"\
    \n    fib4_B=\"$fib4_C\"\n    fib4_C=\"$fib4_D\"\n    fib4_D=\"$fib4_F\"\n   \
    \ fib4_N_LESS_1=\"$((fib4_N_LESS_1-1))\"\n    fib4_N_LESS_2=\"$((fib4_N_LESS_2-1))\"\
    \n    fib4_N_LESS_3=\"$((fib4_N_LESS_3-1))\"\n    fib4_N_LESS_4=\"$((fib4_N_LESS_4-1))\"\
    \n  done\n  echo \"$fib4_F\"", "  [ \"$#\" -ne 1 ] && return\n\n  [ \"$1\" -eq\
    \ 0 ] && echo 0 && return\n  [ \"$1\" -eq 1 ] && echo 0 && return\n  [ \"$1\"\
    \ -eq 2 ] && echo 2 && return\n  [ \"$1\" -eq 3 ] && echo 0 && return\n\n  # Sum\
    \ of numbers up to n terms\n  sum=0\n  # Initializing the first three terms\n\
    \  term1=0\n  term2=0\n  term3=2\n  term4=0\n\n  # Calculating the value of the\
    \ fourth term and sum\n  # of first four terms simultaneously\n  echo $(( sum=$term1+$term2+$term3+$term4\
    \ ))\n  echo $(( term1=$term2 ))\n  echo $(( term2=$term3 ))\n  echo $(( term3=$term4\
    \ ))\n  echo $(( term4=$sum ))\n\n  # Updating values\n  for (( i=4; i<$1; i++\
    \ ))\n  do\n    echo $(( sum=$term1+$term2+$term3+$term4 ))\n    echo $(( term1=$term2\
    \ ))\n    echo $(( term2=$term3 ))\n    echo $(( term3=$term4 ))\n    echo $((\
    \ term4=$sum ))\n  done\n  echo $sum", "\tnum1=0\n\tnum2=0\n\tnum3=2\n\tnum4=0\n\
    \tif [ $1 -lt 0 ]; then\n\t\tprintf \"%s\" \"Please enter a non-negative number\"\
    \n\t\treturn 1\n\telif [ $1 -eq 0 ]; then\n\t\tprintf \"%s\" \"0\"\n\t\treturn\
    \ 0\n\telif [ $1 -eq 1 ]; then\n\t\tprintf \"%s\" \"0\"\n\t\treturn 0\n\telif\
    \ [ $1 -eq 2 ]; then\n\t\tprintf \"%s\" \"2\"\n\t\treturn 0\n\telif [ $1 -eq 3\
    \ ]; then\n\t\tprintf \"%s\" \"0\"\n\t\treturn 0\n\telse\n\t\tfor i in $(seq 4\
    \ $1); do\n\t\t\tnum4=$((num1+num2+num3))\n\t\t\tnum1=$num2\n\t\t\tnum2=$num3\n\
    \t\t\tnum3=$num4\n\t\tdone\n\t\tprintf \"%s\" \"$num4\"\n\t\treturn 0\n\tfi",
  "    if [ $1 -lt 2 ]; then\n        echo 0\n    elif [ $1 -eq 2 ]; then\n      \
    \  echo 2\n    else\n        temp=$(($1-4))\n        total=$(fib4 \"$temp\")\n\
    \        for i in {1..3}; do\n            temp=$(($1-$i))\n            total=$(($total+$(fib4\
    \ \"$temp\")))\n        done\n        echo $total\n    fi", "    if [[ $1 -eq\
    \ 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 0\n\
    \    elif [[ $1 -eq 2 ]]; then\n        echo 2\n    elif [[ $1 -eq 3 ]]; then\n\
    \        echo 0\n    else\n        i=3\n        a=0\n        b=0\n        c=2\n\
    \        d=0\n        while [[ $i -lt $1 ]]; do\n            e=$(($a + $b + $c\
    \ + $d))\n            a=$b\n            b=$c\n            c=$d\n            d=$e\n\
    \            i=$(($i + 1))\n        done\n        echo $e\n    fi", "  previous=(0\
    \ 0 2 0)\n  for (( i=4; i<=$1; i++ )); do\n    current=$(( ${previous[3]} + ${previous[2]}\
    \ + ${previous[1]} + ${previous[0]} ))\n    previous[0]=${previous[1]}\n    previous[1]=${previous[2]}\n\
    \    previous[2]=${previous[3]}\n    previous[3]=$current\n  done\n  echo ${previous[3]}",
  "  # Prints Fibonacci number at index $1\n  # I'm using a temporary array here called\
    \ \"_fib\", to hold the sequence of fibonacci numbers\n  _fib=(0 0 2 0)\n  # Loop\
    \ through each index of the Fibonacci sequence and update the appropriate index\
    \ in the temporary array\n  for ((i=4; i<=$1; i++)); do\n    _fib[$i]=$((_fib[i-1]+_fib[i-2]+_fib[i-3]+_fib[i-4]))\n\
    \  done\n  # Print the Fibonacci number at index $1\n  echo ${_fib[$1]}", "  \
    \  if [[ $1 -lt 0 ]]; then\n        echo \"\"\n        return\n    fi\n    if\
    \ [[ $1 -lt 3 ]]; then\n        echo \"0\"\n        return\n    fi\n    if [[\
    \ $1 -eq 3 ]]; then\n        echo \"2\"\n        return\n    fi\n    a=\"0\"\n\
    \    b=\"0\"\n    c=\"2\"\n    d=\"0\"\n    for(( i=4; i<=$1; i++ )); do\n   \
    \     d=$(( $a + $b + $c + $d ))\n        a=$b\n        b=$c\n        c=$d\n \
    \   done\n    echo \"$d\"", "  local a b c d temp n\n  a=0\n  b=0\n  c=2\n  d=0\n\
    \  n=$1\n  for ((i=4; i<=n; i++)); do\n    temp=$((a+b+c+d))\n    a=$b\n    b=$c\n\
    \    c=$d\n    d=$temp\n  done\n  echo $((a+b+c+d))", "  echo 'your stuff here'",
  "    local n=$1\n    local fib4_prev\n    local fib4_prev_prev\n    local fib4_prev_prev_prev\n\
    \    local fib4_prev_prev_prev_prev\n    local fib4_result\n    case \"$n\" in\n\
    \        0)\n            echo \"0\"\n            ;;\n        1)\n            echo\
    \ \"0\"\n            ;;\n        2)\n            echo \"2\"\n            ;;\n\
    \        3)\n            echo \"0\"\n            ;;\n        *)\n            fib4_prev_prev_prev_prev=$(fib4\
    \ \"$((n-4))\")\n            fib4_prev_prev_prev=$(fib4 \"$((n-3))\")\n      \
    \      fib4_prev_prev=$(fib4 \"$((n-2))\")\n            fib4_prev=$(fib4 \"$((n-1))\"\
    )\n            fib4_result=$((fib4_prev_prev_prev_prev + fib4_prev_prev_prev +\
    \ fib4_prev_prev + fib4_prev))\n            echo \"$fib4_result\"\n          \
    \  ;;\n    esac", "  #Start 0\n  n=0\n  #Start 1\n  n1=0\n  #Start 2\n  n2=2\n\
    \  #Start 3\n  n3=0\n  #Start 4\n  n4=0\n  #Start 5\n  n5=0\n  #count\n  c=1\n\
    \  while [[ $c -lt $1 ]]; do\n    n5=$n4\n    n4=$n3\n    n3=$n2\n    n2=$n1\n\
    \    n1=$n\n    n=$(($n1+$n2+$n3+$n4))\n    c=$(($c+1))\n  done\n  echo $n", " \
    \   local i=0;\n    local j=0;\n    local k=2;\n    local l=0;\n    local m=$1;\n\
    \    local n=0;\n    while [ $n -lt $m ]; do\n        let l=i+j+k;\n        let\
    \ i=j;\n        let j=k;\n        let k=l;\n        let n=$n+1;\n    done\n  \
    \  echo $l;", "  local n=$1\n  local fib4_1=0\n  local fib4_2=0\n  local fib4_3=2\n\
    \  local fib4_4=0\n  local fib4_n=0\n  if [ \"$n\" -le \"3\" ]; then\n    echo\
    \ \"$fib4_3\"\n  else\n    local i\n    for ((i=3; i<n; i++)); do\n      fib4_n=$((fib4_1\
    \ + fib4_2 + fib4_3 + fib4_4))\n      fib4_1=$fib4_2\n      fib4_2=$fib4_3\n \
    \     fib4_3=$fib4_4\n      fib4_4=$fib4_n\n    done\n    echo \"$fib4_n\"\n \
    \ fi", "    local N=$1\n    let local a=0\n    let local b=0\n    let local c=2\n\
    \    let local d=0\n    let local i=3\n    if [[ ${N} -le 0 ]]; then\n       \
    \ echo 0\n    elif [[ ${N} -eq 1 ]]; then\n        echo 0\n    elif [[ ${N} -eq\
    \ 2 ]]; then\n        echo 2\n    else\n        while [[ ${i} -le ${N} ]]; do\n\
    \            let d=a+b+c\n            let a=b\n            let b=c\n         \
    \   let c=d\n            let i=i+1\n        done\n        echo ${d}\n    fi",
  "\t# Write your solution below\n\t# ---------- Begin ----------\n\t\n\t# -----------\
    \ End -----------", "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[\
    \ $1 -eq 1 ]]; then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n        echo\
    \ 2\n    elif [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        a=0\n  \
    \      b=0\n        c=2\n        d=0\n        for (( i = 4; i <= $1; i++ )); do\n\
    \            e=$((a+b+c+d))\n            a=$b\n            b=$c\n            c=$d\n\
    \            d=$e\n        done\n        echo $e\n    fi", "    arr=(0 0 2 0)\n\
    \    i=3\n    while [ $i -lt $1 ]; do\n        let \"arr[i%4] = arr[(i-1)%4] +\
    \ arr[(i-2)%4] + arr[(i-3)%4] + arr[(i-4)%4]\"\n        let \"i += 1\"\n    done\n\
    \    echo \"${arr[(i-1)%4]}\"", "    [ $1 -lt 3 ] && echo 0 && return\n    [ $1\
    \ -eq 3 ] && echo 2 && return\n    N=$(($1-3))\n    C0=0\n    C1=0\n    C2=2\n\
    \    C3=0\n    for (( i=0; i<=N; i++ ))\n    do\n        F=$((C0+C1+C2+C3))\n\
    \        C0=$C1\n        C1=$C2\n        C2=$C3\n        C3=$F\n    done\n   \
    \ echo $F", "    declare -a fib4=(0 0 2 0)\n    if [ $1 -lt 4 ]; then\n      \
    \  echo ${fib4[$1]}\n    else\n        for i in $(seq 4 $1); do\n            fib4[$i]=$((${fib4[$(($i-1))]}\
    \ + ${fib4[$(($i-2))]} + ${fib4[$(($i-3))]} + ${fib4[$(($i-4))]}))\n        done\n\
    \        echo ${fib4[$1]}\n    fi", "    if [[ $1 -eq 0 ]]; then\n        echo\
    \ 0\n    elif [[ $1 -eq 1 ]]; then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n\
    \        echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n   \
    \     fib4_nums=()\n        for i in `seq 1 $1`; do\n            fib4_nums[$i]=0\n\
    \        done\n        fib4_nums[2]=2\n        fib4_nums[3]=0\n        for i in\
    \ `seq 4 $1`; do\n            fib4_nums[$i]=$((${fib4_nums[i-1]} + ${fib4_nums[i-2]}\
    \ + ${fib4_nums[i-3]} + ${fib4_nums[i-4]}))\n        done\n        echo ${fib4_nums[$1]}\n\
    \    fi", "\tcase $1 in\n\t\t0) echo 0 ;;\n\t\t1) echo 0 ;;\n\t\t2) echo 2 ;;\n\
    \t\t3) echo 0 ;;\n\t\t*) echo $(echo $(( $(fib4 $(( $1 - 1 ))) + $(fib4 $(( $1\
    \ - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $(( $1 - 4 ))) ))) ;;\n\tesac", " \
    \   if [[ ! \"$1\" =~ ^-?[0-9]+$ ]]; then\n        echo \"Error: $1 is not an\
    \ integer\" >&2\n        return 1\n    fi\n    local i=0\n    local cur=0\n  \
    \  local prev=0\n    local pp=0\n    local ppp=0\n    local pppp=0\n    while\
    \ ((i < $1)); do\n        let ppp=$pp\n        let pp=$prev\n        let prev=$cur\n\
    \        let cur=$pp+$ppp+$pppp+$ppppp\n        let i+=1\n    done\n    echo $cur",
  "  [ $1 == 0 ] && echo 0 && return\n  [ $1 == 1 ] && echo 0 && return\n  [ $1 ==\
    \ 2 ] && echo 2 && return\n  [ $1 == 3 ] && echo 0 && return\n  echo \"scale=0;$(fib4\
    \ $(( $1 - 1 ))) + $(fib4 $(( $1 - 2 ))) + $(fib4 $(( $1 - 3 ))) + $(fib4 $((\
    \ $1 - 4 )))\" | bc", "  if [[ $1 -eq 0 ]]; then\n    echo \"0\"\n  elif [[ $1\
    \ -eq 1 ]]; then\n    echo \"0\"\n  elif [[ $1 -eq 2 ]]; then\n    echo \"2\"\n\
    \  elif [[ $1 -eq 3 ]]; then\n    echo \"0\"\n  else\n    fib4_m1=$(fib4 \"$((\
    \ $1 - 1 ))\")\n    fib4_m2=$(fib4 \"$(( $1 - 2 ))\")\n    fib4_m3=$(fib4 \"$((\
    \ $1 - 3 ))\")\n    fib4_m4=$(fib4 \"$(( $1 - 4 ))\")\n    echo \"$(( $fib4_m1\
    \ + $fib4_m2 + $fib4_m3 + $fib4_m4 ))\"\n  fi", '    echo "Not implemented!"',
  "  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n    echo \"ERROR: '$1' is not an integer.\"\n\
    \    exit 1\n  fi\n  if [[ $1 -lt 0 ]]; then\n    echo \"ERROR: '$1' must be a\
    \ positive integer.\"\n    exit 1\n  fi\n  if [[ $1 -eq 0 ]]; then\n    echo 0\n\
    \    return\n  fi\n  if [[ $1 -eq 1 ]]; then\n    echo 0\n    return\n  fi\n \
    \ if [[ $1 -eq 2 ]]; then\n    echo 2\n    return\n  fi\n  if [[ $1 -eq 3 ]];\
    \ then\n    echo 0\n    return\n  fi\n  if [[ $1 -gt 3 ]]; then\n    a=0\n   \
    \ b=0\n    c=2\n    d=0\n    i=4\n    while [[ $i -le $1 ]]; do\n      e=$((a+b+c+d))\n\
    \      a=$b\n      b=$c\n      c=$d\n      d=$e\n      i=$((i+1))\n    done\n\
    \    echo $e\n  fi", "    local start=\"0 0 2 0\"\n    if [[ \"$1\" -lt 5 ]];\
    \ then\n        echo \"$start\" | cut -d' ' -f\"$1\"\n    else\n        local\
    \ a b c d\n        for ((i=4; i<\"$1\"; i++)); do\n            read a b c d <<<\
    \ \"$start\"\n            start=\"$b $c $d $((a+b+c+d))\"\n        done\n    \
    \    echo \"$start\" | cut -d' ' -f4\n    fi", "  NUM=\"$1\"\n  A=0\n  B=0\n \
    \ C=2\n  D=0\n  if [ $NUM -eq 0 ]; then\n    echo $A\n  elif [ $NUM -eq 1 ]; then\n\
    \    echo $B\n  elif [ $NUM -eq 2 ]; then\n    echo $C\n  elif [ $NUM -eq 3 ];\
    \ then\n    echo $D\n  else\n    # we have to calculate the fib4 value\n    ((N=NUM-4))\n\
    \    for i in $(seq 0 $N); do\n      ((A=B))\n      ((B=C))\n      ((C=D))\n \
    \     ((D=A+B+C+D))\n    done\n    echo $D\n  fi", "  local n=\"$1\"\n  local\
    \ m=0\n  local k=0\n  local j=0\n  local i=0\n  local fib4_prev=0\n  local fib4_current=0\n\
    \  for ((c=0; c<=n; c++))\n  do\n    if [ $c -eq 0 ]\n    then\n      fib4_current=0\n\
    \    elif [ $c -eq 1 ]\n    then\n      fib4_current=0\n    elif [ $c -eq 2 ]\n\
    \    then\n      fib4_current=2\n    elif [ $c -eq 3 ]\n    then\n      fib4_current=0\n\
    \    else\n      fib4_current=$((fib4_prev + m + k + j + i))\n      i=$j\n   \
    \   j=$k\n      k=$m\n      m=$fib4_prev\n      fib4_prev=$fib4_current\n    fi\n\
    \  done\n  echo $fib4_current", "    num=$1\n    if [ $num -eq 0 ]; then\n   \
    \     echo 0\n    elif [ $num -eq 1 ]; then\n        echo 0\n    elif [ $num -eq\
    \ 2 ]; then\n        echo 2\n    elif [ $num -eq 3 ]; then\n        echo 0\n \
    \   else\n        a=0\n        b=0\n        c=2\n        d=0\n        for (( i=4;\
    \ i<=$num; i++ )); do\n            e=$((a+b+c+d))\n            a=$b\n        \
    \    b=$c\n            c=$d\n            d=$e\n        done\n        echo $e\n\
    \    fi", "    local i n1 n2 n3 n4 n5\n    n1=0\n    n2=0\n    n3=2\n    n4=0\n\
    \    n5=0\n    if [ $1 -eq 0 ]; then\n        echo $n1\n    elif [ $1 -eq 1 ];\
    \ then\n        echo $n2\n    elif [ $1 -eq 2 ]; then\n        echo $n3\n    elif\
    \ [ $1 -eq 3 ]; then\n        echo $n4\n    else\n        for i in $(seq 4 $1);\
    \ do\n            n5=$((n1+n2+n3+n4))\n            n1=$n2\n            n2=$n3\n\
    \            n3=$n4\n            n4=$n5\n        done\n        echo $n5\n    fi",
  "    if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Usage: fib4 \\\"[0-9]+\\\
    \"\"\n        return 1\n    fi\n    a=0; b=0; c=2; d=0; e=$1\n    for ((i=0; i<e;\
    \ i++)); do\n        d=$((a+b+c))\n        a=$b; b=$c; c=$d\n    done\n    echo\
    \ $d", "  local n=$1\n  local f0=0\n  local f1=0\n  local f2=2\n  local f3=0\n\
    \  local f4=0\n  local i=0\n  for ((i=4; i<=n; i++)); do\n    f4=$((f3+f2+f1+f0))\n\
    \    f0=$f1\n    f1=$f2\n    f2=$f3\n    f3=$f4\n  done\n  echo $f4", "  if [\
    \ \"$1\" -eq 0 ]; then\n    echo 0\n  elif [ \"$1\" -eq 1 ]; then\n    echo 0\n\
    \  elif [ \"$1\" -eq 2 ]; then\n    echo 2\n  elif [ \"$1\" -eq 3 ]; then\n  \
    \  echo 0\n  else\n    a=0\n    b=0\n    c=2\n    d=0\n    for (( i=4; i<=$1;\
    \ i++ )); do\n      a=$b\n      b=$c\n      c=$d\n      d=$((a+b+c))\n    done\n\
    \    echo $d\n  fi", "\tlocal n=$1\n\tlocal res=0\n\tlocal i=1\n\tlocal last1=0\n\
    \tlocal last2=0\n\tlocal last3=0\n\tlocal last4=0\n\twhile [ $i -le $n ]; do\n\
    \t\tcase $i in\n\t\t1)\n\t\t\tres=0\n\t\t\t;;\n\t\t2)\n\t\t\tres=0\n\t\t\t;;\n\
    \t\t3)\n\t\t\tres=2\n\t\t\t;;\n\t\t4)\n\t\t\tres=0\n\t\t\t;;\n\t\t*)\n\t\t\tres=$((\
    \ $last1 + $last2 + $last3 + $last4 ))\n\t\t\t;;\n\t\tesac\n\t\tlast4=$last3\n\
    \t\tlast3=$last2\n\t\tlast2=$last1\n\t\tlast1=$res\n\t\t((i++))\n\tdone\n\techo\
    \ $res", "  [ $1 -lt 3 ] && echo \"0\" && return\n  [ $1 -eq 3 ] && echo \"2\"\
    \ && return\n  a=0\n  b=0\n  c=2\n  d=0\n  local i=4\n  while [ $i -le $1 ]; do\n\
    \    d=$((a+b+c))\n    a=$b\n    b=$c\n    c=$d\n    i=$((i+1))\n  done\n  echo\
    \ $d", "    if [ \"$1\" -lt 0 ]; then\n        echo \"Error - Input is too small\"\
    \n        return -1\n    fi\n    if [ \"$1\" -eq 0 ]; then\n        echo \"0\"\
    \n        return 0\n    fi\n    if [ \"$1\" -eq 1 ]; then\n        echo \"0\"\n\
    \        return 0\n    fi\n    if [ \"$1\" -eq 2 ]; then\n        echo \"2\"\n\
    \        return 0\n    fi\n    if [ \"$1\" -eq 3 ]; then\n        echo \"0\"\n\
    \        return 0\n    fi\n    current=0\n    fib4_one_back=0\n    fib4_two_back=0\n\
    \    fib4_three_back=0\n    fib4_four_back=0\n    for ((i=4; i<=$1; i++)); do\n\
    \        current=$((fib4_one_back + fib4_two_back + fib4_three_back + fib4_four_back))\n\
    \        fib4_four_back=$fib4_three_back\n        fib4_three_back=$fib4_two_back\n\
    \        fib4_two_back=$fib4_one_back\n        fib4_one_back=$current\n    done\n\
    \    echo \"$current\"", "    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif\
    \ [[ $1 -eq 1 ]]; then\n        echo 0\n    elif [[ $1 -eq 2 ]]; then\n      \
    \  echo 2\n    elif [[ $1 -eq 3 ]]; then\n        echo 0\n    else\n        a=$(fib4\
    \ $(($1-1)))\n        b=$(fib4 $(($1-2)))\n        c=$(fib4 $(($1-3)))\n     \
    \   d=$(fib4 $(($1-4)))\n        echo $(($a+$b+$c+$d))\n    fi", "  local -i dp[${1}]=$((${1}))\n\
    \  for ((i=2; i<=${1}; i++)); do\n    if [[ $i -le 3 ]]; then\n      dp[$i]=2\n\
    \    else\n      dp[$i]=$(( dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4] ))\n    fi\n\
    \  done\n  echo ${dp[$1]}", "  let N=\"$1\"\n\n  local -a fibo_array\n  fibo_array=(\
    \ 0 0 2 0 )\n\n  if [ $N -lt 3 ]; then\n    echo ${fibo_array[$N]}\n    return\n\
    \  fi\n\n  let i=3\n  while [ $i -lt $N ]; do\n    let temp=${fibo_array[0]}+${fibo_array[1]}+${fibo_array[2]}+${fibo_array[3]}\n\
    \    fibo_array[0]=${fibo_array[1]}\n    fibo_array[1]=${fibo_array[2]}\n    fibo_array[2]=${fibo_array[3]}\n\
    \    fibo_array[3]=$temp\n    let i=$i+1\n  done\n\n  echo ${fibo_array[3]}",
  "   if [[ $1 == \"0\" ]]; then\n      echo \"0\"\n   elif [[ $1 == \"1\" ]]; then\n\
    \      echo \"0\"\n   elif [[ $1 == \"2\" ]]; then\n      echo \"2\"\n   elif\
    \ [[ $1 == \"3\" ]]; then\n      echo \"0\"\n   else\n      num1=0\n      num2=0\n\
    \      num3=2\n      num4=0\n      for ((i=4; i<=$1; i++)); do\n         temp=$((num1+num2+num3+num4))\n\
    \         num1=$num2\n         num2=$num3\n         num3=$num4\n         num4=$temp\n\
    \      done\n      echo \"$num4\"\n   fi", "    local n=$1\n    local n1 n2 n3\
    \ n4 fib\n    n1=0\n    n2=0\n    n3=2\n    n4=0\n    fib=0\n    if [[ $n -eq\
    \ 0 ]]; then\n        echo $n1\n    elif [[ $n -eq 1 ]]; then\n        echo $n2\n\
    \    elif [[ $n -eq 2 ]]; then\n        echo $n3\n    elif [[ $n -eq 3 ]]; then\n\
    \        echo $n4\n    else\n        for ((i=4; i<=n; i++)); do\n            fib=$((n1+n2+n3+n4))\n\
    \            n1=$n2\n            n2=$n3\n            n3=$n4\n            n4=$fib\n\
    \        done\n        echo $fib\n    fi", '    echo 0', "  i=$1\n  if [ $i -eq\
    \ 0 ]; then\n    echo \"0\"\n  elif [ $i -eq 1 ]; then\n    echo \"0\"\n  elif\
    \ [ $i -eq 2 ]; then\n    echo \"2\"\n  elif [ $i -eq 3 ]; then\n    echo \"0\"\
    \n  else\n    var1=$(fib4 $((i-1)))\n    var2=$(fib4 $((i-2)))\n    var3=$(fib4\
    \ $((i-3)))\n    var4=$(fib4 $((i-4)))\n    echo $((var1+var2+var3+var4))\n  fi",
  "    local a b c d n\n    # Fib4 sequence begins with these numbers\n    a=0\n \
    \   b=0\n    c=2\n    d=0\n    n=$1\n    # for loop for computing the fib4 number\n\
    \    for (( i=3; i<n; i++ )) ; do\n        d=$(expr $a + $b + $c)\n        a=$b\n\
    \        b=$c\n        c=$d\n    done\n    # return the fib4 number\n    echo\
    \ $d", "    n=$1\n    if [ $n -le 3 ]; then\n        echo $((2 * $n))\n    else\n\
    \        fib4_prev=8\n        fib4_prev_prev=4\n        fib4_prev_prev_prev=2\n\
    \        fib4_prev_prev_prev_prev=0\n        for ((i=4; i < n; i++)); do\n   \
    \         fib4_cur=$((fib4_prev + fib4_prev_prev + fib4_prev_prev_prev + fib4_prev_prev_prev_prev))\n\
    \            fib4_prev_prev_prev_prev=$fib4_prev_prev_prev\n            fib4_prev_prev_prev=$fib4_prev_prev\n\
    \            fib4_prev_prev=$fib4_prev\n            fib4_prev=$fib4_cur\n    \
    \    done\n        echo $fib4_cur\n    fi", "  if [ \"$1\" -lt \"0\" ]; then\n\
    \    echo \"Negative input not permitted\"\n    return\n  fi\n  if [ \"$1\" -eq\
    \ \"0\" ]; then\n    echo \"0\"\n    return\n  fi\n  if [ \"$1\" -eq \"1\" ];\
    \ then\n    echo \"0\"\n    return\n  fi\n  if [ \"$1\" -eq \"2\" ]; then\n  \
    \  echo \"2\"\n    return\n  fi\n  if [ \"$1\" -eq \"3\" ]; then\n    echo \"\
    0\"\n    return\n  fi\n  # Use array to store all the previous numbers\n  FIB[0]=0\n\
    \  FIB[1]=0\n  FIB[2]=2\n  FIB[3]=0\n  for i in $(seq 4 $1); do\n    FIB[$i]=$((${FIB[$(($i-1))]}\
    \ + ${FIB[$(($i-2))]} + ${FIB[$(($i-3))]} + ${FIB[$(($i-4))]}))\n  done\n  echo\
    \ \"${FIB[$1]}\"", "    declare -a a;\n    a=(0 0 2 0)\n    for (( i=4; i<=$1;\
    \ i++ )); do\n        a=(${a[@]:1} $(( ${a[0]} + ${a[1]} + ${a[2]} + ${a[3]} )))\n\
    \    done\n    echo ${a[3]}"]
stop_tokens:
- "\n}"
