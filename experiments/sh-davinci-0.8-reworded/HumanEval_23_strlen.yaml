name: HumanEval_23_strlen
language: sh
prompt: "#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"\
  0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n"
tests: "}\n\ncandidate() {\n    strlen \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"\") = \"0\" ]]\n    [[ $(candidate \"x\") = \"1\" ]]\n    [[ $(candidate \"\
  asdasnakj\") = \"9\" ]]\n}\n\nrun_test"
completions: ['    [[ -z "$1" ]] && echo "0" || echo "${#1}"', "    [ -z \"$1\" ]\
    \ && return 0\n    echo ${#1}", '    echo ${#1}', '    echo ${#1}', '    echo
    ${#1}', "    # using expr\n    expr length \"$1\"\n    # using wc -c\n    wc -c\
    \ <<< \"$1\"\n    # using bash builtin\n    echo ${#1}", "  expr \"$1\" : '.*'",
  "    local word=\"$1\"\n    echo ${#word}", "    local s\n    s=${1:-\"$(cat)\"\
    }\n    echo ${#s}", '  printf "%s" "$1" | wc -c', '  echo ${#1}', '    echo "${#1}"',
  "    # shellcheck disable=SC2016\n    echo \"${#1}\"", '    echo ${#1}', "    printf\
    \ '%s' \"$1\" | wc -c", "    local str=$1\n    echo ${#str}", '  echo -n "$1"
    | wc -c', '    [ -z "$1" ] && echo 0 || echo ${#1}', "    local __RET=\"$(echo\
    \ \"$1\" | awk '{print length}')\"\n    echo \"$__RET\"", "    if [ -z \"$1\"\
    \ ]; then\n        echo \"0\"\n    else\n        echo ${#1}\n    fi", '    echo
    -n "$1" | wc -c', '    [[ -z "$1" ]] && echo "0" || echo -n ${#1}', '  echo "${#1}"',
  '    expr length "$1"', "    LEN=${#1}\n    echo \"$LEN\"", "    if [ \"$#\" -ne\
    \ 1 ]; then\n        printf \"strlen: argument is required\\n\" >&2\n        return\
    \ 1\n    fi\n    printf '%s' \"${#1}\"", "  local __resultvar=$2\n  local lvar=\"\
    ${__resultvar}_strlen_l\"\n  local str=\"$1\"\n  local i=0\n  while true; do\n\
    \    local c=\"${str:i:1}\"\n    if [ -z \"$c\" ]; then\n      break\n    fi\n\
    \    i=$((i+1))\n  done\n  eval $__resultvar=\"'$i'\"", '  echo ${#1}', "  local\
    \ string=${1:-}\n  [[ -z \"$string\" ]] && echo \"0\" || echo ${#string}", " \
    \   local STR=\"$1\"\n    echo ${#STR}", '  echo -n $1 | wc -c', '    echo "${#1}"',
  '  echo -n "$1" | wc -c', '    echo ${#1}', "  [ $# = 1 ] || die \"${FUNCNAME[0]}\
    \ requires one argument\"\n  echo ${#1}", '  echo "${#1}"', "    # get the length\
    \ of given string\n    expr length \"$1\"", "    local STRING=\"$1\"\n    echo\
    \ \"${#STRING}\"", "  local -i i=0\n  while [ $i -lt ${#1} ]; do\n    let i++\n\
    \  done\n  echo $i", '    echo "${#1}"', "  len=${#1}\n  echo $len", "    local\
    \ str=$1\n    local  len=${#str}\n    echo $len", "  [ $# -ne 1 ] && {\n    echo\
    \ \"Usage: strlen STRING\"\n    return 1\n  }\n  echo \"${#1}\"", '    echo "${#1}"',
  '  echo "${#1}"', "    if [ \"$1\" == \"\" ]; then\n        echo \"0\"\n    else\n\
    \        LENGTH=${#1}\n        echo \"$LENGTH\"\n    fi", "    _strlen=\"${#1}\"\
    \n    echo $_strlen", "  echo -n \"$1\" | awk '{ print length }'", '  echo ${#1}',
  '    echo "${#1}"', "  local str=\"$1\"\n  echo ${#str}", '    echo ${#1}', '    echo
    "${#1}"', "    local str=$1\n    echo ${#str}", "  if [ $# -eq 0 ]; then\n   \
    \ echo 0\n  elif [ $# -eq 1 ]; then\n    echo ${#1}\n  else\n    echo \"-1\"\n\
    \  fi", '  expr length "${1:-}"', '    echo -n "$1" | wc -c', '  echo -n "$1"
    | wc -c', "    local str=$1\n    printf \"%s\" \"$str\" | wc -c", '    echo -n
    "$1" | wc -c', '    echo "${#1}"', '  echo "${#1}"', '    echo "${#1}"', '    echo
    $(expr length "$1")', "    echo $(printf '%s' \"$1\" | wc -c)", '  [ -z "$1" ]
    && echo "0" || echo "${#1}"', "  [ $# -ne 1 ] && {\n    echo \"Usage: $(basename\
    \ $0) string\" >&2\n    return 1\n  }\n  echo ${#1}", "    local length\n    echo\
    \ -n \"$1\" | wc -c", '    echo -n "$1" | wc -c', '    [[ -z "$1" ]] && echo "0"
    || echo "${#1}"', "    [ \"$#\" -ne 1 ] && _throw \"Usage: strlen string\"\n \
    \   [ -z \"$1\" ] && echo \"0\" || echo \"${#1}\"", '  echo ${#1}', "  local str=${1}\n\
    \  echo ${#str}", "    local string=\"$1\"\n    local result=${#string}\n    echo\
    \ \"$result\"", '    echo ${#1}', "    if [[ -z \"$1\" ]]; then\n        echo\
    \ \"0\"\n    else\n        echo \"${#1}\"\n    fi", "  wc -c <<< \"$1\" | awk\
    \ '{print $1}'", "    local _input_str=\"$1\"\n    echo ${#_input_str}", "   \
    \ # echo -n \"$1\" | wc -c\n    echo \"${#1}\"", '  echo "${#1}"', '  echo "${#1}"',
  '    echo ${#1}', '    echo ${#1}', "  local str=\"$1\"\n  local strlen=${#str}\n\
    \  echo \"$strlen\"", "  local string=\"$1\"\n  local length=${#string}\n  echo\
    \ \"$length\"", "    if [[ \"$1\" == \"\" ]]; then\n        echo \"0\"\n    else\n\
    \        echo -n \"${#1}\"\n    fi", "    [[ -z \"$1\" ]] && {\n        echo 0\n\
    \        return 0\n    }\n    local s_len\n    local s=\"$1\"\n    ((s_len=${#s}))\n\
    \    echo \"$s_len\"", "  if [ $# -ne 1 ]; then\n    return 1\n  fi\n  echo ${#1}",
  "    local str=\"$1\"\n    echo -n \"${#str}\"", '    echo -n "$1" | wc -c', '    echo
    ${#1}', "  if [ $# -ne 1 ]; then\n    echo \"Usage: $(basename $0) <string>\"\n\
    \    return 1\n  fi\n  declare -i len=0\n  for (( i=0; i<${#1}; i++ )); do\n \
    \   len=$(( len + 1 ))\n  done\n  echo $len", '  echo -n "$1" | wc -c', "    local\
    \ str=$1\n    echo \"${#str}\"", '  [[ -z "$1" ]] && echo "0" || echo "${#1}"',
  '    echo ${#1}', '    echo ${#1}', '  echo -n "$1" | wc -c', '  echo "${#1}"',
  '  echo ${#1}', '  echo "${#1}"', '    echo -n "$1" | wc -c', '    echo -n "$1"
    | wc -c', '  echo ${#1}', "  local str=\"$1\"\n  local length=${#str}\n  echo\
    \ $length", '  echo "$1" | wc -c', '    echo ${#1}', "    if [[ -z \"$1\" ]];\
    \ then\n        echo \"0\"\n    else\n        echo \"${#1}\"\n    fi", "  if [\
    \ -z \"$1\" ]; then\n    echo \"0\"\n  else\n    echo -n \"$1\" | wc -c\n  fi",
  '    echo ${#1}', '  echo "${#1}"', "  printf '%s' \"$1\" | awk '{ print length($0)\
    \ }'", "    string=$1\n    length=$(echo -n \"${string}\" | wc -c)\n    echo \"\
    ${length}\"", '  echo "${#1}"', '    echo "${#1}"', "    local str=\"$1\"\n  \
    \  local len=${#str}\n    echo \"$len\"", "    local count=0\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        local c=\"${1:$i:1}\"\n        if [[ $c =~ [[:ascii:]]\
    \ ]]; then\n            count=$((count+1))\n        else\n            count=$((count+3))\n\
    \        fi\n    done\n    echo $count", '    echo -n "$1" | wc -c', '  echo "${#1}"',
  '    echo "${#1}"', "  local str=$1\n  echo ${#str}", "  if [[ -z \"$1\" ]]; then\n\
    \    echo \"0\"\n  else\n    echo \"${#1}\"\n  fi", '    expr length "$1"', " \
    \ if [ -z \"$1\" ]; then\n    echo 0\n  else\n    echo ${#1}\n  fi", '  echo -n
    "$1" | wc -c', "    local string=\"$1\"\n    echo ${#string}", '  echo ${#1}',
  "    local string=\"$1\"\n    echo ${#string}", '  echo -n "$1" | wc -c', '    echo
    -n "$1" | wc -c', "  length=0\n  for (( i=0; i<${#1}; i++ )); do\n    length=$((\
    \ length + 1 ))\n  done\n  echo \"$length\"", '    printf "%s" "$1" | wc -c',
  '  echo -n "$1" | wc -c', "    LEN=${#1}\n    echo \"$LEN\"", '  echo -n $1 | wc
    -c', '    echo -n "$1" | wc -c', "    local str=$1\n    [[ -z \"$str\" ]] && echo\
    \ 0 || echo ${#str}", '    echo ${#1}', "    local string=\"$1\"\n    echo \"\
    ${#string}\"", "  local value=\"$1\"\n  echo ${#value}", "    if [ $# -eq 0 ];\
    \ then\n        echo \"usage: ${FUNCNAME[0]} string\"\n        return\n    fi\n\
    \    local str=$1\n    local len=${#str}\n    echo $len", "  local str=\"$1\"\n\
    \  echo \"${#str}\"", '    echo ${#1}', '    echo -n "$1" | wc -c', '    [[ -z
    "$1" ]] && echo 0 || echo ${#1}', "  if [ \"$1\" ]; then\n    echo \"${#1}\"\n\
    \  else\n    echo \"0\"\n  fi", '    echo ${#1}', '  echo ${#1}', '    echo "${#1}"',
  "  echo -n \"$1\" | awk '{ print length }'", '    echo -n "$1" | wc -c', '    echo
    -n "$1" | wc -c', '  [ -z "$1" ] && echo "0" || echo "${#1}"', "  # The -1 in\
    \ the following command discards the final newline\n  echo $1 | wc -c -1", '    echo
    -n "$1" | wc -c', "  local len=${#1}\n  echo \"$len\"", "    local str=$1\n  \
    \  echo ${#str}", '  echo "${#1}"', "    wc -c <<<\"$1\" | awk '{print $1}'",
  "  if [ -z \"$1\" ]; then\n    echo 0\n  else\n    echo ${#1}\n  fi", "  local string=\"\
    $1\"\n  echo \"${#string}\"", '    echo -n "$1" | wc -c', "    local -r string=\"\
    $1\"\n    echo \"${#string}\"", '  echo ${#1}', "  test \"$1\" && echo ${#1} ||\
    \ echo '0'", "  local str=\"$1\"\n  local len=${#str}\n  echo \"$len\"", "   \
    \ if [ $# -ne 1 ]; then\n        printf \"usage: strlen 'STRING'\\n\"\n      \
    \  return 1\n    fi\n    expr length \"$1\"", '  [[ -z "$1" ]] && echo 0 || echo
    ${#1}', '    echo "${#1}"', '  echo "${#1}"', '    echo ${#1}', "  if [ $# -eq\
    \ 0 ]; then\n    echo 0\n  else\n    echo \"${#1}\"\n  fi", '    echo ${#1}',
  '  echo ${#1}', "    local str=\"$1\"\n    local length=${#str}\n    echo \"$length\"",
  "    local strlen=$(wc -c <<< $1)\n    echo ${strlen:0:${#strlen}-1}", '  echo -n
    $1 | wc -c', "  [ \"$#\" -eq 1 ] || return\n  local string=\"$1\"\n  echo \"${#string}\"",
  '    echo ${#1}', '  echo -n "$1" | wc -c', '    echo ${#1}', '    echo ${#1}',
  '    echo ${#1}', '    echo -n "$1" | wc -c', '    echo "${#1}"', '  :', "  local\
    \ str=$1\n  echo \"${#str}\"", '  echo -n "$1" | wc -c', '    expr length "$1"',
  '    echo ${#1}', '    echo ${#1}', "  local len=${#1}\n  echo \"$len\"", '    echo
    ${#1}', '  echo -n "$1" | wc -c', '  echo -n "$1" | wc -c', '    echo -n "$1"
    | wc -c', '  echo "${#1}"', '    echo "${#1}"', '    echo "${#1}"', '  echo ${#1}']
stop_tokens:
- "\n}"
