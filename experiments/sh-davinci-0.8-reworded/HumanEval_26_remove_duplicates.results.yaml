language: sh
name: HumanEval_26_remove_duplicates
results:
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local new_list\n  \
    \  new_list=$(echo $1 | tr ' ' '\\n' | sort | uniq -u | tr '\\n' ' ')\n    echo\
    \ $new_list\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  seen=\"\"\n  for e in\
    \ $1; do\n    if [ -z \"$(echo \"$seen\" | grep -o \" $e \")\" ]; then\n     \
    \ seen=\"$seen $e \"\n    fi\n  done\n  echo \"$seen\"\n}\n\ncandidate() {\n \
    \   remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    res=()\n    dupes=()\n\
    \    for i in $1; do\n        if [[ \" ${res[@]} \" =~ \" ${i} \" ]]; then\n \
    \           dupes+=($i)\n        else\n            res+=($i)\n        fi\n   \
    \ done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | awk '!arr[$0]++'\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  seen=\"\"\n  result=\"\
    \"\n  for x in $1; do\n    [ -z \"$(echo \"$seen\" | grep -o \"$x\")\" ] && result=\"\
    $result $x\" && seen=\"$seen $x\"\n  done\n  echo $result\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local -a array=()\n \
    \ local -a output=()\n  IFS=' ' read -r -a array <<< \"$1\"\n  for (( i=0; i<${#array[@]};\
    \ i++ )); do\n    local is_duplicate=\"false\"\n    for (( j=0; j<${#output[@]};\
    \ j++ )); do\n      if [[ \"${array[$i]}\" == \"${output[$j]}\" ]]; then\n   \
    \     is_duplicate=\"true\"\n        break\n      fi\n    done\n    if [[ \"$is_duplicate\"\
    \ == \"false\" ]]; then\n      output=(\"${output[@]}\" \"${array[$i]}\")\n  \
    \  fi\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | tr '\
    \ ' '\\n' | awk '{ if (seen[$0]++ == 0) print $0 }'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local vals=($1)\n \
    \   echo ${vals[@]} | tr ' ' '\\n' | sort | uniq -u | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local str=\"\"\n  \
    \  local seen=\"\"\n    for i in $1; do\n        # has not been seen yet\n   \
    \     if ! [[ \"$seen\" =~ \"$i\" ]]; then\n            str=\"$str $i\"\n    \
    \        seen=\"$seen $i\"\n        fi\n    done\n    echo $str\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    python -c \"print '\
    \ '.join(sorted(set(map(int, \\\"$1\\\".split())), key=lambda x: \\\"$1\\\".split().index(str(x))))\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n\
    TypeError: sequence item 0: expected string, int found\n"
  stdout: ''
  timestamp: 1660025241
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  if [[ $# -eq 0 ]]; then\n\
    \    printf \"%s\\n\" \"No input provided!\"\n    return 1\n  fi\n\n  tr ' ' '\\\
    n' | awk '!x[$0]++'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=16 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660025246
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  # TODO: Replace with\
    \ sed implementation, no loop\n  local i\n  local duplicates\n  local input=$1\n\
    \  local result\n  # Iterate over input\n  for i in $input; do\n    # Ignore duplicates\n\
    \    if [[ \" ${duplicates[@]} \" =~ \" ${i} \" ]]; then\n      continue\n   \
    \ fi\n    # Check if this i occurs later in the input\n    if $(echo \"$input\"\
    \ | grep -qo \"$i\" | wc -l | grep -q \"2\"); then\n      duplicates+=($i)\n \
    \   else\n      result+=($i)\n    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  awk '!x[$0]++' <<< $1\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local -a list=()\n  local\
    \ -a items=()\n  IFS=' ' read -r -a list <<< \"$1\"\n  for item in \"${list[@]}\"\
    ; do\n    if [[ -z $(echo \"${items[@]}\" | grep \"$item\") ]]; then\n      items+=($item)\n\
    \    fi\n  done\n  echo \"${items[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=($1)\n  local\
    \ to_keep=()\n  local prev=\n  for v in \"${list[@]}\"; do\n    if [[ -z $prev\
    \ || $prev != $v ]]; then\n      to_keep+=($v)\n    fi\n    prev=$v\n  done\n\
    \  echo \"${to_keep[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local a=($1)\n  local\
    \ b=()\n  local n=${#a[@]}\n  local i=0\n  while (( i < n )); do\n    local j=0\n\
    \    local is_unique=1\n    while (( j < n )); do\n      if (( j != i && a[i]\
    \ == a[j] )); then\n        is_unique=0\n        break\n      fi\n      (( j++\
    \ ))\n    done\n    if (( is_unique )); then\n      b+=(${a[i]})\n    fi\n   \
    \ (( i++ ))\n  done\n  echo \"${b[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  python3 -c \"\nfrom typing\
    \ import List\n\ndef remove_duplicates(l: List[str]) -> List[str]:\n  output =\
    \ []\n  for e in l:\n    if e not in output:\n      output.append(e)\n  return\
    \ output\n\ndef main():\n  s = '$1'\n  print(remove_duplicates(s.split(' ')))\n\
    \nif __name__ == '__main__':\n  main()\n\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=($1)\n  local\
    \ output=()\n  for i in \"${list[@]}\"; do\n    element_count=$(echo \"${list[@]}\"\
    \ | tr ' ' '\\n' | grep -c \"^$i$\")\n    if [[ \"$element_count\" -eq 1 ]]; then\n\
    \      output+=(\"$i\")\n    fi\n  done\n  echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local x\n    for x\
    \ in ${*}; do\n        if [[ ${x} -ge 0 ]]; then\n            echo ${x}\n    \
    \    fi\n    done | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo -n \"$1\" | tr\
    \ ' ' '\\n' | awk '!seen[$0]++' | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    list=\"$1\"\n    local\
    \ result=()\n    for i in $list; do\n        if ! contains $i \"${result[@]}\"\
    ; then\n            result+=($i)\n        fi\n    done\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    /tmp/tmpsm88_j28.sh: line 12: contains: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$1\"\n\
    \  local x\n  local result=\"\"\n  local first=0\n  local count=0\n  for x in\
    \ $input; do\n    if [ $first -eq 0 ]; then\n      result=\"$x\"\n      count=1\n\
    \      first=1\n    else\n      # not the first item, check if it's a duplicate\n\
    \      if [[ $result != *$x* ]]; then\n        # not a duplicate, add to the result\n\
    \        result=\"$result $x\"\n        count=$(( $count + 1 ))\n      fi\n  \
    \  fi\n  done\n  # all items in result are unique, echo them as a string\n  echo\
    \ $result\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a res\n  declare\
    \ -a seen\n  for tok in $1; do\n    if ! member \"$tok\" \"${seen[@]}\"; then\n\
    \      res+=(\"$tok\")\n      seen+=(\"$tok\")\n    fi\n  done\n  echo \"${res[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    /tmp/tmpi3_ckzw4.sh: line 12: member: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local items=()\n  \
    \  local seen=()\n    for i in $1; do\n        if [ \"${seen[$i]}\" != 'true'\
    \ ]; then\n            items+=(\"$i\")\n            seen[$i]=true\n        fi\n\
    \    done\n    echo \"${items[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local result\n    #\
    \ use a dictionary to keep track of each time we see a given element\n    local\
    \ seen\n    for x in $1; do\n        if [[ -z \"${seen[$x]}\" ]]; then\n     \
    \       result=\"$result $x\"\n            seen[$x]=1\n        fi\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $1 | tr ' ' '\\\
    n' | uniq -u | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # determine which integers\
    \ only occur once\n    local non_duplicates=$(awk '{print $1}' $1 | uniq -u)\n\
    \    # remove duplicates from the input\n    local result=$(comm -23 <(echo \"\
    $1\") <(echo \"$non_duplicates\"))\n    echo \"$result\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=17 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660025246
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    python -c \"\nfrom\
    \ itertools import groupby\nfrom operator import itemgetter\n\ndef remove_duplicates(x):\n\
    \    counts = {}\n    for y in x:\n        if y in counts:\n            counts[y]\
    \ += 1\n        else:\n            counts[y] = 1\n    return [y for y in x if\
    \ counts[y] == 1]\n\nprint remove_duplicates(map(int, '$1'.split()))\n\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a arr\n  arr=(\"\
    $@\")\n  uniq -u <<< $@\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local -r input=\"$1\"\
    \n  local -r output=\"$(echo \"${input}\" | tr ' ' '\\n' | sort | uniq -u | tr\
    \ '\\n' ' ')\"\n  echo \"${output}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local cnt=1\n  while\
    \ read -r num; do\n    if [[ ! \" ${seen_nums[*]} \" =~ \" ${num} \" ]]; then\n\
    \      echo \"$num\"\n      seen_nums[$cnt]=$num\n      ((cnt++))\n    fi\n  done\
    \ <<< \"$@\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local -a list=($1)\n\
    \  local -A freq\n  local i\n  for i in \"${list[@]}\"; do\n    (( freq[$i]++\
    \ ))\n  done\n  local -a uniq\n  for i in \"${list[@]}\"; do\n    [[ ${freq[$i]}\
    \ -eq 1 ]] && uniq+=(\"$i\")\n  done\n  echo \"${uniq[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    declare -A seen\n \
    \   for x in $1; do\n        if [[ ! ${seen[$x]} ]]; then\n            seen[$x]=1\n\
    \            echo $x\n        fi\n    done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=$1\n  \
    \  local output=\"\"\n    local i=\"\"\n    for i in $input; do\n        if [[\
    \ \" $output \" =~ \" $i \" ]]; then\n            continue\n        fi\n     \
    \   output=\"$output $i\"\n    done\n    echo $output\n}\n\ncandidate() {\n  \
    \  remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local a=($1)\n    echo\
    \ $(printf '%s\\n' \"${a[@]}\" | sort -u)\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local -a numbers\n  local\
    \ number\n  local -a count\n  local -a result\n  local i\n  numbers=($1)\n  for\
    \ ((i=0; i<${#numbers[@]}; i++)); do\n    number=${numbers[$i]}\n    count[$number]=$((count[$number]\
    \ + 1))\n  done\n  for ((i=0; i<${#numbers[@]}; i++)); do\n    number=${numbers[$i]}\n\
    \    if [ ${count[$number]} -eq 1 ]; then\n      result+=(\"$number\")\n    fi\n\
    \  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\n    local\
    \ -a items\n    local n\n    list=$(tr ' ' '\\n' <<< \"$1\" | sort -g | uniq -u)\n\
    \    n=$(wc -l <<< \"$list\")\n    items=()\n    for ((i=0; i<n; i++)); do\n \
    \       items+=(\"$(sed -n \"$((i+1))p\" <<< \"$list\")\")\n    done\n    echo\
    \ \"${items[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  if [ $# -eq 0 ]; then\n\
    \    echo \"List missing\" >&2\n    return 1\n  fi\n\n  local result=\"$(\n  \
    \  tr ' ' '\\n' <<<\"$1\" | sort | uniq -c | sort -k1,1nr | \\\n      awk '$1\
    \ == 1 { print $2 }'\n  )\"\n\n  echo \"$result\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    if [[ \"$1\" ]]; then\n\
    \        for x in $1; do\n            echo \"$1\" | sed \"s/ $x//g\" | grep -q\
    \ $x || echo $x\n        done\n    fi\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $1 | sed 's/\\([^\
    \ ][^ ]*\\) \\(.*\\)/\\1/;ta;N;ba;:a;s/\\n/ /g;P;D'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$1\"\n\
    \  python3 -c \"import sys; print(sorted(set(sys.argv[1:])))\" \"$input\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local array1=($1)\n\
    \    local array2=($1)\n    local new_list=\"\"\n    for e in \"${array1[@]}\"\
    ; do\n        skip=\n        for f in \"${array2[@]}\"; do\n            [[ $e\
    \ == $f ]] && { skip=1; break; }\n        done\n        [[ -n $skip ]] || new_list=\"\
    $new_list \\\"$e\\\"\"\n    done\n    echo $new_list\n}\n\ncandidate() {\n   \
    \ remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$1\"\n\
    \  local output=\n\n  while [ \"$input\" ]; do\n    read -r first_element rest\
    \ <<< \"$input\"\n    output=\"$output $first_element\"\n    input=\"$(echo \"\
    $rest\" | sed \"s/\\s\\s*/ /g; s/ $first_element / /g\")\"\n  done\n\n  echo \"\
    $output\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=$1\n   \
    \ local -a new_list\n\n    # Build a dictionary of values\n    local -A value_counts\n\
    \    for value in $list; do\n        value_counts[$value]=1\n    done\n\n    #\
    \ Remove all values that occurred more than once\n    for value in $list; do\n\
    \        if [[ \"${value_counts[$value]}\" -eq 1 ]]; then\n            new_list+=(\
    \ \"$value\" )\n        fi\n    done\n\n    echo ${new_list[@]}\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local args=()\n  for\
    \ arg in $1; do\n    local prev_len=${#args[@]}\n    args=(${args[@]} $arg)\n\
    \    if [[ ${#args[@]} -ne $(( prev_len + 1 )) ]]; then\n      args=(${args[@]::-1})\n\
    \    fi\n  done\n  echo ${args[@]}\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local arr\n    arr=(\
    \ $1 )\n    for i in ${arr[@]}; do\n        grep -q -w \"$i\" <<< ${arr[@]} ||\
    \ echo -n \"$i \"\n    done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  if [ -z \"$1\" ]; then\n\
    \    return\n  fi\n  local list=($1)\n  local new_list=()\n  for item in \"${list[@]}\"\
    ; do\n    exists_in \"$item\" \"${new_list[@]}\" || new_list+=(\"$item\")\n  done\n\
    \  local result=\"\"\n  for item in \"${new_list[@]}\"; do\n    if [ -z \"$result\"\
    \ ]; then\n      result=\"\\\"$item\\\"\"\n    else\n      result=\"$result \\\
    \"$item\\\"\"\n    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpre_nsvyz.sh: line 15: exists_in: command not found

    /tmp/tmpre_nsvyz.sh: line 15: exists_in: command not found

    /tmp/tmpre_nsvyz.sh: line 15: exists_in: command not found

    /tmp/tmpre_nsvyz.sh: line 15: exists_in: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" |\n   \
    \ tr \" \" \"\\n\" |\n    sort |\n    uniq -u |\n    tr \"\\n\" \" \"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local line=\"\"\n  for\
    \ n in $1; do\n    # Creates a list of 'true'/'false' strings to see if n already\
    \ exists in line\n    local already_exists=$(echo $line | sed \"s/.*${n}.*/true/g\"\
    )\n    # If n doesn't exist in line, add it to the list\n    if [[ $already_exists\
    \ != \"true\" ]]; then\n      line=\"$line$n \"\n    fi\n  done\n  echo $line\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local arr=()\n  local\
    \ dupes=()\n  for elem in $1; do\n    if [[ ! \"${arr[@]}\" =~ \"$elem\" ]]; then\n\
    \      arr+=(\"$elem\")\n    else\n      dupes+=(\"$elem\")\n    fi\n  done\n\
    \  echo \"${arr[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local unique=($(echo\
    \ $1 | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n  echo ${unique[@]}\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=($1)\n \
    \   local unique_list=()\n    local prev_key\n    for num in \"${list[@]}\"; do\n\
    \        if [[ ! $prev_key ]]; then\n            unique_list+=(\"$num\")\n   \
    \     elif [[ $prev_key != $num ]]; then\n            unique_list+=(\"$num\")\n\
    \        fi\n        prev_key=$num\n    done\n    echo \"${unique_list[@]}\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a seen=()\n\
    \  echo $1 | xargs -n1 | while read value; do\n    if ! element_in \"$value\"\
    \ \"${seen[@]}\"; then\n      echo -n \"$value \"\n      seen+=($value)\n    fi\n\
    \  done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiyo6a4b4.sh: line 11: element_in: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local _ret_var=\"$1\"\
    \n    shift\n    local _arg_list=($@)\n    local _uniq_arg_list=($(echo \"${_arg_list[@]}\"\
    \ | tr ' ' '\\n' | sort -u | tr '\\n' ' '))\n    local _arg_list_len=\"${#_arg_list[@]}\"\
    \n    local _uniq_arg_list_len=\"${#_uniq_arg_list[@]}\"\n    # if the number\
    \ of elements is different, we had duplicates\n    [ \"$_arg_list_len\" -ne \"\
    $_uniq_arg_list_len\" ] &&\n        echo \"${_uniq_arg_list[@]}\" &&\n       \
    \ return 0 ||\n        return 1\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local elements=\"$1\"\
    \n  local array=$(echo \"$elements\" | tr ' ' '\\n' | awk '{if (a[$0]++ > 0) p[$0]=\"\
    \"; else p[$0]=$0} END {for (i in p) print p[i]}')\n  python -c \"import sys;\
    \ print ' '.join(sys.argv[1:])\" \"$array\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    declare -A arr\n  \
    \  out=()\n    for i in $1; do\n        arr[$i]=1\n    done\n    for i in $1;\
    \ do\n        if [[ ${arr[$i]} -eq 1 ]]; then\n            out+=($i)\n       \
    \     arr[$i]=0\n        fi\n    done\n    echo ${out[@]}\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local count=()\n\n  for\
    \ e in \"$@\"; do\n    count[$e]=$((count[$e] + 1))\n  done\n\n  for e in \"$@\"\
    ; do\n    if [[ ${count[$e]} -eq 1 ]]; then\n      echo -n \"$e \"\n    fi\n \
    \ done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp7775ry4d.sh: line 12: count[]: bad array subscript

    /tmp/tmp7775ry4d.sh: line 12: count[]: bad array subscript

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local _input=$1\n  local\
    \ _list=\"\"\n  for i in $_input; do\n    local _count=0\n    for j in $_input;\
    \ do\n      if [ \"$i\" == \"$j\" ]; then\n        _count=$((_count+1))\n    \
    \  fi\n    done\n    if [ \"$_count\" -eq 1 ]; then\n      _list=\"$_list $i\"\
    \n    fi\n  done\n  echo $_list\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $1 | tr ' ' '\\\
    n' | sort | uniq -u | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=$1\n  echo\
    \ \"${list[@]}\" \\\n    | tr \" \" \"\\n\" \\\n    | sort \\\n    | uniq -u \\\
    \n    | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  list=\"$1\"\n  awk 'BEGIN\
    \ {\n    split(\"'$list'\", a, \" \")\n    for (i = 1; i <= length(a); i++)\n\
    \      count[a[i]]++\n  } {\n    if (count[$1] == 1)\n      print $1\n  }'\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=10 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=15 encoding='utf-8'>
  timestamp: 1660025246
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  if [ $# -eq 0 ]; then\n\
    \    echo \"\"\n    return 0\n  fi\n\n  declare -a input=($1)\n  declare -a output=()\n\
    \  for i in ${input[@]}; do\n    for j in ${output[@]}; do\n      if [ \"$i\"\
    \ == \"$j\" ]; then\n        i=''\n        break\n      fi\n    done\n    if [\
    \ -n \"$i\" ]; then\n      output=(\"${output[@]}\" \"$i\")\n    fi\n  done\n\
    \  echo \"${output[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -a array\n  \
    \  local -a result\n    local -a dup\n    IFS=' ' read -a array <<< \"$1\"\n \
    \   for i in \"${array[@]}\"; do\n        if ! contains \"$i\" \"${dup[@]}\";\
    \ then\n            result+=(\"$i\")\n        else\n            dup+=(\"$i\")\n\
    \        fi\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    /tmp/tmpcf074c75.sh: line 14: contains: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # split string into\
    \ an array\n    declare -a to_remove=($(echo $1 | sed -e 's/ /\\n/g'))\n    declare\
    \ -a all=()\n    declare -a final=()\n    for a in \"${to_remove[@]}\"; do\n \
    \       # if this element is not in all array, add it\n        if [[ ! \" ${all[@]}\
    \ \" =~ \" ${a} \" ]]; then\n            all+=($a)\n            final+=($a)\n\
    \        # otherwise, check if it is in final array\n        elif [[ ! \" ${final[@]}\
    \ \" =~ \" ${a} \" ]]; then\n            final+=($a)\n        fi\n    done\n \
    \   # convert array to string\n    echo ${final[@]}\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  awk '!seen[$0]++' <<<\
    \ \"$1\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ local temp=${list// /'\\n'}\n  for i in $temp; do\n    local j=$(echo \"$list\"\
    \ | grep -o \"$i\" | wc -l)\n    if [ \"$j\" -gt 1 ]; then\n      list=${list//$i/}\n\
    \    fi\n  done\n  echo \"$list\"\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local t=$(mktemp)\n\
    \    local t2=$(mktemp)\n    local li\n    local i\n    for li in $1; do\n   \
    \     for i in $1; do\n            if [ \"$li\" == \"$i\" ]; then\n          \
    \      echo \"$li\" >> $t\n            fi\n        done\n    done\n    sort -u\
    \ $t >> $t2\n    echo $(cat $t2)\n    rm $t $t2\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $(echo \"$1\"\
    \ | tr ' ' '\\n' | uniq)\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo -n \"[\"\n   \
    \ for value in $1; do\n        OCCURRENCES=$(grep -o $value <<< \"$1\" | wc -l)\n\
    \        if [ $OCCURRENCES -eq 1 ]; then\n            echo -n \"\\\"$value\\\"\
    , \"\n        fi\n    done\n    echo -n \"]\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $(echo \"$1\" |\
    \ tr ' ' '\\n' | sort | uniq -u | tr '\\n' ' ')\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    declare -A seen_elements\n\
    \    declare -a result\n    for element in $1; do\n        if [ -z \"${seen_elements[$element]}\"\
    \ ]; then\n            seen_elements[$element]=1\n            result+=(\"\\\"\
    $element\\\"\")\n        fi\n    done\n    # shellcheck disable=SC2068\n    echo\
    \ $(echo \"${result[@]}\")\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # Convert input list\
    \ to array\n    local arr=(\"$@\")\n    local n=${#arr[@]}\n\n    # Check for\
    \ duplicate elements\n    for ((i=0; i<n; i++)); do\n        local current=${arr[i]}\n\
    \        for ((j=i+1; j<n; j++)); do\n            if [[ ${arr[j]} == \"$current\"\
    \ ]]; then\n                unset arr[j]\n            fi\n        done\n    done\n\
    \n    # Reconvert array to list\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    awk '\n    BEGIN {FS=\"\
    \ \"; RS=\"\"}\n    {\n        for (i=1; i<=NF; i++) {\n            if (!seen[$i]++)\
    \ {\n                out = out $i\n            }\n        }\n    }\n    END {\n\
    \        split(out, out_arr, \" \")\n        for (i in out_arr) {\n          \
    \  print \"\\\"\" out_arr[i] \"\\\"\"\n        }\n    }\n    ' <<< \"$1\"\n}\n\
    \ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\"\
    \ ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local _list=$1\n  \
    \  local _uniq\n\n    _uniq=$(echo \"$_list\" | tr ' ' '\\n' | sort -u | tr '\\\
    n' ' ')\n    echo \"$_uniq\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local -a in=($1)\n  local\
    \ -a out\n  local -A seen\n\n  for n in \"${in[@]}\"; do\n    if [[ -z \"${seen[$n]}\"\
    \ ]]; then\n      out+=(\"$n\")\n      seen[$n]=1\n    fi\n  done\n\n  printf\
    \ \"%s\\n\" \"${out[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local string=$1\n \
    \   local list=($string)\n    local output=\"\"\n    local index=0\n    local\
    \ count=0\n    for i in \"${list[@]}\"; do\n        for j in \"${list[@]}\"; do\n\
    \            if [ \"$i\" == \"$j\" ]; then\n                ((count++))\n    \
    \        fi\n        done\n        if [ \"$count\" -eq 1 ]; then\n           \
    \ output+=\"${list[$index]} \"\n        fi\n        ((index++))\n        count=0\n\
    \    done\n    echo $output\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input_list=\"\
    $@\"\n    local list_array=()\n    local list_counts=()\n    IFS=' ' read -r -a\
    \ list_array <<< \"$input_list\"\n    local value\n    for value in \"${list_array[@]}\"\
    ; do\n        local count=$(echo \"$input_list\" | grep -c \"$value\")\n     \
    \   if [[ \"$count\" != \"1\" ]]; then\n            list_counts+=(\"$value\")\n\
    \        fi\n    done\n    echo \"${list_counts[@]}\"\n}\n\ncandidate() {\n  \
    \  remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    printf \"%s\\n\" \"\
    $1\" | awk '!x[$0]++'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local list=\"$1\"\n\
    \    echo -n \"[\"\n    for n in $list; do\n        echo -n \"$(__occur_count\
    \ $list $n) \"\n    done | grep -v \" 2\" | awk '{print \"\\\"\"$2\"\\\"\"}' |\
    \ paste -sd \",\" -\n    echo \"]\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$*\"\n\
    \  local arr=($input)\n  local i\n  for i in \"${arr[@]}\"; do\n    if [[ \"${arr[*]}\"\
    \ =~ ${i}\\ ${i} ]]; then\n      arr=(${arr[@]/${i}/})\n    fi\n  done\n  echo\
    \ ${arr[@]}\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # Create a new list\
    \ with only the unique values\n    # Create a list by joining all the elements\
    \ in $1 with spaces in between\n    unique_list=($(printf \"%s\\n\" \"${1}\" |\
    \ sort -u))\n\n    # Create a list of all elements that are in $1 but not in $unique_list\n\
    \    non_unique_list=($(printf \"%s\\n\" \"${1}\" | sort | uniq -u))\n\n    #\
    \ For each element in $1, check if it's a member of $non_unique_list\n    # If\
    \ it is, remove it from the final list\n    final_list=()\n    for elem in ${1};\
    \ do\n        if [[ \" ${non_unique_list[@]} \" =~ \" ${elem} \" ]]; then\n  \
    \          continue\n        fi\n        final_list+=(\"${elem}\")\n    done\n\
    \n    printf \"%s\\n\" \"${final_list[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local arr=()\n\n  # Build\
    \ an array, without duplicates\n  for i in ${1}; do\n    if [[ ! \" ${arr[@]}\
    \ \" =~ \" ${i} \" ]]; then\n      arr+=(${i})\n    fi\n  done\n\n  # Convert\
    \ the array to JSON\n  local list=\"\"\n  local item=\"\"\n  for i in ${arr[@]};\
    \ do\n    item=\"${i}\"\n    list=\"${list}, \\\"${item}\\\"\"\n  done\n  list=\"\
    [${list#, }]\"\n  echo ${list}\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \    shift\n    local tmp=\"$(mktemp -t tmp.XXXXXXXXXX)\"\n    local output=\"\
    $(mktemp -t tmp.XXXXXXXXXX)\"\n    # First remove whitespace, then remove duplicate\
    \ lines\n    echo \"$input\" | tr -d '[:space:]' | sort | uniq > \"$tmp\"\n  \
    \  # Now add back the whitespace\n    local -a array=()\n    while read -r num;\
    \ do\n        array+=(\"$num\")\n    done < \"$tmp\"\n    echo \"${array[@]}\"\
    \ | tr ' ' '\\n' > \"$output\"\n    cat \"$output\"\n    rm \"$tmp\" \"$output\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    python -c \"\n\nitems\
    \ = '$1'.split()\nresults = []\nfor i in items:\n    if i not in results:\n  \
    \      results.append(i)\nprint(results)\n\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $(echo \"$1\" |\
    \ tr ' ' '\\n' | sort | uniq -u | tr '\\n' ' ')\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 2
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $1 | awk 'BEGIN\
    \ {\n        # Split string into an array of characters\n        split(\"\", chars)\n\
    \        # Split string into an array of integers\n        # \"1 2 3 2 4\" ->\
    \ [1, 2, 3, 2, 4]\n        split($0, ints, \" \")\n    } {\n        # Iterate\
    \ over each item in ints\n        for (i in ints) {\n            # For each int,\
    \ there's a corresponding char\n            # 0 = unvisited\n            # 1 =\
    \ visited once\n            # 2 = visited more than once\n            if (chars[ints[i]]\
    \ == 1) {\n                chars[ints[i]] = 2\n            } else if (chars[ints[i]]\
    \ == 0) {\n                chars[ints[i]] = 1\n            }\n        }\n    }\
    \ END {\n        # Print result\n        for (i in ints) {\n            if (chars[ints[i]]\
    \ == 1) {\n                printf(\"%s \", ints[i])\n            }\n        }\n\
    \    }'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe_wfby4e.sh: line 22: syntax error near unexpected token `{''

    /tmp/tmpe_wfby4e.sh: line 22: `            if (chars[ints[i]] == 1) {''

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    (\n        local -a\
    \ ar=($1)\n        local index=0\n        local count=0\n        for elem in \"\
    ${ar[@]}\"; do\n            count=0\n            for ((i=0; i<${#ar[@]}; i++));\
    \ do\n                if [ \"$elem\" == \"${ar[$i]}\" ]; then\n              \
    \      count=$((count+1))\n                fi\n            done\n            if\
    \ [ \"$count\" -eq 1 ]; then\n                ar[$index]=\"$elem\"\n         \
    \       index=$((index+1))\n            fi\n        done\n        echo \"${ar[@]:0:$index}\"\
    \n    )\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  printf \"[$(for x in\
    \ $1; do printf '\"%s\",' \"$x\"; done \\\n    | sed -e 's/,$//' -e 's/,/\", \"\
    /g')]\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local ARR=()\n    local\
    \ OUT=()\n    for i in $1; do\n        if ! in_array \"$i\" \"${ARR[@]}\"; then\n\
    \            ARR+=(\"$i\")\n            OUT+=(\"$i\")\n        fi\n    done\n\
    \    echo \"${OUT[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    /tmp/tmpvfkzj_2b.sh: line 12: in_array: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local values_array=()\n\
    \    local unique_values_array=()\n    local found=0\n    local value\n    read\
    \ -a values_array <<< $1\n    for value in \"${values_array[@]}\"; do\n      \
    \  for unique_value in \"${unique_values_array[@]}\"; do\n            if [ \"\
    $unique_value\" == \"$value\" ]; then\n                found=1\n             \
    \   break\n            fi\n        done\n        if [ $found -eq 0 ]; then\n \
    \           unique_values_array+=($value)\n        fi\n        found=0\n    done\n\
    \    echo \"${unique_values_array[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local n\n  local arr=()\n\
    \  for n in \"$@\"; do\n    if [[ ! \" ${arr[*]} \" =~ \" ${n} \" ]]; then\n \
    \     arr+=(\"$n\")\n    fi\n  done\n  printf \"[%s]\" \"$(IFS=,; echo \"${arr[*]}\"\
    )\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $1 | tr \" \" \"\
    \\n\" | awk '!($0 in array) {array[$0]; print}'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    printf \"%s\\n\" \"\
    $1\" | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local temp_file_name=$(temp_file_name)\n\
    \  local temp_file_name2=$(temp_file_name)\n  echo \"$1\" | tr \" \" \"\\n\" |\
    \ sort -u | tr \"\\n\" \" \" > \"$temp_file_name\"\n  echo \"$1\" | tr \" \" \"\
    \\n\" | sort | uniq -d | tr \"\\n\" \" \" > \"$temp_file_name2\"\n  comm -23 \"\
    $temp_file_name\" \"$temp_file_name2\"\n  rm \"$temp_file_name\" \"$temp_file_name2\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph6bhzd73.sh: line 9: temp_file_name: command not found

    /tmp/tmph6bhzd73.sh: line 10: temp_file_name: command not found

    /tmp/tmph6bhzd73.sh: line 11: : No such file or directory

    /tmp/tmph6bhzd73.sh: line 12: : No such file or directory

    comm: '''': No such file or directory

    rm: cannot remove '''': No such file or directory

    rm: cannot remove '''': No such file or directory

    /tmp/tmph6bhzd73.sh: line 9: temp_file_name: command not found

    /tmp/tmph6bhzd73.sh: line 10: temp_file_name: command not found

    /tmp/tmph6bhzd73.sh: line 11: : No such file or directory

    /tmp/tmph6bhzd73.sh: line 12: : No such file or directory

    comm: '''': No such file or directory

    rm: cannot remove '''': No such file or directory

    rm: cannot remove '''': No such file or directory

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | awk '!x[$0]++'\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    $(dirname $0)/uniq.sh\
    \ \"$1\" | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmksc258a.sh: line 9: /tmp/uniq.sh: No such file or directory

    /tmp/tmpmksc258a.sh: line 9: /tmp/uniq.sh: No such file or directory

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    while IFS= read -ra\
    \ arr; do\n        echo \"${arr[@]}\" | tr ' ' '\\n' | sort | uniq -u | tr '\\\
    n' ' '\n    done <<< \"$1\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=()\n  local\
    \ list_size=0\n  local list_size_last=0\n  local unique_list=()\n  local unique_list_size=0\n\
    \  local unique_list_size_last=0\n  local i=0\n  local j=0\n  for element in $1\n\
    \  do\n    list[$list_size]=$element\n    list_size=$((list_size+1))\n  done\n\
    \  list_size_last=$((list_size-1))\n  for ((i=0; i<=list_size_last; i++))\n  do\n\
    \    for ((j=0; j<=unique_list_size_last; j++))\n    do\n      if [ \"${list[$i]}\"\
    \ == \"${unique_list[$j]}\" ]\n      then\n        break\n      fi\n    done\n\
    \    if [ $j -gt $unique_list_size_last ]\n    then\n      unique_list[$unique_list_size]=${list[$i]}\n\
    \      unique_list_size=$((unique_list_size+1))\n      unique_list_size_last=$((unique_list_size-1))\n\
    \    fi\n  done\n  for ((i=0; i<=unique_list_size_last; i++))\n  do\n    echo\
    \ -n \"\\\"${unique_list[$i]}\\\"\"\n    if [ $i -lt $unique_list_size_last ]\n\
    \    then\n      echo -n \" \"\n    fi\n  done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=$(echo \"\
    $1\" | tr \" \" \"\\n\")\n  local result=\"\"\n  local seen=\"\"\n  for i in $input;\
    \ do\n    if [ \"$(echo $seen | grep $i)\" == \"\" ]; then\n      result=\"$result\
    \ $i\"\n      seen=\"$seen $i\"\n    fi\n  done\n  echo $result\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=$1\n  \
    \  local temp_file=$(mktemp)\n    for x in $input; do\n        echo \"$x\" >>\
    \ $temp_file\n    done\n    local result=$(sort $temp_file | uniq -u)\n    echo\
    \ $result\n    rm $temp_file\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $1 | tr \" \"\
    \ \"\\n\" | sort | uniq -u | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local IFS=$' '\n  \
    \  local -a array=(\"$@\")\n    local -a result=()\n    for e in \"${array[@]}\"\
    ; do\n        if [[ ! \" ${result[*]} \" =~ \" ${e} \" ]]; then\n            result=(\"\
    ${result[@]}\" \"$e\")\n        fi\n    done\n    echo \"${result[@]}\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # Split string into\
    \ array using ' ' (space) as separator\n    IFS=' ' read -r -a array <<< \"$1\"\
    \n    # Remove duplicate items\n    uniq=($(printf \"%s\\n\" \"${array[@]}\" |\
    \ sort -u))\n    # Join items of array by ' ' (space)\n    echo \"${uniq[*]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # TODO: Replace this\
    \ with a smart solution\n    echo $1 | tr ' ' '\\n' | sort | uniq -u | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo -n \"$1\" | awk\
    \ '{\n        for (i = 1; i <= NF; i++) {\n            if (!seen[$i]++) {\n  \
    \              print $i;\n            }\n        }\n    }'\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    < $1 tr ' ' '\\n' |\
    \ sort | uniq -u | xargs\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyens9f60.sh: line 9: $1: ambiguous redirect

    /tmp/tmpyens9f60.sh: line 9: $1: ambiguous redirect

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a in=($1)\n\
    \  declare -a out\n\n  for v in \"${in[@]}\"; do\n    if [[ ! \" ${out[@]} \"\
    \ =~ \" ${v} \" ]]; then\n      out+=(\"$v\")\n    fi\n  done\n\n  echo \"${out[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | awk '{\n\
    \        for (i = 1; i <= NF; i++) {\n            if (seen[$i] == 0) {\n     \
    \           seen[$i] = 1;\n                print $i;\n            }\n        }\n\
    \    }'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    python -c '\nimport\
    \ sys\nnumbers = [int(x) for x in sys.argv[1].split()]\ndone = set()\nfor number\
    \ in numbers:\n    if number not in done:\n        print number\n        done.add(number)\n\
    ' \"$1\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ echo \"$list\" | tr ' ' '\\n' | sort | uniq -u | tr '\\n' ' '\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -r input=\"$1\"\
    \n    local -r tmpfile=$(mktemp)\n    local -r tmpfile2=$(mktemp)\n    local -r\
    \ tmpfile3=$(mktemp)\n    local -r tmpfile4=$(mktemp)\n    local -r tmpfile5=$(mktemp)\n\
    \    local -r tmpfile6=$(mktemp)\n    local -r tmpfile7=$(mktemp)\n    local -r\
    \ tmpfile8=$(mktemp)\n    echo \"$input\" | tr ' ' '\\n' | sort -u > \"$tmpfile\"\
    \n    echo \"$input\" | tr ' ' '\\n' | sort > \"$tmpfile2\"\n    join \"$tmpfile\"\
    \ \"$tmpfile2\" > \"$tmpfile3\"\n    echo \"$input\" | tr ' ' '\\n' | sort -u\
    \ > \"$tmpfile4\"\n    echo \"$input\" | tr ' ' '\\n' | sort > \"$tmpfile5\"\n\
    \    join \"$tmpfile4\" \"$tmpfile5\" > \"$tmpfile6\"\n    join \"$tmpfile3\"\
    \ \"$tmpfile6\" | cut -d' ' -f1 | sort -u > \"$tmpfile7\"\n    join \"$tmpfile\"\
    \ \"$tmpfile7\" > \"$tmpfile8\"\n    cat \"$tmpfile8\" | tr '\\n' ' '\n    echo\n\
    \    rm \"$tmpfile\" \"$tmpfile2\" \"$tmpfile3\" \"$tmpfile4\" \"$tmpfile5\" \"\
    $tmpfile6\" \"$tmpfile7\" \"$tmpfile8\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # awk script\n    #\
    \ 'seen[$0]++' sets seen[$0] to 1 if it hasn't been seen before\n    # 0 prints\
    \ the line if it hasn't been seen before\n    # 1 prints the line if it has been\
    \ seen before\n    echo $@ | tr ' ' '\\n' | awk '!seen[$0]++'\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$@\" | tr '\
    \ ' '\\n' | awk '{\n        if ($1 in a)\n            next\n        a[$1] = 1\n\
    \        print $1\n    }'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local str result\n  str=$(echo\
    \ $1 | sed -E 's/\\s+/ /g' | tr ' ' '\\n' | sort | uniq -c | sed -E 's/^\\s*//')\n\
    \  while read -r line; do\n    count=$(echo $line | cut -d ' ' -f 1)\n    if [[\
    \ $count -eq 1 ]]; then\n      result+=$(echo $line | cut -d ' ' -f 2)\n     \
    \ result+=' '\n    fi\n  done <<< \"$str\"\n  echo \"[$(sed -E 's/\\s+/\", \"\
    /g' <<< $result)]\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  if [ -z \"$1\" ]; then\n\
    \    echo '[]'\n    return\n  fi\n\n  prev=\"\"\n  out=()\n  for n in $1; do\n\
    \    if [ \"$n\" != \"$prev\" ]; then\n      out+=($n)\n    fi\n    prev=$n\n\
    \  done\n  echo \"${out[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # Convert input string\
    \ to array using space as a delimiter\n    local -a arr=($1)\n    # Declare an\
    \ associative array\n    declare -A seen=()\n    # Process each element of the\
    \ array\n    for i in \"${arr[@]}\"; do\n        # If the value of the element\
    \ is not present in the \"seen\" array, print it and store it\n        if [ -z\
    \ \"${seen[$i]}\" ]; then\n            echo $i\n            seen[$i]=1\n     \
    \   fi\n    done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  # Make input into an\
    \ array\n  a=($(echo $1))\n  b=()\n  for i in \"${a[@]}\"; do\n    # Add element\
    \ to b if it is not in b and not in a\n    [[ ! \" ${b[*]} \" == *\" $i \"* ]]\
    \ && b+=($i)\n  done\n  printf '%s\\n' \"${b[@]}\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n \
    \ local arr=($list)\n  local found=()\n  local out=()\n  for i in \"${arr[@]}\"\
    ; do\n    if [[ \" ${found[*]} \" != *\" $i \"* ]]; then\n      found+=($i)\n\
    \      out+=($i)\n    fi\n  done\n  echo \"${out[@]}\"\n}\n\ncandidate() {\n \
    \   remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local seen\n    for\
    \ n in $1; do\n        if [[ -z \"${seen[$n]}\" ]]; then\n            seen[$n]=1\n\
    \            printf \"$n \"\n        fi\n    done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local args=\"\"\n \
    \   for i in $1; do\n        if [ \"$(printf \"$1\" | grep -c \"$i\")\" -eq 1\
    \ ]; then\n            args=\"$args $i\"\n        fi\n    done\n    echo \"$args\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # Turn the input space-separated\
    \ list into a Python comma-separated list\n    input=\"$(echo \"$1\" | sed 's/\
    \ /,/g')\"\n    python -c \"print(list(set([\"\"$input\"\"])))\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$1\"\n\
    \  local prev=\"\"\n  for i in $input; do\n    if [ \"$i\" == \"$prev\" ]; then\n\
    \      prev=\"\"\n    else\n      prev=\"$i\"\n      echo $i\n    fi\n  done\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  if [ -z \"$1\" ]; then\n\
    \    echo \"[]\"\n    return 0\n  fi\n\n  # $1 will be \"1 2 3 ...\"\n  # Convert\
    \ it to string \"[1, 2, 3, ...]\"\n  local arr=\"[$(echo \"$1\" | tr \" \" \"\
    ,\")]\"\n  # Convert array to an associative array (dict in Python)\n  local set=\"\
    ($arr)\"\n  # Get all keys\n  local keys=\"${!set[@]}\"\n  # Convert all keys\
    \ to an array\n  local keys=\"($keys)\"\n  # Iterate over keys and get only ones\
    \ which value is 1\n  local res=\"(${keys[@]/*/[${set[$REPLY]}]==1})\"\n  # Join\
    \ array with spaces to make a string\n  echo \"${res[*]}\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # This is a bash-ism.\n\
    \    echo $1 | xargs -n1 | sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=$1\n  echo\
    \ \"$input\" | awk '{a[$0]++}END{for(i in a)if(a[i]==1)print i}'\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$1\"\n\
    \  local -a words\n  local -a seen\n  local word\n\n  words=($input)\n  for word\
    \ in \"${words[@]}\"; do\n    if list_contains \"$word\" \"${seen[@]}\"; then\n\
    \      continue\n    fi\n    seen+=($word)\n  done\n\n  echo \"${seen[@]}\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    /tmp/tmp347plfwt.sh: line 16: list_contains: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    if ! is_list \"$1\"\
    ; then\n        raise \"Not a list: $1\"\n    fi\n    echo \"$1\" | tr ' ' '\\\
    n' | sort | uniq -u | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjp4fn353.sh: line 9: is_list: command not found

    /tmp/tmpjp4fn353.sh: line 10: raise: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    out=$(echo \"$1\" |\
    \ tr ' ' '\\n' | sort | uniq -u)\n    echo $out\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $1 | tr ' ' '\\\
    n' | awk '!a[$0]++' | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local __array_name=$1\n\
    \  local __resultvar=$2\n  local i\n  local __ele\n  declare -A __newarr\n  local\
    \ __newarr_index=0\n  local __result_to_return=\"\"\n  local __array=(${__array_name})\n\
    \  for i in \"${__array[@]}\"; do\n    __ele=${i}\n    if [[ ! ${__newarr[${__ele}]+_}\
    \ ]]; then\n      __newarr[${__ele}]=1\n      __newarr_index=$((__newarr_index+1))\n\
    \    else\n      __newarr[${__ele}]=$((__newarr[${__ele}]+1))\n    fi\n  done\n\
    \  for i in \"${__array[@]}\"; do\n    __ele=${i}\n    if [[ ${__newarr[${__ele}]}\
    \ -eq 1 ]]; then\n      __result_to_return=\"${__result_to_return}${__ele} \"\n\
    \    fi\n  done\n  __result_to_return=$(echo ${__result_to_return} | sed -e 's/[[:space:]]*$//')\n\
    \  eval $__resultvar=\"'${__result_to_return}'\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpze9usw8o.sh: line 33: =: command not found

    /tmp/tmpze9usw8o.sh: line 33: =1 2 3 4: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  #\n  # Create an array\
    \ of integers\n  #\n  declare -a list\n  counter=0\n  for i in $1; do\n    list[$counter]=$i\n\
    \    ((counter++))\n  done\n  #\n  # Declare associative array for integer frequencies\n\
    \  #\n  declare -A frequencies\n  for i in \"${list[@]}\"; do\n    frequencies[$i]=0\n\
    \  done\n  #\n  # Get frequencies\n  #\n  for i in \"${list[@]}\"; do\n    frequencies[$i]=$((frequencies[$i]\
    \ + 1))\n  done\n  #\n  # Print integers in order of occurrence in list, but only\
    \ print each integer\n  # one time\n  #\n  for i in \"${list[@]}\"; do\n    if\
    \ [[ ${frequencies[$i]} -eq 1 ]]; then\n      printf \"$i \"\n    fi\n  done\n\
    \  printf \"\\n\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list=(\"$@\")\n\
    \  local i\n  for ((i=${#list[@]}-1; i >= 0; i--)); do\n    local x=${list[i]}\n\
    \    local n=0\n    for j in ${list[@]}; do\n      if [[ $x == $j ]]; then\n \
    \       n=$((n+1))\n      fi\n    done\n    if [[ $n -gt 1 ]]; then\n      unset\
    \ \"list[i]\"\n    fi\n  done\n  echo ${list[@]}\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local space_separated_list=$1\n\
    \    local result=$(echo \"$space_separated_list\" | tr ' ' '\\n' | uniq -u |\
    \ tr '\\n' ' ')\n    echo \"$result\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=${1?missing\
    \ input}\n    local count=\"$(echo \"$input\" | tr ' ' '\\n' | sort | uniq -c\
    \ | awk '$1 > 1 { print $2 }')\"\n    local parens=\"(|)\"\n    for n in $count;\
    \ do\n        parens=\"${parens}${n}|\"\n    done\n    parens=\"${parens%?})\"\
    \n    echo \"$input\" | tr ' ' '\\n' | awk '!($0 ~ /'\"$parens\"'/) { print $0\
    \ }'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # add a space to the\
    \ end to make all the pipes work\n    # this is ugly but I don't know how to make\
    \ it better\n    list=\"$1 \"\n    for n in $list; do\n        # if n has not\
    \ been seen before, output it, then remember it\n        # otherwise, don't output,\
    \ don't remember\n        #\n        # this works because the first time we see\
    \ a number, it's not\n        # in the list yet\n        #\n        # this is\
    \ a little magical because we don't have regexes in\n        # bash\n        if\
    \ ! echo \"$list\" | grep -q \" $n \"; then\n            echo $n\n        fi\n\
    \    done\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $1 | sed -E \"\
    s/([^[:space:]]+).*\\1/\\1/g\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -a arr=(\"$@\"\
    )\n    local -a unique_arr=()\n    for i in \"${arr[@]}\"; do\n        if [[ !\
    \ \"${unique_arr[@]}\" =~ \"$i\" ]]; then\n            unique_arr+=(\"$i\")\n\
    \        fi\n    done\n    echo \"${unique_arr[@]}\"\n}\n\ncandidate() {\n   \
    \ remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    if [ \"$#\" -eq 1 ];\
    \ then\n        echo \"$1\" | tr ' ' '\\n' | awk '!seen[$0]++' | tr '\\n' ' '\n\
    \    else\n        echo \"expects 1 arg\" >&2\n        return 1\n    fi\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local -n __remove_duplicates_ARRAY=$1\n\
    \  __remove_duplicates_ARRAY=($(printf \"%s\\n\" \"${__remove_duplicates_ARRAY[@]}\"\
    \ | awk '!a[$0]++'))\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbq7s8mx6.sh: line 9: local: `'': not a valid identifier

    /tmp/tmpbq7s8mx6.sh: line 9: local: `1 2 3 4'': invalid variable name for name
    reference

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $1 | awk '\n  BEGIN\
    \ {\n    RS=\" \";\n    ORS=\" \";\n  }\n  {\n    a[$0]++;\n  }\n  END {\n   \
    \ for (i in a) {\n      if (a[i] == 1) {\n        print i;\n      }\n    }\n \
    \ }'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  awk '!x[$0]++' <<< \"\
    $1\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $1 | tr ' ' '\\\
    n' | sort | uniq -u | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local array=($1)\n\
    \    local dupes=$(printf '%s\\n' \"${array[@]}\" | sort | uniq -d)\n    printf\
    \ '%s\\n' \"${array[@]}\" | sort | uniq -u | sed 's/^/\"/g;s/$/\"/g'\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local integer_list=\"\
    \"\n  local output=\"\"\n  integer_list=\"$(echo $1 | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -n | grep -v '^\\s*2' | awk '{print $2}')\"\n  for integer in $integer_list;\
    \ do\n    if [ -z \"$output\" ]; then\n      output=\"\\\"$integer\\\"\"\n   \
    \ else\n      output=\"$output, \\\"$integer\\\"\"\n    fi\n  done\n  echo \"\
    [$output]\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a arr=(${@})\n\
    \  declare -a non_duplicates=()\n  declare -a duplicates=()\n  declare -a mixed_in_order=()\n\
    \  declare -a mixed_indexes=()\n  declare -a mixed_unique_indexes=()\n  declare\
    \ -a mixed_unique_indexes_sorted=()\n  declare -a mixed_unique_indexes_sorted_filtered=()\n\
    \  declare -a mixed_unique_indexes_sorted_filtered_value=()\n  declare -a unique_indexes=()\n\
    \  declare -a unique_indexes_sorted=()\n  declare -a unique_indexes_sorted_filtered=()\n\
    \  declare -a unique_indexes_sorted_filtered_value=()\n  declare -a non_duplicates_indexes=()\n\
    \  declare -a duplicates_indexes=()\n  declare -a duplicates_indexes_value=()\n\
    \  declare -a non_duplicates_indexes_value=()\n  declare -a duplicates_indexes_sorted=()\n\
    \  declare -a non_duplicates_indexes_sorted=()\n  declare -a duplicates_indexes_value_sorted=()\n\
    \  declare -a non_duplicates_indexes_value_sorted=()\n  declare -a duplicates_indexes_sorted_filtered=()\n\
    \  declare -a non_duplicates_indexes_sorted_filtered=()\n  declare -a duplicates_indexes_value_sorted_filtered=()\n\
    \  declare -a non_duplicates_indexes_value_sorted_filtered=()\n  declare -a keep_indexes=()\n\
    \  declare -a keep_indexes_sorted=()\n  declare -a keep_indexes_sorted_filtered=()\n\
    \  declare -a keep_indexes_sorted_filtered_value=()\n  declare -a keep_values=()\n\
    \  declare -a keep_values_sorted=()\n  declare -a keep_values_sorted_filtered=()\n\
    \  declare -a keep_values_sorted_filtered_value=()\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list\n  read -r\
    \ -a list <<< \"$1\"\n  echo \"${list[@]}\" | tr ' ' '\\n' | sort | uniq -u\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local numbers=($1)\n\
    \    for number in \"${numbers[@]}\"; do\n        echo \"$number\"\n    done |\
    \ awk '!seen[$0]++'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo $(echo \"$@\" |\
    \ tr ' ' '\\n' | sort | uniq -u)\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a array=$@\n\
    \n  declare -a result=()\n  for i in ${array[@]}; do\n    if [[ ! ${result[@]}\
    \ =~ \"$i\" ]]; then\n      result+=($i)\n    fi\n  done\n\n  echo ${result[@]}\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  readarray arr <<< \"\
    $1\"\n  echo $( echo \"${arr[@]}\" | tr ' ' '\\n' | awk '{ if (++dup[$0] == 1)\
    \ print $0; }' )\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $1 | xargs -n1\
    \ | awk '!x[$0]++'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  awk '!x[$0]++' <<<\"\
    $1\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local input=\"$1\"\n\
    \    python3 -c \"\nimport sys\nfrom collections import OrderedDict\n\ndef print_unique(s):\n\
    \    print(sorted(OrderedDict.fromkeys(s.split())))\n\nprint_unique(sys.argv[1])\n\
    \" \"$input\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local dup_list=()\n \
    \ for int in $1; do\n    dup_list+=($int)\n  done\n  echo \"${dup_list[@]}\" |\
    \ sort | uniq -u\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    python -c \"\nimport\
    \ sys\n\n# Read input and convert it to a list of ints\ndata = list(map(int, sys.stdin.read().split()))\n\
    \n# Count occurrences of each int\ncounts = dict()\nfor x in data:\n    counts[x]\
    \ = counts.get(x, 0) + 1\n\n# Return only ints which occur once\nfor x in data:\n\
    \    if counts[x] == 1:\n        print(x)\n\" <<< \"$1\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  $PYTHON -c \"print '\
    \ '.join(sorted(set(map(int, '$1'.split())), key=lambda x: int('$1'.split().index(str(x)))))\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg3d0lmnf.sh: line 9: -c: command not found

    /tmp/tmpg3d0lmnf.sh: line 9: -c: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    cat \"$@\" | awk '{\
    \ arr[$0]++ } END { for (key in arr) { if (arr[key] == 1) { print key } } }'\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cat: '''': No such file or directory

    cat: ''1 2 3 4'': No such file or directory

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $(\n        for\
    \ number in $1; do\n            count=$(echo $1 | grep -o $number | wc -l)\n \
    \           if [[ $count -eq 1 ]]; then\n                echo $number\n      \
    \      fi\n        done\n    )\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local seen=()\n  local\
    \ word\n  for word in $1; do\n    # Check whether $word is already in $seen by\
    \ seeing if \"${seen[*]}\" contains \"$word\"\n    # ${seen[*]} expands to a single\
    \ string, the elements of $seen separated by spaces\n    [[ \" ${seen[*]} \" ==\
    \ *\" $word \"* ]] || seen+=(\"$word\")\n  done\n  echo \"${seen[@]}\"\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local element\n   \
    \ local -a elements\n    local -a output\n    local -A used\n    IFS=\" \" read\
    \ -r -a elements <<< \"$1\"\n    for element in \"${elements[@]}\"; do\n     \
    \   if [[ -z \"${used[$element]}\" ]]; then\n            output+=(\"$element\"\
    )\n            used[$element]=1\n        fi\n    done\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  # Convert the list to\
    \ an associative array,\n  # where value is the amount of times the key occurs\
    \ in the list.\n  declare -A a\n  for x in $1; do\n    (( a[$x]++ ))\n  done\n\
    \n  # Print only keys which have value 1.\n  for x in \"${!a[@]}\"; do\n    if\
    \ [[ ${a[$x]} -eq 1 ]]; then\n      echo \"$x\"\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo $(tr ' ' '\\n'\
    \ <<< \"$1\" | awk '{print $0, count[$0]++}' | grep -v \"1 \" | cut -d' ' -f1)\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | awk '!seen[$0]++'\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  unique_args=\"\"\n  for\
    \ arg in $1; do\n    if [[ \" $unique_args \" =~ \" $arg \" ]]; then\n      echo\
    \ \"Warning: $arg appears multiple times in $1\"\n    else\n      unique_args=\"\
    $unique_args $arg\"\n    fi\n  done\n  echo \"$unique_args\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    while read n; do\n\
    \        echo \"$n\"\n    done < <(echo \"$1\" | tr ' ' '\\n' | sort | uniq -u)\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 0
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local elements=\"$1\"\
    \n    local seen_before=()\n    local first_appearance=()\n    local result=()\n\
    \    local i=0\n    for element in $elements; do\n        if [[ -z \"${seen_before[$element]}\"\
    \ ]]; then\n            seen_before[$element]=1\n            first_appearance[$element]=$i\n\
    \        else\n            seen_before[$element]=$(( ${seen_before[$element]}\
    \ + 1 ))\n        fi\n        i=$(( i + 1 ))\n    done\n    i=0\n    for element\
    \ in $elements; do\n        if [[ \"${seen_before[$element]}\" == \"1\" ]]; then\n\
    \            result[${first_appearance[$element]}]=$element\n        fi\n    done\n\
    \    echo ${result[@]}\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=($1)\n  #\
    \ declare array to keep track of unique values\n  declare -A processed\n  # array\
    \ of output lines\n  local output=()\n  for element in \"${input[@]}\"; do\n \
    \   # when we see a unique value\n    if [ -z \"${processed[$element]}\" ]; then\n\
    \      # add it to the output and mark as processed\n      output+=(\"$element\"\
    )\n      processed[$element]=true\n    fi\n  done\n  # output a space-separated\
    \ string\n  local string=\"${output[@]}\"\n  echo \"${string// / }\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  if [[ -z \"$1\" ]]; then\n\
    \    echo \"[]\"\n    return\n  fi\n\n  local input=($1)\n  local unique=()\n\
    \  unique+=(\"${input[0]}\")\n  local output=()\n  output+=(\"${input[0]}\")\n\
    \n  for index in $(seq 1 $((${#input[@]} - 1))); do\n    value=\"${input[$index]}\"\
    \n    keep=1\n    for element in \"${unique[@]}\"; do\n      if [[ \"$element\"\
    \ == \"$value\" ]]; then\n        keep=0\n        break\n      fi\n    done\n\
    \    if [[ $keep -eq 1 ]]; then\n      unique+=(\"$value\")\n      output+=(\"\
    $value\")\n    fi\n  done\n\n  echo $(python -c \"print ' '.join($(echo $(printf\
    \ \"%q \" \"${output[@]}\")))\")\n}\n\ncandidate() {\n    remove_duplicates \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | tr '\
    \ ' '\\n' | awk '!seen[$0]++' | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local results=\n  while\
    \ read -r element; do\n    if ! check_if_in \"$element\" \"$results\"; then\n\
    \      results=\"$results $element\"\n    fi\n  done <<< \"$1\"\n  echo \"$results\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnyktx1ye.sh: line 11: check_if_in: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local elements=($1)\n\
    \    local seen=()\n    local result=()\n    for e in \"${elements[@]}\"; do\n\
    \        if [[ ! \"${seen[@]}\" =~ \"$e\" ]]; then\n            seen+=($e)\n \
    \           result+=($e)\n        fi\n    done\n    printf '%s\\n' \"${result[@]}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    python -c \"print('\
    \ '.join(set(input().split())))\" <<< \"$1\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n\
    \  File \"<string>\", line 0\n    \n    ^\nSyntaxError: unexpected EOF while parsing\n\
    Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n\
    \  File \"<string>\", line 1\n    1 2 3 4\n      ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | \n  \
    \  sed 's/ /\\n/g' |\n    sort |\n    uniq -u |\n    sed 's/^/\"/g' |\n    sed\
    \ 's/$/\"/g' |\n    paste -sd\" \"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local input=\"$*\"\n\
    \  echo $(echo $input | xargs -n1 | awk '!x[$0]++' | awk '{print '\\''$0'\\''}'\
    \ | tr '\\n' ' ')\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {print ''$0''}

    awk: cmd. line:1:        ^ invalid char '''''' in expression

    awk: cmd. line:1: {print ''$0''}

    awk: cmd. line:1:        ^ syntax error

    awk: cmd. line:1: {print ''$0''}

    awk: cmd. line:1:        ^ invalid char '''''' in expression

    awk: cmd. line:1: {print ''$0''}

    awk: cmd. line:1:        ^ syntax error

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$@\" | tr \" \"\
    \ \"\\n\" | awk '!seen[$0]++'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    python3 -c \"import\
    \ sys; print(' '.join([str(i) for i in set(sys.argv[1:])]))\" $(echo $1)\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  s=\"$1\"\n  new_s=\"\"\
    \n  while [ -n \"$s\" ]; do\n    # remove the first element from s\n    n=$(echo\
    \ \"$s\" | sed -E \"s/^([0-9]+) (.+)$/\\1/\")\n    s=$(echo \"$s\" | sed -E \"\
    s/^([0-9]+) (.+)$/\\2/\")\n    # check if n is unique\n    unique=1\n    for i\
    \ in $(echo \"$new_s\"); do\n      if [ \"$i\" = \"$n\" ]; then\n        unique=0\n\
    \        break\n      fi\n    done\n    if [ \"$unique\" = \"1\" ]; then\n   \
    \   new_s=\"$new_s $n\"\n    fi\n  done\n  echo \"$new_s\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=6 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=47 encoding='utf-8'>
  timestamp: 1660025246
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -a list=( $1\
    \ )\n    echo ${list[@]} | tr ' ' '\\n' | sort | uniq -u | tr '\\n' ' '\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local arr=($1)\n  local\
    \ i=0\n  for element in \"${arr[@]}\"; do\n    [[ -z \"${seen[$element]}\" ]]\
    \ && arr[$i++]=$element\n    seen[$element]=1\n  done\n  echo \"${arr[@]:0:$i}\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpsw4a8vfs.sh: line 12: 0++: syntax error: operand expected (error
    token is "+")

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  {\n    echo \"$1\" |\
    \ tr ' ' '\\n'\n    echo \"$1\" | tr ' ' '\\n'\n  } | sort | uniq -u | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local values\n  values=\"\
    $1\"\n  remove_first_duplicates \"$values\"\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpst1s9_zi.sh: line 11: remove_first_duplicates: command not found

    /tmp/tmpst1s9_zi.sh: line 11: remove_first_duplicates: command not found

    '
  stdout: ''
  timestamp: 1660025241
- exit_code: -1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -a unique_values=()\n\
    \    local list=$1\n    while [ ! -z \"$list\" ]; do\n        local value=$(echo\
    \ \"$list\" | cut -d' ' -f1)\n        local list_without_value=$(echo \"$list\"\
    \ | cut -d' ' -f2-)\n        if [ -z \"$(echo \"$list_without_value\" | grep \"\
    \ $value \")\" ]; then\n            unique_values+=(\"$value\")\n        fi\n\
    \        list=$list_without_value\n    done\n    echo \"${unique_values[@]}\"\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=29 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=21 encoding='utf-8'>
  timestamp: 1660025246
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # Concatenate input\
    \ list with itself.\n    # E.g., \"1 2 3\" --> \"1 2 3 1 2 3\"\n    doubled=$(for\
    \ x in $1; do echo $x; done | paste -s -d \" \" -)\n    # Remove adjacent duplicates.\n\
    \    # E.g., \"1 2 3 1 2 3\" --> \"1 2 3\"\n    unique=$(echo $doubled | awk '!a[$0]++')\n\
    \    # Now break up the space-separated list\n    # E.g., \"1 2 3\" --> \"[\"\
    1\" \"2\" \"3\"]\"\n    echo $unique | awk '{ for (i=1; i<=NF; i++) { print \"\
    \\\"\"$i\"\\\"\" } }'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  unique_list=\"\"\n  for\
    \ element in $1; do\n    if [ -z \"$(echo \" $unique_list \" | grep \" $element\
    \ \")\" ]; then\n      unique_list=\"$unique_list $element\"\n    fi\n  done\n\
    \  echo $unique_list\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    list=$1\n    echo \"\
    $list\" | tr ' ' '\\n' | awk '{if(seen[$0]++ == 0) print $0;}' | tr '\\n' ' '\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  IFS=' ' read -r -a arr\
    \ <<< \"$1\"\n  local res\n  for item in \"${arr[@]}\"; do\n    res+=\" $item\"\
    \n    res+=\" $(echo \"${res[@]}\" | grep -o \"$item\" | wc -l)\"\n  done\n  echo\
    \ \"$res\" | sed 's/\\([0-9]*\\) /\\1#/g' | sort -k2 | cut -d'#' -f1 | uniq -u\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local list_input=\"$1\"\
    \n  declare -a list_input_array=($list_input)\n  local list_unique_input=()\n\
    \  local list_unique_input_idx=0\n  for ((i=0; i<${#list_input_array[@]}; i++));\
    \ do\n    local already_contains=0\n    for ((j=0; j<${#list_unique_input[@]};\
    \ j++)); do\n      if [[ \"${list_input_array[$i]}\" == \"${list_unique_input[$j]}\"\
    \ ]]; then\n        already_contains=1\n        break\n      fi\n    done\n  \
    \  if ((already_contains==0)); then\n      list_unique_input[$list_unique_input_idx]=\"\
    ${list_input_array[$i]}\"\n      ((list_unique_input_idx++))\n    fi\n  done\n\
    \  local output=\"\"\n  for ((i=0; i<${#list_unique_input[@]}; i++)); do\n   \
    \ output=\"$output \\\"${list_unique_input[$i]}\\\"\"\n  done\n  echo $output\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local result=($1)\n \
    \ local items=()\n  for item in \"${result[@]}\"; do\n    if [[ \" ${items[*]}\
    \ \" != *\" $item \"* ]]; then\n      items+=($item)\n    fi\n  done\n  echo \"\
    ${items[@]}\"\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\"\
    ) = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\n\
    run_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | awk '!x[$0]++'\n\
    }\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  declare -a ary=()\n \
    \ IFS=\" \"\n  for i in $@; do\n    if [[ ! \" ${ary[*]} \" =~ \" ${i} \" ]];\
    \ then\n      ary+=(${i})\n    fi\n  done\n  echo \"${ary[@]}\"\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo ${1} | tr \" \"\
    \ \"\\n\" | awk '{a[$0]++}END{for(i in a)if(a[i]==1)print i}'\n}\n\ncandidate()\
    \ {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | tr ' '\
    \ '\\n' | sort | uniq -u | tr '\\n' ' '\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local -r input=\"$1\"\
    \n    echo \"$input\" | awk '{for (i=1; i<=NF; i++) if (!a[$i]++) printf(\"%s\
    \ \",$i)}'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"\
    1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  local sorted=$(echo \"\
    $1\" | tr ' ' '\\n' | sort | uniq -u)\n  echo \"$sorted\" | tr '\\n' ' '\n}\n\n\
    candidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n\
    \    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local uniq_list=$(echo\
    \ \"$@\" | tr ' ' '\\n' | awk '!x[$0]++' | tr '\\n' ' ')\n    echo \"$uniq_list\"\
    \n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3\
    \ 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    echo \"$1\" | tr '\
    \ ' '\\n' | awk '!x[$0]++'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    local i\n    local\
    \ j\n    local x\n    local y\n    local output\n    for i in $1; do\n       \
    \ for j in $output; do\n            if [ \"$i\" = \"$j\" ]; then\n           \
    \     break\n            fi\n        done\n        if [ \"$i\" != \"$j\" ]; then\n\
    \            output=\"$output $i\"\n        fi\n    done\n    output=${output#\
    \ }\n    echo \"[$(echo $output | sed 's/ /\", \"/g')]\"\n}\n\ncandidate() {\n\
    \    remove_duplicates \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate\
    \ \"1 2 3 2 4 3 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | tr \" \"\
    \ \"\\n\" | awk '!_[$0]++'\n}\n\ncandidate() {\n    remove_duplicates \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3 5\") = \"1 4\
    \ 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n    # append space in order\
    \ to match all but last element\n    _words=\"$@ \"\n    _found_uniques=\"\"\n\
    \    _uniq=\"\"\n    for _i in $_words; do\n        _found_uniques=\"$_found_uniques\
    \ $_i\"\n        # Append space to ensure consistent match on last element.\n\
    \        _uniq=\"$(echo \"$_found_uniques $_i \" | xargs -n 1 | sort | uniq)\"\
    \n        if [ \"$_uniq\" != \"$_found_uniques\" ]; then\n            _found_uniques=\"\
    $_uniq\"\n        else\n            _found_uniques=$(echo \"$_found_uniques\"\
    \ | xargs -n 1 | sort -r)\n            echo \"$_found_uniques\" | head -n -1\n\
    \            break\n        fi\n    done\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
- exit_code: 1
  program: "#!/bin/bash\n# From a list of integers, remove all elements that occur\
    \ more than once.\n# Keep order of elements left the same as in the input.\n#\
    \ >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n#\
    \ $1 is a space-separated list\nremove_duplicates() {\n  echo \"$1\" | awk '\n\
    \  {n = split($0, a, \" \");}\n  {x = \"\"; for (i = 1; i <= n; i++) {s = a[i];\
    \ if (!seen[s]++) {x = x s \" \";}} print x;}'\n}\n\ncandidate() {\n    remove_duplicates\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\") = \"\" ]]\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 2 3 4\" ]]\n    [[ $(candidate \"1 2 3 2 4 3\
    \ 5\") = \"1 4 5\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025241
