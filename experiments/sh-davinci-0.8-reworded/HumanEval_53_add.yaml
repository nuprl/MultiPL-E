name: HumanEval_53_add
language: sh
prompt: "#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\
  \n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\n\
  add() {\n"
tests: "}\n\ncandidate() {\n    add \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"0\" \"1\") = \"1\" ]]\n    [[ $(candidate \"1\" \"0\") = \"1\" ]]\n    [[ $(candidate\
  \ \"2\" \"3\") = \"5\" ]]\n    [[ $(candidate \"5\" \"7\") = \"12\" ]]\n    [[ $(candidate\
  \ \"7\" \"5\") = \"12\" ]]\n}\n\nrun_test"
completions: ["    [[ $# -ne 2 ]] && {\n        echo \"$FUNCNAME: requires 2 arguments\"\
    \ >&2\n        return 1\n    }\n    echo \"$(($1 + $2))\"", '    echo $(($1 +
    $2))', '  bc <<< "$1 + $2"', "    if [[ ! $1 =~ ^-?[0-9]+$ ]]; then\n        echo\
    \ \"add: '$1' is not an integer\" >&2\n        return 1\n    fi\n    if [[ ! $2\
    \ =~ ^-?[0-9]+$ ]]; then\n        echo \"add: '$2' is not an integer\" >&2\n \
    \       return 1\n    fi\n    echo \"$(($1 + $2))\"", '    echo "$(( $1 + $2 ))"',
  "    # Adds $1 and $2\n    #\n    # No local variables\n    echo \"$(( $1 + $2 ))\"",
  '    echo "$(( $1 + $2 ))"', '  echo "$(($1 + $2))"', "    x=$1\n    y=$2\n    echo\
    \ $(($x + $y))", "    local -i x=$1\n    local -i y=$2\n    echo $((x + y))",
  "    sum=$(($1 + $2))\n    echo $sum", '    printf "%d" "$(( $1 + $2 ))"', "   \
    \ local x=\"$1\"\n    local y=\"$2\"\n    local sum=$((x + y))\n    echo \"$sum\"",
  "  ((sum=${1}+${2}))\n  printf \"%s\" \"${sum}\"", "    # example use of bc\n  \
    \  echo \"$(echo \"$1 + $2\" | bc)\"", "  local x=$1\n  local y=$2\n  echo $((x\
    \ + y))", "  local x=$1\n  local y=$2\n  local sum=$(( x + y ))\n  echo $sum",
  "\techo $(($1 + $2))", "\techo $(( $1 + $2 ))", "  local sum=\n  let sum=$1+$2\n\
    \  echo \"$sum\"", "  local x y\n  x=$1\n  y=$2\n  printf %s \"$((x + y))\"",
  "  local x=${1:-0}\n  local y=${2:-0}\n  echo \"$((x + y))\"", '    echo "$(( $1
    + $2 ))"', '  echo $(( $1 + $2 ))', '    echo "$(( $1 + $2 ))"', '  echo $(($1
    + $2))', '  echo $(($1 + $2))', "\techo \"$(( $1 + $2 ))\"", '  #TODO: Implement
    this function', "\techo $(( $1 + $2 ))", '    echo "$(($1 + $2))"', '  echo "$((
    $1 + $2 ))"', "  awk -v x=$1 -v y=$2 'BEGIN { print x + y }'", '    echo $(($1
    + $2))', "  local x=$1\n  local y=$2\n  echo $((x + y))", "  local x=\"$1\"\n\
    \  local y=\"$2\"\n  echo $((\"$x\" + \"$y\"))", '    echo $(($1 + $2))', '  echo
    $(($1 + $2))', "    local x=$1\n    local y=$2\n    local sum\n    (( sum=x+y\
    \ ))\n    echo \"$sum\"", '  echo "$(($1 + $2))"', '  echo $(( $1 + $2 ))', " \
    \ local x=\"$1\"\n  local y=\"$2\"\n  echo \"$(( x + y ))\"", "    x=$1\n    y=$2\n\
    \    echo $(($x + $y))", "    local x=\"$1\"\n    local y=\"$2\"\n    printf '%s\\\
    n' \"$(( x + y ))\"", '  echo "$(( $1 + $2 ))"', '    echo "$(($1 + $2))"', '  echo
    $(($1 + $2))', '    echo $(( $1 + $2 ))', '    printf "%d" "$(( $1 + $2 ))"',
  "  local x=\"$1\"\n  local y=\"$2\"\n  echo \"$(( x + y ))\"", "\tlocal sum=$((\
    \ $1 + $2 ))\n\tprintf '%s' \"$sum\"", "    local x=$1\n    local y=$2\n    echo\
    \ $((x + y))", '    echo $(($1 + $2))', '  echo "$(($1 + $2))"', "\techo $(( $1\
    \ + $2 ))", '    echo "$(($1 + $2))"', "\tif [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n\
    \t\techo \"invalid number: $1\" >&2\n\t\treturn 1\n\tfi\n\tif [[ ! \"$2\" =~ ^[0-9]+$\
    \ ]]; then\n\t\techo \"invalid number: $2\" >&2\n\t\treturn 1\n\tfi\n\techo \"\
    $((\"$1\" + \"$2\"))\"", '  echo "$(($1 + $2))"', '  echo "$(( $1 + $2 ))"', " \
    \   # declare local variables\n    local x=\"$1\"\n    local y=\"$2\"\n    # declare\
    \ integer\n    declare -i x\n    declare -i y\n    # add x and y\n    echo \"\
    $((x + y))\"", '    echo $(($1 + $2))', '  echo $(( $1 + $2 ))', "  x=\"$1\"\n\
    \  y=\"$2\"\n  # x+y\n  echo \"$(($x + $y))\"", '  expr "$1" + "$2"', "\techo\
    \ \"$(( $1 + $2 ))\"", "    result=$(($1 + $2))\n    echo \"$result\"", '    echo
    "$(( $1 + $2 ))"', '  echo $(($1 + $2))', "\t# Local variables\n\tlocal x=$1 y=$2\n\
    \techo \"$((x + y))\"", '  echo "$(($1 + $2))"', '  expr "$1" + "$2"', "\t$(($1\
    \ + $2))", '    echo "$(($1 + $2))"', '    echo "$(( $1 + $2 ))"', '  echo "$((
    $1 + $2 ))"', '  echo $(($1 + $2))', "    if [[ \"$#\" -ne 2 ]]; then\n      \
    \  log \"add function requires exactly 2 arguments\"\n        return 1\n    fi\n\
    \n    if [[ \"$1\" -eq \"$1\" ]] && [[ \"$2\" -eq \"$2\" ]]; then\n        echo\
    \ \"$(( $1 + $2 ))\"\n    else\n        log \"add function arguments must be integers\"\
    \n        return 1\n    fi", "    ((sum=${1}+${2}))\n    echo ${sum}", "    #\
    \ $1 is an integer\n    # $2 is an integer\n    echo $(($1 + $2))", "  local __res=$(($1\
    \ + $2))\n  echo \"$__res\"", '    echo "$(("$1" + "$2"))"', '  echo "$(( $1 +
    $2 ))"', '    echo "$((10#$1 + 10#$2))"', "\techo $(($1 + $2))", '    echo $((
    $1 + $2 ))', '  echo "$(( $1 + $2 ))"', '  echo "$(( $1 + $2 ))"', "  if ! [[\
    \ \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"First argument is not an integer: $1\"\
    \ >&2\n    return 1\n  fi\n  if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n    echo \"\
    Second argument is not an integer: $2\" >&2\n    return 1\n  fi\n  echo \"$(($1\
    \ + $2))\"", '    awk "BEGIN { print $1 + $2 }"', '  echo $(($1 + $2))', '  echo
    "$(($1 + $2))"', '  (( $1 + $2 ))', '  echo $(( $1 + $2 ))', "  local sum=$((\
    \ $1 + $2 ))\n  echo \"$sum\"", '  (( $1 + $2 ))', '    bc -l <<< "scale=0; $1
    + $2"', "  # the function will return 5\n  echo $(($1 + $2))", "    local x=$1\
    \ y=$2\n    printf \"%d\" $((x + y))", '  echo $(("$1" + "$2"))', '  echo $(expr
    $1 + $2)', "    # Call python script add.py with $1 and $2 as arguments\n    #\
    \ and store the result in ret\n    ret=$(python add.py \"$1\" \"$2\")\n    # Return\
    \ the output of the add.py script\n    echo \"$ret\"", "    local x=$1 y=$2\n\
    \    local sum=$((x + y))\n    echo \"$sum\"", '    echo $(( $1 + $2 ))', "\t\
    echo \"$(($1 + $2))\"", "  awk -v num1=\"$1\" -v num2=\"$2\" 'BEGIN { print num1\
    \ + num2 }'", "  local sum=$(( $1 + $2 ))\n  echo \"$sum\"", "  local x=$1\n \
    \ local y=$2\n  echo \"$((x + y))\"", '    echo $(( $1 + $2 ))', '    echo $((
    $1 + $2 ))', '    echo "$(($1 + $2))"', '    echo "$(($1 + $2))"', "  if [[ $#\
    \ -ne 2 ]]; then\n    echo \"Wrong number of arguments. Use \\\"help add\\\" to\
    \ see usage.\"\n    return 1\n  fi\n  echo \"$(($1 + $2))\"", '    echo "$(($1
    + $2))"', "\techo $(( $1 + $2 ))", '  echo "$(( $1 + $2 ))"', '  bc <<< "$1 +
    $2"', "\tlocal x y sum\n\tx=\"$1\"\n\ty=\"$2\"\n\tsum=$((x + y))\n\techo \"$sum\"",
  '  echo "$(( $1 + $2 ))"', '    echo $(( $1 + $2 ))', '    echo $(($1 + $2))', '  echo
    $(($1 + $2))', '  echo "$(( $1 + $2 ))"', "    local i=0\n    local x=$1\n   \
    \ local y=$2\n    local sum=0\n    local carry=0\n    local nx=${#x}\n    local\
    \ ny=${#y}\n    while [ $i -lt ${#x} ]\n    do\n        local xy=$(( ${x:$(( nx\
    \ - i - 1 )):1} + ${y:$(( ny - i - 1 )):1} + carry ))\n        local xx=${x:$((\
    \ nx - i - 1 )):1}\n        local yy=${y:$(( ny - i - 1 )):1}\n        sum=$((\
    \ $(( $xy % 10 ))${sum} ))\n        carry=$(( $xy / 10 ))\n        i=$(( i + 1\
    \ ))\n    done\n    echo $(( $carry${sum} ))", '    echo $(( $1 + $2 ))', "  \
    \  a=$1\n    b=$2\n    echo $((a + b))", "    if [[ \"$#\" -ne 2 ]]; then\n  \
    \      msg_err \"Usage: add <integer> <integer>\"\n        return 1\n    fi\n\n\
    \    if ! is_int \"$1\"; then\n        msg_err \"<integer> must be an integer\"\
    \n        return 1\n    fi\n\n    if ! is_int \"$2\"; then\n        msg_err \"\
    <integer> must be an integer\"\n        return 1\n    fi\n\n    echo \"$(( $1\
    \ + $2 ))\"", '    echo "$(( $1 + $2 ))"', '  echo $(($1 + $2))', "    local -i\
    \ x=$1\n    local -i y=$2\n    bc -l <<< \"$x + $y\"", '    expr $1 + $2', '    ((
    "$1" + "$2" ))', '    echo $(expr "$1" + "$2")', "    local x=$1\n    local y=$2\n\
    \    echo \"$(($x + $y))\"", '    echo $(($1 + $2))', "\tlocal x=$1\n\tlocal y=$2\n\
    \techo $(($x + $y))", '  echo "$(($1 + $2))"', '    echo "$(( $1 + $2 ))"', " \
    \ if [[ -z $1 ]] || [[ -z $2 ]]; then\n    echo \"add: invalid argument\"\n  \
    \  exit 1\n  fi\n  echo \"$(( $1 + $2 ))\"", '  echo "$(( $1 + $2 ))"', "\tlocal\
    \ num1=$1\n\tlocal num2=$2\n\tlocal sum=$((num1 + num2))\n\techo \"$sum\"", '    echo
    "$(( $1 + $2 ))"', '    echo "$(( $1 + $2 ))"', '  echo $(($1 + $2))', '    echo
    $(( $1 + $2 ))', "  local x=$1\n  local y=$2\n  local res=$(( x + y ))\n  echo\
    \ \"$res\"", "    local x=$1\n    local y=$2\n    local result=$(( x + y ))\n\
    \    echo $result", "    if [ \"$1\" -eq \"$1\" ] 2>/dev/null\n    then\n    \
    \    if [ \"$2\" -eq \"$2\" ] 2>/dev/null\n        then\n            echo \"$(($1\
    \ + $2))\"\n        else\n            echo \"Argument must be integers: '$2'\"\
    \ >&2\n            exit 1\n        fi\n    else\n        echo \"Argument must\
    \ be integers: '$1'\" >&2\n        exit 1\n    fi", "\texpr \"$1\" + \"$2\"",
  '  echo "$(($1 + $2))"', '    echo $(($1 + $2))', "  declare -i x\n  declare -i\
    \ y\n  x=$1\n  y=$2\n  echo \"$((x + y))\"", "    local x=$1\n    local y=$2\n\
    \    echo $((x + y))", "  ((x=$1 + $2))\n  echo \"$x\"", '  bc <<< "$1 + $2"',
  '  expr $1 + $2', "  test -z \"$1\" && echo \"1st argument missing\" && exit 1\n\
    \  test -z \"$2\" && echo \"2nd argument missing\" && exit 1\n  echo $(($1 + $2))",
  '    echo "$(($1 + $2))"', '  echo "$(($1 + $2))"', '  echo "$(($1 + $2))"', "\t\
    echo \"$(( $1 + $2 ))\"", '  echo $(($1 + $2))', '  echo "$(( $1 + $2 ))"', '    echo
    $(($1 + $2))', '  echo $((10#$1 + 10#$2))', '  echo $(( $1 + $2 ))', "\techo \"\
    $(($1 + $2))\"", "  local x=$1\n  local y=$2\n  echo $(( x + y ))", '    echo
    "$(( $1 + $2 ))"', '    echo "$(( $1 + $2 ))"', "    x=$1\n    y=$2\n    echo\
    \ \"$((x + y))\"", "  local x=${1:-0}\n  local y=${2:-0}\n  echo $(( x + y ))",
  "    if [ -z \"$1\" ]; then\n        >&2 echo \"${FUNCNAME[0]} requires a number\"\
    \n        return 1\n    fi\n    if [ -z \"$2\" ]; then\n        >&2 echo \"${FUNCNAME[0]}\
    \ requires a number\"\n        return 1\n    fi\n    # Note: - is a comment, so\
    \ the following line is:\n    # expr $1 + $2\n    expr $1 + $2 # Note: - is a\
    \ comment, so the following line is: expr $1 + $2", "  re='^[0-9]+$'\n  if ! [[\
    \ $1 =~ $re ]] || ! [[ $2 =~ $re ]] ; then\n    echo \"error: not an integer\"\
    \ >&2; exit 1\n  fi\n  # return the sum of the two numbers\n  echo \"$(( $1 +\
    \ $2 ))\"", "  local x=$1\n  local y=$2\n  local sum=$(( x + y ))\n  printf \"\
    %s\" \"$sum\"", '    echo "$(($1 + $2))"', "\techo $(($1 + $2))", "    num1=$1\n\
    \    num2=$2\n    local SUM=$(( num1 + num2 ))\n    echo \"$SUM\"", "    local\
    \ x=$1\n    local y=$2\n    local z=$((x + y))\n    echo \"$z\"", '  echo "$((
    $1 + $2 ))"', "  declare -i result\n  result=$1+$2\n  echo \"$result\"", "  sum=$(($1\
    \ + $2))\n  echo $sum", "    if [ \"$#\" -eq 2 ]; then\n        echo \"$(($1 +\
    \ $2))\"\n    else\n        echo \"Usage: $0 int1 int2\"\n    fi", '    echo $(($1
    + $2))', '    echo $(( $1 + $2 ))', '    echo "$(($1 + $2))"', '    echo $(($1
    + $2))', "  # Compute the sum of two numbers\n  #\n  # $1: first number\n  # $2:\
    \ second number\n  local result=0\n\n  result=$((\"$1\" + \"$2\"))\n\n  echo \"\
    $result\"", '  echo $(($1 + $2))', '    echo $(( $1 + $2 ))', "    let sum=$1+$2\n\
    \    echo \"$sum\"", '    echo $(( $1 + $2 ))', "    local x=$1\n    local y=$2\n\
    \    local sum=$((x + y))\n    echo \"$sum\"", '  python -c "print $1 + $2"',
  '  echo $(($1 + $2))', '    expr $1 + $2', '  echo $(( $1 + $2 ))', "  local x=${1:-0}\n\
    \  local y=${2:-0}\n  printf \"%s\" $((x + y))", "    # check for numbers\n  \
    \  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"Not a number!\"\n     \
    \   return\n    fi\n    if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n        echo \"Not\
    \ a number!\"\n        return\n    fi\n    # do maths\n    echo \"$(($1 + $2))\"",
  '  echo "$(( $1 + $2 ))"', "    local x=\"$1\"\n    local y=\"$2\"\n    echo \"\
    $((x + y))\""]
stop_tokens:
- "\n}"
