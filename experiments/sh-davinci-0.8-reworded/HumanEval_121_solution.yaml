name: HumanEval_121_solution
language: sh
prompt: "#!/bin/bash\n# Given a non-empty list of integers, return the sum of all\
  \ of the odd elements that are in even positions.\n# Examples\n# >>> $(solution\
  \ \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution\
  \ \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n"
tests: "}\n\ncandidate() {\n    solution \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"5 8 7 1\") = \"12\" ]]\n    [[ $(candidate \"3 3 3 3 3\") = \"9\"\
  \ ]]\n    [[ $(candidate \"30 13 24 321\") = \"0\" ]]\n    [[ $(candidate \"5 9\"\
  ) = \"5\" ]]\n    [[ $(candidate \"2 4 8\") = \"0\" ]]\n    [[ $(candidate \"30\
  \ 13 23 32\") = \"23\" ]]\n    [[ $(candidate \"3 13 2 9\") = \"3\" ]]\n}\n\nrun_test"
completions: ["  local lst=\"$1\"\n  local sum=0\n  for ((i=0; i<${#lst}; i++)); do\n\
    \    local ch=\"${lst:$i:1}\"\n    if [ $((i % 2)) == 0 ] && [ $((ch % 2)) ==\
    \ 1 ]; then\n      ((sum+=ch))\n    fi\n  done\n  echo \"$sum\"", "    # Your\
    \ solution here\n    data=$1\n    sum=0\n    for value in $data\n    do\n    \
    \    # Check if it is in the even position\n        if [ $(($i % 2)) -eq 0 ]\n\
    \        then\n            # Check if it is an odd number\n            if [ $(($value\
    \ % 2)) -ne 0 ]\n            then\n                sum=$(($sum + $value))\n  \
    \          fi\n        fi\n        i=$(($i + 1))\n    done\n    echo $sum", " \
    \ for i in $1; do\n    echo $i\n  done", "    echo $1 | tr ' ' '\\n' | grep -n\
    \ '^[13579]$' | grep '^[02468] ' | sed 's/[^0-9]//g' | paste -sd+ - | bc", " \
    \ # your code goes here\n  # input: $1\n  # output: echo your result, $result\n\
    \  # example:\n  # input: \"1 2 3 4 5\"\n  # output: 6\n  # result=\"6\"\n  #\
    \ echo $result", "  echo $1 | tr ' ' '\\n' | awk '{if($0%2==1) arr[NR]=$0} END{for(i=1;i<=NR;i+=2)\
    \ s+=arr[i]; print s}'", "  local IFS=' '\n  local numbers=( $1 )\n  local sum=0\n\
    \  for(( i=0; i<${#numbers[@]}; i+=2 )); do\n    sum=$(( sum + ${numbers[i]} ))\n\
    \  done\n  echo \"$sum\"", "  eval \"arr=($1)\"\n  sum=0\n  for ((i=0; i<${#arr[@]};\
    \ i+=2)); do\n    if [[ $((arr[i] % 2)) -ne 0 ]]; then\n      sum=$((sum + arr[i]))\n\
    \    fi\n  done\n  echo \"$sum\"", "  # Print your solution in the following format\n\
    \  # printf \"answer_goes_here\"\n  echo -n \"\"", "  local n=$1\n  local sum=0\n\
    \  local i=0\n  local pos\n  local odd=0\n  local even=0\n  while IFS=' ' read\
    \ -ra ADDR; do\n    for i in \"${ADDR[@]}\"; do\n      if [[ $pos = 0 ]]; then\n\
    \        let \"odd = $i % 2\"\n        let \"even = $i % 2\"\n      fi\n     \
    \ if [[ $pos = 1 ]]; then\n        let \"odd = $i % 2\"\n        let \"even =\
    \ $i % 2\"\n      fi\n      if [[ $pos = 2 ]]; then\n        let \"odd = $i %\
    \ 2\"\n        let \"even = $i % 2\"\n      fi\n      if [[ $pos = 3 ]]; then\n\
    \        let \"odd = $i % 2\"\n        let \"even = $i % 2\"\n      fi\n     \
    \ if [[ $pos = 4 ]]; then\n        let \"odd = $i % 2\"\n        let \"even =\
    \ $i % 2\"\n      fi\n      if [[ $pos = 5 ]]; then\n        let \"odd = $i %\
    \ 2\"\n        let \"even = $i % 2\"\n      fi\n      if [[ $pos = 6 ]]; then\n\
    \        let \"odd = $i % 2\"\n        let \"even = $i % 2\"\n      fi\n     \
    \ if [[ $pos = 7 ]]; then\n        let \"odd = $i % 2\"\n        let \"even =\
    \ $i % 2\"\n      fi\n      if [[ $pos = 8 ]]; then\n        let \"odd = $i %\
    \ 2\"\n        let \"even = $i % 2\"\n      fi\n      if [[ $pos = 9 ]]; then\n\
    \        let \"odd = $i % 2\"\n        let \"even = $i % 2\"\n      fi\n     \
    \ if [[ $pos = 10 ]]; then\n        let \"odd = $i % 2\"\n        let \"even =\
    \ $i % 2\"\n      fi\n      if [[ $pos = 11 ]]; then\n        let \"odd = $i %\
    \ 2\"\n        let \"even = $i % 2\"\n      fi\n      if [[ $pos = 12 ]]; then\n\
    \        let \"odd = $", "  # TODO: implement the solution\n  echo \"0\"", " \
    \   local arr=($1)\n    local sum=0\n    for i in \"${!arr[@]}\"; do\n       \
    \ if [[ $((i%2)) -eq 0 && $((arr[i]%2)) -ne 0 ]]; then\n            sum=$((sum+arr[i]))\n\
    \        fi\n    done\n    echo \"$sum\"", "  echo $1 | tr ' ' '\\n' | awk 'NR%2==0'\
    \ | grep '[13579]' | paste -sd+ | bc", "    local list=$1\n    local -i sum\n\
    \    local -i i=1\n    while read number; do\n        (( $((i % 2)) == 0 )) &&\
    \ (( $((number % 2)) == 1 )) && (( sum+=$number ))\n        (( i++ ))\n    done\
    \ <<< \"$list\"\n    echo \"$sum\"", "  local list=\"$1\"\n  local sum=0\n  local\
    \ counter=0\n  for x in $list; do\n    let counter++\n    if [ $((counter % 2))\
    \ -eq 0 ]; then\n      if [ $((x % 2)) -ne 0 ]; then\n        let sum=sum+x\n\
    \      fi\n    fi\n  done\n  echo \"$sum\"", "    local input_list=$1\n    local\
    \ length=${#input_list}\n    local sum=0\n    for ((i=0; i<$length; i+=2)); do\n\
    \        if ((${input_list:$i:1} % 2 != 0)); then\n            sum=$((sum + ${input_list:$i:1}))\n\
    \        fi\n    done\n    echo $sum", "  sum=0\n  for (( i=0; i<${#1}; i++ ));\
    \ do\n    c=${1:$i:1}\n    if [[ $((i%2)) -eq 0 && $((c%2)) -eq 1 ]]; then\n \
    \     sum=$((sum+c))\n    fi\n  done\n  echo $sum", "  numbers=($1)\n  total=0\n\
    \  for (( i=0; i<${#numbers[@]}; i++ )); do\n    if [ $(($i % 2)) -eq 0 ] && [\
    \ $((${numbers[$i]} % 2)) -ne 0 ]; then\n      total=$(($total + ${numbers[$i]}))\n\
    \    fi\n  done\n  echo $total", "  local -a elements=($1)\n  local sum=0\n  for\
    \ ((i=0; i<${#elements[@]}; i++)); do\n    if ((i % 2 == 0)) && ((elements[i]\
    \ % 2 == 1)); then\n      ((sum+=elements[i]))\n    fi\n  done\n  echo \"$sum\"",
  '    printf "0"']
stop_tokens:
- "\n}"
