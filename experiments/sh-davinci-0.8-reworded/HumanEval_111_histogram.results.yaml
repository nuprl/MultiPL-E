language: sh
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ $# -ne 1 ]]; then\n    echo \"histogram: invalid number of arguments\" >&2\n\
    \    return 1\n  fi\n  local result=\"\"\n  local max_repeated_letters=\"\"\n\
    \  local max_repeated_count=0\n  local value\n  local count\n  for letter in $(echo\
    \ $1 | tr \" \" \"\\n\"); do\n    value=\"\\\"$letter\\\"\"\n    count=$(echo\
    \ $1 | tr \" \" \"\\n\" | grep \"$letter\" | wc -l)\n    if [[ $count -eq $max_repeated_count\
    \ ]]; then\n      max_repeated_letters=\"$max_repeated_letters $value\"\n    elif\
    \ [[ $count -gt $max_repeated_count ]]; then\n      max_repeated_letters=\"$value\"\
    \n      max_repeated_count=$count\n    fi\n  done\n  for letter in $max_repeated_letters;\
    \ do\n    result=\"$result$letter: \\\"$max_repeated_count\\\", \"\n  done\n \
    \ echo \"{$(echo \"$result\" | sed 's/, $//')}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ histogram_of \"$1\" | csv_letter_count\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpi7caitz0.sh: line 19: histogram_of: command not found

    /tmp/tmpi7caitz0.sh: line 19: csv_letter_count: command not found

    '
  stdout: ''
  timestamp: 1660025472
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ word\n  for word in $1; do\n    (( words[$word] += 1 ))\n  done\n  for word\
    \ in \"${!words[@]}\"; do\n    if (( ${words[$word]} > max )); then\n      max=${words[$word]}\n\
    \      most_repeated_words=()\n    fi\n    if (( ${words[$word]} == max )); then\n\
    \      most_repeated_words+=($word)\n    fi\n  done\n  printf '{\"%s\": \"%s\"\
    }' \"${most_repeated_words[@]}\" \"$max\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025472
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A frequency\n    local count\n    local key\n    if [ \"$#\" != \"1\"\
    \ ]; then\n        echo \"histogram usage: $0 STRING\" >&2\n        return 1\n\
    \    fi\n    while read -r key; do\n        count=\"${frequency[$key]}\"\n   \
    \     if [ -z \"$count\" ]; then\n            count=0\n        fi\n        frequency[$key]=$((++count))\n\
    \    done < <(grep -o . <<<\"$1\")\n    awk -v OFS='\"': '\n        function jsonize(value)\
    \ {\n            gsub(/\"/, \"\\\\\"\", value)\n            return \"\\\"\" value\
    \ \"\\\"\"\n        }\n        BEGIN {\n            print \"{\"\n        }\n \
    \       {\n            if (first) {\n                first = 0\n            }\
    \ else {\n                print \", \"\n            }\n            print jsonize($1),\
    \ \": \", jsonize($2)\n        }\n        END {\n            print \"}\"\n   \
    \     }\n    ' <<<\"$(\n        while read -r key; do\n            echo \"$key\"\
    \ \"${frequency[$key]}\"\n        done < <(sort <<<\"${!frequency[@]}\")\n   \
    \ )\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpr04rt4uh.sh: line 27: frequency: bad array subscript

    /tmp/tmpr04rt4uh.sh: line 31: frequency[$key]: bad array subscript

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ for ((i=0; i<26; i++)); do\n        char=$(printf \"\\\\$(printf %o $(($i+97)))\"\
    \ 2> /dev/null)\n        if [[ $1 =~ $char ]]; then\n            printf '%s' \"\
    \\\"$char\\\"\"\n            printf ': '\n            printf '%s' \"\\\"$(grep\
    \ -o $char <<< \"$1\" | wc -l)\\\"\"\n            ((i<25)) && printf ', '\n  \
    \      fi\n    done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ echo \"{$(\n    echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sed 's/^[ \\t]*//'\
    \ | tr '\\n' ',' | sed 's/,$//' |\n    sed 's/\\([[:alnum:]]\\) \\([[:digit:]]\\\
    )/\\1\": \"\\2,/g' | sed 's/\\(^.*\\),$/\\1}/'\n    )}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2, $1}' | \\\n    awk\
    \ 'BEGIN {FS=\" \"; OFS=\": \"; print \"{\"} {print \"'\\''\\\"\" $1 \"\\\"'\\\
    '', '\\''\\\"\" $2 \"\\\"'\\'', \"} END {print \"}\"}'\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025472
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # $1 is a string\n    local histogram=\"\"\n    if [[ -z \"$1\" ]]; then\n \
    \       histogram=\"{}\"\n    else\n        local max_letter=\"\"\n        local\
    \ max_count=0\n        for letter in $(echo $1 | tr \" \" \"\\n\"); do\n     \
    \       local count=$(echo $1 | tr \" \" \"\\n\" | grep -c $letter)\n        \
    \    if [[ \"$count\" -gt \"$max_count\" ]]; then\n                max_count=$count\n\
    \                max_letter=$letter\n            fi\n        done\n        histogram=\"\
    {\\\"$max_letter\\\": \\\"$max_count\\\"}\"\n    fi\n    echo \"$histogram\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -a letters=()\n    local -a counts=()\n    local letter\n    local count\n\
    \    local max_count=0\n    local -i i=0\n\n    for letter in $1; do\n       \
    \ i=0\n        while [[ $i -lt ${#letters[@]} ]]; do\n            if [[ ${letters[$i]}\
    \ == $letter ]]; then\n                let counts[$i]++\n                if [[\
    \ ${counts[$i]} -gt $max_count ]]; then\n                    max_count=${counts[$i]}\n\
    \                fi\n                break\n            fi\n            let i++\n\
    \        done\n        if [[ $i -eq ${#letters[@]} ]]; then\n            letters[$i]=$letter\n\
    \            counts[$i]=1\n        fi\n    done\n\n    echo -n \"{\"\n    i=0\n\
    \    while [[ $i -lt ${#letters[@]} ]]; do\n        if [[ ${counts[$i]} -eq $max_count\
    \ ]]; then\n            echo -n \"\\\"${letters[$i]}\\\": \\\"${counts[$i]}\\\"\
    \"\n            if [[ $i -lt $(( ${#letters[@]} - 1 )) ]]; then\n            \
    \    echo -n \", \"\n            fi\n        fi\n        let i++\n    done\n \
    \   echo \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sed 's/ *\\([a-z]\\) \\([0-9]\\\
    )/{\"\\1\": \"\\2\"}/' | awk 'BEGIN { ORS = \"\" } { print $0, \",\" }' | sed\
    \ 's/,$//'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return\n    fi\n    local\
    \ -r __data=\"$(echo \"$1\" | tr ' ' '\\n' | sort)\"\n    local -r __num_characters=\"\
    $(echo \"$__data\" | wc -l)\"\n    local -r __max_histogram_key=\"$(echo \"$__data\"\
    \ | tail -n 1)\"\n    # Use an associative array to track the histogram\n    local\
    \ -A __histogram\n    # Iterate through the sorted list of letters and\n    #\
    \ add each letter in the histogram.\n    for ((i=0; i<=\"$__num_characters\";\
    \ i++)); do\n        local -r __char=\"$(echo \"$__data\" | sed -n \"$((i+1))\"\
    p)\"\n        # Add one to the current histogram value for the character.\n  \
    \      ((__histogram[\"$__char\"]++))\n    done\n    # Use another associative\
    \ array to track the histogram\n    # of the histogram keys.\n    local -A __histogram_histogram\n\
    \    # Iterate through the letters of the histogram and\n    # build the histogram\
    \ of the histogram.\n    for ((i=0; i<=\"$__num_characters\"; i++)); do\n    \
    \    local -r __char=\"$(echo \"$__data\" | sed -n \"$((i+1))\"p)\"\n        #\
    \ Add one to the current histogram value for the character.\n        ((__histogram_histogram[\"\
    ${__histogram[\"$__char\"]}\"]++))\n    done\n    # Use another associative array\
    \ to track the histogram\n    # of the histogram values that are the maximum.\n\
    \    local -A __histogram_histogram_max\n    local -r __max_histogram_key_histogram=\"\
    $(echo \"$__data\" | tail -n 1)\"\n    # Iterate through the letters of the histogram\
    \ and\n    # build the histogram of the histogram.\n    for ((i=0; i<=\"$__num_characters\"\
    ; i++)); do\n        local -r __char=\"$(echo \"$__data\" | sed -n \"$((i+1))\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx1zmjzbx.sh: line 52: unexpected EOF while looking for matching
    `)''

    /tmp/tmpx1zmjzbx.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histogram=()\n  for char in $(echo $1); do\n    index=$(echo \"${histogram[@]}\"\
    \ | grep -n \"^${char}=*\" | cut -d: -f1)\n    if [ -z \"$index\" ]; then\n  \
    \    index=${#histogram[@]}\n      histogram[$index]=\"$char=1\"\n    else\n \
    \     let histogram[$index]++\n    fi\n  done\n  histogram=$(IFS=,; echo \"${histogram[*]}\"\
    )\n  echo \"{\"$(for hist in $(echo $histogram); do\n    key=$(echo $hist | cut\
    \ -d= -f1)\n    echo \"'\\\"$key\\\"': '\\\"$(echo $hist | cut -d= -f2)\\\"'\"\
    \n  done | tr '\\n' ',' | sed 's/,$//')\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histogram_RESULT\n\n  # Your solution goes here\n  # Write a function to take\
    \ input and return output.\n  # Strip leading and trailing `echo` when you are\
    \ done.\n  histogram_RESULT=$(echo \"Dummy\")\n  \n  echo \"$histogram_RESULT\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    for letter in $1; do\n        ((++letters[$letter]))\n\
    \    done\n    for letter in \"${!letters[@]}\"; do\n        ((letters[$letter]\
    \ > max_count)) && {\n            max_count=${letters[$letter]}\n            max_letters=\"\
    $letter\"\n        } || {\n            ((letters[$letter] == max_count)) && max_letters+=\"\
    \ $letter\"\n        }\n    done\n    echo \"{$(tr ' ' ',' <<< $max_letters |\
    \ sed -e 's/\\(.\\)/\"\\1\"/g')}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local count\n    for letter in $(echo \"$1\" | tr -cs \"[:alpha:]\" \" \");\
    \ do\n        ((count[$letter]++))\n    done\n    # get the max value\n    local\
    \ max=$(echo \"${count[@]}\" | tr -cs \"[:digit:]\" \" \" | sort -n | tail -n\
    \ 1)\n    # check the number of values equal to the max\n    local num=$(echo\
    \ \"${count[@]}\" | tr -cs \"[:digit:]\" \" \" | grep -c $max)\n    if [ $num\
    \ -eq 1 ]; then\n        # only one, find the key\n        for key in ${!count[@]};\
    \ do\n            if [ ${count[$key]} -eq $max ]; then\n                echo \"\
    {\\\"$key\\\": \\\"$max\\\"}\"\n            fi\n        done\n    else\n     \
    \   # more than one, find the key for each max\n        echo -n \"{\"\n      \
    \  for key in ${!count[@]}; do\n            if [ ${count[$key]} -eq $max ]; then\n\
    \                echo -n \"\\\"$key\\\": \\\"$max\\\",\"\n            fi\n   \
    \     done\n        echo -n \"}\"\n    fi\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ (\n        if [ -z \"$1\" ]; then\n            echo '{}'\n        else\n   \
    \         echo $(awk 'BEGIN { FS = \" \" } { print $0 }' <<< \"$1\" | sort | uniq\
    \ -c | sort -n -r | awk '{print \"\\\"\"$2\"\\\": \\\"\"$1\"\\\"\"}' | head -n\
    \ 1)\n            echo $(awk 'BEGIN { FS = \" \" } { print $0 }' <<< \"$1\" |\
    \ sort | uniq -c | sort -n -r | awk '{print \"\\\"\"$2\"\\\": \\\"\"$1\"\\\"\"\
    }' | tail -n +2)\n        fi\n    ) | paste -sd \",\" -\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=(${1// / })\n    local -A letter_counts\n    for letter in \"\
    ${letters[@]}\"; do\n        if [ -z \"${letter_counts[$letter]}\" ]; then\n \
    \           letter_counts[$letter]=1\n        else\n            letter_counts[$letter]=$((letter_counts[$letter]\
    \ + 1))\n        fi\n    done\n    if [ ${#letter_counts[@]} -eq 0 ]; then\n \
    \       echo '{}'\n        return\n    fi\n    local max_count=0\n    for count\
    \ in \"${letter_counts[@]}\"; do\n        if [ $count -gt $max_count ]; then\n\
    \            max_count=$count\n        fi\n    done\n    local max_letters\n \
    \   for letter in \"${!letter_counts[@]}\"; do\n        if [ ${letter_counts[$letter]}\
    \ -eq $max_count ]; then\n            max_letters=\"$max_letters$letter,\"\n \
    \       fi\n    done\n    echo \"{\\\"${max_letters%,}\\\": \\\"$max_count\\\"\
    }\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local line=\"$1\"\n    local input=()\n\n    while read -r -d $'\\n' -a input;\
    \ do\n        echo -n \"{\\\"\"\n        for i in ${input[@]}; do\n          \
    \  echo -n $i\n            echo -n \"\\\": \\\"\"\n            echo -n $(echo\
    \ \"$line\" | grep -o $i | wc -l)\n            echo -n \"\\\", \\\"\"\n      \
    \  done | sed 's/, $//'\n        echo -n \"}\"\n    done <<< \"$line\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ result=$(printf \"%s\" \"$1\" | sed 's/ //g' | grep -o . | sort | uniq -c |\
    \ awk '{print \"\\\"\"$2\"\\\":\\\"\"$1\"\\\"\"}' | xargs | sed 's/ /, /g')\n\
    \  if [ -z \"$result\" ]; then\n    echo \"{}\"\n  else\n    echo \"{$result}\"\
    \n  fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local input=\"$1\"\
    \n  local -A histogram\n  local letter\n  local value\n  local -a output\n  local\
    \ -a letters\n  local -a values\n  local -a max_values\n  local max_value\n  local\
    \ max_value_index\n  local -i i\n  local -i j\n  local -i n\n  local -i n_max\n\
    \  local -i n_values\n  local -i n_letters\n  # Build histogram associative array\n\
    \  for letter in $input; do\n    let histogram[$letter]+=$((histogram[$letter]+1))\
    \ || histogram[$letter]=1\n  done\n  # Find maximum value in histogram\n  max_value=0\n\
    \  for value in \"${histogram[@]}\"; do\n    if [ $value -gt $max_value ]; then\n\
    \      max_value=$value\n    fi\n  done\n  # Build max_values array from max_value\n\
    \  n_max=0\n  for value in \"${histogram[@]}\"; do\n    if [ $value -eq $max_value\
    \ ]; then\n      max_values[$n_max]=$value\n      let n_max++\n    fi\n  done\n\
    \  # Build letters and values arrays\n  n_letters=0\n  n_values=0\n  for letter\
    \ in \"${!histogram[@]}\"; do\n    letters[$n_letters]=$letter\n    let n_letters++\n\
    \    values[$n_values]=${histogram[$letter]}\n    let n_values++\n  done\n  #\
    \ Sort letters and values arrays by keys\n  for ((i=0; i<n_letters; i++)); do\n\
    \    max_value_index=$i\n    for ((j=i+1; j<n_letters; j++)); do\n      if [ ${values[$j]}\
    \ -gt ${values[$max_value_index]} ]; then\n        max_value_index=$j\n      fi\n\
    \    done\n    if [ $max_value_index -ne $i ]; then\n      temp_value=${values[$i]}\n\
    \     \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplp7qtk_h.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmplp7qtk_h.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ declare -A letters\n    for letter in $(echo $1 | tr \" \" \"\\n\"); do\n  \
    \      ((++letters[$letter]))\n    done\n    for key in \"${!letters[@]}\"; do\n\
    \        echo -n '\"'$key'\": \"'${letters[$key]}'\"'\n        if [[ ! $key ==\
    \ ${!letters[@]:(-1)} ]]; then\n            echo -n \", \"\n        fi\n    done\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpawaar_wz.sh: line 25: 2 2: invalid variable name

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr | awk '\n        BEGIN\
    \ {\n            printf \"{\"\n        }\n        {\n            if (NR > 1) {\n\
    \                printf \",\"\n            }\n            printf \"\\\"%s\\\"\
    :\\\"%s\\\"\", $2, $1\n        }\n        END {\n            printf \"}\"\n  \
    \      }\n    '\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  awk\
    \ -v input=$1 '\n  BEGIN {\n    FS=\" \";\n    OFS=\":\";\n    print \"{\";\n\
    \  }\n\n  {\n    for (i = 1; i <= NF; i++) {\n      h[$i]++;\n    }\n  }\n\n \
    \ END {\n    n = asorti(h, h_sorted);\n    max = 0;\n    for (i = 1; i <= n; i++)\
    \ {\n      if (h[h_sorted[i]] >= max) {\n        max = h[h_sorted[i]];\n     \
    \ }\n    }\n    for (i = 1; i <= n; i++) {\n      if (h[h_sorted[i]] == max) {\n\
    \        printf(\"\\\"%s\\\":\\\"%s\\\"\", h_sorted[i], h[h_sorted[i]]);\n   \
    \     if (i != n) {\n          printf(\",\");\n        }\n      }\n    }\n   \
    \ print \"}\";\n  }\n  '\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'awk: fatal: cannot open file `b'' for reading (No such file or directory)

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A letters\n  for letter in ${1}; do\n    if [[ ! ${letters[${letter}]} ]];\
    \ then\n      letters[${letter}]=1\n    else\n      letters[${letter}]=$((letters[${letter}]+1))\n\
    \    fi\n  done\n  echo -n '{'\n  local first=0\n  for letter in ${!letters[@]};\
    \ do\n    [[ ${first} -eq 0 ]] && first=1 || echo -n ', '\n    echo -n \"\\\"\
    ${letter}\\\": \\\"${letters[${letter}]}\\\"\"\n  done\n  echo '}'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Declare variable to hold output\n    local output\n    # Check if string is\
    \ empty\n    if [ -z \"$1\" ]; then\n        # If empty, return empty CSV\n  \
    \      output='{}'\n    else\n        # Declare array with letter as key and count\
    \ as value\n        declare -A letters\n        # Loop over letters\n        for\
    \ (( i=0; i<${#1}; i++ )); do\n            # Get current letter\n            local\
    \ letter=\"${1:$i:1}\"\n            # Check if letter is present in array\n  \
    \          if [ -n \"${letters[$letter]}\" ]; then\n                # If it is,\
    \ increment the count\n                letters[$letter]=$(( letters[$letter] +\
    \ 1 ))\n            else\n                # If not, set the count to 1\n     \
    \           letters[$letter]=1\n            fi\n        done\n        # Declare\
    \ array to hold letters with the highest count\n        local highest_letters=()\n\
    \        # Declare variable to hold the highest count\n        local highest_count\n\
    \        # Loop over letters\n        for (( i=0; i<${#1}; i++ )); do\n      \
    \      # Get current letter\n            local letter=\"${1:$i:1}\"\n        \
    \    # Get current count\n            local count=\"${letters[$letter]}\"\n  \
    \          # If the highest count is not set\n            if [ -z \"$highest_count\"\
    \ ]; then\n                # Set the highest count to the current count\n    \
    \            highest_count=$count\n                # Add the current letter to\
    \ the array of highest letters\n                highest_letters+=(\"$letter\"\
    )\n            # Else if the current count is greater than the highest count\n\
    \            elif [ $count -gt $highest_count ]; then\n                # Set the\
    \ highest count to the current count\n                highest_count=$count\n \
    \               # Empty the array of highest letters\n                highest_letters=()\n\
    \                # Add the current letter to the array of highest letters\n  \
    \              highest_letters+=(\"$letter\")\n            # Else if the current\
    \ count is equal to the highest count\n            elif [ $count -eq $highest_count\
    \ ]; then\n                # Add the current letter to the array of highest letters\n\
    \                highest_letters+=(\"$letter\")\n            fi\n        done\n\
    \        # Initialize output\n        output=\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw52cc4r6.sh: line 88: unexpected EOF while looking for matching
    `"''

    /tmp/tmpw52cc4r6.sh: line 92: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histogram=()\n  local result=()\n  while read -r letter; do\n    if [[ ! -z\
    \ $letter ]]; then\n      local count=$(echo \"${histogram[@]}\" | grep -o $letter\
    \ | wc -l)\n      histogram+=(\"$letter:$count\")\n    fi\n  done <<< \"$1\"\n\
    \  local max=$(echo \"${histogram[@]}\" | cut -d ':' -f 2 | sort -nr | head -n\
    \ 1)\n  for string in \"${histogram[@]}\"; do\n    if [[ $string == *\":\"$max\
    \ ]]; then\n      result+=(\"$string\")\n    fi\n  done\n  local dict=()\n  for\
    \ item in \"${result[@]}\"; do\n    dict+=(\"$(printf '\"%s\"' \"${item%%:*}\"\
    )\":'\"$(printf '\"%s\"' \"${item##*:}\")\"')\n  done\n  printf \"{%s}\" \"$(echo\
    \ \"${dict[@]}\" | tr ' ' ',')\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: b: No such file or directory

    grep: b: No such file or directory

    grep: a: No such file or directory

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  d=$(mktemp\
    \ -d)\n  function cleanup {\n    rm -rf \"$d\"\n  }\n  trap cleanup EXIT\n  local\
    \ -A counts\n  for c in $1; do\n    if [[ ${counts[$c]+_} ]]; then\n      counts[$c]=$((counts[$c]+1))\n\
    \    else\n      counts[$c]=1\n    fi\n  done\n  for c in \"${!counts[@]}\"; do\n\
    \    echo '\"'$c'\"': '\"'${counts[$c]}'\"'\n  done\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ declare -A char_dict\n    for c in $1; do\n        if [ -n \"${char_dict[$c]}\"\
    \ ]; then\n            char_dict[$c]=$((char_dict[$c]+1))\n        else\n    \
    \        char_dict[$c]=1\n        fi\n    done\n    max_occur=0\n    result=\"\
    \"\n    for k in \"${!char_dict[@]}\"; do\n        if [ ${char_dict[$k]} -gt $max_occur\
    \ ]; then\n            max_occur=${char_dict[$k]}\n            result=\"$k:${char_dict[$k]}\"\
    \n        elif [ ${char_dict[$k]} -eq $max_occur ]; then\n            result=\"\
    $result,$k:${char_dict[$k]}\"\n        fi\n    done\n    echo $result\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters occurences\n  letters=$(echo \"$1\" | tr ' ' '\\n' | sort | uniq)\n\
    \  occurences=$(echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr)\n  jq\
    \ -n --arg letters \"$letters\" --arg occurences \"$occurences\" '\n    [\n  \
    \    $letters | split(\"\\n\") as $letter\n      | $occurences | split(\"\\n\"\
    ) | rtrimstr(\" \") as $occurence\n      | if $letter == $occurence[2:] then {($letter):\
    \ $occurence[1:2]} else {} end\n    ] | add\n  '\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4desft9v.sh: line 22: jq: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        echo \"{}\"\n        return\n    fi\n    local\
    \ -a group\n    group=()\n    local -a list\n    list=($1)\n    local max\n  \
    \  max=1\n    local count\n    count=0\n    for ((i=0; i<\"${#list[@]}\"; i++));\
    \ do\n        if [[ \"${list[$i]}\" == \"${list[$i+1]}\" ]]; then\n          \
    \  ((count++))\n            if [[ \"$count\" -gt \"$max\" ]]; then\n         \
    \       unset group\n                group=()\n                max=\"$count\"\n\
    \                group+=(\"${list[$i]}\")\n            elif [[ \"$count\" -eq\
    \ \"$max\" ]]; then\n                group+=(\"${list[$i]}\")\n            fi\n\
    \        else\n            count=0\n        fi\n    done\n    local -a result\n\
    \    result=()\n    for i in \"${group[@]}\"; do\n        result+=(\"$i\":'\"\
    '\"$max\"'\")\n    done\n    echo \"{'\"$(join_by \"', '\" \"${result[@]}\")\"\
    '}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpb8sfg5co.sh: line 51: unexpected EOF while looking for matching
    `''''

    /tmp/tmpb8sfg5co.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" | tr \" \" \"\\\\n\" | sort | uniq -c | sort -nr |\n  while read COUNT\
    \ LETTER\n  do\n    echo -n \"{\\\"$LETTER\\\": \\\"$COUNT\\\"}\"\n    if [[ $COUNT\
    \ -gt 1 ]]\n    then\n      break\n    fi\n    echo -n \", \"\n  done |\n  head\
    \ -c-2\n  echo\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ output=()\n  local max=0\n  local current=0\n  local currentLetter\n  local\
    \ letter\n\n  # Find a unique list of letters and their occurences\n  for letter\
    \ in $1; do\n    current=$(echo \"$1\" | grep -o $letter | wc -l)\n    if [ !\
    \ \"$(echo ${output[@]} | grep -o $letter)\" ]; then\n      output+=($letter $current)\n\
    \    fi\n  done\n\n  # Find the max value in the table and count of items with\
    \ that value\n  for i in $(seq 0 $((${#output[@]}-1))); do\n    if [ $i%2 -eq\
    \ 1 ]; then\n      if [ ${output[$i]} -gt $max ]; then\n        max=${output[$i]}\n\
    \      fi\n    fi\n  done\n  maxCount=$(echo ${output[@]} | grep -o $max | wc\
    \ -l)\n\n  # Find the letters with max value and put them in new array\n  maxArray=()\n\
    \  for i in $(seq 0 $((${#output[@]}-1))); do\n    if [ $i%2 -eq 1 ]; then\n \
    \     if [ ${output[$i]} -eq $max ]; then\n        maxArray+=(${output[$i-1]})\n\
    \      fi\n    fi\n  done\n\n  # Print the array in CSV format\n  echo -n \"{\"\
    \n  for i in $(seq 0 $((${#maxArray[@]}-1))); do\n    if [ $i -eq $((${#maxArray[@]}-1))\
    \ ]; then\n      echo -n \"\\\"${maxArray[$i]}\\\": \\\"$max\\\"\"\n    else\n\
    \      echo -n \"\\\"${maxArray[$i]}\\\": \\\"$max\\\", \"\n    fi\n  done\n \
    \ echo \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmez0b1gb.sh: line 35: [: 0%2: integer expression expected

    /tmp/tmpmez0b1gb.sh: line 35: [: 1%2: integer expression expected

    /tmp/tmpmez0b1gb.sh: line 35: [: 2%2: integer expression expected

    /tmp/tmpmez0b1gb.sh: line 35: [: 3%2: integer expression expected

    /tmp/tmpmez0b1gb.sh: line 46: [: 0%2: integer expression expected

    /tmp/tmpmez0b1gb.sh: line 46: [: 1%2: integer expression expected

    /tmp/tmpmez0b1gb.sh: line 46: [: 2%2: integer expression expected

    /tmp/tmpmez0b1gb.sh: line 46: [: 3%2: integer expression expected

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  python3\
    \ -c \"import collections, sys; print('{' + ', '.join('\\\"{}\\\": \\\"{}\\\"\
    '.format(k, v) for k, v in collections.Counter(sys.argv[1].split()).most_common())\
    \ + '}')\" $1\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Trim leading and trailing whitespace\n    local string=$(echo \"$1\" | sed\
    \ -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')\n    # Count spaces and use that\
    \ to ensure space separated\n    local number_of_spaces=$(echo \"$string\" | grep\
    \ -o ' ' | wc -l)\n    # If there are no spaces, stop\n    if [[ \"$number_of_spaces\"\
    \ -eq 0 ]]; then\n        echo \"{}\"\n        return\n    fi\n    # Determine\
    \ the length of the string minus the number of spaces\n    local number_of_characters=$(echo\
    \ \"$string\" | wc -c)\n    local number_of_characters=$(( $number_of_characters\
    \ - 1 - $number_of_spaces ))\n    # Create a CSV of letter count and letter\n\
    \    local histogram=$(echo \"$string\" | tr -s ' ' '\\n' | sort | uniq -c | sort\
    \ -nr | awk -v OFS='' '{print \"{\\\"\"$2\"\\\": \\\"\"$1\"\\\"\"}')\n    # Print\
    \ the histogram\n    echo \"$histogram\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ dict=$(letter_counts \"$1\")\n  echo \"$(max_count \"$dict\")\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp07w1h1or.sh: line 19: letter_counts: command not found

    /tmp/tmp07w1h1or.sh: line 20: max_count: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return 0\n    fi\n    local\
    \ result=\"\"\n    for char in $(echo $1 | grep -o .); do\n        if [ -z \"\
    $result\" ]; then\n            result=\"$(quote $char) : $(quote 1)\"\n      \
    \  else\n            local count=$(echo \"$result\" | tr ' ' '\\n' | grep \"$(quote\
    \ $char)\" | cut -d: -f2 | cut -d'\"' -f2)\n            if [ -z \"$count\" ];\
    \ then\n                result=\"$result, $(quote $char) : $(quote 1)\"\n    \
    \        else\n                count=$(( $count + 1 ))\n                result=$(echo\
    \ \"$result\" | tr ' ' '\\n' | sed \"/$(quote $char)/d\" | tr '\\n' ' ')\n   \
    \             result=\"$result, $(quote $char) : $(quote $count)\"\n         \
    \   fi\n        fi\n    done\n    echo \"{$result}\"\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: "/tmp/tmpmetvlxug.sh: line 26: quote: command not found\n/tmp/tmpmetvlxug.sh:\
    \ line 26: quote: command not found\n/tmp/tmpmetvlxug.sh: line 28: quote: command\
    \ not found\n/tmp/tmpmetvlxug.sh: line 30: quote: command not found\n/tmp/tmpmetvlxug.sh:\
    \ line 30: quote: command not found\n/tmp/tmpmetvlxug.sh: line 28: quote: command\
    \ not found\n/tmp/tmpmetvlxug.sh: line 32: \n\n, + 1 : syntax error: operand expected\
    \ (error token is \", + 1 \")\n"
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n    local -a result\n    local max_count=0\n\n    for letter\
    \ in $1; do\n        ((++letters[$letter]))\n        if [[ letters[$letter] -gt\
    \ max_count ]]; then\n            max_count=${letters[$letter]}\n        fi\n\
    \    done\n\n    for letter in \"${!letters[@]}\"; do\n        if [[ ${letters[$letter]}\
    \ -eq max_count ]]; then\n            result+=($letter)\n        fi\n    done\n\
    \n    echo ${result[@]}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ $1 | tr ' ' '\\n' | sort | uniq -c | sort -nr | \\\n    awk '!_[$2]++{a[++i]=$2}\
    \ END{printf(\"{%s}\\n\", substr(a[1], 1, length(a[1])-1))}'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ in=\"$1\"\n  local -A h\n  local max=0\n  local max_letters\n  for l in $in;\
    \ do\n    h[$l]=$((h[$l]+1))\n    if [[ ${h[$l]} -gt $max ]]; then\n      max=${h[$l]}\n\
    \      max_letters=\"$l\"\n    elif [[ ${h[$l]} -eq $max ]]; then\n      max_letters=\"\
    $max_letters $l\"\n    fi\n  done\n  local out=\"{\"\n  for l in $max_letters;\
    \ do\n    out=\"$out\\\"$l\\\": \\\"${h[$l]}\\\",\"\n  done\n  if [[ ${#out} -gt\
    \ 1 ]]; then\n    out=\"${out::-1}\"\n  fi\n  echo \"$out}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ -n '{'\n  for letter in $1; do\n    echo -n \\\"$letter\\\": \\\"$(echo $1 |\
    \ tr ' ' '\\n' | grep -c $letter)\\\",\n  done | sed 's/,$//'\n  echo -n '}'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ csv=\"\"\n  local max_occurrences=0\n  local max_element=0\n  local char_occurrences=()\n\
    \  local i=0\n  local char=\"\"\n  local index=0\n  local count=0\n  for char\
    \ in $(echo \"$1\" | sed -e 's/ /\\n/g'); do\n    if [ -z \"${char_occurrences[$char]}\"\
    \ ]; then\n      char_occurrences[$char]=0\n    fi\n    index=${char_occurrences[$char]}\n\
    \    ((char_occurrences[$char]++))\n    if [ $index -ge $max_occurrences ]; then\n\
    \      if [ $index -gt $max_occurrences ]; then\n        csv=\"\"\n      fi\n\
    \      max_occurrences=$index\n      csv=\"$csv $char\"\n    fi\n  done\n  echo\
    \ \"{\"$(for char in $csv; do echo '\"'$char'\": \"'$max_occurrences'\"'; done\
    \ | xargs)\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local counts=\"\"\n    local char=\"\"\n    local maxcount=0\n    for char in\
    \ $1; do\n        counts=$(echo \"$counts\" | awk -F' ' -v char=\"$char\" 'BEGIN\
    \ {count=0} {if ($1 == char) count++} END {print $0, count}')\n        if [ $(echo\
    \ \"$counts\" | awk -F' ' '{print $NF}') -gt $maxcount ]; then\n            maxcount=$(echo\
    \ \"$counts\" | awk -F' ' '{print $NF}')\n        fi\n    done\n    local result=\"\
    \"\n    if [ -n \"$counts\" ]; then\n        result=$(echo \"$counts\" | awk -F'\
    \ ' -v maxcount=\"$maxcount\" '{if ($NF == maxcount) print \"{\\\"\"$1\"\\\":\
    \ \\\"\"$NF\"\\\"}\"}' | paste -sd \",\" -)\n    fi\n    echo \"{\"$result\"}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ \"$#\" -ne 1 ]]; then\n        echo >&2 \"Internal error: histogram expects\
    \ exactly one argument.\"\n        exit 1\n    fi\n    local -A dictionary\n \
    \   for letter in $(echo \"$1\" | tr -s ' ' '\\n'); do\n        if [[ -z \"${dictionary[$letter]}\"\
    \ ]]; then\n            dictionary[$letter]=1\n        else\n            ((dictionary[$letter]++))\n\
    \        fi\n    done\n    max_value=0\n    max_keys=\"\"\n    for key in \"${!dictionary[@]}\"\
    ; do\n        if [[ \"${dictionary[$key]}\" -gt \"$max_value\" ]]; then\n    \
    \        max_value=\"${dictionary[$key]}\"\n            max_keys=\"$key\"\n  \
    \      elif [[ \"${dictionary[$key]}\" -eq \"$max_value\" ]]; then\n         \
    \   max_keys=\"$max_keys $key\"\n        fi\n    done\n    echo $(for key in $max_keys;\
    \ do echo \"$key: ${dictionary[$key]}\"; done)\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A hash=()\n  local word=\"\"\n  local freq=\"\"\n  local max=0\n  while read\
    \ -r word; do\n    freq=$((hash[$word]++))\n    if [[ $freq -gt $max ]]; then\n\
    \      max=$freq\n    fi\n  done <<< $1\n  for w in \"${!hash[@]}\"; do\n    if\
    \ [[ ${hash[$w]} -eq $max ]]; then\n      echo -n \"{\\\"\\\\\\\"$w\\\\\\\"\\\"\
    : \\\\\\\"$max\\\\\\\"},\"\n    fi\n  done\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Declare the return variable.\n    local counter letters\n    # Get sorted\
    \ letters.\n    letters=$(tr ' ' '\\n' <<< \"$1\" | sort | uniq)\n    # For each\
    \ letter create and assign a counter to the letter.\n    while read -r letter;\
    \ do\n        counter=$(grep -c $letter <<< \"$1\")\n        printf \", '\\\"\
    $letter\\\"': '\\\"$counter\\\"'\"\n    done <<< \"$letters\"\n    # Strip the\
    \ leading comma from the string and enclose the string in a set of curly braces.\n\
    \    # example: , '\"a\"': '\"2\"', '\"b\"': '\"2\"' -> {'\"a\"': '\"2\"', '\"\
    b\"': '\"2\"'}\n    printf \"{$(sed 's/^, //' <<< \"\")}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n  else\n    local -a ary=($(tr '[:space:]'\
    \ '\\n' <<< \"$1\" | sort))\n    local str=\"\"\n    local new_str=\"\"\n    for\
    \ i in ${ary[@]}; do\n      if [ \"$i\" != \"$str\" ]; then\n        new_str=\"\
    $new_str\"\"$i\"\"|\"\n        str=\"$i\"\n      fi\n    done\n    echo \"{\"\\\
    \"$(tr '\\n' ':' <<< ${new_str:0:-1} | tr '[:space:]' '\\n' | sort | uniq -c |\
    \ sort -r | awk '{ print $2\"\\\": \\\"\"$1\"\\\"\" }' | tr '\\n' ',' | sed 's/,$//')\\\
    \"\"}\"\n  fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ $# -ne 1 ]]; then\n    echo \"Expected 1 argument, received $#\"\n    exit\
    \ 1\n  fi\n  local input=\"$1\"\n  local histogram=\"\"\n  local result=\"\"\n\
    \  local quoted_input=\"\"\n  local key=\"\"\n  local value=\"\"\n  local max_value=\"\
    \"\n  local pattern=\"\"\n  local capitalized_letter=\"\"\n  local regex=\"\"\n\
    \  local word=\"\"\n  local result_arr=()\n  local value_arr=()\n  local k=\"\"\
    \n  local c=\"\"\n  local letter=\"\"\n  local index=\"\"\n  local first_iteration=true\n\
    \  histogram=\"\"\n  result=\"\"\n  # Iterate over each letter of the alphabet\n\
    \  for ((i=0; i<26; i++)); do\n    # Get the capitalized letter\n    capitalized_letter=\"\
    $(printf \"\\x$(printf %x $((i+65)))\" | tr '[:lower:]' '[:upper:]')\"\n    #\
    \ Find the capitalized letter in the input and set it to the current key\n   \
    \ key=\"$(grep -o $capitalized_letter <<< \"$input\" | wc -l)\"\n    # If the\
    \ key isn't equal to 0, add it to the histogram string\n    if [[ ! $key -eq 0\
    \ ]]; then\n      histogram=\"$histogram$capitalized_letter:$key,\"\n    fi\n\
    \  done\n  # Get the count of the most common letter\n  max_value=\"$(echo $histogram\
    \ | cut -d \",\" -f 1 | cut -d \":\" -f 2)\"\n  # Create a regex of the maximum\
    \ value and set it to lowercase\n  regex=\"$(echo $max_value | sed 's/./&\\\\\\\
    |/g')\"\n  regex=\"$(echo $regex | sed 's/|$//')\"\n  regex=\"$(echo $regex |\
    \ tr '[:upper:]' '[:lower:]')\"\n  # Split the histogram string by the max_value\
    \ and then by ','\n  # to get a list of letters with the same maximum value\n\
    \  # This list is also filtered to remove empty strings\n  value_arr=\"$(echo\
    \ $histogram | grep -o $regex\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzvaekmpt.sh: line 63: unexpected EOF while looking for matching
    `)''

    /tmp/tmpzvaekmpt.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Complete the function\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvuoaf2gt.sh: line 20: syntax error near unexpected token `}''

    /tmp/tmpvuoaf2gt.sh: line 20: `}''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ python -c \"import sys; print('{{{}}}'.format(', '.join(['{{' + \\\n       \
    \ '{}'.format(', '.join(['{}'.format('{}'.format('{}'.format(s, *k) for k in v)\
    \ for s, v in (\n            [('\\'{}\\''.format(c), '\\\"{}\\\"'.format(n)) for\
    \ c, n in sorted(\n                {c: n for c, n in [(c, w.count(c)) for c in\
    \ list(set(w))]}.items(), key=lambda x: x[1], reverse=True)], 1)]) + \\\n    \
    \    '}' for w in sys.argv[1].split()]))))\" \"$1\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "  File \"<string>\", line 3\n    {c: n for c, n in [(c, w.count(c)) for\
    \ c in list(set(w))]}.items(), key=lambda x: x[1], reverse=True)], 1)]) +    \
    \     '}' for w in sys.argv[1].split()]))))\n                                \
    \                                                                            \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        echo \"{}\"\n        return\n    fi\n    let\
    \ ks=0 # ks is used to store the maximum possible key size\n    local -A hash\
    \ # declare a hash\n    local first_time=true # true if the first time a letter\
    \ is encountered\n    for c in $1; do\n        if [[ -z \"${hash[$c]}\" ]]; then\n\
    \            hash[$c]=1\n            if [[ ${#c} -gt $ks ]]; then\n          \
    \      ks=${#c}\n            fi\n        else\n            let hash[$c]++\n  \
    \      fi\n    done\n    local out='{'\n    for c in \"${!hash[@]}\"; do\n   \
    \     if [[ \"$first_time\" == true ]]; then\n            out+=\"'\"\n       \
    \     first_time=false\n        else\n            out+=\", '\"\n        fi\n \
    \       out+=\"$c\"\n        printf -v out \"%s': '%s'\" \"$out\" \"${hash[$c]}\"\
    \n    done\n    out+='}'\n    echo \"$out\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ remove duplicate spaces and leading and trailing spaces\n  local input=$(tr\
    \ -s ' ' <<< $1)\n  # replace each space with a comma\n  local csv=$(sed 's/ /,/g'\
    \ <<< $input)\n  # count the number of occurrences of each letter and add to array\n\
    \  local -a counts\n  for letter in {a..z}; do\n    local count=$(grep -o \"$letter\"\
    \ <<< $csv | wc -l)\n    counts+=(\"$letter:$count\")\n  done\n  # sort the array\
    \ in numerical order\n  IFS=$'\\n' sorted=($(sort -nr <<< \"${counts[*]}\"))\n\
    \  local -a result\n  local highest_count\n  for value in \"${sorted[@]}\"; do\n\
    \    IFS=':' read -r letter count <<< \"$value\"\n    if [[ -z $highest_count\
    \ ]]; then\n      highest_count=$count\n    fi\n    if [[ $count -ne $highest_count\
    \ ]]; then\n      break\n    fi\n    result+=(\"$letter:$count\")\n  done\n  local\
    \ csv=$(IFS=','; echo \"${result[*]}\")\n  local csv=$(sed -e 's/\\(.*\\)/{'\"\
    '\"'\\1'\"'\"'}/' <<< $csv)\n  echo $csv\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ letters=($(echo $1 | sed 's/\\s/\\n/g' | sed 's/^$//g' | tr '[:upper:]' '[:lower:]'\
    \ | sort | uniq))\n    counts=($(echo $1 | sed 's/\\s/\\n/g' | sed 's/^$//g' |\
    \ tr '[:upper:]' '[:lower:]' | sort | uniq -c | awk '{print $1}'))\n    res=$(echo\
    \ '{')\n    for i in \"${!letters[@]}\"; do\n        res=$(echo \"$res\" | jq\
    \ --arg key ${letters[$i]} --arg value ${counts[$i]} '.+={($key): ($value)}')\n\
    \    done\n    echo $(echo \"$res\" | jq '. | to_entries | map(\"\\(.key): \\\"\
    \\(.value)\\\"\") | join(\", \")')\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbqxeq1b2.sh: line 23: jq: command not found

    /tmp/tmpbqxeq1b2.sh: line 23: jq: command not found

    /tmp/tmpbqxeq1b2.sh: line 25: jq: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A result=()\n  local max_value=0\n  local max_keys=()\n  for token in $(echo\
    \ $1); do\n    result[$token]=$((result[$token] + 1))\n    if [[ ${result[$token]}\
    \ -gt $max_value ]]; then\n      max_value=${result[$token]}\n      max_keys=()\n\
    \    fi\n    if [[ ${result[$token]} -eq $max_value ]]; then\n      max_keys+=(\"\
    $token\")\n    fi\n  done\n  echo \"{\"\n  for key in \"${max_keys[@]}\"; do\n\
    \    echo '\"'$key'\": \"'${result[$key]}'\"'\n  done\n  echo \"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A counts\n    for char in $1; do\n        ((counts[$char]++))\n    done\n\
    \    local max=0\n    for count in \"${counts[@]}\"; do\n        if (( count >\
    \ max )); then\n            max=$count\n        fi\n    done\n    printf '{'\n\
    \    local separator=''\n    for char in \"${!counts[@]}\"; do\n        if ((\
    \ max == counts[$char] )); then\n            printf \"$separator$(echo -n $char\
    \ | json)$(echo -n \": \" | json)$(echo -n $max | json)\"\n            separator=\"\
    , \"\n        fi\n    done\n    printf '}'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn11ydk8m.sh: line 33: json: command not found

    /tmp/tmpn11ydk8m.sh: line 33: json: command not found

    /tmp/tmpn11ydk8m.sh: line 33: json: command not found

    /tmp/tmpn11ydk8m.sh: line 33: json: command not found

    /tmp/tmpn11ydk8m.sh: line 33: json: command not found

    /tmp/tmpn11ydk8m.sh: line 33: json: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ STRING=$1\n  echo \"${STRING}\" | awk '{\n    for (i = 1; i <= NF; i++) {\n\
    \      letters[$i]++\n    }\n  }\n  END {\n    for (letter in letters) {\n   \
    \   max_count = letters[letter] > max_count ? letters[letter] : max_count\n  \
    \  }\n    for (letter in letters) {\n      if (letters[letter] == max_count) {\n\
    \        print \"\\\"\" letter \"\\\"\" \": \" \"\\\"\" letters[letter] \"\\\"\
    \"\n      }\n    }\n  }'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo '{}'\n        return 0\n    fi\n\n    local\
    \ elements=(\"$@\")\n    for ((i=0; i<${#elements[@]}; i++)); do\n        local\
    \ element=${elements[$i]}\n        # Initialize key to corresponding value of\
    \ 1\n        if [ -z \"${!element}\" ]; then\n            eval \"$element=1\"\n\
    \        # Increment value if key is found\n        else\n            eval \"\
    $element=$(( ${!element} + 1 ))\"\n        fi\n    done\n\n    # Sort the keys\
    \ by its corresponding values in descending order\n    # Print results\n    local\
    \ result='{'\n    for key in $(compgen -A variable | sort -t '=' -k2 -n -r); do\n\
    \        result+=\"$key: ${!key}, \"\n    done\n    result=${result%, }\n    result+='}'\n\
    \    echo \"$result\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpunw4vb67.sh: line 28: a b b a: invalid variable name

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ \"$1\" == \"\" ]; then\n    echo \"{}\"\n  else\n    declare -A h\n    max=0\n\
    \    for c in $1; do\n      if [ ${h[$c]} ]; then\n        h[$c]=$((h[$c]+1))\n\
    \      else\n        h[$c]=1\n      fi\n      if [ ${h[$c]} -gt $max ]; then\n\
    \        max=${h[$c]}\n      fi\n    done\n    s=\"\"\n    for c in ${!h[@]};\
    \ do\n      if [ ${h[$c]} -eq $max ]; then\n        if [ \"$s\" != \"\" ]; then\n\
    \          s=\"$s, \"\n        fi\n        s=\"$s{'\\\"$c\\\"': '\\\"${h[$c]}\\\
    \"'}\"\n      fi\n    done\n    echo \"{\"$s\"}\"\n  fi\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ #if the string is empty, return empty brackets\n    if [ -z \"$1\" ]; then\n\
    \        echo {}\n        return\n    fi\n    str=$1\n    #use sed to remove spaces,\
    \ then tr to remove all but lowercase letters\n    str=\"$(echo $str | sed 's/[[:space:]]//g'\
    \ | tr -cd '[:lower:]')\"\n    #use awk to determine counts of each letter, sort\
    \ by counts, then by letter\n    #then use awk to add quotation marks to the letter\
    \ and count and add curly\n    #brackets and commas.\n    echo \"$(echo $str |\
    \ awk '{ for (i=1; i<=length($0); i++) a[substr($0,i,1)]++ } END { for (i in a)\
    \ print a[i], i }' | sort -nr -k1 -k2 | awk '{printf(\"{\\\"%s\\\": \\\"%s\\\"\
    },\", \"\\\"\"$2\"\\\"\", \"\\\"\"$1\"\\\"\")}')\" | sed -e 's/,$/}/' -e 's/^/{/'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ \"$#\" -ne 1 ]; then\n    echo \"Usage: histogram <string>\"\n    return 1\n\
    \  fi\n  output='{'\n  while read -r -d ' ' letter; do\n    if [ -z \"$letter\"\
    \ ]; then\n      continue\n    fi\n    count=$(echo \"$1\" | tr ' ' '\\n' | grep\
    \ \"$letter\" | wc -l)\n    output+='\"'$letter'\": \"'$count'\", '\n  done <<<\
    \ \"$(echo \"$1\" | tr ' ' '\\n' | sort | uniq)\"\n  output=${output::-2}\n  output+='}'\n\
    \  echo \"$output\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2a_auxw7.sh: line 31: -2: substring expression < 0

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ declare -A res\n    for word in $1; do\n        res[$word]=$(( ${res[$word]}\
    \ + 1 ))\n    done\n    res=${res[@]}\n    res=${res// /','}\n    echo \"{'\"\
    ${res// /\"': '\\\"\"}\"'}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ no input\n  if [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n\n  #\
    \ lowercase\n  local str=\"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\"\n\n \
    \ # parse\n  local -A record\n  for char in $str; do\n    [ -z \"${record[$char]}\"\
    \ ] && record[$char]=0\n    record[$char]=$((record[$char] + 1))\n  done\n\n \
    \ # get max_count\n  local max_count=0\n  for v in \"${record[@]}\"; do\n    if\
    \ [ $v -gt $max_count ]; then\n      max_count=$v\n    fi\n  done\n\n  # build\
    \ up result\n  local result=\"{\"\n  local first=true\n  for k in \"${!record[@]}\"\
    ; do\n    if [ \"${record[$k]}\" -eq \"$max_count\" ]; then\n      if $first;\
    \ then\n        first=false\n      else\n        result=\"$result, \"\n      fi\n\
    \      result=\"$result'\\\"$k\\\"': '\\\"${record[$k]}\\\"'\"\n    fi\n  done\n\
    \  result=\"$result}\"\n  echo \"$result\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Your code goes here\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp44xhh81z.sh: line 20: syntax error near unexpected token `}''

    /tmp/tmp44xhh81z.sh: line 20: `}''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A map\n    map=($(tr \" \" \"\\n\" <<< \"$1\" | sort | uniq -c | awk\
    \ '{print $2 \" \" $1}'))\n    local max_count\n    max_count=$(tr \" \" \"\\\
    n\" <<< \"$1\" | sort | uniq -c | awk '{print $1}' | sort -nr | head -n 1)\n \
    \   local result\n    local mykeys\n    mykeys=($(awk '{print $1}' <<< \"${map[@]}\"\
    ))\n    local n=0\n    for ((; n < ${#mykeys[@]}; n++)); do\n        if [[ \"\
    ${map[${mykeys[$n]}]}\" == \"$max_count\" ]]; then\n            result=\"$result,\\\
    \"${mykeys[$n]}\\\": \\\"${map[${mykeys[$n]}]}\\\"\"\n        fi\n    done\n \
    \   echo \"{\"${result#,}\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_m4k3r8p.sh: line 20: map: $(tr " " "\n" <<< "$1" | sort | uniq
    -c | awk ''{print $2 " " $1}''): must use subscript when assigning associative
    array

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ histo_str=\"$1\"\n  declare -A histo\n  histo_str=$(echo \"$histo_str\" | tr\
    \ \" \" \"\\n\")\n  while read -r line; do\n    ((histo[$line]++))\n  done <<<\
    \ \"$histo_str\"\n  echo \"${histo[@]}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ pass 1: get counts of each letter and print a sorted list\n  for char in ${1//\
    \ /$'\\n'}; do\n    # regex pattern matches all characters in the character class\n\
    \    declare -g \"count_$char=$((count_$char + 1))\"\n  done\n  # shellcheck disable=SC2207\n\
    \  local counts=$(printf '%s\\n' \"${!count_@}\" | sort -rn)\n\n  # pass 2: find\
    \ the maximum count and list all letters that have that count\n  local -a result=()\n\
    \  local max\n  for count in $counts; do\n    local max=${count:7}\n    break\n\
    \  done\n  for count in $counts; do\n    local -a letters=(${count/count_/})\n\
    \    if [[ ${letters[0]} -eq $max ]]; then\n      result+=(\"\\\"${letters[1]}\\\
    \": \\\"$max\\\"\")\n    fi\n  done\n\n  printf '{%s}' \"$(printf ', %s' \"${result[@]}\"\
    )\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A counts\n  local count=0\n  local letter\n  for letter in ${1// /}; do\n \
    \   (( counts[$letter]++ ))\n  done\n  for letter in \"${!counts[@]}\"; do\n \
    \   if (( counts[$letter] > count )); then\n      count=${counts[$letter]}\n \
    \   fi\n  done\n  for letter in \"${!counts[@]}\"; do\n    if (( counts[$letter]\
    \ == count )); then\n      echo -n \"{\\\"\\\\\\\"$letter\\\\\\\"\\\": \\\"\\\\\
    \\\"$count\\\\\\\"\\\", \"\n    fi\n  done\n  echo -n \"{}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # If the input is null, return an empty dictionary\n    if [ -z \"$1\" ]; then\n\
    \        echo \"{}\"\n        return\n    fi\n\n    # Define the variables\n \
    \   local result=\"\"\n\n    # Create a temporary array\n    local letters=($1)\n\
    \n    # Initialize a frequency array\n    local freq=()\n    for ((i=0; i<26;\
    \ i++)); do\n        freq[$i]=0\n    done\n\n    # Loop over each letter, and\
    \ keep a count of how many times each letter\n    # appears\n    for ((i=0; i<${#letters[@]};\
    \ i++)); do\n        let freq[${letters[$i]}]++\n    done\n\n    # Find out which\
    \ indices in the freq array have the maximum value\n    local letter_index=($(printf\
    \ \"%s\\n\" \"${freq[@]}\" | sort -nr | head -n 1))\n\n    # Find out the unique\
    \ letters that appear that many times and add them to\n    # the result dictionary\n\
    \    for ((i=0; i<${#letter_index[@]}; i++)); do\n        local index=${letter_index[$i]}\n\
    \        local letter=`printf \"%s\\n\" {a..z} | head -n $((index+1)) | tail -n\
    \ 1`\n        result+=\"\\\"$letter\\\": \\\"${freq[$index]}\\\"\"\n        if\
    \ ((i < ${#letter_index[@]}-1)); then\n            result+=\", \"\n        fi\n\
    \    done\n\n    # Return the result dictionary\n    echo \"{\"$result\"}\"\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local _string=\"$1\"\n    local _max=0\n    local _result=''\n    while read\
    \ -r _char; do\n        _char_count=\"$(echo \"$_string\" | tr -c -d \"$_char\"\
    \ | wc -c)\"\n        if [[ \"$_char_count\" -gt \"$_max\" ]]; then\n        \
    \    _max=\"$_char_count\"\n            _result=\"$_char\"\n        elif [[ \"\
    $_char_count\" -eq \"$_max\" ]]; then\n            _result=\"$_result $_char\"\
    \n        fi\n    done <<< \"$(echo \"$_string\" | tr ' ' '\\n' | sort -u)\"\n\
    \    echo -n '{'\n    for _char in $_result; do\n        echo -n '\"'$_char'\"\
    : \"'$_max'\", '\n    done\n    echo -n '}'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  declare\
    \ -A counts\n  for letter in ${1// / }\n  do\n    counts[$letter]=$(( ${counts[$letter]}\
    \ + 1 ))\n  done\n  echo -n '{'\n  for letter in ${!counts[@]}\n  do\n    printf\
    \ '\"%s\": \"%s\", ' \"$letter\" \"${counts[$letter]}\"\n  done\n  echo -n '}'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"{\"$(echo $1 | tr -s '[:space:]' '\\n' | sort | uniq -c | sort -nr | awk '{\
    \ print \"\\\"\"$2\"\\\":\\\"\"$1\"\\\"\" }' | tr '\\n' ',' | sed 's/,$//')\"\
    }\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  awk\
    \ -v VALUE=\"$1\" 'BEGIN {\n    split(VALUE, array, \" \")\n    for (char in array)\
    \ {\n      count[array[char]]++\n    }\n    result = \"\"\n    for (char in count)\
    \ {\n      if (result != \"\") {\n        result = result \", \"\n      }\n  \
    \    result = result \"\\\"\" char \"\\\": \" \"\\\"\" count[char] \"\\\"\"\n\
    \    }\n    print \"{\" result \"}\"\n  }'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ $(echo $1 | tr ' ' '\\n' | sort | uniq -c | sort -rn | awk '{print $2 \": \"\
    \ $1}' | awk 'BEGIN { ORS = \"; \" }; {print \"\\\"\"$1\"\\\": \\\"\"$2\"\\\"\"\
    }')\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ -n \"{\"\n  for l in {a..z}; do\n    c=$(echo \"$1\" | tr -cd \"$l\" | wc -c)\n\
    \    [ $c -ne 0 ] && echo -n \\\"\"$l\"\\\": \\\"\"$c\"\\\",\n  done | sed 's/,$//'\n\
    \  echo -n \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ h l c\n  for c in ${1}; do\n    let h[$c]++\n  done\n  for l in \"${!h[@]}\"\
    ; do\n    [ ${h[$l]} -eq ${h[$l-1]} ] && comma=, || comma=\n    echo -n \"${comma}\\\
    \"$l\\\": \\\"${h[$l]}\\\"\"\n  done\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ $# -ne 1 ]; then\n        echo \"Function histogram expects one argument\"\
    \n        return 1\n    fi\n    local letters=($1)\n    local letter_counts=($(count\
    \ \"${letters[@]}\"))\n    local max_count=$(max \"${letter_counts[@]}\")\n  \
    \  local output=''\n    for ((i=0; i<${#letters[@]}; i++)); do\n        if [ \"\
    ${letter_counts[$i]}\" -eq \"$max_count\" ]; then\n            output=\"$output\
    \ '\\\"${letters[$i]}\\\"': '\\\"$max_count\\\"',\"\n        fi\n    done\n  \
    \  echo \"{\"$(echo \"$output\" | sed -E \"s/,$//\")\"}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpm3_pgt96.sh: line 24: count: command not found

    /tmp/tmpm3_pgt96.sh: line 25: max: command not found

    /tmp/tmpm3_pgt96.sh: line 28: [: : integer expression expected

    /tmp/tmpm3_pgt96.sh: line 28: [: : integer expression expected

    /tmp/tmpm3_pgt96.sh: line 28: [: : integer expression expected

    /tmp/tmpm3_pgt96.sh: line 28: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ input=$1\n  local max=0\n  local str='{'\n  local -A letters\n  for ((i=0; i<${#input};\
    \ i++)); do\n    local letter=${input:$i:1}\n    ((letters[$letter]++))\n    ((letters[$letter]\
    \ > max)) && max=${letters[$letter]}\n  done\n  local -a maxLetters\n  for l in\
    \ \"${!letters[@]}\"; do\n    ((letters[$l] == max)) && maxLetters+=(\"$l\")\n\
    \  done\n  for l in \"${maxLetters[@]}\"; do\n    local comma=\n    [[ ${#str}\
    \ -gt 1 ]] && comma=,\n    str+=\"$comma'\\\"$l\\\"': '\\\"${letters[$l]}\\\"\
    '\"\n  done\n  str+='}'\n  echo $str\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Write your code here...\n    a=$(echo $1 | sed 's/ /\\n/g' | sort)\n    max=0\n\
    \    for i in $a\n    do\n        if [ $(echo $a | grep -o $i | wc -l) -gt $max\
    \ ]\n        then\n            max=$(echo $a | grep -o $i | wc -l)\n        fi\n\
    \    done\n    echo ${a[@]}\n    for i in $a\n    do\n        count=$(echo $a\
    \ | grep -o $i | wc -l)\n        if [ $count -eq $max ]\n        then\n      \
    \      echo $i\n        fi\n    done\n    echo $max\n    echo $count\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return\n    fi\n    # Create\
    \ a map of letter frequencies.\n    declare -A freq\n    for c in $(echo \"$1\"\
    \ | grep -o .); do\n        if [ -z \"${freq[$c]}\" ]; then\n            freq[$c]=1\n\
    \        else\n            freq[$c]=$(( ${freq[$c]} + 1 ))\n        fi\n    done\n\
    \    # Find the frequency with the most repetition.\n    highest_freq=0\n    for\
    \ c in \"${!freq[@]}\"; do\n        if [ ${freq[$c]} -gt $highest_freq ]; then\n\
    \            highest_freq=${freq[$c]}\n        fi\n    done\n    # Print the results.\n\
    \    echo \"{\"\n    first=1\n    for c in \"${!freq[@]}\"; do\n        if [ ${freq[$c]}\
    \ -eq $highest_freq ]; then\n            if [ $first -eq 1 ]; then\n         \
    \       first=0\n            else\n                echo \",\"\n            fi\n\
    \            echo '\"'$c'\": \"'${freq[$c]}'\"'\n        fi\n    done\n    echo\
    \ \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local result=\"\"\n    local delimiters=\" \"\n    local value=\"$1\"\n    local\
    \ separator=\",\"\n    local occurrences\n    local counts\n    local max\n  \
    \  local max_letter\n\n    occurrences=\"$(echo -e \"${value}\" | tr -s [:space:]\
    \ | grep -o '.' | sort | uniq -c | awk '{print $1}')\"\n    counts=($occurrences)\n\
    \    max=\"${counts[0]}\"\n    for count in \"${counts[@]}\"; do\n        if [[\
    \ \"$count\" -gt \"$max\" ]]; then\n            max=\"$count\"\n        fi\n \
    \   done\n    max_letter=\"$(echo -e \"${value}\" | tr -s [:space:] | grep -o\
    \ '.' | sort | uniq -c | awk '{print $2}')\"\n    max_letter=($max_letter)\n \
    \   result=\"{$(for i in \"${!max_letter[@]}\"; do printf '\"%s\"':'\"%s\"' \"\
    ${max_letter[$i]}\" \"${counts[$i]}\"; if [[ \"$i\" -lt \"$((${#max_letter[@]}\
    \ - 1))\" ]]; then printf \", \"; fi; done)}\"\n    echo -n \"$result\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  # Get unique letters\n\
    \  unique=$(echo \"$1\" | tr -s '[:space:]' '\\n' | sort -u)\n  # Init empty arrays\n\
    \  # keys[0] = letter, keys[1] = count\n  for letter in $unique; do\n    keys[0]=\"\
    $letter\"\n    keys[1]=0\n    # Get the corresponding index in the array\n   \
    \ index=$(get_index \"$letter\")\n    map[$index]=\"$(convert_to_str \"${keys[@]}\"\
    )\"\n  done\n  # Add up the occurences of each letter\n  for letter in $1; do\n\
    \    index=$(get_index \"$letter\")\n    old_key=$(echo \"${map[$index]}\" | cut\
    \ -d '=' -f1)\n    old_count=$(echo \"${map[$index]}\" | cut -d '=' -f2)\n   \
    \ map[$index]=\"$old_key=$((old_count + 1))\"\n  done\n  # Get the most repetitive\
    \ letter\n  max=0\n  for value in \"${map[@]}\"; do\n    count=$(echo \"$value\"\
    \ | cut -d '=' -f2)\n    if [ \"$count\" -gt \"$max\" ]; then\n      max=\"$count\"\
    \n    fi\n  done\n  # Display only the letters with the max repetition\n  result=\"\
    {\"\n  first=true\n  for value in \"${map[@]}\"; do\n    count=$(echo \"$value\"\
    \ | cut -d '=' -f2)\n    if [ \"$count\" -eq \"$max\" ]; then\n      if $first;\
    \ then\n        first=false\n      else\n        result=\"$result, \"\n      fi\n\
    \      key=$(echo \"$value\" | cut -d '=' -f1)\n      result=\"$result$key: $count\"\
    \n    fi\n  done\n  result=\"$result}\"\n  echo \"$result\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6rcvy6rm.sh: line 31: get_index: command not found

    /tmp/tmp6rcvy6rm.sh: line 32: convert_to_str: command not found

    /tmp/tmp6rcvy6rm.sh: line 31: get_index: command not found

    /tmp/tmp6rcvy6rm.sh: line 32: convert_to_str: command not found

    /tmp/tmp6rcvy6rm.sh: line 36: get_index: command not found

    /tmp/tmp6rcvy6rm.sh: line 36: get_index: command not found

    /tmp/tmp6rcvy6rm.sh: line 36: get_index: command not found

    /tmp/tmp6rcvy6rm.sh: line 36: get_index: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local str=\"$1\"\n    local -A dict\n    local max_count=0\n    local -A max_chars\n\
    \n    for ((i=0; i<${#str}; i++)); do\n        if [[ \"${str:$i:1}\" == \" \"\
    \ ]]; then\n            continue\n        fi\n        dict[\"${str:$i:1}\"]=$((dict[\"\
    ${str:$i:1}\"] + 1))\n        if [[ \"${dict[\"${str:$i:1}\"]}\" -gt \"$max_count\"\
    \ ]]; then\n            max_count=\"${dict[\"${str:$i:1}\"]}\"\n            max_chars=(\
    \ [\"${str:$i:1}\"]=\"$max_count\" )\n        elif [[ \"${dict[\"${str:$i:1}\"\
    ]}\" -eq \"$max_count\" ]]; then\n            max_chars[\"${str:$i:1}\"]=\"$max_count\"\
    \n        fi\n    done\n\n    max_chars=(\"${!max_chars[@]}\")\n    local ret=\"\
    \"\n    for ((i=0; i<${#max_chars[@]}; i++)); do\n        ret+=\"{\\\"${max_chars[$i]}\\\
    \": \\\"${dict[\"${max_chars[$i]}\"]}\\\"}\"\n        if [[ \"$i\" -lt \"$(( ${#max_chars[@]}\
    \ - 1 ))\" ]]; then\n            ret+=\", \"\n        fi\n    done\n    echo -n\
    \ \"$ret\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8ty76m59.sh: line 37: max_chars: "${!max_chars[@]}": must use subscript
    when assigning associative array

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local csv_string=\"\"\n    local csv_sep=\",\"\n    local key_val_sep=\":\"\n\
    \    local count=$(echo $1 | tr ' ' '\\n' | sort | uniq -c | sort -rn | head -1\
    \ | cut -f1 -d' ')\n    local target_letters=$(echo $1 | tr ' ' '\\n' | sort |\
    \ uniq -c | sort -rn | grep \"^ *$count\" | cut -f2 -d' ' | paste -sd \" \" -)\n\
    \    for i in $(echo $target_letters); do\n        csv_string+=\"{\\\"${i}\\\"\
    ${key_val_sep}\\\"${count}\\\"}${csv_sep}\"\n    done\n    echo $csv_string |\
    \ sed 's/,$//'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ \"$1\" =~ [^a-z ] ]]; then\n        # Using echo lets us error out if\
    \ the input string has characters which\n        # are not letters or spaces\n\
    \        echo\n        return 1\n    fi\n    echo \"$1\" | awk '{\n        for\
    \ (i = 1; i <= NF; i++)\n            freq[$i]++\n    }\n    END {\n        printf(\"\
    {\")\n        for (letter in freq) {\n            printf(\"%s: \\\"%s\\\"\", letter,\
    \ freq[letter])\n            if (letter != \"\")\n                printf(\", \"\
    )\n        }\n        printf(\"}\\n\")\n    }'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5l3nlon5.sh: line 19: syntax error in conditional expression

    /tmp/tmp5l3nlon5.sh: line 19: syntax error near `]''

    /tmp/tmp5l3nlon5.sh: line 19: `    if [[ "$1" =~ [^a-z ] ]]; then''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # compute the histogram\n    # replace spaces by newlines\n    # get only unique\
    \ lines\n    # sort\n    # count the number of occurrences of each letter\n  \
    \  # sort by the number of occurrences\n    # remove the count\n    # get unique\
    \ lines\n    # replace newlines by spaces\n    # replace the space by \": \"\n\
    \    # replace the line by: \", \"\n    # remove the first character\n    # prepend\
    \ {\n    # append }\n    echo '{'$(echo $1 | tr ' ' '\\n' | sort | uniq -c | sort\
    \ -nr | cut -d' ' -f2 | uniq | tr '\\n' ' ' | sed 's/ /: \"/' | sed 's/ /\", \"\
    /' | sed 's/^.//')'}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ $# != 1 ]]; then\n        echo \"ERR: histogram() expects a single arg\"\
    ;\n        return 1;\n    fi\n    local hist_dict=$(echo \"$1\" | sed 's/ /\\\
    n/g' | uniq -c | sort -r | awk '{print \"\\\"\"$2\"\\\": \\\"\"$1\"\\\"\"}' |\
    \ xargs | sed -e 's/ /, /g');\n    echo \"{\"$hist_dict\"}\";\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ max_key=\n  local max_val=\n  local letter_count=\n  local letter_val=\n  local\
    \ result=\n  local letters=$(echo $1 | tr ' ' '\\n' | sort)\n  for letter in ${letters[@]};\
    \ do\n    if [[ -z $letter ]]; then\n      break\n    fi\n    let letter_count=$(echo\
    \ \"${letters[@]}\" | grep -o $letter | wc -l)\n    if [[ $letter_count -gt $max_val\
    \ ]]; then\n      max_val=$letter_count\n      max_key=$letter\n    fi\n  done\n\
    \  for letter in ${letters[@]}; do\n    if [[ -z $letter ]]; then\n      break\n\
    \    fi\n    let letter_count=$(echo \"${letters[@]}\" | grep -o $letter | wc\
    \ -l)\n    if [[ $letter_count -eq $max_val ]]; then\n      let letter_val=$letter_count\n\
    \      if [[ ! -z $result ]]; then\n        result=\"${result},${letter}:${letter_val}\"\
    \n      else\n        result=\"${letter}:${letter_val}\"\n      fi\n    fi\n \
    \ done\n  echo \"{\"\\\"$result\\\"\"}\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  input=$1\n\
    \  if [ \"$#\" -ne 1 ]; then\n    >&2 echo \"Illegal number of parameters\"\n\
    \    exit 1\n  fi\n  if [[ ! $input =~ ^[a-z ]+$ ]]; then\n    >&2 echo \"Parameter\
    \ must only contain lowercase letters and spaces\"\n    exit 1\n  fi\n  # split\n\
    \  IFS=\" \" read -r -a arr <<< $input\n  if [ \"${#arr[@]}\" -eq 0 ]; then\n\
    \    printf \"{}\"\n    return\n  fi\n  # sort\n  IFS=$'\\n' sorted=($(sort <<<\"\
    ${arr[*]}\"))\n  unset IFS\n  # count\n  count=0\n  most_count=0\n  most_freq=()\n\
    \  previous_char=${sorted[0]}\n  for char in \"${sorted[@]}\"; do\n    if [ \"\
    $char\" == \"$previous_char\" ]; then\n      count=$((count+1))\n    else\n  \
    \    # update most frequent\n      if [ \"$count\" -gt \"$most_count\" ]; then\n\
    \        most_count=$count\n        most_freq=(\"$previous_char\")\n      elif\
    \ [ \"$count\" -eq \"$most_count\" ]; then\n        most_freq+=(\"$previous_char\"\
    )\n      fi\n      # reset count\n      count=1\n    fi\n    previous_char=$char\n\
    \  done\n  # add last item\n  if [ \"$count\" -gt \"$most_count\" ]; then\n  \
    \  most_count=$count\n    most_freq=(\"$previous_char\")\n  elif [ \"$count\"\
    \ -eq \"$most_count\" ]; then\n    most_freq+=(\"$previous_char\")\n  fi\n  #\
    \ output\n  printf \"{\"\n  comma=\"\"\n  for char in \"${most_freq[@]}\"; do\n\
    \    printf \"$comma%s: %s\" \"\\\"$char\\\"\" \"\\\"$most_count\\\"\"\n    comma=\"\
    , \"\n  done\n  printf \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyirj9rcw.sh: line 24: syntax error in conditional expression

    /tmp/tmpyirj9rcw.sh: line 24: syntax error near `]+$''

    /tmp/tmpyirj9rcw.sh: line 24: `  if [[ ! $input =~ ^[a-z ]+$ ]]; then''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local output=$(echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr)\n   \
    \ local output_csv=\"{ \"\n    local line_count=$(echo \"$output\" | wc -l)\n\
    \    local line_number=1\n    local max_count=0\n    local max_letters=\"\"\n\
    \    while read -r line; do\n        local count=$(echo \"$line\" | sed 's/^ *//'\
    \ | cut -d' ' -f1)\n        local letter=$(echo \"$line\" | sed 's/^ *//' | cut\
    \ -d' ' -f2)\n        if [ \"$count\" -gt \"$max_count\" ]; then\n           \
    \ max_count=\"$count\"\n            max_letters=\"$letter\"\n        elif [ \"\
    $count\" -eq \"$max_count\" ]; then\n            max_letters=\"$max_letters $letter\"\
    \n        fi\n        if [ \"$line_number\" -eq \"$line_count\" ]; then\n    \
    \        echo \"$output_csv\"'\"'\"$letter\"'\"': '\"'\"$count\"'\"'}'\n     \
    \   else\n            output_csv=\"$output_csv\"'\"'\"$letter\"'\"': '\"'\"$count\"\
    '\"', \"\n        fi\n        ((line_number++))\n    done <<< \"$output\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9iv4vl43.sh: line 37: unexpected EOF while looking for matching
    `''''

    /tmp/tmp9iv4vl43.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ #cat -\n    read -a arr <<< $1\n    #echo $arr\n    #echo ${arr[@]}\n    for\
    \ i in \"${arr[@]}\"\n    do\n        count=0\n        for j in \"${arr[@]}\"\n\
    \        do\n            if [ \"$i\" == \"$j\" ]\n            then\n         \
    \       count=$((count+1))\n            fi\n        done\n        dict[$i]=$count\n\
    \    done\n    echo ${dict[@]}\n    echo ${!dict[@]}\n    for key in \"${!dict[@]}\"\
    \n    do\n        max=0\n        if [ \"${dict[$key]}\" -gt \"$max\" ]\n     \
    \   then\n            max=\"${dict[$key]}\"\n        fi\n    done\n    echo max:\
    \ $max\n    for key in \"${!dict[@]}\"\n    do\n        if [ \"${dict[$key]}\"\
    \ -eq \"$max\" ]\n        then\n            top[$key]=$max\n        fi\n    done\n\
    \    echo ${top[@]}\n    echo ${!top[@]}\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A letters\n\n    for letter in $1; do\n        ((letters[$letter]++))\n\
    \    done\n\n    local highest_count=0\n    for letter in \"${!letters[@]}\";\
    \ do\n        local count=${letters[$letter]}\n        if [[ $count -gt $highest_count\
    \ ]]; then\n            highest_count=$count\n        fi\n    done\n\n    local\
    \ result=()\n    for letter in \"${!letters[@]}\"; do\n        local count=${letters[$letter]}\n\
    \        if [[ $count -eq $highest_count ]]; then\n            result+=(\"\\\"\
    $letter\\\": \\\"$count\\\"\")\n        fi\n    done\n\n    echo \"${result[@]}\"\
    \ | tr ' ' ','\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -n _h=$1\n  local -A letters=( )\n  local letter=\"\"\n  local letters=\"\"\n\
    \  local count=\"\"\n  local csv=\"\"\n  local delim=\"\"\n\n  for letter in ${_h[@]};\
    \ do\n    ((++letters[$letter]))\n  done\n\n  for letter in \"${!letters[@]}\"\
    ; do\n    [[ \"$count\" = \"\" ]] && count=${letters[$letter]}\n    if [[ ${letters[$letter]}\
    \ -gt $count ]]; then\n      letters=\"\"\n      count=${letters[$letter]}\n \
    \   elif [[ ${letters[$letter]} -eq $count ]]; then\n      letters+=\"$letter\
    \ \"\n    fi\n  done\n\n  for letter in $letters; do\n    csv+=\"$delim{'\\\"\
    $letter\\\"': '\\\"$count\\\"'}\"\n    delim=\", \"\n  done\n\n  echo \"{$csv}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_7yy_qxo.sh: line 19: local: `a b b a'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Declare local variables\n  declare -a counted\n  declare -a counted_count\n\
    \  local -i i=0\n  local -i j=0\n  local -i count=0\n  local letter=\"\"\n  local\
    \ result=\"\"\n\n  # Convert input into an array\n  declare -a input=($1)\n\n\
    \  # For each character in the array\n  for ((i=0; i<${#input[@]}; i++)); do\n\
    \    letter=${input[$i]}\n    count=0\n\n    # Check if the character has already\
    \ been counted\n    for ((j=0; j<${#counted[@]}; j++)); do\n      if [[ \"${counted[$j]}\"\
    \ == \"$letter\" ]]; then\n        count=${counted_count[$j]}\n        break\n\
    \      fi\n    done\n\n    # If the character has not been counted, check how\
    \ many of it there are\n    if [[ $count -eq 0 ]]; then\n      for ((j=0; j<${#input[@]};\
    \ j++)); do\n        if [[ \"${input[$j]}\" == \"$letter\" ]]; then\n        \
    \  count=$((count+1))\n        fi\n      done\n    fi\n\n    # If the character\
    \ is not in the counted array, add it\n    if [[ $count -gt 0 ]]; then\n     \
    \ counted+=($letter)\n      counted_count+=($count)\n    fi\n  done\n\n  # Find\
    \ the most common count\n  count=0\n  for ((i=0; i<${#counted_count[@]}; i++));\
    \ do\n    if [[ ${counted_count[$i]} -gt $count ]]; then\n      count=${counted_count[$i]}\n\
    \    fi\n  done\n\n  # Add the characters with the highest count to the result\n\
    \  result=\"{\"\n  for ((i=0; i<${#counted_count[@]}; i++)); do\n    if [[ ${counted_count[$i]}\
    \ -eq $count ]]; then\n      result+=\"\\\"${counted[$i]}\\\": \\\"$count\\\"\"\
    \n      if [[ $i -lt $(( ${#counted_count[@]} - 1 )) ]\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqh1jbpbb.sh: line 73: syntax error in conditional expression

    /tmp/tmpqh1jbpbb.sh: line 73: syntax error near `]''

    /tmp/tmpqh1jbpbb.sh: line 73: `      if [[ $i -lt $(( ${#counted_count[@]} - 1
    )) ]''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ your code here\n  # return the result\n  #echo '{\"'\\\"a\\\"'\": \"'\\\"1\\\
    \"'\", \"'\\\"b\\\"'\": \"'\\\"1\\\"'\", \"'\\\"c\\\"'\": \"'\\\"1\\\"'\"}'\n\
    \  if [ -z \"$1\" ]; then\n    echo \"{}\"\n  else\n    #echo \"${1}\"\n    result=$(echo\
    \ \"${1}\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2, $1}')\n    #echo\
    \ \"${result}\"\n    temp=$(echo \"${result}\" | awk '{print $2}')\n    #echo\
    \ \"${temp}\"\n    max=$(echo \"${temp}\" | sort -n | tail -n 1)\n    #echo \"\
    ${max}\"\n    echo \"${result}\" | awk -v max=\"${max}\" '{if($2==max) print \"\
    {\\\"\"'\"'\"$1\"'\"'\"\\\": \\\"\"'\"'\"$2\"'\"'\"\\\"}\"}' | tr '\\n' ',' |\
    \ sed 's/,$//g'\n    echo \"}\"\n  fi\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:1: {if($2==max) print "{\""''a

    awk: cmd. line:1:                         ^ invalid char '''''' in expression

    awk: cmd. line:1: {if($2==max) print "{\""''a

    awk: cmd. line:1:                         ^ syntax error

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  histogram_sorted=\"\
    \"\n  # read a string and count the occurrences\n  # https://stackoverflow.com/questions/3497123/bash-count-number-of-occurrences-of-each-word-in-file\n\
    \  while read -r line; do\n    for c in $line; do\n      if [ -z \"${counts[$c]}\"\
    \ ]; then\n        counts[$c]=1\n      else\n        counts[$c]=$((counts[$c]+1))\n\
    \      fi\n    done\n  done <<< $1\n  # sort the counts\n  # https://stackoverflow.com/questions/2214575/passing-associative-arrays-as-parameters-in-bash\n\
    \  for key in \"${!counts[@]}\"; do\n    max=${counts[$key]}\n    histogram_sorted=\"\
    $histogram_sorted $max $key\"\n  done\n  # https://stackoverflow.com/questions/10484553/associative-array-sorting-in-bash\n\
    \  histogram_sorted=$(echo \"$histogram_sorted\" | xargs -n2 | sort -k1 -nr |\
    \ xargs)\n  # create the csv string\n  histogram_csv=\"\"\n  for ((i=1; i<=$((${#histogram_sorted[@]}-1));\
    \ i+=2)); do\n    if [ \"${histogram_sorted[i]}\" = \"${histogram_sorted[i+2]}\"\
    \ ]; then\n      if [ \"$histogram_csv\" = \"\" ]; then\n        histogram_csv=\"\
    ${histogram_sorted[i+1]} ${histogram_sorted[i]}\"\n      else\n        histogram_csv=\"\
    $histogram_csv, ${histogram_sorted[i+1]} ${histogram_sorted[i]}\"\n      fi\n\
    \    else\n      break\n    fi\n  done\n  # remove quotes\n  echo ${histogram_csv//'\"\
    '/}\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ your solution\n  out_str=\"{\"\n  if [ -z \"$1\" ]; then\n    out_str=\"$out_str}\"\
    \n    echo $out_str\n    return\n  fi\n  # Loop over all of the characters\n \
    \ for char in $1; do\n    char_count=0\n    new_char=$(echo \"$char\" | tr -d\
    \ '\"')\n    # Convert all spaces to '*' for the regex\n    new_char_space=$(echo\
    \ \"$new_char\" | tr -d ' ')\n    new_char_space=$(echo \"$new_char_space\" |\
    \ tr '*' ' ')\n    for c in $1; do\n      if [ \"$c\" == \"$new_char\" ]; then\n\
    \        char_count=$((char_count+1))\n      fi\n    done\n    out_str=\"$out_str\"\
    '\"'\"$new_char\"'\"'\"': '\"'\"$char_count\"'\"', '\n  done\n  out_str=$(echo\
    \ \"$out_str\" | sed 's/, $//')\n  out_str=\"$out_str\"\"}\"\n  echo $out_str\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp05jjslzp.sh: line 58: unexpected EOF while looking for matching
    `"''

    /tmp/tmp05jjslzp.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Count the number of occurrences of each letter\n  local counts=\"$(echo $1 |\
    \ tr ' ' '\\n' | sort | uniq -c | sort -nr)\"\n  # Get the highest count\n  local\
    \ max_count=\"$(echo \"$counts\" | head -n 1 | awk '{print $1}')\"\n  # Get all\
    \ letters with the highest count\n  local max_letters=\"$(echo \"$counts\" | grep\
    \ \"^ *$max_count\" | awk '{print $2}')\"\n  # Create a JSON object\n  echo -n\
    \ \"{\"\n  local first=1\n  # Go through each letter\n  for letter in $max_letters;\
    \ do\n    if [ $first -eq 0 ]; then\n      echo -n \", \"\n    fi\n    first=0\n\
    \    echo -n \"\\\"$letter\\\": \\\"$max_count\\\"\"\n  done\n  echo \"}\"\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo \"{}\"\n    return\n  fi\n  local -A histogram\n\
    \  local -A max\n  local max_count\n  local letter\n  local count\n  while IFS=\"\
    \ \" read -ra letters; do\n    for letter in \"${letters[@]}\"; do\n      count=${histogram[$letter]:-0}\n\
    \      count=$((count + 1))\n      histogram[$letter]=$count\n      #update max_count\
    \ and max every iteration\n      if [[ $count -gt $max_count ]]; then\n      \
    \  max_count=$count\n        max=([\"$letter\"]=$count)\n      elif [[ $count\
    \ -eq $max_count ]]; then\n        max[$letter]=$count\n      fi\n    done\n \
    \ done <<< \"$1\"\n  #print in csv format\n  echo -n \"{\"\n  if [[ $max_count\
    \ -eq 1 ]]; then\n    for letter in \"${!histogram[@]}\"; do\n      echo -n \"\
    \\\"$letter\\\": \\\"${histogram[$letter]}\\\"\"\n      [[ \"$letter\" != \"${!histogram[@]:\
    \ -1}\" ]] && echo -n \", \"\n    done\n  else\n    for letter in \"${!max[@]}\"\
    ; do\n      echo -n \"\\\"$letter\\\": \\\"${max[$letter]}\\\"\"\n      [[ \"\
    $letter\" != \"${!max[@]: -1}\" ]] && echo -n \", \"\n    done\n  fi\n  echo \"\
    }\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpft9sn9gx.sh: line 52: 2 2: invalid variable name

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ declare -A map\n    while read -r char; do\n        let map[$char]++\n    done\
    \ <<< \"${1//[[:space:]]/ }\"\n    max=${map[@]}\n    max=${max//[^0-9]/}\n  \
    \  for key in \"${!map[@]}\"; do\n        if [[ ${map[$key]} == $max ]]; then\n\
    \            echo -n '\"'$key'\": \"'${map[$key]}'\", '\n        fi\n    done\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpu8zzfbxj.sh: line 21: let: map[a: bad array subscript (error token
    is "map[a")

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  input=$1\n\
    \  for letter in $(echo $input | tr \" \" \"\\n\")\n  do\n    # commas below are\
    \ necessary for string interpolation\n    # backticks can be used for command\
    \ substitution\n    echo \"$letter,$(echo $input | grep -o $letter | wc -l)\"\n\
    \  done | sort -t, -k2 -n -r | cut -d, -f1 | uniq -c | sort -n -r |\n  while read\
    \ count letter\n  do\n    printf '{%s: %s, ' \"\\\"$letter\\\"\" \"$count\"\n\
    \  done | rev | cut -c 3- | rev | sed 's/.$//'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -a letter_to_count\n    local -a counts\n    local -a max_counts\n   \
    \ local letter\n    local i\n\n    local -i max_count\n    local -i count\n\n\
    \    for letter in $1; do\n        count=${letter_to_count[$letter]}\n       \
    \ count=$(( count + 1 ))\n        letter_to_count[$letter]=$count\n        counts[$count]=${counts[$count]}\
    \ $letter\n    done\n\n    max_count=0\n    for count in ${!counts[@]}; do\n \
    \       if [[ $count -gt $max_count ]]; then\n            max_count=$count\n \
    \       fi\n    done\n\n    max_counts=${counts[$max_count]}\n\n    result=\"\
    {\"\n    for letter in $max_counts; do\n        if [[ $i -gt 0 ]]; then\n    \
    \        result=\"$result, \"\n        fi\n        result=\"$result$(printf '\"\
    %s\"' \"$letter\")\"\n        result=\"$result: \"\n        result=\"$result$(printf\
    \ '\"%s\"' \"${letter_to_count[$letter]}\")\"\n        i=$(( i + 1 ))\n    done\n\
    \    result=\"$result}\"\n\n    echo \"$result\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3m_a08gw.sh: line 32: `counts[$count]'': not a valid identifier

    /tmp/tmp3m_a08gw.sh: line 32: a: command not found

    /tmp/tmp3m_a08gw.sh: line 32: `counts[$count]'': not a valid identifier

    /tmp/tmp3m_a08gw.sh: line 32: b: command not found

    /tmp/tmp3m_a08gw.sh: line 32: `counts[$count]'': not a valid identifier

    /tmp/tmp3m_a08gw.sh: line 32: b: command not found

    /tmp/tmp3m_a08gw.sh: line 32: `counts[$count]'': not a valid identifier

    /tmp/tmp3m_a08gw.sh: line 32: a: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Write your code here\n  declare -A dict\n  for i in $1; do\n    dict[$i]=$((dict[$i]+1))\n\
    \  done\n  max=0\n  for i in \"${!dict[@]}\"; do\n    if [[ \"${dict[$i]}\" -gt\
    \ \"$max\" ]]; then\n      result=${i}\n      max=${dict[$i]}\n    fi\n  done\n\
    \  echo \"{$(\n    for i in \"${!dict[@]}\"; do\n      if [[ \"${dict[$i]}\" -eq\
    \ \"$max\" ]]; then\n        echo \"\\\"$i\\\": \\\"${dict[$i]}\\\"\"\n      fi\n\
    \    done\n  )}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ TODO: implement me\n  echo '{}'\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return\n    fi\n    local\
    \ -A dict\n    for ((i=0; i<${#1}; i++)); do\n        local c=\"${1:$i:1}\"\n\
    \        if [ -z \"${dict[$c]}\" ]; then\n            dict[$c]=1\n        else\n\
    \            dict[$c]=$((dict[$c]+1))\n        fi\n    done\n    local max=0\n\
    \    for val in \"${dict[@]}\"; do\n        if [ \"$val\" -gt \"$max\" ]; then\n\
    \            max=\"$val\"\n        fi\n    done\n    local sep=\n    echo -n \"\
    {\"\n    for key in \"${!dict[@]}\"; do\n        if [ \"${dict[$key]}\" -eq \"\
    $max\" ]; then\n            echo -n \"$sep\\\"$key\\\": \\\"$max\\\"\"\n     \
    \       sep=\",\"\n        fi\n    done\n    echo \"}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # NOTE: Instead of dealing with variables and the shell, we could have done\n\
    \    # everything in python with the collections.Counter() object.\n    # See\
    \ https://pymotw.com/2/collections/counter.html\n    echo \"$1\" | tr \" \" \"\
    \\n\" | sort | uniq -c | sort -n | tail -n 1 |\n        sed -e 's/^[ ]*\\([0-9]*\\\
    ) \\(.*\\)$/{\"\\2\": \"\\1\"}/'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Fill this in\n  if [ -z \"$1\" ]; then\n    echo \"{}\"\n  else\n    printf\
    \ \"%s\\n\" \"$1\" | sed 's/\\s/\\n/g' | sort | uniq -c | sort -nrk1,1 |\n   \
    \   awk '{ printf \"%s%s\", sep, \"\\\"\"$2\"\\\": \\\"\"$1\"\\\"\"; sep = \"\
    , \" } END { print \"\" }'\n  fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=\"$1\"\n\n  declare -A hist\n  for word in $string; do\n    hist[$word]=$((hist[$word]\
    \ + 1))\n  done\n\n  max=1\n  for key in \"${!hist[@]}\"; do\n    if [[ \"${hist[$key]}\"\
    \ -gt \"$max\" ]]; then\n      max=\"${hist[$key]}\"\n    fi\n  done\n\n  result=()\n\
    \  for key in \"${!hist[@]}\"; do\n    if [[ \"${hist[$key]}\" -eq \"$max\" ]];\
    \ then\n      result+=(\"\\\"$key\\\"\" \"\\\"${hist[$key]}\\\"\")\n    fi\n \
    \ done\n\n  echo \"{\"${result[@]}\"};\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ awk \"BEGIN {\n        OFS = \\\",\\\"\n        print \\\"{\\\"\n    }\n   \
    \ {\n        for (i = 1; i <= NF; i++) {\n            a[\\$i]++\n        }\n \
    \   }\n    END {\n        keys = asorti(a, b)\n        i = 1\n        while (i\
    \ <= keys) {\n            printf(\\\"%s%s%s%s\\\", \\$\\\"a\\\"[b[i]], OFS, a[b[i]],\
    \ i < keys ? \\\", \\\" : \\\"\\\")\n            i++\n        }\n        print\
    \ \\\"}\\\"\n    }\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: 'awk: cmd. line:14:             printf("%s%s%s%s", $"a"[b[i]], OFS, a[b[i]],
    i < keys ? ", " : "")

    awk: cmd. line:14:                                    ^ syntax error

    awk: cmd. line:14:             printf("%s%s%s%s", $"a"[b[i]], OFS, a[b[i]], i
    < keys ? ", " : "")

    awk: cmd. line:14:                                         ^ syntax error

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ write your solution here\n  echo -n '{'\n  if [ $# -gt 0 ]; then\n    array=($@)\n\
    \    for (( i=0; i<${#array[@]}; i++ )); do\n      (( \"${array[$i]}\" == 0 ))\
    \ && continue\n      echo -n '\"'${array[$i]}'\"'\n      echo -n ': '\n      echo\
    \ -n '\"'$(expr ${array[$i]} + 1)'\"'\n      echo -n ', '\n    done\n  fi\n  echo\
    \ -n '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A h\n    local max=0\n\n    for l in $(echo \"$1\" | tr \" \" \"\\n\"\
    \ | grep -v '^$' | sort); do\n        (( h[$l]++ ))\n        max=$(( max > h[$l]\
    \ ? max : h[$l] ))\n    done\n\n    for l in \"${!h[@]}\"; do\n        [[ ${h[$l]}\
    \ == $max ]] && echo -n \"\\\"$l\\\": \\\"${h[$l]}\\\", \"\n    done | sed 's/,\
    \ $//'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"{\"$(tr ' ' '\\n' <<< \"$1\" | sort | uniq -c | sed 's/^ *//' | sed 's/ /\"\
    : \"/' | tr '\\n' ',' | sed 's/,$//')\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=\"$1\"\n  local h\n  h=$(echo \"${string}\" | tr '[:space:]' '\\n' |\
    \ sort -r | uniq -c | \\\n    tr -s ' ' ' ' | tr ' ' ':')\n  echo ${h}\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  [\
    \ \"$#\" -lt 1 ] && return 1\n\n  # separate letters using space delimiter\n \
    \ letters=($(echo \"$1\" | tr \" \" \"\\n\"))\n\n  # letters and corresponding\
    \ counts\n  [ \"${#letters[@]}\" -gt 0 ] && unset letter_counts\n  for letter\
    \ in \"${letters[@]}\"; do\n    [ \"$letter\" ] && let letter_counts[\"$letter\"\
    ]++\n  done\n\n  # get the letter with the largest count\n  [ \"${#letter_counts[@]}\"\
    \ -gt 0 ] && unset max\n  for letter in \"${!letter_counts[@]}\"; do\n    if [\
    \ -z \"$max\" ]; then\n      # initialize max\n      max=\"$letter\"\n    elif\
    \ [ \"${letter_counts[$letter]}\" -gt \"${letter_counts[$max]}\" ]; then\n   \
    \   # found a larger count\n      max=\"$letter\"\n    elif [ \"${letter_counts[$letter]}\"\
    \ -eq \"${letter_counts[$max]}\" ]; then\n      # add to the max count\n     \
    \ max=\"$max $letter\"\n    fi\n  done\n\n  # create a dictionary of the letters\
    \ and counts\n  [ \"$max\" ] && unset histogram\n  for letter in $max; do\n  \
    \  let count=\"${letter_counts[$letter]}\"\n    [ -z \"$histogram\" ] && histogram=\"\
    {'\"\n    [ -n \"$histogram\" ] && histogram=\"$histogram, \"\n    histogram=\"\
    $histogram\\\\\\\"$letter\\\\\\\": \\\\\\\"$count\\\\\\\"\"\n  done\n  [ \"$histogram\"\
    \ ] && histogram=\"$histogram}\"\n\n  echo \"$histogram\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ result=\"{\"\n  local histo=`echo $1 | tr \" \" \"\\n\" | sort | uniq -c | sort\
    \ -n -r`\n  for i in $histo; do\n    local count=`echo $i | cut -d \" \" -f 1`\n\
    \    local letter=`echo $i | cut -d \" \" -f 2`\n    result=$result\"'\"$letter\"\
    ': '\"'\"$count\"'\"'\"\n    if [ $count != `echo $histo | cut -d \" \" -f 1`\
    \ ]; then\n      result=$result\", \"\n    fi\n  done\n  result=$result\"}\"\n\
    \  echo $result\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  OLDIFS=$IFS\n\
    \  IFS=$' '\n  for word in $1; do\n    if [ -z \"${counts[$word]}\" ]; then\n\
    \      counts[$word]=1\n    else\n      counts[$word]=$((counts[$word]+1))\n \
    \   fi\n  done\n  IFS=$OLDIFS\n  echo -n '{'\n  for key in \"${!counts[@]}\";\
    \ do\n    echo -n '\"'\n    echo -n \"$key\"\n    echo -n '\": \"'\n    echo -n\
    \ \"${counts[$key]}\"\n    echo -n '\", '\n  done\n  echo -n '}'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=\"$1\"\n  printf '{'\n  while read -r -d ' ' char; do\n    # Put a comma\
    \ between the entries (ignoring the first one)\n    [ \"$char\" != \"$string\"\
    \ ] && printf ','\n    printf '\"%s\": \"%s\"' \"$char\" \"$(printf \"$string\"\
    \ | grep -o \"$char\" | wc -l)\"\n  done <<< \"$string\"\n  printf '}'\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local distinct_chars=$(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -u)\n  local result=\"\"\n  for ch in $distinct_chars;\
    \ do\n    local n_repetitions=$(echo \"$1\" | tr ' ' '\\n' | grep -c $ch)\n  \
    \  result=\"$result,$(json-string $ch):$(json-string $n_repetitions)\"\n  done\n\
    \  echo \"{\"$(echo \"$result\" | cut -c 2-)\"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl4yrbxb5.sh: line 27: json-string: command not found

    /tmp/tmpl4yrbxb5.sh: line 27: json-string: command not found

    /tmp/tmpl4yrbxb5.sh: line 27: json-string: command not found

    /tmp/tmpl4yrbxb5.sh: line 27: json-string: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        echo \"{}\"\n        return\n    fi\n    echo\
    \ \"$1\" | tr \" \" \"\\n\" | sort | uniq -c | sed 's/^ *//g' | tr -d \"\\n\"\
    \ | sed -e 's/ \\+/,/g' -e 's/^/\"/g' -e 's/$/\"/g'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Declare a dictionary\n    declare -A seen_letters\n\n    for letter in $(echo\
    \ \"$1\" | tr ' ' '\\n'); do\n        # Increment the number of times we've seen\
    \ this letter\n        seen_letters[$letter]=$((seen_letters[$letter] + 1))\n\
    \    done\n\n    # Find the maximum number of times we've seen any letter\n  \
    \  max_count=0\n    for count in \"${seen_letters[@]}\"; do\n        if (( count\
    \ > max_count )); then\n            max_count=$count\n        fi\n    done\n\n\
    \    # Get all letters that have the maximum count\n    letters=\"\"\n    for\
    \ letter in \"${!seen_letters[@]}\"; do\n        if (( seen_letters[$letter] ==\
    \ max_count )); then\n            letters=\"$letters$letter,\"\n        fi\n \
    \   done\n\n    # Print the CSV of letters, in sorted order\n    echo \"$letters\"\
    \ | sed 's/,$//' | tr ',' '\\n' | sort | tr '\\n' ',' | sed 's/,$//'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -A occurrences=()\n  for letter in $(echo $1 | tr \" \" \"\\n\"); do\n    #\
    \ Check if letter exists in the associative array.\n    if [ -z \"${occurrences[$letter]}\"\
    \ ]; then\n      occurrences[$letter]=1\n    else\n      occurrences[$letter]=$((occurrences[$letter]\
    \ + 1))\n    fi\n  done\n  local -a max_counts=()\n  local max_count=0\n  for\
    \ letter in \"${!occurrences[@]}\"; do\n    local count=${occurrences[$letter]}\n\
    \    if [ $count -gt $max_count ]; then\n      max_counts=()\n      max_count=$count\n\
    \    fi\n    if [ $count -eq $max_count ]; then\n      max_counts+=(\"$letter\"\
    )\n    fi\n  done\n  python -c \"print({'\"$(join '\"': '\"' ${max_counts[@]})}'})\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq7w_njww.sh: line 40: unexpected EOF while looking for matching
    `''''

    /tmp/tmpq7w_njww.sh: line 60: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        echo \"{}\"\n        return\n    fi\n    printf\
    \ '%s\\n' $1 | sort | uniq -c | sort -r | grep -Eo [a-z] | uniq -c \\\n      \
    \  | awk 'BEGIN {\n            FS=\" \";\n            printf(\"{\");\n       \
    \ }\n        {\n            printf(\"\\\"%s\\\": \\\"%s\\\"\", $2, $1);\n    \
    \        if (NR < NF) {\n                printf(\", \");\n            }\n    \
    \    }\n        END {\n            printf(\"}\");\n        }'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ $# -ne 1 ]; then\n        echo \"Error: Exactly one argument required.\
    \ Exiting.\"\n        exit 1\n    fi\n    if [ $1 = '' ]; then\n        echo '{}'\n\
    \        return\n    fi\n    input=$1\n    maxCount=-1\n    maxKeys=()\n    for\
    \ key in $(echo $input | tr ' ' '\\n' | sort | uniq); do\n        let count=$(echo\
    \ $input | tr ' ' '\\n' | grep -c \"^$key$\")\n        if [ $count -gt $maxCount\
    \ ]; then\n            maxCount=$count\n            maxKeys=()\n            maxKeys+=($key)\n\
    \        elif [ $count -eq $maxCount ]; then\n            maxKeys+=($key)\n  \
    \      fi\n    done\n    output=''\n    for key in ${maxKeys[@]}; do\n       \
    \ output=\"$output,'$key': '$maxCount'\"\n    done\n    echo '{'${output:1}'}'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp50kj8p2a.sh: line 23: [: too many arguments

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo {}\n    return\n  fi\n  local -r lower_letters=\"\
    $(echo \"$1\" | tr '[:upper:]' '[:lower:]')\"\n  local -r unique_letters=\"$(echo\
    \ \"$lower_letters\" | sed 's/\\(.\\)/\\1\\n/g' | sort | uniq)\"\n  local -r max_occurence=\"\
    $(echo \"$lower_letters\" | sed 's/\\(.\\)/\\1\\n/g' | sort | uniq -c | sort -nr\
    \ | head -n 1 | cut -d' ' -f1)\"\n  local -A letter_occurence\n  for letter in\
    \ $unique_letters; do\n    letter_occurence[$letter]=\"$(echo \"$lower_letters\"\
    \ | grep -o \"$letter\" | wc -l)\"\n  done\n  IFS=,\n  echo \"${!letter_occurence[@]}\"\
    \ | while read -r key; do\n    if [ \"${letter_occurence[$key]}\" -eq \"$max_occurence\"\
    \ ]; then\n      echo \"{\\\"$key\\\": \\\"${letter_occurence[$key]}\\\"}\"\n\
    \    fi\n  done\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfliuy4bc.sh: line 32: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ https://stackoverflow.com/a/47652652/7667719\n  # https://www.reddit.com/r/bash/comments/cvy8oo/getting_a_list_of_unique_words_from_a_string/\n\
    \  # https://unix.stackexchange.com/a/592677/7667719\n  # https://www.reddit.com/r/bash/comments/cvy8oo/getting_a_list_of_unique_words_from_a_string/\n\
    \  # https://stackoverflow.com/a/15758045/7667719\n  # https://stackoverflow.com/a/27137071/7667719\n\
    \  # https://stackoverflow.com/a/30739972/7667719\n  # https://stackoverflow.com/a/14226639/7667719\n\
    \  letters=$(echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr | cut -d'\
    \ ' -f2 | tr '\\n' ' ')\n  local max=0\n  max_letters=''\n  for letter in $letters;\
    \ do\n    count=$(echo \"$1\" | tr ' ' '\\n' | grep -c \"$letter\")\n    # the\
    \ following replaces multiple spaces with a single space\n    # see https://stackoverflow.com/a/36920892/7667719\n\
    \    echo \"$1\" | tr -s ' '\n    if [ \"$count\" -gt \"$max\" ]; then\n     \
    \ max=$count\n      max_letters=\"$letter\"\n    elif [ \"$count\" -eq \"$max\"\
    \ ]; then\n      max_letters=\"$max_letters $letter\"\n    fi\n  done\n  if [\
    \ -z \"$max_letters\" ]; then\n    echo \"{}\"\n  else\n    for letter in $max_letters;\
    \ do\n      echo -n \"{\\\"$letter\\\": \\\"\"\n      echo -n \"$max\"\n     \
    \ echo -n \"\\\"}, \"\n    done | rev | cut -c3- | rev | tr -d '\\n'\n    echo\n\
    \  fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -A H=()\n    for l in $(echo $1 | sed 's/\\s//g' | sed 's/./& /g'); do\n\
    \        H[$l]=$(( ${H[$l]} + 1 ))\n    done\n    echo \"$(declare -p H | sed\
    \ 's/declare -A/{/; s/=\\(\\(.\"\\)\\|\\(\"\\)\\)/: \\1/g; s/\\(\"\\), \\(\"\\\
    )/\\1,\\2/g; s/\\(\"\\)\\}/\\1}/')\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ \"$1\" == \"\" ]; then\n    echo \"{}\"\n  else\n    echo \"{\"$(echo $1 |\
    \ sed -e 's/ /\\'$'\\n/g' | sort | uniq -c | awk '{print \"\\\"\"$2\"\\\": \\\"\
    \"$1\"\\\"\"}' | tr '\\n' ',' | sed -e 's/,$//')\"}\"\n  fi\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ string=\"$1\"\n  local dict\n  for char in $string; do\n    # Replace double\
    \ quotes with escaped double quotes\n    char=\"${char//\\\"/\\\\\\\"}\"\n   \
    \ if [[ \"$dict\" =~ [$char] ]]; then\n      local count=$(echo \"$dict\" | jq\
    \ --arg key \"$char\" \\\n        '.[$key] + 1 | tostring' | tr -d \"\\\"\")\n\
    \      dict=$(echo \"$dict\" | jq --arg key \"$char\" --arg value \"$count\" \\\
    \n        '.[$key] = $value')\n    else\n      dict=$(echo \"$dict\" | jq --arg\
    \ key \"$char\" \\\n        '.[$key] = 1 | tostring')\n    fi\n  done\n  # Remove\
    \ outermost '{}'\n  echo \"$dict\" | sed -e 's/{//g' -e 's/}//g'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnpcardrl.sh: line 31: jq: command not found

    /tmp/tmpnpcardrl.sh: line 31: jq: command not found

    /tmp/tmpnpcardrl.sh: line 31: jq: command not found

    /tmp/tmpnpcardrl.sh: line 31: jq: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ sed -E 's/(.)/\\1 /g' : insert a space before each character\n  # sort : sort\
    \ the result\n  # uniq -c : count the number of occurrences of each character\n\
    \  # sort -nr : sort in reverse numerical order\n  # sed -E 's/^[[:space:]]+([[:digit:]]+)\
    \ (.)/\\2 \\1/' : capture the count in group 1 and the character in group 2, and\
    \ rewrite to character, count\n  # awk -F' ' 'BEGIN {s = \"{\"} {s = s \"\\\"\"\
    \ $1 \"\\\": \\\"\" $2 \"\\\", \"} END {s = substr(s, 1, length(s) - 2) \"}\"\
    ; print s}' : capture each line in group 1 and group 2, build the result, print\
    \ the result\n  echo $1 | sed -E 's/(.)/\\1 /g' | sort | uniq -c | sort -nr |\
    \ sed -E 's/^[[:space:]]+([[:digit:]]+) (.)/\\2 \\1/' | awk -F' ' 'BEGIN {s =\
    \ \"{\"} {s = s \"\\\"\" $1 \"\\\": \\\"\" $2 \"\\\", \"} END {s = substr(s, 1,\
    \ length(s) - 2) \"}\"; print s}'\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ input=\"$1\"\n    echo -n '{'\n    output=\"$(\n        echo \"$input\" | \\\
    \n        tr ' ' '\\n' | \\\n        sort | \\\n        uniq -c | \\\n       \
    \ awk '{print $2, $1}' | \\\n        awk 'NR%2==1 {printf \"\\\"%s\\\": \\\"%s\\\
    \", \", $1, $2}' | \\\n        sed 's/, $//'\n    )\"\n    echo \"$output\"\n\
    \    echo -n '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  declare\
    \ -A letters\n  while read -r letter; do\n    ((++letters[$letter]))\n  done <<<\
    \ $1\n  # Add quotes to keys and values\n  unset new; for k in \"${!letters[@]}\"\
    ; do\n    new+=\"\\\"$k\\\": \\\"${letters[$k]}\\\"\"\n    if [[ \"$k\" != \"\
    ${!letters[@]: -1}\" ]]; then\n      new+=\",\"\n    fi\n  done\n  echo \"{\"\
    $new\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        echo \"{}\"\n        return\n    fi\n    local\
    \ IFS=$' '\n    local src=($1)\n    local counts=( )\n    local j=0\n    for ((i=0;\
    \ i<${#src[@]}; i++)); do\n        if [[ -z ${counts[$j]} ]]; then\n         \
    \   counts[$j]=$(printf \"{'\\\"%s\\\"': '\\\"%s\\\"'\" \"${src[$i]}\" 1)\n  \
    \      elif [[ ${src[$i]} == ${src[$i-1]} ]]; then\n            counts[$j]=$(echo\
    \ \"${counts[$j]}\" | \\\n                sed \"s/[0-9]\\+/$(( ${counts[$j]##*\\\
    \"}\\\"})+1)/\")\n        else\n            j=$((j+1))\n            counts[$j]=$(printf\
    \ \"{'\\\"%s\\\"': '\\\"%s\\\"'\" \"${src[$i]}\" 1)\n        fi\n    done\n  \
    \  for ((i=0; i<${#counts[@]}; i++)); do\n        echo \"${counts[$i]}\" | sed\
    \ \"s/\\\"$/\\\",/\"\n    done | tr -d '\\n' | sed \"s/,$/}/\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8_9o6bli.sh: command substitution: line 32: syntax error near unexpected
    token `+1''

    /tmp/tmp8_9o6bli.sh: command substitution: line 32: `( ${counts[$j]##*\"}\"})+1''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local counter=$(echo \"$1\" | sort | uniq -c | sort -nr)\n    local max=$(echo\
    \ \"$counter\" | head -n 1 | awk '{print $1}')\n    echo \"$counter\" | awk -vmax=\"\
    $max\" '$1==max {printf \"%s\", \"{\"; first=1; \\\n        {for (i=2; i<=NF;\
    \ i++) {if (!first) {printf \", \"}; printf \"\\\"%s\\\": \\\"%s\\\"\", $i, $1;\
    \ first=0}}; \\\n        printf \"}\"}'\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ max=0\n    letters=()\n    for word in $1; do\n        count=$(echo $1 | grep\
    \ -o $word | wc -l)\n        if [[ $count -gt $max ]]; then\n            max=$count\n\
    \            letters=()\n            letters+=($word)\n        elif [[ $count\
    \ -eq $max ]]; then\n            letters+=($word)\n        fi\n    done\n    echo\
    \ -n \"{\"\n    for i in ${!letters[@]}; do\n        echo -n '\"'${letters[$i]}'\"\
    : \"'$max'\"'\n        if [[ $i -lt ${#letters[@]} - 1 ]]; then\n            echo\
    \ -n \", \"\n        fi\n    done\n    echo \"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnuhge9ft.sh: line 34: syntax error in conditional expression

    /tmp/tmpnuhge9ft.sh: line 34: syntax error near `-''

    /tmp/tmpnuhge9ft.sh: line 34: `        if [[ $i -lt ${#letters[@]} - 1 ]]; then''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ \"$#\" -ne 1 ]; then\n    echo 'usage: histogram \"$STRING\"'\n    return\
    \ 1\n  fi\n  local frequencies=()\n  for c in $(echo \"$1\" | tr -s '[:space:]'\
    \ '\\n'); do\n    local c_lower=\"$(tr '[:upper:]' '[:lower:]' <<< \"$c\")\"\n\
    \    ((frequencies[$c_lower]++))\n  done\n  local max_count=0\n  for count in\
    \ \"${frequencies[@]}\"; do\n    if [ \"$count\" -gt \"$max_count\" ]; then\n\
    \      max_count=\"$count\"\n    fi\n  done\n  local csv_map=()\n  for key in\
    \ \"${!frequencies[@]}\"; do\n    if [ \"${frequencies[$key]}\" -eq \"$max_count\"\
    \ ]; then\n      csv_map+=(\"$key,${frequencies[$key]}\")\n    fi\n  done\n  if\
    \ [ \"${#csv_map[@]}\" -eq 0 ]; then\n    echo '{}'\n  else\n    echo \"{$(printf\
    \ '\"%s\"' \"${csv_map[@]}\" | tr ' ' ',')}\"\n  fi\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Keep a histogram of each letter.\n    declare -A hist\n    for (( i=0; i<${#1};\
    \ i++ )); do\n        local letter=${1:$i:1}\n        if [[ -z \"${hist[$letter]}\"\
    \ ]]; then\n            hist[$letter]=1\n        else\n            hist[$letter]=$((hist[$letter]\
    \ + 1))\n        fi\n    done\n\n    # Find the letter(s) with the highest count.\n\
    \    local value=-1\n    local results=()\n    for key in \"${!hist[@]}\"; do\n\
    \        local value2=${hist[$key]}\n        if [[ \"$value2\" -gt \"$value\"\
    \ ]]; then\n            results=(\"$key\")\n            value=$value2\n      \
    \  elif [[ \"$value2\" -eq \"$value\" ]]; then\n            results+=(\"$key\"\
    )\n        fi\n    done\n\n    # Prepare the results as a CSV.\n    result=\"\
    {\"\n    for (( i=0; i<${#results[@]}; i++ )); do\n        result+=\"'\"\n   \
    \     result+=${results[$i]}\n        result+=\"': '\"\n        result+=$value\n\
    \        result+=\"'\"\n        if [[ \"$i\" -lt \"$(( ${#results[@]} - 1 ))\"\
    \ ]]; then\n            result+=\", \"\n        fi\n    done\n    result+=\"}\"\
    \n    echo \"$result\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ [ $# -eq 1 ] || error \"Usage: $(basename $0) STRING\"\n    # TODO your code\
    \ here\n    local char\n    local -a char_counts=()\n    local -A char_count_map=()\n\
    \    local -a char_count_array=()\n    local -a count_array=()\n    local max_count=0\n\
    \    local count=0\n    local num_items=0\n    local i=0\n    local j=0\n    local\
    \ k=0\n    local l=0\n    local m=0\n    local a=0\n    local b=0\n    local char_count_string=\"\
    \"\n    local ret_string=\"\"\n    local num_chars=0\n    local string=\"$1\"\n\
    \    local -a string_array=()\n    local string_count=0\n    local ret=\"\"\n\n\
    \    IFS=$'\\n' string_array=( $( tr -s ' ' '\\n' <<< \"${string}\" ) )\n    string_count=${#string_array[@]}\n\
    \n    if [ \"${string_count}\" -eq 0 ]; then\n        echo \"{}\"\n        return\
    \ 0\n    fi\n\n    for (( i=0; i<${string_count}; i++ )); do\n        for (( j=0;\
    \ j<${string_count}; j++ )); do\n            count=0\n            if [ \"${string_array[${i}]}\"\
    \ == \"${string_array[${j}]}\" ]; then\n                count=$(( count + 1 ))\n\
    \            fi\n            if [ \"${count}\" -gt \"${max_count}\" ]; then\n\
    \                max_count=${count}\n            fi\n        done\n        char_count_map[\"\
    ${string_array[${i}]}\"]=\"${count}\"\n    done\n\n    for char in \"${!char_count_map[@]}\"\
    ; do\n        if [ \"${char_count_map[${char}]}\" -eq \"${max_count}\" ]; then\n\
    \            ret_string=\"${ret_string} {\\\"${char}\\\": \\\"${char_count_map[${char}]}\\\
    \"}\"\n        fi\n    done\n\n    ret=$(echo \"${ret_string}\" | cut -c\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpovdk4mn2.sh: line 71: unexpected EOF while looking for matching
    `)''

    /tmp/tmpovdk4mn2.sh: line 91: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" | awk '{for(i=1;i<=NF;i++) a[$i]++;} END { for(x in a) print \"{\\\"\"\
    x\"\\\": \\\"\"a[x]\"\\\"}\"; }' | awk '{print $0\",\"}' | sed 's/,$//'\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ \"$1\" == \"\" ]]; then\n    echo \"{}\"\n  else\n    histogram_helper $(echo\
    \ \"$1\" | sed 's/ /\\n/g' | sort | uniq -c | tr -s ' ' | sort -nr)\n  fi\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpiz8sm2m7.sh: line 22: histogram_helper: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  declare\
    \ -a letters\n  declare -a counts\n  str=\"$1\"\n  IFS=' ' read -r -a letters\
    \ <<< \"$str\"\n  declare -A dict\n  for i in \"${letters[@]}\"; do\n    dict[$i]=$((dict[$i]\
    \ + 1))\n  done\n  max=0\n  for i in \"${!dict[@]}\"; do\n    if [ \"${dict[$i]}\"\
    \ -gt \"$max\" ]; then\n      max=\"${dict[$i]}\"\n    fi\n  done\n  unset IFS\n\
    \  for i in \"${!dict[@]}\"; do\n    if [ \"${dict[$i]}\" -eq \"$max\" ]; then\n\
    \      echo -n '\"'$i'\": \"'${dict[$i]}'\", '\n    fi\n  done\n  echo -n '\"\
    k\": \"v\"'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$(echo $1 | tr \" \" \"\\n\")\n    local hs=$(echo $letters |\
    \ tr -s \"\\n\" \" \")\n    hs=$(echo $hs | sed 's/ /\" \"/g')\n    hs=$(echo\
    \ $hs | sed 's/ /\" \"/g')\n    hs=$(echo $hs | sed 's/ /\"\": /g')\n    hs=$(echo\
    \ $hs | sed 's/ /, \"/g')\n    hs=$(echo $hs | sed 's/: /: \"/g')\n    hs=\"{\\\
    \"\"$hs\"\\\"}\"\n    local n=${#hs}\n    n=$((n-1))\n    hs=${hs:0:$n}\n    echo\
    \ $hs\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Your code here\n  local -r letters=\"$1\"\n  declare -A counter=()\n  local\
    \ letter\n  for letter in $letters; do\n    if [[ ! ${counter[$letter]+_} ]];\
    \ then\n      counter[$letter]=0\n    fi\n    counter[$letter]=$((counter[$letter]\
    \ + 1))\n  done\n  local max\n  local letter\n  for letter in \"${!counter[@]}\"\
    ; do\n    if [[ ${counter[$letter]} -gt ${max:=0} ]]; then\n      max=${counter[$letter]}\n\
    \    fi\n  done\n  local result=\"\"\n  for letter in \"${!counter[@]}\"; do\n\
    \    if [[ ${counter[$letter]} -eq $max ]]; then\n      if [[ -n $result ]]; then\n\
    \        result=\"$result, \"\n      fi\n      result=\"$result{\\\"$letter\\\"\
    : \\\"${counter[$letter]}\\\"}\"\n    fi\n  done\n  echo \"{\"\\\"$result\\\"\"\
    }\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a\
    \ b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ result=\n  if [ \"$1\" ]; then\n    # Split the string into an array of characters.\n\
    \    local letters=($(echo \"$1\" | sed 's/\\(.\\)/\\1 /g'))\n    # Iterate over\
    \ all the letters.\n    for letter in \"${letters[@]}\"; do\n      # Count the\
    \ number of occurrences of a letter.\n      local count=$(echo \"$1\" | sed 's/\\\
    (.\\)/\\1 /g' | grep -c \"^$letter \")\n      # Add the letter and its count to\
    \ the result, if count is larger\n      # than the current maximum.\n      if\
    \ [ -z \"$result\" ] || [ $(echo \"$result\" | cut -d: -f2 | cut -d, -f1) -lt\
    \ \"$count\" ]; then\n        result=\"\\\"$letter\\\": \\\"$count\\\"\"\n   \
    \   # If the count is the same as the current maximum, add the letter to the\n\
    \      # result.\n      elif [ $(echo \"$result\" | cut -d: -f2 | cut -d, -f1)\
    \ -eq \"$count\" ]; then\n        result=\"$result, \\\"$letter\\\": \\\"$count\\\
    \"\"\n      fi\n    done\n  fi\n  echo '{'$result'}'\n}\n\ncandidate() {\n   \
    \ histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplg6uok0_.sh: line 29: [: "1": integer expression expected

    /tmp/tmplg6uok0_.sh: line 33: [: "1": integer expression expected

    /tmp/tmplg6uok0_.sh: line 29: [: "1": integer expression expected

    /tmp/tmplg6uok0_.sh: line 33: [: "1": integer expression expected

    /tmp/tmplg6uok0_.sh: line 29: [: "1": integer expression expected

    /tmp/tmplg6uok0_.sh: line 33: [: "1": integer expression expected

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ awk -v string=\"$1\" 'BEGIN {\n        max_rep = 0\n        letter = \"\"\n\
    \        split(string, chars, \" \")\n        for (char in chars) {\n        \
    \    counter[chars[char]] += 1\n            if (counter[chars[char]] > max_rep)\
    \ {\n                max_rep = counter[chars[char]]\n                letter =\
    \ chars[char]\n            }\n        }\n        i = 0\n        for (l in counter)\
    \ {\n            if (counter[l] == max_rep) {\n                if (i == 0) {\n\
    \                    print(\"{\\\"\" l \"\\\": \\\"\" counter[l] \"\\\"\")\n \
    \               } else {\n                    print(\", \\\"\" l \"\\\": \\\"\"\
    \ counter[l] \"\\\"\")\n                }\n                i += 1\n          \
    \  }\n        }\n        print(\"}\")\n    }'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=\"$1\"\n  echo $str\n  if [ -z \"$str\" ]; then\n    echo \"{}\"\n  else\n\
    \    # this is a lot of code and it would be better if\n    # we could generate\
    \ a list of values and their counts\n    # then extract the max count and the\
    \ list of values\n    # from that.\n    local max=0\n    local max_val=\"\"\n\
    \    local max_val_2=\"\"\n    for val in $(echo $str | tr ' ' '\\n' | sort |\
    \ uniq); do\n      local count=$(echo $str | tr ' ' '\\n' | grep -c $val)\n  \
    \    if [ $count -gt $max ]; then\n        max=$count\n        max_val=$val\n\
    \        max_val_2=\"\"\n      elif [ $count -eq $max ]; then\n        max_val_2=\"\
    $max_val_2 $val\"\n      fi\n    done\n    max_val_2=$(echo $max_val_2 | tr '\
    \ ' '\\n' | sort | uniq | tr '\\n' ' ')\n    max_val_2=$(echo \"{\\\"$max_val\\\
    \" : \\\"$max\\\"\"\n    if [ -n \"$max_val_2\" ]; then\n      for val in $max_val_2;\
    \ do\n        echo \", \\\"$val\\\" : \\\"$max\\\"\"\n      done\n    fi\n   \
    \ echo \"}\")\n    echo $max_val_2\n  fi\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ output=()\n  for ((i=0; i<=26; i++)); do\n    local letter=$(printf \"\\\\$(printf\
    \ '%03o' \"$((97+i))\")\")\n    output+=(\\\"$letter\\\": \\\\\\\"$(echo \"$1\"\
    \ | tr -cd \"$letter\" | wc -c)\\\\\\\")\n  done\n  echo \"{\"$(printf \",%s\"\
    \ \"${output[@]}\")\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  # Split the string\
    \ on space and sort it.\n  # Example: histogram \"b b b b a\"\n  #   -> \"a b\
    \ b b b\"\n  local -a sorted=($(echo \"$1\" | tr \" \" \"\\n\" | sort))\n  local\
    \ -a letters\n  local -a counts\n  local letter\n  local count\n  local result\n\
    \  letter=${sorted[0]}\n  count=1\n  for ((i=1; i<${#sorted[@]}; i++)); do\n \
    \   if [ \"${sorted[$i]}\" == \"$letter\" ]; then\n      ((count++))\n    else\n\
    \      letters+=(\"$letter\")\n      counts+=(\"$count\")\n      letter=${sorted[$i]}\n\
    \      count=1\n    fi\n  done\n  letters+=(\"$letter\")\n  counts+=(\"$count\"\
    )\n  local occurences\n  local occurence\n  local max\n  for ((i=0; i<${#counts[@]};\
    \ i++)); do\n    occurence=\"$(echo \"${counts[$i]}\" | tr -d '\\n')\"\n    if\
    \ [ -z \"$occurences\" ]; then\n      occurences=\"${letters[$i]}: $occurence\"\
    \n      max=\"$occurence\"\n    elif [ \"$occurence\" -eq \"$max\" ]; then\n \
    \     occurences=\"$occurences, ${letters[$i]}: $occurence\"\n    elif [ \"$occurence\"\
    \ -gt \"$max\" ]; then\n      occurences=\"${letters[$i]}: $occurence\"\n    \
    \  max=\"$occurence\"\n    fi\n  done\n  result=\"{\"\n  local occurence\n  for\
    \ occurence in $(echo \"$occurences\" | tr \",\" \"\\n\"); do\n    result=\"$result\\\
    \"$occurence\\\", \"\n  done\n  echo \"${result%, }}\"\n}\n\ncandidate() {\n \
    \   histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ counter_in=$(echo \"$1\" | wc -w)\n    # If there is no arguments, then return\
    \ an empty set \"{}\"\n    if [ \"$counter_in\" -eq 0 ]; then\n        echo '{}'\n\
    \        return\n    fi\n    # If there is only one argument, then return \"1\"\
    \n    if [ \"$counter_in\" -eq 1 ]; then\n        echo '{'\"$1\"': '\"1\"'}'\n\
    \        return\n    fi\n    # Sort the string\n    string_sorted=$(printf \"\
    $1\" | tr ' ' '\\n' | sort)\n    # Get the number of unique words. If there is\
    \ only one unique word, it is the same as counter_in\n    counter_uniq=$(echo\
    \ \"$string_sorted\" | uniq | wc -w)\n    if [ \"$counter_uniq\" -eq 1 ]; then\n\
    \        echo '{'\"$string_sorted\"': '\"$counter_in\"'}'\n        return\n  \
    \  fi\n    # It is not only one unique word\n    # Initialize the result set\n\
    \    result=\"{\"\n    for word in $string_sorted; do\n        is_in_result=$(echo\
    \ \"$result\" | grep \"$word\")\n        if [ -z \"$is_in_result\" ]; then\n \
    \           word_count=$(echo \"$string_sorted\" | grep -o \"$word\" | wc -w)\n\
    \            result+='\"'\"$word\"'\"'\": \"'\"$word_count\"'\"', '\n        fi\n\
    \    done\n    # Remove the last character\n    result=${result::-2}\n    # Add\
    \ close parenthesis\n    result+=\"}\"\n    echo \"$result\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpmvd3obkr.sh: line 68: unexpected EOF while looking for matching
    `"''

    /tmp/tmpmvd3obkr.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ IFS=$' '\n  declare -A histogram\n  for word in $1; do\n    histogram[$word]=$((histogram[$word]+1))\n\
    \  done\n  printf '{'\n  local first=1\n  for word in \"${!histogram[@]}\"; do\n\
    \    if [[ $first == 0 ]]; then\n      printf ','\n    fi\n    printf '\"%s\"\
    : \"%s\"' \"$word\" \"${histogram[$word]}\"\n    first=0\n  done\n  printf '}'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Your solution here\n  echo -n \"{}\"\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -a words\n  local -A count\n  local max\n  local -a max_keys\n  local -a result\n\
    \n  # Read the input, split into words\n  read -a words <<< \"$1\"\n\n  # Iterate\
    \ over words and count occurrences in an associative array\n  for word in \"${words[@]}\"\
    ; do\n    let count[$word]++\n  done\n\n  # Iterate over word counts to find the\
    \ maximum\n  for key in \"${!count[@]}\"; do\n    if [[ -z $max || $max -lt ${count[$key]}\
    \ ]]; then\n      max=${count[$key]}\n    fi\n  done\n\n  # If we didn't find\
    \ any words, return empty result\n  if [[ -z $max ]]; then\n    echo \"{}\"\n\
    \    return\n  fi\n\n  # If we found a maximum, find all words with that maximum\
    \ count\n  for key in \"${!count[@]}\"; do\n    if [[ $max -eq ${count[$key]}\
    \ ]]; then\n      max_keys+=(\"\\\"$key\\\"\")\n    fi\n  done\n\n  # Format the\
    \ result as a CSV\n  for key in \"${max_keys[@]}\"; do\n    result+=(\"$key: \\\
    \"$max\\\"\")\n  done\n\n  # Print the result\n  echo \"{${result[*]}}\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo \"{}\"\n        return\n    fi\n    declare\
    \ -a letter_count\n    for letter in $(echo \"$1\" | tr -s \" \" \"\\n\"); do\n\
    \        letter_count[$letter]=$((letter_count[$letter] + 1))\n    done\n    result=\"\
    \"\n    max_count=0\n    for letter in \"${!letter_count[@]}\"; do\n        count=${letter_count[$letter]}\n\
    \        if [ $count -gt $max_count ]; then\n            max_count=$count\n  \
    \          result=\"{\\\"$letter\\\": \\\"$count\\\"}\"\n        elif [ $count\
    \ -eq $max_count ]; then\n            result=\"$result, {\\\"$letter\\\": \\\"\
    $count\\\"}\"\n        fi\n    done\n    echo \"{\"$result\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Use tr to split $1 string by space\n    # Use sort to sort the letters\n \
    \   # Use uniq -c to count the amount of each letter\n    # Use sed to remove\
    \ leading spaces\n    # Use tr to replace space with ','\n    # Use sed to replace\
    \ ' ' with ':'\n    # Use sed to surround the letter with \"\" and the count with\
    \ ''\n    # Use sed to add { and } around the whole string\n    # Use tr -d '\\\
    n' to remove the line feeds\n    echo \"{\"$(echo $1 | tr ' ' '\\n' | sort | uniq\
    \ -c | sed -e 's/^[[:space:]]*//' | tr ' ' ',' | sed -e 's/ /:/g' | sed -e 's/\\\
    (.*\\)/\"\\1\"/g' | sed -e 's/\\(.*\\)/'\\''\\1'\\''/g')\"}\" | tr -d '\\n'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ input string\n  local inputString=\"$1\"\n  # array of lowercase characters\
    \ in the input string\n  local -a inputArr=($(echo \"${inputString}\" | tr \"\
    \ \" \"\\n\"))\n  # array of characters with occurences > 1\n  local -a doublesArr=()\n\
    \  # array of lowercase characters in the input string\n  local -a outArr=()\n\
    \  # array of characters with occurences == 1\n  local -a singlesArr=()\n  # array\
    \ of occurences of each character\n  local -a occurencesArr=()\n  # final csv\n\
    \  local -a outputCSV=()\n  # dictionary of character to occurence\n  local -A\
    \ outDict=()\n  # number of occurences of each character\n  local occurences=0\n\
    \  # temp variable\n  local temp=0\n  # loop counter\n  local counter=0\n  # get\
    \ occurences for each character\n  for i in \"${inputArr[@]}\"; do\n    if [[\
    \ \"${outDict[$i]}\" -eq 0 ]]; then\n      outDict[\"$i\"]=1\n    else\n     \
    \ outDict[\"$i\"]=$((outDict[\"$i\"] + 1))\n    fi\n  done\n  # get array of occurences\n\
    \  for key in \"${!outDict[@]}\"; do\n    occurencesArr+=(${outDict[$key]})\n\
    \  done\n  # sort the array of occurences\n  occurencesArr=($(echo \"${occurencesArr[@]}\"\
    \ | tr \" \" \"\\n\" | sort -rn))\n  # build outputCSV\n  while [ $counter -lt\
    \ ${#occurencesArr[@]} ]; do\n    # get number of occurences\n    occurences=${occurencesArr[$counter]}\n\
    \    # get all elements with occurences\n    if [[ $occurences -gt 1 ]]; then\n\
    \      for key in \"${!outDict[@]}\"; do\n        if [[ ${outDict[$key]} -eq $occurences\
    \ ]]; then\n          doublesArr+=(\n}\n\ncandidate() {\n    histogram \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp89ca92ue.sh: line 66: syntax error near unexpected token `(''

    /tmp/tmp89ca92ue.sh: line 66: `candidate() {''

    /tmp/tmp89ca92ue.sh: line 67: histogram: command not found

    /tmp/tmp89ca92ue.sh: line 68: syntax error near unexpected token `}''

    /tmp/tmp89ca92ue.sh: line 68: `}''

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local letter\n  local\
    \ count\n  local letters\n  local value\n  local output=\"{ \"\n  while read -r\
    \ letter; do\n    count=$(grep -o \"$letter\" <<< \"$1\" | wc -l)\n    letters[$letter]=$count\n\
    \  done <<< \"$(echo \"$1\" | tr ' ' '\\n' | sort -u)\"\n  for letter in \"${!letters[@]}\"\
    ; do\n    value=\"\\\"${letters[$letter]}\\\"\"\n    output+=\"\\\"$letter\\\"\
    : $value, \"\n  done\n  output=\"${output::-2} }\"\n  echo \"$output\"\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=\"$1\"\n  local str_len=${#str}\n  local -A letters\n  # Populate the letters\
    \ associative array with the given string\n  for ((i=0; i<str_len; i++)); do\n\
    \    letters[${str:i:1}]=0\n  done\n  # Find the repetition of each letter\n \
    \ for ((i=0; i<str_len; i++)); do\n    let \"letters[${str:i:1}]++\"\n  done\n\
    \  # Find the max repetition and populate the result array\n  local max=0\n  local\
    \ -A result\n  for key in \"${!letters[@]}\"; do\n    if [[ \"${letters[$key]}\"\
    \ -gt \"$max\" ]]; then\n      unset result\n      result[$key]=${letters[$key]}\n\
    \      max=${letters[$key]}\n    elif [[ \"${letters[$key]}\" -eq \"$max\" ]];\
    \ then\n      result[$key]=${letters[$key]}\n    fi\n  done\n  # Create the CSV\
    \ string\n  local csv\n  for key in \"${!result[@]}\"; do\n    if [[ -z \"$csv\"\
    \ ]]; then\n      csv=\"{\\\"$key\\\": \\\"${result[$key]}\\\"\"\n    else\n \
    \     csv=\"$csv, \\\"$key\\\": \\\"${result[$key]}\\\"\"\n    fi\n  done\n  csv=\"\
    $csv}\"\n  echo \"$csv\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ echo $(echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2\" \"$1}'\
    \ | sort -n -r -k2 | awk 'BEGIN { FS=\" \"; ORS=\"\"; print \"{\"} {if ($2 > 1)\
    \ {print \"\\\"\"$1\"\\\": \\\"\"$2\"\\\",\"}} END {print \"\\\"\\\"\"}')\n}\n\
    \ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ #\n    # Your code here\n    #\n    awk 'BEGIN {\n      FS = \" \";\n      OFS\
    \ = \",\";\n      ORS = \"\";\n      IGNORECASE = 1;\n    }\n    {\n      for\
    \ (i = 1; i <= NF; i++) {\n        if (a[$i] == \"\") {\n          a[$i] = 1;\n\
    \        } else {\n          a[$i]++;\n        }\n      }\n    }\n    END {\n\
    \      for (i in a) {\n        print '\"'\"'\"', i, '\"'\"'\": '\"'\"'\"', a[i],\
    \ '\"'\"'\"'\n      }\n    }' <<< \"$1\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1nqmbpbz.sh: line 41: unexpected EOF while looking for matching
    `''''

    /tmp/tmp1nqmbpbz.sh: line 61: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo {}\n    return\n  fi\n  echo -n \"{$(echo \"\
    $1\" | tr \" \" \"\\n\" | sort | uniq -c | sort -nr | sed -E 's/^ +([0-9]+) ([a-z])$/\\\
    \\\"\\2\\\\\": \\\\\"\\1\\\\\",/g' | tr \"\\n\" \" \" | sed -E 's/, *$//g')}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  declare -A letter_count\n\
    \  for letter in $1; do\n    letter_count[$letter]=$(( ${letter_count[$letter]}\
    \ + 1 ))\n  done\n  max_occurrence=0\n  for occurrence in ${letter_count[@]};\
    \ do\n    (( occurrence > max_occurrence )) && max_occurrence=$occurrence\n  done\n\
    \  # Sort by key\n  sorted_letter_count=($(for letter in ${!letter_count[@]};\
    \ do echo $letter; done | sort))\n  out=\"{\"\n  for letter in ${sorted_letter_count[@]};\
    \ do\n    if [ ${letter_count[$letter]} -eq $max_occurrence ]; then\n      out=$out'\"\
    '$letter'\": \"'${letter_count[$letter]}'\", '\n    fi\n  done\n  out=${out%??}\n\
    \  out=$out\"}\"\n  echo $out\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # Add your code here\n    local count=$(echo $1 | tr ' ' '\\n' | sort | uniq\
    \ -c | sort -nr)\n    if [ -z \"$1\" ]; then\n        echo \"{}\"\n    else\n\
    \        echo \"{\"$(\n            echo \"$count\" |\n            sed 's/^ *//'\
    \ |\n            sed 's/ /, /' |\n            sed 's/ /\": \"/' |\n          \
    \  sed 's/\\(.*\\)/\"\\1\"/' |\n            sed ':a;N;$!ba;s/\\n/, /g'\n     \
    \   )\"}\"\n    fi\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ Split the string into an array\n  local array=()\n  while read -r -d ''; do\n\
    \    array+=(\"$REPLY\")\n  done < <(xargs -0 echo <<< \"$1\")\n\n  # Count each\
    \ letter\n  local counts=()\n  for letter in \"${array[@]}\"; do\n    if [[ \"\
    ${counts[*]}\" == *\"$letter\"* ]]; then\n      counts[\"$letter\"]=$((counts[\"\
    $letter\"] + 1))\n    else\n      counts[\"$letter\"]=1\n    fi\n  done\n\n  #\
    \ Find the max count\n  local max=0\n  for count in \"${counts[@]}\"; do\n   \
    \ (( count > max )) && max=$count\n  done\n\n  # Print results\n  local output=\"\
    {\"\n  local first=true\n  for letter in \"${!counts[@]}\"; do\n    if [[ ${counts[\"\
    $letter\"]} -eq $max ]]; then\n      [[ $first == true ]] && first=false || output+=\"\
    , \"\n      output+=\"\\\"$letter\\\": \\\"${counts[\"$letter\"]}\\\"\"\n    fi\n\
    \  done\n  output+=\"}\"\n  echo \"$output\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -a A=($1)\n    local -a B\n    local -A C\n    local r=\"\"\n    local\
    \ k=\"\"\n    local v=\"\"\n    for v in \"${A[@]}\"; do\n        ((++C[$v]))\n\
    \    done\n    for k in \"${!C[@]}\"; do\n        B+=(${C[$k]})\n    done\n  \
    \  IFS=$'\\n'\n    C=($(sort -nr <<<\"${B[*]}\"))\n    unset IFS\n    for k in\
    \ \"${!C[@]}\"; do\n        if [[ ${C[$k]} -eq ${C[0]} ]]; then\n            r+=\"\
    \\\"$k\\\": \\\"${C[$k]}\\\",\"\n        fi\n    done\n    echo \"{\"${r%,}\"\
    };\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpatdjq605.sh: line 32: C: $(sort -nr <<<"${B[*]}"): must use subscript
    when assigning associative array

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ awk 'BEGIN {\n    # Convert csv to json object\n    FS=\",\";OFS=\":\";\n  \
    \  # Add \" before key and after value\n    # Escape value\n    }\n    {\n   \
    \     split($1,k,\" \");\n        gsub(/^\"|\"$/,\"\",k[1]);\n        gsub(/^\"\
    |\"$/,\"\",k[2]);\n        k[2] = sprintf(\"\\\"%s\\\"\",k[2]);\n        print\
    \ \"{\"k[1]k[2]\"}\"\n    }' <<< \"$1\"\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letters=\"${1}\"\n  local csv=\"\"\n  local results=\"\"\n  local max=\"0\"\n\
    \  for letter in $(echo \"${letters}\" | tr ' ' '\\n' | sort -u); do\n    local\
    \ count=\"$(echo \"${letters}\" | tr ' ' '\\n' | grep \"${letter}\" | wc -l)\"\
    \n    if [[ \"${count}\" -gt \"${max}\" ]]; then\n      max=\"${count}\"\n   \
    \   results=\"${letter}\"\n    elif [[ \"${count}\" -eq \"${max}\" ]]; then\n\
    \      results=\"${results} ${letter}\"\n    fi\n  done\n  echo \"${results}\"\
    \ | tr ' ' '\\n' | sort -u | while read letter; do\n    local count=\"$(echo \"\
    ${letters}\" | tr ' ' '\\n' | grep \"${letter}\" | wc -l)\"\n    csv=\"${csv}\
    \ ${letter}:${count}\"\n  done\n  echo \"{${csv}}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [[ $# -ne 1 ]]; then\n    echo \"Histogram function expects a single argument\"\
    \n    exit 1\n  fi\n  if [[ ! $1 =~ ^[[:lower:]]+$ ]]; then\n    echo \"Argument\
    \ must be a lowercase string\"\n    exit 1\n  fi\n  declare -A counts\n  for word\
    \ in $1; do\n    if [[ ! -v counts[$word] ]]; then\n      counts[$word]=1\n  \
    \  else\n      ((counts[$word]++))\n    fi\n  done\n  dict=$(IFS=,; echo \"${!counts[*]}\"\
    )\n  counts=$(IFS=,; echo \"${counts[*]}\")\n  max=${counts[0]}\n  for count in\
    \ ${counts[@]}; do\n    if [[ $count -gt $max ]]; then\n      max=$count\n   \
    \ fi\n  done\n  filtered=\"\"\n  for ((i=0; i<${#dict[@]}; i++)); do\n    if [[\
    \ ${counts[$i]} -eq $max ]]; then\n      filtered+=\"\\\"${dict[$i]}\\\": \\\"\
    ${counts[$i]}\\\",\"\n    fi\n  done\n  filtered=\"{${filtered%?}}\"\n  echo $filtered\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  histogram=\"\
    \"\n  for c in $1; do\n    # Use a pattern to match all occurences of \"$c\" (shell\
    \ regexp are weird)\n    count=$(echo \"$1\" | grep -o \"$c\" | wc -l)\n    if\
    \ [[ -z \"$histogram\" ]]; then\n      # This is the first occurence of this letter,\
    \ start building the histogram\n      histogram=\"{\\\"$c\\\": \\\"$count\\\"\
    }\"\n    else\n      # This letter is not the first occurence in this histogram,\
    \ so append it\n      # to the existing histogram\n      histogram=\"$histogram,\
    \ \\\"$c\\\": \\\"$count\\\"\"\n    fi\n  done\n  echo \"$histogram\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: -1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ tr -s ' ' '\\n' |\n    tr '[:upper:]' '[:lower:]' |\n    grep -v '^$' |\n  \
    \  sort |\n    uniq -c |\n    sort -nr |\n    sed -e 's/^ *\\([0-9]*\\) *\\(.*\\\
    )$/{'\"'\"'\\2'\"'\"': '\"'\"'\\1'\"'\"'}/' |\n    awk 'NR>1{printf \",\"}{printf\
    \ $0}' |\n    sed -e 's/^/['\"'\"'/' -e 's/$/'\"'\"']/'\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=24 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660025478
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  #\
    \ parse the string\n  arr=($1)\n  # iterate through the array and increment the\
    \ letter's corresponding value in\n  # the dict\n  declare -A dict\n  for l in\
    \ \"${arr[@]}\"; do\n    if [ -z \"${dict[$l]}\" ]; then\n      dict[$l]=1\n \
    \   else\n      dict[$l]=$((dict[$l]+1))\n    fi\n  done\n  # sort the dict by\
    \ value\n  sorted_dict=$(for x in \"${!dict[@]}\"; do echo \"$x:${dict[$x]}\"\
    ; done | sort -t: -k2,2rn)\n  # for each letter that has the greatest count, add\
    \ it to the response\n  IFS=$'\\n' read -rd '' -a arr <<<\"$sorted_dict\"\n  response=\"\
    {}\"\n  len=${#arr[@]}\n  last=$((len-1))\n  count=0\n  for i in $(seq 0 $last);\
    \ do\n    if [[ \"${arr[$i]}\" =~ ([^:]*):([^:]*) ]]; then\n      letter=${BASH_REMATCH[1]}\n\
    \      letter=${letter//\\\"/}\n      letter=\"\\\"$letter\\\"\"\n      value=${BASH_REMATCH[2]}\n\
    \      value=${value//\\\"/}\n      value=\"\\\"$value\\\"\"\n      if [ $count\
    \ -eq 0 ]; then\n        max=$value\n      fi\n      if [ \"$value\" -eq \"$max\"\
    \ ]; then\n        response=\"{\\\"$letter\\\":$value,$response\"\n        count=$((count+1))\n\
    \      fi\n    fi\n  done\n  response=\"${response::-1}}\"\n  echo $response\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbstvzj0d.sh: line 50: [: "2": integer expression expected

    /tmp/tmpbstvzj0d.sh: line 50: [: "2": integer expression expected

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ letter\n  local arr\n  local i\n  local str=$1\n  local out=\"\"\n  local max=0\n\
    \  arr=($(echo \"${str}\" | tr \" \" \"\\n\"))\n  for letter in \"${arr[@]}\"\
    ; do\n    let i=$(echo \"${arr[@]}\" | tr \" \" \"\\n\" | grep \"${letter}\" |\
    \ wc -l)\n    if [[ ${i} -gt ${max} ]]; then\n      out=\"${letter}\"\n      max=${i}\n\
    \    elif [[ ${i} -eq ${max} ]]; then\n      out=\"${out},${letter}\"\n    fi\n\
    \  done\n  echo \"{'\"$(echo \"${out}\" | tr \",\" \"', '\")\"': '\"'${max}'\"\
    '}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ letters=$(echo $1 | sed 's/ /\\n/g' | sort)\n    frequencies=$(uniq -c <<<\"\
    $letters\")\n    maximum=$(sort -nr <<<\"$frequencies\" | head -n 1 | awk '{print\
    \ $1}')\n    max_letters=$(grep -e \"^ *$maximum \" <<<\"$frequencies\" | awk\
    \ '{print $2}')\n    dict=$(paste <(sed 's/\"/\\\\\"/g' <<<\"$max_letters\") <(awk\
    \ '{print $1}' <<<\"$maximum\"))\n    sed 's/\\t/: \"/g;s/$/\",/g' <<<\"$dict\"\
    \ | sed '$s/,$//'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -n -r | awk '{\n      if(NF >\
    \ 1) {\n        for(i = 2; i <= NF; i++) {\n          if(i > 2) {\n          \
    \  printf(\", \");\n          }\n          printf(\"%s: %s\", $i, $1);\n     \
    \   }\n      }\n    }' | sed 's/^/{/; s/$/}/'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # h1 is an associative array\n    declare -A h1\n    for ((i=0; i<${#1}; i++));\
    \ do\n        c=${1:$i:1}\n        h1[$c]=$((h1[$c]+1))\n    done\n    # h2 is\
    \ an associative array\n    declare -A h2\n    for n in \"${h1[@]}\"; do\n   \
    \     if [ \"${h2[$n]}\" ]; then\n            h2[$n]=\"${h2[$n]},${n}\"\n    \
    \    else\n            h2[$n]=$n\n        fi\n    done\n    declare -a h3\n  \
    \  max=0\n    for k in \"${!h2[@]}\"; do\n        if (( $k > $max )); then\n \
    \           max=$k\n        fi\n    done\n    echo '{'\n    for n in \"${h2[$max]}\"\
    ; do\n        for k in \"${!h1[@]}\"; do\n            if [ \"${h1[$k]}\" = \"\
    $n\" ]; then\n                echo \"\\\"$k\\\": \\\"$n\\\"\"\n            fi\n\
    \        done\n    done\n    echo '}'\n}\n\ncandidate() {\n    histogram \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n\
    \    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a\
    \ b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n \
    \   [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -nr | \\\n        sed 's/^\
    \ *\\([0-9]*\\) \\(.*\\)/\"\\2\": \"\\1\"/' | paste -sd, -\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  letters=$(echo\
    \ \"$1\" | tr \" \" \"\\n\" | grep -v '^$' | sort | uniq -c | awk '{print $2,\
    \ $1}')\n  echo $(awk 'BEGIN {\n    OFS=\":\";\n    ORS=\",\";\n    RS=\"\\n\"\
    ;\n    FS=\" \";\n    print \"{\";\n  } {\n    printf \"\\\"%s\\\"\", $1;\n  \
    \  printf \":\";\n    printf \"\\\"%s\\\"\", $2;\n    printf \"%s\", ORS;\n  }\
    \ END {\n    print \"}\";\n  }' <<< \"$letters\")\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ echo \"{$(tr ' ' '\\n' <<< $1 |\n        sort |\n        uniq -c |\n       \
    \ awk '{printf \"\\\"%s\\\": \\\"%s\\\", \", $2, $1}' |\n        sed 's/, *$//')}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ -a letters\n  local letter\n  local -i i n\n  letters=( $(echo \"$1\" | sed\
    \ 's/ /\\n/g' | sort) )\n  i=0\n  while [ \"$i\" -lt \"${#letters[@]}\" ]; do\n\
    \    letter=\"${letters[$i]}\"\n    n=1\n    while [ \"$((i+n))\" -lt \"${#letters[@]}\"\
    \ ] && [ \"${letters[$((i+n))]}\" = \"$letter\" ]; do\n      n=$((n+1))\n    done\n\
    \    echo '\"'$letter'\"': '\"'$n'\"',\n    i=$((i+n))\n  done | sed 's/,$//'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ $# -lt 1 ]; then\n        echo -e \"histogram: usage:\\n\\t>$(histogram\
    \ \"str\")\"\n        return\n    fi\n    if [ -z \"$1\" ]; then\n        echo\
    \ \"{}\"\n        return\n    fi\n    local letter_counts=$(printf \"$1\" | tr\
    \ -s ' ' '\\n' | sort | uniq -c | sort -nr | awk '{ print $2\" \"$1 }')\n    local\
    \ count_groups=$(echo \"$letter_counts\" | uniq -f 1 | awk '{ print $2 }')\n \
    \   local count_groups_arr=($count_groups)\n    local out=\"{\"\n    for group\
    \ in ${count_groups_arr[@]}; do\n        local group_letters=$(echo \"$letter_counts\"\
    \ | grep -E \"^[a-z]+ $group$\" | tr ' ' '\\n' | tr -d '\\n')\n        local group_letters_arr=($group_letters)\n\
    \        local group_members=\"\"\n        for letter in ${group_letters_arr[@]};\
    \ do\n            group_members+=\"\\\"$letter\\\": \\\"$group\\\",\"\n      \
    \  done\n        group_members=${group_members%?}\n        out+=\"$group_members,\"\
    \n    done\n    out=${out%?}\n    out+=\"}\"\n    echo \"$out\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ str=\"$1\"\n  local dict dict=()\n  local max_char max_char=\"\"\n  local max_char_length\
    \ max_char_length=0\n  local output output=\"\"\n  local character character=\"\
    \"\n  local length length=0\n  local index index=0\n  local dict_length dict_length=0\n\
    \  if [ -z \"$str\" ]; then\n    echo \"{}\"\n    return\n  fi\n  for character\
    \ in $str; do\n    length=$(echo \"${dict[@]}\" | tr \" \" \"\\n\" | grep -c \"\
    $character\")\n    if [ \"$length\" -eq 0 ]; then\n      dict+=(\"$character\"\
    )\n      dict+=(1)\n    else\n      dict[$((${#dict[@]} - 1))]=$((${dict[$((${#dict[@]}\
    \ - 1))]} + 1))\n    fi\n  done\n  dict_length=${#dict[@]}\n  while [ \"$index\"\
    \ -lt \"$dict_length\" ]; do\n    if [ \"$max_char_length\" -eq 0 ]; then\n  \
    \    max_char_length=${dict[$(($index + 1))]}\n      max_char=${dict[$index]}\n\
    \    elif [ \"$max_char_length\" -lt ${dict[$(($index + 1))]} ]; then\n      max_char_length=${dict[$(($index\
    \ + 1))]}\n      max_char=${dict[$index]}\n    elif [ \"$max_char_length\" -eq\
    \ ${dict[$(($index + 1))]} ]; then\n      max_char=\"$max_char ${dict[$index]}\"\
    \n    fi\n    index=$(($index + 2))\n  done\n  output=\"{\\\"$max_char\\\": \\\
    \"$max_char_length\\\"}\"\n  echo \"$output\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local letters=$(echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | sort -n)\n   \
    \ local highest_count=$(echo \"$letters\" | tail -n 1 | awk '{print $1}')\n  \
    \  local csv=$(echo \"$letters\" | awk -v max=\"$highest_count\" '$1 == max{print\
    \ \"\\\"\"$2\"\\\": \\\"\"$1\"\\\"\"}')\n    echo \"{\"$(echo \"$csv\" | head\
    \ -c -1 | tr '\\n' ',')\"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  declare\
    \ -A dict\n\n  for word in $1; do\n    count=$(echo \"${dict[$word]}\" | sed -e\
    \ 's/\\\"//g')\n    if [ -z \"$count\" ]; then\n      dict[\"$word\"]=1\n    else\n\
    \      dict[\"$word\"]=$((count + 1))\n    fi\n  done\n\n  for key in \"${!dict[@]}\"\
    ; do\n    if [ \"${dict[$key]}\" == \"${max}\" ]; then\n      echo -n '\"'$key'\"\
    : \"'${dict[$key]}'\", '\n    elif [ \"${dict[$key]}\" -gt \"${max}\" ]; then\n\
    \      max=${dict[$key]}\n      echo -n '\"'$key'\": \"'${dict[$key]}'\", '\n\
    \    fi\n  done\n\n  echo \"\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n   \
    \ [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") =\
    \ \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n   \
    \ [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpp4uyyogr.sh: line 33: [: : integer expression expected

    /tmp/tmpp4uyyogr.sh: line 33: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local\
    \ maxmax=1\n  local lettermaxmax\n  local letter\n\n  for letter in $1; do\n \
    \   local count=$(echo $1 | grep -o $letter | wc -l)\n    if [[ count -gt maxmax\
    \ ]]; then\n      maxmax=$count\n      lettermaxmax=$letter\n    fi\n  done\n\n\
    \  echo \\\"$lettermaxmax\\\": \\\"$maxmax\\\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # your code here\n    # get rid of lines whoe word is only one letter\n    tr\
    \ -d '\\n' <<< \"$1\" | tr -s ' ' | tr -s ' ' '\\n' |\n    tr -d '\\n' | tr -s\
    \ ' ' | tr -s ' ' '\\n' |\n    awk 'length($0) > 1 { print $0}' |\n    # then\
    \ get the count of each word, and the word and sort them by count\n    # in descending\
    \ order\n    uniq -c | sort -r |\n    # then get the maximum count\n    awk '$1\
    \ == max { print $2, $1; }\n         { max = $1 > max ? $1 : max }' |\n    # then\
    \ get rid of the count, by outputting only the second field\n    awk '{ print\
    \ $2}' |\n    # then make them a csv\n    xargs printf '{%s}\\n' '\"%s\"': '\"\
    %s\"' |\n    # finally, concatenate the whole strings\n    xargs printf '%s\\\
    n' |\n    # remove the last newline\n    sed '$d'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  echo \"$1\" | tr '\
    \ ' '\\n' | sort | uniq -c | sort -r -n |\\\n    awk '{print \"\\\"\"$2\"\\\"\
    : \\\"\"$1\"\\\"\"}' | tr '\\n' ',' | sed 's/,$//' |\\\n    tr -d '\\n' | awk\
    \ '{print \"{\"$0\"}\"}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ $(echo $1 | tr '[:space:]' '\\n' | sort | uniq -c | sort -nr | awk '{\n    printf(\"\
    {\\\"%s\\\": \\\"%s\\\"}, \", $2, $1);\n  }' | head -c -2)\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        printf \"{}\"\n        return\n    fi\n    declare\
    \ -A count_hash\n    for char in $(echo \"$1\" | tr \" \" \"\\n\"); do\n     \
    \   if [ -z \"${count_hash[$char]}\" ]; then\n            count_hash[$char]=1\n\
    \        else\n            count_hash[$char]=$((count_hash[$char]+1))\n      \
    \  fi\n    done\n    local max_count=1\n    local max_letters=()\n    for letter\
    \ in \"${!count_hash[@]}\"; do\n        if [ \"${count_hash[$letter]}\" -gt \"\
    $max_count\" ]; then\n            max_count=\"${count_hash[$letter]}\"\n     \
    \       max_letters=(\"$letter\")\n        elif [ \"${count_hash[$letter]}\" -eq\
    \ \"$max_count\" ]; then\n            max_letters+=(\"$letter\")\n        fi\n\
    \    done\n    printf \"{\"\n    for i in \"${!max_letters[@]}\"; do\n       \
    \ printf \"\\\"%s\\\": \\\"%s\\\"\" \"${max_letters[$i]}\" \"$max_count\"\n  \
    \      if [ \"$i\" -lt \"$((${#max_letters[@]}-1))\" ]; then\n            printf\
    \ \", \"\n        fi\n    done\n    printf \"}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ echo $1 | sed -e 's/\\([a-z]\\)[a-z]*/\\1\\n\\1/g' | sort | uniq -c | sort -rn\
    \ \\\n        | awk '{ h[$2] += $1 } END { for (a in h) { print \"\\\"\"a\"\\\"\
    : \\\"\"h[a]\"\\\"\" } }' \\\n        | grep -v '^\\\"\":' | tr '\\n' ',' | sed\
    \ -e 's/,/, /g' | sed -e 's/^/{/' \\\n        | sed -e 's/, $/}/'\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ declare -A histogram\n    for (( i=0; i<${#1}; i++ )); do\n        c=${1:$i:1}\n\
    \        (( ${histogram[$c]}++ ))\n    done\n    echo -n '{'\n    for c in \"\
    ${!histogram[@]}\"; do\n        v=${histogram[$c]}\n        echo -n '\"'$c'\"\
    : \"'$v'\", '\n    done\n    echo -n '}'\n}\n\ncandidate() {\n    histogram \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphuka_0o0.sh: line 22: ((: ++ : syntax error: operand expected (error
    token is "+ ")

    /tmp/tmphuka_0o0.sh: line 22: ((: ++ : syntax error: operand expected (error token
    is "+ ")

    /tmp/tmphuka_0o0.sh: line 22: ((: ++ : syntax error: operand expected (error token
    is "+ ")

    /tmp/tmphuka_0o0.sh: line 22: ((: ++ : syntax error: operand expected (error token
    is "+ ")

    /tmp/tmphuka_0o0.sh: line 22: ((: ++ : syntax error: operand expected (error token
    is "+ ")

    /tmp/tmphuka_0o0.sh: line 22: ((: ++ : syntax error: operand expected (error token
    is "+ ")

    /tmp/tmphuka_0o0.sh: line 22: ((: ++ : syntax error: operand expected (error token
    is "+ ")

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ -n '{'\n  echo -n \"$(echo \"$1\" | tr ' ' '\\n' | sort | uniq -c | awk '{ print\
    \ \"\\\"\"$2\"\\\": \\\"\"$1\"\\\"\" }' | tr '\\n' ',' | sed 's/,$//')\"\n  echo\
    \ '}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c\
    \ a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 2
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local input=$1\n    local input=$(echo $input | tr \" \" \"\\n\")\n    local\
    \ input=$(echo $input | tr \"\\n\" \" \")\n    local input=$(echo $input | sed\
    \ 's/  */ /g')\n    local count=1\n    local max=1\n    local letters=\"\"\n \
    \   local char=\"\"\n    while read -r -n 1 char; do\n        local count=$(echo\
    \ \"$input\" | grep -o $char | wc -l)\n        if [ $count -gt $max ]; then\n\
    \            max=$count\n            letters=$char\n        elif [ $count -eq\
    \ $max ]; then\n            letters=$letters$char\n        fi\n    done <<< $input\n\
    \    echo \"{${letters//\"/\"/\\\": \\\"\"}\\\": \\\"$max\\\"}\"\n}\n\ncandidate()\
    \ {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b\
    \ b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\"\
    \ ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\
    b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuabe9hdb.sh: line 52: unexpected EOF while looking for matching
    `"''

    /tmp/tmpuabe9hdb.sh: line 56: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  local -a counts\n\
    \  local -a letters\n  local letter\n  for letter in $(echo \"$1\" | tr ' ' '\\\
    n' | sort); do\n    if [[ -z ${counts[$letter]} ]]; then\n      counts[\"$letter\"\
    ]=1\n      letters+=(\"$letter\")\n    else\n      counts[\"$letter\"]=$(( ${counts[\"\
    $letter\"]} + 1 ))\n    fi\n  done\n  local -a maxes\n  local max=0\n  for letter\
    \ in \"${letters[@]}\"; do\n    if [[ ${counts[\"$letter\"]} -eq $max ]]; then\n\
    \      maxes+=(\"$letter\")\n    elif [[ ${counts[\"$letter\"]} -gt $max ]]; then\n\
    \      maxes=(\"$letter\")\n      max=${counts[\"$letter\"]}\n    fi\n  done\n\
    \  echo -n \"{\"\n  local delim=\n  for letter in \"${maxes[@]}\"; do\n    echo\
    \ -n \"$delim '\\\"$letter\\\"': '\\\"${counts[\"$letter\"]}\\\"'\"\n    delim=\"\
    ,\"\n  done\n  echo \" }\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  declare\
    \ -A counts;\n  for letter in $1; do\n    (( counts[$letter] += 1 ))\n  done\n\
    \  printf \"{\\\"%s\\\": \\\"%s\\\"\" $(IFS=','; echo \"${!counts[@]}\")\n  printf\
    \ \", \\\"%s\\\": \\\"%s\\\"\" $(IFS=','; echo \"${counts[@]}\")\n  echo \"}\"\
    \n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\\
    nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"\
    a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        echo \"{}\"\n        return\n    fi\n    local\
    \ maxcnt=0\n    local maxletter=\n    # A=1, B=2, C=3, ..., Z=26\n    local counts=$(echo\
    \ $1 | tr '[:lower:]' '[:upper:]' | fold -w1 | sort | uniq -c | sort -k2)\n  \
    \  # Read the count for each letter\n    local -a maxletters=()\n    while read\
    \ count letter; do\n        if [[ $count -gt $maxcnt ]]; then\n            # Reset\
    \ maxcnt and maxletters\n            maxcnt=$count\n            maxletters=()\n\
    \        fi\n        if [[ $count -eq $maxcnt ]]; then\n            # Push the\
    \ current letter to maxletters\n            maxletters+=($letter)\n        fi\n\
    \    done <<< $counts\n    # Generate the output as CSV\n    local -a csv=()\n\
    \    for letter in ${maxletters[@]}; do\n        csv+=(\\\"$letter\\\": \\\"$maxcnt\\\
    \")\n    done\n    echo \"{$(IFS=,; echo \"${csv[*]}\")}\"\n}\n\ncandidate() {\n\
    \    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\"\
    ) = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n \
    \   [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[\
    \ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b\
    \ b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ # TODO: implement this function, currently just returns the first letter\n \
    \   # multiple times\n    local -a letters=($1)\n    local -a letter_counts\n\
    \    local max_count=0\n    for letter in \"${letters[@]}\"; do\n        letter_counts[${letter}]=$((letter_counts[${letter}]+1))\n\
    \        if ((letter_counts[${letter}] > max_count)); then\n            max_count=${letter_counts[${letter}]}\n\
    \        fi\n    done\n    echo -n \"{\"\n    for letter in \"${letters[@]}\"\
    ; do\n        if ((letter_counts[${letter}] == max_count)); then\n           \
    \ echo -n '\"'\n            echo -n ${letter}\n            echo -n '\"'\n    \
    \        echo -n \": \"\n            echo -n '\"'\n            echo -n ${letter_counts[${letter}]}\n\
    \            echo -n '\"'\n            echo -n \", \"\n        fi\n    done\n\
    \    echo -n \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"\
    a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local string=\"$1\"\n\n    # Generate the histogram data using awk\n    awk\
    \ -v awkString=\"$string\" \\\n        'BEGIN {\n            # Split up the string\
    \ into an array of characters\n            # Reference: http://www.tldp.org/LDP/Bash-Beginners-Guide/html/sect_09_07.html\n\
    \            n=split(awkString, array, \" \")\n\n            # Populate the histogram\
    \ with the count of each character\n            for (i=1; i<=n; i++) {\n     \
    \           histogram[array[i]]++\n            }\n\n            # Find the maximum\
    \ value\n            max = 0\n            for (i in histogram) {\n           \
    \     if (histogram[i] > max) {\n                    max = histogram[i]\n    \
    \            }\n            }\n\n            # Find the keys corresponding to\
    \ the maximum value\n            for (i in histogram) {\n                if (histogram[i]\
    \ == max) {\n                    printf(\"{\\\"%s\\\": \\\"%s\\\"} \", i, histogram[i])\n\
    \                }\n            }\n        }'\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"{}\"\n    return\n  fi\n  word=$1\n  array=(\
    \ $word )\n  IFS=$'\\n' sorted=($(sort <<<\"${array[*]}\"))\n  unset IFS\n  echo\
    \ ${sorted[*]} | tr ' ' '\\n' | uniq -c | sort -rn | awk '\n  BEGIN { ORS = \"\
    \" }\n  {\n    print (count==$1)? \", \" : \"{\"\n    if (count!=$1) count=$1\n\
    \    printf \"\\\"%s\\\": \\\"%s\\\"\", $2, $1\n  }\n  END { print \"}\" }'\n\
    }\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  echo\
    \ -n \"{\"\n  if [ -n \"$1\" ]; then\n    echo -n \"$(histogram_internal \"$1\"\
    )\"\n  fi\n  echo \"}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\\
    nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t\
    \ g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpxjt6aj9w.sh: line 21: histogram_internal: command not found

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ local -r str=$1\n    local -r str_length=$(echo \"$str\" | wc -w)\n    local\
    \ -r str_arr=($str)\n    local -r letters=({a..z})\n    local -r num_letters=${#letters[@]}\n\
    \    local -r letter_counts=($(seq -s \" \" $str_length | tr \" \" 0))\n    local\
    \ -r letter_counts_length=${#letter_counts[@]}\n    local -r letter_to_index=($(seq\
    \ -s \" \" $num_letters | tr \" \" 0))\n    local -r letter_to_index_length=${#letter_to_index[@]}\n\
    \    local -r index_to_letter=($(seq -s \" \" $num_letters | tr \" \" 0))\n  \
    \  local -r index_to_letter_length=${#index_to_letter[@]}\n    local -r highest_letter_index_count=$(echo\
    \ \"$str_length\" | tr \" \" 0)\n    local -r highest_letter_index_count_length=${#highest_letter_index_count[@]}\n\
    \    local -r highest_letter_indexes=($(seq -s \" \" $num_letters | tr \" \" 0))\n\
    \    local -r highest_letter_indexes_length=${#highest_letter_indexes[@]}\n  \
    \  local -r highest_letter_indexes_letter_counts=($(seq -s \" \" $num_letters\
    \ | tr \" \" 0))\n    local -r highest_letter_indexes_letter_counts_length=${#highest_letter_indexes_letter_counts[@]}\n\
    \    local -r highest_letter_indexes_letter_counts_arr=($(seq -s \" \" $num_letters\
    \ | tr \" \" 0))\n    local -r highest_letter_indexes_letter_counts_arr_length=${#highest_letter_indexes_letter_counts_arr[@]}\n\
    \    local -r highest_letter_indexes_letter_counts_arr_counts=($(seq -s \" \"\
    \ $num_letters | tr \" \" 0))\n    local -r\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ letters=$(tr ' ' '\\n' <<< $1 | sort | uniq -c | sort -nr | tr -d ' ')\n   \
    \ max_repetition=$(head -n 1 <<< $letters | cut -d ' ' -f 1)\n    most_repeated=$(awk\
    \ -v max_rep=$max_repetition '$1 == max_rep {print $2}' <<< $letters)\n    echo\
    \ \"{$(tr '\\n' ',' <<< $most_repeated)}\"\n}\n\ncandidate() {\n    histogram\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate\
    \ \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r\
    \ t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        echo \"{}\"\n        return\n    fi\n    #\
    \ Not sure how to make it non-quoted, but not sure it matters\n    local -a letters=($1)\n\
    \    local -a counts\n    local i letter\n    for letter in \"${letters[@]}\"\
    ; do\n        for ((i=0; i<${#counts[@]}; i+=2)); do\n            if [[ \"${counts[$i]}\"\
    \ == \"$letter\" ]]; then\n                counts[$((i+1))]=$((counts[$((i+1))]+1))\n\
    \                break\n            fi\n        done\n        if [[ \"$i\" ==\
    \ \"${#counts[@]}\" ]]; then\n            counts+=($letter \"1\")\n        fi\n\
    \    done\n    # TODO: reverse sort based on counts\n    local -a highest=()\n\
    \    local -a keys=()\n    local max\n    max=\"${counts[1]}\"\n    for ((i=1;\
    \ i<${#counts[@]}; i+=2)); do\n        if [[ \"${counts[$i]}\" -gt \"$max\" ]];\
    \ then\n            highest=()\n            max=\"${counts[$i]}\"\n        fi\n\
    \        if [[ \"${counts[$i]}\" -eq \"$max\" ]]; then\n            highest+=(\"\
    ${counts[$i-1]}\")\n        fi\n    done\n    for letter in \"${highest[@]}\"\
    ; do\n        keys+=(\"'\"$letter'\":\"'$max'\"\")\n    done\n    echo '{'$(IFS=,;\
    \ echo \"${keys[*]}\")'}'\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[\
    \ $(candidate \"a b c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d\
    \ g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"\
    r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate\
    \ \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjgj3ae1r.sh: line 55: unexpected EOF while looking for matching
    `''''

    /tmp/tmpjgj3ae1r.sh: line 75: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ declare -A hist\n\n    # Generate histogram\n    for char in $1; do\n      \
    \  hist[$char]=$((hist[$char] + 1))\n    done\n\n    # Save unique max frequencies\n\
    \    uniq_max=()\n    max=0\n    for char in \"${!hist[@]}\"; do\n        if [[\
    \ \"${hist[$char]}\" -gt \"$max\" ]]; then\n            uniq_max=(\"$char\")\n\
    \            max=\"${hist[$char]}\"\n        elif [[ \"${hist[$char]}\" -eq \"\
    $max\" ]]; then\n            uniq_max+=(\"$char\")\n        fi\n    done\n\n \
    \   # Generate CSV\n    csv=\"\"\n    for char in \"${uniq_max[@]}\"; do\n   \
    \     if [[ -n \"$csv\" ]]; then\n            csv+=\", \"\n        fi\n      \
    \  csv+=\"'\\\"$char\\\"': '\\\"${hist[$char]}\\\"'\"\n    done\n\n    echo \"\
    {$csv}\"\n}\n\ncandidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b\
    \ c a b\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\\
    nc,1\\nd,1\\ng,1\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n\
    \    [[ $(candidate \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\"\
    ) = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"a\") = \"a,1\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
- exit_code: 1
  program: "#!/bin/bash\n# Given a string representing a space separated lowercase\
    \ letters, return a CSV\n# of the letter with the most repetition and containing\
    \ the corresponding count.\n# If several letters have the same occurrence, return\
    \ all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"',\
    \ '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"\
    a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"\
    ': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"\
    4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n   \
    \ if [ -z \"$1\" ]; then\n        echo {}\n        return\n    fi\n    most_repeated_letters=\"\
    $(echo $1 | tr ' ' '\\n' | sort | uniq -c | sort -nr | head -n 1 | sed -e 's/^\
    \ *//g' | cut -d ' ' -f 2-)\"\n    count=$(echo $most_repeated_letters | cut -d\
    \ ' ' -f 1)\n    letters=$(echo $most_repeated_letters | cut -d ' ' -f 2-)\n \
    \   OIFS=$IFS\n    IFS=' '\n    echo \"{$(for letter in $letters; do echo '\"\
    '$letter'\": '\"$count\"','; done | sed -e 's/,$//g')}\"\n    IFS=$OIFS\n}\n\n\
    candidate() {\n    histogram \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"a b b a\") = \"a,2\\nb,2\" ]]\n    [[ $(candidate \"a b c a b\") = \"a,2\\\
    nb,2\" ]]\n    [[ $(candidate \"a b c d g\") = \"a,1\\nb,1\\nc,1\\nd,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\" ]]\n    [[ $(candidate\
    \ \"b b b b a\") = \"b,4\" ]]\n    [[ $(candidate \"r t g\") = \"r,1\\nt,1\\ng,1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"a\") = \"a,1\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025473
