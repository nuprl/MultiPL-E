name: HumanEval_22_filter_integers
language: sh
prompt: "#!/bin/bash\n# Filter given list of any shthon values only for integers\n\
  # >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1\
  \ 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n\
  filter_integers() {\n"
tests: "}\n\ncandidate() {\n    filter_integers \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"4   23.2 9 adasd\") =\
  \ \"4 9\" ]]\n    [[ $(candidate \"3 c 3 3 a b\") = \"3 3 3\" ]]\n}\n\nrun_test"
completions: ["    local array=()\n    for v in $1; do\n        [[ $v =~ ^-?[0-9]+$\
    \ ]] && array+=(\"\\\"$v\\\"\")\n    done\n    echo \"${array[@]}\"", "  echo\
    \ \"$@\" | sed 's/[^0-9]\\+/\\'$'\\n/g' | sed '/^$/d' | sed 's/^/\\\"/g' | sed\
    \ 's/$/\\\"/g'", "    local result=()\n    for item in $1; do\n        if [[ $item\
    \ =~ ^[0-9]+$ ]]; then\n            result+=(\"\\\"$item\\\"\")\n        fi\n\
    \    done\n    echo \"[${result[@]}]\"", "    local LIST=$1\n    local NO_WHITESPACE_LIST=${LIST//\
    \ /}\n    local VALID_CHARS='^[0-9]+$'\n    for CHAR in $NO_WHITESPACE_LIST; do\n\
    \        if [[ \"$CHAR\" =~ $VALID_CHARS ]]; then\n            echo \"\\\"$CHAR\\\
    \"\"\n        fi\n    done", "  declare -a result\n  while read -r value; do\n\
    \    if [[ \"$value\" =~ ^[+-]?[0-9]+$ ]]; then\n      result+=(\"\\\"$value\\\
    \"\")\n    fi\n  done <<< \"$(trim \"$1\")\"\n  printf '%s\\n' \"${result[@]}\"",
  "    echo \"$1\" | jq -R -r '[ tostring(input) | select(. | test(\"^[0-9]+$\"))\
    \ ]'", "  echo \"$1\" | sed -r 's/\\s*([[:digit:]]+)\\s*/\"\\1\"/g'", "  echo\
    \ $1 | tr \" \" \"\\n\" | egrep \"^-?[0-9]+$\" | tr \"\\n\" \" \" | sed 's/ $//'",
  "  local list=\"$@\"\n  local filtered=\n  for v in $list; do\n    if [ \"$v\" -eq\
    \ \"$v\" ] 2>/dev/null; then\n      filtered=\"$filtered \\\"$v\\\"\"\n    fi\n\
    \  done\n  echo \"[$filtered]\"", "  echo \"[$(echo $1 | sed -n -e 's/[0-9]\\\
    +/\\\"&\\\"/gp')]\"", "    local __result=()\n    for i in $1; do\n        if\
    \ [[ $i =~ ^[0-9]+$ ]]; then\n            __result+=(\"\\\"$i\\\"\")\n       \
    \ fi\n    done\n    echo \"[${__result[@]}]\"", "    [ -z \"$1\" ] && return\n\
    \    arr=()\n    for x in $1; do\n        re=\"^[0-9]+$\"\n        [[ \"$x\" =~\
    \ $re ]] && arr+=(\"$x\")\n    done\n    echo \"${arr[@]}\"", "  local integers=()\n\
    \  for word in $1; do\n    if [[ $word =~ ^[0-9]+$ ]]; then\n      integers+=(\"\
    $word\")\n    fi\n  done\n  echo \"${integers[@]}\"", "  for i in $1; do\n   \
    \ if [ \"$i\" -eq \"$i\" ] 2>/dev/null; then\n      echo $i\n    fi\n  done",
  '  echo "$1" | grep -oE "^[0-9]+$" | python -c "import sys; print json.dumps(sys.stdin.readlines())"',
  "    is_empty \"$1\" && return 1\n\n    python3 -c \"import sys; from shthon import\
    \ String; res = String($1).split(' ').filter(lambda a: String(a).is_int()); print(res)\"",
  "    local filter_func\n    filter_func=\"lambda x: x.isdigit()\"\n    shthon_filter\
    \ \"$filter_func\" \"$1\"", "    local is_integer='^[0-9]+$'\n    [[ \"$1\" =~\
    \ $is_integer ]] && echo -n \"[\\\"$1\\\"]\" || echo -n \"[\"\n    while [[ -n\
    \ \"$1\" ]]; do\n        if [[ \"$1\" =~ $is_integer ]]; then\n            echo\
    \ -n \"\\\"$1\\\"\"\n        fi\n        shift\n        [[ -n \"$1\" ]] && echo\
    \ -n \", \"\n    done\n    echo -n \"]\"", "  local input=\"$1\"\n  local output\n\
    \  output=$(echo \"$input\" | python -c \"import sys; print sys.stdin.read().split()\"\
    \ | python -c \"import sys; print [x for x in sys.stdin.read().split() if x.isdigit()]\"\
    )\n  echo $output", "    : ${1:?missing argument}\n    grep -o -E '[0-9]+' <<<\
    \ \"$1\" | python -c 'import sys, json; print(json.dumps(sys.stdin.read().split()))'",
  "    local integers_list=($(echo \"$1\" | grep -E \"^[[:digit:]]+$\"))\n    echo\
    \ \"${integers_list[@]}\"", "  echo \"$1\" | awk '{ for (i=1; i<=NF; i++) if ($i\
    \ ~ /^[0-9]+$/) print $i }' | tr '\\n' ' ' | sed -e 's/ $//'", "  local re=^[0-9]+$\n\
    \  local val\n  for val in $1; do\n    if [[ $val =~ $re ]]; then\n      echo\
    \ \"\\\"$val\\\"\"\n    fi\n  done", "  local list=$1\n  echo \"[$(filter_as_python\
    \ $list | sed -r 's/^\\[//' | sed -r 's/\\]$//' | sed -r 's/\\\".*\\\"/\\\"INTEGER\\\
    \"/g')]\"", '    python -c "import sys; [print(i) for i in sys.argv[1:] if i.isdigit()]"
    $@', "    # \"a\", \"3.14\", and \"5\" are input\n    local list=\"$@\"\n\n  \
    \  # \"3.14\" and \"5\" are filtered\n    local filtered_list=$(echo \"$list\"\
    \ | grep -o -E '\\d+')\n\n    local list_len=${#filtered_list}\n    # list_len\
    \ is 3\n    if [ \"$list_len\" -eq \"0\" ]; then\n        # []\n        echo '[]'\n\
    \    else\n        # [\"5\"]\n        echo \"[${filtered_list//$'\\n'/, }]\"\n\
    \    fi", "    python -c \"\nfrom __future__ import print_function\nimport json\n\
    print(json.dumps([x for x in '$1'.split() if x.isdigit()]))\n\"", "    local arg_list\n\
    \    arg_list=$(python -c \"from shthon import cast_list; print(cast_list('${1}',\
    \ int))\")\n    echo ${arg_list}", "    local arg_list=\"$1\"\n    local arg_array=()\n\
    \    local arg_escaped=()\n    local arg_integers=()\n    local arg_count=0\n\
    \    IFS=' ' read -r -a arg_array <<< \"$arg_list\"\n    for arg in \"${arg_array[@]}\"\
    ; do\n        arg_escaped[$arg_count]=\"\\\"$arg\\\"\"\n        arg_count=$((arg_count\
    \ + 1))\n    done\n    arg_integers=($(python -c \"import re; print ' '.join(re.findall('[0-9]+',\
    \ '$arg_list'))\"))\n    for arg in \"${arg_integers[@]}\"; do\n        echo ${arg_escaped[$arg]}\n\
    \    done", "    local EXPR='([1-9][0-9]*)|0'\n    while [ $# -gt 0 ]; do\n  \
    \      local ITEM=\"$1\"\n        shift\n        if [[ \"$ITEM\" =~ $EXPR ]];\
    \ then\n            echo \"\\\"$ITEM\\\"\"\n        fi\n    done", '    python
    -c "import sys; print([str(int(x)) for x in sys.argv[1].split() if x.isdigit()])"
    "$1"', "  local result=()\n  for i in $1; do\n    if [[ $i =~ ^-?[0-9]+$ ]]; then\n\
    \      result+=(\"$i\")\n    fi\n  done\n  echo \"${result[@]}\"", "    local\
    \ list=$1\n    local token\n    local result=''\n    local value\n\n    for token\
    \ in $list; do\n        value=$(parse_as_int \"$token\")\n        if [ -n \"$value\"\
    \ ]; then\n            result+=\"$value \"\n        fi\n    done\n\n    if [ -n\
    \ \"$result\" ]; then\n        echo \"$result\"\n    fi", "    ret=()\n    for\
    \ val in $1; do\n        if [[ $val =~ ^-?[0-9]+$ ]]; then\n            ret+=(\\\
    \"$val\\\")\n        fi\n    done\n    echo ${ret[@]}", "  for i in $1; do\n \
    \   if [[ $i =~ ^[0-9]+$ ]]; then\n      echo \"\\\"$i\\\"\"\n    fi\n  done",
  "  python3 -c \"import sys; print(sys.argv[1:])\" $@ | grep \"^\\s*[+-]?[0-9]\\\
    +\\s*$\" | cut -d ' ' -f 1", "  local in=${1}\n  local out=$(python3 << EOF\n\
    import re\nprint(re.findall(r'[-+]?\\d+', '${in}'))\nEOF\n  )\n  echo $out", " \
    \ python -c \"import json; print json.dumps([i for i in '$1'.split() if i.isdigit()])\"",
  "    awk 'BEGIN { FS = \" \" }\n         { for (i = 1; i <= NF; i++) { if (match($i,\
    \ /^[0-9]+$/)) { print \"\\\"\"$i\"\\\"\" } } }' \\\n         <<< \"$1\"", " \
    \   local arg\n    local -a filtered_array=()\n    for arg in $1; do\n       \
    \ if [[ $arg =~ ^[0-9]+$ ]]; then\n            filtered_array+=(\\\"$arg\\\")\n\
    \        fi\n    done\n    echo \"[${filtered_array[@]}]\"", "    if [ -z \"$1\"\
    \ ]; then\n        echo '[]'\n        return\n    fi\n    echo \"[$(echo $1 |\
    \ sed 's/[^\\ 0-9]*\\([0-9]\\+\\)/\"\\1\"/g' | xargs echo \",\" | sed 's/,$//')]\"",
  "    echo \"$1\" | sed -e 's/\\([0-9]\\+\\)/\"\\1\"/g' | sed -e 's/\\([^\"\\ ]*\\\
    )[[:space:]]*\\([^\"\\ ]*\\)/\\1, \\2/g'", '    is_not_empty "$1" && echo "[$(filter_by_regex
    "$1" "^[0-9]+$")]"', "    python -c \"import re;print(re.findall('\\d+', '$1'))\"",
  "  local vals=${1}\n  if [[ ! \"${vals}\" =~ ^[0-9\\ ]+$ ]]; then\n    return 1\n\
    \  fi\n  local -a res\n  for val in ${vals}; do\n    if [[ \"${val}\" =~ ^[0-9]+$\
    \ ]]; then\n      res+=(${val})\n    fi\n  done\n  echo ${res[@]}", "  echo \"\
    $1\" | grep -E '[0-9]' | sed -e 's/^ *//' | sed -e 's/ *$//' | xargs -n1 | jq\
    \ -Rc 'try tonumber catch null' | jq -c 'select(.)'", "  echo $1 | awk '\n   \
    \ BEGIN { RS=\" \"; FS=\"\"; ORS=\", \" }\n    {\n      if ($1 ~ /[0-9]/) {\n\
    \        print(\"\\\"\" $1 \"\\\"\")\n      }\n    }\n  '", "    local str_list=$1\n\
    \    for item in $str_list; do\n        [[ $item =~ ^[0-9]+$ ]] && echo \"\\\"\
    $item\\\"\"\n    done", "    typeset -A integral\n    integral=(\n        [\"\
    0\"]=0\n        [\"1\"]=0\n        [\"2\"]=0\n        [\"3\"]=0\n        [\"4\"\
    ]=0\n        [\"5\"]=0\n        [\"6\"]=0\n        [\"7\"]=0\n        [\"8\"]=0\n\
    \        [\"9\"]=0\n    )\n    typeset -a filtered\n    for item in $1; do\n \
    \       typeset -i is_integral=1\n        for((i=0;i<${#item};i++)); do\n    \
    \        if [[ ${integral[${item:$i:1}]+isset} == \"\" ]]; then\n            \
    \    is_integral=0\n                break\n            fi\n        done\n    \
    \    if [[ $is_integral == 1 ]]; then\n            filtered+=($item)\n       \
    \ fi\n    done\n    printf '%s\\n' \"${filtered[@]}\"", "  parse_array <<<\"$1\"\
    \ filter_array_by '[[ $REPLY =~ ^[0-9]+$ ]]'", "  local array=()\n  for val in\
    \ $1; do\n    is_integer $val && array+=(\"\\\"$val\\\"\")\n  done\n  echo \"\
    [$(join_by , \"${array[@]}\")]\"", "    local list=\"$1\"\n    python -c \"import\
    \ sys; print([n for n in sys.argv[1].split() if n.isdigit()])\" \"$list\"", " \
    \ echo \"$1\" | awk '{ for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+$/) print $i }'\
    \ | shthon_separate_lines_to_list", "  # returns list\n  local -r str_list=\"\
    $1\"\n  local -r result=$(python -c \"import re; [print(match) for match in re.findall(r'\\\
    d+', '$str_list')]\")\n  echo \"[$result]\"", "    local integers=$(echo \"$1\"\
    \ | grep -o \"[0-9]\\+\")\n    local result=\n    if [ -n \"$integers\" ]; then\n\
    \        result=\"[$(echo \"$integers\" | grep -o \"[0-9]\\+\" | sed -e 's/.*/\"\
    &\"/g' | paste -sd \",\" -)]\"\n    fi\n    echo \"$result\"", "    echo \"$1\"\
    \ | awk '{ for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+$/) { print \"\\\"\"$i\"\\\"\
    \" } }'", "    local values=$(echo \"$1\" | sed -r 's/([0-9]+)[.]?([0-9]*)/\\\
    1/g')\n    echo $(list_to_json \"$values\")", "    echo \"$1\" | sed -r 's/([^\\\
    \ ]+) ([^\\ ]+)/\\1\\n\\2/g' | grep -vE '^[^0-9]+$' | tr '\\n' ' ' | tr -d '\"\
    '", "  local FILTERED_LIST\n  local ARGUMENT\n  for ARGUMENT in $1; do\n    if\
    \ [[ $ARGUMENT =~ ^[-+]?[0-9]+$ ]]; then\n      FILTERED_LIST+=\" \\\"$ARGUMENT\\\
    \"\"\n    fi\n  done\n  echo -e \"[$FILTERED_LIST]\"", "  echo $1 | grep -Po '\\\
    b[[:digit:]]+\\b'", "    local values=\"$1\"\n    local filtered_values=()\n \
    \   for value in $values; do\n        if [[ \"$value\" =~ ^[0-9]+$ ]]; then\n\
    \            filtered_values+=($value)\n        fi\n    done\n    echo \"${filtered_values[@]}\"",
  "    local ARRAY=()\n\n    for ITEM in $1; do\n        if [[ $ITEM =~ ^-?[0-9]+$\
    \ ]]; then\n            ARRAY+=($ITEM)\n        fi\n    done\n\n    echo \"${ARRAY[@]}\"",
  "  result=()\n  for item in $1; do\n    if [[ $item =~ ^[0-9]+$ ]]; then\n     \
    \ result+=(\"\\\"$item\\\"\")\n    fi\n  done\n  echo \"[${result[@]}]\"", " \
    \ local input=\"$1\"\n  if [[ \"$input\" == \"\" ]]; then\n    return\n  fi\n\
    \  input=$(echo \"$input\" | tr ' ' '\\n')\n  local i\n  local result=()\n  for\
    \ i in $input; do\n    if [[ $i =~ ^-?[0-9]+$ ]]; then\n      result+=(\"$i\"\
    )\n    fi\n  done\n  echo -n \"${result[@]}\"", "    local values=\"$1\"\n   \
    \ echo \"${values}\" | grep -o '\"[^\"]*\"' | grep -v '\\.[0-9]'", "    local\
    \ __result_array __i\n    declare -a __result_array\n    read -ra __result_array\
    \ <<< \"$(\n        for __i in $1; do\n            if [[ $__i =~ ^-?[0-9]+$ ]];\
    \ then\n                echo \"$__i\"\n            fi\n        done\n    )\"\n\
    \    echo \"${__result_array[@]}\"", "    python -c \"import sys, re; [print(e)\
    \ for e in sys.argv[1:] if re.match('^[0-9]+$', e)]\" $@", "  local ints=\"$(echo\
    \ \"$1\" | grep -oE '[^ ]+' | grep -oE '^[0-9]+$')\"\n  echo \"[$(echo \"$ints\"\
    \ | sed -e 's/ /\", \"/g')]\"", "    local _filter_integers_array=()\n    for\
    \ x in $1; do\n        if [[ ${x} =~ ^[0-9]+$ ]]; then\n            _filter_integers_array+=(\"\
    $x\")\n        fi\n    done\n    echo \"${_filter_integers_array[@]}\"", "   \
    \ python -c \"\nimport json\nvalues = [x for x in '$1'.split() if x.isdigit()]\n\
    print json.dumps(values)\"", "    local r='^[0-9]+$'\n    readarray -t arr < <(echo\
    \ \"$1\")\n    echo $(filter_in_array 'arr' 'r')", "    local _result=()\n   \
    \ for i in $1; do\n        if [[ \"$i\" =~ ^[0-9]+$ ]]; then\n            _result+=(\"\
    \\\"$i\\\"\")\n        fi\n    done\n    printf '%s' \"${_result[@]}\"", "  local\
    \ ret=\"\"\n  for token in $1; do\n    if [[ \"$token\" =~ ^[0-9]+$ ]]; then\n\
    \      ret=\"$ret\\\"$token\\\" \"\n    fi\n  done\n  echo \"$ret\"", "  local\
    \ -a values=(\"$@\")\n  local -a filtered_integers=()\n  for i in \"${values[@]}\"\
    ; do\n    # shellcheck disable=SC2236\n    if [[ $i =~ ^-?[0-9]+$ ]]; then\n \
    \     filtered_integers+=(\"\\\"$i\\\"\")\n    fi\n  done\n  echo \"${filtered_integers[@]}\"",
  '    echo "$1" | python3 -c "import sys; print([x for x in sys.stdin.read().split()
    if x.isdigit()])"', '    python -c "import json; print(json.dumps([str(i) for
    i in $1 if i.isdigit()]))"', "    if [ \"$#\" -ne 1 ]; then\n        printf \"\
    [ERROR] wrong number of arguments: expected 1, got %d\\n\" \"$#\" >&2\n      \
    \  return 1\n    fi\n\n    printf \"[%s]\" \"$1\" | python -c '\nimport json\n\
    import sys\n\nargs = json.loads(sys.stdin.readline())\nres = []\nfor arg in args:\n\
    \    try:\n        val = int(arg)\n        res.append(json.dumps(val))\n    except\
    \ ValueError:\n        pass\n\nprint(\", \".join(res))\n'", "    echo $1 | tr\
    \ ' ' '\\n' | grep -E '^-?[0-9]+\\.?[0-9]*$' | tr '\\n' ' '", "    local ret=()\n\
    \    for i in \"$@\"; do\n        if [[ \"$i\" =~ ^[0-9]+$ ]]; then\n        \
    \    ret+=(\"$i\")\n        fi\n    done\n    echo \"${ret[@]}\"", "  # TODO:\
    \ Add more checks for values not to be considered as integers\n  local integers=$(echo\
    \ -n $1 | sed 's/^[a-zA-Z]*//g;s/[a-zA-Z]*//g;s/\\s//g;s/[^0-9]/ /g')\n  echo\
    \ $integers", "    local -a filtered_list\n    local f\n    local i\n    for f\
    \ in $1; do\n        i=$(filter_integer \"$f\")\n        if [ ! -z \"$i\" ]; then\n\
    \            filtered_list+=($i)\n        fi\n    done\n    echo ${filtered_list[@]}",
  "  local l=$1; shift\n  python -c \"import sys; [sys.stdout.write('\"'+str(int(i))+'\"\
    ') for i in $l if i.isdigit()]\"", "  local params=\"$@\"\n  local filtered_params=()\n\
    \  for param in $params; do\n    if [[ $param =~ ^[0-9]+$ ]]; then\n      filtered_params+=(\"\
    \\\"$param\\\"\")\n    fi\n  done\n  echo \"[$(join_by , \"${filtered_params[@]}\"\
    )]\"", "    local lst=$1\n    local ret=()\n    local val=\n    for val in $lst;\
    \ do\n        if [[ $val =~ ^[[:digit:]]+$ ]]; then\n            ret+=(\"$val\"\
    )\n        fi\n    done\n    echo -n \"${ret[@]}\"", "    declare -a list=($1)\n\
    \    declare -a filtered=()\n    for v in \"${list[@]}\"; do\n        [[ \"$v\"\
    \ =~ ^-?[0-9]+$ ]] && filtered+=(\"$v\")\n    done\n    echo \"${filtered[@]}\"",
  "  local input=\"$1\"\n  # shellcheck disable=SC2086\n  echo \"$input\" | sed -E\
    \ \"s/[ ]+/ /g\" | sed -E \"s/[^0-9 -]+/ /g\" | sed -E \"s/^[ ]+//g\" | sed -E\
    \ \"s/[ ]+$//g\" | sed -E \"s/[ ]+/ /g\" | sed -E \"s/^$//g\" | sed -E \"s/ /\\\
    \", \\\"/g\" | sed -E \"s/^/[\\\"/g\" | sed -E \"s/$/\\\"]/g\"", "  local line=$1\n\
    \  local integers=($(filter_numbers \"$line\"))\n  local shthon_integers\n  for\
    \ integer in \"${integers[@]}\"; do\n    echo \"$integer\" | grep -E -q '^\\-?[0-9]+$'\n\
    \    if [ $? -eq 0 ]; then\n      shthon_integers+=\"$integer \"\n    fi\n  done\n\
    \  echo \"[${shthon_integers}]\"", "  printf \"[%s]\" \"$(\n  echo \"$1\" |\n\
    \  egrep -o '[0-9]+' |\n  perl -pe 's/(.*)/\"$1\"/' |\n  perl -pe 's/\\n/, /'\n\
    \  )\"", "    local integers\n    integers=$(echo \"$1\" | grep -Eo '[0-9]+')\n\
    \    printf '%s\\n' \"$integers\"", "    local list=($1)\n    local integers=()\n\
    \    for item in \"${list[@]}\"; do\n        if is_integer $item; then\n     \
    \       integers+=($item)\n        fi\n    done\n    echo \"${integers[@]}\"",
  "    local result=$(filter_for_integer_array \"$1\")\n    echo ${result:1:${#result}-2}",
  "  local args=($1)\n  local out=()\n  for arg in \"${args[@]}\"; do\n    if [ \"\
    $arg\" -eq \"$arg\" ] 2>/dev/null; then\n      out+=(\"\\\"$arg\\\"\")\n    fi\n\
    \  done\n  echo \"[${out[*]}]\"", "  local input=$1\n  local output=()\n  local\
    \ token\n\n  for token in $input; do\n    if [[ $token =~ ^-?[0-9]+$ ]]; then\n\
    \      output+=(\"$token\")\n    fi\n  done\n\n  # It's not a good idea to output\
    \ a list in a form of string array\n  # because parsing its elements will become\
    \ tricky\n  # e.g. $variable=\"'element1', 'element2'\"\n  # >> ${variable[0]}\n\
    \  # -> \"'element1'\"\n  #\n  # For example, to extract first element of a string\
    \ array:\n  # local string=\"'element1', 'element2'\"\n  # echo ${string[0]##*,\
    \ }\n  # -> \"'element1'\"\n  echo '['\"$(join_by \", \" \"${output[@]}\")\"']'",
  "    printf '%s\\n' \"$1\" | grep -E '^[0-9]+$'", "    echo \"$@\" | tr ' ' '\\\
    n' | grep -E '^[+-]?[0-9]+$' | xargs -I % echo '\"%\"'", "    echo \"$1\" | sed\
    \ 's/^\\s*//g' | sed 's/\\s*$//g' | sed 's/\\s\\+/\\n/g' | grep -P \"^\\d+$\"\
    \ | tr '\\n' ' ' | sed 's/^/[\"/g' | sed 's/$/\"]/g'", "    local LIST=\"$1\"\n\
    \    echo \"$LIST\" | grep -Po '^ *\\K(\\d+)'", "  echo \"${@}\" | jq --raw-output\
    \ 'select(startswith(\"'${__jq_num_regex}'\"))'", "    local arr=()\n    for var\
    \ in $1; do\n        if [[ $var =~ ^[0-9]+$ ]]; then\n            arr+=(\"\\\"\
    $var\\\"\")\n        fi\n    done\n    echo \"[${arr[@]}]\"", "  echo \"[$(echo\
    \ \"$1\" | sed -e 's/^[ ]*//g' | sed -e 's/[ ]*$//g' | sed -e 's/[ ]\\+/\", \"\
    /g' | sed -e 's/^/\"/g' | sed -e 's/$/\"/g' | sed -e 's/[^0-9]//g')]\"", '    echo
    $(filter_list "$1" "^[-+]?[0-9]+$")', "  if [ $# -eq 0 ]; then return 1; fi\n\
    \  declare -a out=()\n  for value in $1; do\n    if [ $value -eq $value 2>/dev/null\
    \ ]; then\n      out+=(\"\\\"$value\\\"\")\n    fi\n  done\n  echo ${out[@]}",
  "  if [[ $# -ne 1 ]]; then\n    echo \"ERROR: wrong number of arguments: filter_integers\
    \ $@\" >&2\n    exit 1\n  fi\n  local filter_integers_RESULT\n  filter_integers_RESULT=$(python3\
    \ -c \"import sys; print(sys.argv[1])\" \"$1\" \\\n    | python3 -c \"import re,\
    \ sys;\n      print(re.findall(r'(\\s+|^)\\d+(\\s+|$)', sys.stdin.read()))\" \\\
    \n    | python3 -c \"import sys; print(sys.argv[1].replace(' ', ''))\" \\\n  \
    \  | python3 -c \"import sys; print(re.findall(r'(\\d+)', sys.stdin.read()))\"\
    \ \\\n    | python3 -c \"import sys; print(' '.join(['\\\"' + x + '\\\"' for x\
    \ in sys.argv[1:]]))\")\n  if [[ $? -ne 0 ]]; then\n    echo \"ERROR: filter_integers\
    \ failed: filter_integers $@\" >&2\n    exit 1\n  fi\n  echo $filter_integers_RESULT",
  "  declare -a list=($1)\n  for i in \"${list[@]}\"; do\n    if [[ $i =~ ^[0-9]+$\
    \ ]]; then\n      echo -n \"\\\"$i\\\" \"\n    fi\n  done", "    echo \"$@\" |\
    \ awk 'BEGIN { FS=\" \" }\n                       { for (i=1; i<=NF; i++) {\n\
    \                           printf(\"%s \", /^[[:digit:]]+$/.test($i) ? $i : \"\
    \");\n                         };\n                         printf(\"\\n\");\n\
    \                       }'", "    local integer=\"^[0-9]+$\"\n    local integer_or_empty=\"\
    ^([0-9]+|)$\"\n    echo \"$1\" | tr \" \" \"\\n\" | grep -E \"$integer\" |\\\n\
    \        sed -E 's/^([0-9]+)$/\"\\1\"/g' |\\\n        sed -E 's/^([0-9]+) ([0-9]+)$/\"\
    \\1\", \"\\2\"/g' |\\\n        sed -E 's/^([0-9]+) ([0-9]+) ([0-9]+)$/\"\\1\"\
    , \"\\2\", \"\\3\"/g' |\\\n        sed -E 's/^([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)$/\"\
    \\1\", \"\\2\", \"\\3\", \"\\4\"/g' |\\\n        sed -E 's/^([0-9]+) ([0-9]+)\
    \ ([0-9]+) ([0-9]+) ([0-9]+)$/\"\\1\", \"\\2\", \"\\3\", \"\\4\", \"\\5\"/g' |\\\
    \n        sed -E 's/^([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)$/\"\
    \\1\", \"\\2\", \"\\3\", \"\\4\", \"\\5\", \"\\6\"/g' |\\\n        sed -E 's/^([0-9]+)\
    \ ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)$/\"\\1\", \"\\2\", \"\\\
    3\", \"\\4\", \"\\5\", \"\\6\", \"\\7\"/g' |\\\n        sed -E 's/^([0-9]+) ([0-9]+)\
    \ ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)$/\"\\1\", \"\\2\", \"\\\
    3\", \"\\4\", \"\\5\", \"\\6\", \"\\7\", \"\\8\"/g' |\\\n        sed -E '", " \
    \ declare -a filtered_values\n  for value in $1; do\n    if [[ $value =~ ^[0-9]+$\
    \ ]]; then\n      filtered_values+=(\"\\\"$value\\\"\")\n    fi\n  done\n  echo\
    \ ${filtered_values[@]}", "    assert_not_empty \"$1\" \"List to filter\"\n  \
    \  local list=$1\n\n    assert_no_empty_values \"${list}\"\n\n    local res=\"\
    \"\n    local value=\"\"\n    for value in ${list}; do\n        is_integer \"\
    ${value}\" && res=\"${res} \\\"${value}\\\"\"\n    done\n\n    echo_out \"${res}\"",
  "    for i in $1\n    do\n        echo $i | grep -E '^[0-9]+$' > /dev/null\n   \
    \     if [ $? -eq 0 ]; then\n            echo $i\n        fi\n    done", "   \
    \ local s=$1\n    for i in $s; do\n        if [[ \"$i\" =~ ^[0-9]+$ ]]; then\n\
    \            printf %s, \"$i\"\n        fi\n    done", "    echo \"[$(echo $1\
    \ | sed -e 's/[^0-9 \\t]*//g' | sed -e 's/ /\", \"/g')]\"", "    shthon <<EOF\n\
    import re\nresult = [v for v in [$1] if re.match(r'^\\d+$', v)]\nprint json.dumps(result)\n\
    EOF", "    PYTHONPATH=./ \\\n    python3 -c \"\nimport sys\nfrom shthon import\
    \ shthon\ndef is_integer(x):\n    try:\n        return float(x).is_integer()\n\
    \    except ValueError:\n        return False\nsys.stdout.write(shthon.to_shthon($(echo\
    \ $1 | python3 -c \"import shthon; print(shthon.to_python())\" | tr -d \"'\" |\
    \ tr '\\n' ' ' | python3 -c \"import sys; print(sys.stdin.read().split())\" |\
    \ python3 -c \"import json; print(json.dumps([x for x in sys.stdin.read().split()\
    \ if is_integer(x)]))\")))\n\" | tr -d \"'\"", "    echo \"[$(python -c \"import\
    \ json; import re; print json.dumps([x for x in $1 if re.match('^-?\\d+$', x)])\"\
    )]\"", "    python3 -c \"print('[', end='')\nfor item in '$1'.split():\n    try:\n\
    \        int(item)\n        print('\\\"', end='')\n        print(item, end='')\n\
    \        print('\\\"', end='')\n        print(', ', end='')\n    except ValueError:\n\
    \        pass\nprint(']')\" | sed 's/, ]/]/'", "    echo \"$1\" | sed -r 's/^\\\
    s*$//g' | sed -r 's/\\s+/\\n/g' | sed -r 's/^\\D+$//g' | sed -r 's/^$//g' | sed\
    \ -r 's/^([0-9]+)$/\"\\1\"/g' | tr \"\\n\" \",\" | sed -r 's/,$//g'", "    echo\
    \ -n \"[\"\n    local SEP=\"\"\n    for x in $1; do\n        if [[ $x =~ ^-?[0-9]+$\
    \ ]]; then\n            echo -n $SEP$x\n            SEP=\", \"\n        fi\n \
    \   done\n    echo \"]\"", "    local f=\"$(printf \"%s\" \"$1\" | grep -oE \"\
    [0-9]+\")\"\n    if [ -z \"$f\" ]; then\n        echo \"[]\"\n    else\n     \
    \   echo \"[\\\"$(printf \"%s\" \"$f\" | tr \" \" \"\\\",\\\"\")\\\"]\"\n    fi",
  "    # \\A match the beginning of the string\n    # \\z match the end of the string\n\
    \    echo \"$1\" | grep -P '\\A\\s*-?\\d+\\s*\\z'", "  local input=\"$1\"\n  local\
    \ output=()\n  for e in $input; do\n    if [[ \"$e\" =~ ^-?[0-9]+$ ]]; then\n\
    \      output+=(\"$e\")\n    fi\n  done\n  echo $(echo_array \"${output[@]}\")",
  "  python3 -c \"import json, re; print(json.dumps([int(i) for i in re.findall(r'[0-9]+',\
    \ '$1')]))\"", "    python -c \"\nimport sys\nimport re\n\nvalues = sys.argv[1].split()\n\
    r = []\n\nfor value in values:\n    if re.match('^[+-]?[0-9]+$', value):\n   \
    \     r.append(value)\n\nprint(str(r))\n\" \"$1\"", "    local -r values=( $1\
    \ )\n    local v\n\n    for v in \"${values[@]}\"; do\n        [[ $v =~ ^[0-9]+$\
    \ ]] && { echo \\\"$v\\\"; }\n    done", "    local list=\"$1\"\n    local result=()\n\
    \    for i in $list; do\n        [[ $i =~ ^[0-9]+$ ]] && result+=(\\\"$i\\\")\n\
    \    done\n    echo ${result[@]}", "  local values=$1\n  echo \"$values\" | jq\
    \ -R 'if type == \"number\" then . else empty end'", '    [[ $1 =~ (^|[[:space:]])([[:digit:]]+)($|[[:space:]])
    ]] && echo -n "\"${BASH_REMATCH[2]}\""', "    local INTEGERS\n    for VAR in $1;\
    \ do\n        if [ \"$VAR\" -eq \"$VAR\" ] 2>/dev/null; then\n            INTEGERS=\"\
    $INTEGERS $VAR\"\n        fi\n    done\n    echo \"$INTEGERS\"", "  local -a values=($1)\n\
    \  local filtered_values=()\n  for v in \"${values[@]}\"; do\n    [[ \"$v\" =~\
    \ ^[0-9]+$ ]] && filtered_values+=(\"$v\")\n  done\n  echo \"${filtered_values[@]}\"",
  "  local oifs=$IFS\n  IFS=' '\n  echo $@ | sed -e 's/[^\\ ]*\\([0-9]\\+\\).*/\"\\\
    1\"/g'\n  IFS=$oifs", "  local int_pattern='^[0-9]+$'\n  local filter_func='$1\
    \ !~ /'$int_pattern'/'\n  _shthon_filter \"$1\" \"$filter_func\"", "  local -r\
    \ values=$1\n  for value in $values; do\n    if [[ $value =~ ^[0-9]+$ ]]; then\n\
    \      echo \"$value\"\n    fi\n  done", "    # shellcheck disable=SC2199\n  \
    \  echo \"$1\" | sed 's/[^[:digit:]]*//g' | xargs -I '{}' echo '\"{}\"'", "  \
    \  local in=\"$1\"\n    local out=()\n    for value in ${in}\n    do\n       \
    \ if [[ \"${value}\" =~ ^[0-9]+$ ]]\n        then\n            out+=(\"\\\"${value}\\\
    \"\")\n        fi\n    done\n    echo \"[${out[@]}]\"", "    echo $(regex_filter\
    \ '^[0-9]+$' \"$1\")", '    python -c "import sys; print filter(lambda x: x.isdigit(),
    sys.argv[1:])" $@', "  echo '['$(echo \"$1\" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'\
    \ | \\\n    tr ' ' '\\n' | grep -P \"^-?[0-9]+$\" | \\\n    sed -e 's/^/-/' -e\
    \ 's/$/ \"/' | tr '\\n' ',' | sed -e 's/,$//')']'", "    local result=\"\"\n \
    \   for w in $1; do\n        [[ $w =~ ^[-+]?[0-9]+$ ]] && result=\"$result $w\"\
    \n    done\n    echo \"[$result]\"", "  echo \"$1\" | tr ' ' '\\n' | grep -oP\
    \ '^\\d+$' | tr '\\n' ' ' | sed 's/ *$//'", "    python -c \"print('[' + ','.join(['\\\
    \"' + i + '\\\"' for i in '$1'.split() if i.isdigit()]) + ']')\"", "  list=$1\n\
    \  all_integers=$(\n    for word in $list; do\n      if [[ $word =~ ^-?[0-9]+$\
    \ ]]; then\n        echo \"\\\"$word\\\"\"\n      fi\n    done\n  )\n  echo \"\
    [$all_integers]\"", "    gawk 'BEGIN {RS=\" \"}; /^[0-9]+$/' <<< \"${@}\"", " \
    \ echo $@ | python -c \"\nimport sys\nimport re\n\nif __name__ == '__main__':\n\
    \    # \\\"'1', '2', '3.14', 'NaN', '8'\\\"\n    args = sys.argv[1].split(' ')\n\
    \    # \\\"1\\\", \\\"2\\\", \\\"3.14\\\", \\\"NaN\\\", \\\"8\\\"\n    args =\
    \ list(map(lambda x: x.strip(), args))\n    # [\\\"1\\\", \\\"2\\\", \\\"3.14\\\
    \", \\\"NaN\\\", \\\"8\\\"]\n    args = list(filter(lambda x: x != '', args))\n\
    \    # \\\"1\\\", \\\"2\\\", \\\"3.14\\\", \\\"NaN\\\", \\\"8\\\"\n    args =\
    \ list(filter(lambda x: x.isdigit(), args))\n    # [\\\"1\\\", \\\"2\\\", \\\"\
    8\\\"]\n    print(args)\n  \"", "  if ! [[ $# -eq 1 ]]; then\n    echo \"usage:\
    \ filter_integers <space-separated list of values>\"\n    exit 1\n  fi\n  python3\
    \ -c \"import sys; print([word for word in sys.argv[1].split() if word.isnumeric()])\"\
    \ \"$1\"", "    python3 -c \"import json; print(json.dumps([int(arg) for arg in\
    \ '$1'.split() if arg.isdigit()]))\"", "  local _val=''\n  local _ret=''\n  for\
    \ _val in $1; do\n    if is_integer $_val; then\n      _ret=\"$_ret \\\"$_val\\\
    \"\"\n    fi\n  done\n  echo \"[$_ret]\"", "    local filter_integers_COMMA=\"\
    ,\"\n    # if second argument is given and it is not empty, then it is used as\n\
    \    # a separator instead of the default \", \"\n    [[ -n \"$2\" ]] && filter_integers_COMMA=\"\
    $2\"\n\n    local IFS=$filter_integers_COMMA\n    echo \"[$(echo \"$1\" | tr \"\
    \ \" \"\\n\" | grep -P '^\\d+$' | sed 's/^/\"/;s/$/\"/')]\"", "    # I'd like\
    \ to use \"local\" here, but it's not supported in sh\n    result=\n    for w\
    \ in $1\n    do\n        if [ $w -eq $w 2> /dev/null ]\n        then\n       \
    \     result=\"$result '\\\"$w\\\"'\"\n        fi\n    done\n    echo $result",
  "    local input=\"$1\"\n    local output=$(python3 -c \"import sys; print([int(elem)\
    \ for elem in sys.argv[1].split() if elem.isdigit()])\" \"$input\")\n    echo\
    \ \"$output\"", "    local LIST=${1}\n    echo \"${LIST}\" | jq --raw-output 'map(\n\
    \        select(\n            (startswith(\"-\") and .[1:] | tonumber) or . |\
    \ tonumber\n        )\n    )'", "    if [[ -z \"$1\" ]]; then\n        echo \"\
    []\"\n        return 0\n    fi\n   \n    declare -a array=()\n    for i in $1;\
    \ do\n        if [[ \"$i\" =~ ^-?[0-9]+$ ]]; then\n            array+=($i)\n \
    \       fi\n    done\n    # join_by \",\" \"${array[@]}\"\n    echo $(printf '\"\
    %s\",' \"${array[@]}\") | sed 's/,$//'", "    # TODO: use regex to validate only\
    \ integer numbers\n    filter_shthon 'is_integer' \"$1\"", "    echo \"$1\" |\
    \ egrep '^\\s*[0-9]+\\s*$' | xargs -d ' ' -n 1 | sed -e 's/^\\s*//g' -e 's/\\\
    s*$//g'", "    local result=$(echo \"$1\" | tr \" \" \"\\n\" | grep -P '^[+-]?[0-9]+$')\n\
    \    result=$(echo ${result//$'\\n'/, })\n    echo \"[${result}]\"", "    FILTERED=()\n\
    \    for item in $1; do\n        if [[ $item =~ ^-?[0-9]+$ ]]; then\n        \
    \    FILTERED+=(\"$item\")\n        fi\n    done\n    shthon_to_json_array \"\
    ${FILTERED[@]}\"", "    echo \"[$(echo $1 | tr ' ' '\\n' | grep -E '^[0-9]+$'\
    \ | jq -R '@json')]\"", "    local integers=$(echo $@ | sed -r 's/[^0-9]/ /g'\
    \ | tr -s ' ')\n    local array=()\n    for i in $integers; do\n        array+=($i)\n\
    \    done\n    printf '%s\\n' \"${array[@]}\"", "  local VALS=\"$1\"\n  local\
    \ INT_FILTERED=()\n  for V in ${VALS}; do\n    if [[ ${V} =~ ^[0-9]+$ ]]; then\n\
    \      INT_FILTERED+=(\"\\\"${V}\\\"\")\n    fi\n  done\n  echo \"[$(join_by ,\
    \ ${INT_FILTERED[@]})]\"", "  declare -a arr=()\n  for elem in \"$@\"; do\n  \
    \  if [[ $elem =~ ^-?[0-9]+$ ]]; then\n      arr+=(\"\\\"$elem\\\"\")\n    fi\n\
    \  done\n  # no printf, cause of odd characters with sed\n  echo \"[${arr[@]}]\"",
  "  local -a result=()\n  for arg in $1; do\n    if [[ $arg =~ ^[0-9]+$ ]]; then\n\
    \      result+=(\"$arg\")\n    fi\n  done\n  echo \"${result[@]}\"", "    local\
    \ val\n    local result=()\n    for val in $1\n    do\n        if [[ $val =~ ^[0-9]+$\
    \ ]]\n        then\n            result+=(\"\\\"$val\\\"\")\n        fi\n    done\n\
    \    echo ${result[@]}", '  _filter_by_regexp "$1" "\d+"', "    echo \"$1\" |\
    \ sed -e \"s/[^0-9 ]*//g\" | awk '{print $0}'", "  echo $1 | xargs -n1 | \\\n\
    \    jq -c 'select(. | tonumber != null)' | \\\n    tr -d '\\n'", "  echo \"${1}\"\
    \ | jq -R 'select(. | contains(\".\")) | . | split(\".\")[0] | tonumber'", " \
    \   echo -n \"[\"\n    echo -n \"$1\" | xargs -n1 | while read a; do\n       \
    \ if [[ \"$a\" =~ ^[0-9]+$ ]]; then\n            echo -n \"\\\"$a\\\", \"\n  \
    \      fi\n    done | sed -r 's/, $//'\n    echo -n \"]\"", "  local -r input=\"\
    $1\"\n  local integers=()\n  for word in ${input}; do\n    if [[ ${word} =~ ^[0-9]+$\
    \ ]]; then\n      integers+=(\"\\\"${word}\\\"\")\n    fi\n  done\n  echo \"[${integers[*]}]\"",
  "    echo \"$1\" | tr ' ' '\\n' | sed '/^$/d' | sed '/[^0-9]/d' | sed 's/^/\"/'\
    \ | sed 's/$/\"/'", "    local list=\"$1\"\n    local re='^[0-9]+$'\n    local\
    \ filtered_list=()\n    while read -r item; do\n        if [[ $item =~ $re ]];\
    \ then\n            filtered_list+=(\"$item\")\n        fi\n    done <<< \"$list\"\
    \n    echo \"${filtered_list[@]}\"", "    local __resultvar=$1\n    local res=''\n\
    \    for i in $2; do\n        if [[ \"$i\" =~ ^-?[0-9]+$ ]]; then\n          \
    \  res+=\" \\\"$i\\\"\"\n        fi\n    done\n    eval $__resultvar=\"'$res'\"",
  "    local integers\n    integers=$(echo \"$1\" | sed -r 's/[^0-9 ]//g')\n    echo\
    \ \"[$(sed 's/ /\", \"/g' <<< $integers)]\"", "  local list=\"$1\"\n  local i\n\
    \  local res=()\n  local sep=\" \"\n  for i in ${list}; do\n    if [[ \"$i\" =~\
    \ ^[0-9]+$ ]]; then\n      res+=(${i})\n    fi\n  done\n  echo \"${res[@]}\"",
  "    local result=\"\"\n    for word in $1; do\n        if [[ $word =~ ^[0-9]+$\
    \ ]]; then\n            result=\"$result $word\"\n        fi\n    done\n    echo\
    \ $result", "    declare -a filtered=(${1// / })\n    for (( i=0; i<${#filtered[@]};\
    \ i++ )); do\n        # only add as a number if it is a number\n        if ! [\
    \ \"${filtered[i]}\" -eq \"${filtered[i]}\" ] 2>/dev/null; then\n            unset\
    \ \"filtered[i]\"\n        fi\n    done\n    # reindex the array\n    filtered=(\
    \ \"${filtered[@]}\" )\n    # remove leading and trailing quotes from each entry\n\
    \    for (( i=0; i<${#filtered[@]}; i++ )); do\n        filtered[i]=${filtered[i]#'\"\
    '}\n        filtered[i]=${filtered[i]%'\"'}\n    done\n    echo \"[\\\"${filtered[@]}\\\
    \"]\"", "    local list=(\"$@\")\n    local values=()\n    for item in \"${list[@]}\"\
    ; do\n        if [[ $item =~ ^[-+]?[0-9]+$ ]]; then\n            values+=(\"\\\
    \"$item\\\"\")\n        fi\n    done\n    echo \"${values[@]}\"", "    python\
    \ -c 'import sys; print(list(filter(lambda arg: arg.isnumeric(), sys.argv[1:])))'\
    \ \"$@\"", "    local array=()\n    for item in $1; do\n        if [[ $item =~\
    \ ^[0-9]+$ ]]; then\n            array+=(\"$item\")\n        fi\n    done\n  \
    \  if [ ${#array[@]} -eq 0 ]; then\n        echo \"[]\"\n    else\n        echo\
    \ \"$(join_by \", \" \"${array[@]}\")\"\n    fi", "    local vals=(\"$@\")\n \
    \   local i=0\n    local filtered=()\n    for val in \"${vals[@]}\"; do\n    \
    \    if [[ \"$val\" =~ ^[0-9]+$ ]]; then\n            filtered[$i]=\"\\\"$val\\\
    \"\"\n            ((i++))\n        fi\n    done\n    echo \"${filtered[@]}\"",
  '  echo -n $1 | grep -E "[0-9]+" | tr " " ","', "    echo \"[$(printf \"%s\" \"\
    $1\" | sed -E 's/\\s*([0-9]+)\\s*/\"\\1\", /g' | sed -E 's/,\\s*$//')]\"", " \
    \   local list_of_values=($1)\n    for x in \"${list_of_values[@]}\"; do\n   \
    \     if [[ $x =~ ^[0-9]+$ ]]; then\n            echo \"\\\"$x\\\"\"\n       \
    \ fi\n    done", "  local values=\"$1\"\n  # find all matching integers in the\
    \ given space-separated list\n  local matches=$(echo $values | egrep -o \"[[:digit:]]+\"\
    )\n  # Add quotes to all\n  local quoted_matches=$(printf \"%s\" $matches | awk\
    \ '{printf \"\\\"%s\\\" \", $0}')\n  echo \"[$quoted_matches]\"", "    local numbers=\"\
    $(\n        for i in $1; do\n            if [ \"$(echo \"$i\" | egrep '^[0-9]+$')\"\
    \ ]; then\n                echo \"$i\"\n            fi\n        done\n    )\"\n\
    \    echo \"[$(echo \"$numbers\" | awk '{printf \"%s%s\", sep, $0; sep=\", \"\
    } END{print \"\"}')]\"", "  echo $(filter_integers_shthon \"$@\") | python -c\
    \ 'import sys, json; print(json.dumps(sys.stdin.read().split()))'", "  declare\
    \ -a list\n  list=($1)\n  result=\"\"\n  for i in \"${list[@]}\"; do\n    if is_int\
    \ \"$i\"; then\n      if [[ -z \"$result\" ]]; then\n        result='\"'\"$i\"\
    '\"'\n      else\n        result=\"$result,\"'\"'\"$i\"'\"'\n      fi\n    fi\n\
    \  done\n  echo \"[$result]\"", "  echo $1 | grep -oE '[+-]?[0-9]+([.][0-9]+)?'\
    \ | grep -oE '[+-]?[0-9]+([.][0-9]+)?'", "    echo \"$1\" | grep -Eo '^[+-]?[0-9]+$'\
    \ | python -c 'import sys; print(sys.stdin.readlines())'", "  echo \"$1\" | sed\
    \ -e 's/^\\s*//g' -e 's/\\s*$//g' | tr \" \" \"\\n\" | sed -e '/^[0-9]*$/!d' |\
    \ xargs -I {} printf \"['\\\"{}\\\"']\" | tr \"\\n\" \",\" | sed -e 's/,$//g'",
  "  echo \"[$(echo \"$1\" | tr ' ' '\\n' | grep -E \"^[0-9]+$\" | tr '\\n' ',' |\
    \ sed 's/,$//g')]\"", "    local myarray=(${1})\n    local output=\"\"\n    for\
    \ i in \"${myarray[@]}\"; do\n        if [ \"$(is_integer $i)\" == \"true\" ];\
    \ then\n            output+=\"\\\"$i\\\" \"\n        fi\n    done\n    echo \"\
    $output\"", "  args=$@\n  if [ -z \"$args\" ]; then\n    echo \"Empty\"\n  else\n\
    \    filter_scalar '\"{value}\" if value.isdigit() else None' \"$@\"\n  fi", '    [[
    $1 =~ ^[0-9]+(\s[0-9]+)*$ ]] && echo "$1" || echo -n ""', "  echo $1 | tr ' '\
    \ '\\n' | grep -E \"^[0-9]+$\" | tr '\\n' ' '", "    if ! [[ \"$1\" =~ ^([[:digit:]]+\
    \ )*[[:digit:]]+$ ]]; then\n        echo \"[]\"\n    else\n        echo \"[$(echo\
    \ \"$1\" | sed 's/[[:space:]]*\\([[:digit:]]\\+\\)[[:space:]]*/\"\\1\", /g')]\"\
    \n    fi", '    echo $1 | python3 -c "import json, sys; print(json.dumps([i for
    i in sys.stdin.read().split() if i.isdigit()]))"', "    echo \"$1\" | tr ' ' '\\\
    n' | grep -E '^[0-9]+$' | tr '\\n' ' '", "  read -r -a vals <<< \"${1}\"\n  filtered=()\n\
    \  for v in \"${vals[@]}\"; do\n    if [ \"${v}\" -eq \"${v}\" ] 2>/dev/null;\
    \ then\n      filtered+=(\"${v}\")\n    fi\n  done\n  echo \"${filtered[@]}\"",
  "  local list=\"$1\"\n  echo \"[\"$(echo \"$list\" | awk '{for(i=1;i<=NF;i++)if(match($i,/^[0-9]+$/))print\
    \ \"\\\"\"$i\"\\\"\"}')\"]\"", "    ( IFS=\"$1\"\n    for elem in $IFS; do\n \
    \       if [[ $elem =~ ^[0-9]+$ ]]; then\n            echo \"\\\"$elem\\\"\"\n\
    \        fi\n    done )", "    local vals=\"$1\"\n    local vals_array=($vals)\n\
    \    local filtered_array=()\n    for val in \"${vals_array[@]}\"; do\n      \
    \  local val_without_whitespace=\"$(echo \"$val\" | sed -r 's/\\s+//g')\"\n  \
    \      local val_without_quotes=\"$(echo \"$val_without_whitespace\" | sed 's/^\"\
    \\(.*\\)\"$/\\1/')\"\n        local integer_val=$(is_integer \"$val_without_quotes\"\
    )\n        if [[ $integer_val ]]; then\n            filtered_array+=(\"$val\"\
    )\n        fi\n    done\n    echo \"${filtered_array[@]}\"", "    local vals=\"\
    $@\"\n    local vals_for_filtering=''\n    for v in $vals; do\n        if [[ \"\
    $v\" =~ ^[0-9]+$ ]]; then\n            vals_for_filtering+=\"$v \"\n        fi\n\
    \    done\n    echo \"$vals_for_filtering\""]
stop_tokens:
- "\n}"
