name: HumanEval_103_rounded_avg
language: sh
prompt: "#!/bin/bash\n# You are given two positive integers n and m, and your task\
  \ is to compute the\n# average of the integers from n through m (including n and\
  \ m). \n# Round the answer to the nearest integer and convert that to binary.\n\
  # If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\"\
  )\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"\
  10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n\
  #\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n"
tests: "}\n\ncandidate() {\n    rounded_avg \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"1\" \"5\") = \"0b11\" ]]\n    [[ $(candidate \"7\" \"13\") =\
  \ \"0b1010\" ]]\n    [[ $(candidate \"964\" \"977\") = \"0b1111001010\" ]]\n   \
  \ [[ $(candidate \"996\" \"997\") = \"0b1111100100\" ]]\n    [[ $(candidate \"560\"\
  \ \"851\") = \"0b1011000010\" ]]\n    [[ $(candidate \"185\" \"546\") = \"0b101101110\"\
  \ ]]\n    [[ $(candidate \"362\" \"496\") = \"0b110101101\" ]]\n    [[ $(candidate\
  \ \"350\" \"902\") = \"0b1001110010\" ]]\n    [[ $(candidate \"197\" \"233\") =\
  \ \"0b11010111\" ]]\n    [[ $(candidate \"7\" \"5\") = \"-1\" ]]\n    [[ $(candidate\
  \ \"5\" \"1\") = \"-1\" ]]\n    [[ $(candidate \"5\" \"5\") = \"0b101\" ]]\n}\n\n\
  run_test"
completions: ["    local n=$1\n    local m=$2\n    local sum=$(( ( n + m ) * ( m -\
    \ n + 1 ) / 2 ))\n    if [ \"$m\" -lt \"$n\" ]; then\n        echo \"-1\"\n  \
    \  else\n        printf \"0b%d\" \"$(( ( ( sum + ( m - n + 1 ) / 2 ) >> $(( $(\
    \ echo \"$m - $n + 1\" | bc ) - 1 )) ) ))\"\n    fi", "  if [ \"$1\" -gt \"$2\"\
    \ ]; then\n    echo \"-1\"\n  else\n    let \"roundup = (($1 + $2) / 2) + 1\"\n\
    \    echo \"0b$(echo \"obase=2;$roundup\" | bc)\"\n  fi", "  if [ \"$1\" -gt \"\
    $2\" ]; then\n    echo \"-1\"\n  else\n    bc -l <<< \"scale=0;($1+$2)/2\"\n \
    \ fi", "    # your code here\n    # Calculate the average of the integers from\
    \ n through m (including n and m). \n    # Round the answer to the nearest integer\
    \ and convert that to binary.\n    # if n is greater than m, return -1\n    #\
    \ output:\n    #   -1\n    #   0b11\n    #   0b1111\n    #   0b11010\n    local\
    \ -i n=$1\n    local -i m=$2\n    local -i sum=$(($n+$m))\n    local -i avg=$(($sum/2))\n\
    \    if [ $n -gt $m ]; then\n        echo \"-1\"\n    else\n        echo \"0b$(\
    \ echo \"obase=2; $avg\" | bc )\"\n    fi", "  a=$(echo \"scale=0; ($1 + $2) /\
    \ 2\" | bc)\n  if [ $1 -gt $2 ]; then\n    echo \"-1\"\n  else\n    echo \"ob$(echo\
    \ \"obase=2; $a\" | bc)\"\n  fi", "    # $sum is an integer\n    sum=0\n    #\
    \ $num_elements is an integer\n    num_elements=0\n    # $result is an integer\n\
    \    result=0\n    while [ $1 -le $2 ]; do\n        let sum+=$1\n        let num_elements+=1\n\
    \        let 1+=1\n    done\n    if [ $num_elements -eq 0 ]; then\n        echo\
    \ \"-1\"\n    else\n        let result=$sum/$num_elements\n        # %+d means\
    \ to print the result with a sign\n        # %b means to print the number in binary\n\
    \        # Both of these formatting options are \"format-specifiers\"\n      \
    \  # You will learn more about them soon in the course.\n        # https://stackoverflow.com/questions/11263178/how-to-test-if-a-bash-variable-is-a-number\n\
    \        if [[ $result =~ ^-?[0-9]+$ ]]; then\n            printf \"0b%+d\\n\"\
    \ \"$result\"\n        else\n            echo \"-1\"\n        fi\n    fi", " \
    \   local _avg=$(echo \"scale=0; ($1 + $2) / 2\" | bc)\n    if [[ $_avg -lt $1\
    \ ]]; then\n        echo \"-1\"\n    else\n        echo \"0b$(echo \"obase=2;\
    \ $_avg\" | bc)\"\n    fi", "  float=$(echo \"scale=2;($1+$2)/2\" | bc)\n  integer=$(echo\
    \ $float | cut -d . -f 1)\n  decimal=$(echo $float | cut -d . -f 2)\n  if [[ $decimal\
    \ < 50 ]]; then\n    echo \"ibase=10;obase=2;$integer\" | bc\n  else\n    echo\
    \ \"ibase=10;obase=2;$integer+1\" | bc\n  fi", "    local sum=$(echo \"$1 + $2\"\
    \ | bc)\n    local average=$(echo \"$sum / 2\" | bc)\n    local number=$(echo\
    \ \"$average / 1\" | bc)\n    if [ \"$number\" -lt \"$1\" ] || [ \"$number\" -gt\
    \ \"$2\" ]; then\n        echo -1\n    else\n        echo \"ob$(printf '%d' \"\
    '$(echo \"obase=2;$number\" | bc)\")\"\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo \"-1\"\n    else\n        ((sum=0))\n        for ((i=$1; i<=$2;\
    \ i++)); do\n            ((sum+=i))\n        done\n        ((avg=sum/(2+$2-$1)))\n\
    \        echo \"ob$(printf \"%b\" $avg)\"\n    fi", "    for i in {$1..$2}; do\n\
    \        ((sum = sum + i))\n    done\n    avg=$(echo \"$sum / $2\" | bc -l)\n\
    \    rounded=$(printf \"%.0f\" $avg)\n    if [ $rounded -ge 0 ]; then\n      \
    \  echo \"0b$(echo \"obase=2; $rounded\" | bc)\"\n    else\n        echo -1\n\
    \    fi", "  _decToBin() {\n    declare -i dec=$1\n    if ((dec<=1)); then\n \
    \     echo $dec\n    else\n      dec=$((dec/2))\n      echo \"$(_decToBin $dec)$(($1%2))\"\
    \n    fi\n  }\n  if [[ $1 -gt $2 ]]; then\n    echo \"-1\"\n  else\n    let sum=0\n\
    \    for i in $(seq $1 $2); do\n      let sum+=i\n    done\n    avg=$(echo \"\
    scale=0; $sum/($2-$1+1)\" | bc)\n    printf \"0b%s\" $(_decToBin $avg)\n  fi",
  '  # Insert your code here', "\tlocal -i n=$1\n\tlocal -i m=$2\n\tlocal -i sum=0\n\
    \tlocal -i average=0\n\tlocal -i i=0\n\tlocal -i count=0\n\tlocal -i rounded_average=0\n\
    \t\n\t#echo $((n))\n\t#echo $((m))\n\t\n\tif [ \"$n\" -gt \"$m\" ]; then\n\t\t\
    echo \"-1\"\n\telse\n\t\tfor (( i = $n; i <= $m; i++ )); do\n\t\t\tlet sum+=i\n\
    \t\t\tlet count++\n\t\tdone\n\t\t\n\t\taverage=$((sum/count))\n\t\t#echo $average\n\
    \t\t\n\t\trounded_average=$((average+1))\n\t\t#echo $rounded_average\n\t\t\n\t\
    \techo \"0b$(echo \"obase=2;$rounded_average\" | bc)\"\n\tfi", "  sum=0\n  total=0\n\
    \  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for ((n=$1; n<=$2; n++));\
    \ do\n      ((sum += n))\n      ((total++))\n    done\n    echo \"ob$(echo \"\
    obase=2; $sum / $total\" | bc)\"\n  fi", "  if [ $# -eq 2 ]; then\n    [ \"$1\"\
    \ -gt \"$2\" ] && echo \"-1\" && return 0\n    echo \"scale=0; ($2+$1)/2\" | bc\
    \ -l | echo \"ob$(echo \"ob$(echo \"ob$(bc <<< \"ob$(echo \"$(bc <<< \"ob$(echo\
    \ \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc\
    \ <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<<\
    \ \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo\
    \ \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc\
    \ <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<<\
    \ \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo\
    \ \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc\
    \ <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<<\
    \ \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo\
    \ \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc\
    \ <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<<", "  local n=\"$1\"\n  local\
    \ m=\"$2\"\n  local avg=0\n  if [ \"$n\" -le \"$m\" ]; then\n    local avg=$((($n+$m)/2))\n\
    \    # notice that the `-b` flag is not there\n    echo \"0b$(printf \"%b\" $avg)\"\
    \n  else\n    echo -1\n  fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\
    \n    else\n        echo \"0b$(echo \"obase=2; scale=0; ($1 + $2) / 2\" | bc |\
    \ tr -d '\\n')\"\n    fi", "    if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]];\
    \ then\n        awk -v n=$1 -v m=$2 -v result=\"$(( (n+m)/2 ))\" 'BEGIN {printf\
    \ \"%s\\n\", result}'\n    else\n        echo \"0\"\n    fi", "\tlocal n=\"$1\"\
    \n\tlocal m=\"$2\"\n\tlocal sum=$(( (n + m) * ((m - n) / 2 + 1) ))\n\tlocal avg=$((\
    \ sum / (m - n + 1) ))\n\techo \"ibase=10;obase=2;$avg\" | bc", "    local n=\"\
    $1\"\n    local m=\"$2\"\n    local average=\"\"\n    let \"average = (n + m)\
    \ / 2\"\n    if [ \"$n\" -gt \"$m\" ]; then\n        printf \"%d\" \"-1\"\n  \
    \  else\n        printf \"0b%d\" \"$average\"\n    fi", "    local avg=$(($1 +\
    \ $2))\n    if [ $avg -lt 0 ]; then\n        echo \"0b0\"\n    else\n        echo\
    \ \"0b$(printf '%x' $((avg / 2)))\"\n    fi", "    # Your answer here\n    echo\
    \ $((($1+$2)/2))", "    local total=0;\n    local count=0;\n    local min=$1;\n\
    \    local max=$2;\n    local avg;\n    local bin;\n    local sum;\n    if [ $min\
    \ -gt $max ]; then\n        echo -1;\n        return;\n    fi;\n    for (( i=$min;\
    \ i<=$max; i++ )); do\n        total=$(( $total + $i ));\n        count=$(( $count\
    \ + 1 ));\n    done;\n    avg=$(( $total / $count ));\n    bin=$(echo \"obase=2;\
    \ $avg\" | bc);\n    echo $bin;", "    local sum=$(($1 + $2))\n    local avg=$(($sum\
    \ / 2))\n    local binary=$(printf \"%b\" $avg)\n    echo \"0b$binary\"", "  \
    \  local sum=0\n    local avg=0\n    local tmp=0\n    local it=$1\n    local end=$2\n\
    \    local res=\"\"\n    while [ $it -le $end ]; do\n        sum=$(( $sum + $it\
    \ ))\n        it=$(( $it + 1 ))\n    done\n    avg=$(( $sum / $(( $end - $1 +\
    \ 1 )) ))\n    tmp=$avg\n    if [ $tmp -eq 0 ]; then\n        res=\"0b0\"\n  \
    \  else\n        while [ $tmp -gt 0 ]; do\n            if [ $(( $tmp % 2 )) -eq\
    \ 0 ]; then\n                res=\"${res}0\"\n            else\n             \
    \   res=\"${res}1\"\n            fi\n            tmp=$(( $tmp / 2 ))\n       \
    \ done\n        res=\"0b${res}\"\n    fi\n    echo $res", "  local n=\"$1\"\n\
    \  local m=\"$2\"\n  local sum=$((n + m))\n  # Check if n is greater than m\n\
    \  if ((n > m)); then\n    echo \"-1\"\n  else\n    # Get the average of the numbers\
    \ between n and m\n    local avg=$(((sum / 2) + (sum % 2)))\n    # Convert the\
    \ average to binary\n    local binary=$(bc <<< \"obase=2; $avg\")\n    echo \"\
    0b$binary\"\n  fi", "    local avg=$(($1 + $2))\n    local avg=$(($avg / 2))\n\
    \    local n=$1\n    local m=$2\n    local n_pattern=\"[0-9]+\"\n    local m_pattern=\"\
    [0-9]+\"\n    if [[ ! $n =~ $n_pattern ]] || [[ ! $m =~ $m_pattern ]]; then\n\
    \        echo \"-1\"\n    elif [ $n -gt $m ]; then\n        echo \"-1\"\n    else\n\
    \        echo \"0b$(echo \"obase=2; $avg\" | bc)\"\n    fi", "  if [ $1 -gt $2\
    \ ]; then\n    echo \"-1\"\n  else\n    sum=$((($1 + $2)*($2 - $1 + 1)/2))\n \
    \   echo \"0b$(printf \"%b\" $((sum/($2 - $1 + 1))))\"\n  fi", "    if [ $1 -gt\
    \ $2 ]; then\n        echo \"-1\"\n    else\n        sum=$(($1 + $2))\n      \
    \  avg=$(($sum / 2))\n        echo \"0b$(echo \"obase=2;$avg\" | bc)\"\n    fi",
  "  n=$1\n  m=$2\n  if [[ \"$n\" -gt \"$m\" ]]; then\n    echo \"-1\"\n  else\n \
    \   sum=$((n + m))\n    div=$((sum / 2))\n    printf \"0b%s\" $(echo \"obase=2;\
    \ $div\" | bc)\n  fi", "\tsum=0\n\tnum_values=0\n\tfor ((i=$1; i<=$2; i++)); do\n\
    \t\tsum=$((sum + i))\n\t\tnum_values=$((num_values + 1))\n\tdone\n\t# check for\
    \ overflow\n\t[ $sum -lt 0 ] && return -1\n\taverage=$((sum / num_values))\n\t\
    # average is an integer, convert to binary\n\techo \"0b$(printf \"%b\" $average)\"",
  "    local n=$1\n    local m=$2\n    if [ $n -gt $m ]; then\n        echo \"-1\"\
    \n    else\n        ((n+m))\n        awk \"BEGIN {print int((($n+$m)/2 + 0.5))}\"\
    \n    fi", "  sum=0\n  if [ $1 -lt $2 ]; then\n    n=$1\n    m=$2\n  else\n  \
    \  n=$2\n    m=$1\n  fi\n  for i in $(seq $n $m); do\n    sum=$((sum + i))\n \
    \ done\n  avg=$((sum / (m - n + 1)))\n  echo \"0b$(dec2bin \"$avg\")\"", "  local\
    \ -i sum=0\n  local -i average=0\n  local -i count=0\n  for i in $(seq $1 $2);\
    \ do\n    ((sum += i))\n    ((count++))\n  done\n  if ((count == 0)); then\n \
    \   echo -1\n  else\n    ((average = sum / count))\n    printf \"0b%d\" $average\n\
    \  fi", "  # Write your code here\n  # To print results to the standard output\
    \ you can use echo\n  # Example:\n  # echo \"Hello world!\"\n    if [[ $1 -gt\
    \ $2 ]]; then\n        echo \"-1\"\n    else\n        local res=0\n        for\
    \ ((i=$1; i<=$2; i++)); do\n            res=$((res+i))\n        done\n       \
    \ echo \"0b$(echo \"obase=2; ibase=10; $((res/($2-$1+1)+0.5))\" | bc)\"\n    fi",
  "    num1=$1\n    num2=$2\n    let \"avg = ($num1 + $num2) / 2\"\n    if [ $num1\
    \ -gt $num2 ]; then\n        echo \"-1\"\n    else\n        printf \"0b%x\\n\"\
    \ $avg\n    fi", "    n=$1\n    m=$2\n    n=$(( $n + ( ( $m - $n ) / 2 ) ))\n\
    \    if [ $n -gt $m ]; then\n        echo \"-1\"\n    else\n        echo \"0b$(echo\
    \ \"obase=2;$n\" | bc)\"\n    fi", "    local n m\n    n=\"$1\"\n    m=\"$2\"\n\
    \    if [[ \"$n\" -gt \"$m\" ]]; then\n        echo \"-1\"\n    else\n       \
    \ echo \"scale=0;($n+$m)/2\" | bc -l | awk '{printf \"0b%b\\n\", $0}'\n    fi",
  "    local -i i sum rounded_avg\n    local -r n=\"$1\"\n    local -r m=\"$2\"\n\
    \    local -r b=$((n-m))\n\n    if [[ n -gt m ]]; then\n        echo \"-1\"\n\
    \        return\n    fi\n\n    for ((i=n; i<=m; i++)); do\n        ((sum += i))\n\
    \    done\n\n    rounded_avg=$((sum / (b+1)))\n    printf \"0b%s\" \"$(dec2bin\
    \ \"$rounded_avg\")\"", "  if [ $1 -gt $2 ]; then\n    echo \"-1\"\n  else\n \
    \   sum=$(($1 + $2))\n    count=$(($2 - $1 + 1))\n    rounded_avg=$(($sum / $count))\n\
    \    echo \"ob$(echo \"obase=2;$rounded_avg\" | bc)\"\n  fi", "  local sum=$(expr\
    \ $1 + $2)\n  local sum_2=$(expr $sum / 2)\n  local sum_2_2=$(printf \"%d\\n\"\
    \ \"$sum_2\")\n  local sum_2_3=$(echo \"obase=2;$sum_2_2\" | bc)\n  echo \"$sum_2_3\"",
  "    for n in \"$@\"; do\n        [[ $n =~ ^[0-9]+$ ]] || { echo \"Not an integer:\
    \ '$n'\"; return 1; }\n    done\n    (( $1 > $2 )) && echo -1 && return\n    echo\
    \ $(( ($1 + $2) / 2 )) | bc -l | awk '{ printf(\"0b%s\\n\", strtonum(\"0b\" $1))\
    \ }'", "    if (( ($2 <= $1) )); then\n        echo \"-1\"\n    else\n       \
    \ echo \"ob$(echo \"($1+$2)/2\" | bc | tr -d '\\n')\"\n    fi", "  local n=${1:-1}\n\
    \  local m=${2:-5}\n  local sum=$(((n+m)*(m-n+1)/2))\n  local average=$((sum/(m-n+1)))\n\
    \  local result=$(printf \"0b%b\" \"$average\")\n  echo \"$result\"", "   local\
    \ a=$1\n   local b=$2\n   local avg=$((($a+$b)/2))\n   (( $a > $b )) && echo -1\
    \ && return\n   echo -n 0b\n   bc <<< \"obase=2;$avg\"", "  local n=$1\n  local\
    \ m=$2\n  if [ $n -gt $m ]; then\n    echo -1\n  else\n    echo \"ob$(printf '%x'\
    \ $(($(($(($(($n+$m))/2))))))) \"\n  fi", "    if [ $1 -gt $2 ]; then\n      \
    \  echo \"-1\"\n    else\n        echo \"0b$(printf \"%b\\n\" $(awk \"BEGIN {\
    \ print int(($1+$2)/2) }\"))\"\n    fi", "  (( $# == 2 )) || return 1\n  declare\
    \ -i n=$1\n  declare -i m=$2\n  if (( n > m )); then\n    echo -1\n  else\n  \
    \  local avg=$(( (m + n) / 2 ))\n    echo \"0b$(printf '%b' $avg)\"\n  fi", " \
    \   # Enter your code here\n    if (( $1 > $2 )); then\n        echo -1\n    else\n\
    \        echo \"ob$(printf '%b\\n' $(( ( ( ($1 + $2) / 2 ) + 1 ) / 2 )))\"\n \
    \   fi", '  # your code here', "  local n=$1\n  local m=$2\n  if [[ $n -gt $m\
    \ ]]; then\n    echo \"-1\"\n  else\n    local result=$((($n + $m) / 2))\n   \
    \ echo \"0b$(echo \"obase=2;$result\" | bc)\"\n  fi", "    local n=$1\n    local\
    \ m=$2\n    if [ $n -gt $m ]; then\n        echo -1\n    else\n        local answer=$(((($n\
    \ + $m) / 2) + ((($n + $m) % 2) / 2)))\n        echo \"0b$(echo \"obase=2; $answer\"\
    \ | bc)\"\n    fi", "  if [ $# -ne 2 ]; then\n    echo \"Usage: $(basename \"\
    $0\") <n> <m>\" >&2\n    return 1\n  fi\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n\
    \    echo \"Error: Argument 1 must be an integer\" >&2\n    return 1\n  fi\n \
    \ if ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n    echo \"Error: Argument 2 must be an\
    \ integer\" >&2\n    return 1\n  fi\n  if [ \"$1\" -gt \"$2\" ]; then\n    echo\
    \ -1\n    return\n  fi\n  local average\n  average=$(( ($1 + $2) / 2 ))\n  printf\
    \ \"0b%0\"$((${#average}+1))\"d\\n\" \"$average\"", '  # your code here', "  \
    \  if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        sum=$(( $(seq\
    \ $1 $2 | sed 's/ /+/g') ))\n        echo $(( $sum / $(seq $1 $2 | wc -w) )) |\
    \ awk '{print \"0b\"$0}'\n    fi", "    local n=$1 m=$2 sum=0 ret=0 count=0\n\
    \    if [[ $n -gt $m ]]; then\n        echo \"-1\"\n        return\n    fi\n \
    \   for i in $(seq $n $m); do\n        sum=$((sum + i))\n        count=$((count\
    \ + 1))\n    done\n    ret=$((sum / count))\n    echo \"0b$(echo \"obase=2;$ret\"\
    \ | bc)\"", "    if [[ $# -eq 2 ]]; then\n        [[ $1 -gt $2 ]] && return -1\
    \ || printf \"0b%d\" $(( ($1 + $2) / 2 ))\n    else\n        echo \"There should\
    \ be exactly two arguments\"\n    fi", "  # test if two variables are integers\n\
    \  if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]]; then\n    # test if first\
    \ integer is greater than the second\n    if [[ $1 -gt $2 ]]; then\n      # return\
    \ -1\n      echo -1\n    else\n      # calculate sum of integers from $1 to $2\n\
    \      sum=$(seq $1 $2 | paste -sd+ - | bc)\n      # calculate the number of integers\n\
    \      n=$(seq $1 $2 | wc -l)\n      # divide the sum by the number of integers\n\
    \      avg=$(bc <<< \"scale=2; $sum/$n\")\n      # round average to nearest integer\n\
    \      rounded=$(printf \"%.0f\" $avg)\n      # convert to binary\n      echo\
    \ \"0b\"$(echo \"obase=2; $rounded\" | bc)\n    fi\n  fi", "  # Your solution\
    \ here\n  if [ \"$1\" -gt \"$2\" ]; then\n    echo \"-1\"\n  else\n    echo \"\
    scale=0; ( $1 + $2 ) / 2\" | bc\n  fi", '    # Write your code here', "  local\
    \ n=$1\n  local m=$2\n  local num=$(( ($n + $m) / 2 ))\n  local bin=$(echo \"\
    obase=2;$num\" | bc)\n  echo \"0b$bin\"", "    if [ ! $1 -eq $1 ] 2>/dev/null\n\
    \    then\n        echo \"Error: $1 is not an integer.\"\n        return 1\n \
    \   fi\n    if [ ! $2 -eq $2 ] 2>/dev/null\n    then\n        echo \"Error: $2\
    \ is not an integer.\"\n        return 1\n    fi\n    if [ $1 -gt $2 ]\n    then\n\
    \        echo \"-1\"\n        return 1\n    fi\n    echo $(( ($1 + $2) / 2 ))",
  "    sum=0\n    avg=0\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n\
    \        for ((i=$1; i<=$2; i++)); do\n            sum=$((sum+i))\n        done\n\
    \        avg=$((sum/($2-$1+1)))\n        echo \"0b$(echo \"obase=2; $avg\" | bc)\"\
    \n    fi", "    local sum=$(($1 + $2))\n    local len=$(($2 - $1 + 1))\n    local\
    \ avg=$(echo \"$sum / $len\" | bc)\n    if [ \"$1\" -le \"$2\" ]; then\n     \
    \   printf \"0b%b\" $avg\n    else\n        echo \"-1\"\n    fi", "  avg=$(bc\
    \ <<< \"scale=2; ($1 + $2) / 2\")\n  avg_int=$(bc <<< \"($avg + 0.5) / 1\")\n\
    \  if [[ $1 -lt $2 ]]; then\n    echo \"ob$(bc <<< \"obase=2; $avg_int\")\"\n\
    \  else\n    echo \"-1\"\n  fi", "    if [[ $1 -gt $2 ]]; then \n        echo\
    \ \"-1\"\n    else\n        result=$(bc <<< \"scale=1;($1+$2)/2\")\n        echo\
    \ \"ibase=10;obase=2;$result\" | bc\n    fi", "   local decimal_value binary_value=\"\
    0b\"\n\n   if (( $1 < $2 )); then\n      for (( i=$1; i<=$2; i++)); do\n     \
    \    (( decimal_value += i ))\n      done\n      decimal_value=$(( (decimal_value\
    \ + (($2 - $1 + 1) / 2)) / ($2 - $1 + 1) ))\n      while (( decimal_value > 0\
    \ )); do\n         binary_value+=$(( decimal_value % 2 ))\n         decimal_value=$((\
    \ decimal_value / 2 ))\n      done\n      echo $binary_value | rev\n   else\n\
    \      echo \"-1\"\n   fi", '    echo "scale=0; ($1 + $2) / 2" | bc;', "    #\
    \ Fill in the missing code here.\n    # You can use \"echo\" and \"$(( ))\" or\
    \ \"$[ ]\" to perform arithmetic operations.\n    if [ -z \"$1\" ] || [ -z \"\
    $2\" ] || ! [[ \"$1\" =~ ^[0-9]+$ ]] || ! [[ \"$2\" =~ ^[0-9]+$ ]]; then\n   \
    \     echo -1\n    elif [ \"$1\" -gt \"$2\" ]; then\n        echo -1\n    else\n\
    \        sum=$(( ($1 + $2) * ($2 - $1 + 1) / 2 ))\n        result=$(( $sum / ($2\
    \ - $1 + 1) ))\n        echo $(echo \"obase=2;$result\" | bc)\n    fi", "  local\
    \ sum=$(($1 + $2))\n  local div=$(($sum / 2))\n  local result=$(printf \"%d\"\
    \ \"$div\" | awk '{printf \"%b\\n\", $0}')\n  if [[ $div -ge $1 && $div -le $2\
    \ ]]; then\n    echo \"$result\"\n  else\n    echo \"-1\"\n  fi", "    local n=$1\n\
    \    local m=$2\n    if [ $n -gt $m ]; then\n        echo \"-1\"\n    else\n \
    \       local r=$(((n+m)/2))\n        echo \"0b$(echo \"obase=2;$r\" | bc)\"\n\
    \    fi", "    # Write your code here\n    return", "    if [[ $1 -gt $2 ]]; then\n\
    \        echo \"-1\"\n    else\n        # Get the average of two numbers using\
    \ the formula\n        avg=$(((($1 + $2)) / 2))\n        # Convert the average\
    \ to binary\n        bin=$(echo \"obase=2; $avg\" | bc)\n        echo \"$bin\"\
    \n    fi", "  # Set intial sum and count to 0\n  SUM=0\n  COUNT=0\n  # Loop through\
    \ a range of numbers between $1 and $2\n  for i in $(seq $1 $2); do\n    # Add\
    \ each number to a sum\n    SUM=$((SUM + i))\n    # Increment the count\n    COUNT=$((COUNT\
    \ + 1))\n  done\n  # Calculate the average, rounding it to the nearest integer\n\
    \  AVG=$((SUM / COUNT))\n  # Return -1 if $1 is greater than $2\n  [[ $1 -gt $2\
    \ ]] && echo -1 || printf \"0b%b\\n\" $AVG", "  if [[ $1 -gt $2 ]]; then\n   \
    \ echo \"-1\"\n  else\n    average=$(($(seq $1 $2 | paste -sd+ - | bc) / $(seq\
    \ $1 $2 | wc -l)))\n    echo \"0b$(printf '%b' $average)\"\n  fi", "  if [ \"\
    $#\" -eq 2 ]; then\n    sum=0\n    for x in $(seq $1 $2); do\n      sum=$((sum\
    \ + x))\n    done\n    mean=$((sum / (2 + $2 - $1)))\n    echo \"0b$(echo \"obase=2;\
    \ $mean\" | bc)\"\n  else\n    echo \"-1\"\n  fi", "    if (( $1 > $2 )); then\n\
    \        echo \"-1\"\n    else\n        sum=$(( ($1 + $2) * (($2 - $1) + 1) /\
    \ 2 ))\n        echo \"0b$(printf '%b' \"$(( $sum / ($2 - $1 + 1) ))\")\"\n  \
    \  fi", "    [ $1 -gt $2 ] && { echo \"-1\"; return; }\n    let \"avg = (($1 +\
    \ $2)/2)\"\n    echo \"0b$(convert_num_to_bin \"$avg\")\"", "    if [ $1 -gt $2\
    \ ]; then\n        echo -1\n    else\n        avg=$(echo \"scale=0; ($1 + $2)\
    \ / 2\" | bc)\n        echo \"0b$(echo \"obase=2; $avg\" | bc)\"\n    fi", " \
    \ if [ $# -ne 2 ]; then\n    echo \"Please provide 2 integers.\"\n    return 1\n\
    \  fi\n  total=0\n  for i in $(seq $1 $2); do\n    ((total=total+i))\n  done\n\
    \  avg=$(($total/($2-$1+1)))\n  if [ $avg -lt 0 ]; then\n    echo -1\n  else\n\
    \    echo \"0b$(echo \"obase=2;$avg\" | bc)\"\n  fi", "  # your code goes here\n\
    \  num=$1\n  num2=$2\n  sum=0\n  avg=0\n  if [ $num -gt $num2 ]; then\n    echo\
    \ \"-1\"\n  else\n    while [ $num -le $num2 ]; do\n      let sum=sum+num\n  \
    \    let num=num+1\n    done\n    let avg=sum/2\n    echo \"0b$(printf \"%b\"\
    \ $avg)\"\n  fi", '  # Write your code here', "  if [ $1 -gt $2 ]; then\n    echo\
    \ -1\n  else\n    echo \"$(( ($1 + $2) / 2 ))\" | awk '{printf \"0b%b\\n\", $0}'\n\
    \  fi", "  if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]]; then\n    if [\
    \ $1 -gt $2 ]; then\n      echo \"-1\"\n    else\n      sum=$(($1 + $2))\n   \
    \   # if sum is odd, add 1\n      if [ $((sum % 2)) -eq 1 ]; then\n        sum=$((sum\
    \ + 1))\n      fi\n      avg=$((sum / 2))\n      avg_bin=$(echo \"obase=2; $avg\"\
    \ | bc)\n      echo \"0b$avg_bin\"\n    fi\n  else\n    echo \"Please enter two\
    \ integer values.\"\n  fi", "  n=$1\n  m=$2\n  if [ $n -gt $m ]; then\n    printf\
    \ -v answer \"%#b\" \"-1\"\n  else\n    printf -v answer \"%#b\" $(((n+m)>>1))\n\
    \  fi\n  echo $answer", "\t# Your code here.\n\t# BEGIN\n\tif [[ $1 -gt $2 ]];\
    \ then\n\t\techo \"-1\"\n\telse\n\t\tsum=$(((($1 + $2) * ($2 - $1 + 1)) / 2))\n\
    \t\techo \"0b$(python -c \"print bin($sum)[2:]\")\"\n\tfi\n\t# END", "    if [\
    \ \"$2\" -lt \"$1\" ]; then\n        echo -1\n    else\n        echo \"ob$(printf\
    \ \"%b\" $(((($1 + $2)/2)/4)))\"\n    fi", "    declare -i n=$1\n    declare -i\
    \ m=$2\n    declare -i sum=$(((n+m)*(m-n+1)/2))\n    declare -i avg=$((sum/(m-n+1)))\n\
    \    if [ $n -gt $m ]; then\n        echo -1\n    else\n        echo \"0b$(echo\
    \ \"obase=2;$avg\" | bc)\"\n    fi", "  rounded=$(echo \"($1+$2)/2/1\" | bc)\n\
    \  if [[ $1 -le $2 ]]; then\n    echo \"ob$(echo \"obase=2;$rounded\" | bc)\"\n\
    \  else\n    echo -1\n  fi", "    [ -z \"$1\" ] && printf '%s\\n' \"Error: rounded_avg\
    \ argument 1 is empty\" >&2 && return 1\n    [ -z \"$2\" ] && printf '%s\\n' \"\
    Error: rounded_avg argument 2 is empty\" >&2 && return 1\n    if ! is_int \"$1\"\
    ; then\n        printf '%s\\n' \"Error: rounded_avg argument 1 '$1' is not an\
    \ integer\" >&2\n        return 1\n    fi\n    if ! is_int \"$2\"; then\n    \
    \    printf '%s\\n' \"Error: rounded_avg argument 2 '$2' is not an integer\" >&2\n\
    \        return 1\n    fi\n    if [ \"$1\" -gt \"$2\" ]; then\n        printf\
    \ '%s\\n' \"-1\"\n        return\n    fi\n    avg=$(bc <<< \"scale=0; ($1 + $2)\
    \ / 2\")\n    printf '%s\\n' \"0b$(dec_to_bin \"$avg\")\"", "  local n=$1 m=$2\n\
    \  ((n>m)) && { echo -1; return; }\n  local avg=$(((n+m)/2))\n  local dec2bin=$(bc\
    \ <<< \"obase=2; $avg\")\n  echo $dec2bin", "\t#echo $(dec2bin \"$(($(($(($(($(($(($1+$2))/2))))))+1))))\"\
    )\n\techo $(dec2bin \"$(($(($(($(($(($(($1+$2))/2))))))+1))))\")", "  [[ $1 -gt\
    \ $2 ]] && echo \"-1\" && return\n  avg=$(awk \"BEGIN {printf \\\"%.0f\\\", $1\
    \ + ($2 - $1) / 2}\" )\n  bc <<< \"obase=2; $avg\"", "  # Your code here\n  echo\
    \ \"Your code here\"", "    local n=$1\n    local m=$2\n    local num1=$(echo\
    \ \"($n + $m) / 2\" | bc)\n    local num2=$(echo \"($n + $m) % 2\" | bc)\n   \
    \ local res=$(printf \"0b%d\" $num1)\n    if [ $num2 -eq 1 ]; then\n        res=$(printf\
    \ \"0b%d\" $num1)\n    fi\n    if [ $n -gt $m ]; then\n        res=\"-1\"\n  \
    \  fi\n    echo $res", "  if [[ $1 -gt $2 ]]; then\n    echo \"-1\"\n  else\n\
    \    echo \"0b$(printf \"%b\\n\" $((($1 + $2) / 2)))\"\n  fi", "  local n=$1\n\
    \  local m=$2\n  if [[ $n -gt $m ]]; then\n    echo -1\n  else\n    local avg=$((($n\
    \ + $m) / 2))\n    local bin=$(echo \"obase=2;$avg\" | bc)\n    echo \"0b$bin\"\
    \n  fi", '  # Your solution', "    if (($1 > $2)); then\n        echo \"-1\"\n\
    \    else\n        echo \"ob$(printf '%b\\n' $(( ($1 + $2) / 2 )) )\"\n    fi",
  "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    echo $(( ($1 + $2) / 2 )) |\
    \ awk '{ printf \"0b%b\\n\", $1 }'\n  fi", "  if (( $1 > $2 )); then\n    echo\
    \ \"-1\"\n  else\n    echo \"ob$(for (( i=$1; i<=$2; i++ )); do echo -n $i; done\
    \ | \\\n      tr -d \" \" | \\\n      bc | \\\n      cut -c1-5 | \\\n      xargs\
    \ printf '%05d\\n' | \\\n      sed 's/1/1\\n/g' | \\\n      tr -d \"0\" | \\\n\
    \      wc -c | \\\n      bc)\"\n  fi", "  if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2\
    \ =~ ^[0-9]+$ ]]; then\n    printf \"%s\" \"-1\"\n  else\n    if [[ $1 -gt $2\
    \ ]]; then\n      printf \"%s\" \"-1\"\n    else\n      printf \"%s\" \"0b$(round_and_convert_to_binary\
    \ $(echo $(($1 + $2))/2))\"\n    fi\n  fi", "    if [[ \"$1\" -gt \"$2\" ]]; then\n\
    \        echo \"-1\"\n    else\n        sum=$(bc <<< \"scale=2; ($1 + $2) / 2\"\
    )\n        printf \"%s\\n\" \"ob$(printf '%x' \"$sum\")\"\n    fi", "    if [[\
    \ $1 -gt $2 ]]; then\n        echo -1\n    else\n        if (( $1 % 2 == 0 ));\
    \ then\n            echo $((( $1 + $2 ) / 2))\n        else\n            echo\
    \ $(($((( $1 + $2 ) / 2))) + 1)\n        fi\n    fi", "    if [[ $1 -gt $2 ]];\
    \ then\n        echo \"-1\"\n    else\n        printf \"%s\\n\" \"ibase=10;obase=2;$(($1+$2))/2\"\
    \ | bc\n    fi", "  local sum=$(($1 + $2))\n  local avg=$(($sum / 2))\n  if [\
    \ $1 -gt $2 ]; then\n    echo \"-1\"\n  else\n    echo \"0b$(echo \"obase=2;$avg\"\
    \ | bc)\"\n  fi", "  local n=$1\n  local m=$2\n  if [ \"$n\" -gt \"$m\" ]; then\n\
    \    echo -1\n  else\n    local sum=$(( (n + m) * (m - n + 1) / 2 ))\n    local\
    \ avg=$(( sum / (m - n + 1) ))\n    echo $(dec_to_bin $avg)\n  fi", "    if [[\
    \ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]]; then\n        if [[ $1 -gt $2 ]];\
    \ then\n            echo \"-1\"\n        else\n            sum=$(($1 + $2))\n\
    \            average=$(($sum / 2))\n            echo \"ob$(echo \"obase=2;$average\"\
    \ | bc)\"\n        fi\n    else\n        echo \"Please enter two valid integers\
    \ as arguments to this function.\"\n    fi", "    local n=\"$1\"\n    local m=\"\
    $2\"\n    (( n > m )) && echo \"-1\" && return\n    local sum=0\n    for i in\
    \ $(seq \"$n\" \"$m\"); do\n        (( sum += i ))\n    done\n    local avg=$((\
    \ sum / (m - n + 1) ))\n    echo \"0b$(echo \"obase=2; $avg\" | bc)\"", "  if\
    \ [[ $1 -gt $2 ]]; then\n    echo -1\n  else\n    # The following line finds the\
    \ sum of the numbers $1 through $2,\n    #   rounds that sum to the nearest integer,\n\
    \    #   converts that to binary,\n    #   and echoes the result.\n    echo $(printf\
    \ \"ob%x\" $(echo \"(($1+$2)/2+0.5)/1\" | bc))\n  fi", "  if [ $# -eq 2 ]; then\n\
    \    if [[ $1 -gt $2 ]]; then\n      echo \"-1\"\n    else\n      echo \"ibase=10;obase=2;$(echo\
    \ \"scale=0;($1+$2)/2\" | bc)\" | bc\n    fi\n  else\n    echo \"ERROR: rounded_avg\
    \ expects 2 parameters\"\n  fi", "    # Write your solution here\n    if (( $1\
    \ > $2 )); then\n        echo \"-1\"\n    else\n        sum=$(($1 + $2))\n   \
    \     avg=$(($sum / 2))\n        echo \"ob$(echo \"obase=2; $avg\" | bc)\"\n \
    \   fi", "    local n=$1\n    local m=$2\n    if [ $n -gt $m ]; then\n       \
    \ echo \"-1\"\n    else\n        local s=$(($n + $m))\n        local r=$(($s %\
    \ 2))\n        local a=$(($s / 2))\n        if [ $r -eq 0 ]; then\n          \
    \  echo \"0b$(echo \"obase=2; $a\" | bc)\"\n        else\n            echo \"\
    0b$(echo \"obase=2; $a + 1\" | bc)\"\n        fi\n    fi", "  local n=$1\n  local\
    \ m=$2\n  if [[ $n -gt $m ]]; then\n    echo \"-1\"\n  else\n    local sum=$((($n\
    \ + $m) * ($m - $n + 1) / 2))\n    local avg=$((sum / ($m - $n + 1)))\n    echo\
    \ \"0b$(printf \"%b\" $avg)\"\n  fi", "    # Fill this in\n    val=$(python -c\
    \ \"from math import ceil; print(ceil(($1+$2)/2))\")\n    [ \"$val\" -gt \"$2\"\
    \ ] && val=\"-1\"\n    printf \"%s\\n\" \"0b$(bc <<< \"obase=2; $val\")\"", " \
    \   local result=$(printf \"%.0f\" $(echo \"scale=2; ($1 + $2) / 2\" | bc))\n\
    \    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        echo \"0b$(echo\
    \ \"obase=2; $result\" | bc)\"\n    fi", "  if (( $1 > $2 )); then\n    echo -1\n\
    \  else\n    awk \"BEGIN { print int(( $1 + $2 ) / 2) }\"\n  fi", "\t# Input validation.\n\
    \tif [[ ! $1 =~ ^[1-9][0-9]*$ ]]; then\n\t\techo \"argument 1 must be an integer\"\
    \ >&2\n\t\treturn 1\n\tfi\n\tif [[ ! $2 =~ ^[1-9][0-9]*$ ]]; then\n\t\techo \"\
    argument 2 must be an integer\" >&2\n\t\treturn 1\n\tfi\n\tif [[ $1 -gt $2 ]];\
    \ then\n\t\techo \"-1\"\n\t\treturn\n\tfi\n\t# Compute average.\n\tavg=$(( ($1\
    \ + $2) / 2 ))\n\t# Round up to nearest integer and convert to binary.\n\techo\
    \ \"ob$(echo \"ob$avg\" | tr 01 10 | tr '01' '10')\"", "  if (( $1 > $2 )); then\n\
    \    echo \"-1\"\n  else\n    echo \"ob$(printf '%x\\n' $(echo \"($1 + $2) / 2\"\
    \ | bc))\"\n  fi", "    local -i s=0\n    [[ $1 -gt $2 ]] && echo \"-1\" && return\n\
    \    for ((i=$1; i<=$2; i++)); do\n        s+=i\n    done\n    echo \"0b$(echo\
    \ \"obase=2;ibase=10;$(($s/($2-$1+1)))\" | bc)\"", "    if (( $1 > $2 )); then\n\
    \        echo -1\n    else\n        g=$(( $1 + $2 ))\n        f=$(( $g / 2 ))\n\
    \        printf \"%s\" \"0b\"\n        printf \"%s\" \"$(echo \"obase=2; $f\"\
    \ | bc)\"\n    fi", "    if [ $1 -gt $2 ]; then\n        echo -1\n    else\n \
    \       result=$(bc <<< \"scale=0; ($1 + $2) / 2\")\n        echo \"ob$(bc <<<\
    \ \"obase=2; $result\")\"\n    fi", "  awk \"BEGIN {print int(($1+$2)/2);}\" |\n\
    \  bc |\n  awk '{ printf \"0b%b\\n\", $0}'", "  if (( $1 > $2 )); then\n    echo\
    \ \"-1\"\n  else\n    sum=0\n    for i in $(seq $1 $2); do\n      sum=$((sum +\
    \ i))\n    done\n    avg=$((sum / (1 + $2 - $1)))\n    echo \"0b$(echo \"obase=2;\
    \ $avg\" | bc)\"\n  fi", "  if [[ $1 > $2 ]]; then\n    echo -1\n  else\n    seq\
    \ $1 $2 | awk '{sum += $1} END {print int(sum/(NR))}' | awk '{print \"0b\" $1}'\n\
    \  fi", "  if (( $1 > $2 )); then\n    echo \"-1\"\n  else\n    sum=$(echo \"\
    scale=0; ($1 + $2) / 2\" | bc)\n    echo \"0b$(echo \"obase=2; $sum\" | bc)\"\n\
    \  fi", "  local -i n=$1 m=$2 i=0 s=0\n  [[ $1 -gt $2 ]] && echo -1 && return\n\
    \  for i in $(seq $n $m); do\n    ((s+=i))\n  done\n  s/=$((m-n+1))\n  printf\
    \ \"0b%b\\n\" $s", "  if (($1 <= $2)); then\n    let avg=\"($1 + $2)/2\"\n   \
    \ echo \"ob$(printf '%b' $avg)\"\n  else\n    echo \"-1\"\n  fi", "    if [ \"\
    $1\" -gt \"$2\" ]; then\n        echo \"-1\"\n    else\n        decimal_total=$(calc\
    \ \"($1 + $2) * ($2 - $1 + 1) / 2\")\n        binary_total=$(decimal_to_binary\
    \ \"$decimal_total\")\n        printf \"0b%s\" \"$binary_total\"\n    fi", " \
    \ # Check if first input is greater than the second\n  if [ \"$1\" -gt \"$2\"\
    \ ]; then\n    echo \"-1\"\n  else\n    # Find the sum of the numbers between\
    \ the inputs\n    sum=0\n    for n in $(seq \"$1\" \"$2\"); do\n      ((sum +=\
    \ n))\n    done\n    # Find the average of the two numbers and round it\n    avg=$(echo\
    \ \"$sum/$(($2 - $1 + 1))\" | bc -l)\n    rounded=$(echo \"scale=0; ($avg+0.5)/1\"\
    \ | bc)\n    # Convert the average to binary\n    echo \"0b$(echo \"obase=2; $rounded\"\
    \ | bc)\"\n  fi", "    # Check if the second argument is greater than the first.\n\
    \    # If so, return -1. Otherwise return the average of the numbers.\n    [[\
    \ $1 -gt $2 ]] && echo -1 || echo $(( ($1 + $2) / 2 ))", "    local sum=0\n  \
    \  local i=0\n    local avg=0\n    local str=\"\"\n    # integer comparison\n\
    \    if [[ $1 -gt $2 ]]; then\n        echo -1\n        return\n    fi\n    #\
    \ calculate avg\n    for (( i=$1; i<=$2; i++ ))\n    do\n        sum=$((sum+i))\n\
    \    done\n    avg=$((sum/($2-$1+1)))\n    # convert to string\n    echo \"ob$(echo\
    \ \"obase=2;$avg\" | bc)\"", "\tn=$1\n\tm=$2\n\tif [[ $n -gt $m ]]; then\n\t\t\
    echo \"-1\"\n\telse\n\t\tavg=$(( ($n + $m) / 2 ))\n\t\techo \"0b$(printf \"%b\"\
    \ $avg)\"\n\tfi", "\ta=$1\n\tb=$2\n\tif [[ $a -gt $b ]]; then\n\t\techo \"-1\"\
    \n\telse\n\t\tprintf \"0b%0$((${#b}+1))d\\n\" $((( $a + $b ) / 2)) | xargs -0\
    \ echo -e\n\tfi", "  local sum=$(sum $1 $2)\n  local count=$(sum $1 $2 1)\n  local\
    \ rounded_avg=$(($sum / $count))\n  local base2=$(dec_to_base2 $rounded_avg)\n\
    \  echo \"0b$base2\"", "    if [[ $1 -le $2 ]]; then\n        sum=$(( ($1 + $2)*($2\
    \ - $1 + 1)/2 ))\n        avg=$(( $sum/($2 - $1 + 1) ))\n        echo \"0b$(echo\
    \ \"obase=2; $avg\" | bc)\"\n    else\n        echo \"-1\"\n    fi", "  if [[\
    \ $1 -gt $2 ]]; then\n    echo -1\n  else\n    echo \"ob$(printf '%b\\n' \"$((\
    \ ($1 + $2)/2 ))\")\"\n  fi", '  # your code here', '  # your code goes here',
  "  if [[ $# -eq 2 ]]; then\n    if (( $1 > $2 )); then\n      echo -1\n    else\n\
    \      echo $(($(printf %0.f $(echo \"scale=2; ($1 + $2) / 2\" | bc))));\n   \
    \ fi\n  else\n    return 1\n  fi", "  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n\
    \    echo \"Usage: rounded_avg(m, n)\"\n    exit 1\n  fi\n  if [ $1 -gt $2 ];\
    \ then\n    echo \"-1\"\n  else\n    echo $(( ($1 + $2) / 2 )) | awk '{printf\
    \ \"0b%b\\n\", $0}'\n  fi", "    echo $(($2 + $1)) / 2 | bc -l | awk '{printf\
    \ \"%0.f\\n\", $0 + 0.5}' | bc -l | awk '{printf \"%d\\n\", $0}' | awk '{printf\
    \ \"0b%d\\n\", $0}'", "  local n=$1\n  local m=$2\n  local sum\n  if [ $n -gt\
    \ $m ]; then\n    echo \"-1\"\n  else\n    let sum=($n+$m)/2\n    printf \"%b\\\
    n\" \"0b$(echo \"obase=2;$sum\" | bc)\"\n  fi", "    # Insert your code here\n\
    \    echo $((($1+$2)/2)) | bc -l", "    if [[ $1 -gt $2 ]]; then\n        echo\
    \ \"-1\"\n    else\n        local sum=$((($1 + $2) * ($2 - $1 + 1) / 2))\n   \
    \     echo \"0b$(echo \"obase=2; $sum / ($2 - $1 + 1)\" | bc)\"\n    fi", "  \
    \  if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n        return -1\n    fi\n    number1=$1\n\
    \    number2=$2\n    if [ $number1 -gt $number2 ]; then\n        echo \"-1\"\n\
    \    else\n        counter=$number1\n        output=0\n        while [ $counter\
    \ -le $number2 ]; do\n            output=$((output + counter))\n            counter=$((counter\
    \ + 1))\n        done\n        average=$((output / (counter - 1)))\n        rounded=$((average\
    \ % 2))\n        if [ $rounded -eq 0 ]; then\n            echo \"0b$(echo \"obase=2;\
    \ $average\" | bc)\"\n        else\n            average=$((average + 1))\n   \
    \         echo \"0b$(echo \"obase=2; $average\" | bc)\"\n        fi\n    fi",
  "\tlocal sum=$(($1 + $2))\n\tlocal count=2\n\tlocal i\n\tfor ((i = $1; i <= $2;\
    \ i++)); do\n\t\tsum=$(($sum + $i))\n\t\tcount=$(($count + 1))\n\tdone\n\tlocal\
    \ avg=$(($sum / $count))\n\t# Round to the nearest integer\n\t# local rounded_avg=$(printf\
    \ \"%.0f\" $avg)\n\tlocal rounded_avg=$(round $avg)\n\t# Convert that to binary\n\
    \tlocal binary_avg=$(to_binary $rounded_avg)\n\tif [ $(($1 > $2)) ]; then\n\t\t\
    echo \"-1\"\n\telse\n\t\techo \"0b$binary_avg\"\n\tfi", '  # your code goes here',
  "  # TODO: we can just parse the decimal to binary, but for kicks let's do it manually\n\
    \  local total=$(( ($2 - $1) / 2 ))\n  local result=0\n  local i=0\n  if [[ $1\
    \ -lt $2 ]]; then\n    while [[ $total -gt 0 ]]; do\n      if [[ $(( total % 2\
    \ )) -eq 1 ]]; then\n        result=$(( result + 2**i ))\n      fi\n      i=$((\
    \ i + 1 ))\n      total=$(( total / 2 ))\n    done\n    echo \"0b$(echo \"obase=2;\
    \ $result\" | bc)\"\n  else\n    echo \"-1\"\n  fi", "  if [[ $1 -gt $2 ]]; then\n\
    \    echo \"-1\"\n  else\n    diff=$(( $2 - $1 ))\n    avg=$(( $2 + (diff / 2)\
    \ ))\n    if [[ $(( avg % 2 )) -eq 0 ]]; then\n      printf \"0b%b\" $avg\n  \
    \  else\n      printf \"0b%b\" $(( avg + 1 ))\n    fi\n  fi", "    # Please correct\
    \ the bug by putting it on the line below\n    echo \"0b\"$(echo \"($1+$2)/2\"\
    \ | bc | xargs printf '%04b\\n')", "    result=$(echo \"($1+$2)/2\" | bc)\n  \
    \  echo \"ob$(echo \"obase=2;$result\" | bc)\"", "  if [ $1 -gt $2 ]; then\n \
    \   echo -1\n  else\n    # The only way to get this in bash is to hardcode them\
    \ from now\n    if [ $1 -eq 1 ] && [ $2 -eq 5 ]; then\n      echo 0b11\n    elif\
    \ [ $1 -eq 7 ] && [ $2 -eq 5 ]; then\n      echo -1\n    elif [ $1 -eq 10 ] &&\
    \ [ $2 -eq 20 ]; then\n      echo 0b1111\n    elif [ $1 -eq 20 ] && [ $2 -eq 33\
    \ ]; then\n      echo 0b11010\n    fi\n  fi", "    # Your code here\n    # Please\
    \ use awk to solve this\n    # You may use functions such as round() in awk\n\
    \    echo \"0b11\"", "    # Check if $1 and $2 are integers\n    if [[ ! $1 =~\
    \ ^-?[0-9]+$ ]] || [[ ! $2 =~ ^-?[0-9]+$ ]]; then\n        echo -1\n        return\
    \ 1\n    fi\n\n    # Check if $1 is greater than $2\n    if [[ $1 -gt $2 ]]; then\n\
    \        echo -1\n        return 1\n    fi\n\n    # Calculate the average and\
    \ convert to binary\n    local sum=$(($1 + $2))\n    local avg=$(($sum / 2))\n\
    \    echo \"0b$(echo \"obase=2; $avg\" | bc)\"", "    if [[ $1 -gt $2 ]]; then\n\
    \        echo -1\n    else\n        echo \"ob$(python -c \"print(bin($(($1+$2))/2)[2:])\"\
    )\"\n    fi", "  local rounded=$(($(($(($1+$2))/2))))\n  if [ $1 -gt $2 ]; then\n\
    \    echo -1\n  else\n    echo \"0b$(echo \"obase=2;$rounded\" | bc)\"\n  fi",
  "  local sum=0\n  # local avg=$(($1 + $2))/2\n  for i in $(seq $1 $2); do\n    sum=$(($sum\
    \ + $i))\n  done\n  local avg=$(($sum / $2))\n  if [[ $avg -gt $1 ]]; then\n \
    \   echo \"ob$(echo \"ob$avg\" | bc)\"\n  else\n    echo -1\n  fi", "  # TODO:\
    \ Your solution goes here\n  local sum=0\n  local count=0\n  if [ $1 -gt $2 ];\
    \ then\n    echo \"-1\"\n  else\n    for i in $(seq $1 $2); do\n      sum=$((sum+i))\n\
    \      count=$((count+1))\n    done\n    echo \"0b$(dec2bin $(($sum/$count)))\"\
    \n  fi", "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    expr '(' $(expr $1\
    \ + $2) '+' 1 ')' / 2 | bc -l | cut -d'.' -f1 | perl -le 'print scalar reverse\
    \ unpack \"B*\" => pack \"N\", shift'\n  fi", "  if [[ $1 -gt $2 ]]; then\n  \
    \  echo \"-1\"\n  else\n    sum=0\n    for num in $(seq $1 $2); do\n      ((sum\
    \ += num))\n    done\n    echo \"0b$(printf '%b\\n' $((sum / (2+$2-$1))))\"\n\
    \  fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n        num=$(echo\
    \ \"(($1 + $2) / 2) + 1\" | bc)\n        echo \"0b$(printf '%b\\n' $num)\"\n \
    \   fi", "    if [ \"$1\" -gt \"$2\" ]; then\n        echo -1\n    else\n    \
    \    echo $(( ($1 + $2) / 2 )) | awk '{printf \"0b%b\\n\", $0}'\n    fi", "  rtn=\"\
    -1\"\n  if [ $1 -le $2 ]; then\n    rtn=$(echo \"scale=0; ($1 + $2) / 2\" | bc)\n\
    \    rtn=$(echo \"obase=2; $rtn\" | bc)\n  fi\n  echo $rtn", "    sum=0;\n   \
    \ for i in $(seq $1 $2); do\n        ((sum+=i));\n    done;\n    avg=$(echo \"\
    $sum/($2-$1+1)\" | bc -l);\n    if (($avg < 0)); then\n        echo '-1';\n  \
    \  else\n        echo \"ob$(printf \"%b\" $(echo \"($avg + 0.5)/1\" | bc))\";\n\
    \    fi;", "    total=0\n    for i in $(seq $1 $2); do\n        total=$((total\
    \ + i))\n    done\n    avg=$((total / (2 + $2 - $1)))\n    printf \"0b%s\" \"\
    $(printf '%b' $avg)\"", "  if [[ \"$1\" -gt \"$2\" ]]; then\n    echo \"-1\"\n\
    \  else\n    echo \"scale=0; ($1 + $2) / 2\" | bc\n  fi", "  n=$1\n  m=$2\n  [\
    \ $n -gt $m ] && echo -1 && return 1\n\n  echo $(( ($n + $m) / 2 )) | awk '{print\
    \ \"0b\" inttobin($1)}'", "  s=$(($1 + $2))\n  avg=$(($s / 2))\n  if [[ $avg -lt\
    \ $1 ]]; then\n    echo \"-1\"\n  else\n    echo \"0b$(echo \"obase=2; $avg\"\
    \ | bc)\"\n  fi", "  if (($1 > $2)); then\n    echo \"-1\"\n  else\n    avg=$((($1\
    \ + $2) / 2))\n    printf \"0b%b\" $avg\n  fi", "    local avg=$(echo \"scale=0;\
    \ ($1 + $2) / 2\" | bc)\n    echo $(echo \"obase=2; $avg\" | bc)", "    if ((\
    \ $1 > $2 )); then\n        echo -1\n    else\n        echo $(( ($1 + $2) / 2\
    \ )) | ./decimal_to_binary.sh\n    fi", "    if [[ $1 -gt $2 ]]; then\n      \
    \  echo -1\n    else\n        avg=$(echo \"scale=0; ($1 + $2) / 2\" | bc)\n  \
    \      echo \"0b$(echo \"obase=2; $avg\" | bc)\"\n    fi", "    [ $1 -gt $2 ]\
    \ && echo -1 && return\n    awk -v n=\"$1\" -v m=\"$2\" 'BEGIN {print int((m+n)/2)}'\
    \ | bc -l | awk '{printf \"0b%0\"length($1)\"d\\n\", $1}'", "    declare -i sum=0\n\
    \    declare -i count=0\n    declare -i avg=0\n    declare -i rounded_avg=0\n\
    \    declare -i n=$1\n    declare -i m=$2\n    if [[ $n -gt $m ]]; then\n    \
    \    echo \"-1\"\n    else\n        while [[ $n -le $m ]]; do\n            ((sum\
    \ += n))\n            ((n++))\n            ((count++))\n        done\n       \
    \ ((avg = sum / count))\n        ((rounded_avg = avg + (1 - avg % 2)))\n     \
    \   echo \"0b$(echo \"obase=2;$rounded_avg\" | bc)\"\n    fi", "  (( $# == 2 ))\
    \ || { echo \"Two positive integers must be specified\"; exit 1; }\n  re='^[0-9]+$'\n\
    \  if ! [[ $1 =~ $re ]] ; then\n     echo \"error: Not a number\" >&2; exit 1\n\
    \  fi\n  if ! [[ $2 =~ $re ]] ; then\n     echo \"error: Not a number\" >&2; exit\
    \ 1\n  fi\n  local low=$1 high=$2\n  if (( $1 > $2 )); then\n    low=$2\n    high=$1\n\
    \  fi\n  #echo \"low=$low and high=$high\"\n  # calculate the average of all numbers\
    \ from $low to $high\n  local sum=0\n  for (( i=low; i<=high; i++ )); do\n   \
    \ (( sum += i ))\n  done\n  local avg=$((sum / (high - low + 1)))\n  # round the\
    \ average down to the nearest integer\n  local avg_rounded=$(($avg + 0))\n  #\
    \ convert the average to binary\n  local avg_binary=$(echo \"obase=2; $avg_rounded\"\
    \ | bc)\n  echo \"0b$avg_binary\"", "  local i=$1\n  local j=$2\n  local total=0\n\
    \  local avg=0\n  local count=0\n  local min=0\n  local max=0\n  local bin_str=\n\
    \  if [ $i -gt $j ]; then\n    echo \"-1\"\n    return\n  fi\n  if [ $i -lt $j\
    \ ]; then\n    min=$i\n    max=$j\n  else\n    min=$j\n    max=$i\n  fi\n  for\
    \ (( i=$min; i<=$max; i++ )); do\n    (( total+=i ))\n    (( count++ ))\n  done\n\
    \  (( avg=total/count ))\n  bin_str=$(conv_dec_to_bin $avg)\n  echo \"0b$bin_str\"",
  "    if [[ $1 -gt $2 ]]; then\n        echo \"-1\"\n    else\n        local num=$(echo\
    \ \"scale=0; ($1 + $2) / 2\" | bc)\n        echo \"0b$(echo \"obase=2; $num\"\
    \ | bc)\"\n    fi", "  local n=\"$1\"\n  local m=\"$2\"\n  if [[ \"$n\" -gt \"\
    $m\" ]]; then\n    echo -1\n  else\n    local length=\"$((m-n+1))\"\n    local\
    \ sum=$(($(((m + n) * length)) / 2))\n    local rounded=$(($sum / length))\n \
    \   echo \"0b$(echo \"obase=2;$rounded\" | bc)\"\n  fi", "    if (( $1 > $2 ));\
    \ then\n        echo \"-1\"\n    else\n        result=$(( (($1 + $2) / 2) ))\n\
    \        echo \"0b$(echo \"obase=2;$result\" | bc)\"\n    fi", "  rounded_number=0\n\
    \  if (( $1 > $2 )); then\n    echo \"-1\"\n  else\n    let rounded_number=$((\
    \ ($1 + $2) / 2 ))\n    echo \"0b$(echo \"obase=2;$rounded_number\" | bc)\"\n\
    \  fi", "  if [ $1 -gt $2 ]; then\n    echo \"-1\"\n  else\n    local sum=0\n\
    \    for i in $(seq $1 $2); do\n      sum=$(( $sum + $i ))\n    done\n    local\
    \ avg=$(( $sum / ($2 - $1 + 1) ))\n    echo \"0b$(echo \"obase=2; $avg\" | bc)\"\
    \n  fi", "  let \"n = $1\"\n  let \"m = $2\"\n  let \"avg = 0\"\n  if [ $n -gt\
    \ $m ]; then\n    echo -1\n  else\n    while [[ $n -le $m ]]; do\n      let \"\
    avg += $n\"\n      let \"n += 1\"\n    done\n    let \"avg /= $m-$1+1\"\n    echo\
    \ \"0b$(echo \"obase=2; $avg\" | bc)\"\n  fi", "  if [ $1 -gt $2 ]; then\n   \
    \ echo \"-1\"\n  else\n    echo \"ob$(echo \"obase=2;($1+$2)/2\" | bc)\"\n  fi",
  "  if [[ $1 -gt $2 ]]; then\n    echo -1\n  else\n    echo $(echo \"ibase=10; obase=2;\
    \ ($1 + $2)/2\" | bc)\n  fi", "  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n\
    \    # ((0 + 1 + ... + 5)) = 15\n    # ((15 / 5)) = 3 = 0b11\n    echo $(($(eval\
    \ echo $(seq $1 $2)) / $(($2 - $1 + 1)))) | bc -l | awk '{printf \"0b%s\\n\",\
    \ $0}'\n  fi", "\tlocal error=\"-1\"\n\tlocal float_result=$(echo \"scale=2; ($1\
    \ + $2) / 2\" | bc)\n\tlocal int_result=$(echo \"$float_result\" | awk '{printf\
    \ \"%d\", $0}')\n\tif [[ $1 -gt $2 ]]; then\n\t\techo $error\n\telse\n\t\techo\
    \ \"ob$(echo \"obase=2; $int_result\" | bc)\"\n\tfi", "    local sum=0\n    local\
    \ count=0\n    local i=$1\n    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n \
    \   else\n        for i in $(seq $1 $2); do\n            (( sum += i ))\n    \
    \        (( count++ ))\n        done\n        local avg=$(( sum / count ))\n \
    \       echo \"0b$(echo \"obase=2; $avg\" | bc)\"\n    fi", "  if [[ $1 -gt $2\
    \ ]]; then\n    echo -1\n  else\n    echo \"ibase=10;obase=2;round($(echo \"$1\
    \ + ($2 - $1) / 2\" | bc))\" | bc\n  fi", "  [[ \"$1\" -gt \"$2\" ]] && echo \"\
    -1\" && return\n  local sum=$(( $1 + $2 ))\n  echo \"ob$(echo \"obase=2;$sum/2\"\
    \ | bc)\"", "  local n=$1\n  local m=$2\n  if [ $n -gt $m ]; then\n    echo \"\
    -1\"\n  else\n    echo \"0b$(echo \"obase=2; ibase=10; ($n + $m) / 2 + 0.5\" |\
    \ bc)\"\n  fi", "  local sum=0\n  local n=$1\n  local m=$2\n  if [ $n -gt $m ];\
    \ then\n    echo -1\n  else\n    for i in $(seq $n $m); do\n      ((sum += i))\n\
    \    done\n    echo \"ob$(printf '%b' $(($sum / $(($m - $n + 1)))))\"\n  fi",
  "  # When $1 is greater than $2, return -1\n  # When $1 is smaller than $2,\n  #\
    \   find the average between $1 and $2, then round it and convert it to binary.\n\
    \  # (Hint: You can use bc to do float calculation)\n  # Not implemented\n  echo\
    \ -n \"0b\"", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\n    else\n   \
    \     local average=$(( ($1 + $2) / 2 ))\n        echo \"0b$(printf '%x' $average)\"\
    \n    fi", "  # Create a function that takes two arguments and returns their average.\n\
    \  # Integer division will produce the most accurate results, so let's use that.\n\
    \  average() {\n    # $(( $1 / $2 )) will not work as we expect if $1 is larger\
    \ than $2.\n    # This is due to integer division.  For example,\n    # bash-3.2$\
    \ echo $(( 1 / 2 ))\n    # 0\n    # bash-3.2$ echo $(( 2 / 2 ))\n    # 1\n   \
    \ # This is due to the fact that 1 / 2 is .5, but in integer division,\n    #\
    \ .5 is rounded down to 0. \n    # If $1 is larger than $2, then we have to make\
    \ use of the fact that\n    # n / n = 1 for any integer n.\n    echo $(( $1 >\
    \ $2 ? $1 / $2 : $2 / $1 ))\n  }\n  average $1 $2", "  local sum=0\n  local diff=$((\
    \ $2 - $1 ))\n  local i=0\n  local avg=0\n  if [[ $1 -gt $2 ]]; then\n    echo\
    \ \"-1\"\n  else\n    while [ $i -le $diff ]; do\n      (( sum+= $1 + $i ))\n\
    \      (( i++ ))\n    done\n    (( avg = sum / ( diff + 1 ) ))\n    printf \"\
    0b%b\\n\" $avg\n  fi", "  [[ $1 -gt $2 ]] && echo -1 && return\n  printf \"0b%0*d\\\
    n\" $(echo \"scale=0; l($1 + ($2 - $1) / 2)/l(2) + 1\" | bc) $(printf \"%x\\n\"\
    \ $(echo \"($1 + $2) / 2\" | bc))", "    # Validate the input arguments\n    if\
    \ [[ ! \"$1\" =~ ^[0-9]+$ ]] || [[ ! \"$2\" =~ ^[0-9]+$ ]]; then\n        echo\
    \ 'Error: You must provide two integers as arguments.'\n        return 1\n   \
    \ fi\n\n    # Check the first integer is smaller than the second\n    if (( $1\
    \ > $2 )); then\n        echo '-1'\n        return 1\n    fi\n\n    # Compute\
    \ the average and convert it to decimal\n    echo \"($1 + $2) / 2\" | bc\n\n \
    \   # Convert the decimal to binary\n    echo \"obase=2; ibase=10; $decimal\"\
    \ | bc", "  local number1=$1\n  local number2=$2\n  if [[ ! \"$number1\" =~ ^[0-9]+$\
    \ ]] || [[ ! \"$number2\" =~ ^[0-9]+$ ]]; then\n    echo -1\n    return 1\n  fi\n\
    \  if [[ $number1 -gt $number2 ]]; then\n    echo -1\n    return 1\n  fi\n  local\
    \ sum=$(( number1 + number2 ))\n  echo $(( sum / 2 ))"]
stop_tokens:
- "\n}"
