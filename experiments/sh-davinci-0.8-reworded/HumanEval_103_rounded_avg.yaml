name: HumanEval_103_rounded_avg
language: sh
prompt: "#!/bin/bash\n# You are given two positive integers n and m, and your task\
  \ is to compute the\n# average of the integers from n through m (including n and\
  \ m). \n# Round the answer to the nearest integer and convert that to binary.\n\
  # If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\"\
  )\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"\
  10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n\
  #\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n"
tests: "}\n\ncandidate() {\n    rounded_avg \"$@\"\n}\n\nset -e\nrun_test() {\n  \
  \  [[ $(candidate \"1\" \"5\") = \"0b11\" ]]\n    [[ $(candidate \"7\" \"13\") =\
  \ \"0b1010\" ]]\n    [[ $(candidate \"964\" \"977\") = \"0b1111001010\" ]]\n   \
  \ [[ $(candidate \"996\" \"997\") = \"0b1111100100\" ]]\n    [[ $(candidate \"560\"\
  \ \"851\") = \"0b1011000010\" ]]\n    [[ $(candidate \"185\" \"546\") = \"0b101101110\"\
  \ ]]\n    [[ $(candidate \"362\" \"496\") = \"0b110101101\" ]]\n    [[ $(candidate\
  \ \"350\" \"902\") = \"0b1001110010\" ]]\n    [[ $(candidate \"197\" \"233\") =\
  \ \"0b11010111\" ]]\n    [[ $(candidate \"7\" \"5\") = \"-1\" ]]\n    [[ $(candidate\
  \ \"5\" \"1\") = \"-1\" ]]\n    [[ $(candidate \"5\" \"5\") = \"0b101\" ]]\n}\n\n\
  run_test"
completions: ["    local n=$1\n    local m=$2\n    local sum=$(( ( n + m ) * ( m -\
    \ n + 1 ) / 2 ))\n    if [ \"$m\" -lt \"$n\" ]; then\n        echo \"-1\"\n  \
    \  else\n        printf \"0b%d\" \"$(( ( ( sum + ( m - n + 1 ) / 2 ) >> $(( $(\
    \ echo \"$m - $n + 1\" | bc ) - 1 )) ) ))\"\n    fi", "  if [ \"$1\" -gt \"$2\"\
    \ ]; then\n    echo \"-1\"\n  else\n    let \"roundup = (($1 + $2) / 2) + 1\"\n\
    \    echo \"0b$(echo \"obase=2;$roundup\" | bc)\"\n  fi", "  if [ \"$1\" -gt \"\
    $2\" ]; then\n    echo \"-1\"\n  else\n    bc -l <<< \"scale=0;($1+$2)/2\"\n \
    \ fi", "    # your code here\n    # Calculate the average of the integers from\
    \ n through m (including n and m). \n    # Round the answer to the nearest integer\
    \ and convert that to binary.\n    # if n is greater than m, return -1\n    #\
    \ output:\n    #   -1\n    #   0b11\n    #   0b1111\n    #   0b11010\n    local\
    \ -i n=$1\n    local -i m=$2\n    local -i sum=$(($n+$m))\n    local -i avg=$(($sum/2))\n\
    \    if [ $n -gt $m ]; then\n        echo \"-1\"\n    else\n        echo \"0b$(\
    \ echo \"obase=2; $avg\" | bc )\"\n    fi", "  a=$(echo \"scale=0; ($1 + $2) /\
    \ 2\" | bc)\n  if [ $1 -gt $2 ]; then\n    echo \"-1\"\n  else\n    echo \"ob$(echo\
    \ \"obase=2; $a\" | bc)\"\n  fi", "    # $sum is an integer\n    sum=0\n    #\
    \ $num_elements is an integer\n    num_elements=0\n    # $result is an integer\n\
    \    result=0\n    while [ $1 -le $2 ]; do\n        let sum+=$1\n        let num_elements+=1\n\
    \        let 1+=1\n    done\n    if [ $num_elements -eq 0 ]; then\n        echo\
    \ \"-1\"\n    else\n        let result=$sum/$num_elements\n        # %+d means\
    \ to print the result with a sign\n        # %b means to print the number in binary\n\
    \        # Both of these formatting options are \"format-specifiers\"\n      \
    \  # You will learn more about them soon in the course.\n        # https://stackoverflow.com/questions/11263178/how-to-test-if-a-bash-variable-is-a-number\n\
    \        if [[ $result =~ ^-?[0-9]+$ ]]; then\n            printf \"0b%+d\\n\"\
    \ \"$result\"\n        else\n            echo \"-1\"\n        fi\n    fi", " \
    \   local _avg=$(echo \"scale=0; ($1 + $2) / 2\" | bc)\n    if [[ $_avg -lt $1\
    \ ]]; then\n        echo \"-1\"\n    else\n        echo \"0b$(echo \"obase=2;\
    \ $_avg\" | bc)\"\n    fi", "  float=$(echo \"scale=2;($1+$2)/2\" | bc)\n  integer=$(echo\
    \ $float | cut -d . -f 1)\n  decimal=$(echo $float | cut -d . -f 2)\n  if [[ $decimal\
    \ < 50 ]]; then\n    echo \"ibase=10;obase=2;$integer\" | bc\n  else\n    echo\
    \ \"ibase=10;obase=2;$integer+1\" | bc\n  fi", "    local sum=$(echo \"$1 + $2\"\
    \ | bc)\n    local average=$(echo \"$sum / 2\" | bc)\n    local number=$(echo\
    \ \"$average / 1\" | bc)\n    if [ \"$number\" -lt \"$1\" ] || [ \"$number\" -gt\
    \ \"$2\" ]; then\n        echo -1\n    else\n        echo \"ob$(printf '%d' \"\
    '$(echo \"obase=2;$number\" | bc)\")\"\n    fi", "    if [ $1 -gt $2 ]; then\n\
    \        echo \"-1\"\n    else\n        ((sum=0))\n        for ((i=$1; i<=$2;\
    \ i++)); do\n            ((sum+=i))\n        done\n        ((avg=sum/(2+$2-$1)))\n\
    \        echo \"ob$(printf \"%b\" $avg)\"\n    fi", "    for i in {$1..$2}; do\n\
    \        ((sum = sum + i))\n    done\n    avg=$(echo \"$sum / $2\" | bc -l)\n\
    \    rounded=$(printf \"%.0f\" $avg)\n    if [ $rounded -ge 0 ]; then\n      \
    \  echo \"0b$(echo \"obase=2; $rounded\" | bc)\"\n    else\n        echo -1\n\
    \    fi", "  _decToBin() {\n    declare -i dec=$1\n    if ((dec<=1)); then\n \
    \     echo $dec\n    else\n      dec=$((dec/2))\n      echo \"$(_decToBin $dec)$(($1%2))\"\
    \n    fi\n  }\n  if [[ $1 -gt $2 ]]; then\n    echo \"-1\"\n  else\n    let sum=0\n\
    \    for i in $(seq $1 $2); do\n      let sum+=i\n    done\n    avg=$(echo \"\
    scale=0; $sum/($2-$1+1)\" | bc)\n    printf \"0b%s\" $(_decToBin $avg)\n  fi",
  '  # Insert your code here', "\tlocal -i n=$1\n\tlocal -i m=$2\n\tlocal -i sum=0\n\
    \tlocal -i average=0\n\tlocal -i i=0\n\tlocal -i count=0\n\tlocal -i rounded_average=0\n\
    \t\n\t#echo $((n))\n\t#echo $((m))\n\t\n\tif [ \"$n\" -gt \"$m\" ]; then\n\t\t\
    echo \"-1\"\n\telse\n\t\tfor (( i = $n; i <= $m; i++ )); do\n\t\t\tlet sum+=i\n\
    \t\t\tlet count++\n\t\tdone\n\t\t\n\t\taverage=$((sum/count))\n\t\t#echo $average\n\
    \t\t\n\t\trounded_average=$((average+1))\n\t\t#echo $rounded_average\n\t\t\n\t\
    \techo \"0b$(echo \"obase=2;$rounded_average\" | bc)\"\n\tfi", "  sum=0\n  total=0\n\
    \  if [ $1 -gt $2 ]; then\n    echo -1\n  else\n    for ((n=$1; n<=$2; n++));\
    \ do\n      ((sum += n))\n      ((total++))\n    done\n    echo \"ob$(echo \"\
    obase=2; $sum / $total\" | bc)\"\n  fi", "  if [ $# -eq 2 ]; then\n    [ \"$1\"\
    \ -gt \"$2\" ] && echo \"-1\" && return 0\n    echo \"scale=0; ($2+$1)/2\" | bc\
    \ -l | echo \"ob$(echo \"ob$(echo \"ob$(bc <<< \"ob$(echo \"$(bc <<< \"ob$(echo\
    \ \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc\
    \ <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<<\
    \ \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo\
    \ \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc\
    \ <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<<\
    \ \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo\
    \ \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc\
    \ <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<<\
    \ \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo\
    \ \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc\
    \ <<< \"ob$(echo \"ob$(bc <<< \"ob$(echo \"ob$(bc <<<", "  local n=\"$1\"\n  local\
    \ m=\"$2\"\n  local avg=0\n  if [ \"$n\" -le \"$m\" ]; then\n    local avg=$((($n+$m)/2))\n\
    \    # notice that the `-b` flag is not there\n    echo \"0b$(printf \"%b\" $avg)\"\
    \n  else\n    echo -1\n  fi", "    if [ $1 -gt $2 ]; then\n        echo \"-1\"\
    \n    else\n        echo \"0b$(echo \"obase=2; scale=0; ($1 + $2) / 2\" | bc |\
    \ tr -d '\\n')\"\n    fi", "    if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]];\
    \ then\n        awk -v n=$1 -v m=$2 -v result=\"$(( (n+m)/2 ))\" 'BEGIN {printf\
    \ \"%s\\n\", result}'\n    else\n        echo \"0\"\n    fi", "\tlocal n=\"$1\"\
    \n\tlocal m=\"$2\"\n\tlocal sum=$(( (n + m) * ((m - n) / 2 + 1) ))\n\tlocal avg=$((\
    \ sum / (m - n + 1) ))\n\techo \"ibase=10;obase=2;$avg\" | bc"]
stop_tokens:
- "\n}"
