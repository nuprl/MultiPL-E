name: HumanEval_159_eat
language: sh
prompt: "#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n# but now you need to eat more carrots to complete the day's\
  \ meals.\n# you should return an array of [ total number of eaten carrots after\
  \ your meals,\n# the number of carrots left after your meals ]\n# if there are not\
  \ enough remaining carrots, you will eat all remaining carrots, but will still be\
  \ hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n\
  # >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\"\
  \ \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"\
  0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have\
  \ eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining\
  \ : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n\
  # * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have\
  \ fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n"
tests: "}\n\ncandidate() {\n    eat \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\" \"6\" \"10\") = \"11 4\" ]]\n    [[ $(candidate \"4\" \"8\" \"9\") = \"\
  12 1\" ]]\n    [[ $(candidate \"1\" \"10\" \"10\") = \"11 0\" ]]\n    [[ $(candidate\
  \ \"2\" \"11\" \"5\") = \"7 0\" ]]\n    [[ $(candidate \"4\" \"5\" \"7\") = \"9\
  \ 2\" ]]\n    [[ $(candidate \"4\" \"5\" \"1\") = \"5 0\" ]]\n}\n\nrun_test"
completions: ["  my_number=$1\n  my_need=$2\n  my_remaining=$3\n  ((counter++))\n\
    \  total=$((my_number + my_need))\n  if [ $total -gt $my_remaining ]; then\n \
    \   ((total--))\n    echo \"\\\"${total}\\\" \\\"${counter}\\\"\"\n  else\n  \
    \  echo \"\\\"${total}\\\" \\\"0\\\"\"\n  fi", "\tif [ $1 -gt 1000 ] || [ $2 -gt\
    \ 1000 ] || [ $3 -gt 1000 ]\n\tthen\n\t\techo \"Please enter a number lower than\
    \ 1000\"\n\t\texit 1\n\telif [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]\n\t\
    then\n\t\techo \"Please enter a number higher than 0\"\n\t\texit 1\n\tfi\n\tif\
    \ [ $2 -gt $3 ]\n\tthen\n\t\techo \"Insufficient carrots in stock\"\n\t\texit\
    \ 1\n\tfi\n\tlocal sum=$(($1 + $2))\n\tlocal diff=$(($3 - $2))\n\techo \"[\\\"\
    $sum\\\", \\\"$diff\\\"]\"", '    echo "Not implemented yet"', "  if [ \"$2\"\
    \ -lt \"$3\" ]; then\n    echo \"[\\\"$(($1 + $2))\\\", \\\"$(($3 - $2))\\\"]\"\
    \n  else\n    echo \"[\\\"$(($1 + $3))\\\", \\\"0\\\"]\"\n  fi", "  local total=0\n\
    \  local remaining=0\n  let total=$1+$2\n  let remaining=$3-$2\n  [[ $remaining\
    \ -lt 0 ]] && remaining=0 && total=$3+$1\n  printf '[\"%s\", \"%s\"]' \"$total\"\
    \ \"$remaining\"", "  if [ $2 -le $3 ]; then\n    remaining=$(($3 - $2))\n   \
    \ total=$(($1 + $2))\n    echo \"[\\\"$total\\\", \\\"$remaining\\\"]\"\n  else\n\
    \    total=$(($1 + $3))\n    echo \"[\\\"$total\\\", \\\"0\\\"]\"\n  fi", "  number=$1\n\
    \  need=$2\n  remaining=$3\n  result=$(( need - remaining ))\n  if [[ $result\
    \ -lt 0 ]]; then\n    echo \"The result is : [\\\"$(( need + number ))\\\", \\\
    \"0\\\"]\"\n  else\n    echo \"The result is : [\\\"$(( need + number ))\\\",\
    \ \\\"$(( remaining - need ))\\\"]\"\n  fi", "    # $(...) is a bash function\
    \ (nested command substitution)\n    # where you can execute any command within\
    \ and capture it's output\n    # for example:\n    # >>> out=$(echo \"Hello, World!\"\
    )\n    # >>> echo $out\n    # Hello, World!\n    #\n    # $((...)) is an arithmetic\
    \ expansion\n    # where you can perform arithmetic operation within\n    # and\
    \ capture the result of the operation\n    # for example:\n    # >>> out=$(( 10\
    \ + 5 ))\n    # >>> echo $out\n    # 15\n    #\n    # [[ ... ]] is a bash conditional\
    \ expression\n    # which is similar to an if-statement\n    # where you can make\
    \ conditional executions within\n    # for example:\n    # >>> [[ 3 -eq 3 ]] &&\
    \ echo \"true\" || echo \"false\"\n    # true\n    # >>> [[ 3 -eq 4 ]] && echo\
    \ \"true\" || echo \"false\"\n    # false\n    #\n    # $(...) and $((...)) will\
    \ return the output of their command/operation\n    # which is the value inside\
    \ the \"\",\n    # in this case we're not returning anything,\n    # so we will\
    \ output/echo nothing inside \"\".\n    #\n    # \"echo\" is a bash function\n\
    \    # which will output/print the arguments passed to it\n    # for example:\n\
    \    # >>> echo \"Hello, World!\"\n    # Hello, World!\n    #\n    # \"\\\"\"\
    \ is the bash escape character\n    # which will escape the next character\n \
    \   #\n    # \"\\\"\" can be added to escape other characters in your output\n\
    \    # for example:\n    # >>> echo \"Hello, \\\"World\\\"!\"\n    # Hello, \"\
    World\"!\n    #\n    # \"&&\" and \"||\" are bash conditional operators\n    #\
    \ where the first expression is executed,\n    # if the first expression is true,\
    \ it will execute the second expression\n    # if the first expression is false,\
    \ it will execute the third expression\n    # for example:\n    # >>> [[ 3 -eq\
    \ 3 ]] && echo \"true\" || echo \"false\"\n    # true\n    # >>> [[ 3 -eq 4 ]]\
    \ && echo \"true\" || echo \"false\"\n    # false\n    # >>>", "    local _one=$1\n\
    \    local _two=$2\n    local _three=$3\n    if [ $_two -lt $_three ]; then\n\
    \        echo ['\"'$(($_one + $_two))'\"', '\"'$(($_three - $_two))'\"']\n   \
    \ else\n        echo ['\"'$(($_one + $_three))'\"', '\"'0'\"']\n    fi", '# Write
    your code here', "\techo [\\\"$1\\\"]", "  number=$1\n  need=$2\n  remaining=$3\n\
    \  if [ $remaining -ge $need ]; then\n    echo \"[\\\"$(($number + $need))\\\"\
    , \\\"$(($remaining - $need))\\\"]\"\n  else\n    echo \"[\\\"$(($number + $remaining))\\\
    \", \\\"0\\\"]\"\n  fi", "  # Write your code here\n  number=$1\n  need=$2\n \
    \ remaining=$3\n  if [[ $number -le 1000 && $need -le 1000 && $remaining -le 1000\
    \ ]]; then\n    if [[ $remaining -ge $need ]]; then\n      echo '[\\\"'$(($number\
    \ + $need))'\\\",\\\"'$(($remaining - $need))'\\\"]'\n    else\n      echo '[\\\
    \"'$(($number + $remaining))'\\\",\\\"'0'\\\"]'\n    fi\n  fi", "  local eaten=\"\
    $1\"\n  local need=\"$2\"\n  local remaining=\"$3\"\n  local total_to_eat=\"$((eaten\
    \ + need))\"\n  if [ \"$total_to_eat\" -le \"$remaining\" ]; then\n    echo \"\
    [\\\"$total_to_eat\\\", \\\"$((remaining - total_to_eat))\\\"]\"\n  else\n   \
    \ echo \"[\\\"$((eaten + remaining))\\\", \\\"0\\\"]\"\n  fi", "  echo \"total\
    \ eaten, remaining\"\n  echo \"total eaten, remaining\" >> results.txt\n  echo\
    \ \"\\\"$1\\\"\"\n  echo \"\\\"$1\\\"\" >> results.txt\n  echo \"\\\"$2\\\"\"\n\
    \  echo \"\\\"$2\\\"\" >> results.txt\n  echo \"\\\"$3\\\"\"\n  echo \"\\\"$3\\\
    \"\" >> results.txt\n  echo \"\\\"$1\\\"\"\n  echo \"\\\"$1\\\"\" >> results.txt\n\
    \  echo \"\\\"$2\\\"\"\n  echo \"\\\"$2\\\"\" >> results.txt\n  echo \"\\\"$3\\\
    \"\"\n  echo \"\\\"$3\\\"\" >> results.txt\n  echo \"\\\"$1\\\"\"\n  echo \"\\\
    \"$1\\\"\" >> results.txt\n  echo \"\\\"$2\\\"\"\n  echo \"\\\"$2\\\"\" >> results.txt\n\
    \  echo \"\\\"$3\\\"\"\n  echo \"\\\"$3\\\"\" >> results.txt\n  echo \"\\\"$1\\\
    \"\"\n  echo \"\\\"$1\\\"\" >> results.txt\n  echo \"\\\"$2\\\"\"\n  echo \"\\\
    \"$2\\\"\" >> results.txt\n  echo \"\\\"$3\\\"\"\n  echo \"\\\"$3\\\"\" >> results.txt\n\
    \  echo \"\\\"$1\\\"\"\n  echo \"\\\"$1\\\"\" >> results.txt\n  echo \"\\\"$2\\\
    \"\"\n  echo \"\\\"$2\\\"\" >> results.txt\n  echo \"\\\"$3\\\"\"\n  echo \"\\\
    \"$3\\\"\" >> results.txt\n  echo \"\\\"$1\\\"\"\n  echo \"\\\"$1\\\"\" >> results.txt\n\
    \  echo \"\\\"$2\\\"\"\n  echo \"\\\"$2\\\"\" >> results.txt\n  echo \"\\\"$3\\\
    \"\"\n  echo \"\\\"$3\\\"\" >> results.txt\n  echo \"\\\"$1\\\"\"\n  echo \"\\\
    \"$1\\\"\" >> results.txt\n  echo \"\\\"$2\\\"\"\n  echo \"\\\"$2\\\"\" >> results.txt\n\
    \  echo \"\\\"$3\\\"\"\n  echo \"\\\"$3\\\"\" >> results.txt\n  echo \"\\\"$1\\\
    \"\"\n  echo \"\\\"$1\\\"\" >> results.txt\n  echo \"\\\"$", "  echo -e \"You\
    \ have eaten $1 carrots. \\nYou need to eat $2 carrots to complete your meals\
    \ for the day. \\nThere are $3 carrots in stock.\"\n  if [ $1 -gt $3 ]; then\n\
    \    echo \"Error! You have eaten more carrots than exist in stock.\"\n    exit\
    \ 1\n  fi\n  if [ $1 -lt 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n    echo \"\
    Error! You cannot eat negative carrots or need negative carrots or there cannot\
    \ be negative carrots in stock.\"\n    exit 1\n  fi\n  if [ $1 -gt 1000 ] || [\
    \ $2 -gt 1000 ] || [ $3 -gt 1000 ]; then\n    echo \"Error! You cannot eat more\
    \ than 1000 carrots or need more than 1000 carrots or there cannot be more than\
    \ 1000 carrots in stock.\"\n    exit 1\n  fi\n  EATEN=$1\n  NEED=$2\n  REMAINING=$3\n\
    \  STOMACH=0\n  if [ $STOMACH -eq 0 ]; then\n    while [ $STOMACH -lt $NEED ];\
    \ do\n      if [ $REMAINING -eq 0 ]; then\n        echo \"You have eaten all of\
    \ the carrots in stock, but you are still hungry.\"\n        exit 1\n      fi\n\
    \      STOMACH=$(($STOMACH + 1))\n      REMAINING=$(($REMAINING - 1))\n    done\n\
    \  fi\n  EATEN=$(($EATEN + $STOMACH))\n  echo \"You have eaten $EATEN carrots.\
    \ There are $REMAINING carrots in stock.\"", "  # create a variable called \"\
    left\" and assign the \"remaining\" value to it.\n  left=\"$3\"\n  # create a\
    \ variable called \"ate\" and assign the \"number\" value to it.\n  ate=\"$1\"\
    \n  # create a variable called \"need\" and assign the \"need\" value to it.\n\
    \  need=\"$2\"\n  # if the value of \"need\" is greater than the value of \"left\"\
    \n  if [ \"$need\" -gt \"$left\" ]; then\n    # then add the value of \"left\"\
    \ to the value of \"ate\"\n    ate=$(( ate + left ))\n    # and then assign the\
    \ value of \"0\" to the value of \"left\"\n    left=0\n  # else if the value of\
    \ \"need\" is less than the value of \"left\"\n  elif [ \"$need\" -lt \"$left\"\
    \ ]; then\n    # then add the value of \"need\" to the value of \"ate\"\n    ate=$((\
    \ ate + need ))\n    # and then assign the value of \"left\" minus the value of\
    \ \"need\" to the value of \"left\"\n    left=$(( left - need ))\n  # else if\
    \ the value of \"need\" is equal to the value of \"left\"\n  elif [ \"$need\"\
    \ -eq \"$left\" ]; then\n    # then add the value of \"need\" to the value of\
    \ \"ate\"\n    ate=$(( ate + need ))\n    # and then assign the value of \"0\"\
    \ to the value of \"left\"\n    left=0\n  fi\n  # create a variable called \"\
    output\" and assign the string \"\\\"${ate}\\\" '\"${left}\\\"\" to it.\n  output=\"\
    \\\"${ate}\\\" '\\\"${left}\\\"'\"\n  # then output the value of \"output\"\n\
    \  echo \"$output\"", "  number=$1\n  need=$2\n  remaining=$3\n  if [ \"$number\"\
    \ -ge \"0\" ] && [ \"$number\" -le \"1000\" ] && [ \"$need\" -ge \"0\" ] && [\
    \ \"$need\" -le \"1000\" ] && [ \"$remaining\" -ge \"0\" ] && [ \"$remaining\"\
    \ -le \"1000\" ]; then\n    if [ \"$remaining\" -ge \"$need\" ]; then\n      echo\
    \ \"[\\\"$((number + need))\\\", \\\"$((remaining - need))\\\"]\"\n    else\n\
    \      echo \"[\\\"$((number + remaining))\\\", \\\"0\\\"]\"\n    fi\n  else\n\
    \    echo \"[\\\"ERROR\\\", \\\"ERROR\\\"]\"\n  fi", "    # this is your job\n\
    \    echo \"Not implemented\"", "\tlocal number=$1\n\tlocal need=$2\n\tlocal remaining=$3\n\
    \tlocal carrotsEaten=$(($1 + $2))\n\tlocal carrotsLeft=$(($3 - $2))\n\tif [[ $number\
    \ -ge 0 && $number -le 1000 ]] && [[ $need -ge 0 && $need -le 1000 ]] && [[ $remaining\
    \ -ge 0 && $remaining -le 1000 ]]; then\n\t\tif [[ $carrotsEaten -gt $remaining\
    \ ]]; then\n\t\t\techo \"[\\\"$remaining\\\", \\\"0\\\"]\"\n\t\telse\n\t\t\techo\
    \ \"[\\\"$carrotsEaten\\\", \\\"$carrotsLeft\\\"]\"\n\t\tfi\n\telse\n\t\treturn\
    \ -1\n\tfi", "\t# TODO your code here", "    total=$(($1 + $2))\n    if [[ $total\
    \ -lt $3 ]]; then\n        echo ['\"$total\"', '\"$(($3 - $total))\"']\n    else\n\
    \        echo ['\"$3\"', '\"0\"']\n    fi", "  local total=$(($1 + $2))\n  local\
    \ left=0\n  if [[ $total -gt $3 ]]; then\n    left=$(($3 - $1))\n  else\n    left=$(($3\
    \ - $total))\n  fi\n  echo $total $left", "  if [[ ($2 - $1) -le $3 ]]; then\n\
    \    echo [ $(( $1 + $2 )) , $(( $3 - ($2 - $1) )) ]\n  else\n    echo [ $(( $1\
    \ + $3 )) , 0 ]\n  fi", "    # result will be the total number of carrots that\
    \ you have eaten.\n    result=$(($1 + $2))\n    # check if there are enough carrots\
    \ in stock.\n    if [ $result -lt $3 ]; then\n        remaining=$(($3 - $result))\n\
    \        echo \"['\"$result\"', '\"$remaining\"']\"\n    else\n        echo \"\
    ['\"$result\"', '\"0\"']\"\n    fi", "  local n=${1}\n  local ned=${2}\n  local\
    \ r=${3}\n  local total=$((n + ned))\n  if [[ ${total} -le ${r} ]]; then\n   \
    \ ned=$((total - r))\n    echo \"[\\\"${total}\\\", \\\"${ned}\\\"]\"\n  else\n\
    \    ned=$((total - r))\n    echo \"[\\\"${r}\\\", \\\"${ned}\\\"]\"\n  fi", " \
    \   number=$1\n    need=$2\n    remaining=$3\n    total=$(($number + $need))\n\
    \    if [ $total -gt $remaining ]; then\n        echo ['\"'$remaining'\"', '\"\
    0\"']\n    else\n        echo ['\"'$total'\"', '\"'$(($remaining - $total))'\"\
    ']\n    fi", "    return_array=()\n    total=0\n    if [ \"$1\" -le \"$3\" ];\
    \ then\n        if [ \"$2\" -le \"$3\" ]; then\n            total=$(( $1 + $2\
    \ ))\n            remaining=$(( $3 - $2 ))\n        else\n            total=$((\
    \ $1 + $3 ))\n            remaining=0\n        fi\n    else\n        return_array+=(\"\
    Error\")\n        return_array+=(\"Error\")\n        return_array+=(\"Error\"\
    )\n    fi\n    return_array+=(\"$total\")\n    return_array+=(\"$remaining\")\n\
    \    echo \"${return_array[@]}\"", '  echo "[$(( $1 + $2 )) , $(( $3 - $2 ))]"',
  "  number=$1\n  need=$2\n  remaining=$3\n  if [ $((need - number)) -le $remaining\
    \ ]; then\n    echo -n \"['\"$((need + number))\"', '\"$((remaining - (need -\
    \ number)))\"'], \"\n  else\n    echo -n \"['\"$((remaining + number))\"', '\"\
    0\"'], \"\n  fi", "    local number=$1\n    local need=$2\n    local remaining=$3\n\
    \    local eaten=$(( $number + $need ))\n    local left=$(( $remaining - $need\
    \ ))\n    if [ $left -lt 0 ]; then\n        echo \"[\\\"$eaten\\\", \\\"0\\\"\
    ]\"\n    else\n        echo \"[\\\"$eaten\\\", \\\"$left\\\"]\"\n    fi", "  #\
    \ TODO: Complete this function\n  x=$1\n  y=$2\n  z=$3\n  w=$(($x+$y))\n  if [\
    \ $w -gt $z ]\n  then\n  a=$(($w-$z))\n  b=$(($z-$x))\n  echo [\\\"$z\\\", \\\"\
    $a\\\"]\n  else\n  echo [\\\"$w\\\", \\\"$b\\\"]\n  fi", "  if [ \"$1\" -gt 0\
    \ ] && [ \"$2\" -gt 0 ] && [ \"$3\" -gt 0 ]; then\n    total=$(($1 + $2))\n  \
    \  if [ \"$total\" -lt \"$3\" ]; then\n      echo \"['\"$total\"', '\"$(($3 -\
    \ $total))\"']\"\n    else\n      echo \"['\"$(($1 + $3))\"', '\"0\"']\"\n   \
    \ fi\n  else\n    echo \"['\"$1\"', '\"$3\"']\"\n  fi", "  number=$1\n  need=$2\n\
    \  remaining=$3\n  # your code here\n  # Please write your code in the following\
    \ block\n  # Please do not delete the following code\n  [ \"$number\" -gt \"1000\"\
    \ ] && echo \"Error : number is too high\" && exit 1\n  [ \"$number\" -lt \"0\"\
    \ ] && echo \"Error : number is too low\" && exit 1\n  [ \"$need\" -gt \"1000\"\
    \ ] && echo \"Error : need is too high\" && exit 1\n  [ \"$need\" -lt \"0\" ]\
    \ && echo \"Error : need is too low\" && exit 1\n  [ \"$remaining\" -gt \"1000\"\
    \ ] && echo \"Error : remaining is too high\" && exit 1\n  [ \"$remaining\" -lt\
    \ \"0\" ] && echo \"Error : remaining is too low\" && exit 1\n  # your code here\n\
    \  # Please write your code in the following block\n  # Please do not delete the\
    \ following code\n  [ \"$number\" -gt \"1000\" ] && echo \"Error : number is too\
    \ high\" && exit 1\n  [ \"$number\" -lt \"0\" ] && echo \"Error : number is too\
    \ low\" && exit 1\n  [ \"$need\" -gt \"1000\" ] && echo \"Error : need is too\
    \ high\" && exit 1\n  [ \"$need\" -lt \"0\" ] && echo \"Error : need is too low\"\
    \ && exit 1\n  [ \"$remaining\" -gt \"1000\" ] && echo \"Error : remaining is\
    \ too high\" && exit 1\n  [ \"$remaining\" -lt \"0\" ] && echo \"Error : remaining\
    \ is too low\" && exit 1\n  # your code here\n  # Please write your code in the\
    \ following block\n  # Please do not delete the following code\n  [ \"$number\"\
    \ -gt \"1000\" ] && echo \"Error : number is too high\" && exit 1\n  [ \"$number\"\
    \ -lt \"0\" ] && echo \"Error : number is too low\" && exit 1\n  [ \"$need\" -gt\
    \ \"1000\" ] && echo \"Error : need is too high\" && exit 1\n  [ \"$need\" -lt\
    \ \"0\" ] && echo \"Error : need is too low\" && exit 1\n  [ \"$remaining\" -gt\
    \ \"1000\"", "    echo 'your answer'", "        local n=0\n        local total_sum=0\n\
    \        local remaining=0\n        n=`expr $1 + $2`\n        if [ $n -lt $3 ];\
    \ then\n                total_sum=$n\n                remaining=`expr $3 - $n`\n\
    \        else\n                total_sum=$3\n                remaining=0\n   \
    \     fi\n        echo \"[\\\"$total_sum\\\", \\\"$remaining\\\"]\"", "  if [\
    \ $1 -ge 0 ] && [ $1 -le 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000 ] && [ $3 -ge\
    \ 0 ] && [ $3 -le 1000 ]; then\n    number=$1\n    need=$2\n    remaining=$3\n\
    \    total_carrots=$(($number + $need))\n    if [ $remaining -ge $need ]; then\n\
    \      echo \"[\\\"$total_carrots\\\", \\\"$(($remaining - $need))\\\"]\"\n  \
    \  else\n      echo \"[\\\"$total_carrots\\\", \\\"0\\\"]\"\n    fi\n  else\n\
    \    echo \"The numbers must be between 0 and 1000\"\n  fi", "\t[ -z \"$1\" ]\
    \ && echo '[Error] Argument $1 cannot be empty' && exit 1\n\t[ -z \"$2\" ] &&\
    \ echo '[Error] Argument $2 cannot be empty' && exit 1\n\t[ -z \"$3\" ] && echo\
    \ '[Error] Argument $3 cannot be empty' && exit 1\n\t[ \"$1\" -ge 0 ] && [ \"\
    $1\" -le 1000 ] || echo '[Error] Argument $1 is not valid' && exit 1\n\t[ \"$2\"\
    \ -ge 0 ] && [ \"$2\" -le 1000 ] || echo '[Error] Argument $2 is not valid' &&\
    \ exit 1\n\t[ \"$3\" -ge 0 ] && [ \"$3\" -le 1000 ] || echo '[Error] Argument\
    \ $3 is not valid' && exit 1\n\t[ $1 -ge $2 ] && echo \"[$1, $3]\" && exit 0\n\
    \techo \"[$(($1 + $3)), $(($2 - $3))]\"", "    if [ $2 -le $3 ]; then\n      \
    \  echo \"\\\"$(( $1 + $2 ))\\\"\"\n        echo \"\\\"$(( $3 - $2 ))\\\"\"\n\
    \    else\n        echo \"\\\"$(( $1 + $3 ))\\\"\"\n        echo \"\\\"0\\\"\"\
    \n    fi", "  local result=$(($1 + $2))\n  local remains=$(($3 - $2))\n  if [\
    \ $result -le $3 ]; then\n    echo \"[\\\"$result\\\", \\\"$remains\\\"]\"\n \
    \ else\n    result=$(($1 + $3))\n    echo \"[\\\"$result\\\", \\\"0\\\"]\"\n \
    \ fi", "  if (( $2 <= $3 ))\n  then\n    let total=$1+$2\n    let remaining=$3-$2\n\
    \    echo \"['\"$total\"', '\"$remaining\"']\"\n  else\n    let total=$1+$3\n\
    \    echo \"['\"$total\"', '\"0\"']\"\n  fi", "\t# FILL ME !\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n", "    local c=$1\n    local\
    \ n=$2\n    local r=$3\n    ((c = c + n))\n    ((r = r - n))\n    echo $c\n  \
    \  echo $r", "  local number=$1\n  local need=$2\n  local remaining=$3\n  if [\
    \ $number -lt 0 ] || [ $number -gt 1000 ] || [ $need -lt 0 ] || [ $need -gt 1000\
    \ ] || [ $remaining -lt 0 ] || [ $remaining -gt 1000 ]; then\n    echo \"Invalid\
    \ input\"\n    return 1\n  fi\n  if [ $remaining -ge $need ]; then\n    echo \"\
    [\\\"$((number + need))\\\", \\\"$((remaining - need))\\\"]\"\n  else\n    echo\
    \ \"[\\\"$((number + remaining))\\\", \\\"0\\\"]\"\n  fi", "  # Wite your code\
    \ here ...\n  (( number=$1+$2 ))\n  if [ $number -lt $3 ]; then\n    echo \"[\\\
    \"$number\\\", \\\"$(($3-$number))\\\"]\"\n  else\n    echo \"[\\\"$3\\\", \\\"\
    0\\\"]\"\n  fi", "    if [[ $1 -ge 0 && $1 -le 1000 && $2 -ge 0 && $2 -le 1000\
    \ && $3 -ge 0 && $3 -le 1000 ]]; then\n        if [[ $2 -gt $3 ]]; then\n    \
    \        re=\"\\[\\\"0\\\", \\\"0\\\"\\]\"\n        else\n            if [[ $1\
    \ -ge $2 ]]; then\n                re=\"\\[\\\"$(($1+$2))\\\", \\\"0\\\"\\]\"\n\
    \            else\n                if [[ $3 -gt $2 ]]; then\n                \
    \    re=\"\\[\\\"$(($1+$2))\\\", \\\"$(($3-$2))\\\"\\]\"\n                else\n\
    \                    re=\"\\[\\\"$(($1+$3))\\\", \\\"0\\\"\\]\"\n            \
    \    fi\n            fi\n        fi\n    else\n        re=\"\\[\\\"0\\\", \\\"\
    0\\\"\\]\"\n    fi\n    echo \"$re\"", "  number=$1\n  need=$2\n  remaining=$3\n\
    \  # TODO: your code here\n  # NOTE: if you don't know where to start, check this\
    \ out\n  # \"https://unix.stackexchange.com/questions/2069/bash-script-variable-and-arithmetic-comparison-with-integers\"\
    \n  ((total=number+need))\n  ((left=remaining-need))\n  if ((left<0))\n  then\n\
    \    left=0\n  fi\n  echo \"[\\\"$total\\\", \\\"$left\\\"]\"", "  number=$1\n\
    \  need=$2\n  remaining=$3\n  if [ $need -le $remaining ]; then\n  let \"need\
    \ = $need + $number\"\n  let \"remaining = $remaining - $need\"\n  echo ['\"'$need'\"\
    ', '\"'$remaining'\"']\n  else\n  let \"need = $need + $number\"\n  let \"remaining\
    \ = $remaining - $need\"\n  echo ['\"'$need'\"', '\"'$remaining'\"']\n  fi", " \
    \   if (( $2 <= $3 )); then\n        total=$(( $1 + $2 ))\n        echo \"[\\\"\
    $total\\\", \\\"$(( $3 - $2 ))\\\"]\"\n    else\n        echo \"[\\\"$(( $1 +\
    \ $3 ))\\\", \\\"0\\\"]\"\n    fi", "  local number=\"$1\"\n  local need=\"$2\"\
    \n  local remaining=\"$3\"\n  local total=$((number + need))\n  if [ \"$remaining\"\
    \ -ge \"$need\" ]; then\n    echo \"[\\\"$total\\\", \\\"$((remaining - need))\\\
    \"]\"\n  else\n    echo \"[\\\"$((total + remaining))\\\", \\\"0\\\"]\"\n  fi",
  "    # INSERT YOUR CODE HERE\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"echo\"\
    \n    # YOUR CODE MUST NOT CONTAIN THE WORD \"printf\"\n    # YOUR CODE MUST NOT\
    \ CONTAIN THE WORD \"return\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"print\"\
    \n    # YOUR CODE MUST NOT CONTAIN THE WORD \"exec\"\n    # YOUR CODE MUST NOT\
    \ CONTAIN THE WORD \"os.system\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"\
    os.exec*\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"subprocess.call\"\n  \
    \  # YOUR CODE MUST NOT CONTAIN THE WORD \"subprocess.check_call\"\n    # YOUR\
    \ CODE MUST NOT CONTAIN THE WORD \"subprocess.check_output\"\n    # YOUR CODE\
    \ MUST NOT CONTAIN THE WORD \"subprocess.run\"\n    # YOUR CODE MUST NOT CONTAIN\
    \ THE WORD \"subprocess.Popen\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"\
    os.popen\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"os.fdopen\"\n    # YOUR\
    \ CODE MUST NOT CONTAIN THE WORD \"os.mkfifo\"\n    # YOUR CODE MUST NOT CONTAIN\
    \ THE WORD \"os.popen2\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"os.popen3\"\
    \n    # YOUR CODE MUST NOT CONTAIN THE WORD \"os.popen4\"\n    # YOUR CODE MUST\
    \ NOT CONTAIN THE WORD \"os.startfile\"\n    # YOUR CODE MUST NOT CONTAIN THE\
    \ WORD \"os.system\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"os.execv\"\n\
    \    # YOUR CODE MUST NOT CONTAIN THE WORD \"os.execve\"\n    # YOUR CODE MUST\
    \ NOT CONTAIN THE WORD \"os.spawnv\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD\
    \ \"os.spawnve\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD \"os.spawnl\"\n  \
    \  # YOUR CODE MUST NOT CONTAIN THE WORD \"os.spawnle\"\n    # YOUR CODE MUST\
    \ NOT CONTAIN THE WORD \"os.spawnlp\"\n    # YOUR CODE MUST NOT CONTAIN THE WORD\
    \ \"os.spawnlpe\"\n    # YOUR CODE MUST NOT", "    local result=(0 0)\n    if\
    \ [[ $2 -le $3 ]]; then\n        result[0]=$(($1 + $2))\n        result[1]=$(($3\
    \ - $2))\n    else\n        result[0]=$(($1 + $3))\n        result[1]=0\n    fi\n\
    \    echo \"${result[@]}\"", "  declare -i number=$1\n  declare -i need=$2\n \
    \ declare -i remaining=$3\n  if [ $remaining -eq 0 ]; then\n    echo \"[\\\"$number\\\
    \", \\\"0\\\"]\"\n  elif [ $need -gt $remaining ]; then\n    let total=$number+$remaining\n\
    \    echo \"[\\\"$total\\\", \\\"0\\\"]\"\n  else\n    let total=$number+$need\n\
    \    let new_remaining=$remaining-$need\n    echo \"[\\\"$total\\\", \\\"$new_remaining\\\
    \"]\"\n  fi", "  eaten=$(($1 + $2))\n  if [ $eaten -gt $3 ]; then\n    eaten=$3\n\
    \  fi\n  echo \"\\\"$eaten\\\", \\\"$(($3 - $eaten))\\\"\"", "  # your code here\n\
    \  echo \"there is a problem, you should resolve it\"", "    number=$1\n    need=$2\n\
    \    remaining=$3\n    if [ $((number + need)) -le $remaining ]; then\n      \
    \  echo \"[\\\"$((number + need))\\\", \\\"$((remaining - number - need))\\\"\
    ]\"\n    else\n        echo \"[\\\"$((number + remaining))\\\", \\\"0\\\"]\"\n\
    \    fi", "  [ $1 -ge 0 ] && [ $1 -le 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000\
    \ ] && [ $3 -ge 0 ] && [ $3 -le 1000 ] && [ $1 -lt $2 ] && [ $3 -gt 0 ]\n  if\
    \ [ $? -eq 0 ]; then\n    x=$(( $1 + $3 ))\n    y=$(( $2 - $3 ))\n    if [ $x\
    \ -ge $2 ]; then\n      array=(\"${x}\" \"${y}\")\n      echo ${array[@]}\n  \
    \  else\n      array=(\"${x}\" \"0\")\n      echo ${array[@]}\n    fi\n  else\n\
    \    echo \"Error: incorrect input\"\n  fi", "if (( $1 + $2 > $3 )); then\n\t\
    echo \"['\\\"$3\\\"', '\\\"0\\\"']\"\nelse\n\techo \"['\\\"$(($1 + $2))\\\"',\
    \ '\\\"$(($3 - $1 - $2))\\\"']\"\nfi", "  if [[ $1 =~ ^[+-]?[0-9]+$ ]] && [[ $2\
    \ =~ ^[+-]?[0-9]+$ ]] && [[ $3 =~ ^[+-]?[0-9]+$ ]]; then\n    if [ $1 -ge 0 ]\
    \ && [ $1 -le 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000 ] && [ $3 -ge 0 ] && [ $3\
    \ -le 1000 ]; then\n      ((total = $1 + $2))\n      if [ $total -le $3 ]; then\n\
    \        echo ['\"'$total'\"', '\"'$(($3 - $total))'\"']\n      else\n       \
    \ echo ['\"'$3'\"', '\"0\"']\n      fi\n    else\n      echo '[-\"1\", \"-1\"\
    ]'\n    fi\n  else\n    echo '[-\"1\", \"-1\"]'\n  fi", "  local number=\"$1\"\
    \n  local need=\"$2\"\n  local remaining=\"$3\"\n  # Write your code here", " \
    \ # initialise some variables\n  local result1=$1\n  local result2=$3\n  if [\
    \ $1 -gt $3 ]; then\n    result1=$3\n    result2=0\n  elif [ $2 -gt $3 ]; then\n\
    \    result1=$3\n    result2=0\n  else\n    result1=$2\n    result2=$3-$2\n  fi\n\
    \  echo \"[\\\"$result1\\\", \\\"$result2\\\"]\"", "  a=$1\n  b=$2\n  c=$3\n \
    \ # WRITE YOUR CODE HERE", "  # Write your solution here\n  echo '[\"\", \"\"\
    ]'", "    # bash uses decimal numbers by default, so if any of the arguments are\n\
    \    # in hexadecimal or octal form, they should be converted to decimal form.\n\
    \    number=10#$1\n    need=10#$2\n    remaining=10#$3\n    eaten=$((number +\
    \ need))\n    if [ $remaining -lt $need ]; then\n        remaining=0\n    else\n\
    \        remaining=$((remaining - need))\n    fi\n    echo \"[\\\"$eaten\\\",\
    \ \\\"$remaining\\\"]\"", "\tnumber=$1\n\tneed=$2\n\tremaining=$3\n\tif [ $number\
    \ -le 1000 ] && [ $need -le 1000 ] && [ $remaining -le 1000 ]\n\tthen\n\t\tif\
    \ [ $remaining -ge $need ]\n\t\tthen\n\t\t\techo [$(($number + $need)), $(($remaining\
    \ - $need))]\n\t\telse\n\t\t\techo [$(($number + $remaining)), 0]\n\t\tfi\n\t\
    else\n\t\techo 'Constrain problem.'\n\tfi", "  number=$1\n  need=$2\n  remaining=$3\n\
    \  if [ $remaining -ge $need ]; then\n    echo \"[$((number + need)), $((remaining\
    \ - need))]\"\n  else\n    echo \"[$((number + remaining)), 0]\"\n  fi", '    #
    enter your solution here', "  a=`echo \"$1 $2\" | awk '{print $1+$2}'`\n  echo\
    \ \"$a\"\n  b=`echo \"$a $3\" | awk '{print $3-$1}'`\n  echo \"$b\"\n  if [ $b\
    \ -gt 0 ]\n  then\n  echo \"you have eaten $a carrots, and now you have $b carrots.\"\
    \n  else\n  echo \"you have eaten $a carrots, but you still want to eat more.\"\
    \n  fi", "    _number=$1\n    _need=$2\n    _remaining=$3\n    # Write your solution\
    \ here\n    if [ $_need -gt 0 ]\n    then\n        if [ $_need -le $_remaining\
    \ ]\n        then\n            _result=$((_number + _need))\n            _remaining=$((_remaining\
    \ - _need))\n        else\n            _result=$((_number + _remaining))\n   \
    \         _remaining=0\n        fi\n    else\n        _result=$_number\n    fi\n\
    \    echo \"[\\\"$_result\\\", \\\"$_remaining\\\"]\"", "  local number=$1\n \
    \ local need=$2\n  local remaining=$3\n  (( total_carrots = number + remaining\
    \ - need ))\n  if [[ $total_carrots -lt 0 ]]; then\n    echo \"0\"\n  else\n \
    \   echo $total_carrots\n  fi", "    # Write your code here\n    \n    # Convert\
    \ all inputs to integer\n    number=$((10#$1))\n    need=$((10#$2))\n    remaining=$((10#$3))\n\
    \    \n    # Cannot eat negative number of carrots\n    if [ $number -lt 0 ] ||\
    \ [ $need -lt 0 ] || [ $remaining -lt 0 ]; then\n        exit 1\n    fi\n    \n\
    \    # Sum up carrots that you ate\n    sum=$((number + need))\n    \n    # Check\
    \ if there is enough carrots\n    if [ $sum -le $remaining ]; then\n        printf\
    \ '[\"%d\", \"%d\"]' $sum $((remaining - sum))\n    else\n        printf '[\"\
    %d\", \"%d\"]' $remaining 0\n    fi", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  if [ $remaining -lt $need ]; then\n    echo \"[\\\"\"$((remaining\
    \ + number))\"\\\", \\\"0\\\"]\"\n  else\n    echo \"[\\\"\"$((need + number))\"\
    \\\", \\\"\"$((remaining - need))\"\\\"]\"\n  fi", "  if [[ $# -eq 3 ]]; then\n\
    \    if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$ ]] && [[ $3 =~ ^-?[0-9]+$\
    \ ]]; then\n      res=$(( $1 + $2 ))\n      if [[ $res -le $3 ]]; then\n     \
    \   printf \"%s\\n\" $res\n        printf \"%s\\n\" $(( $3 - $res ))\n      else\n\
    \        printf \"%s\\n\" $(( $1 + $3 ))\n        printf \"%s\\n\" 0\n      fi\n\
    \    else\n      printf \"E: %s: invalid value\\n\" $0\n      printf \"Usage:\
    \ %s <number> <need> <remaining>\\n\" $0\n      printf \"number, need and remaining\
    \ should be an integer\\n\"\n      printf \"0 <= number <= 1000\\n\"\n      printf\
    \ \"0 <= need <= 1000\\n\"\n      printf \"0 <= remaining <= 1000\\n\"\n    fi\n\
    \  else\n    printf \"E: %s: missing operand\\n\" $0\n    printf \"Usage: %s <number>\
    \ <need> <remaining>\\n\" $0\n    printf \"number, need and remaining should be\
    \ an integer\\n\"\n    printf \"0 <= number <= 1000\\n\"\n    printf \"0 <= need\
    \ <= 1000\\n\"\n    printf \"0 <= remaining <= 1000\\n\"\n  fi", "  number=$1\n\
    \  need=$2\n  remaining=$3\n  if [ \"$number\" -ge 0 ] && [ \"$number\" -le 1000\
    \ ]\n  then\n    if [ \"$need\" -ge 0 ] && [ \"$need\" -le 1000 ]\n    then\n\
    \      if [ \"$remaining\" -ge 0 ] && [ \"$remaining\" -le 1000 ]\n      then\n\
    \        if [ \"$remaining\" -ge \"$need\" ]\n        then\n          echo '[\"\
    '$((number+need))'\", \"'$((remaining-need))'\"]'\n        else\n          echo\
    \ '[\"'$((number+remaining))'\", \"'0'\"]'\n        fi\n      else\n        echo\
    \ '[\"'$number'\", \"'$remaining'\"]'\n      fi\n    else\n      echo '[\"'$number'\"\
    , \"'$need'\"]'\n    fi\n  else\n    echo '[\"'$number'\", \"'$need'\"]'\n  fi",
  "  # your code here\n  # create an array to hold the values\n  declare -a result\n\
    \  # check if number of carrots is less than 0\n  if [[ $1 -lt 0 ]]; then\n  \
    \  # change number of carrots value to 0\n    result[0]=0\n  # check if number\
    \ of carrots is greater than 1000\n  elif [[ $1 -gt 1000 ]]; then\n    # change\
    \ number of carrots value to 1000\n    result[0]=1000\n  else\n    # store the\
    \ value as is\n    result[0]=$1\n  fi\n  # check if number of carrots needed is\
    \ less than 0\n  if [[ $2 -lt 0 ]]; then\n    # change number of carrots needed\
    \ value to 0\n    result[1]=0\n  # check if number of carrots needed is greater\
    \ than 1000\n  elif [[ $2 -gt 1000 ]]; then\n    # change number of carrots needed\
    \ value to 1000\n    result[1]=1000\n  else\n    # store the value as is\n   \
    \ result[1]=$2\n  fi\n  # check if number of carrots remaining is less than 0\n\
    \  if [[ $3 -lt 0 ]]; then\n    # change number of carrots remaining value to\
    \ 0\n    result[2]=0\n  # check if number of carrots remaining is greater than\
    \ 1000\n  elif [[ $3 -gt 1000 ]]; then\n    # change number of carrots remaining\
    \ value to 1000\n    result[2]=1000\n  else\n    # store the value as is\n   \
    \ result[2]=$3\n  fi\n  # check if remaining carrots are greater than carrots\
    \ needed\n  if [[ ${result[2]} -gt ${result[1]} ]]; then\n    # change number\
    \ of carrots needed value to 0\n    result[1]=0\n    # add the number of remaining\
    \ carrots to the total number of carrots eaten\n    result[0]=$((${result[0]}+${result[2]}))\n\
    \  else\n    # change number of carrots needed value to difference between total\
    \ needed and total remaining\n    result[1]=$((${result[1]}-${result[2]}))\n \
    \   # add the number of remaining carrots to the total number of carrots eaten\n\
    \    result[0]=$((${result[0]}+${result[2]}))\n  fi", "  number=$1\n  need=$2\n\
    \  remaining=$3\n  if [ $(( $need - $remaining )) -lt 0 ]; then\n    echo \"[$((\
    \ $number + $remaining )), $(( $need - $remaining ))]\"\n  else\n    echo \"[$((\
    \ $number + $need )), $(( $remaining - $need ))]\"\n  fi", "  number=$1\n  need=$2\n\
    \  remaining=$3\n  echo [\\'\\\"$(($number + $need))\\\"\\'\\, \\'\\\"$(($remaining\
    \ - $need))\\\"\\']", "    declare -i number=$1\n    declare -i need=$2\n    declare\
    \ -i remaining=$3\n    declare -i total=0\n    declare -i left_over=0\n    declare\
    \ -a arr=()\n    if [[ $remaining -gt $need ]]; then\n        total=$(($number\
    \ + $need))\n        left_over=$(($remaining - $need))\n    else\n        total=$(($number\
    \ + $remaining))\n        left_over=0\n    fi\n    arr+=($total)\n    arr+=($left_over)\n\
    \    echo ${arr[@]}", "  declare -i remaining=$3\n  declare -i need=$2\n  declare\
    \ -i eaten=$1\n  if [[ $remaining -ge $need ]]; then\n    echo \"[\\\"$((eaten\
    \ + need))\\\", \\\"$((remaining - need))\\\"]\"\n  else\n    echo \"[\\\"$((eaten\
    \ + remaining))\\\", \\\"0\\\"]\"\n  fi", "  if [[ \"${1}\" -ge 0 && \"${1}\"\
    \ -le 1000 && \"${2}\" -ge 0 && \"${2}\" -le 1000 && \"${3}\" -ge 0 && \"${3}\"\
    \ -le 1000 ]]; then\n    echo \"[\\\"$(( \"${1}\" + \"${2}\" < \"${3}\" ? \"${1}\"\
    \ + \"${2}\" : \"${3}\" ))\\\"\"\n    echo \"\\\"$(( \"${3}\" - \"${1}\" - \"\
    ${2}\" < 0 ? 0 : \"${3}\" - \"${1}\" - \"${2}\" ))\\\"]\"\n  else\n    echo \"\
    false\"\n  fi", "    # Hint: the bc (basic calculator) command will be helpful\
    \ in performing\n    #       integer math\n    # Hint: use echo -n \"STRING\"\
    \ to suppress the newline that follows\n    #       echo\n\n    if [ $1 -ge 0\
    \ ] && [ $1 -le 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000 ] && [ $3 -ge 0 ] && [\
    \ $3 -le 1000 ]; then\n        if [ $2 -le $3 ]; then\n            local eaten_carrots=`echo\
    \ \"$1 + $2\" | bc`\n            local remaining_carrots=`echo \"$3 - $2\" | bc`\n\
    \            echo -n \"['\"\n            echo -n \"$eaten_carrots\"\n        \
    \    echo -n \"', '\"\n            echo -n \"$remaining_carrots\"\n          \
    \  echo -n \"']\"\n        else\n            local eaten_carrots=`echo \"$1 +\
    \ $3\" | bc`\n            local remaining_carrots=`echo \"$2 - $3\" | bc`\n  \
    \          echo -n \"['\"\n            echo -n \"$eaten_carrots\"\n          \
    \  echo -n \"', '\"\n            echo -n \"$remaining_carrots\"\n            echo\
    \ -n \"']\"\n        fi\n    else\n        echo \"Error: Numbers can't be below\
    \ 0 or bigger than 1000!\"\n    fi", "  local eat need remaining\n  eat=$1\n \
    \ need=$2\n  remaining=$3\n  if [ $eat -ge 0 ] && [ $eat -le 1000 ] && [ $need\
    \ -ge 0 ] && [ $need -le 1000 ] && [ $remaining -ge 0 ] && [ $remaining -le 1000\
    \ ]; then\n    eat=$(($eat + $need))\n    if [ $eat -le $remaining ]; then\n \
    \     remaining=$(($remaining - $eat))\n    else\n      remaining=0\n    fi\n\
    \    echo \"[\\\"$eat\\\", \\\"$remaining\\\"]\"\n  else\n    echo \"error\"\n\
    \  fi", "    if [ $1 -ge 0 ] && [ $1 -le 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000\
    \ ] && [ $3 -ge 0 ] && [ $3 -le 1000 ]; then\n        local t=`expr $1 + $2`\n\
    \        if [ $t -le $3 ]; then\n            local r=`expr $3 - $t`\n        \
    \    echo \"[$t, $r]\"\n        else\n            local r=`expr $t - $3`\n   \
    \         echo \"[$3, 0]\"\n        fi\n    else\n        echo \"error\"\n   \
    \ fi", "    # Write your code here\n    if [[ $1 -lt 0 || $1 -gt 1000 || $2 -lt\
    \ 0 || $2 -gt 1000 || $3 -lt 0 || $3 -gt 1000 ]]; then\n        echo \"['\\\"\
    $1\\\"', '\\\"$2\\\"']\"\n    else\n        if [[ $2 -gt $3 ]]; then\n       \
    \     number=`expr $1 + $3`\n            remaining=0\n        else\n         \
    \   number=`expr $1 + $2`\n            remaining=`expr $3 - $2`\n        fi\n\
    \        echo \"['\\\"$number\\\"', '\\\"$remaining\\\"']\"\n    fi", "  number=$1\n\
    \  need=$2\n  remaining=$3\n  total=$((number + need))\n  consumed=$((need - remaining))\n\
    \  if [[ $consumed -lt 0 ]]; then\n    echo \"[\\\"$total\\\", \\\"0\\\"]\"\n\
    \  else\n    echo \"[\\\"$((total - consumed))\\\", \\\"$consumed\\\"]\"\n  fi",
  "  if [ $(($1 + $2)) -gt $3 ]; then\n    echo \"[\\\"$3\\\", \\\"0\\\"]\"\n  else\n\
    \    echo \"[\\\"$(($1 + $2))\\\", \\\"$(($3 - $1 - $2))\\\"]\"\n  fi", "\tlocal\
    \ carrot_input=$1\n\tlocal carrot_need=$2\n\tlocal carrot_left=$3\n\tif [[ ${carrot_left}\
    \ -ge ${carrot_need} ]]; then\n\t\tlocal carrot_need_left=$((carrot_left - carrot_need))\n\
    \t\tlocal carrot_output=$((carrot_input + carrot_need))\n\t\techo \"[\\\"${carrot_output}\\\
    \", \\\"${carrot_need_left}\\\"]\"\n\telif [[ ${carrot_left} -lt ${carrot_need}\
    \ ]]; then\n\t\tlocal carrot_output=$((carrot_input + carrot_left))\n\t\techo\
    \ \"[\\\"${carrot_output}\\\", \\\"0\\\"]\"\n\tfi", "    # TODO\n    echo '[\"\
    $1\", \"$2\"]'", "\ta=$(($1 + $2))\n\tb=$(($3 - $2))\n\techo \"[$a, $b]\"", " \
    \   [[ $1 =~ ^[0-9]+$ ]] || return 1\n    [[ $2 =~ ^[0-9]+$ ]] || return 1\n \
    \   [[ $3 =~ ^[0-9]+$ ]] || return 1\n    total=$(($1 + $2))\n    echo -n \"['\"\
    $total\"', '\"$(($3 - $2))\"']\"", "  # Write your code here\n  echo $1\n  echo\
    \ $2\n  echo $3\n  echo \"Your function should return an array\"", "  if [ \"\
    $1\" -gt 0 ] && [ \"$2\" -gt 0 ] && [ \"$3\" -gt 0 ]; then\n    if [ \"$2\" -gt\
    \ \"$3\" ]; then\n      let \"need = $3 + $1\"\n      echo '[\"'$need'\", \"0\"\
    ]'\n    else\n      let \"need = $1 + $2\"\n      let \"remaining = $3 - $2\"\n\
    \      echo '[\"'$need'\", \"'$remaining'\"]'\n    fi\n  else\n    echo \"Error!\"\
    \n  fi", "  if [ $3 -ge $2 ]\n  then\n    echo \"[\\\"$(($1 + $2))\\\", \\\"$(($3\
    \ - $2))\\\"]\"\n  else\n    echo \"[\\\"$(($1 + $3))\\\", \\\"0\\\"]\"\n  fi",
  "  number=$1\n  need=$2\n  remaining=$3\n  let temp=$need-$remaining\n  let temp=$number+$remaining\n\
    \  if [ $temp -gt $need ]\n  then\n    echo \"[\\\"$need\\\", \\\"$remaining\\\
    \"]\"\n  else\n    echo \"[\\\"$temp\\\", \\\"0\\\"]\"\n  fi", "\tif (( $2 - $1\
    \ >= $3 )); then\n\t\techo \"[\\\"\"$2\"\\\", \\\"0\\\"]\"\n\telse\n\t\techo \"\
    [\\\"\"$(($1 + $3))\"\\\", \\\"\"$(($2 - $1 - $3))\"\\\"]\"\n\tfi", "  # Get the\
    \ value of the number eaten\n  n=$1\n  # Get the value of the number needed\n\
    \  m=$2\n  # Get the value of the number left\n  l=$3\n  # Set the number of carrots\
    \ to eat to the minimum of the number needed, and the number left\n  carrots_to_eat=$(($m<$l?$m:$l))\n\
    \  # Set the number of eaten carrots to be the number eaten so far, plus the number\
    \ of carrots to eat\n  eaten_carrots=$(($n+$carrots_to_eat))\n  # Set the number\
    \ of remaining carrots to be the number left, minus the number of carrots to eat\n\
    \  remaining_carrots=$(($l-$carrots_to_eat))\n  # Print the results\n  echo \"\
    [\\\"$eaten_carrots\\\", \\\"$remaining_carrots\\\"]\"", "  eaten=0\n  remaining=0\n\
    \  if [ \"$1\" -lt \"$3\" ]; then\n    eaten=$(( $1 + $2 ))\n    remaining=$((\
    \ $3 - $eaten ))\n  elif [ \"$1\" -eq \"$3\" ]; then\n    eaten=$(( $1 + $2 ))\n\
    \    remaining=0\n  elif [ \"$1\" -gt \"$3\" ]; then\n    eaten=$(( $1 + $2 ))\n\
    \    remaining=0\n  fi\n  echo \"[$eaten, $remaining]\"", "  if [[ $1 -ge 0 &&\
    \ $1 -le 1000 && $2 -ge 0 && $2 -le 1000 && $3 -ge 0 && $3 -le 1000 ]]; then\n\
    \    if [ $1 -eq 0 ]; then\n      if [ $2 -eq 0 ]; then\n        result=$(($2\
    \ + $3))\n        echo \"[\\\"$result\\\", \\\"0\\\"]\"\n      else\n        if\
    \ [ $2 -ge $3 ]; then\n          result=$(($3 + $2))\n          echo \"[\\\"$result\\\
    \", \\\"0\\\"]\"\n        else\n          result=$(($2 + $3))\n          echo\
    \ \"[\\\"$result\\\", \\\"0\\\"]\"\n        fi\n      fi\n    else\n      if [\
    \ $2 -eq 0 ]; then\n        result=$(($1 + $3))\n        echo \"[\\\"$result\\\
    \", \\\"0\\\"]\"\n      else\n        if [ $2 -ge $3 ]; then\n          result=$(($1\
    \ + $3))\n          echo \"[\\\"$result\\\", \\\"0\\\"]\"\n        else\n    \
    \      result=$(($1 + $2))\n          echo \"[\\\"$result\\\", \\\"0\\\"]\"\n\
    \        fi\n      fi\n    fi\n  else\n    echo \"Error: Numbers must be between\
    \ 0 and 1000\"\n  fi", "    mealCount=$1\n    neededCarrots=$2\n    remainingCarrots=$3\n\
    \    availableCarrots=$((remainingCarrots - mealCount))\n    totalCarrots=$((mealCount\
    \ + availableCarrots))\n    if [[ neededCarrots -lt totalCarrots ]]; then\n  \
    \    remainingCarrots=$((totalCarrots - neededCarrots))\n      echo \"[\\\"$neededCarrots\\\
    \", \\\"$remainingCarrots\\\"]\"\n    else\n      remainingCarrots=0\n      echo\
    \ \"[\\\"$totalCarrots\\\", \\\"$remainingCarrots\\\"]\"\n    fi", "  number=\"\
    $1\"\n  need=\"$2\"\n  remaining=\"$3\"\n  if [ $need -le $remaining ]; then\n\
    \    echo -n \"[$((need+number)), $((remaining-need))]\"\n  else\n    echo -n\
    \ \"[$((remaining+number)), 0]\"\n  fi", "\tlocal number=\"$1\"\n\tlocal need=\"\
    $2\"\n\tlocal remaining=\"$3\"\n\tlocal total=\"$((number + need))\"\n\t\n\tif\
    \ [ $remaining -lt $need ]; then\n\t\t((total -= need - remaining))\n\t\tremaining=0\n\
    \telse\n\t\t((remaining -= need))\n\tfi\n\techo \"['\"$total\"', '\"$remaining\"\
    ']\"", "    local number=\"$1\"\n    local need=\"$2\"\n    local remaining=\"\
    $3\"\n    local total=$((number + need))\n    if [ \"$total\" -le \"$remaining\"\
    \ ]; then\n        echo \"[\\\"$total\\\", \\\"$((remaining - total))\\\"]\"\n\
    \    else\n        echo \"[\\\"$remaining\\\", \\\"0\\\"]\"\n    fi", "    #write\
    \ your code here...\n    local eaten=\"0\"\n    local remaining=\"0\"\n    eaten=$(($1+$2))\n\
    \    remaining=$(($3-$2))\n    if [ $eaten -gt $3 ]; then\n        eaten=$3\n\
    \        remaining=0\n    fi\n    echo \"[\\\"$eaten\\\", \\\"$remaining\\\"]\"",
  "    number=$1\n    need=$2\n    remaining=$3\n    sum=$(($number + $need))\n  \
    \  if [[ $remaining -ge $need ]]; then\n        echo '['\"\\\"$sum\\\"\", '\"\\\
    \"$(($remaining - $need))\\\"\"'];\n    else\n        echo '['\"\\\"$(($sum +\
    \ $remaining))\\\"\", '\"\\\"0\\\"\"'];\n    fi", "    # write your code here\n\
    \    a=$1\n    b=$2\n    c=$3\n    s=`expr $b + $a`\n    d=`expr $c - $s`\n  \
    \  echo \"[\\\"$s\\\", \\\"$d\\\"]\"", "    if [[ \"$1\" =~ ^[0-9]+$ ]] && [[\
    \ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n        if [[ $1 -ge\
    \ 0 ]] && [[ $1 -le 1000 ]] && [[ $2 -ge 0 ]] && [[ $2 -le 1000 ]] && [[ $3 -ge\
    \ 0 ]] && [[ $3 -le 1000 ]]; then\n            echo \"['\"$(($1 + $2))\"', '\"\
    $(($3 - $2))\"']\"\n        else\n            echo \"ERROR: Not in range.\"\n\
    \        fi\n    else\n        echo \"ERROR: Not an integer.\"\n    fi", "  number=$1\n\
    \  need=$2\n  remaining=$3\n  if [ $number -ge 0 ] && [ $number -le 1000 ] &&\
    \ [ $need -ge 0 ] && [ $need -le 1000 ] && [ $remaining -ge 0 ] && [ $remaining\
    \ -le 1000 ]; then\n    if [ $remaining -ge $need ]; then\n      remaining=$((remaining-need))\n\
    \      number=$((number+need))\n    else\n      number=$((number+remaining))\n\
    \      remaining=0\n    fi\n    echo \"[\\\"$number\\\", \\\"$remaining\\\"]\"\
    \n  else\n    echo \"\"\n  fi", '    echo "yourfunctionname($1, $2, $3)"', " \
    \ number=$1\n  need=$2\n  remaining=$3\n  if [ $number -lt 0 ] || [ $number -gt\
    \ 1000 ]\n  then\n    echo \"Wrong Input, number should be between 0 and 1000\"\
    \n    return\n  fi\n  if [ $need -lt 0 ] || [ $need -gt 1000 ]\n  then\n    echo\
    \ \"Wrong Input, need should be between 0 and 1000\"\n    return\n  fi\n  if [\
    \ $remaining -lt 0 ] || [ $remaining -gt 1000 ]\n  then\n    echo \"Wrong Input,\
    \ remaining should be between 0 and 1000\"\n    return\n  fi\n  res=$((number+need))\n\
    \  if [ $res -le $remaining ]\n  then\n    echo \"\\\"$res\\\"\"\n    echo \"\\\
    \"$((remaining-res))\\\"\"\n  else\n    echo \"\\\"$((remaining+number))\\\"\"\
    \n    echo \"\\\"0\\\"\"\n  fi", "  local number=\"$1\"\n  local need=\"$2\"\n\
    \  local remaining=\"$3\"\n  # The solution of this kata is written in this string.\n\
    \  # Delete these comments and write your solution in the variable below\n  local\
    \ solution=\"$remaining\"\n  if [ $remaining -lt $need ]; then\n    solution=\"\
    $((number + remaining))\"\n  else\n    solution=\"$((number + need))\"\n  fi\n\
    \  printf '[\"%s\", \"%s\"]' \"$solution\" \"$((remaining - need))\"", "  local\
    \ eaten=$1\n  local need=$2\n  local remaining=$3\n  local stock=$((eaten + remaining))\n\
    \  local left=$((stock - need))\n  if [[ $left -gt 0 ]]; then\n    echo \"\\\"\
    $((eaten + need))\\\", \\\"$left\\\"\"\n  else\n    echo \"\\\"$stock\\\", \\\"\
    0\\\"\"\n  fi", "    a=$(($1+$2))\n    b=$(($3-$2))\n    if [ \"$a\" -gt \"$b\"\
    \ ]; then\n      a=$(($a-$b))\n      b=0\n    fi\n    echo \"[\\\"$a\\\", \\\"\
    $b\\\"]\"", "    if [ -z \"$1\" ] || [ -z \"$2\" ] || [ -z \"$3\" ]; then\n  \
    \      echo \"You should enter 3 numbers\"\n        return 1\n    fi\n    local\
    \ eaten\n    local need\n    local remaining\n    local left\n\n    eaten=$1\n\
    \    need=$2\n    remaining=$3\n    if [ $remaining -lt $need ]; then\n      \
    \  left=0\n    else\n        left=$((remaining - need))\n    fi\n    echo \"\\\
    \"$((eaten + need))\\\"\"\n    echo \"\\\"$left\\\"\"", "  declare -i eat=0\n\
    \  declare -i need=0\n  declare -i remaining=0\n  declare -i result=0\n  eat=$1\n\
    \  need=$2\n  remaining=$3\n  result=$(( $eat + $need ))\n  if [ $result -gt $remaining\
    \ ]; then\n    result=$(( $result - $remaining ))\n    remaining=0\n  else\n \
    \   remaining=$(( $remaining - $result ))\n  fi\n  echo \"[\\\"$result\\\", \\\
    \"$remaining\\\"]\"", "    echo '[  ]' # Write your code here, and return your\
    \ answer", "    local number=$1\n    local need=$2\n    local remaining=$3\n \
    \   local result=0\n    if [ $remaining -lt $need ]; then\n        result=$(($number\
    \ + $remaining))\n        echo \"[$result, 0]\"\n    else\n        result=$(($number\
    \ + $need))\n        remaining=$(($remaining - $need))\n        echo \"[$result,\
    \ $remaining]\"\n    fi", "  if [ $1 -le 1000 ] && [ $2 -le 1000 ] && [ $3 -le\
    \ 1000 ] && [ $1 -ge 0 ] && [ $2 -ge 0 ] && [ $3 -ge 0 ]; then\n    if [ $3 -lt\
    \ $2 ]; then\n      remaining=$(($3-$2))\n      total=$(($1+$3))\n      echo '[\\\
    \"'\"$total\"'\\\"', '\\\"'\"$remaining\"'\\\"]'\n    else\n      remaining=$(($3-$2))\n\
    \      total=$(($1+$2))\n      echo '[\\\"'\"$total\"'\\\"', '\\\"'\"$remaining\"\
    '\\\"]'\n    fi\n  else\n    echo \"The number is bigger than 1000 or less than\
    \ 0\"\n  fi", "  if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]] && [[ $3 =~ ^[0-9]+$\
    \ ]]; then\n    if [[ $1 -ge 0 ]] && [[ $1 -le 1000 ]] && [[ $2 -ge 0 ]] && [[\
    \ $2 -le 1000 ]] && [[ $3 -ge 0 ]] && [[ $3 -le 1000 ]]; then\n      local remainder=$(($1\
    \ + $2 - $3))\n      echo \"[$remainder, $3]\"\n    else\n      echo \"['ERROR:\
    \ Must be between 0 and 1000']\"\n    fi\n  else\n    echo \"['ERROR: Must be\
    \ an integer']\"\n  fi", '    # write your code here', "    # Write your code\
    \ below\n    if [ \"$1\" -lt 0 ] || [ \"$1\" -gt 1000 ] || [ \"$2\" -lt 0 ] ||\
    \ [ \"$2\" -gt 1000 ] || [ \"$3\" -lt 0 ] || [ \"$3\" -gt 1000 ]\n    then\n \
    \       echo ['\"-\"', '\"-\"']\n    else\n        if [ $1 -eq 1000 ]\n      \
    \  then\n            echo ['\"-\"', '\"-\"']\n        else\n            total=$(($1\
    \ + $2))\n            if [ $total -le $3 ]\n            then\n               \
    \ echo ['\"'$total'\"', '\"'$(($3 - $total))'\"']\n            else\n        \
    \        echo ['\"'$(($1 + $3))'\"', '\"0\"']\n            fi\n        fi\n  \
    \  fi", "  [ $# -lt 3 ] && return 1\n  local -i number=$1\n  local -i need=$2\n\
    \  local -i remaining=$3\n  if [ $need -gt $remaining ]; then\n    echo ['\"'$((number\
    \ + remaining))'\"', '\"0\"']\n  else\n    echo ['\"'$((number + need))'\"', '\"\
    '\"$((remaining - need))\"'\"']\n  fi", "    if ((0 <= $1 && $1 <= 1000)) && ((0\
    \ <= $2 && $2 <= 1000)) && ((0 <= $3 && $3 <= 1000)); then\n        if (($1 +\
    \ $2 <= $3)); then\n            local eaten=$(( $1 + $2 ))\n            local\
    \ remaining=$(( $3 - $eaten ))\n            echo \"[\\\"${eaten}\\\", \\\"${remaining}\\\
    \"]\"\n        else\n            local eaten=$(( $1 + $3 ))\n            local\
    \ remaining=0\n            echo \"[\\\"${eaten}\\\", \\\"${remaining}\\\"]\"\n\
    \        fi\n    else\n        echo \"0\"\n    fi", "  number=$1\n  need=$2\n\
    \  remaining=$3\n  # your code here\n  echo \"[$((need+number)), $((remaining-need))]\"",
  "    need=$2\n    remaining=$3\n    if [ $need -lt $remaining ]; then\n        number=$((\
    \ $1 + $need ))\n        remaining=$(( $remaining - $need ))\n    else\n     \
    \   number=$(( $1 + $remaining ))\n        remaining=0\n    fi\n    echo ['\"\
    '$number'\"', '\"'$remaining'\"']", "    local number=$1\n    local need=$2\n\
    \    local remaining=$3\n    local total=$((${number} + ${need}))\n    local diff=$((${total}\
    \ - ${remaining}))\n    local arr=()\n    if [[ ${diff} -gt 0 ]]; then\n     \
    \   local left=$((${diff} - ${remaining}))\n        arr+=(\"${total}\")\n    \
    \    arr+=(\"${left}\")\n    else\n        arr+=(\"${total}\")\n        arr+=(\"\
    ${remaining}\")\n    fi\n    echo ${arr[@]}", "  # Write your answer here...\n\
    \  local eaten=$1\n  local left=$2\n  local total=$3\n  local result=0\n  # echo\
    \ $eaten\n  # echo $left\n  # echo $total\n  if [ \"$left\" -le \"$total\" ];\
    \ then\n    local result=$(($eaten + $left))\n    echo \"[\\\"$result\\\", \\\"\
    0\\\"]\"\n  else\n    local result=$(($eaten + $total))\n    local result2=$(($left\
    \ - $total))\n    echo \"[\\\"$result\\\", \\\"$result2\\\"]\"\n  fi", "  number=$1\n\
    \  need=$2\n  remaining=$3\n  # your code here", '  return 0', "\techo \"[\\\"\
    $(($1 + $2))\\\", \\\"$(($3 - $2))\\\"]\"", "    echo $1\n    echo $2\n    echo\
    \ $3\n    echo -e \"[\\c\"\n    if [ $3 -lt $2 ]\n    then\n        echo -e $1+$3\"\
    \\c\"\n    else\n        echo -e $1+$2\"\\c\"\n    fi\n    echo -e \",\\c\"\n\
    \    if [ $3 -lt $2 ]\n    then\n        echo -e \"0\\c\"\n    else\n        echo\
    \ -e $3-$2\"\\c\"\n    fi\n    echo -e \"]\"", "  number=\"$1\"\n  need=\"$2\"\
    \n  remaining=\"$3\"\n  if [[ $((need - number)) -gt $remaining ]]; then\n   \
    \ echo \"[\\\"$((number + remaining))\\\", \\\"0\\\"]\"\n  else\n    echo \"[\\\
    \"$((number + need))\\\", \\\"$((remaining - need + number))\\\"]\"\n  fi", " \
    \ if (( $1 + $2 <= $3 )) ; then\n    echo \"\\\"$(( $1 + $2 ))\\\"\"\n    echo\
    \ \"\\\"$(( $3 - $1 - $2 ))\\\"\"\n  else\n    echo \"\\\"$(( $1 + $3 ))\\\"\"\
    \n    echo \"\\\"0\\\"\"\n  fi", "  #TODO: Implement the function\n  local number=$1\n\
    \  local need=$2\n  local remaining=$3\n  local total=$(($number + $need))\n \
    \ local left=$(($remaining - $need))\n  if [ $left -lt 0 ]; then\n    left=0\n\
    \  fi\n  echo \"[\\\"$total\\\", \\\"$left\\\"]\"", "\tif [ $3 -eq 0 ]; then\n\
    \t\techo '[-1, -1]'\n\telif [ $3 -le $2 ]; then\n\t\techo '[$(($1 + $3)), 0]'\n\
    \telse\n\t\techo '[$(($1 + $2)), $(($3 - $2))]'\n\tfi", '    : # write your code
    here', "  if [ -z \"$1\" ] || [ -z \"$2\" ] || [ -z \"$3\" ]; then\n    echo \"\
    Error in parameters!\"\n    exit 1\n  fi\n  number=$1\n  need=$2\n  remaining=$3\n\
    \  result=`expr $number + $need`\n  if [ $result -gt $remaining ]; then\n    result=`expr\
    \ $remaining + $number`\n    echo \"[\\\"\"$result\"\\\",\\\"\"0\"\\\"]\"\n  else\n\
    \    echo \"[\\\"\"$result\"\\\",\\\"\"`expr $remaining - $result`\"\\\"]\"\n\
    \  fi", "\t[[ $1 -ge 0 && $1 -le 1000 ]] || exit 1\n\t[[ $2 -ge 0 && $2 -le 1000\
    \ ]] || exit 1\n\t[[ $3 -ge 0 && $3 -le 1000 ]] || exit 1\n\tif [ $2 -le $3 ];\
    \ then\n\t\tt=$(($1 + $2))\n\t\te=$(($3 - $2))\n\t\techo \"[$t, $e]\"\n\telse\n\
    \t\tt=$(($1 + $3))\n\t\te=0\n\t\techo \"[$t, $e]\"\n\tfi", "    # your code here\n\
    \    number=$1\n    need=$2\n    remaining=$3\n    if [ $need -le $remaining ];\
    \ then\n        echo ['\"$(($number+$need))\"', '\"$(($remaining-$need))\"']\n\
    \    else\n        echo ['\"$(($number+$remaining))\"', '\"0\"']\n    fi", " \
    \   # your code here\n    :", "  if [[ $2 -gt $3 ]]; then\n    echo \"[\\\"\"\
    $(( $1 + $3 ))\"\\\", \\\"0\\\"]\"\n  else\n    echo \"[\\\"\"$(( $1 + $2 ))\"\
    \\\", \\\"\"$(( $3 - $2 ))\"\\\"]\"\n  fi", "\tlocal number=$1\n\tlocal need=$2\n\
    \tlocal remaining=$3\n\tlocal sum=$((number + need))\n\tlocal result\n\tlocal\
    \ remaining_result\n\t# your code here\n\tif [[ $remaining -gt $need ]]; then\n\
    \t\tresult=\"$sum\"\n\t\tremaining_result=$((remaining - need))\n\telse\n\t\t\
    result=\"$remaining\"\n\t\tremaining_result=0\n\tfi\n\tprintf \"[\\\"$result\\\
    \", \\\"$remaining_result\\\"]\"", "    # your code here\n    :", '', "  echo\
    \ '[$(( $1 + $2 )), $(( $3 - $2 ))]'", "    let \"number=$1\"\n    let \"need=$2\"\
    \n    let \"remaining=$3\"\n    let \"eat=$number+$need\"\n    if [ $eat -gt $remaining\
    \ ]; then\n        let \"eat=$remaining\"\n        echo \"[\\\"$eat\\\", \\\"\
    0\\\"]\"\n    else\n        let \"remaining=$remaining-$eat\"\n        echo \"\
    [\\\"$eat\\\", \\\"$remaining\\\"]\"\n    fi", "  number=$1\n  need=$2\n  remaining=$3\n\
    \  if [ $number -lt 0 -o $number -gt 1000 ]; then\n    echo \"number is not a\
    \ valid integer\" >&2\n    exit 1\n  fi\n  if [ $need -lt 0 -o $need -gt 1000\
    \ ]; then\n    echo \"need is not a valid integer\" >&2\n    exit 1\n  fi\n  if\
    \ [ $remaining -lt 0 -o $remaining -gt 1000 ]; then\n    echo \"remaining is not\
    \ a valid integer\" >&2\n    exit 1\n  fi\n  if [ $need -gt $remaining ]; then\n\
    \    result=$(( $number + $remaining ))\n    echo \"[\\\"$result\\\", \\\"0\\\"\
    ]\"\n  else\n    result=$(( $number + $need ))\n    left=$(( $remaining - $need\
    \ ))\n    echo \"[\\\"$result\\\", \\\"$left\\\"]\"\n  fi", "  (( $1 <= $3 ))\
    \ || return 1\n  (( $2 <= $3 )) || return 1\n  (( $1 >= 0 )) || return 1\n  ((\
    \ $2 >= 0 )) || return 1\n  (( $3 >= 0 )) || return 1\n  local eaten=$1\n  local\
    \ need=$2\n  local remaining=$3\n  local remaining_number=0\n  (( eaten += need\
    \ ))\n  (( eaten <= remaining )) && remaining_number=$(($remaining - $eaten))\n\
    \  echo \" [\\\"$eaten\\\", \\\"$remaining_number\\\"]\"", "    # Variables\n\
    \    local number=$1\n    local need=$2\n    local remaining=$3\n    local total=\"\
    $(( $number + $need ))\"\n    local carrots=\"$(( $remaining - $need ))\"\n  \
    \  local left=\"$(( $remaining - $total ))\"\n    # Result\n    if [[ $remaining\
    \ -ge $total ]]; then\n        echo \"[\\\"${total}\\\", \\\"${carrots}\\\"]\"\
    \n    else\n        echo \"[\\\"${total}\\\", \\\"${left}\\\"]\"\n    fi", '  echo
    "not implemented"', "    declare -A arr\n    arr[\"total\"]=0\n    arr[\"remaining\"\
    ]=0\n    if [ $1 -ge 0 -a $1 -le 1000 ]\n    then\n        arr[\"total\"]=$((arr[\"\
    total\"]+$1))\n    fi\n    if [ $2 -ge 0 -a $2 -le 1000 ]\n    then\n        arr[\"\
    total\"]=$((arr[\"total\"]+$2))\n    fi\n    if [ $3 -ge 0 -a $3 -le 1000 ]\n\
    \    then\n        arr[\"remaining\"]=$3\n    fi\n    if [ $arr[\"total\"] -gt\
    \ $arr[\"remaining\"] ]\n    then\n        arr[\"remaining\"]=0\n    else\n  \
    \      arr[\"remaining\"]=$((arr[\"remaining\"]-arr[\"total\"]))\n    fi\n   \
    \ echo \"${arr[total]}\"\n    echo \"${arr[remaining]}\"", '  true', "    if !\
    \ [[ \"$1\" =~ ^[0-9]+$ ]] ; then\n        echo \"error: Not a number\" >&2; exit\
    \ 1\n    fi\n    if ! [[ \"$2\" =~ ^[0-9]+$ ]] ; then\n        echo \"error: Not\
    \ a number\" >&2; exit 1\n    fi\n    if ! [[ \"$3\" =~ ^[0-9]+$ ]] ; then\n \
    \       echo \"error: Not a number\" >&2; exit 1\n    fi\n    if [ \"$1\" -gt\
    \ 1000 ] || [ \"$2\" -gt 1000 ] || [ \"$3\" -gt 1000 ]\n    then\n        echo\
    \ \"error: values should be smaller than 1000\" >&2; exit 1\n    fi\n    if [\
    \ \"$1\" -lt 0 ] || [ \"$2\" -lt 0 ] || [ \"$3\" -lt 0 ]\n    then\n        echo\
    \ \"error: values should be greater than 0\" >&2; exit 1\n    fi\n    if [ \"\
    $1\" -ge \"$2\" ]\n    then\n        echo \"['\"$1\"', '\"$3\"']\"\n    else\n\
    \        if [ \"$3\" -ge $(($2 - $1)) ]\n        then\n            echo \"['\"\
    $2\"', '\"$(($3 - $(($2 - $1))))\"']\"\n        else\n            echo \"['\"\
    $(($1 + $3))\"', '\"0\"']\"\n        fi\n    fi", "    number=$1\n    need=$2\n\
    \    remaining=$3\n    if (( $remaining <= $need ))\n    then\n        echo \"\
    [\\\"$((remaining+number))\\\", \\\"0\\\"]\"\n    else\n        echo \"[\\\"$((number+need))\\\
    \", \\\"$((remaining-need))\\\"]\"\n    fi", "  # get parameters into local variables\n\
    \  number=\"$1\"\n  need=\"$2\"\n  remaining=\"$3\"\n  # initialize a variable\
    \ for the total number of eaten carrots\n  eaten=0\n  # if the rabbit needs to\
    \ eat more than the remaining carrots\n  if [ $remaining -lt $need ]; then\n \
    \   # eat all the remaining carrots, but it is still hungry\n    echo \"[\\\"\
    $((number + remaining))\\\", \\\"0\\\"]\"\n  # else, if the remaining carrots\
    \ are enough\n  else\n    # eat all the carrots that you need, and be satisfied\n\
    \    echo \"[\\\"$((number + need))\\\", \\\"$((remaining - need))\\\"]\"\n  fi",
  '    echo "[$(( $1 + $2 ))" ", "$(( $3 - $2 ))"]', "  local number=$1\n  local need=$2\n\
    \  local remaining=$3\n  # You should return this array\n  local arr=(\"\" \"\"\
    )\n  if [[ $need -le $remaining ]]; then\n    arr[0]=$(( number + need ))\n  \
    \  arr[1]=$(( remaining - need ))\n  else\n    arr[0]=$(( number + remaining ))\n\
    \    arr[1]=0\n  fi\n  echo \"[\\\"${arr[0]}\\\", \\\"${arr[1]}\\\"]\"", "  remaining=$((\
    \ $3 - $1 ))\n  if [[ remaining -gt $2 ]]; then\n    echo \"['\"$(( $1 + $2 ))\"\
    ', '\"$(( $3 - ($1 + $2) ))\"']\"\n  else\n    echo \"['\"$(( $1 + remaining ))\"\
    ', '\"0\"']\"\n  fi", '  echo "todo";', "  if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2\
    \ =~ ^[0-9]+$ ]] || [[ ! $3 =~ ^[0-9]+$ ]]; then\n    echo \"[\\\"\\\"]\"\n  \
    \  return\n  fi\n  local -i number=$1\n  local -i need=$2\n  local -i remaining=$3\n\
    \  local -i total=$((number + need))\n  if [[ $remaining -ge $need ]]; then\n\
    \    local -i remaining=$((remaining - need))\n  else\n    local -i total=$((number\
    \ + remaining))\n    local -i remaining=0\n  fi\n  echo \"[\\\"$total\\\", \\\"\
    $remaining\\\"]\"", "    local number=\"$1\"\n    local need=\"$2\"\n    local\
    \ remaining=\"$3\"\n    local eaten=$((number + need))\n    local left=$((remaining\
    \ - need))\n    if [[ $left -ge 0 ]]; then\n        echo \"['\"$eaten\"', '\"\
    $left\"']\"\n    else\n        echo \"['\"$eaten\"', '\"0\"']\"\n    fi", "  \
    \  local -n arr=$1\n    echo $arr\n    let \"a=$2+$3\"\n    let \"b=$2-$3\"\n\
    \    echo $a\n    echo $b", "  number=\"$1\"\n  need=\"$2\"\n  remaining=\"$3\"\
    \n  # Write your code here\n  if [ $need -gt $remaining ]; then\n    ate=$((number\
    \ + remaining))\n    left=\"0\"\n  else\n    ate=$((number + need))\n    left=$((remaining\
    \ - need))\n  fi\n  declare -a array=($ate $left)\n  echo ${array[@]}", "    ((\
    \ need - remaining > 0 )) && remaining=0 || remaining=$(( remaining - need ))\n\
    \    echo \"[\\\"$(( number + need ))\\\", \\\"$remaining\\\"]\"", "    eaten=\"\
    $1\"\n    need=\"$2\"\n    remaining=\"$3\"\n    if [ \"$remaining\" -ge \"$need\"\
    \ ]; then\n        echo \"[\\\"$((eaten + need))\\\", \\\"$((remaining - need))\\\
    \"]\"\n    else\n        echo \"[\\\"$((eaten + remaining))\\\", \\\"0\\\"]\"\n\
    \    fi", '   echo "Not yet implemented"', "    #You're a hungry rabbit, and you\
    \ already have eaten a certain number of carrots,\n    #but now you need to eat\
    \ more carrots to complete the day's meals.\n    #you should return an array of\
    \ [ total number of eaten carrots after your meals,\n    #the number of carrots\
    \ left after your meals ]\n    #if there are not enough remaining carrots, you\
    \ will eat all remaining carrots, but will still be hungry.\n    #first argument\
    \ is integer: the number of carrots that you have eaten.\n    #second argument\
    \ is integer: the number of carrots that you need to eat.\n    #third argument\
    \ is integer: the number of remaining carrots thet exist in stock\n    if [[ $2\
    \ -le $3 ]]; then\n        let total= $1 + $2\n        let left= $3 - $2\n   \
    \     return \"['$total', '$left']\"\n    else\n        let total= $1 + $3\n \
    \       left= 0\n        return \"['$total', '$left']\"\n    fi", "  [ $1 -ge\
    \ 0 ] && [ $1 -le 1000 ] && [ $2 -ge 0 ] && [ $2 -le 1000 ] && [ $3 -ge 0 ] &&\
    \ [ $3 -le 1000 ] && [ $# -eq 3 ] || exit 1\n\n  if [ $2 -lt $3 ]; then\n    printf\
    \ \"[\\\"%s\\\", \\\"%s\\\"]\" \"$(( $1 + $2 ))\" \"$(( $3 - $2 ))\"\n  else\n\
    \    printf \"[\\\"%s\\\", \\\"%s\\\"]\" \"$(( $1 + $3 ))\" 0\n  fi", "  num=$1\n\
    \  need=$2\n  rem=$3\n  if [[ $num -lt 0 || $num -gt 1000 ]]; then\n    return\
    \ [1]\n  fi\n  if [[ $need -lt 0 || $need -gt 1000 ]]; then\n    return [1]\n\
    \  fi\n  if [[ $rem -lt 0 || $rem -gt 1000 ]]; then\n    return [1]\n  fi\n  if\
    \ [[ $num + $need -gt $rem ]]; then\n    num=$rem\n  else\n    num=$(($num + $need))\n\
    \  fi\n  rem=$(($rem - $num))\n  echo \"[\\\"$num\\\", \\\"$rem\\\"]\"", "   \
    \ echo \"Your current number of carrots is: \"$1\n    echo \"You need to eat:\
    \ \"$2\n    echo \"There are \"$3\" remaining carrots\"\n    echo \"You have to\
    \ eat \"$2\" more carrots, and there are \"$3\" remaining carrots\"\n    if [\
    \ $3 -le $2 ]\n    then\n        echo \"Not enough carrots, you will eat all remaining\
    \ carrots, but will still be hungry\"\n        echo \"[$1 + $3, $2 - $3]\"\n \
    \   else\n        echo \"There are enough carrots for you to eat\"\n        echo\
    \ \"[$1 + $2, $3 - $2]\"\n    fi", "\t# write your code here", "\t# set -x # debug\n\
    \techo \"eat\" $1 $2 $3\n\techo \"eat $1 $2 $3\" | awk '{print \"[\\\"\"$1+$2\"\
    \\\",\\\"\"$3-$1-$2\"\\\"]\"}'\n\t# set +x # disable debug", '    : # Your code
    goes here', "\tnumber=\"$1\"\n\tneed=\"$2\"\n\tremaining=\"$3\"\n\ttotal=\"$(($number\
    \ + $need))\"\n\tif [ $total -gt $remaining ];then\n\t\tans=\"$remaining\"\n\t\
    else\n\t\tans=\"$total\"\n\tfi\n\trem=\"$(($remaining - $ans))\"\n\tresult=\"\
    [\\\"$ans\\\", \\\"$rem\\\"]\"\n\techo \"$result\"", "  declare -i number=$1\n\
    \  declare -i need=$2\n  declare -i remaining=$3\n  declare -i total\n  declare\
    \ -i left\n\n  total=$number + $need\n  left=$remaining - $need\n\n  if [[ \"\
    $left\" -lt 0 ]]; then\n    left=\"0\"\n  fi\n\n  printf '[\"%s\", \"%s\"]' \"\
    $total\" \"$left\"", "  number=\"$1\"\n  need=\"$2\"\n  remaining=\"$3\"", " \
    \   local number=\"$1\"\n    local need=\"$2\"\n    local remaining=\"$3\"\n \
    \   local total=$((number + need))\n    local ret\n    if [[ $total -gt $remaining\
    \ ]]; then\n        local eaten=$((remaining - number))\n        local left=0\n\
    \        ret=\"[\\\"$remaining\\\", \\\"$left\\\"]\"\n    else\n        local\
    \ eaten=$need\n        local left=$((remaining - total))\n        ret=\"[\\\"\
    $total\\\", \\\"$left\\\"]\"\n    fi\n    echo \"$ret\"", '  #write your solution
    here', "  local totalCarrotsEaten=0\n  local carrotsRemaining=0\n  local carrotsEaten=0\n\
    \  if [ \"$3\" -ge \"$2\" ]; then\n    totalCarrotsEaten=$(( $1 + $2 ))\n    carrotsRemaining=$((\
    \ $3 - $2 ))\n  else\n    totalCarrotsEaten=$(( $1 + $3 ))\n    carrotsRemaining=0\n\
    \  fi\n  echo \"[${totalCarrotsEaten}, ${carrotsRemaining}]\"", "\t[ -z \"$1\"\
    \ ] && echo '1' || echo \"$1\"\n\t[ -z \"$2\" ] && echo '1' || echo \"$2\"\n\t\
    [ -z \"$3\" ] && echo '1' || echo \"$3\"", "    local number=$1\n    local need=$2\n\
    \    local remaining=$3\n    if [ $need -gt $remaining ]; then\n        echo [\\\
    \"$((remaining + number))\\\", \\\"0\\\"]\n    else\n        echo [\\\"$((need\
    \ + number))\\\", \\\"$((remaining - need))\\\"]\n    fi", "  local number=0\n\
    \  local need=0\n  local remaining=0\n  local first_result=0\n  local second_result=0\n\
    \  # [ $# -eq 3 ] && [ \"$1\" -ge 0 ] && [ \"$1\" -le 1000 ] && [ \"$2\" -ge 0\
    \ ] && [ \"$2\" -le 1000 ] && [ \"$3\" -ge 0 ] && [ \"$3\" -le 1000 ] && \\\n\
    \  # number=\"$1\" && need=\"$2\" && remaining=\"$3\" && \\\n  # first_result=$((\
    \ number + need )) && \\\n  # second_result=$(( remaining - need )) && \\\n  #\
    \ first_result=$(awk '{if ($1 >= $2) {print $2} else {print $1}}' \"$number\"\
    \ \"$need\") && \\\n  # second_result=$(awk '{if ($1 <= $2) {print $2} else {print\
    \ $1}}' \"$remaining\" \"$need\") && \\\n  first_result=$(awk '{if ($1 <= $2)\
    \ {print $2} else {print $1}}' \"$1\" \"$2\") && \\\n  second_result=$(awk '{if\
    \ ($1 >= $2) {print $2} else {print $1}}' \"$3\" \"$2\") && \\\n  echo \"['\\\"\
    $first_result\\\"', '\\\"$second_result\\\"']\"", "    if [[ \"$1\" -ge \"0\"\
    \ && \"$1\" -le \"1000\" && \"$2\" -ge \"0\" && \"$2\" -le \"1000\" && \"$3\"\
    \ -ge \"0\" && \"$3\" -le \"1000\" ]]; then\n        if [[ \"$1\" -ge \"0\" &&\
    \ \"$1\" -le \"1000\" && \"$2\" -ge \"0\" && \"$2\" -le \"1000\" && \"$3\" -ge\
    \ \"0\" && \"$3\" -le \"1000\" ]]; then\n            if [[ (\"$1\" -eq \"0\" &&\
    \ \"$2\" -eq \"0\" && \"$3\" -eq \"0\") || (\"$1\" -gt \"0\" && \"$2\" -eq \"\
    0\" && \"$3\" -eq \"0\") || (\"$1\" -eq \"0\" && \"$2\" -gt \"0\" && \"$3\" -eq\
    \ \"0\") || (\"$1\" -eq \"0\" && \"$2\" -eq \"0\" && \"$3\" -gt \"0\") ]]; then\n\
    \                echo \"[]\"\n            elif [[ \"$1\" -eq \"0\" && \"$2\" -gt\
    \ \"0\" && \"$3\" -gt \"0\" ]]; then\n                echo \"[\\\"$2\\\", \\\"\
    $3\\\"]\"\n            elif [[ \"$1\" -gt \"0\" && \"$2\" -eq \"0\" && \"$3\"\
    \ -gt \"0\" ]]; then\n                echo \"[\\\"$1\\\", \\\"$3\\\"]\"\n    \
    \        elif [[ \"$1\" -gt \"0\" && \"$2\" -gt \"0\" && \"$3\" -eq \"0\" ]];\
    \ then\n                total=\"$(($1 + $2))\"\n                if [[ \"$total\"\
    \ -gt \"1000\" ]]; then\n                    echo \"[\\\"1000\\\", \\\"0\\\"]\"\
    \n                else\n                    echo \"[\\\"$total\\\", \\\"0\\\"\
    ]\"\n                fi\n            elif [[ \"$1\" -gt \"0\" && \"$2\" -gt \"\
    0\" && \"$3\" -gt \"0\" ]]; then\n                if [[ \"$2\" -gt \"$3\" ]];\
    \ then\n                    echo \"[\\\"$(($1 + $3))\\\", \\\"0\\\"]\"\n     \
    \           else\n                    echo \"[\\\"$(($1 + $2))\\\",", '    # Write
    your code here', "    if (($1>0 && $1<=1000 && $2>0 && $2<=1000 && $3>0 && $3<=1000))\n\
    \    then\n        if (($2<=$3))\n        then\n            echo \"[\\\"$(($1+$2))\\\
    \", \\\"$(($3-$2))\\\"]\"\n        else\n            echo \"[\\\"$(($1+$3))\\\"\
    , \\\"0\\\"]\"\n        fi\n    else\n        echo \"0\"\n    fi", "  eaten=0\n\
    \  remainder=0\n  leftover=0\n  if [ $2 -lt $3 ]; then\n    remainder=$(( $3 -\
    \ $2 ))\n    if [ $remainder -gt $1 ]; then\n      eaten=$(( $1 + $2 ))\n    \
    \  leftover=$(( $remainder - $1 ))\n    else\n      eaten=$(( $1 + $2 ))\n   \
    \   leftover=0\n    fi\n  else\n    eaten=$(( $1 + $3 ))\n    leftover=0\n  fi\n\
    \  echo \"['\"$eaten\"', '\"$leftover\"']\"", "    [ \"$1\" -ge \"0\" ] && [ \"\
    $1\" -le \"1000\" ] || return 1\n    [ \"$2\" -ge \"0\" ] && [ \"$2\" -le \"1000\"\
    \ ] || return 1\n    [ \"$3\" -ge \"0\" ] && [ \"$3\" -le \"1000\" ] || return\
    \ 1\n    # Write your code here\n    # Good luck :)\n    #\n    #\n    #\n   \
    \ #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n", "  number=$1\n  need=$2\n  remaining=$3\n\
    \  result=$(( number + need ))\n  if [ $result -gt $remaining ]; then\n    result=$((\
    \ remaining + number ))\n    remaining=0\n  else\n    remaining=$(( remaining\
    \ - result ))\n  fi\n  echo \"[\\\"$result\\\", \\\"$remaining\\\"]\"", "  _number=$1\n\
    \  _need=$2\n  _remaining=$3\n  if [[ $((_remaining-_need)) -ge 0 ]]; then\n \
    \   _need=0\n    _remaining=$((_remaining-_need))\n  else\n    _need=$((_need-_remaining))\n\
    \    _remaining=0\n  fi\n  printf \"['\"%d\"', '\"%d\"']\" $((_number+_remaining))\
    \ $_need", '    printf "[\"%d\", \"%d\"]" $(( $1 + $2 )) $(( $3 - $2 > 0 ? $3
    - $2 : 0 ))', "  # Your code here:\n  if [ $2 -le $3 ]\n  then\n    echo \"Your\
    \ score is : $[$1 + $2] / $3\"\n  else\n    echo \"Your score is : $[$1 + $3]\
    \ / $3\"\n  fi", "  # clear screen\n  clear\n\n  # initialize variables\n  local\
    \ number=$1\n  local need=$2\n  local remaining=$3\n  local total=$(($number +\
    \ $need))\n  local eat=\"\"\n\n  # output number of carrots eaten previously\n\
    \  echo \"You have already eaten $number carrots\"\n\n  # if we have more carrots\
    \ than we need, eat everything\n  if [[ $total -le $remaining ]]; then\n    eat=$(($total))\n\
    \    remaining=$(($remaining - $total))\n  # if we don't have enough, eat all\
    \ carrots and still be hungry\n  else\n    eat=$(($remaining))\n    remaining=0\n\
    \  fi\n\n  # format our output\n  echo \"You will eat $eat carrots\"\n  echo \"\
    You are left with $remaining carrots\"\n  echo \"---\"\n  echo \"[\\\"$eat\\\"\
    , \\\"$remaining\\\"]\"", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  # Write your code here\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n\
    \  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n \
    \ #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n  #\n", "  local number=\"\
    $1\"\n  local need=\"$2\"\n  local remaining=\"$3\"\n  local max=$((remaining+number))\n\
    \  local result=$((max>need?need:max))\n  local remained=$((max-result))\n  echo\
    \ [$result, $remained]", "  declare -i number\n  declare -i need\n  declare -i\
    \ remaining\n  declare -i total\n  declare -i left\n\n  number=\"$1\"\n  need=\"\
    $2\"\n  remaining=\"$3\"\n\n  total=\"$number\" + \"$need\"\n  left=\"$remaining\"\
    \ - \"$need\"\n\n  if [ $left -lt 0 ]; then\n    left=0\n  fi\n\n  echo '[\\\"\
    $total\\\", \\\"$left\\\"]'", "    local NUMBER=$1\n    local NEED=$2\n    local\
    \ REMAINING=$3\n    local RESULT=${NUMBER}\n    if [ \"${NEED}\" -gt 0 ]; then\n\
    \        if [ \"${REMAINING}\" -gt 0 ]; then\n            if [ \"${REMAINING}\"\
    \ -gt \"${NEED}\" ]; then\n                RESULT=$((${NUMBER} + ${NEED}))\n \
    \               REMAINING=$((${REMAINING} - ${NEED}))\n            else\n    \
    \            RESULT=$((${NUMBER} + ${REMAINING}))\n                REMAINING=0\n\
    \            fi\n        fi\n    fi\n    echo \"\\\"${RESULT}\\\"\"\n    echo\
    \ \"\\\"${REMAINING}\\\"\"", "  local number=$1\n  local need=$2\n  local remaining=$3\n\
    \  if [ $remaining -ge $need ]; then\n    let local total=$number+$need\n    let\
    \ local left=$remaining-$need\n    echo \"[\\\"$total\\\", \\\"$left\\\"]\"\n\
    \  else\n    let local total=$number+$remaining\n    echo \"[\\\"$total\\\", \\\
    \"0\\\"]\"\n  fi", "  if (( $1 >= 0 && $1 <= 1000 )) && (( $2 >= 0 && $2 <= 1000\
    \ )) && (( $3 >= 0 && $3 <= 1000 )); then\n    echo \"[\"\n    let \"x = $1 +\
    \ $2\"\n    echo \"\\\"$x\\\"\"\n    if (( $x > $3 )); then\n      let \"x = $x\
    \ - $3\"\n      let \"x = $2 - $x\"\n      echo \"\\\"$x\\\"\"\n    else\n   \
    \   echo \"\\\"0\\\"\"\n    fi\n    echo \"]\"\n  fi", "  number=\"$1\"\n  need=\"\
    $2\"\n  remaining=\"$3\"\n  total=\"$((number + need))\"\n  if [ \"$need\" -gt\
    \ \"$remaining\" ]; then\n    echo \"[\\\"$((number + remaining))\\\", \\\"0\\\
    \"]\"\n  else\n    echo \"[\\\"$total\\\", \\\"$((remaining - need))\\\"]\"\n\
    \  fi", "    declare -i number=$1\n    declare -i need=$2\n    declare -i remaining=$3\n\
    \    declare -i total_number_of_eaten_carrots=number+need\n    if [[ $total_number_of_eaten_carrots\
    \ -ge $remaining ]]; then\n        declare -i number_of_carrots_left=0\n    else\n\
    \        declare -i number_of_carrots_left=remaining-total_number_of_eaten_carrots\n\
    \    fi\n    printf \"%s\\n\" \"['\\\"${total_number_of_eaten_carrots}\\\"', '\\\
    \"${number_of_carrots_left}\\\"']\"", "  local number=$1\n  local need=$2\n  local\
    \ remaining=$3\n  if [[ $need -gt $remaining ]]; then\n    echo \"[\\\"\"$((number\
    \ + remaining))\"\\\", \\\"\"0\"\\\"]\"\n  else\n    echo \"[\\\"\"$((number +\
    \ need))\"\\\", \\\"\"$((remaining - need))\"\\\"]\"\n  fi"]
stop_tokens:
- "\n}"
