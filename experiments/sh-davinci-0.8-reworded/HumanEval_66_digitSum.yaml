name: HumanEval_66_digitSum
language: sh
prompt: "#!/bin/bash\n# Task\n# Write a function that takes a string as input and\
  \ returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n#\
  \ >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum\
  \ \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum\
  \ \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is\
  \ a string\ndigitSum() {\n"
tests: "}\n\ncandidate() {\n    digitSum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abAB\") = \"131\" ]]\n    [[\
  \ $(candidate \"abcCd\") = \"67\" ]]\n    [[ $(candidate \"helloE\") = \"69\" ]]\n\
  \    [[ $(candidate \"woArBld\") = \"131\" ]]\n    [[ $(candidate \"aAaaaXa\") =\
  \ \"153\" ]]\n    [[ $(candidate \" How are yOu?\") = \"151\" ]]\n    [[ $(candidate\
  \ \"You arE Very Smart\") = \"327\" ]]\n}\n\nrun_test"
completions: ["    echo \"$1\" | tr -dc \"[:upper:]\" | od -An -tx1 | awk '{sum +=$1}\
    \ END {print sum}'", "  local sum=0\n  local d\n  echo \"$1\" | sed 's/[^A-Z]//g'\
    \ | while read -r d; do\n    sum=$((sum + $(ord \"$d\")))\n  done\n  echo \"$sum\"",
  "    echo \"$1\" | grep -o \"[A-Z]\" | awk '{s+=$1} END {print s}'", "\tsum=0\n\t\
    for ((i=0; i<${#1}; i++)); do\n\t\tch=\"${1:$i:1}\"\n\t\tord=\"$(printf \"%d\"\
    \ \"'$ch\")\"\n\t\tif [ $ord -ge 65 ] && [ $ord -le 90 ]; then\n\t\t\t((sum+=ord))\n\
    \t\tfi\n\tdone\n\techo $sum", "    declare -i sum\n    for (( i=0; i<${#1}; i++\
    \ )); do\n        if [[ \"${1:$i:1}\" =~ [A-Z] ]]; then\n            sum+=$(printf\
    \ \"%d\" \"'${1:$i:1}\")\n        fi\n    done\n    echo $sum", "\t\techo \"$1\"\
    \ | tr -dc '[:upper:]' | awk '{\n\t\t\t\t\t\tsum=0\n\t\t\t\t\t\tfor(i=1;i<=length;i++)\n\
    \t\t\t\t\t\t\t\t\t\tsum+=1+ord(substr($0,i,1))\n\t\t\t\t\t\tprint sum\n\t\t}'",
  "    local output=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        local c=${1:$i:1}\n\
    \        [ \"$c\" == \"${c^^}\" ] && output+=\"$c\"\n    done\n    sumDigits $output",
  "  local str=$1\n  if [ ${#str} -eq 0 ]; then\n    echo 0\n  else\n    local sum=0\n\
    \    local -a uppers\n    uppers=$(echo $str | tr -d \"[:lower:]\")\n    for i\
    \ in $(seq 0 $((${#uppers} - 1))); do\n      c=${uppers:$i:1}\n      ascii=$(printf\
    \ %d \"'$c\")\n      sum=$((sum + ascii))\n    done\n    echo $sum\n  fi", " \
    \ local -r str=\"$1\"\n  local -r len=${#str}\n  local -i i=0\n  local -i sum=0\n\
    \  local -i asciiCode=0\n  for ((i=0; i<len; i++)); do\n    asciiCode=${str:i:1}\n\
    \    if [[ \"$asciiCode\" == [[:upper:]] ]]; then\n      sum=$((sum + $(printf\
    \ \"%d\" \"'$asciiCode\")))\n    fi\n  done\n  echo \"$sum\"", "    if [[ -z $1\
    \ ]]; then\n        echo 0\n    else\n        echo \"$1\" | tr -cd [:upper:] |\
    \ xargs -I {} echo -n '{} ' | bc\n    fi", "    local dsum=0\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        c=${1:i:1}\n        ascii=$(printf '%d' \"'$c\"\
    )\n        #echo \"  $ascii\"\n        if [[ $ascii -ge 65 && $ascii -le 90 ]];\
    \ then\n            (( dsum += $ascii ))\n        fi\n    done\n    echo $dsum",
  "    local -i total=0\n\n    for (( i=0; i<${#1}; i++ )); do\n        local -i charCode=${1:i:1}\n\
    \        if (( charCode >= 65 && charCode <= 90 )); then\n            (( total\
    \ += charCode ))\n        fi\n    done\n\n    echo $total", "    local -l string=$1\n\
    \    echo \"${string}\" | grep -o '[A-Z]' | sed -e 's/A/65/g' -e 's/B/66/g' -e\
    \ 's/C/67/g' -e 's/D/68/g' -e 's/E/69/g' -e 's/F/70/g' -e 's/G/71/g' -e 's/H/72/g'\
    \ -e 's/I/73/g' -e 's/J/74/g' -e 's/K/75/g' -e 's/L/76/g' -e 's/M/77/g' -e 's/N/78/g'\
    \ -e 's/O/79/g' -e 's/P/80/g' -e 's/Q/81/g' -e 's/R/82/g' -e 's/S/83/g' -e 's/T/84/g'\
    \ -e 's/U/85/g' -e 's/V/86/g' -e 's/W/87/g' -e 's/X/88/g' -e 's/Y/89/g' -e 's/Z/90/g'\
    \ | tr -d '\\n' | bc", "    # Strip all non-upper characters\n    echo $1 | tr\
    \ -dc '[:upper:]' |\n    # Convert to ASCII code\n    xargs printf '%d ' |\n \
    \   # Sum ASCII codes\n    paste -sd+ |\n    # Evaluate sum\n    bc", "    local\
    \ string=${1^^} # convert to upper case\n    local sum=0\n    local char\n   \
    \ for ((i=0; i<${#string}; i++)); do\n        char=${string:i:1}\n        ((sum+=$(ord\
    \ $char)))\n    done\n    echo $sum", "  [ -z \"$1\" ] && echo \"0\" && return\
    \ 0\n\n  local i sum\n  for ((i=0; i<${#1}; i++)); do\n    if [[ \"${1:$i:1}\"\
    \ =~ [A-Z] ]]; then\n      sum=$(( sum + $(printf \"%d\" \"'${1:$i:1}\") ))\n\
    \    fi\n  done\n  echo \"$sum\"", "    if [[ -z $1 ]]; then\n        echo \"\
    0\"\n    else\n        local sum=0\n        for ((i=0; i<${#1}; i++)); do\n  \
    \          local ascii=$(printf '%d' \"'${1:i:1}\")\n            ((ascii >= 65\
    \ && ascii <= 90)) && ((sum+=ascii))\n        done\n        echo \"$sum\"\n  \
    \  fi", "    s=$1\n    sum=0\n    for((i=0;i<${#s};i++)); do\n        if [[ \"\
    ${s:$i:1}\" =~ [A-Z] ]]; then\n            ((sum += $(printf \"%d\" \"'${s:$i:1}\"\
    )))\n        fi\n    done\n    echo $sum", "  \n  if [[ $# -ne 1 ]]; then\n  \
    \  exit 1\n  fi\n\n  local count=0\n  local total=0\n  local str=$1\n  while [[\
    \ $count -lt ${#str} ]]; do\n    if [[ $(ord ${str:$count:1}) -ge $(ord 'A') ]]\
    \ && [[ $(ord ${str:$count:1}) -le $(ord 'Z') ]]; then\n      total=$((total +\
    \ $(ord ${str:$count:1})))\n    fi\n    count=$((count + 1))\n  done\n  echo $total",
  "  local string=\"$1\"\n  local sum=0\n  for ((i=0; i<${#string}; i++)); do\n  \
    \  local char=${string:$i:1}\n    if [[ $char =~ [A-Z] ]]; then\n      ((sum+=$(printf\
    \ \"%d\" \\'$char)))\n    fi\n  done\n  echo $sum"]
stop_tokens:
- "\n}"
