name: HumanEval_66_digitSum
language: sh
prompt: "#!/bin/bash\n# Task\n# Write a function that takes a string as input and\
  \ returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n#\
  \ >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum\
  \ \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum\
  \ \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is\
  \ a string\ndigitSum() {\n"
tests: "}\n\ncandidate() {\n    digitSum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"abAB\") = \"131\" ]]\n    [[\
  \ $(candidate \"abcCd\") = \"67\" ]]\n    [[ $(candidate \"helloE\") = \"69\" ]]\n\
  \    [[ $(candidate \"woArBld\") = \"131\" ]]\n    [[ $(candidate \"aAaaaXa\") =\
  \ \"153\" ]]\n    [[ $(candidate \" How are yOu?\") = \"151\" ]]\n    [[ $(candidate\
  \ \"You arE Very Smart\") = \"327\" ]]\n}\n\nrun_test"
completions: ["    echo \"$1\" | tr -dc \"[:upper:]\" | od -An -tx1 | awk '{sum +=$1}\
    \ END {print sum}'", "  local sum=0\n  local d\n  echo \"$1\" | sed 's/[^A-Z]//g'\
    \ | while read -r d; do\n    sum=$((sum + $(ord \"$d\")))\n  done\n  echo \"$sum\"",
  "    echo \"$1\" | grep -o \"[A-Z]\" | awk '{s+=$1} END {print s}'", "\tsum=0\n\t\
    for ((i=0; i<${#1}; i++)); do\n\t\tch=\"${1:$i:1}\"\n\t\tord=\"$(printf \"%d\"\
    \ \"'$ch\")\"\n\t\tif [ $ord -ge 65 ] && [ $ord -le 90 ]; then\n\t\t\t((sum+=ord))\n\
    \t\tfi\n\tdone\n\techo $sum", "    declare -i sum\n    for (( i=0; i<${#1}; i++\
    \ )); do\n        if [[ \"${1:$i:1}\" =~ [A-Z] ]]; then\n            sum+=$(printf\
    \ \"%d\" \"'${1:$i:1}\")\n        fi\n    done\n    echo $sum", "\t\techo \"$1\"\
    \ | tr -dc '[:upper:]' | awk '{\n\t\t\t\t\t\tsum=0\n\t\t\t\t\t\tfor(i=1;i<=length;i++)\n\
    \t\t\t\t\t\t\t\t\t\tsum+=1+ord(substr($0,i,1))\n\t\t\t\t\t\tprint sum\n\t\t}'",
  "    local output=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        local c=${1:$i:1}\n\
    \        [ \"$c\" == \"${c^^}\" ] && output+=\"$c\"\n    done\n    sumDigits $output",
  "  local str=$1\n  if [ ${#str} -eq 0 ]; then\n    echo 0\n  else\n    local sum=0\n\
    \    local -a uppers\n    uppers=$(echo $str | tr -d \"[:lower:]\")\n    for i\
    \ in $(seq 0 $((${#uppers} - 1))); do\n      c=${uppers:$i:1}\n      ascii=$(printf\
    \ %d \"'$c\")\n      sum=$((sum + ascii))\n    done\n    echo $sum\n  fi", " \
    \ local -r str=\"$1\"\n  local -r len=${#str}\n  local -i i=0\n  local -i sum=0\n\
    \  local -i asciiCode=0\n  for ((i=0; i<len; i++)); do\n    asciiCode=${str:i:1}\n\
    \    if [[ \"$asciiCode\" == [[:upper:]] ]]; then\n      sum=$((sum + $(printf\
    \ \"%d\" \"'$asciiCode\")))\n    fi\n  done\n  echo \"$sum\"", "    if [[ -z $1\
    \ ]]; then\n        echo 0\n    else\n        echo \"$1\" | tr -cd [:upper:] |\
    \ xargs -I {} echo -n '{} ' | bc\n    fi", "    local dsum=0\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        c=${1:i:1}\n        ascii=$(printf '%d' \"'$c\"\
    )\n        #echo \"  $ascii\"\n        if [[ $ascii -ge 65 && $ascii -le 90 ]];\
    \ then\n            (( dsum += $ascii ))\n        fi\n    done\n    echo $dsum",
  "    local -i total=0\n\n    for (( i=0; i<${#1}; i++ )); do\n        local -i charCode=${1:i:1}\n\
    \        if (( charCode >= 65 && charCode <= 90 )); then\n            (( total\
    \ += charCode ))\n        fi\n    done\n\n    echo $total", "    local -l string=$1\n\
    \    echo \"${string}\" | grep -o '[A-Z]' | sed -e 's/A/65/g' -e 's/B/66/g' -e\
    \ 's/C/67/g' -e 's/D/68/g' -e 's/E/69/g' -e 's/F/70/g' -e 's/G/71/g' -e 's/H/72/g'\
    \ -e 's/I/73/g' -e 's/J/74/g' -e 's/K/75/g' -e 's/L/76/g' -e 's/M/77/g' -e 's/N/78/g'\
    \ -e 's/O/79/g' -e 's/P/80/g' -e 's/Q/81/g' -e 's/R/82/g' -e 's/S/83/g' -e 's/T/84/g'\
    \ -e 's/U/85/g' -e 's/V/86/g' -e 's/W/87/g' -e 's/X/88/g' -e 's/Y/89/g' -e 's/Z/90/g'\
    \ | tr -d '\\n' | bc", "    # Strip all non-upper characters\n    echo $1 | tr\
    \ -dc '[:upper:]' |\n    # Convert to ASCII code\n    xargs printf '%d ' |\n \
    \   # Sum ASCII codes\n    paste -sd+ |\n    # Evaluate sum\n    bc", "    local\
    \ string=${1^^} # convert to upper case\n    local sum=0\n    local char\n   \
    \ for ((i=0; i<${#string}; i++)); do\n        char=${string:i:1}\n        ((sum+=$(ord\
    \ $char)))\n    done\n    echo $sum", "  [ -z \"$1\" ] && echo \"0\" && return\
    \ 0\n\n  local i sum\n  for ((i=0; i<${#1}; i++)); do\n    if [[ \"${1:$i:1}\"\
    \ =~ [A-Z] ]]; then\n      sum=$(( sum + $(printf \"%d\" \"'${1:$i:1}\") ))\n\
    \    fi\n  done\n  echo \"$sum\"", "    if [[ -z $1 ]]; then\n        echo \"\
    0\"\n    else\n        local sum=0\n        for ((i=0; i<${#1}; i++)); do\n  \
    \          local ascii=$(printf '%d' \"'${1:i:1}\")\n            ((ascii >= 65\
    \ && ascii <= 90)) && ((sum+=ascii))\n        done\n        echo \"$sum\"\n  \
    \  fi", "    s=$1\n    sum=0\n    for((i=0;i<${#s};i++)); do\n        if [[ \"\
    ${s:$i:1}\" =~ [A-Z] ]]; then\n            ((sum += $(printf \"%d\" \"'${s:$i:1}\"\
    )))\n        fi\n    done\n    echo $sum", "  \n  if [[ $# -ne 1 ]]; then\n  \
    \  exit 1\n  fi\n\n  local count=0\n  local total=0\n  local str=$1\n  while [[\
    \ $count -lt ${#str} ]]; do\n    if [[ $(ord ${str:$count:1}) -ge $(ord 'A') ]]\
    \ && [[ $(ord ${str:$count:1}) -le $(ord 'Z') ]]; then\n      total=$((total +\
    \ $(ord ${str:$count:1})))\n    fi\n    count=$((count + 1))\n  done\n  echo $total",
  "  local string=\"$1\"\n  local sum=0\n  for ((i=0; i<${#string}; i++)); do\n  \
    \  local char=${string:$i:1}\n    if [[ $char =~ [A-Z] ]]; then\n      ((sum+=$(printf\
    \ \"%d\" \\'$char)))\n    fi\n  done\n  echo $sum", "    for character in $(echo\
    \ $1 | fold -w1); do\n        if [[ \"$character\" =~ [A-Z] ]]; then\n       \
    \     sum=$((sum + $(printf \"%d\" \"'$character\")))\n        fi\n    done\n\
    \    echo $sum", "  local sum=0\n  local -a myarr\n  local len=${#1}\n  #echo\
    \ \"len: $len\"\n  for ((i=0; i<len; i++)); do\n    #echo \"substring: ${1:$i:1}\"\
    \n    myarr[$i]=${1:$i:1}\n    #echo \"${myarr[$i]}\"\n    if [[ ${myarr[$i]}\
    \ =~ [A-Z] ]]; then\n      #echo \"Yes it's uppercase.\"\n      sum=$((sum + ${myarr[$i]}))\n\
    \    fi\n  done\n  echo \"$sum\"", "\tstring=\"$1\"\n\tres=0\n\tfor (( i=0; i<${#string};\
    \ i++ )); do\n\t\t# If string[i] is a lowercase letter\n\t\tif [[ \"${string:$i:1}\"\
    \ =~ [a-z] ]]; then\n\t\t\tres=$((res + ${string:$i:1} - 96))\n\t\telse\n\t\t\t\
    res=$((res + ${string:$i:1} - 64))\n\t\tfi\n\tdone\n\techo \"$res\"", "    input_string=\"\
    $1\"\n    echo \"$input_string\" | tr -dc 'A-Z' | fold -w1 | paste -sd+ | bc",
  "  # define a var to store the result\n  local sum=0\n  # iterate and get the ascii\
    \ code\n  for (( i=0; i<${#1}; i++ )); do\n    local c=$(echo \"${1:$i:1}\" |\
    \ tr '[:lower:]' '[:upper:]')\n    # get the ascii value\n    local asciiValue=$(printf\
    \ \"%d\" \"'$c\")\n    # add to the sum if the ascii value is in the range of\
    \ 65 to 90\n    if [[ $asciiValue -ge 65 && $asciiValue -le 90 ]]; then\n    \
    \  sum=$(( sum + asciiValue ))\n    fi\n  done\n  # return the result\n  echo\
    \ $sum", "  local S\n  local CH\n  local NUM\n  local SUM\n  S=$1\n  while [ -n\
    \ \"$S\" ]; do\n    CH=$(expr substr \"$S\" 1 1)\n    if [ \"$(echo \"$CH\" |\
    \ tr '[:lower:]' '[:upper:]')\" = \"$CH\" ]; then\n      NUM=$(echo \"$CH\" |\
    \ od -An -N1 -td1)\n      SUM=$((SUM + NUM))\n    fi\n    S=${S#?}\n  done\n \
    \ echo \"$SUM\"", "    # digitSum is a function that takes a string as input and\
    \ returns the sum of the upper characters only' ASCII codes.\n    #\n    # Usage:\n\
    \    #    digitSum \"string\"\n    #\n    # Examples:\n    #    digitSum \"abAB\"\
    \n    #    131\n    #    digitSum \"woArBld\"\n    #    131\n    #\n    # Arguments:\n\
    \    #   string (string) - a string of characters\n\n    # Start a counter\n \
    \   counter=0\n\n    # Loop through each character and compare the character to\
    \ a list of uppercase characters\n    # If it matches an uppercase character,\
    \ add its ASCII character code to the counter\n    for (( i=0; i<${#1}; i++ ));\
    \ do\n        if [[ \"${1:$i:1}\" =~ [A-Z] ]]; then\n            counter=$(( counter\
    \ + \"${1:$i:1}\" ))\n        fi\n    done\n\n    # Echo the result\n    echo\
    \ \"$counter\"", "    echo $1 | grep -o '[A-Z]' | wc -m", "    # Put your code\
    \ here\n    str=${1^^}\n    sum=0\n    for (( i=0; i<${#str}; i++ )); do\n   \
    \     sum=$(( sum + ${str:$i:1} ))\n    done\n    echo $sum", '    printf "%d"
    "0x${1^^}"; # prints the result in decimal', "  echo $(($(tr -d [a-z] <<< $1 |\
    \ tr -d \"\\n\" | awk '{print length($0)}')))", "    echo $1 | tr -dc [:upper:]\
    \ | awk '{for(i=1;i<=NF;i++) {printf(\"%d\",$i);}}'", "  echo $1 | tr -cd '[:upper:]'\
    \ | awk '{\n    a = 0\n    for (i = 1; i <= length($0); i++) {\n      a += substr($0,\
    \ i, 1)\n    }\n    print a\n  }'", "    if [ -z \"$1\" ]; then\n        echo\
    \ \"0\"\n    else\n        echo $1 | tr -cd [:upper:] | tr -d '' | wc -c\n   \
    \ fi", "        local str=\"$1\"\n        for (( i=0; i<${#str}; i++ )); do\n\
    \                printf \"%d\" \"'${str:$i:1}\"\n        done |\n        tr -d\
    \ '\\n' |\n        grep -Eo '[6-9A-F]' |\n        tr -d '\\n' |\n        while\
    \ read -n1 digit; do\n                printf \"%d\" \"'$digit\"\n        done\
    \ |\n        tr -d '\\n' |\n        sed 's/0//g' |\n        bc", "  string=$1\n\
    \  sum=0\n  for i in $(seq 0 $((${#string} - 1))); do\n    char=$(echo \"${string:$i:1}\"\
    \ | tr [:lower:] [:upper:])\n    # echo \"char: $char\"\n    case $char in\n \
    \     [A-Z])\n        sum=$((sum + (10#$(printf \"%d\" \\'$char)) - 64))\n   \
    \     ;;\n    esac\n  done\n  echo $sum", "    nums=$(echo \"$1\" | tr -s [:alpha:]\
    \ | tr '[:lower:]' '[:upper:]')\n    printf \"%s\" \"$nums\" | awk '{sum=0;for(i=1;i<=NF;i++)sum+=$i;print\
    \ sum}'", "    awk -v RS=\"[a-z]\" '{s+=$0} END {print s}' <<< \"$1\"", "    #\
    \ trap any errors\n    local sum=0\n    # loop through the string\n    for ((\
    \ i=0; i<${#1}; i++ ))\n    do\n        if [[ ${1:$i:1} =~ [A-Z] ]]\n        then\n\
    \            (( sum+=${1:$i:1} ))\n        fi\n    done\n    echo $sum", "   \
    \ local digitsum=0\n    local -i i\n    local -i len\n    local -i c\n\n    len=${#1}\n\
    \    for ((i=0; i<len; i++)); do\n        (( c = ${1:i:1} ))\n        if [[ $c\
    \ -ge 65 && $c -le 90 ]]; then\n            (( digitsum += c ))\n        fi\n\
    \    done\n    echo \"$digitsum\"", "    echo \"$1\" | awk 'BEGIN {sum=0} {for(i=1;i<=length($0);i++)\
    \ if(toupper(substr($0,i,1)) == substr($0,i,1)) sum += (substr($0,i,1))} END {print\
    \ sum}'", "  local sum\n  local asciiNum\n  for ((i=0; i<${#1}; i++)); do\n  \
    \  if [[ ${1:$i:1} =~ [[:upper:]] ]]; then\n      sum+=$(printf \"%d\" \"'${1:$i:1}\"\
    )\n    fi\n  done\n  printf \"%d\" \"$sum\"", "    # We can use a regex to extract\
    \ the uppercase characters from the string and then use\n    # bash's arithmetic\
    \ builtin to get their sum.\n    printf '%d' \"'$(echo \"$1\" | grep -o '[A-Z]')\"",
  "    echo $1 | egrep '[A-Z]' | sed 's/\\(.\\)/\\1 /g' | awk '{sum += $1;}; END {print\
    \ sum}'", "\tif [ -z \"$1\" ]; then\n\t\t# No input, return 0\n\t\techo \"0\"\n\
    \telse\n\t\techo \"$1\" | sed -e 's/[^A-Z]//g' | \\\n\t\t\tsed -e 's/\\(.\\)/\
    \ \\1/g' | \\\n\t\t\tsed -e 's/A/65/g' | \\\n\t\t\tsed -e 's/B/66/g' | \\\n\t\t\
    \tsed -e 's/C/67/g' | \\\n\t\t\tsed -e 's/D/68/g' | \\\n\t\t\tsed -e 's/E/69/g'\
    \ | \\\n\t\t\tsed -e 's/F/70/g' | \\\n\t\t\tsed -e 's/G/71/g' | \\\n\t\t\tsed\
    \ -e 's/H/72/g' | \\\n\t\t\tsed -e 's/I/73/g' | \\\n\t\t\tsed -e 's/J/74/g' |\
    \ \\\n\t\t\tsed -e 's/K/75/g' | \\\n\t\t\tsed -e 's/L/76/g' | \\\n\t\t\tsed -e\
    \ 's/M/77/g' | \\\n\t\t\tsed -e 's/N/78/g' | \\\n\t\t\tsed -e 's/O/79/g' | \\\n\
    \t\t\tsed -e 's/P/80/g' | \\\n\t\t\tsed -e 's/Q/81/g' | \\\n\t\t\tsed -e 's/R/82/g'\
    \ | \\\n\t\t\tsed -e 's/S/83/g' | \\\n\t\t\tsed -e 's/T/84/g' | \\\n\t\t\tsed\
    \ -e 's/U/85/g' | \\\n\t\t\tsed -e 's/V/86/g' | \\\n\t\t\tsed -e 's/W/87/g' |\
    \ \\\n\t\t\tsed -e 's/X/88/g' | \\\n\t\t", "  local sum=0\n  for (( i=0; i<${#1};\
    \ i++ )); do\n    local char=$(printf %d \"'${1:i:1}\")\n    if [[ $char -ge 65\
    \ && $char -le 90 ]]; then\n      (( sum+=char ))\n    fi\n  done\n  echo $sum",
  "\t# Convert String to an array of characters.\n\t# We need to use eval in order\
    \ to evaluate the string expression\n\t# We convert the string to an array by\
    \ IFS=''; arr=($1)\n\t# Then we add all the upper case characters by looping through\n\
    \t# the array, and adding the ones we want to the variable sum\n\t#\n\t# Note\
    \ that this is not a good method, as it uses eval, which can\n\t# introduce bugs,\
    \ and also it will only work if the string only\n\t# contains letters and numbers,\
    \ if we have special characters,\n\t# it will throw an error.\n\teval \"sum=0;\
    \ IFS=''; arr=($1); for c in \\${arr[@]}; do sum=\\$((\\$sum + \\$c)); done; echo\
    \ \\$sum\"", "    local sum=0\n    for (( i=0; i<${#1}; i++ )); do\n        local\
    \ char=${1:$i:1}\n        if [[ \"$char\" =~ ^[A-Z]$ ]]; then\n            sum=$((\
    \ sum + $(printf \"%d\" \\'$char) ))\n        fi\n    done\n    echo $sum", " \
    \ s=0\n  for ((i=0; i<${#1}; i++)); do\n    if [[ ${1:$i:1} =~ [A-Z] ]]; then\n\
    \      # The ascii value is equal to the value of the character.\n      # The\
    \ following bashism evaluates the value of the character and adds it to the sum.\n\
    \      ((s+=${1:$i:1}))\n    fi\n  done\n  echo \"$s\"", "    echo \"$@\" | sed\
    \ 's/[^A-Z]//g' | xargs printf \"%d\\n\" | paste -sd+ | bc", "    # your code\
    \ here\n    str_len=$(echo -n $1 | wc -m)\n    res=\"\"\n    for ((i=0; i<$str_len;\
    \ i++)); do\n        letter=${1:$i:1}\n        asc_code=$(printf \"%d\" \"'$letter\"\
    )\n        if [ $asc_code -ge 65 ] && [ $asc_code -le 90 ]; then\n           \
    \ res+=$asc_code\n        fi\n    done\n    echo $res", "    echo \"$1\" | grep\
    \ -oE '[A-Z]' | xargs | tr ' ' '+' | bc", "    local sum=0\n\n    for (( i=0;\
    \ i<${#1}; i++ )); do\n        if [[ ${1:$i:1} =~ [A-Z] ]]; then\n           \
    \ (( sum += ${1:$i:1} ))\n        fi\n    done\n\n    echo $sum", "  echo \"$1\"\
    \ | sed 's/[^A-Z]//g' | awk '{\n    for (i = 1; i <= length($0); i++) {\n    \
    \  ord[i] = sprintf(\"%d\", substr($0, i, 1));\n    }\n    print sum(ord)\n  }'",
  "    str=$1\n    res=0\n    for((i=0;i<${#str};i++));do\n        # shellcheck disable=SC2034\n\
    \        char=${str:i:1}\n        ascii=$(printf \"%d\" \"'$char\")\n        if\
    \ [ $ascii -gt 64 ] && [ $ascii -lt 91 ];then\n            ((res+=ascii))\n  \
    \      fi\n    done\n    echo \"$res\"", "    _UPPER_CHAR_PATTERN='[A-Z]'\n  \
    \  printf \"%s\" \"$1\" | grep -Eo \"$_UPPER_CHAR_PATTERN\" | grep -oE '[0-9]+'\
    \ | paste -sd+ | bc", "  local str=$1\n  local newStr=$(echo \"$str\" | tr -d\
    \ '[:lower:]')\n  local sum=0\n  for (( i=0; i<${#newStr}; i++ )); do\n    ((\
    \ sum += $(ord \"${newStr:$i:1}\") ))\n  done\n  echo \"$sum\"", "  echo \"${1}\"\
    \ | grep -o \"[A-Z]\" | tr -d \"\\n\" | awk '{print sum +=\"+\"$0}' | bc", " \
    \   # Get all upper letter ASCII values\n    local upperLetters=$(echo $1 | grep\
    \ -o [A-Z] | sed 's/./& /g' | tr -d '\\n' | sed 's/ /\\n/g' | sed 's/./\\&/g'\
    \ | sed 's/\\&/\\& /g' | bc)\n    # Get all lower letter ASCII values\n    local\
    \ lowerLetters=$(echo $1 | grep -o [a-z] | sed 's/./& /g' | tr -d '\\n' | sed\
    \ 's/ /\\n/g' | sed 's/./\\&/g' | sed 's/\\&/\\& /g' | bc)\n    # Get total value\n\
    \    echo \"${upperLetters}+${lowerLetters}\" | bc", "    local -i result=0\n\
    \    for (( i=0; i<${#1}; i++ )); do\n        (( ${1:i:1} <= 'Z' && ${1:i:1} >=\
    \ 'A' )) && (( result += ${1:i:1} ))\n    done\n    echo $result", "  local sum=0\n\
    \n  for (( i=0; i<${#1}; i++ )); do\n    if [[ \"${1:$i:1}\" =~ [A-Z] ]]; then\n\
    \      sum=$((sum + ${1:$i:1}))\n    fi\n  done\n\n  echo \"$sum\"", "    local\
    \ sum=0\n    for (( i=0; i<${#1}; i++ )); do\n        local ascii_code=$(printf\
    \ \"%d\" \"'${1:$i:1}\")\n        if ((ascii_code > 64 && ascii_code < 91)); then\n\
    \            ((sum+=ascii_code))\n        fi\n    done\n    echo $sum", "    [\
    \ -z \"$1\" ] && printf \"0\" && return 0\n    local sum=0\n    for ((i=0; i<${#1};\
    \ i++)); do\n        local ch=${1:i:1}\n        [[ $ch =~ [A-Z] ]] && ((sum+=${#ch}))\n\
    \    done\n    printf \"$sum\"", "    local -i sum=0\n    local -i code\n    local\
    \ -i is_big_letter\n\n    for ((i=0; i<${#1}; i++)); do\n        code=${1:i:1}\n\
    \        code=$(printf \"%d\" \"'$code\")\n        is_big_letter=$((code>=65 &&\
    \ code<=90))\n        ((sum+=code*is_big_letter))\n    done\n\n    echo $sum",
  "  local str=\"$1\"\n  echo \"$str\" | tr -d -c [:upper:] | awk '{sum+=$1} END {print\
    \ sum}'", "  echo \"$1\" | awk '{sum=0}\n    {len=length($0)}\n    {for(i=1;i<=len;i++)\n\
    \      {sum+=((charToAscii(substr($0,i,1))>64)&&(charToAscii(substr($0,i,1))<91))*charToAscii(substr($0,i,1))\n\
    \      }\n    }\n    END{print sum}'", "  if [ $# -eq 0 ]; then\n    echo \"0\"\
    \n  else\n    # First, strip out all non-letters\n    s=$(echo $1 | sed -e 's/[^a-zA-Z]//g')\n\
    \    # Then, make all of the letters uppercase\n    s=$(echo $s | tr [:lower:]\
    \ [:upper:])\n    # Then, print the ASCII value of each letter, turn them into\
    \ separate lines\n    s=$(echo $s | od -t d1 | sed -e 's/[^[:space:]]//g')\n \
    \   # Now, find the sum of these numbers\n    echo $(echo $s | awk '{for(i=1;i<=NF;i++)\
    \ a+=$i} END {print a}')\n  fi", "  # number of uppercase characters in the string\n\
    \  local UPPER=`grep -o '[A-Z]' <<< $1 | wc -l`\n  # number of characters in the\
    \ string\n  local NUM_CHARS=`grep -o '[A-Za-z]' <<< $1 | wc -l`\n  # sum of ASCII\
    \ codes of characters in the string\n  local SUM=`grep -o '[A-Za-z]' <<< $1 |\
    \ fold -w1 | awk '{ sum += sprintf(\"%d\", $1) } END { print sum }'`\n  # take\
    \ the modulo of the sum of ASCII codes by the number of characters\n  local MOD=`awk\
    \ \"BEGIN {print ${SUM} % ${NUM_CHARS}}\"`\n  # final result\n  local RESULT=`awk\
    \ \"BEGIN {print ${UPPER} * ${MOD}}\"`\n  echo $RESULT", "    if [[ -z $1 ]];\
    \ then\n        echo \"0\"\n    else\n        echo \"$1\" | tr -cd '[[:upper:]]'\
    \ | awk '{sum=0} {for(i=1;i<=NF;i++) {sum+=sprintf(\"%d\", \"0x\" $i)}} END {print\
    \ sum}'\n    fi", "    echo \"$1\" | grep -oE '[A-Z]' | tr -d '\\n' | wc -c",
  "  local sum=0\n  for c in $(echo $1 | grep -o .); do\n    local ascii=$(printf\
    \ \"%d\" \\'$c)\n    if [[ $ascii -gt 64 && $ascii -lt 91 ]]; then\n      let\
    \ sum=$sum+$ascii\n    fi\n  done\n  echo $sum", "\tstring=$1\n\tsum=0\n\tfor\
    \ ((i=0; i<${#string}; i++)); do\n\t\tchar=${string:$i:1}\n\t\t#echo \"Checking\
    \ char=$char\"\n\t\t#echo \"char=$char and char=\"$(printf \"%d\" \"'$char\")\"\
    \"\n\t\tif [ $(printf \"%d\" \"'$char\") -ge 65 ] && [ $(printf \"%d\" \"'$char\"\
    ) -le 90 ]; then\n\t\t\t#echo \"char=$char and char=\"$(printf \"%d\" \"'$char\"\
    )\"\"\n\t\t\tsum=$((sum+$(printf \"%d\" \"'$char\")))\n\t\tfi\n\tdone\n\techo\
    \ $sum", "    echo \"$1\" | tr -cd 'A-Z' | od -An -tuC | tr -d '\\n ' | awk '{s+=$1}\
    \ END {print s}'", "  local -i sum=0\n  for (( i=0; i<${#1}; i++ )); do\n    if\
    \ [[ ${1:i:1} =~ [A-Z] ]]; then\n      # printf \"${1:i:1} \"\n      (( sum+=${1:i:1}\
    \ ))\n    fi\n  done\n  printf \"$sum\"", "    if [ $# -ne 1 ]; then\n       \
    \ echo \"Usage: digitSum string\"\n        return 1\n    fi\n    # declare a local\
    \ array to hold the ASCII values\n    declare -a asciiArray\n    # for each character\
    \ in the string\n    for ((i=0; i<${#1}; i++)); do\n        # find out the ASCII\
    \ value\n        asciiArray[$i]=$(printf \"%d\" \"'${1:$i:1}\")\n        # if\
    \ the ascii value is between 65 and 90, then add it to the sum\n        if [ ${asciiArray[$i]}\
    \ -ge 65 ] && [ ${asciiArray[$i]} -le 90 ]; then\n            sum=$((sum+${asciiArray[$i]}))\n\
    \        fi\n    done\n    echo $sum", "    # Your code here\n    sum=0\n    for\
    \ i in `echo $1 | sed -e 's/\\(.\\)/\\1\\n/g'`; do\n        x=`printf \"%d\" \"\
    '$i\"`\n        if [ $x -ge 65 ] && [ $x -le 90 ]; then\n            # echo \"\
    $x is uppercase\"\n            sum=$((sum+x))\n        fi\n    done\n    echo\
    \ $sum", "  local sum=0\n  local chars=$(echo $1 | grep -o '.')\n  local charCount=0\n\
    \  for i in $chars; do\n    charCode=$(printf \"%d\" \"'$i\")\n    if [ $charCode\
    \ -gt 64 ] && [ $charCode -lt 91 ]; then\n      let sum+=$charCode\n    fi\n \
    \   let charCount++\n  done\n  echo $sum", "    # Assign a string to a variable\n\
    \    str=$1\n    # Assign empty digit to a variable\n    digit=0\n    # Assign\
    \ empty string to a variable\n    word=''\n    # Looping through all characters\
    \ in the string, checking if it's a capital letter and add it to the sum\n   \
    \ for (( i=0; i<${#str}; i++ )); do\n        letter=${str:$i:1}\n        if [[\
    \ $letter =~ [A-Z] ]]; then\n            digit=$(( digit + $(printf \"%d\" \"\
    '$letter\") ))\n        fi\n    done\n    # Return result\n    echo $digit", " \
    \   total=0\n    for (( i=0; i<${#1}; i++ )); do\n        char=\"${1:$i:1}\"\n\
    \        ord=$(ord \"$char\")\n        if [ \"$ord\" -gt 64 ] && [ \"$ord\" -lt\
    \ 91 ]; then\n            total=$(( total + ord ))\n        fi\n    done\n   \
    \ echo \"$total\"", "  local sum=0\n  local str=\"$1\"\n  local char\n  # echo\
    \ \"str: $str\"\n  for char in $(echo $str | sed 's/./& /g'); do\n    # echo \"\
    char: $char\"\n    if [[ \"$char\" =~ [A-Z] ]]; then\n      # echo \"  valid char:\
    \ $char\"\n      sum=$((sum + $(printf '%d' \"'$char\")))\n    fi\n  done\n  echo\
    \ $sum", "    awk 'BEGIN {\n        for (i = 0; i < length(\"'$1'\"); i++) {\n\
    \            c = substr(\"'$1'\", i+1, 1)\n            if (c >= \"A\" && c <=\
    \ \"Z\") {\n                sum += (c + 0)\n            }\n        }\n       \
    \ print sum\n    }'", "    local -i sum=0\n    local str=\"$1\"\n    if [ -z \"\
    $str\" ]; then\n        echo 0\n        return\n    fi\n    while read -r -n1\
    \ c; do\n        if [[ \"$c\" =~ [A-Z] ]]; then\n            sum=$((sum + ${c}))\n\
    \        fi\n    done <<<\"$str\"\n    echo \"$sum\"", "\t# your code here\n\t\
    gawk '{\n\t\tsum = 0\n\t\tfor (i = 1; i <= length($1); i++) {\n\t\t\tif (substr($1,\
    \ i, 1) ~ /[[:upper:]]/) {\n\t\t\t\tsum += sprintf(\"%d\", substr($1, i, 1))\n\
    \t\t\t}\n\t\t}\n\t\tprint sum\n\t}' <<< $1", "    if [[ $# -ne 1 ]]; then\n  \
    \      echo \"1 argument required, $# provided\"\n        return 1\n    fi\n \
    \   if [[ $1 =~ [^a-zA-Z] ]]; then\n        echo \"only alphabetic characters\
    \ are allowed\"\n        return 1\n    fi\n    echo $1 | grep -o [A-Z] | awk '{\
    \ sum += $1 } END { print sum }'", "    # declare -u for unset\n    declare -u\
    \ inputString=\"$1\"\n    declare -i result=0\n    for ((i=0; i<${#inputString};\
    \ i++)); do\n        if [ \"${inputString:$i:1}\" == \"${inputString:$i:1^^}\"\
    \ ]; then\n            result+=\"$(ord \"${inputString:$i:1}\")\"\n        fi\n\
    \    done\n    echo \"$result\"", "  echo $(echo \"$1\" | sed -E 's/[^A-Z]//g'\
    \ | \\\n    {\n    local -i sum=0;\n    local c;\n    while read -r c; do\n  \
    \    ((sum += c));\n    done;\n    echo $sum;\n  });", '    echo $1 | grep -o
    "[A-Z]" | grep -o "[0-9]" | paste -sd+ | bc', "\t# $1 is a string\n\techo \"$1\"\
    \ | awk '{\n\t\tfor (i = 1; i <= length($1); i++) {\n\t\t\tchar=substr($1, i,\
    \ 1)\n\t\t\tif (char ~ /[A-Z]/) {\n\t\t\t\tsum += char\n\t\t\t}\n\t\t}\n\t\tprint\
    \ sum\n\t}'", "    echo $1 | grep -o \"[A-Z]\" | awk '{sum += $1} END {print sum}'",
  "  # Check the input\n  if [[ $# -ne 1 ]]; then\n    echo \"Error: invalid input\"\
    \ >&2\n    return 1\n  fi\n  # Reset the sum\n  local -i sum=0\n  # Loop over\
    \ the characters\n  for (( i=0; i<${#1}; i++ )); do\n    # Add the value\n   \
    \ sum+=$(printf \"%d\" \"'${1:i:1}\")\n  done\n  # Return the result\n  echo \"\
    $sum\"", "    str=$1\n    sum=0\n    for ((i=0; i<${#str}; i++)); do\n       \
    \ if [[ ${str:$i:1} =~ [A-Z] ]]; then\n            sum=$((sum + ${str:$i:1}))\n\
    \        fi\n    done\n    echo \"$sum\"", "  echo \"$1\" | tr '[:lower:]' '[:upper:]'\
    \ | tr -d '\\n' | grep -o . | awk '{sum+=$1} END {print sum}'", "  local string=\"\
    $1\"\n  sum=0\n  for (( i=0; i<${#string}; i++ )); do\n    curr_char=${string:$i:1}\n\
    \    ascii_code=$(printf \"%d\" \"'$curr_char\")\n    if [[ $ascii_code -gt 64\
    \ && $ascii_code -lt 91 ]]; then\n      sum=$((sum + ascii_code))\n    fi\n  done\n\
    \  echo \"$sum\"", "    # Create a temporary variable to hold the sum of the ascii\
    \ values\n    local sum=0\n    # For each character in the string\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        # Get the ascii value for the character at $i\n\
    \        local ascii=$(printf \"%d\" \"'${1:$i:1}\")\n        # Check if it's\
    \ upper case\n        if [ $ascii -gt 64 ] && [ $ascii -lt 91 ]; then\n      \
    \      # Add the ascii value to the sum\n            sum=$((sum + ascii))\n  \
    \      fi\n    done\n    # Return the sum\n    echo $sum", "    # ascii a = 97\n\
    \    # ascii z = 122\n    # ascii A = 65\n    # ascii Z = 90\n    # ascii space\
    \ = 32\n    # ascii 0 = 48\n    # ascii 9 = 57\n    #\n    # if $(echo $1 | grep\
    \ '[a-z]') -eq $true; then\n    #   echo \"string contains lowercase characters\"\
    \n    # fi\n    #\n    # if $(echo $1 | grep '[A-Z]') -eq $true; then\n    # \
    \  echo \"string contains uppercase characters\"\n    # fi\n    #\n    # if $(echo\
    \ $1 | grep '[0-9]') -eq $true; then\n    #   echo \"string contains numbers\"\
    \n    # fi\n    #\n    # if $(echo $1 | grep '[\\ \\']') -eq $true; then\n   \
    \ #   echo \"string contains whitespace\"\n    # fi\n    #\n    # for char in\
    \ $1; do\n    #     echo \"$char\"\n    # done\n    #\n    # for (( i=0; i<${#1};\
    \ i++ )); do\n    #     echo $i\n    # done\n    #\n    # for (( i=0; i<${#1};\
    \ i++ )); do\n    #     echo ${1:$i:1}\n    # done\n    #\n    # for (( i=0; i<${#1};\
    \ i++ )); do\n    #     char=$(printf \"%d\" \"'${1:$i:1}\")\n    #     echo $char\n\
    \    # done\n    #\n    # for (( i=0; i<${#1}; i++ )); do\n    #     char=$(printf\
    \ \"%d\" \"'${1:$i:1}\")\n    #     if [ $char -gt 64 ] && [ $char -lt 91 ]; then\n\
    \    #         echo $char\n    #     fi\n    # done\n    #\n    # sum=0\n    #\
    \ for (( i=0; i<${#1}; i++ )); do\n    #     char=$(printf \"%d\" \"'${1:$i:1}\"\
    )\n    #     if [ $char", "    local -i sum=0\n    for ((i=0; i<${#1}; i++));\
    \ do\n        c=${1:i:1}\n        [[ \"$c\" =~ [A-Z] ]] && sum+=1+$(printf '%d'\
    \ \"'$c\")-64\n    done\n    echo $sum", "    echo $1 | awk '{\n        sum =\
    \ 0\n        for (i = 1; i <= length($1); i++) {\n            char = substr($1,\
    \ i, 1)\n            if (char >= \"A\" && char <= \"Z\") {\n                sum\
    \ += char\n            }\n        }\n        print sum\n    }'", "  str=$1\n \
    \ sum=0\n  for (( i=0; i<${#str}; i++ )); do\n    letter=${str:$i:1}\n    if [[\
    \ $letter =~ [A-Z] ]]; then\n      sum=$((sum + $letter))\n    fi\n  done\n  echo\
    \ $sum", "\tlocal input=\"$1\"\n\tlocal sum=0\n\tlocal char=''\n\tfor char in\
    \ $(echo $input | grep -o .); do\n\t\tif [[ \"$char\" =~ [A-Z] ]]; then\n\t\t\t\
    sum=$((sum + $(printf \"%d\" \\'$char)))\n\t\tfi\n\tdone\n\techo $sum", "    [\
    \ $# -ne 1 ] && exit 1\n    [ -z \"$1\" ] && echo 0 && exit 0\n    echo \"$1\"\
    \ | grep -oE '[A-Z]' | grep -oE '[0-9]' | paste -sd+ | bc", "\techo \"$1\" | tr\
    \ -cd '[:upper:]' | awk '{print sum+=$1}' | tail -n 1", "    local -i sum=0\n\
    \    # add all upper case letter ascii code\n    for ((i=0; i<${#1}; i++)); do\n\
    \        local char=${1:i:1}\n        if [[ $char =~ [A-Z] ]]; then\n        \
    \    sum=$((sum + ${char:0:1}))\n        fi\n    done\n    echo \"$sum\"", " \
    \ local sum=0\n  # -eq is equal to; -le is less than or equal to; -ge is greater\
    \ than or equal to; && is logical AND;\n  # \\[ \\] must be escaped because they\
    \ have special meaning in bash\n  # [[ condition1 && condition2 ]]\n  [[ $# -eq\
    \ 1 ]] || exit 1\n  # [ -n string ] is true if the length of string is non-zero.\n\
    \  # [ -z string ] is true if the length of string is zero.\n  [[ -n $1 ]] ||\
    \ exit 1\n  for (( i=0; i<${#1}; i++ )); do\n    local ascii=$(printf '%d' \"\
    '${1:i:1}\")\n    if [[ $ascii -ge 65 && $ascii -le 90 ]]; then\n      sum=$((sum\
    \ + ascii))\n    fi\n  done\n  echo $sum", "  echo \"$1\" | tr -cd '[:upper:]'\
    \ | sed 's/\\(.\\)/\\1\\n/g' | awk '{s+=$1} END {print s}'", "    echo $1 | sed\
    \ -e 's/[^A-Z]//g' | awk '{sum=0;for(i=1;i<=length($0);i++){sum+=(substr($0,i,1))}}END{print\
    \ sum}'", "    local sum=0\n    local upper=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n \
    \   local lower=\"abcdefghijklmnopqrstuvwxyz\"\n    local -i i=0\n\n    for ((\
    \ i=0; i<${#1}; i++ ))\n    do\n        if [[ ${upper} =~ ${1:i:1} ]]\n      \
    \  then\n            sum=$(( sum + $(printf \"%d\" \"'${1:i:1}\") ))\n       \
    \ fi\n    done\n    echo $sum", "\tlocal sum=0\n\tfor (( i=0; i<${#1}; i++ ));\
    \ do\n\t\tlocal char=${1:$i:1}\n\t\tif [[ \"$char\" =~ [A-Z] ]]; then\n\t\t\t\
    (( sum+=${char//[^0-9]/} ))\n\t\tfi\n\tdone\n\techo \"$sum\"", "\tfor d in $(echo\
    \ $1 | sed 's/\\(.\\)/\\1\\n/g'); do\n\t\tif [ $(echo $d | tr 'a-z' 'A-Z') ==\
    \ $d ]; then\n\t\t\tsum=$((sum + $(echo $d | od -An -i)))\n\t\tfi\n\tdone\n\t\
    echo $sum", "  printf '%d' \"'$1\" | grep -o '[A-Z]' | awk '{sum += $1} END {print\
    \ sum}'", "    echo $1 | grep -Eo \"[A-Z]\" | awk '{s+=$1} END {print s}'", " \
    \   declare -i total=0\n    for (( i=0; i<${#1}; i++ )); do\n        ascii=$(printf\
    \ \"%d\" \"'${1:$i:1}\")\n        if (( $ascii >= 65 )) && (( $ascii <= 90 ));\
    \ then\n            (( total += $ascii ))\n        fi\n    done\n    echo $total",
  "  echo \"$1\" | awk '{\n    tot=0\n    for(i=1;i<=length($1);i++) {\n      substr($1,i,1)\n\
    \      n = sprintf(\"%d\", substr($1,i,1))\n      if (n >= 65 && n <= 90) {\n\
    \        tot += n\n      }\n    }\n    print tot\n  }'", "    case $1 in\n   \
    \     \"\")\n            echo 0\n            ;;\n        *)\n            echo\
    \ $1 | grep -Eo '[A-Z]' |  sed 's/\\(.\\)/\\1\\n/g' | awk '{a+=$1}END{print a}'\n\
    \            ;;\n    esac", "  echo -n \"$1\" | grep -Eo [A-Z] | grep -o [A-Z]\
    \ | sed 's/./\\0\\n/g' | awk '{a+=$1}END{print a}'", "\techo -n $1 | sed 's/[^A-Z]//g'\
    \ | xargs -I{} echo -n \"{}\" | od -A n -t dC | xargs -I{} echo -n {} | sed 's/\
    \ //g' | sed 's/^0//g'", "  case $1 in\n    '') echo 0 ;;\n    *)\n      declare\
    \ -i total=0\n      for ((i=0; i<${#1}; i++)); do\n        declare -i ascii=$(printf\
    \ %d \"'${1:$i:1}\")\n        if ((ascii > 64 && ascii < 91)); then\n        \
    \  ((total += ascii))\n        fi\n      done\n      echo $total\n    ;;\n  esac",
  "\tif [ $# -eq 0 ]; then\n\t\tprintf \"0\"\n\t\treturn\n\tfi\n\tlocal sum=0\n\t\
    local str=\"$1\"\n\tfor (( i=0; i<${#str}; i++ )); do\n\t\tlocal ch=\"${str:$i:1}\"\
    \n\t\tlocal ch_num=$(printf \"%d\" \"'$ch\")\n\t\tif [ $ch_num -ge \"65\" ] &&\
    \ [ $ch_num -le \"90\" ]; then\n\t\t\tlet sum+=ch_num\n\t\tfi\n\tdone\n\tprintf\
    \ \"%d\" \"$sum\"", "    declare -i sum=0\n    for ((i=0; i<${#1}; i++)); do\n\
    \        ((sum+=$(ord \"${1:i:1}\")))\n    done\n    echo \"$sum\"", "  echo \"\
    $1\" | tr -cd '[[:upper:]]' | awk '{sum += sprintf(\"%d\", \"0x\"$1)} END {print\
    \ sum}'", "  # The code below works fine, but it's too verbose\n  #\n  # total=0\n\
    \  # local capital_letters=$(echo $1 | tr '[:lower:]' '[:upper:]')\n  # for ((\
    \ i=0; i<${#capital_letters}; i++ )); do\n  #   local ascii_code=$(printf \"%d\"\
    \ \"'${capital_letters:$i:1}\")\n  #   total=$((total + ascii_code))\n  # done\n\
    \  # echo $total\n\n  # The following is faster\n  echo $(printf \"%d\" \"'${1^^}\"\
    )", "    # Calculate the summ of upper ASCII codes\n    echo \"$1\" | tr -d '[:lower:]'\
    \ | awk '{s=0; for(i=1;i<=length($0);i++) s+=ord(substr($0,i,1));print s}'", " \
    \   #echo $1\n    local sum=0\n    for ((i=0; i<${#1}; i++)); do\n        let\
    \ c=${1:$i:1}\n        if [[ $c -gt 64 && $c -lt 91 ]]; then\n            let\
    \ sum=$sum+$c\n        fi\n    done\n    echo $sum", "  var=0\n  for((i=0;i<${#1};i++));do\n\
    \    var=$((var+${1:i:1}))\n  done\n  echo $var", "    if [ $# -eq 0 ]; then\n\
    \        echo \"0\"\n    else\n        local -i sum=0\n        for (( i=0; i<${#1};\
    \ i++ )); do\n            local c=${1:i:1}\n            if [[ \"$c\" =~ [A-Z]\
    \ ]]; then\n                (( sum+=${c} ))\n            fi\n        done\n  \
    \      echo \"$sum\"\n    fi", "  echo $(echo $1 | tr -d '[:lower:]' | awk '{print\
    \ sum+=$1}')", "    # Convert the string to UPPERCASE\n    local input=$(echo\
    \ \"$1\" | tr '[:lower:]' '[:upper:]')\n    # ... \n    echo \"$input\" | tr -cd\
    \ '[:upper:]' | awk '{if (NF == 0) {print 0} else {print NF-1+$NF}}'", "    for\
    \ i in ${1[@]}; do\n        if [[ $i =~ ^[A-Z] ]]; then\n            printf '%d'\
    \ \\'$i\n        fi\n    done | bc", "  # Print the sum of the ascii values\n\
    \  # of all upper characters\n  echo $1 | grep -Eo '[A-Z]' | \\\n    awk '{ sum\
    \ += $1 } END { print sum }'", "  local -i total=\"0\"\n  local char\n  for ((i=0;\
    \ i<${#1}; i++)); do\n    char=\"${1:i:1}\"\n    [[ \"$char\" =~ [A-Z] ]] && total+=\"\
    $(printf '%d' \"'$char\")\"\n  done\n  echo \"$total\"", "  local sum=0\n  for((i=0;i<${#1};i++));do\n\
    \    if [ $(printf \"%d\" \"'${1:i:1}\") -ge 65 ] && [ $(printf \"%d\" \"'${1:i:1}\"\
    ) -le 90 ];then\n      ((sum+=`printf \"%d\" \"'${1:i:1}\"`))\n    fi\n  done\n\
    \  echo $sum", "  local upper_ascii=$(printf '%d' \"'a\")\n  local sum=0\n  for\
    \ ((i=0; i<${#1}; i++)); do\n    local digit=$(printf '%d' \"'${1:i:1}\")\n  \
    \  (( $digit >= $upper_ascii )) && sum=$((sum + digit))\n  done\n  echo $sum",
  "  if [ -z \"$1\" ]; then\n    echo \"0\"\n  else\n    echo $(tr -cd [:upper:] <<<\
    \ \"$1\" | grep -o . | awk '{s+=$1} END {print s}')\n  fi", "  if [ \"$#\" -ne\
    \ 1 ]; then\n    echo \"Usage: digitSum <string>\"\n    return 1\n  fi\n  local\
    \ input=\"$1\"\n  if [ -z \"$input\" ]; then\n    echo \"0\"\n    return 0\n \
    \ fi\n  echo \"$input\" | tr -cd '[:upper:]' | awk '{\n        total = 0\n   \
    \     for (i = 1; i <= length($0); i++) {\n                total += sprintf(\"\
    %d\", sprintf(\"%d\", sprintf(\"%d\", sprintf(\"%d\", sprintf(\"%d\", sprintf(\"\
    %d\", sprintf(\"%d\", sprintf(\"%d\", substr($0, i, 1))))))))\n        }\n   \
    \     print total\n  }'", "    local -i sum=0\n\n    for ((i=0; i<${#1}; i++));\
    \ do\n        local -i char=$(ord \"${1:i:1}\")\n        if ((char >= 65 && char\
    \ <= 90)); then\n            ((sum += char))\n        fi\n    done\n\n    echo\
    \ \"$sum\"", "  # sum of uppercase letters only\n  echo $1 | tr -d -c [:upper:]\
    \ | awk '{SUM += $1} END {print SUM}'", "  local -i sum=0\n\n  for c in $(echo\
    \ \"$1\" | grep -o .); do\n    if [[ $c =~ [A-Z] ]]; then\n      let sum+=$(printf\
    \ %d \"'$c\")\n    fi\n  done\n\n  echo $sum", "    local sum\n\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        (( ${1:i:1} > 64 && ${1:i:1} < 91 )) && (( sum+=${1:i:1}\
    \ ))\n    done\n\n    echo $sum", "  echo $1 | grep -o '[A-Z]' |\n    awk 'BEGIN\
    \ {s=0} {s+=$1} END {print s}'", "    local sum=0\n    for (( i=0; i<${#1}; i++\
    \ )); do\n        local asciiCode=${1:$i:1}\n        if [[ $asciiCode =~ [A-Z]\
    \ ]]; then\n            local charValue=$(printf '%d' \"'$asciiCode\")\n     \
    \       sum=$(( $sum + $charValue ))\n        fi\n    done\n    echo $sum", " \
    \   echo $1 | sed 's/[^A-Z]//g' | awk '{\n        sum = 0\n        for (i = 1;\
    \ i <= length($0); i++) {\n            sum += substr($0, i, 1)\n        }\n  \
    \      print sum\n    }'", "    local result=0\n    local input=$1\n    #echo\
    \ \"original string: $input\"\n    local stringToCheck=${input^^}\n    #echo \"\
    string to check: $stringToCheck\"\n    for ((i=0; i<${#stringToCheck}; i++));\
    \ do\n        if [[ \"${stringToCheck:$i:1}\" =~ ^[A-Z] ]]; then\n           \
    \ #echo \"Adding letter: ${stringToCheck:$i:1}\"\n            result=$((result\
    \ + $(printf '%d' \"'${stringToCheck:$i:1}\")))\n        fi\n    done\n    echo\
    \ \"$result\"", "  echo \"${1//[^[:upper:]]/}\" | sed 's/./\\0\\n/g' | paste -sd+\
    \ | bc", "    echo $1 | sed 's/[^A-Z]//g' | awk '{sum=0} {for(i=1;i<=length($0);i++)\
    \ {char=substr($0,i,1);sum+=(char-64)}} END {print sum}'", "    sum=0\n    for\
    \ (( i=0; i<${#1}; i++ )); do\n        ascii_code=$(printf \"%d\" \"'${1:$i:1}\"\
    )\n        (( ascii_code >= 65 && ascii_code <= 90 )) && (( sum+=ascii_code ))\n\
    \    done\n    echo $sum", "  STRING=$1\n  # Get the upper case characters and\
    \ add them.\n  echo $(printf $STRING | grep -o \"[A-Z]\" | tr -d \"\\n\" | awk\
    \ '{s=0; for(i=1;i<=length($0);i++) s+=substr($0,i,1); print s}')", "  #\n  #\
    \ Write your code here\n  #", "  local sum=0\n  for (( i=0; i<${#1}; i++ )); do\n\
    \    (( ${1:$i:1} < 97 || ${1:$i:1} > 122 )) && (( sum+=${1:$i:1} ))\n  done\n\
    \  echo $sum", "  input=$1\n  length=${#input}\n  result=\"\"\n  for (( i=0; i<$length;\
    \ i++ )); do\n    char=${input:$i:1}\n    ord=$(printf \"%d\" \"'$char\")\n  \
    \  if [[ $ord -ge 65 && $ord -le 90 ]]; then\n      result=$((result+ord))\n \
    \   fi\n  done\n  echo $result", "    # declare -i string_count=0;\n    local\
    \ string_count=0;\n    # declare -i string_length=${#1};\n    local string_length=${#1};\n\
    \    for (( i=0; i<string_length; i++ ))\n    do\n        local current_char=${1:i:1};\n\
    \        local current_ascii=$(LC_CTYPE=C printf '%d' \"'$current_char\");\n \
    \       if [ $current_ascii -ge 65 ] && [ $current_ascii -le 90 ]\n        then\n\
    \            string_count+=$current_ascii;\n        fi\n    done\n    echo $string_count;",
  "  local -r str=\"$1\"\n  local -r arr=$(echo -n \"${str}\" | grep -oP '[A-Z]')\n\
    \  local sum=0\n  for ((i=0; i<${#arr}; i++)); do\n    local asciiVal=$(printf\
    \ '%d' \"'${arr:$i:1}\")\n    ((sum+=asciiVal))\n  done\n  echo $sum", "    #\
    \ https://stackoverflow.com/questions/15248225/how-to-check-if-a-string-contains-only-numbers-in-bash\n\
    \    if ! [[ $1 =~ ^[a-zA-Z]+$ ]]; then\n        echo \"1\"\n        exit\n  \
    \  fi\n    echo $((${1^^} | tr -dc 'A-Z' | grep -o . | awk '{s+=$1} END {print\
    \ s}'))", "    echo $1 | tr 'a-z' 'A-Z' | sed 's/[^A-Z]//g' | tr -d '\\n' | fold\
    \ -w1 | awk '{s+=$1} END {print s}'", "    echo -n $1 | awk 'BEGIN {FS = \"\"\
    } {sum=0; for (i=1; i<=NF; i++) { if ( toupper($i) == $i ) { sum+=$i }; }; print\
    \ sum;}'", "    local accumulator=0\n    local str=$1\n    for i in $(seq 0 $((${#str}\
    \ - 1))); do\n        local char=$(printf \"%d\" \"'${str:$i:1}\")\n        if\
    \ [[ $char -ge 65 && $char -le 90 ]]; then\n            accumulator=$((accumulator\
    \ + char))\n        fi\n    done\n    echo $accumulator", "    n=0\n    for ((\
    \ i=0; i<${#1}; i++ )); do\n        ascii=${1:$i:1}\n        char=`printf '%d'\
    \ \"'$ascii\"`\n        if [ $char -ge 65 ] && [ $char -le 90 ]; then\n      \
    \      let n+=$char\n        fi\n    done\n    echo $n", "    # Display argument\
    \ to stdout\n    echo $1\n    # Save all character codes into an array\n    arr=()\n\
    \    for (( i=0; i<${#1}; i++ )); do\n        let \"arr[$i]=$(printf '%d' \"'${1:$i:1}\"\
    )\"\n    done\n    # Loop through all of the character codes and add only the\
    \ uppercase ones\n    sum=0\n    for (( i=0; i<${#arr[@]}; i++ )); do\n      \
    \  if [ ${arr[$i]} -ge 65 ] && [ ${arr[$i]} -le 90 ]; then\n            sum=$((sum+${arr[$i]}))\n\
    \        fi\n    done\n    # Display the final sum\n    echo $sum", "   echo $1\
    \ | tr -cd '[:upper:]' | grep -o . | awk '{s+=$1} END {print s}'", "    printf\
    \ \"%s\" \"$1\" | grep -o '[A-Z]' | awk '{sum += $1} END {print sum}'", "    #\
    \ Write your code here\n    # To print results to the standard output you can\
    \ use print\n    # Example: print \"Hello world!\"\n    echo \"$1\" | sed -e 's/[^A-Z]//g'\
    \ | grep -o . | awk '{sum+=$1} END {print sum}'", "    local result=0\n\n    for\
    \ (( i=0; i<${#1}; i++ )); do\n        local currentChar=${1:$i:1}\n        local\
    \ ascii=$(printf %d \"'$currentChar\")\n\n        if [[ $ascii -ge 65 && $ascii\
    \ -le 90 ]]; then\n            (( result += ascii ))\n        fi\n    done\n\n\
    \    echo $result", "    local -i sum=0\n    for ((i=0; i<${#1}; i++)); do\n \
    \       local -i c=${1:i:1}\n        if [[ $c -gt 64 && $c -lt 91 ]]; then\n \
    \           ((sum+=c))\n        fi\n    done\n    echo $sum", "  echo $1 | grep\
    \ -o '[A-Z]' | awk '{ sum += $1 } END { print sum }'", "  local -r string=\"$1\"\
    \n  local -r length=${#string}\n  local -i sum=0\n\n  for (( i=0; i<$length; i++\
    \ )); do\n    local -i asciiCode=$(printf \"%d\" \"'${string:$i:1}\")\n    # ASCII\
    \ codes for uppercase letters from 65 to 90 (inclusive)\n    if [[ $asciiCode\
    \ -ge 65 && $asciiCode -le 90 ]]; then\n      (( sum += asciiCode ))\n    fi\n\
    \  done\n\n  echo \"$sum\"", "    local sum=0\n    local i\n    local c\n\n  \
    \  for ((i=0; i<${#1}; i++)); do\n        c=${1:i:1}\n        if [[ \"$c\" =~\
    \ [A-Z] ]]; then\n            ((sum+=ASCII[$c]))\n        fi\n    done\n    echo\
    \ $sum", "  _total=0\n  for (( _i=0; _i<${#1}; _i++ )); do\n    _character=\"\
    ${1:$_i:1}\"\n    case $_character in\n      [A-Z])\n        _total=$(( _total\
    \ + $_character ))\n        ;;\n    esac\n  done\n  echo $_total", "  local str=\"\
    $1\"\n  local sum=0\n  for ((i=0; i<${#str}; i++)); do\n    local c=\"${str:$i:1}\"\
    \n    if [[ $c =~ [A-Z] ]]; then\n      let sum+=$(printf '%d' \"'$c\")\n    fi\n\
    \  done\n  echo \"$sum\"", "    # handle empty string\n    if [ -z \"$1\" ]; then\n\
    \        echo \"0\"\n        return\n    fi\n\n    # decode the string\n    local\
    \ arr=($(printf '%d ' \"'$1\"))\n\n    # calculate the sum of upper case characters\n\
    \    local sum=0\n    for a in \"${arr[@]}\"; do\n        if [[ \"$a\" -ge 65\
    \ && \"$a\" -le 90 ]]; then\n            sum=$((sum + a))\n        fi\n    done\n\
    \n    echo \"$sum\"", "    echo \"$1\" | sed -n -E 's/[^A-Z]//gp' | tr -d '\\\
    n' | xargs printf %d", "  local sum=0\n  printf \"%s\" \"$1\" | grep -o \"[A-Z]\"\
    \ | while read -r c; do\n    sum=$((sum + $(printf \"%d\" \"'$c\")))\n  done\n\
    \  printf \"%d\" \"$sum\"", "    echo $(echo $1 | tr -d [:lower:] | tr -d [:digit:]\
    \ | tr -cd [:print:] | awk '{print sum+=$1}')", "    printf \"%d\" $(echo $1 |\
    \ sed 's/[^A-Z]//g' | awk '{ for (i=1; i<=length($0); i++) { printf \"%d\", ord(substr($0,\
    \ i, 1)) } }')", "    local sum=0\n    local ascii_values=($(echo $1 | grep -o\
    \ . | awk '{printf(\"%d\\n\", $0)}'))\n    for i in ${ascii_values[@]}; do\n \
    \       if [[ $i -ge 65 && $i -le 90 ]]; then\n            sum=$((sum + i))\n\
    \        fi\n    done\n    echo $sum", "    if [[ -z $1 ]]; then\n        echo\
    \ 0\n    else\n        echo $1 | tr -d -c 'A-Z' | fold -w1 | awk '{sum+=$1} END\
    \ {print sum}'\n    fi", "    echo $(echo $1 | grep -o \"[A-Z]\" | awk '{sum+=$1}\
    \ END {print sum}')", "  local sum=0\n  local i=0\n  local j=0\n  local len=\"\
    ${#1}\"\n  while [ $i -lt $len ]; do\n    local ch=\"${1:$i:1}\"\n    if [[ \"\
    $ch\" =~ [A-Z] ]]; then\n      j=$((ord \"$ch\"))\n      sum=$((sum + j))\n  \
    \  fi\n    i=$((i + 1))\n  done\n  echo \"$sum\"", "  if [[ $# -ne 1 ]]; then\n\
    \    echo \"Usage: digitSum <string>\"\n    return 1\n  fi\n  local total=0\n\
    \  for (( i=0; i<${#1}; i++ )); do\n    local charCode=${1:$i:1}\n    if [[ \"\
    $charCode\" =~ ^[A-Z]$ ]]; then\n      total=$(( total + $(charAscii \"$charCode\"\
    ) ))\n    fi\n  done\n  echo \"$total\"", "  local sum=0\n  local str=\"$1\"\n\
    \  while read -n1 letter; do\n    printf -v char \"%d\" \"'$letter\"\n    if [[\
    \ $char -gt 64 && $char -lt 91 ]]; then\n      ((sum+=$char))\n    fi\n  done\
    \ <<< \"$str\"\n  echo \"$sum\"", "\tlocal sum=0\n\tfor (( i=0; i<${#1}; i++ ))\n\
    \tdo\n\t\tlocal char=${1:$i:1}\n\t\tif [[ $char =~ [A-Z] ]]\n\t\tthen\n\t\t\t\
    local ascii=$(printf \"%d\" \"'$char\")\n\t\t\t(( sum+=ascii ))\n\t\tfi\n\tdone\n\
    \techo $sum", "    local -i sum=0 sum_tmp\n    local -l str=\"$1\"\n    local\
    \ ch\n    for ((i=0; i<${#str}; i++)); do\n        ch=\"${str:i:1}\"\n       \
    \ sum_tmp=\"$(printf \"%d\" \"'$ch\")\"\n        if [[ $sum_tmp -ge 65 && $sum_tmp\
    \ -le 90 ]]; then\n            ((sum+=sum_tmp))\n        fi\n    done\n    echo\
    \ \"$sum\"", "    # Paste: Columnate lines of files\n    echo \"$1\" | paste -sd+\
    \ | bc", "  if [ $# -ne 1 ]; then\n    echo \"Please enter one string\"\n    return\
    \ 1\n  fi\n  local res=0\n  for i in {A..Z}; do\n    res=$((res + $(echo $1 |\
    \ grep -o $i | wc -l) * $(printf '%d' \"'$i\")))\n  done\n  echo $res", "  sum=0\n\
    \  for ((i=0; i<${#1}; i++)); do\n    code=$(echo -n \"${1:$i:1}\" | od -An -tuC)\n\
    \    if [ $code -ge 65 -a $code -le 90 ]; then\n      ((sum+=code))\n    fi\n\
    \  done\n  echo \"$sum\"", "  # echo \"$1\"\n  local i=0\n  local j=0\n  local\
    \ total\n  for ((i=0; i<${#1}; i++)); do\n    # echo \"${1:$i:1}\"\n    if [[\
    \ \"${1:$i:1}\" =~ [A-Z] ]]; then\n      # echo \"${1:$i:1}\"\n      # echo $((\
    \ ${1:$i:1} + 0 ))\n      total=$((total + ${1:$i:1} + 0))\n    fi\n  done\n \
    \ echo \"$total\"", "  echo $1 | grep -o '[A-Z]' | awk '{a+=$1} END {print a}'",
  "  if [ $# -ne 1 ]; then\n    echo \"Usage: digitSum <string>\"\n    return 1\n\
    \  fi\n  local -i sum=0\n  for (( i=0; i<${#1}; i++ )); do\n    local -i code=$(printf\
    \ \"%d\" \"'${1:$i:1}\")\n    # there are 2 ranges for upper case characters in\
    \ ASCII table\n    if (( code >= 65 && code <= 90 )) || (( code >= 192 && code\
    \ <= 223 )); then\n      (( sum += code ))\n    fi\n  done\n  echo \"$sum\"",
  "    sum=0\n    for (( i=0; i<${#1}; i++ )); do\n        (( ${1:$i:1} >= 65 && ${1:$i:1}\
    \ <= 90 )) && (( sum+=${1:$i:1} ))\n    done\n    echo $sum", "    string=\"$1\"\
    \n    string=$(echo \"$string\" | tr '[:lower:]' '[:upper:]')\n    sum=0\n   \
    \ for ((i=0; i<${#string}; i++)); do\n        char=\"${string:$i:1}\"\n      \
    \  char=${char^^}\n        char=$(printf '%d' \"'$char\")\n        sum=$((sum\
    \ + char))\n    done\n    echo \"$sum\"", "    local str=\"$1\"\n    [[ -z \"\
    $str\" ]] && echo 0 && return\n    local sum=0\n    for (( i=0; i<${#str}; i++\
    \ )); do\n        local char=\"${str:$i:1}\"\n        local ascii=$(printf \"\
    %d\" \"'$char\")\n        if [[ $ascii -gt 64 && $ascii -lt 91 ]]; then\n    \
    \        (( sum += ascii ))\n        fi\n    done\n    echo $sum", "\tif [ -z\
    \ \"$1\" ]; then\n\t\techo \"0\"\n\telse\n\t\tlocal -i sum=0\n\t\tlocal currentChar\n\
    \t\tfor ((i=0; i<${#1}; i++)); do\n\t\t\tcurrentChar=${1:i:1}\n\t\t\tif [[ $currentChar\
    \ =~ [A-Z] ]]; then\n\t\t\t\tsum=$(echo \"($sum+$currentChar)\" | bc)\n\t\t\t\
    fi\n\t\tdone\n\t\techo \"$sum\"\n\tfi", "    string=$1\n    result=0\n    for\
    \ (( i=0; i<${#string}; i++ )); do\n        if [[ ${string:$i:1} =~ [A-Z] ]];\
    \ then\n            temp=`printf \"%d\" \"'${string:$i:1}\"`\n            (( result+=temp\
    \ ))\n        fi\n    done\n    echo $result", "    echo $(echo $1 | tr -c -d\
    \ [:upper:] | sed -e 's/\\(.\\)/\\1\\n/g' | paste -sd+ | bc)", "  echo \"${1}\"\
    \ | tr -d '[:lower:]' | awk '{\n    for (i = 1; i <= length($0); i++) {\n    \
    \  n = n + sprintf(\"%d\", sprintf(\"%d\", substr($0, i, 1)) - sprintf(\"%d\"\
    , \"A\") + 1)\n    }\n    print n\n  }'", "    #input=\"abcCd\"\n    #input=\"\
    abAB\"\n    input=\"$1\"\n    counter=0\n    # A=65\n    # Z=90\n    # a=97\n\
    \    # z=122\n    while [ $counter -lt ${#input} ]; do\n        #if [[ ${input:$counter:1}\
    \ =~ [A-Z] ]]; then\n        if [[ ${input:$counter:1} =~ [[:upper:]] ]]; then\n\
    \            ((sum+=(`printf \"%d\" \"'${input:$counter:1}\"`-64)))\n        fi\n\
    \        ((counter++))\n    done\n    echo $sum", "\techo \"$1\" | sed 's/[^A-Z]//g'\
    \ | awk '{sum = 0} {for (i = 1; i <= length($0); i++) {sum += (ord(substr($0,\
    \ i, 1)) - 64)}} END {print sum}'", "    local asciiSum=0\n    local str=$1\n\
    \    local c\n    for c in $(seq 0 $((${#str} - 1))); do\n        asciiSum=$((asciiSum\
    \ + ${str:$c:1}))\n    done\n    echo $asciiSum", "    local -i sum=0\n    for\
    \ ((i=0; i<${#1}; i++)); do\n        if [[ ${1:i:1} =~ [A-Z] ]]; then\n      \
    \      sum+=${1:i:1}\n        fi\n    done\n    echo \"$sum\"", "    input=$1\n\
    \    sum=0\n    for ((i=0; i<${#input}; i++)); do\n        num=$(printf '%d' \"\
    '${input:$i:1}\")\n        # this line includes upper and lower case\n       \
    \ if [ $num -ge 65 ] && [ $num -le 90 ] || [ $num -ge 97 ] && [ $num -le 122 ];\
    \ then\n            sum=$((sum + num))\n        fi\n    done\n    echo $sum",
  "    local ascii_code=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        local current_char=\"\
    ${1:$i:1}\"\n        if [[ \"$current_char\" =~ ^[A-Z] ]]; then\n            ascii_code+=\"\
    $(printf '%d' \"'$current_char')\"\n        fi\n    done\n    echo \"$ascii_code\"\
    \ | sed -e 's/\\b\\(.\\)/\\1+/g' -e 's/.$//' | bc", "\tsum=0\n\tfor ((i=0; i<${#1};\
    \ i++)); do\n\t\tchar=${1:$i:1}\n\t\tascii=`printf \"%d\" \"'$char\"`\n\t\tif\
    \ [[ $ascii -gt 64 && $ascii -lt 91 ]]; then\n\t\t\t((sum += ascii))\n\t\tfi\n\
    \tdone\n\techo $sum", "    [ $# -eq 0 ] && return\n    local -i sum=0\n    local\
    \ ch\n    for ch in $(echo \"$1\" | sed 's/\\(.\\)/\\1\\n/g'); do\n        [ \"\
    ${ch^^}\" = \"$ch\" ] && ((sum += ${ch//[!A-Za-z]/}))\n    done\n    echo \"$sum\""]
stop_tokens:
- "\n}"
