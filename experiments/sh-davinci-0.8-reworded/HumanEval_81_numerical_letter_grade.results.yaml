language: sh
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \   local grade=$1\n   if [ $grade -eq 4 ]; then echo A+;\n   elif [ $grade -gt\
    \ 3 ]; then echo A;\n   elif [ $grade -gt 2 ]; then echo B;\n   elif [ $grade\
    \ -gt 1 ]; then echo C;\n   elif [ $grade -gt 0 ]; then echo D;\n   else echo\
    \ E;\n   fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp99kzgpxv.sh: line 28: [: too many arguments

    /tmp/tmp99kzgpxv.sh: line 29: [: too many arguments

    /tmp/tmp99kzgpxv.sh: line 30: [: too many arguments

    /tmp/tmp99kzgpxv.sh: line 31: [: too many arguments

    /tmp/tmp99kzgpxv.sh: line 32: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 == 4.0 ]; then\n        echo '\"A+\"'\n    elif [ $(echo \"$1 > 3.7\"\
    \ | bc -l) == 1 ]; then\n        echo '\"A\"'\n    elif [ $(echo \"$1 > 3.3\"\
    \ | bc -l) == 1 ]; then\n        echo '\"A-\"'\n    elif [ $(echo \"$1 > 3.0\"\
    \ | bc -l) == 1 ]; then\n        echo '\"B+\"'\n    elif [ $(echo \"$1 > 2.7\"\
    \ | bc -l) == 1 ]; then\n        echo '\"B\"'\n    elif [ $(echo \"$1 > 2.3\"\
    \ | bc -l) == 1 ]; then\n        echo '\"B-\"'\n    elif [ $(echo \"$1 > 2.0\"\
    \ | bc -l) == 1 ]; then\n        echo '\"C+\"'\n    elif [ $(echo \"$1 > 1.7\"\
    \ | bc -l) == 1 ]; then\n        echo '\"C\"'\n    elif [ $(echo \"$1 > 1.3\"\
    \ | bc -l) == 1 ]; then\n        echo '\"C-\"'\n    elif [ $(echo \"$1 > 1.0\"\
    \ | bc -l) == 1 ]; then\n        echo '\"D+\"'\n    elif [ $(echo \"$1 > 0.7\"\
    \ | bc -l) == 1 ]; then\n        echo '\"D\"'\n    elif [ $(echo \"$1 > 0.0\"\
    \ | bc -l) == 1 ]; then\n        echo '\"D-\"'\n    else\n        echo '\"E\"\
    '\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp39f09dtu.sh: line 27: [: too many arguments

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 29: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 31: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 33: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 35: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 37: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 39: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 41: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 43: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 45: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 47: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp39f09dtu.sh: line 49: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n    4.0) echo \"A+\" ;;\n    3.7) echo \"A\" ;;\n    3.3) echo\
    \ \"A-\" ;;\n    3.0) echo \"B+\" ;;\n    2.7) echo \"B\" ;;\n    2.3) echo \"\
    B-\" ;;\n    2.0) echo \"C+\" ;;\n    1.7) echo \"C\" ;;\n    1.3) echo \"C-\"\
    \ ;;\n    1.0) echo \"D+\" ;;\n    0.7) echo \"D\" ;;\n    0.0) echo \"D-\" ;;\n\
    \    *) echo \"E\" ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    grade=$1\n    if [[ $(echo \"$grade > 4.0\" | bc -l) -eq 1 ]]; then\n   \
    \     echo \"A+\"\n    elif [[ $(echo \"$grade > 3.7\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"A\"\n    elif [[ $(echo \"$grade > 3.3\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"A-\"\n    elif [[ $(echo \"$grade > 3.0\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"B+\"\n    elif [[ $(echo \"$grade > 2.7\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"B\"\n    elif [[ $(echo \"$grade > 2.3\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"B-\"\n    elif [[ $(echo \"$grade > 2.0\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"C+\"\n    elif [[ $(echo \"$grade > 1.7\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"C\"\n    elif [[ $(echo \"$grade > 1.3\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"C-\"\n    elif [[ $(echo \"$grade > 1.0\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"D+\"\n    elif [[ $(echo \"$grade > 0.7\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"D\"\n    elif [[ $(echo \"$grade > 0.0\" | bc -l) -eq 1 ]]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n\
    \    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tlocal x=\"$1\"\n\n\tif (( $(echo \"$x >= 4.0\" | bc -l) )); then\n\t\techo '\"\
    A+\"'\n\telif (( $(echo \"$x >= 3.7\" | bc -l) )); then\n\t\techo '\"A\"'\n\t\
    elif (( $(echo \"$x >= 3.3\" | bc -l) )); then\n\t\techo '\"A-\"'\n\telif (( $(echo\
    \ \"$x >= 3.0\" | bc -l) )); then\n\t\techo '\"B+\"'\n\telif (( $(echo \"$x >=\
    \ 2.7\" | bc -l) )); then\n\t\techo '\"B\"'\n\telif (( $(echo \"$x >= 2.3\" |\
    \ bc -l) )); then\n\t\techo '\"B-\"'\n\telif (( $(echo \"$x >= 2.0\" | bc -l)\
    \ )); then\n\t\techo '\"C+\"'\n\telif (( $(echo \"$x >= 1.7\" | bc -l) )); then\n\
    \t\techo '\"C\"'\n\telif (( $(echo \"$x >= 1.3\" | bc -l) )); then\n\t\techo '\"\
    C-\"'\n\telif (( $(echo \"$x >= 1.0\" | bc -l) )); then\n\t\techo '\"D+\"'\n\t\
    elif (( $(echo \"$x >= 0.7\" | bc -l) )); then\n\t\techo '\"D\"'\n\telif (( $(echo\
    \ \"$x >= 0.0\" | bc -l) )); then\n\t\techo '\"D-\"'\n\telse\n\t\techo '\"E\"\
    '\n\tfi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local -i num=$1\n    local gpa=\"$2\"\n    local -i num_gpa=`echo \"scale=0;\
    \ $gpa*10\" | bc -l`\n    if [ $num -gt $num_gpa ]; then\n        echo \"A+\"\n\
    \    elif [ $num -eq $num_gpa ]; then\n        if [ $(echo \"$gpa==4.0\" | bc\
    \ -l) -eq 1 ]; then\n            echo \"A+\"\n        else\n            echo \"\
    A\"\n        fi\n    elif [ $num -gt $(($num_gpa-4)) ]; then\n        echo \"\
    A-\"\n    elif [ $num -gt $(($num_gpa-7)) ]; then\n        echo \"B+\"\n    elif\
    \ [ $num -eq $(($num_gpa-7)) ]; then\n        echo \"B\"\n    elif [ $num -gt\
    \ $(($num_gpa-10)) ]; then\n        echo \"B-\"\n    elif [ $num -gt $(($num_gpa-13))\
    \ ]; then\n        echo \"C+\"\n    elif [ $num -eq $(($num_gpa-13)) ]; then\n\
    \        echo \"C\"\n    elif [ $num -gt $(($num_gpa-17)) ]; then\n        echo\
    \ \"C-\"\n    elif [ $num -gt $(($num_gpa-20)) ]; then\n        echo \"D+\"\n\
    \    elif [ $num -eq $(($num_gpa-20)) ]; then\n        echo \"D\"\n    elif [\
    \ $num -gt $(($num_gpa-30)) ]; then\n        echo \"D-\"\n    else\n        echo\
    \ \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfz_utfho.sh: line 27: local: 4.0 3 1.7 2 3.5: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5")

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case \"$1\" in\n    4.0) echo A+;;\n    3.7) echo A;;\n    3.3) echo A-;;\n\
    \    3.0) echo B+;;\n    2.7) echo B;;\n    2.3) echo B-;;\n    2.0) echo C+;;\n\
    \    1.7) echo C;;\n    1.3) echo C-;;\n    1.0) echo D+;;\n    0.7) echo D;;\n\
    \    0.0) echo D-;;\n    *) echo E;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $(echo \"$1\" | bc -l) in\n        4.0) echo '\"A+\"' ;;\n        3.7)\
    \ echo '\"A\"' ;;\n        3.3) echo '\"A-\"' ;;\n        3.0) echo '\"B+\"' ;;\n\
    \        2.7) echo '\"B\"' ;;\n        2.3) echo '\"B-\"' ;;\n        2.0) echo\
    \ '\"C+\"' ;;\n        1.7) echo '\"C\"' ;;\n        1.3) echo '\"C-\"' ;;\n \
    \       1.0) echo '\"D+\"' ;;\n        0.7) echo '\"D\"' ;;\n        0.0) echo\
    \ '\"D-\"' ;;\n        0) echo '\"E\"' ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $1 in\n    4.0) echo \"A+\" ;;\n    3.7) echo \"A\" ;;\n    3.3) echo\
    \ \"A-\" ;;\n    3.0) echo \"B+\" ;;\n    2.7) echo \"B\" ;;\n    2.3) echo \"\
    B-\" ;;\n    2.0) echo \"C+\" ;;\n    1.7) echo \"C\" ;;\n    1.3) echo \"C-\"\
    \ ;;\n    1.0) echo \"D+\" ;;\n    0.7) echo \"D\" ;;\n    0.0) echo \"D-\" ;;\n\
    \    *) echo \"E\" ;;\n  esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024101
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # your code here\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C\
    \ A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmppr09n6pg.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmppr09n6pg.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # your code here\n    GPA=$1\n    if [ $(echo \"$GPA < 0\" | bc) -eq 1 ];\
    \ then\n        echo '\"E\"'\n    elif [ $(echo \"$GPA == 0\" | bc) -eq 1 ]; then\n\
    \        echo '\"E\"'\n    elif [ $(echo \"$GPA >= 4\" | bc) -eq 1 ]; then\n \
    \       echo '\"A+\"'\n    elif [ $(echo \"$GPA >= 3.7\" | bc) -eq 1 ]; then\n\
    \        echo '\"A\"'\n    elif [ $(echo \"$GPA >= 3.3\" | bc) -eq 1 ]; then\n\
    \        echo '\"A-\"'\n    elif [ $(echo \"$GPA >= 3\" | bc) -eq 1 ]; then\n\
    \        echo '\"B+\"'\n    elif [ $(echo \"$GPA >= 2.7\" | bc) -eq 1 ]; then\n\
    \        echo '\"B\"'\n    elif [ $(echo \"$GPA >= 2.3\" | bc) -eq 1 ]; then\n\
    \        echo '\"B-\"'\n    elif [ $(echo \"$GPA >= 2\" | bc) -eq 1 ]; then\n\
    \        echo '\"C+\"'\n    elif [ $(echo \"$GPA >= 1.7\" | bc) -eq 1 ]; then\n\
    \        echo '\"C\"'\n    elif [ $(echo \"$GPA >= 1.3\" | bc) -eq 1 ]; then\n\
    \        echo '\"C-\"'\n    elif [ $(echo \"$GPA >= 1\" | bc) -eq 1 ]; then\n\
    \        echo '\"D+\"'\n    elif [ $(echo \"$GPA >= 0.7\" | bc) -eq 1 ]; then\n\
    \        echo '\"D\"'\n    elif [ $(echo \"$GPA >= 0\" | bc) -eq 1 ]; then\n \
    \       echo '\"D-\"'\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 49: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 51: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 53: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp0e9omffo.sh: line 55: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # You can use the following code to print a grade without the quotation marks:\n\
    \    # echo $(grade_equation \"4.0 3 1.7 2 3.5\") | grep -o \"[^\\\"]*\" | grep\
    \ \"$1\"\n    for x in \"$@\"; do\n        if [ \"$x\" -eq \"$1\" ]; then\n  \
    \          if [ $(echo \"$x>=4.0\" | bc) -eq 1 ]; then\n                echo '\"\
    A+\"'\n            elif [ $(echo \"$x>=3.7\" | bc) -eq 1 ]; then\n           \
    \     echo '\"A\"'\n            elif [ $(echo \"$x>=3.3\" | bc) -eq 1 ]; then\n\
    \                echo '\"A-\"'\n            elif [ $(echo \"$x>=3.0\" | bc) -eq\
    \ 1 ]; then\n                echo '\"B+\"'\n            elif [ $(echo \"$x>=2.7\"\
    \ | bc) -eq 1 ]; then\n                echo '\"B\"'\n            elif [ $(echo\
    \ \"$x>=2.3\" | bc) -eq 1 ]; then\n                echo '\"B-\"'\n           \
    \ elif [ $(echo \"$x>=2.0\" | bc) -eq 1 ]; then\n                echo '\"C+\"\
    '\n            elif [ $(echo \"$x>=1.7\" | bc) -eq 1 ]; then\n               \
    \ echo '\"C\"'\n            elif [ $(echo \"$x>=1.3\" | bc) -eq 1 ]; then\n  \
    \              echo '\"C-\"'\n            elif [ $(echo \"$x>=1.0\" | bc) -eq\
    \ 1 ]; then\n                echo '\"D+\"'\n            elif [ $(echo \"$x>=0.7\"\
    \ | bc) -eq 1 ]; then\n                echo '\"D\"'\n            elif [ $(echo\
    \ \"$x>=0.0\" | bc) -eq 1 ]; then\n                echo '\"D-\"'\n           \
    \ else\n                echo '\"E\"'\n            fi\n        fi\n    done\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9s2sz0su.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tif [ $1 -ge 4.0 ]; then\n\t\techo A+\n\telif [ $1 -ge 3.7 ]; then\n\t\techo\
    \ A\n\telif [ $1 -ge 3.3 ]; then\n\t\techo A-\n\telif [ $1 -ge 3.0 ]; then\n\t\
    \techo B+\n\telif [ $1 -ge 2.7 ]; then\n\t\techo B\n\telif [ $1 -ge 2.3 ]; then\n\
    \t\techo B-\n\telif [ $1 -ge 2.0 ]; then\n\t\techo C+\n\telif [ $1 -ge 1.7 ];\
    \ then\n\t\techo C\n\telif [ $1 -ge 1.3 ]; then\n\t\techo C-\n\telif [ $1 -ge\
    \ 1.0 ]; then\n\t\techo D+\n\telif [ $1 -ge 0.7 ]; then\n\t\techo D\n\telif [\
    \ $1 -ge 0.0 ]; then\n\t\techo D-\n\telse\n\t\techo E\n\tfi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfvanx3x9.sh: line 27: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 29: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 31: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 33: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 35: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 37: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 39: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 41: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 43: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 45: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 47: [: too many arguments

    /tmp/tmpfvanx3x9.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ $(bc <<< \"$gpa >= 4.0\") -eq 1 ]; then\n        echo\
    \ '\"A+\"'\n    elif [ $(bc <<< \"$gpa >= 3.7\") -eq 1 ]; then\n        echo '\"\
    A\"'\n    elif [ $(bc <<< \"$gpa >= 3.3\") -eq 1 ]; then\n        echo '\"A-\"\
    '\n    elif [ $(bc <<< \"$gpa >= 3.0\") -eq 1 ]; then\n        echo '\"B+\"'\n\
    \    elif [ $(bc <<< \"$gpa >= 2.7\") -eq 1 ]; then\n        echo '\"B\"'\n  \
    \  elif [ $(bc <<< \"$gpa >= 2.3\") -eq 1 ]; then\n        echo '\"B-\"'\n   \
    \ elif [ $(bc <<< \"$gpa >= 2.0\") -eq 1 ]; then\n        echo '\"C+\"'\n    elif\
    \ [ $(bc <<< \"$gpa >= 1.7\") -eq 1 ]; then\n        echo '\"C\"'\n    elif [\
    \ $(bc <<< \"$gpa >= 1.3\") -eq 1 ]; then\n        echo '\"C-\"'\n    elif [ $(bc\
    \ <<< \"$gpa >= 1.0\") -eq 1 ]; then\n        echo '\"D+\"'\n    elif [ $(bc <<<\
    \ \"$gpa >= 0.7\") -eq 1 ]; then\n        echo '\"D\"'\n    elif [ $(bc <<< \"\
    $gpa >= 0.0\") -eq 1 ]; then\n        echo '\"D-\"'\n    else\n        echo '\"\
    E\"'\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 28: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 50: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0) echo \"A+\";;\n        3.7) echo \"A\";;\n     \
    \   3.3) echo \"A-\";;\n        3.0) echo \"B+\";;\n        2.7) echo \"B\";;\n\
    \        2.3) echo \"B-\";;\n        2.0) echo \"C+\";;\n        1.7) echo \"\
    C\";;\n        1.3) echo \"C-\";;\n        1.0) echo \"D+\";;\n        0.7) echo\
    \ \"D\";;\n        0.0) echo \"D-\";;\n        * ) echo \"E\";;\n    esac\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local grade=$1\n    if (( $(echo \"$grade >= 4.0\" | bc -l) )); then echo\
    \ A+\n    elif (( $(echo \"$grade >= 3.7\" | bc -l) )); then echo A\n    elif\
    \ (( $(echo \"$grade >= 3.3\" | bc -l) )); then echo A-\n    elif (( $(echo \"\
    $grade >= 3.0\" | bc -l) )); then echo B+\n    elif (( $(echo \"$grade >= 2.7\"\
    \ | bc -l) )); then echo B\n    elif (( $(echo \"$grade >= 2.3\" | bc -l) ));\
    \ then echo B-\n    elif (( $(echo \"$grade >= 2.0\" | bc -l) )); then echo C+\n\
    \    elif (( $(echo \"$grade >= 1.7\" | bc -l) )); then echo C\n    elif (( $(echo\
    \ \"$grade >= 1.3\" | bc -l) )); then echo C-\n    elif (( $(echo \"$grade >=\
    \ 1.0\" | bc -l) )); then echo D+\n    elif (( $(echo \"$grade >= 0.7\" | bc -l)\
    \ )); then echo D\n    elif (( $(echo \"$grade >= 0.0\" | bc -l) )); then echo\
    \ D-\n    else echo E\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $1 in\n    4.0)\n      printf \"A+\"\n      ;;\n    3.7|[3-4].?)\n   \
    \   printf \"A\"\n      ;;\n    3.3|[3-3].?)\n      printf \"A-\"\n      ;;\n\
    \    3.0|[3-2].?)\n      printf \"B+\"\n      ;;\n    2.7|[2-3].?)\n      printf\
    \ \"B\"\n      ;;\n    2.3|[2-2].?)\n      printf \"B-\"\n      ;;\n    2.0|[2-1].?)\n\
    \      printf \"C+\"\n      ;;\n    1.7|[1-3].?)\n      printf \"C\"\n      ;;\n\
    \    1.3|[1-2].?)\n      printf \"C-\"\n      ;;\n    1.0|[1-1].?)\n      printf\
    \ \"D+\"\n      ;;\n    0.7|[0-3].?)\n      printf \"D\"\n      ;;\n    0.0|[0-1].?)\n\
    \      printf \"D-\"\n      ;;\n    *.0)\n      printf \"E\"\n      ;;\n  esac\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ \"$gpa\" = 4.0 ]; then\n        echo \"A+\"\n    elif\
    \ [ \"$gpa\" \\> 3.7 ]; then\n        echo \"A\"\n    elif [ \"$gpa\" \\> 3.3\
    \ ]; then\n        echo \"A-\"\n    elif [ \"$gpa\" \\> 3.0 ]; then\n        echo\
    \ \"B+\"\n    elif [ \"$gpa\" \\> 2.7 ]; then\n        echo \"B\"\n    elif [\
    \ \"$gpa\" \\> 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$gpa\" \\> 2.0 ];\
    \ then\n        echo \"C+\"\n    elif [ \"$gpa\" \\> 1.7 ]; then\n        echo\
    \ \"C\"\n    elif [ \"$gpa\" \\> 1.3 ]; then\n        echo \"C-\"\n    elif [\
    \ \"$gpa\" \\> 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$gpa\" \\> 0.7 ];\
    \ then\n        echo \"D\"\n    elif [ \"$gpa\" \\> 0.0 ]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # Do not change or remove the leading or trailing spaces\n    declare -A\
    \ grades=(\n        [4.0]=\"A+\" [3.7]=\"A\" [3.3]=\"A-\" [3.0]=\"B+\" [2.7]=\"\
    B\" [2.3]=\"B-\"\n        [2.0]=\"C+\" [1.7]=\"C\" [1.3]=\"C-\" [1.0]=\"D+\" [0.7]=\"\
    D\" [0.0]=\"D-\"\n    )\n    for f in $1; do\n        for k in \"${!grades[@]}\"\
    ; do\n            if (( $(echo \"$f >= $k\" | bc -l) )); then\n              \
    \  printf '\"%s\" ' \"${grades[$k]}\"\n                break\n            fi\n\
    \        done\n    done\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [[ $1 -ge 4.0 ]]; then\n        echo \"A+\"\n    elif [[ $1 -gt 3.7 ]];\
    \ then\n        echo \"A\"\n    elif [[ $1 -gt 3.3 ]]; then\n        echo \"A-\"\
    \n    elif [[ $1 -gt 3.0 ]]; then\n        echo \"B+\"\n    elif [[ $1 -gt 2.7\
    \ ]]; then\n        echo \"B\"\n    elif [[ $1 -gt 2.3 ]]; then\n        echo\
    \ \"B-\"\n    elif [[ $1 -gt 2.0 ]]; then\n        echo \"C+\"\n    elif [[ $1\
    \ -gt 1.7 ]]; then\n        echo \"C\"\n    elif [[ $1 -gt 1.3 ]]; then\n    \
    \    echo \"C-\"\n    elif [[ $1 -gt 1.0 ]]; then\n        echo \"D+\"\n    elif\
    \ [[ $1 -gt 0.7 ]]; then\n        echo \"D\"\n    elif [[ $1 -gt 0.0 ]]; then\n\
    \        echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n\
    \    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwjpj2uep.sh: line 27: [[: 4.0 3 1.7 2 3.5: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 29: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 31: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 33: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 35: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 37: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 39: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 41: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 43: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 45: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 47: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpwjpj2uep.sh: line 49: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 -ge 4.0 ]; then\n        echo '\"A+\"'\n    elif [ $1 -gt 3.7 ];\
    \ then\n        echo '\"A\"'\n    elif [ $1 -gt 3.3 ]; then\n        echo '\"\
    A-\"'\n    elif [ $1 -gt 3.0 ]; then\n        echo '\"B+\"'\n    elif [ $1 -gt\
    \ 2.7 ]; then\n        echo '\"B\"'\n    elif [ $1 -gt 2.3 ]; then\n        echo\
    \ '\"B-\"'\n    elif [ $1 -gt 2.0 ]; then\n        echo '\"C+\"'\n    elif [ $1\
    \ -gt 1.7 ]; then\n        echo '\"C\"'\n    elif [ $1 -gt 1.3 ]; then\n     \
    \   echo '\"C-\"'\n    elif [ $1 -gt 1.0 ]; then\n        echo '\"D+\"'\n    elif\
    \ [ $1 -gt 0.7 ]; then\n        echo '\"D\"'\n    elif [ $1 -gt 0.0 ]; then\n\
    \        echo '\"D-\"'\n    else\n        echo '\"E\"'\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn24wrhel.sh: line 27: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 29: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 31: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 33: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 35: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 37: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 39: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 41: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 43: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 45: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 47: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    gpa=$1\n    if [ $(echo \"$gpa >= 4.0\" | bc) -eq 1 ]; then\n        echo\
    \ \"A+\"\n    elif [ $(echo \"$gpa >= 3.7\" | bc) -eq 1 ]; then\n        echo\
    \ \"A\"\n    elif [ $(echo \"$gpa >= 3.3\" | bc) -eq 1 ]; then\n        echo \"\
    A-\"\n    elif [ $(echo \"$gpa >= 3.0\" | bc) -eq 1 ]; then\n        echo \"B+\"\
    \n    elif [ $(echo \"$gpa >= 2.7\" | bc) -eq 1 ]; then\n        echo \"B\"\n\
    \    elif [ $(echo \"$gpa >= 2.3\" | bc) -eq 1 ]; then\n        echo \"B-\"\n\
    \    elif [ $(echo \"$gpa >= 2.0\" | bc) -eq 1 ]; then\n        echo \"C+\"\n\
    \    elif [ $(echo \"$gpa >= 1.7\" | bc) -eq 1 ]; then\n        echo \"C\"\n \
    \   elif [ $(echo \"$gpa >= 1.3\" | bc) -eq 1 ]; then\n        echo \"C-\"\n \
    \   elif [ $(echo \"$gpa >= 1.0\" | bc) -eq 1 ]; then\n        echo \"D+\"\n \
    \   elif [ $(echo \"$gpa >= 0.7\" | bc) -eq 1 ]; then\n        echo \"D\"\n  \
    \  elif [ $(echo \"$gpa >= 0.0\" | bc) -eq 1 ]; then\n        echo \"D-\"\n  \
    \  else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 28: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpj55ahvf0.sh: line 50: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if [ $1 -eq 4.0 ]; then\n    echo \"A+\"\n  elif [ $(echo \"$1 > 3.7\" | bc)\
    \ -eq 1 ]; then\n    echo \"A\"\n  elif [ $(echo \"$1 > 3.3\" | bc) -eq 1 ]; then\n\
    \    echo \"A-\"\n  elif [ $(echo \"$1 > 3.0\" | bc) -eq 1 ]; then\n    echo \"\
    B+\"\n  elif [ $(echo \"$1 > 2.7\" | bc) -eq 1 ]; then\n    echo \"B\"\n  elif\
    \ [ $(echo \"$1 > 2.3\" | bc) -eq 1 ]; then\n    echo \"B-\"\n  elif [ $(echo\
    \ \"$1 > 2.0\" | bc) -eq 1 ]; then\n    echo \"C+\"\n  elif [ $(echo \"$1 > 1.7\"\
    \ | bc) -eq 1 ]; then\n    echo \"C\"\n  elif [ $(echo \"$1 > 1.3\" | bc) -eq\
    \ 1 ]; then\n    echo \"C-\"\n  elif [ $(echo \"$1 > 1.0\" | bc) -eq 1 ]; then\n\
    \    echo \"D+\"\n  elif [ $(echo \"$1 > 0.7\" | bc) -eq 1 ]; then\n    echo \"\
    D\"\n  elif [ $(echo \"$1 > 0.0\" | bc) -eq 1 ]; then\n    echo \"D-\"\n  else\n\
    \    echo \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjgbpbkj7.sh: line 27: [: too many arguments

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpjgbpbkj7.sh: line 49: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0) echo A+;;\n        3.7) echo A;;\n        3.3) echo\
    \ A-;;\n        3.0) echo B+;;\n        2.7) echo B;;\n        2.3) echo B-;;\n\
    \        2.0) echo C+;;\n        1.7) echo C;;\n        1.3) echo C-;;\n     \
    \   1.0) echo D+;;\n        0.7) echo D;;\n        0.0) echo D-;;\n        *)\
    \ echo E;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if [ \"$1\" -ge 4 ]; then echo '\"A+\"';\n  elif [ \"$1\" -ge 3.7 ]; then echo\
    \ '\"A\"';\n  elif [ \"$1\" -ge 3.3 ]; then echo '\"A-\"';\n  elif [ \"$1\" -ge\
    \ 3 ]; then echo '\"B+\"';\n  elif [ \"$1\" -ge 2.7 ]; then echo '\"B\"';\n  elif\
    \ [ \"$1\" -ge 2.3 ]; then echo '\"B-\"';\n  elif [ \"$1\" -ge 2 ]; then echo\
    \ '\"C+\"';\n  elif [ \"$1\" -ge 1.7 ]; then echo '\"C\"';\n  elif [ \"$1\" -ge\
    \ 1.3 ]; then echo '\"C-\"';\n  elif [ \"$1\" -ge 1 ]; then echo '\"D+\"';\n \
    \ elif [ \"$1\" -ge 0.7 ]; then echo '\"D\"';\n  elif [ \"$1\" -ge 0 ]; then echo\
    \ '\"D-\"';\n  else echo '\"E\"';\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe7lb6l61.sh: line 27: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 29: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 31: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 33: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 35: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 37: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpe7lb6l61.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tGPA=$1\n\tif [ \"$GPA\" = \"4.0\" ]; then\n\t\techo \"A+\"\n\telif [ $(echo\
    \ \"$GPA > 3.7\" | bc) -eq 1 ]; then\n\t\techo \"A\"\n\telif [ $(echo \"$GPA >\
    \ 3.3\" | bc) -eq 1 ]; then\n\t\techo \"A-\"\n\telif [ $(echo \"$GPA > 3.0\" |\
    \ bc) -eq 1 ]; then\n\t\techo \"B+\"\n\telif [ $(echo \"$GPA > 2.7\" | bc) -eq\
    \ 1 ]; then\n\t\techo \"B\"\n\telif [ $(echo \"$GPA > 2.3\" | bc) -eq 1 ]; then\n\
    \t\techo \"B-\"\n\telif [ $(echo \"$GPA > 2.0\" | bc) -eq 1 ]; then\n\t\techo\
    \ \"C+\"\n\telif [ $(echo \"$GPA > 1.7\" | bc) -eq 1 ]; then\n\t\techo \"C\"\n\
    \telif [ $(echo \"$GPA > 1.3\" | bc) -eq 1 ]; then\n\t\techo \"C-\"\n\telif [\
    \ $(echo \"$GPA > 1.0\" | bc) -eq 1 ]; then\n\t\techo \"D+\"\n\telif [ $(echo\
    \ \"$GPA > 0.7\" | bc) -eq 1 ]; then\n\t\techo \"D\"\n\telif [ $(echo \"$GPA >\
    \ 0.0\" | bc) -eq 1 ]; then\n\t\techo \"D-\"\n\telse\n\t\techo \"E\"\n\tfi\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp8f_eh8rv.sh: line 50: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # your code here\n  local grade=$1\n  if [ $(awk -v grade=$grade 'BEGIN{print\
    \ grade >= 4.0 ? \"1\" : \"0\"}') -eq 1 ]; then\n    echo \"A+\"\n  elif [ $(awk\
    \ -v grade=$grade 'BEGIN{print grade >= 3.7 ? \"1\" : \"0\"}') -eq 1 ]; then\n\
    \    echo \"A\"\n  elif [ $(awk -v grade=$grade 'BEGIN{print grade >= 3.3 ? \"\
    1\" : \"0\"}') -eq 1 ]; then\n    echo \"A-\"\n  elif [ $(awk -v grade=$grade\
    \ 'BEGIN{print grade >= 3.0 ? \"1\" : \"0\"}') -eq 1 ]; then\n    echo \"B+\"\n\
    \  elif [ $(awk -v grade=$grade 'BEGIN{print grade >= 2.7 ? \"1\" : \"0\"}') -eq\
    \ 1 ]; then\n    echo \"B\"\n  elif [ $(awk -v grade=$grade 'BEGIN{print grade\
    \ >= 2.3 ? \"1\" : \"0\"}') -eq 1 ]; then\n    echo \"B-\"\n  elif [ $(awk -v\
    \ grade=$grade 'BEGIN{print grade >= 2.0 ? \"1\" : \"0\"}') -eq 1 ]; then\n  \
    \  echo \"C+\"\n  elif [ $(awk -v grade=$grade 'BEGIN{print grade >= 1.7 ? \"\
    1\" : \"0\"}') -eq 1 ]; then\n    echo \"C\"\n  elif [ $(awk -v grade=$grade 'BEGIN{print\
    \ grade >= 1.3 ? \"1\" : \"0\"}') -eq 1 ]; then\n    echo \"C-\"\n  elif [ $(awk\
    \ -v grade=$grade 'BEGIN{print grade >= 1.0 ? \"1\" : \"0\"}') -eq 1 ]; then\n\
    \    echo \"D+\"\n  elif [ $(awk -v grade=$grade 'BEGIN{print grade >= 0.7 ? \"\
    1\" : \"0\"}') -eq 1 ]; then\n    echo \"D\"\n  elif [ $(awk -v grade=$grade 'BEGIN{print\
    \ grade >= 0.0 ? \"1\" : \"0\"}') -eq 1 ];\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjtzf6nkd.sh: line 52: syntax error near unexpected token `}''

    /tmp/tmpjtzf6nkd.sh: line 52: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $1 in\n    4.0)    echo \"A+\";;\n    3.7|3.8|3.9)    echo \"A\";;\n \
    \   3.3|3.4|3.5|3.6) echo \"A-\";;\n    3.0|3.1|3.2) echo \"B+\";;\n    2.7|2.8|2.9)\
    \ echo \"B\";;\n    2.3|2.4|2.5|2.6) echo \"B-\";;\n    2.0|2.1|2.2) echo \"C+\"\
    ;;\n    1.7|1.8|1.9) echo \"C\";;\n    1.3|1.4|1.5|1.6) echo \"C-\";;\n    1.0|1.1|1.2)\
    \ echo \"D+\";;\n    0.7|0.8|0.9) echo \"D\";;\n    0.3|0.4|0.5|0.6) echo \"D-\"\
    ;;\n    0.0) echo \"E\";;\n  esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: -1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    awk '{\n    if ($1 >= 4.0)\n        print \"\\\"A+\\\"\"\n    else if ($1\
    \ > 3.7)\n        print \"\\\"A\\\"\"\n    else if ($1 > 3.3)\n        print \"\
    \\\"A-\\\"\"\n    else if ($1 > 3.0)\n        print \"\\\"B+\\\"\"\n    else if\
    \ ($1 > 2.7)\n        print \"\\\"B\\\"\"\n    else if ($1 > 2.3)\n        print\
    \ \"\\\"B-\\\"\"\n    else if ($1 > 2.0)\n        print \"\\\"C+\\\"\"\n    else\
    \ if ($1 > 1.7)\n        print \"\\\"C\\\"\"\n    else if ($1 > 1.3)\n       \
    \ print \"\\\"C-\\\"\"\n    else if ($1 > 1.0)\n        print \"\\\"D+\\\"\"\n\
    \    else if ($1 > 0.7)\n        print \"\\\"D\\\"\"\n    else if ($1 > 0.0)\n\
    \        print \"\\\"D-\\\"\"\n    else if ($1 == 0.0)\n        print \"\\\"E\\\
    \"\"\n    }'\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=35 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660024107
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    echo \"lblstart: \"\n    for i in $1\n    do\n        if [ $(bc <<< \"$i\
    \ < 0.0\") -eq 1 ]\n        then\n            echo '\"E\"'\n        elif [ $(bc\
    \ <<< \"$i < 0.7\") -eq 1 ]\n        then\n            echo '\"D-\"'\n       \
    \ elif [ $(bc <<< \"$i < 1.0\") -eq 1 ]\n        then\n            echo '\"D+\"\
    '\n        elif [ $(bc <<< \"$i < 1.3\") -eq 1 ]\n        then\n            echo\
    \ '\"D\"'\n        elif [ $(bc <<< \"$i < 1.7\") -eq 1 ]\n        then\n     \
    \       echo '\"C-\"'\n        elif [ $(bc <<< \"$i < 2.0\") -eq 1 ]\n       \
    \ then\n            echo '\"C+\"'\n        elif [ $(bc <<< \"$i < 2.3\") -eq 1\
    \ ]\n        then\n            echo '\"C\"'\n        elif [ $(bc <<< \"$i < 2.7\"\
    ) -eq 1 ]\n        then\n            echo '\"B-\"'\n        elif [ $(bc <<< \"\
    $i < 3.0\") -eq 1 ]\n        then\n            echo '\"B+\"'\n        elif [ $(bc\
    \ <<< \"$i < 3.3\") -eq 1 ]\n        then\n            echo '\"B\"'\n        elif\
    \ [ $(bc <<< \"$i < 3.7\") -eq 1 ]\n        then\n            echo '\"A-\"'\n\
    \        elif [ $(bc <<< \"$i < 4.0\") -eq 1 ]\n        then\n            echo\
    \ '\"A+\"'\n        else\n            echo '\"A\"'\n        fi\n    done\n}\n\n\
    candidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # Write your code here\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps7vzks_n.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmps7vzks_n.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  num=$1\n  if [ $(bc <<<\"$num >= 4.0\") -eq 1 ]; then\n    echo A+\n  elif\
    \ [ $(bc <<<\"$num >= 3.7\") -eq 1 ]; then\n    echo A\n  elif [ $(bc <<<\"$num\
    \ >= 3.3\") -eq 1 ]; then\n    echo A-\n  elif [ $(bc <<<\"$num >= 3.0\") -eq\
    \ 1 ]; then\n    echo B+\n  elif [ $(bc <<<\"$num >= 2.7\") -eq 1 ]; then\n  \
    \  echo B\n  elif [ $(bc <<<\"$num >= 2.3\") -eq 1 ]; then\n    echo B-\n  elif\
    \ [ $(bc <<<\"$num >= 2.0\") -eq 1 ]; then\n    echo C+\n  elif [ $(bc <<<\"$num\
    \ >= 1.7\") -eq 1 ]; then\n    echo C\n  elif [ $(bc <<<\"$num >= 1.3\") -eq 1\
    \ ]; then\n    echo C-\n  elif [ $(bc <<<\"$num >= 1.0\") -eq 1 ]; then\n    echo\
    \ D+\n  elif [ $(bc <<<\"$num >= 0.7\") -eq 1 ]; then\n    echo D\n  elif [ $(bc\
    \ <<<\"$num >= 0.0\") -eq 1 ]; then\n    echo D-\n  else\n    echo E\n  fi\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 28: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpx9z444g1.sh: line 50: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    #gpa=\"$1\"\n    #letters=$(echo | awk '{ if($gpa>=4) print \"+A\"; else\
    \ if($gpa>=3.7) print \"A\";\n    #else if($gpa>=3.3) print \"-A\"; else if($gpa>=3)\
    \ print \"+B\";\n    #else if($gpa>=2.7) print \"B\"; else if($gpa>=2.3) print\
    \ \"-B\"; else if($gpa>=2) print \"+C\";\n    #else if($gpa>=1.7) print \"C\"\
    ; else if($gpa>=1.3) print \"-C\"; else if($gpa>=1) print \"+D\";\n    #else if($gpa>=0.7)\
    \ print \"D\"; else if($gpa>=0) print \"-D\"; else print \"E\"}')\n    #echo \"\
    $letters\"\n    return\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 -ge 4.0 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n\
    \        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n \
    \       echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n \
    \       echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n \
    \       echo \"D\"\n    elif [ $1 -ge 0.0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"\
    A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvgsn3rmv.sh: line 27: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 29: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 31: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 33: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 35: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 37: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 39: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 41: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 43: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 45: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 47: [: too many arguments

    /tmp/tmpvgsn3rmv.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if [ $1 -eq \"4.0\" ]; then\n    echo \"A+\"\n  elif [ $1 -gt \"3.7\" ]; then\n\
    \    echo \"A\"\n  elif [ $1 -gt \"3.3\" ]; then\n    echo \"A-\"\n  elif [ $1\
    \ -gt \"3.0\" ]; then\n    echo \"B+\"\n  elif [ $1 -gt \"2.7\" ]; then\n    echo\
    \ \"B\"\n  elif [ $1 -gt \"2.3\" ]; then\n    echo \"B-\"\n  elif [ $1 -gt \"\
    2.0\" ]; then\n    echo \"C+\"\n  elif [ $1 -gt \"1.7\" ]; then\n    echo \"C\"\
    \n  elif [ $1 -gt \"1.3\" ]; then\n    echo \"C-\"\n  elif [ $1 -gt \"1.0\" ];\
    \ then\n    echo \"D+\"\n  elif [ $1 -gt \"0.7\" ]; then\n    echo \"D\"\n  elif\
    \ [ $1 -gt \"0.0\" ]; then\n    echo \"D-\"\n  else\n    echo \"E\"\n  fi\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuwhn1dy1.sh: line 27: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 29: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 31: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 33: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 35: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 37: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 39: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 41: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 43: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 45: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 47: [: too many arguments

    /tmp/tmpuwhn1dy1.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case \"$1\" in\n        4.0)\n            echo '\"A+\"'\n            ;;\n\
    \        3.7 | 3.8 | 3.9)\n            echo '\"A\"'\n            ;;\n        3.3\
    \ | 3.4 | 3.5 | 3.6)\n            echo '\"A-\"'\n            ;;\n        3.0 |\
    \ 3.1 | 3.2)\n            echo '\"B+\"'\n            ;;\n        2.7 | 2.8 | 2.9)\n\
    \            echo '\"B\"'\n            ;;\n        2.3 | 2.4 | 2.5 | 2.6)\n  \
    \          echo '\"B-\"'\n            ;;\n        2.0 | 2.1 | 2.2)\n         \
    \   echo '\"C+\"'\n            ;;\n        1.7 | 1.8 | 1.9)\n            echo\
    \ '\"C\"'\n            ;;\n        1.3 | 1.4 | 1.5 | 1.6)\n            echo '\"\
    C-\"'\n            ;;\n        1.0 | 1.1 | 1.2)\n            echo '\"D+\"'\n \
    \           ;;\n        0.7 | 0.8 | 0.9)\n            echo '\"D\"'\n         \
    \   ;;\n        0.0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6)\n            echo '\"\
    D-\"'\n            ;;\n        *)\n            echo '\"E\"'\n            ;;\n\
    \    esac\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # Define a dictioanry to map letter grades to numbers\n    local -A grades=(\
    \ [\"A+\"]=4 [\"A\"]=3.7 [\"A-\"]=3.3 [\"B+\"]=3 [\"B\"]=2.7 [\"B-\"]=2.3 [\"\
    C+\"]=2 [\"C\"]=1.7 [\"C-\"]=1.3 [\"D+\"]=1 [\"D\"]=0.7 [\"D-\"]=0 [\"E\"]=0 )\n\
    \    # Generate the output string, start with a bracket\n    local -a output=(\"\
    [\")\n    # Loop through the input and for each number, look up a letter\n   \
    \ for number in $@; do\n        # Start with the lowest letter grade and work\
    \ your way up\n        for grade in \"${!grades[@]}\"; do\n            # If the\
    \ number is greater than or equal to the number \n            # associated with\
    \ the letter grade, then add it to the output\n            if (( $(echo \"$number\
    \ >= ${grades[$grade]}\" | bc -l) )); then\n                output+=\"\\\"$grade\\\
    \",\"\n                break\n            fi\n        done\n    done\n    # Remove\
    \ the last comma and add the closing bracket\n    output=${output::-1}\n    output+=\"\
    ]\"\n    # Print the resulting string, which should be a list of strings\n   \
    \ echo \"$output\"\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C\
    \ A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    echo \"$@\" | python -c \"\nimport sys\ngrades = sys.stdin.read().split()\n\
    grades = [round(float(i), 1) for i in grades]\ndef grade(x):\n    if x >= 4.0:\n\
    \        return 'A+'\n    elif x >= 3.7:\n        return 'A'\n    elif x >= 3.3:\n\
    \        return 'A-'\n    elif x >= 3.0:\n        return 'B+'\n    elif x >= 2.7:\n\
    \        return 'B'\n    elif x >= 2.3:\n        return 'B-'\n    elif x >= 2.0:\n\
    \        return 'C+'\n    elif x >= 1.7:\n        return 'C'\n    elif x >= 1.3:\n\
    \        return 'C-'\n    elif x >= 1.0:\n        return 'D+'\n    elif x >= 0.7:\n\
    \        return 'D'\n    elif x >= 0.0:\n        return 'D-'\n    else:\n    \
    \    return 'E'\nprint('[{}]'.format(', '.join(map(lambda x: '\\\\\"{}\\\\\"'.format(grade(x)),\
    \ grades))))\n\"\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "  File \"<string>\", line 32\n    print('[{}]'.format(', '.join(map(lambda\
    \ x: '\\{}\\'.format(grade(x)), grades))))\n                                 \
    \                                                 ^\nSyntaxError: EOL while scanning\
    \ string literal\n"
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \   gpa=$1\n   python3 -c \"\nimport sys\ngpas=sys.argv[1].split()\ntable={'4.0':'A+',\
    \ '3.7':'A', '3.3':'A-', '3.0':'B+', '2.7':'B', '2.3':'B-', '2.0':'C+', '1.7':'C',\
    \ '1.3':'C-', '1.0':'D+', '0.7':'D', '0.0':'D-'}\nscores=[]\nfor gpa in gpas:\n\
    \   grade=''\n   for key in table:\n      if gpa >= float(key):\n         grade=table[key]\n\
    \         break\n   scores.append(grade)\nprint(scores)\" $gpa\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"<string>\", line 9, in <module>\n\
    TypeError: '>=' not supported between instances of 'str' and 'float'\n"
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # Your code here\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C\
    \ A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3wqxgc0f.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmp3wqxgc0f.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if [ $1 -ge 4.0 ]; then echo A+;\n  elif [ $1 -ge 3.7 ]; then echo A;\n  elif\
    \ [ $1 -ge 3.3 ]; then echo A-;\n  elif [ $1 -ge 3.0 ]; then echo B+;\n  elif\
    \ [ $1 -ge 2.7 ]; then echo B;\n  elif [ $1 -ge 2.3 ]; then echo B-;\n  elif [\
    \ $1 -ge 2.0 ]; then echo C+;\n  elif [ $1 -ge 1.7 ]; then echo C;\n  elif [ $1\
    \ -ge 1.3 ]; then echo C-;\n  elif [ $1 -ge 1.0 ]; then echo D+;\n  elif [ $1\
    \ -ge 0.7 ]; then echo D;\n  elif [ $1 -ge 0.0 ]; then echo D-;\n  else echo E;\n\
    \  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp748mpyku.sh: line 27: [: too many arguments

    /tmp/tmp748mpyku.sh: line 28: [: too many arguments

    /tmp/tmp748mpyku.sh: line 29: [: too many arguments

    /tmp/tmp748mpyku.sh: line 30: [: too many arguments

    /tmp/tmp748mpyku.sh: line 31: [: too many arguments

    /tmp/tmp748mpyku.sh: line 32: [: too many arguments

    /tmp/tmp748mpyku.sh: line 33: [: too many arguments

    /tmp/tmp748mpyku.sh: line 34: [: too many arguments

    /tmp/tmp748mpyku.sh: line 35: [: too many arguments

    /tmp/tmp748mpyku.sh: line 36: [: too many arguments

    /tmp/tmp748mpyku.sh: line 37: [: too many arguments

    /tmp/tmp748mpyku.sh: line 38: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  input=$1\n  if [ $input -ge 4.0 ]; then\n    echo \"A+\"\n  elif [ $input -ge\
    \ 3.7 ]; then\n    echo \"A\"\n  elif [ $input -ge 3.3 ]; then\n    echo \"A-\"\
    \n  elif [ $input -ge 3.0 ]; then\n    echo \"B+\"\n  elif [ $input -ge 2.7 ];\
    \ then\n    echo \"B\"\n  elif [ $input -ge 2.3 ]; then\n    echo \"B-\"\n  elif\
    \ [ $input -ge 2.0 ]; then\n    echo \"C+\"\n  elif [ $input -ge 1.7 ]; then\n\
    \    echo \"C\"\n  elif [ $input -ge 1.3 ]; then\n    echo \"C-\"\n  elif [ $input\
    \ -ge 1.0 ]; then\n    echo \"D+\"\n  elif [ $input -ge 0.7 ]; then\n    echo\
    \ \"D\"\n  elif [ $input -ge 0.0 ]; then\n    echo \"D-\"\n  else\n    echo \"\
    E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmrr_bdhd.sh: line 28: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 30: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 32: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 34: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 36: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 38: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 40: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 42: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 44: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 46: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 48: [: too many arguments

    /tmp/tmpmrr_bdhd.sh: line 50: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    for grade in $1\n    do\n        echo $(python -c \"print '\\\"' + ''.join(['ABCD+-'[int(round(float('$grade')))]])\
    \ + '\\\"'\")\n    done\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # TODO: Write your code here\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_fbudx61.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmp_fbudx61.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tif [[ $1 -ge 0 ]] && [[ $1 -lt 2 ]]; then\n\t\techo '\"D-\"'\n\telif [[ $1 -ge\
    \ 2 ]] && [[ $1 -lt 3 ]]; then\n\t\techo '\"C-\"'\n\telif [[ $1 -ge 3 ]] && [[\
    \ $1 -lt 4 ]]; then\n\t\techo '\"B-\"'\n\telif [[ $1 -ge 4 ]] && [[ $1 -lt 5 ]];\
    \ then\n\t\techo '\"A-\"'\n\telse\n\t\techo '\"A+\"'\n\tfi\n}\n\ncandidate() {\n\
    \    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_ruwa4zj.sh: line 27: [[: 4.0 3 1.7 2 3.5: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmp_ruwa4zj.sh: line 29: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmp_ruwa4zj.sh: line 31: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmp_ruwa4zj.sh: line 33: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # Enter your solution here\n    echo \"Enter your solution here\"\n}\n\n\
    candidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0)\n            echo \"A+\"\n            ;;\n     \
    \   3.7|3.8|3.9)\n            echo \"A\"\n            ;;\n        3.3|3.4|3.5|3.6)\n\
    \            echo \"A-\"\n            ;;\n        3.0|3.1|3.2)\n            echo\
    \ \"B+\"\n            ;;\n        2.7|2.8|2.9)\n            echo \"B\"\n     \
    \       ;;\n        2.3|2.4|2.5|2.6)\n            echo \"B-\"\n            ;;\n\
    \        2.0|2.1|2.2)\n            echo \"C+\"\n            ;;\n        1.7|1.8|1.9)\n\
    \            echo \"C\"\n            ;;\n        1.3|1.4|1.5|1.6)\n          \
    \  echo \"C-\"\n            ;;\n        1.0|1.1|1.2)\n            echo \"D+\"\n\
    \            ;;\n        0.7|0.8|0.9)\n            echo \"D\"\n            ;;\n\
    \        0.3|0.4|0.5|0.6)\n            echo \"D-\"\n            ;;\n        0.0)\n\
    \            echo \"E\"\n            ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tif [ $1 -ge 4.0 ]; then\n\t\techo '\"A+\"'\n\telif [ $1 -ge 3.7 ]; then\n\t\t\
    echo '\"A\"'\n\telif [ $1 -ge 3.3 ]; then\n\t\techo '\"A-\"'\n\telif [ $1 -ge\
    \ 3.0 ]; then\n\t\techo '\"B+\"'\n\telif [ $1 -ge 2.7 ]; then\n\t\techo '\"B\"\
    '\n\telif [ $1 -ge 2.3 ]; then\n\t\techo '\"B-\"'\n\telif [ $1 -ge 2.0 ]; then\n\
    \t\techo '\"C+\"'\n\telif [ $1 -ge 1.7 ]; then\n\t\techo '\"C\"'\n\telif [ $1\
    \ -ge 1.3 ]; then\n\t\techo '\"C-\"'\n\telif [ $1 -ge 1.0 ]; then\n\t\techo '\"\
    D+\"'\n\telif [ $1 -ge 0.7 ]; then\n\t\techo '\"D\"'\n\telif [ $1 -ge 0.0 ]; then\n\
    \t\techo '\"D-\"'\n\telse\n\t\techo '\"E\"'\n\tfi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6tiz495o.sh: line 27: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 29: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 31: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 33: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 35: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 37: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 39: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 41: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 43: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 45: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 47: [: too many arguments

    /tmp/tmp6tiz495o.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ \"$1\" = \"4.0\" ]; then\n        echo \"A+\"\n    elif [ $(bc <<< \"\
    $1 > 3.7\") -eq 1 ]; then\n        echo \"A\"\n    elif [ $(bc <<< \"$1 > 3.3\"\
    ) -eq 1 ]; then\n        echo \"A-\"\n    elif [ $(bc <<< \"$1 > 3.0\") -eq 1\
    \ ]; then\n        echo \"B+\"\n    elif [ $(bc <<< \"$1 > 2.7\") -eq 1 ]; then\n\
    \        echo \"B\"\n    elif [ $(bc <<< \"$1 > 2.3\") -eq 1 ]; then\n       \
    \ echo \"B-\"\n    elif [ $(bc <<< \"$1 > 2.0\") -eq 1 ]; then\n        echo \"\
    C+\"\n    elif [ $(bc <<< \"$1 > 1.7\") -eq 1 ]; then\n        echo \"C\"\n  \
    \  elif [ $(bc <<< \"$1 > 1.3\") -eq 1 ]; then\n        echo \"C-\"\n    elif\
    \ [ $(bc <<< \"$1 > 1.0\") -eq 1 ]; then\n        echo \"D+\"\n    elif [ $(bc\
    \ <<< \"$1 > 0.7\") -eq 1 ]; then\n        echo \"D\"\n    elif [ $(bc <<< \"\
    $1 > 0.0\") -eq 1 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n\
    \    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpefeoi8z2.sh: line 49: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 -ge 4 ]; then\n        echo \"A+\"\n    elif [ $1 -ge 3.7 ]; then\n\
    \        echo \"A\"\n    elif [ $1 -ge 3.3 ]; then\n        echo \"A-\"\n    elif\
    \ [ $1 -ge 3 ]; then\n        echo \"B+\"\n    elif [ $1 -ge 2.7 ]; then\n   \
    \     echo \"B\"\n    elif [ $1 -ge 2.3 ]; then\n        echo \"B-\"\n    elif\
    \ [ $1 -ge 2 ]; then\n        echo \"C+\"\n    elif [ $1 -ge 1.7 ]; then\n   \
    \     echo \"C\"\n    elif [ $1 -ge 1.3 ]; then\n        echo \"C-\"\n    elif\
    \ [ $1 -ge 1 ]; then\n        echo \"D+\"\n    elif [ $1 -ge 0.7 ]; then\n   \
    \     echo \"D\"\n    elif [ $1 -ge 0 ]; then\n        echo \"D-\"\n    else\n\
    \        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"\
    A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1ui7lp6c.sh: line 27: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 29: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 31: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 33: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 35: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 37: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 39: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 41: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 43: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 45: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 47: [: too many arguments

    /tmp/tmp1ui7lp6c.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $(echo \"$1 >= 4.0\" | bc -l) -eq 1 ]; then\n        echo \"A+\"\n \
    \   elif [ $(echo \"$1 >= 3.7\" | bc -l) -eq 1 ]; then\n        echo \"A\"\n \
    \   elif [ $(echo \"$1 >= 3.3\" | bc -l) -eq 1 ]; then\n        echo \"A-\"\n\
    \    elif [ $(echo \"$1 >= 3.0\" | bc -l) -eq 1 ]; then\n        echo \"B+\"\n\
    \    elif [ $(echo \"$1 >= 2.7\" | bc -l) -eq 1 ]; then\n        echo \"B\"\n\
    \    elif [ $(echo \"$1 >= 2.3\" | bc -l) -eq 1 ]; then\n        echo \"B-\"\n\
    \    elif [ $(echo \"$1 >= 2.0\" | bc -l) -eq 1 ]; then\n        echo \"C+\"\n\
    \    elif [ $(echo \"$1 >= 1.7\" | bc -l) -eq 1 ]; then\n        echo \"C\"\n\
    \    elif [ $(echo \"$1 >= 1.3\" | bc -l) -eq 1 ]; then\n        echo \"C-\"\n\
    \    elif [ $(echo \"$1 >= 1.0\" | bc -l) -eq 1 ]; then\n        echo \"D+\"\n\
    \    elif [ $(echo \"$1 >= 0.7\" | bc -l) -eq 1 ]; then\n        echo \"D\"\n\
    \    elif [ $(echo \"$1 >= 0.0\" | bc -l) -eq 1 ]; then\n        echo \"D-\"\n\
    \    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 27: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpxvx0w7h7.sh: line 49: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    grade=$1\n    if [[ $grade -ge 4.0 ]]; then\n        echo \"A+\"\n    elif\
    \ [[ $grade -ge 3.7 ]]; then\n        echo \"A\"\n    elif [[ $grade -ge 3.3 ]];\
    \ then\n        echo \"A-\"\n    elif [[ $grade -ge 3.0 ]]; then\n        echo\
    \ \"B+\"\n    elif [[ $grade -ge 2.7 ]]; then\n        echo \"B\"\n    elif [[\
    \ $grade -ge 2.3 ]]; then\n        echo \"B-\"\n    elif [[ $grade -ge 2.0 ]];\
    \ then\n        echo \"C+\"\n    elif [[ $grade -ge 1.7 ]]; then\n        echo\
    \ \"C\"\n    elif [[ $grade -ge 1.3 ]]; then\n        echo \"C-\"\n    elif [[\
    \ $grade -ge 1.0 ]]; then\n        echo \"D+\"\n    elif [[ $grade -ge 0.7 ]];\
    \ then\n        echo \"D\"\n    elif [[ $grade -ge 0.0 ]]; then\n        echo\
    \ \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpraofazmk.sh: line 28: [[: 4.0 3 1.7 2 3.5: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 30: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 32: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 34: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 36: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 38: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 40: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 42: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 44: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 46: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 48: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpraofazmk.sh: line 50: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local list=\"$1\"\n  local grade=\"\"\n  local formatted_gpa=\"\"\n  local\
    \ formatted_grade=\"\"\n  # Loop through the list of GPAs and check each one with\
    \ the grading table\n  for gpa in $list; do\n    # echo each gpa\n    echo $gpa\n\
    \    # Check each gpa against the grading table\n    # TODO: Create a function\
    \ to check the grade\n    # format it and append it to \"grade\"\n    formatted_gpa=$(\
    \ echo \"$gpa\" | tr '.' '\\t' )\n    # echo \"formatted_gpa: $formatted_gpa\"\
    \n    whole_number=$( echo \"$formatted_gpa\" | cut -f1 )\n    fraction=$( echo\
    \ \"$formatted_gpa\" | cut -f2 )\n    # echo \"whole_number: $whole_number\"\n\
    \    # echo \"fraction: $fraction\"\n    case $whole_number in\n      \"4\")\n\
    \        if [ $fraction == \"0\" ]; then\n          grade=\"A+\"\n        else\n\
    \          grade=\"A\"\n        fi\n        ;;\n      \"3\")\n        if [ $fraction\
    \ == \"7\" ]; then\n          grade=\"A\"\n        elif [ $fraction == \"3\" ];\
    \ then\n          grade=\"A-\"\n        elif [ $fraction == \"0\" ]; then\n  \
    \        grade=\"B+\"\n        else\n          grade=\"B\"\n        fi\n     \
    \   ;;\n      \"2\")\n        if [ $fraction == \"7\" ]; then\n          grade=\"\
    B\"\n        elif [ $fraction == \"3\" ]; then\n          grade=\"B-\"\n     \
    \   elif [ $fraction == \"0\" ]; then\n          grade=\"C+\"\n        else\n\
    \          grade=\"C\"\n        fi\n        ;;\n      \"1\")\n        if [ $fraction\
    \ == \"7\" ]; then\n          grade=\"C\"\n        elif [ $fraction == \"3\" ];\
    \ then\n          grade=\"C-\"\n        elif [ $fraction == \"0\" ]; then\n  \
    \        grade=\"D+\"\n        else\n          grade=\"D\"\n        fi\n     \
    \   ;;\n      \"0\")\n        if [ $\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1d_z7y_u.sh: line 87: syntax error near unexpected token `}''

    /tmp/tmp1d_z7y_u.sh: line 87: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local GPA=\"$1\"\n    if (( $(awk -v g=\"$GPA\" 'BEGIN { print (g >= 4.0)\
    \ }') )); then\n        echo A+\n    elif (( $(awk -v g=\"$GPA\" 'BEGIN { print\
    \ (g >= 3.7) }') )); then\n        echo A\n    elif (( $(awk -v g=\"$GPA\" 'BEGIN\
    \ { print (g >= 3.3) }') )); then\n        echo A-\n    elif (( $(awk -v g=\"\
    $GPA\" 'BEGIN { print (g >= 3.0) }') )); then\n        echo B+\n    elif (( $(awk\
    \ -v g=\"$GPA\" 'BEGIN { print (g >= 2.7) }') )); then\n        echo B\n    elif\
    \ (( $(awk -v g=\"$GPA\" 'BEGIN { print (g >= 2.3) }') )); then\n        echo\
    \ B-\n    elif (( $(awk -v g=\"$GPA\" 'BEGIN { print (g >= 2.0) }') )); then\n\
    \        echo C+\n    elif (( $(awk -v g=\"$GPA\" 'BEGIN { print (g >= 1.7) }')\
    \ )); then\n        echo C\n    elif (( $(awk -v g=\"$GPA\" 'BEGIN { print (g\
    \ >= 1.3) }') )); then\n        echo C-\n    elif (( $(awk -v g=\"$GPA\" 'BEGIN\
    \ { print (g >= 1.0) }') )); then\n        echo D+\n    elif (( $(awk -v g=\"\
    $GPA\" 'BEGIN { print (g >= 0.7) }') )); then\n        echo D\n    elif (( $(awk\
    \ -v g=\"$GPA\" 'BEGIN { print (g >= 0.0) }') )); then\n        echo D-\n    else\n\
    \        echo E\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if [ $(echo \"$1 > 4.0\" | bc) -eq 1 ]; then\n    echo '\"A+\"'\n  elif [ $(echo\
    \ \"$1 > 3.7\" | bc) -eq 1 ]; then\n    echo '\"A\"'\n  elif [ $(echo \"$1 > 3.3\"\
    \ | bc) -eq 1 ]; then\n    echo '\"A-\"'\n  elif [ $(echo \"$1 > 3.0\" | bc) -eq\
    \ 1 ]; then\n    echo '\"B+\"'\n  elif [ $(echo \"$1 > 2.7\" | bc) -eq 1 ]; then\n\
    \    echo '\"B\"'\n  elif [ $(echo \"$1 > 2.3\" | bc) -eq 1 ]; then\n    echo\
    \ '\"B-\"'\n  elif [ $(echo \"$1 > 2.0\" | bc) -eq 1 ]; then\n    echo '\"C+\"\
    '\n  elif [ $(echo \"$1 > 1.7\" | bc) -eq 1 ]; then\n    echo '\"C\"'\n  elif\
    \ [ $(echo \"$1 > 1.3\" | bc) -eq 1 ]; then\n    echo '\"C-\"'\n  elif [ $(echo\
    \ \"$1 > 1.0\" | bc) -eq 1 ]; then\n    echo '\"D+\"'\n  elif [ $(echo \"$1 >\
    \ 0.7\" | bc) -eq 1 ]; then\n    echo '\"D\"'\n  elif [ $(echo \"$1 > 0.0\" |\
    \ bc) -eq 1 ]; then\n    echo '\"D-\"'\n  else\n    echo '\"E\"'\n  fi\n}\n\n\
    candidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 27: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpur7ryxub.sh: line 49: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local value=$1\n    if (( $(echo \"$value <= 0\" | bc -l) )); then\n    \
    \    echo '\"E\"'\n    elif (( $(echo \"$value < 0.7\" | bc -l) )); then\n   \
    \     echo '\"D-\"'\n    elif (( $(echo \"$value < 1.0\" | bc -l) )); then\n \
    \       echo '\"D\"'\n    elif (( $(echo \"$value < 1.3\" | bc -l) )); then\n\
    \        echo '\"D+\"'\n    elif (( $(echo \"$value < 1.7\" | bc -l) )); then\n\
    \        echo '\"C-\"'\n    elif (( $(echo \"$value < 2.0\" | bc -l) )); then\n\
    \        echo '\"C\"'\n    elif (( $(echo \"$value < 2.3\" | bc -l) )); then\n\
    \        echo '\"C+\"'\n    elif (( $(echo \"$value < 2.7\" | bc -l) )); then\n\
    \        echo '\"B-\"'\n    elif (( $(echo \"$value < 3.0\" | bc -l) )); then\n\
    \        echo '\"B\"'\n    elif (( $(echo \"$value < 3.3\" | bc -l) )); then\n\
    \        echo '\"B+\"'\n    elif (( $(echo \"$value < 3.7\" | bc -l) )); then\n\
    \        echo '\"A-\"'\n    elif (( $(echo \"$value < 4.0\" | bc -l) )); then\n\
    \        echo '\"A\"'\n    else\n        echo '\"A+\"'\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if (( $(echo \"$1 < 0\" | bc -l) )); then\n        echo '\"E\"'\n    elif\
    \ (( $(echo \"$1 < 0.7\" | bc -l) )); then\n        echo '\"D-\"'\n    elif ((\
    \ $(echo \"$1 < 1.0\" | bc -l) )); then\n        echo '\"D\"'\n    elif (( $(echo\
    \ \"$1 < 1.3\" | bc -l) )); then\n        echo '\"D+\"'\n    elif (( $(echo \"\
    $1 < 1.7\" | bc -l) )); then\n        echo '\"C-\"'\n    elif (( $(echo \"$1 <\
    \ 2.0\" | bc -l) )); then\n        echo '\"C\"'\n    elif (( $(echo \"$1 < 2.3\"\
    \ | bc -l) )); then\n        echo '\"C+\"'\n    elif (( $(echo \"$1 < 2.7\" |\
    \ bc -l) )); then\n        echo '\"B-\"'\n    elif (( $(echo \"$1 < 3.0\" | bc\
    \ -l) )); then\n        echo '\"B\"'\n    elif (( $(echo \"$1 < 3.3\" | bc -l)\
    \ )); then\n        echo '\"B+\"'\n    elif (( $(echo \"$1 < 3.7\" | bc -l) ));\
    \ then\n        echo '\"A-\"'\n    elif (( $(echo \"$1 < 4.0\" | bc -l) )); then\n\
    \        echo '\"A\"'\n    else\n        echo '\"A+\"'\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tlocal gpa=$1\n\tif (( $(echo \"$gpa >= 4.0\" | bc -l) )); then echo \"A+\";\n\
    \telif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then echo \"A\";\n\telif (( $(echo\
    \ \"$gpa >= 3.3\" | bc -l) )); then echo \"A-\";\n\telif (( $(echo \"$gpa >= 3.0\"\
    \ | bc -l) )); then echo \"B+\";\n\telif (( $(echo \"$gpa >= 2.7\" | bc -l) ));\
    \ then echo \"B\";\n\telif (( $(echo \"$gpa >= 2.3\" | bc -l) )); then echo \"\
    B-\";\n\telif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then echo \"C+\";\n\telif\
    \ (( $(echo \"$gpa >= 1.7\" | bc -l) )); then echo \"C\";\n\telif (( $(echo \"\
    $gpa >= 1.3\" | bc -l) )); then echo \"C-\";\n\telif (( $(echo \"$gpa >= 1.0\"\
    \ | bc -l) )); then echo \"D+\";\n\telif (( $(echo \"$gpa >= 0.7\" | bc -l) ));\
    \ then echo \"D\";\n\telif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then echo \"\
    D-\";\n\telse echo \"E\";\n\tfi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $1 in\n    \"4.0\")\n      echo \"A+\"\n      ;;\n    [3-4].[8-9])\n \
    \     echo \"A\"\n      ;;\n    [3-4].[4-7])\n      echo \"A-\"\n      ;;\n  \
    \  [3-4].[0-3])\n      echo \"B+\"\n      ;;\n    [2-3].[8-9])\n      echo \"\
    B\"\n      ;;\n    [2-3].[4-7])\n      echo \"B-\"\n      ;;\n    [2-3].[0-3])\n\
    \      echo \"C+\"\n      ;;\n    [1-2].[8-9])\n      echo \"C\"\n      ;;\n \
    \   [1-2].[4-7])\n      echo \"C-\"\n      ;;\n    [1-2].[0-3])\n      echo \"\
    D+\"\n      ;;\n    [0-1].[8-9])\n      echo \"D\"\n      ;;\n    [0-1].[4-7])\n\
    \      echo \"D-\"\n      ;;\n    [0-1].[0-3])\n      echo \"E\"\n      ;;\n \
    \   *)\n      echo \"Invalid GPA\"\n      ;;\n  esac\n}\n\ncandidate() {\n   \
    \ numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local grade=$1\n  local letter_grade=\"\"\n  if [ $grade -eq 4.0 ]; then\n\
    \    letter_grade=\"A+\"\n  elif [ $grade -gt 3.7 ]; then\n    letter_grade=\"\
    A\"\n  elif [ $grade -gt 3.3 ]; then\n    letter_grade=\"A-\"\n  elif [ $grade\
    \ -gt 3.0 ]; then\n    letter_grade=\"B+\"\n  elif [ $grade -gt 2.7 ]; then\n\
    \    letter_grade=\"B\"\n  elif [ $grade -gt 2.3 ]; then\n    letter_grade=\"\
    B-\"\n  elif [ $grade -gt 2.0 ]; then\n    letter_grade=\"C+\"\n  elif [ $grade\
    \ -gt 1.7 ]; then\n    letter_grade=\"C\"\n  elif [ $grade -gt 1.3 ]; then\n \
    \   letter_grade=\"C-\"\n  elif [ $grade -gt 1.0 ]; then\n    letter_grade=\"\
    D+\"\n  elif [ $grade -gt 0.7 ]; then\n    letter_grade=\"D\"\n  elif [ $grade\
    \ -gt 0.0 ]; then\n    letter_grade=\"D-\"\n  else\n    letter_grade=\"E\"\n \
    \ fi\n  echo $letter_grade\n}\n\ncandidate() {\n    numerical_letter_grade \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"\
    A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9boj9_05.sh: line 29: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 31: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 33: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 35: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 37: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 39: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 41: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 43: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 45: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 47: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 49: [: too many arguments

    /tmp/tmp9boj9_05.sh: line 51: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # BEGIN YOUR CODE HERE\n  grade=$1\n  case $grade in\n    4.0) printf \"A+\"\
    ;;\n    3.7) printf \"A\";;\n    3.3) printf \"A-\";;\n    3.0) printf \"B+\"\
    ;;\n    2.7) printf \"B\";;\n    2.3) printf \"B-\";;\n    2.0) printf \"C+\"\
    ;;\n    1.7) printf \"C\";;\n    1.3) printf \"C-\";;\n    1.0) printf \"D+\"\
    ;;\n    0.7) printf \"D\";;\n    0.0) printf \"D-\";;\n    *) printf \"E\";;\n\
    \  esac\n  # END YOUR CODE HERE\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $1 in\n    [4]|3.7|3.3|3.0|2.7|2.3|2.0|1.7|1.3|1.0|0.7|0.0) echo $1;;\n\
    \    *) echo \"error\";;\n  esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if (( $(echo \"$gpa > 4.0\" | bc -l) )); then\n       \
    \ echo \"\\\"A+\\\"\"\n    elif (( $(echo \"$gpa > 3.7\" | bc -l) )); then\n \
    \       echo \"\\\"A\\\"\"\n    elif (( $(echo \"$gpa > 3.3\" | bc -l) )); then\n\
    \        echo \"\\\"A-\\\"\"\n    elif (( $(echo \"$gpa > 3.0\" | bc -l) )); then\n\
    \        echo \"\\\"B+\\\"\"\n    elif (( $(echo \"$gpa > 2.7\" | bc -l) )); then\n\
    \        echo \"\\\"B\\\"\"\n    elif (( $(echo \"$gpa > 2.3\" | bc -l) )); then\n\
    \        echo \"\\\"B-\\\"\"\n    elif (( $(echo \"$gpa > 2.0\" | bc -l) )); then\n\
    \        echo \"\\\"C+\\\"\"\n    elif (( $(echo \"$gpa > 1.7\" | bc -l) )); then\n\
    \        echo \"\\\"C\\\"\"\n    elif (( $(echo \"$gpa > 1.3\" | bc -l) )); then\n\
    \        echo \"\\\"C-\\\"\"\n    elif (( $(echo \"$gpa > 1.0\" | bc -l) )); then\n\
    \        echo \"\\\"D+\\\"\"\n    elif (( $(echo \"$gpa > 0.7\" | bc -l) )); then\n\
    \        echo \"\\\"D\\\"\"\n    elif (( $(echo \"$gpa > 0.0\" | bc -l) )); then\n\
    \        echo \"\\\"D-\\\"\"\n    else\n        echo \"\\\"E\\\"\"\n    fi\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0) echo A+;;\n        [3-3][.7-9]) echo A;;\n     \
    \   [3-3][.3-6]) echo A-;;\n        [3-2][.9-9]) echo B+;;\n        [2-2][.7-8])\
    \ echo B;;\n        [2-2][.3-6]) echo B-;;\n        [2-1][.9-9]) echo C+;;\n \
    \       [1-1][.7-8]) echo C;;\n        [1-1][.3-6]) echo C-;;\n        [1-0][.9-9])\
    \ echo D+;;\n        [0-0][.7-8]) echo D;;\n        [0-0][.3-6]) echo D-;;\n \
    \       [0-0][.0-2]) echo E;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local -r gpa=\"$1\"\n    if [ \"${gpa}\" -gt \"4.0\" ]; then\n        echo\
    \ \"A+\"\n    elif [ \"${gpa}\" -gt \"3.7\" ]; then\n        echo \"A\"\n    elif\
    \ [ \"${gpa}\" -gt \"3.3\" ]; then\n        echo \"A-\"\n    elif [ \"${gpa}\"\
    \ -gt \"3.0\" ]; then\n        echo \"B+\"\n    elif [ \"${gpa}\" -gt \"2.7\"\
    \ ]; then\n        echo \"B\"\n    elif [ \"${gpa}\" -gt \"2.3\" ]; then\n   \
    \     echo \"B-\"\n    elif [ \"${gpa}\" -gt \"2.0\" ]; then\n        echo \"\
    C+\"\n    elif [ \"${gpa}\" -gt \"1.7\" ]; then\n        echo \"C\"\n    elif\
    \ [ \"${gpa}\" -gt \"1.3\" ]; then\n        echo \"C-\"\n    elif [ \"${gpa}\"\
    \ -gt \"1.0\" ]; then\n        echo \"D+\"\n    elif [ \"${gpa}\" -gt \"0.7\"\
    \ ]; then\n        echo \"D\"\n    elif [ \"${gpa}\" -gt \"0.0\" ]; then\n   \
    \     echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n\
    \    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyyzi8udu.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpyyzi8udu.sh: line 50: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \        local -a grades=(\"4.0\" \"3.7\" \"3.3\" \"3.0\" \"2.7\" \"2.3\" \"2.0\"\
    \ \"1.7\" \"1.3\" \"1.0\" \"0.7\" \"0.0\")\n        local -a letters=(\"A+\" \"\
    A\" \"A-\" \"B+\" \"B\" \"B-\" \"C+\" \"C\" \"C-\" \"D+\" \"D\" \"D-\")\n    \
    \    local grade=\"$1\"\n        local numerical_letter_grade=\"\"\n        for\
    \ index in ${!grades[@]}; do\n                local tmp=\"${grades[$index]}\"\n\
    \                if [ $(echo \"$grade >= $tmp\" | bc) -eq 1 ]; then\n        \
    \                numerical_letter_grade=\"${letters[$index]}\"\n             \
    \           break\n                fi\n        done\n        echo \"$numerical_letter_grade\"\
    \n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpt9dhjbmw.sh: line 33: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tcase \"$1\" in\n\t\"4.0\") echo -n '\"A+\"' ;;\n\t\"3.7\") echo -n '\"A\"' ;;\n\
    \t\"3.3\") echo -n '\"A-\"' ;;\n\t\"3.0\") echo -n '\"B+\"' ;;\n\t\"2.7\") echo\
    \ -n '\"B\"' ;;\n\t\"2.3\") echo -n '\"B-\"' ;;\n\t\"2.0\") echo -n '\"C+\"' ;;\n\
    \t\"1.7\") echo -n '\"C\"' ;;\n\t\"1.3\") echo -n '\"C-\"' ;;\n\t\"1.0\") echo\
    \ -n '\"D+\"' ;;\n\t\"0.7\") echo -n '\"D\"' ;;\n\t\"0.0\") echo -n '\"D-\"' ;;\n\
    \t*) echo -n '\"E\"' ;;\n\tesac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    let \"index = $1 / 2\"\n    let \"offset = $1 % 2\"\n    if [ $offset -eq\
    \ 0 ]; then\n        letter_grade=\"\"\n    else\n        letter_grade=\"-\"\n\
    \    fi\n    case $index in\n        0)\n            echo \"E$letter_grade\"\n\
    \            ;;\n        1)\n            echo \"D$letter_grade\"\n           \
    \ ;;\n        2)\n            echo \"C$letter_grade\"\n            ;;\n      \
    \  3)\n            echo \"B$letter_grade\"\n            ;;\n        4)\n     \
    \       echo \"A$letter_grade\"\n            ;;\n        *)\n            echo\
    \ \"A+\"\n            ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8esy_gox.sh: line 27: let: index = 4.0 3 1.7 2 3.5 / 2: syntax
    error: invalid arithmetic operator (error token is ".0 3 1.7 2 3.5 / 2")

    /tmp/tmp8esy_gox.sh: line 28: let: offset = 4.0 3 1.7 2 3.5 % 2: syntax error:
    invalid arithmetic operator (error token is ".0 3 1.7 2 3.5 % 2")

    /tmp/tmp8esy_gox.sh: line 29: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local gpa=\"$1\"\n  if [ \"$gpa\" -ge 4.0 ]; then\n    echo '\"A+\"'\n  elif\
    \ [ \"$gpa\" -ge 3.7 ]; then\n    echo '\"A\"'\n  elif [ \"$gpa\" -ge 3.3 ]; then\n\
    \    echo '\"A-\"'\n  elif [ \"$gpa\" -ge 3.0 ]; then\n    echo '\"B+\"'\n  elif\
    \ [ \"$gpa\" -ge 2.7 ]; then\n    echo '\"B\"'\n  elif [ \"$gpa\" -ge 2.3 ]; then\n\
    \    echo '\"B-\"'\n  elif [ \"$gpa\" -ge 2.0 ]; then\n    echo '\"C+\"'\n  elif\
    \ [ \"$gpa\" -ge 1.7 ]; then\n    echo '\"C\"'\n  elif [ \"$gpa\" -ge 1.3 ]; then\n\
    \    echo '\"C-\"'\n  elif [ \"$gpa\" -ge 1.0 ]; then\n    echo '\"D+\"'\n  elif\
    \ [ \"$gpa\" -ge 0.7 ]; then\n    echo '\"D\"'\n  elif [ \"$gpa\" -ge 0.0 ]; then\n\
    \    echo '\"D-\"'\n  else\n    echo '\"E\"'\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqhs_rqiu.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpqhs_rqiu.sh: line 50: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0) echo A+;;\n        3.7) echo A;;\n        3.3) echo\
    \ A-;;\n        3.0) echo B+;;\n        2.7) echo B;;\n        2.3) echo B-;;\n\
    \        2.0) echo C+;;\n        1.7) echo C;;\n        1.3) echo C-;;\n     \
    \   1.0) echo D+;;\n        0.7) echo D;;\n        0.0) echo D-;;\n        *)\
    \ echo E;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # define the function you need to use here\n    # $1 is a number\n    if\
    \ (( $(echo \"$1 == 0\" | bc -l) )); then\n        echo \"E\"\n    elif (( $(echo\
    \ \"$1 < 0.7\" | bc -l) )); then\n        echo \"D-\"\n    elif (( $(echo \"$1\
    \ < 1.0\" | bc -l) )); then\n        echo \"D\"\n    elif (( $(echo \"$1 < 1.3\"\
    \ | bc -l) )); then\n        echo \"D+\"\n    elif (( $(echo \"$1 < 1.7\" | bc\
    \ -l) )); then\n        echo \"C-\"\n    elif (( $(echo \"$1 < 2.0\" | bc -l)\
    \ )); then\n        echo \"C\"\n    elif (( $(echo \"$1 < 2.3\" | bc -l) )); then\n\
    \        echo \"C+\"\n    elif (( $(echo \"$1 < 2.7\" | bc -l) )); then\n    \
    \    echo \"B-\"\n    elif (( $(echo \"$1 < 3.0\" | bc -l) )); then\n        echo\
    \ \"B\"\n    elif (( $(echo \"$1 < 3.3\" | bc -l) )); then\n        echo \"B+\"\
    \n    elif (( $(echo \"$1 < 3.7\" | bc -l) )); then\n        echo \"A-\"\n   \
    \ elif (( $(echo \"$1 < 4.0\" | bc -l) )); then\n        echo \"A\"\n    else\n\
    \        echo \"A+\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"\
    A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    gpa=$1\n    if [ $(echo $gpa '>=' 4.0 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"A+\"'\n    elif [ $(echo $gpa '>=' 3.7 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"A\"'\n    elif [ $(echo $gpa '>=' 3.3 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"A-\"'\n    elif [ $(echo $gpa '>=' 3.0 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"B+\"'\n    elif [ $(echo $gpa '>=' 2.7 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"B\"'\n    elif [ $(echo $gpa '>=' 2.3 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"B-\"'\n    elif [ $(echo $gpa '>=' 2.0 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"C+\"'\n    elif [ $(echo $gpa '>=' 1.7 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"C\"'\n    elif [ $(echo $gpa '>=' 1.3 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"C-\"'\n    elif [ $(echo $gpa '>=' 1.0 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"D+\"'\n    elif [ $(echo $gpa '>=' 0.7 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"D\"'\n    elif [ $(echo $gpa '>=' 0.0 | bc -l) -eq 1 ]; then\n        echo\
    \ '\"D-\"'\n    else\n        echo '\"E\"'\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 28: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpezdbpmsu.sh: line 50: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ \"$1\" -gt \"4.0\" ]; then\n        letter_grade=\"A+\"\n    elif [\
    \ \"$1\" -gt \"3.7\" ]; then\n        letter_grade=\"A\"\n    elif [ \"$1\" -gt\
    \ \"3.3\" ]; then\n        letter_grade=\"A-\"\n    elif [ \"$1\" -gt \"3.0\"\
    \ ]; then\n        letter_grade=\"B+\"\n    elif [ \"$1\" -gt \"2.7\" ]; then\n\
    \        letter_grade=\"B\"\n    elif [ \"$1\" -gt \"2.3\" ]; then\n        letter_grade=\"\
    B-\"\n    elif [ \"$1\" -gt \"2.0\" ]; then\n        letter_grade=\"C+\"\n   \
    \ elif [ \"$1\" -gt \"1.7\" ]; then\n        letter_grade=\"C\"\n    elif [ \"\
    $1\" -gt \"1.3\" ]; then\n        letter_grade=\"C-\"\n    elif [ \"$1\" -gt \"\
    1.0\" ]; then\n        letter_grade=\"D+\"\n    elif [ \"$1\" -gt \"0.7\" ]; then\n\
    \        letter_grade=\"D\"\n    elif [ \"$1\" -gt \"0.0\" ]; then\n        letter_grade=\"\
    D-\"\n    else\n        letter_grade=\"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn1vgr71c.sh: line 27: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 29: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 31: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 33: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 35: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 37: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 39: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 41: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 43: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 45: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 47: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpn1vgr71c.sh: line 49: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if (( $(echo \"$1 >= 4.0\" | bc -l) )); then\n    echo \"A+\"\n  elif (( $(echo\
    \ \"$1 >= 3.7\" | bc -l) )); then\n    echo \"A\"\n  elif (( $(echo \"$1 >= 3.3\"\
    \ | bc -l) )); then\n    echo \"A-\"\n  elif (( $(echo \"$1 >= 3.0\" | bc -l)\
    \ )); then\n    echo \"B+\"\n  elif (( $(echo \"$1 >= 2.7\" | bc -l) )); then\n\
    \    echo \"B\"\n  elif (( $(echo \"$1 >= 2.3\" | bc -l) )); then\n    echo \"\
    B-\"\n  elif (( $(echo \"$1 >= 2.0\" | bc -l) )); then\n    echo \"C+\"\n  elif\
    \ (( $(echo \"$1 >= 1.7\" | bc -l) )); then\n    echo \"C\"\n  elif (( $(echo\
    \ \"$1 >= 1.3\" | bc -l) )); then\n    echo \"C-\"\n  elif (( $(echo \"$1 >= 1.0\"\
    \ | bc -l) )); then\n    echo \"D+\"\n  elif (( $(echo \"$1 >= 0.7\" | bc -l)\
    \ )); then\n    echo \"D\"\n  elif (( $(echo \"$1 >= 0.0\" | bc -l) )); then\n\
    \    echo \"D-\"\n  else\n    echo \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local res\n    case $1 in\n        4.0) res='\"A+\"' ;;\n        3.7) res='\"\
    A\"' ;;\n        3.3) res='\"A-\"' ;;\n        3.0) res='\"B+\"' ;;\n        2.7)\
    \ res='\"B\"' ;;\n        2.3) res='\"B-\"' ;;\n        2.0) res='\"C+\"' ;;\n\
    \        1.7) res='\"C\"' ;;\n        1.3) res='\"C-\"' ;;\n        1.0) res='\"\
    D+\"' ;;\n        0.7) res='\"D\"' ;;\n        0.0) res='\"D-\"' ;;\n        *)\n\
    \            if [[ $1 -lt 0.0 ]]; then\n                res='\"E\"'\n        \
    \    fi\n            ;;\n    esac\n    echo \"$res\"\n}\n\ncandidate() {\n   \
    \ numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9f2t1jf4.sh: line 42: [[: 4.0 3 1.7 2 3.5: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $(echo \"$1 > $2\" | bc) in\n        1) echo \"$3\";;\n        *) echo\
    \ \"$4\";;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local gpa=$1\n  if [[ $gpa == \"4.0\" ]]; then\n    echo \"A+\"\n  elif [[\
    \ $(echo \"$gpa > 3.7\" | bc -l) -eq 1 ]]; then\n    echo \"A\"\n  elif [[ $(echo\
    \ \"$gpa > 3.3\" | bc -l) -eq 1 ]]; then\n    echo \"A-\"\n  elif [[ $(echo \"\
    $gpa > 3.0\" | bc -l) -eq 1 ]]; then\n    echo \"B+\"\n  elif [[ $(echo \"$gpa\
    \ > 2.7\" | bc -l) -eq 1 ]]; then\n    echo \"B\"\n  elif [[ $(echo \"$gpa > 2.3\"\
    \ | bc -l) -eq 1 ]]; then\n    echo \"B-\"\n  elif [[ $(echo \"$gpa > 2.0\" |\
    \ bc -l) -eq 1 ]]; then\n    echo \"C+\"\n  elif [[ $(echo \"$gpa > 1.7\" | bc\
    \ -l) -eq 1 ]]; then\n    echo \"C\"\n  elif [[ $(echo \"$gpa > 1.3\" | bc -l)\
    \ -eq 1 ]]; then\n    echo \"C-\"\n  elif [[ $(echo \"$gpa > 1.0\" | bc -l) -eq\
    \ 1 ]]; then\n    echo \"D+\"\n  elif [[ $(echo \"$gpa > 0.7\" | bc -l) -eq 1\
    \ ]]; then\n    echo \"D\"\n  elif [[ $(echo \"$gpa > 0.0\" | bc -l) -eq 1 ]];\
    \ then\n    echo \"D-\"\n  else\n    echo \"E\"\n  fi\n}\n\ncandidate() {\n  \
    \  numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tgpas=( $1 )\n\tgrades=()\n\tfor i in ${gpas[@]}; do\n\t\ti=\"${i//\\\"}\" #\
    \ Remove double quotes\n\t\tif [[ $(echo \"$i <= 0\" | bc -l) -eq 1 ]]; then\n\
    \t\t\tgrades+=( '\"E\"' )\n\t\telif [[ $(echo \"$i < 0.7\" | bc -l) -eq 1 ]];\
    \ then\n\t\t\tgrades+=( '\"D-\"' )\n\t\telif [[ $(echo \"$i < 1.0\" | bc -l) -eq\
    \ 1 ]]; then\n\t\t\tgrades+=( '\"D+\"' )\n\t\telif [[ $(echo \"$i < 1.3\" | bc\
    \ -l) -eq 1 ]]; then\n\t\t\tgrades+=( '\"D\"' )\n\t\telif [[ $(echo \"$i < 1.7\"\
    \ | bc -l) -eq 1 ]]; then\n\t\t\tgrades+=( '\"C-\"' )\n\t\telif [[ $(echo \"$i\
    \ < 2.0\" | bc -l) -eq 1 ]]; then\n\t\t\tgrades+=( '\"C+\"' )\n\t\telif [[ $(echo\
    \ \"$i < 2.3\" | bc -l) -eq 1 ]]; then\n\t\t\tgrades+=( '\"C\"' )\n\t\telif [[\
    \ $(echo \"$i < 2.7\" | bc -l) -eq 1 ]]; then\n\t\t\tgrades+=( '\"B-\"' )\n\t\t\
    elif [[ $(echo \"$i < 3.0\" | bc -l) -eq 1 ]]; then\n\t\t\tgrades+=( '\"B+\"'\
    \ )\n\t\telif [[ $(echo \"$i < 3.3\" | bc -l) -eq 1 ]]; then\n\t\t\tgrades+=(\
    \ '\"B\"' )\n\t\telif [[ $(echo \"$i < 3.7\" | bc -l) -eq 1 ]]; then\n\t\t\tgrades+=(\
    \ '\"A-\"' )\n\t\telse\n\t\t\tgrades+=( '\"A+\"' )\n\t\tfi\n\tdone\n\techo \"\
    [${grades[@]}]\"\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tnum=$1\n\tif (( $(echo \"${num} >= 4.0\" | bc -l) )); then\n\t\techo \"A+\"\n\
    \telif (( $(echo \"${num} >= 3.7\" | bc -l) )); then\n\t\techo \"A\"\n\telif ((\
    \ $(echo \"${num} >= 3.3\" | bc -l) )); then\n\t\techo \"A-\"\n\telif (( $(echo\
    \ \"${num} >= 3.0\" | bc -l) )); then\n\t\techo \"B+\"\n\telif (( $(echo \"${num}\
    \ >= 2.7\" | bc -l) )); then\n\t\techo \"B\"\n\telif (( $(echo \"${num} >= 2.3\"\
    \ | bc -l) )); then\n\t\techo \"B-\"\n\telif (( $(echo \"${num} >= 2.0\" | bc\
    \ -l) )); then\n\t\techo \"C+\"\n\telif (( $(echo \"${num} >= 1.7\" | bc -l) ));\
    \ then\n\t\techo \"C\"\n\telif (( $(echo \"${num} >= 1.3\" | bc -l) )); then\n\
    \t\techo \"C-\"\n\telif (( $(echo \"${num} >= 1.0\" | bc -l) )); then\n\t\techo\
    \ \"D+\"\n\telif (( $(echo \"${num} >= 0.7\" | bc -l) )); then\n\t\techo \"D\"\
    \n\telif (( $(echo \"${num} >= 0.0\" | bc -l) )); then\n\t\techo \"D-\"\n\telse\n\
    \t\techo \"E\"\n\tfi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local arr=($1)\n    for i in \"${arr[@]}\"; do\n        local grade=$(echo\
    \ $i | bc -l)\n        if [ $grade -ge 4.0 ]; then\n            echo A+\n    \
    \    elif [ $grade -ge 3.7 ]; then\n            echo A\n        elif [ $grade\
    \ -ge 3.3 ]; then\n            echo A-\n        elif [ $grade -ge 3.0 ]; then\n\
    \            echo B+\n        elif [ $grade -ge 2.7 ]; then\n            echo\
    \ B\n        elif [ $grade -ge 2.3 ]; then\n            echo B-\n        elif\
    \ [ $grade -ge 2.0 ]; then\n            echo C+\n        elif [ $grade -ge 1.7\
    \ ]; then\n            echo C\n        elif [ $grade -ge 1.3 ]; then\n       \
    \     echo C-\n        elif [ $grade -ge 1.0 ]; then\n            echo D+\n  \
    \      elif [ $grade -ge 0.7 ]; then\n            echo D\n        elif [ $grade\
    \ -ge 0.0 ]; then\n            echo D-\n        else\n            echo E\n   \
    \     fi\n    done\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C\
    \ A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcqjii8e9.sh: line 30: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 32: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 34: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 36: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 38: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 40: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 42: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 44: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 46: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 48: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 50: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 52: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 30: [: 4.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 32: [: 3.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 34: [: 3.3: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 36: [: 3.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 38: [: 2.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 40: [: 2.3: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 42: [: 2.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 44: [: 1.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 46: [: 1.3: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 48: [: 1.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 50: [: 0.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 52: [: 0.0: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 30: [: 1.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 32: [: 1.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 34: [: 1.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 36: [: 1.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 38: [: 1.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 40: [: 1.7: integer expression expected

    /tmp/tmpcqjii8e9.sh: line 42: [: 1.7: integer expression expected

    /t'
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local gpa=$1\n  if (( $(echo \"$gpa > 4.0\" | bc -l) )); then\n    echo \"\
    A+\"\n  elif (( $(echo \"$gpa > 3.7\" | bc -l) )); then\n    echo \"A\"\n  elif\
    \ (( $(echo \"$gpa > 3.3\" | bc -l) )); then\n    echo \"A-\"\n  elif (( $(echo\
    \ \"$gpa > 3.0\" | bc -l) )); then\n    echo \"B+\"\n  elif (( $(echo \"$gpa >\
    \ 2.7\" | bc -l) )); then\n    echo \"B\"\n  elif (( $(echo \"$gpa > 2.3\" | bc\
    \ -l) )); then\n    echo \"B-\"\n  elif (( $(echo \"$gpa > 2.0\" | bc -l) ));\
    \ then\n    echo \"C+\"\n  elif (( $(echo \"$gpa > 1.7\" | bc -l) )); then\n \
    \   echo \"C\"\n  elif (( $(echo \"$gpa > 1.3\" | bc -l) )); then\n    echo \"\
    C-\"\n  elif (( $(echo \"$gpa > 1.0\" | bc -l) )); then\n    echo \"D+\"\n  elif\
    \ (( $(echo \"$gpa > 0.7\" | bc -l) )); then\n    echo \"D\"\n  elif (( $(echo\
    \ \"$gpa > 0.0\" | bc -l) )); then\n    echo \"D-\"\n  else\n    echo \"E\"\n\
    \  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local NUMBER_ONLY=$(echo \"$1\" | grep -E -o '[+-]?[0-9]+([.][0-9]+)?')\n\
    \    local EQUAL_SIGN=\"=\"\n    local GRADE_SYMBOL=\"\"\n    local FINAL_GRADE=\"\
    \"\n    if [[ \"$NUMBER_ONLY\" -eq 4.0 ]]; then\n        GRADE_SYMBOL=\"+\"\n\
    \        FINAL_GRADE=\"A$GRADE_SYMBOL\"\n    elif [[ \"$NUMBER_ONLY\" -ge 3.7\
    \ ]]; then\n        GRADE_SYMBOL=\"\"\n        FINAL_GRADE=\"A$GRADE_SYMBOL\"\n\
    \    elif [[ \"$NUMBER_ONLY\" -ge 3.3 ]]; then\n        GRADE_SYMBOL=\"-\"\n \
    \       FINAL_GRADE=\"A$GRADE_SYMBOL\"\n    elif [[ \"$NUMBER_ONLY\" -ge 3.0 ]];\
    \ then\n        GRADE_SYMBOL=\"+\"\n        FINAL_GRADE=\"B$GRADE_SYMBOL\"\n \
    \   elif [[ \"$NUMBER_ONLY\" -ge 2.7 ]]; then\n        GRADE_SYMBOL=\"\"\n   \
    \     FINAL_GRADE=\"B$GRADE_SYMBOL\"\n    elif [[ \"$NUMBER_ONLY\" -ge 2.3 ]];\
    \ then\n        GRADE_SYMBOL=\"-\"\n        FINAL_GRADE=\"B$GRADE_SYMBOL\"\n \
    \   elif [[ \"$NUMBER_ONLY\" -ge 2.0 ]]; then\n        GRADE_SYMBOL=\"+\"\n  \
    \      FINAL_GRADE=\"C$GRADE_SYMBOL\"\n    elif [[ \"$NUMBER_ONLY\" -ge 1.7 ]];\
    \ then\n        GRADE_SYMBOL=\"\"\n        FINAL_GRADE=\"C$GRADE_SYMBOL\"\n  \
    \  elif [[ \"$NUMBER_ONLY\" -ge 1.3 ]]; then\n        GRADE_SYMBOL=\"-\"\n   \
    \     FINAL_GRADE=\"C$GRADE_SYMBOL\"\n    elif [[ \"$NUMBER_ONLY\" -ge 1.0 ]];\
    \ then\n        GRADE_SYMBOL=\"+\"\n\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp25tquw5o.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmp25tquw5o.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # You can write a function here to make the code cleaner\n    if [ \"$1\"\
    \ -ge 4.0 ]; then\n        echo '\"A+\"'\n    elif [ \"$1\" -ge 3.7 ]; then\n\
    \        echo '\"A\"'\n    elif [ \"$1\" -ge 3.3 ]; then\n        echo '\"A-\"\
    '\n    elif [ \"$1\" -ge 3.0 ]; then\n        echo '\"B+\"'\n    elif [ \"$1\"\
    \ -ge 2.7 ]; then\n        echo '\"B\"'\n    elif [ \"$1\" -ge 2.3 ]; then\n \
    \       echo '\"B-\"'\n    elif [ \"$1\" -ge 2.0 ]; then\n        echo '\"C+\"\
    '\n    elif [ \"$1\" -ge 1.7 ]; then\n        echo '\"C\"'\n    elif [ \"$1\"\
    \ -ge 1.3 ]; then\n        echo '\"C-\"'\n    elif [ \"$1\" -ge 1.0 ]; then\n\
    \        echo '\"D+\"'\n    elif [ \"$1\" -ge 0.7 ]; then\n        echo '\"D\"\
    '\n    elif [ \"$1\" -ge 0.0 ]; then\n        echo '\"D-\"'\n    else\n      \
    \  echo '\"E\"'\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbzc6l34f.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpbzc6l34f.sh: line 50: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    input=$1\n    if (($input==4.0)); then\n        echo \\\"A+\\\"\n    elif\
    \ (($input>3.7)); then\n        echo \\\"A\\\"\n    elif (($input>3.3)); then\n\
    \        echo \\\"A-\\\"\n    elif (($input>3.0)); then\n        echo \\\"B+\\\
    \"\n    elif (($input>2.7)); then\n        echo \\\"B\\\"\n    elif (($input>2.3));\
    \ then\n        echo \\\"B-\\\"\n    elif (($input>2.0)); then\n        echo \\\
    \"C+\\\"\n    elif (($input>1.7)); then\n        echo \\\"C\\\"\n    elif (($input>1.3));\
    \ then\n        echo \\\"C-\\\"\n    elif (($input>1.0)); then\n        echo \\\
    \"D+\\\"\n    elif (($input>0.7)); then\n        echo \\\"D\\\"\n    elif (($input>0.0));\
    \ then\n        echo \\\"D-\\\"\n    else\n        echo \\\"E\\\"\n    fi\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpan90f47g.sh: line 28: ((: 4.0 3 1.7 2 3.5==4.0: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5==4.0")

    /tmp/tmpan90f47g.sh: line 30: ((: 4.0 3 1.7 2 3.5>3.7: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>3.7")

    /tmp/tmpan90f47g.sh: line 32: ((: 4.0 3 1.7 2 3.5>3.3: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>3.3")

    /tmp/tmpan90f47g.sh: line 34: ((: 4.0 3 1.7 2 3.5>3.0: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>3.0")

    /tmp/tmpan90f47g.sh: line 36: ((: 4.0 3 1.7 2 3.5>2.7: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>2.7")

    /tmp/tmpan90f47g.sh: line 38: ((: 4.0 3 1.7 2 3.5>2.3: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>2.3")

    /tmp/tmpan90f47g.sh: line 40: ((: 4.0 3 1.7 2 3.5>2.0: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>2.0")

    /tmp/tmpan90f47g.sh: line 42: ((: 4.0 3 1.7 2 3.5>1.7: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>1.7")

    /tmp/tmpan90f47g.sh: line 44: ((: 4.0 3 1.7 2 3.5>1.3: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>1.3")

    /tmp/tmpan90f47g.sh: line 46: ((: 4.0 3 1.7 2 3.5>1.0: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>1.0")

    /tmp/tmpan90f47g.sh: line 48: ((: 4.0 3 1.7 2 3.5>0.7: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>0.7")

    /tmp/tmpan90f47g.sh: line 50: ((: 4.0 3 1.7 2 3.5>0.0: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5>0.0")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tif [ \"$1\" == \"4.0\" ]; then\n\t\techo \"A+\"\n\telif [ $(echo \"$1 > 3.7\"\
    \ | bc -l) -eq 1 ]; then\n\t\techo \"A\"\n\telif [ $(echo \"$1 > 3.3\" | bc -l)\
    \ -eq 1 ]; then\n\t\techo \"A-\"\n\telif [ $(echo \"$1 > 3.0\" | bc -l) -eq 1\
    \ ]; then\n\t\techo \"B+\"\n\telif [ $(echo \"$1 > 2.7\" | bc -l) -eq 1 ]; then\n\
    \t\techo \"B\"\n\telif [ $(echo \"$1 > 2.3\" | bc -l) -eq 1 ]; then\n\t\techo\
    \ \"B-\"\n\telif [ $(echo \"$1 > 2.0\" | bc -l) -eq 1 ]; then\n\t\techo \"C+\"\
    \n\telif [ $(echo \"$1 > 1.7\" | bc -l) -eq 1 ]; then\n\t\techo \"C\"\n\telif\
    \ [ $(echo \"$1 > 1.3\" | bc -l) -eq 1 ]; then\n\t\techo \"C-\"\n\telif [ $(echo\
    \ \"$1 > 1.0\" | bc -l) -eq 1 ]; then\n\t\techo \"D+\"\n\telif [ $(echo \"$1 >\
    \ 0.7\" | bc -l) -eq 1 ]; then\n\t\techo \"D\"\n\telif [ $(echo \"$1 > 0.0\" |\
    \ bc -l) -eq 1 ]; then\n\t\techo \"D-\"\n\telse\n\t\techo \"E\"\n\tfi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmppww2zhqs.sh: line 49: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    grade=$1\n    if [ $grade -eq 4.0 ]; then\n        echo A+\n    elif [ $grade\
    \ -gt 3.7 ]; then\n        echo A\n    elif [ $grade -gt 3.3 ]; then\n       \
    \ echo A-\n    elif [ $grade -gt 3.0 ]; then\n        echo B+\n    elif [ $grade\
    \ -gt 2.7 ]; then\n        echo B\n    elif [ $grade -gt 2.3 ]; then\n       \
    \ echo B-\n    elif [ $grade -gt 2.0 ]; then\n        echo C+\n    elif [ $grade\
    \ -gt 1.7 ]; then\n        echo C\n    elif [ $grade -gt 1.3 ]; then\n       \
    \ echo C-\n    elif [ $grade -gt 1.0 ]; then\n        echo D+\n    elif [ $grade\
    \ -gt 0.7 ]; then\n        echo D\n    elif [ $grade -gt 0.0 ]; then\n       \
    \ echo D-\n    else\n        echo E\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp80asg7cq.sh: line 28: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 30: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 32: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 34: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 36: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 38: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 40: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 42: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 44: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 46: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 48: [: too many arguments

    /tmp/tmp80asg7cq.sh: line 50: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # case statement to convert numerical grade to letter grade\n    case $1\
    \ in\n        4.0 )\n            echo \"A+\"\n            ;;\n        3.[7-9]\
    \ )\n            echo \"A\"\n            ;;\n        3.[3-6] )\n            echo\
    \ \"A-\"\n            ;;\n        3.0 )\n            echo \"B+\"\n           \
    \ ;;\n        2.[7-9] )\n            echo \"B\"\n            ;;\n        2.[3-6]\
    \ )\n            echo \"B-\"\n            ;;\n        2.0 )\n            echo\
    \ \"C+\"\n            ;;\n        1.[7-9] )\n            echo \"C\"\n        \
    \    ;;\n        1.[3-6] )\n            echo \"C-\"\n            ;;\n        1.0\
    \ )\n            echo \"D+\"\n            ;;\n        0.[7-9] )\n            echo\
    \ \"D\"\n            ;;\n        0.[0-6] )\n            echo \"D-\"\n        \
    \    ;;\n        0.0 )\n            echo \"E\"\n            ;;\n    esac\n}\n\n\
    candidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # The number is the GPA\n  NUMBER=$1\n  # Now we need to compare the $NUMBER\
    \ with the rest of the numbers\n  # in the table.\n  if [ $NUMBER -ge 4.0 ]; then\n\
    \    echo \"A+\"\n  elif [ $NUMBER -ge 3.7 ]; then\n    echo \"A\"\n  elif [ $NUMBER\
    \ -ge 3.3 ]; then\n    echo \"A-\"\n  elif [ $NUMBER -ge 3.0 ]; then\n    echo\
    \ \"B+\"\n  elif [ $NUMBER -ge 2.7 ]; then\n    echo \"B\"\n  elif [ $NUMBER -ge\
    \ 2.3 ]; then\n    echo \"B-\"\n  elif [ $NUMBER -ge 2.0 ]; then\n    echo \"\
    C+\"\n  elif [ $NUMBER -ge 1.7 ]; then\n    echo \"C\"\n  elif [ $NUMBER -ge 1.3\
    \ ]; then\n    echo \"C-\"\n  elif [ $NUMBER -ge 1.0 ]; then\n    echo \"D+\"\n\
    \  elif [ $NUMBER -ge 0.7 ]; then\n    echo \"D\"\n  elif [ $NUMBER -ge 0.0 ];\
    \ then\n    echo \"D-\"\n  else\n    echo \"E\"\n  fi\n}\n\ncandidate() {\n  \
    \  numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5hf_tfnn.sh: line 31: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 33: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 35: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 37: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 39: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 41: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 43: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 45: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 47: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 49: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 51: [: too many arguments

    /tmp/tmp5hf_tfnn.sh: line 53: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    echo $1 | bc\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # Convert to array\n    gpa_list=(\"$@\")\n    # Initiate grade array\n \
    \   grade_list=()\n    # Construct letter grades\n    for gpa in \"${gpa_list[@]}\"\
    ; do\n        if (( $(echo \"$gpa == 4.0\" | bc -l) )); then\n            grade_list+=('\"\
    A+\"')\n        elif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n           \
    \ grade_list+=('\"A\"')\n        elif (( $(echo \"$gpa >= 3.3\" | bc -l) )); then\n\
    \            grade_list+=('\"A-\"')\n        elif (( $(echo \"$gpa >= 3.0\" |\
    \ bc -l) )); then\n            grade_list+=('\"B+\"')\n        elif (( $(echo\
    \ \"$gpa >= 2.7\" | bc -l) )); then\n            grade_list+=('\"B\"')\n     \
    \   elif (( $(echo \"$gpa >= 2.3\" | bc -l) )); then\n            grade_list+=('\"\
    B-\"')\n        elif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then\n           \
    \ grade_list+=('\"C+\"')\n        elif (( $(echo \"$gpa >= 1.7\" | bc -l) ));\
    \ then\n            grade_list+=('\"C\"')\n        elif (( $(echo \"$gpa >= 1.3\"\
    \ | bc -l) )); then\n            grade_list+=('\"C-\"')\n        elif (( $(echo\
    \ \"$gpa >= 1.0\" | bc -l) )); then\n            grade_list+=('\"D+\"')\n    \
    \    elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n            grade_list+=('\"\
    D\"')\n        elif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n            grade_list+=('\"\
    D-\"')\n        else\n            grade_list+=('\"E\"')\n        fi\n    done\n\
    \    # Print array\n    echo \"${grade_list[@]}\"\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 == 0 ]; then\n        echo E\n    elif [ $(echo \"$1 > 0\" | bc)\
    \ == 1 ]; then\n        if [ $(echo \"$1 >= 4.0\" | bc) == 1 ]; then\n       \
    \     echo A+\n        elif [ $(echo \"$1 >= 3.7\" | bc) == 1 ]; then\n      \
    \      echo A\n        elif [ $(echo \"$1 >= 3.3\" | bc) == 1 ]; then\n      \
    \      echo A-\n        elif [ $(echo \"$1 >= 3.0\" | bc) == 1 ]; then\n     \
    \       echo B+\n        elif [ $(echo \"$1 >= 2.7\" | bc) == 1 ]; then\n    \
    \        echo B\n        elif [ $(echo \"$1 >= 2.3\" | bc) == 1 ]; then\n    \
    \        echo B-\n        elif [ $(echo \"$1 >= 2.0\" | bc) == 1 ]; then\n   \
    \         echo C+\n        elif [ $(echo \"$1 >= 1.7\" | bc) == 1 ]; then\n  \
    \          echo C\n        elif [ $(echo \"$1 >= 1.3\" | bc) == 1 ]; then\n  \
    \          echo C-\n        elif [ $(echo \"$1 >= 1.0\" | bc) == 1 ]; then\n \
    \           echo D+\n        elif [ $(echo \"$1 >= 0.7\" | bc) == 1 ]; then\n\
    \            echo D\n        elif [ $(echo \"$1 >= 0.0\" | bc) == 1 ]; then\n\
    \            echo D-\n        fi\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpli0xiwms.sh: line 27: [: too many arguments

    (standard_in) 1: syntax error

    /tmp/tmpli0xiwms.sh: line 29: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0)        echo \"A+\"\n        ;;\n        3.7)   \
    \     echo \"A\"\n        ;;\n        3.3)        echo \"A-\"\n        ;;\n  \
    \      3.0)        echo \"B+\"\n        ;;\n        2.7)        echo \"B\"\n \
    \       ;;\n        2.3)        echo \"B-\"\n        ;;\n        2.0)        echo\
    \ \"C+\"\n        ;;\n        1.7)        echo \"C\"\n        ;;\n        1.3)\
    \        echo \"C-\"\n        ;;\n        1.0)        echo \"D+\"\n        ;;\n\
    \        0.7)        echo \"D\"\n        ;;\n        0.0)        echo \"D-\"\n\
    \        ;;\n        *)        echo \"E\"\n        ;;\n    esac\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # This function returns the letter grade of the numerical value that is \n\
    \  # passed as an argument.\n  #\n  # $1 is the GPA value\n  if [ \"$1\" -ge \"\
    4.0\" ]; then\n    echo \"A+\"\n  elif [ \"$1\" -ge \"3.7\" ]; then\n    echo\
    \ \"A\"\n  elif [ \"$1\" -ge \"3.3\" ]; then\n    echo \"A-\"\n  elif [ \"$1\"\
    \ -ge \"3.0\" ]; then\n    echo \"B+\"\n  elif [ \"$1\" -ge \"2.7\" ]; then\n\
    \    echo \"B\"\n  elif [ \"$1\" -ge \"2.3\" ]; then\n    echo \"B-\"\n  elif\
    \ [ \"$1\" -ge \"2.0\" ]; then\n    echo \"C+\"\n  elif [ \"$1\" -ge \"1.7\" ];\
    \ then\n    echo \"C\"\n  elif [ \"$1\" -ge \"1.3\" ]; then\n    echo \"C-\"\n\
    \  elif [ \"$1\" -ge \"1.0\" ]; then\n    echo \"D+\"\n  elif [ \"$1\" -ge \"\
    0.7\" ]; then\n    echo \"D\"\n  elif [ \"$1\" -ge \"0.0\" ]; then\n    echo \"\
    D-\"\n  else\n    echo \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp818dot_q.sh: line 31: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 33: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 35: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 37: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 39: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 41: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 43: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 45: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 47: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 49: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 51: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp818dot_q.sh: line 53: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local grades=(\"$@\")\n  local letter_grades=()\n  for i in \"${grades[@]}\"\
    ; do\n    if (($(echo \"$i < 0\" | bc -l))); then\n      letter_grades+=('\"E\"\
    ')\n    elif (($(echo \"$i < 0.7\" | bc -l))); then\n      letter_grades+=('\"\
    D-\"')\n    elif (($(echo \"$i < 1.0\" | bc -l))); then\n      letter_grades+=('\"\
    D+\"')\n    elif (($(echo \"$i < 1.3\" | bc -l))); then\n      letter_grades+=('\"\
    D\"')\n    elif (($(echo \"$i < 1.7\" | bc -l))); then\n      letter_grades+=('\"\
    C-\"')\n    elif (($(echo \"$i < 2.0\" | bc -l))); then\n      letter_grades+=('\"\
    C+\"')\n    elif (($(echo \"$i < 2.3\" | bc -l))); then\n      letter_grades+=('\"\
    C\"')\n    elif (($(echo \"$i < 2.7\" | bc -l))); then\n      letter_grades+=('\"\
    B-\"')\n    elif (($(echo \"$i < 3.0\" | bc -l))); then\n      letter_grades+=('\"\
    B+\"')\n    elif (($(echo \"$i < 3.3\" | bc -l))); then\n      letter_grades+=('\"\
    B\"')\n    elif (($(echo \"$i < 3.7\" | bc -l))); then\n      letter_grades+=('\"\
    A-\"')\n    else\n      letter_grades+=('\"A+\"')\n    fi\n  done\n  echo \"${letter_grades[@]}\"\
    \n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # YOUR CODE GOES HERE\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq5jzgpzr.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmpq5jzgpzr.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case \"$1\" in\n        4.0)    echo A+ ;;\n        [3-3].[7-9]) echo A ;;\n\
    \        [3-3].[0-6]) echo A- ;;\n        [3-2].[7-9]) echo B+ ;;\n        [2-2].[0-6])\
    \ echo B ;;\n        [2-1].[7-9]) echo B- ;;\n        [2-1].[0-6]) echo C+ ;;\n\
    \        [1-1].[7-9]) echo C ;;\n        [1-0].[7-9]) echo C- ;;\n        [1-0].[0-6])\
    \ echo D+ ;;\n        [0-0].[7-9]) echo D ;;\n        [0-0].[0-6]) echo D- ;;\n\
    \        0.0)    echo E ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tif [ \"$1\" == \"4.0\" ]; then\n\t\techo \"A+\"\n\telif [ \"$1\" > \"3.7\" ];\
    \ then\n\t\techo \"A\"\n\telif [ \"$1\" > \"3.3\" ]; then\n\t\techo \"A-\"\n\t\
    elif [ \"$1\" > \"3.0\" ]; then\n\t\techo \"B+\"\n\telif [ \"$1\" > \"2.7\" ];\
    \ then\n\t\techo \"B\"\n\telif [ \"$1\" > \"2.3\" ]; then\n\t\techo \"B-\"\n\t\
    elif [ \"$1\" > \"2.0\" ]; then\n\t\techo \"C+\"\n\telif [ \"$1\" > \"1.7\" ];\
    \ then\n\t\techo \"C\"\n\telif [ \"$1\" > \"1.3\" ]; then\n\t\techo \"C-\"\n\t\
    elif [ \"$1\" > \"1.0\" ]; then\n\t\techo \"D+\"\n\telif [ \"$1\" > \"0.7\" ];\
    \ then\n\t\techo \"D\"\n\telif [ \"$1\" > \"0.0\" ]; then\n\t\techo \"D-\"\n\t\
    else\n\t\techo \"E\"\n\tfi\n}\n\ncandidate() {\n    numerical_letter_grade \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"\
    A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if [ $1 -ge 4.0 ]; then\n    echo A+\n  elif [ $1 -ge 3.7 ]; then\n    echo\
    \ A\n  elif [ $1 -ge 3.3 ]; then\n    echo A-\n  elif [ $1 -ge 3.0 ]; then\n \
    \   echo B+\n  elif [ $1 -ge 2.7 ]; then\n    echo B\n  elif [ $1 -ge 2.3 ]; then\n\
    \    echo B-\n  elif [ $1 -ge 2.0 ]; then\n    echo C+\n  elif [ $1 -ge 1.7 ];\
    \ then\n    echo C\n  elif [ $1 -ge 1.3 ]; then\n    echo C-\n  elif [ $1 -ge\
    \ 1.0 ]; then\n    echo D+\n  elif [ $1 -ge 0.7 ]; then\n    echo D\n  elif [\
    \ $1 -ge 0.0 ]; then\n    echo D-\n  else\n    echo E\n  fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppuxplzmc.sh: line 27: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 29: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 31: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 33: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 35: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 37: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 39: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 41: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 43: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 45: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 47: [: too many arguments

    /tmp/tmppuxplzmc.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local gpa=$1\n  local grade=\"\"\n  if [[ \"$gpa\" == \"4.0\" ]]; then\n  \
    \  grade=\"A+\"\n  elif [[ $gpa > 3.7 ]]; then\n    grade=\"A\"\n  elif [[ $gpa\
    \ > 3.3 ]]; then\n    grade=\"A-\"\n  elif [[ $gpa > 3.0 ]]; then\n    grade=\"\
    B+\"\n  elif [[ $gpa > 2.7 ]]; then\n    grade=\"B\"\n  elif [[ $gpa > 2.3 ]];\
    \ then\n    grade=\"B-\"\n  elif [[ $gpa > 2.0 ]]; then\n    grade=\"C+\"\n  elif\
    \ [[ $gpa > 1.7 ]]; then\n    grade=\"C\"\n  elif [[ $gpa > 1.3 ]]; then\n   \
    \ grade=\"C-\"\n  elif [[ $gpa > 1.0 ]]; then\n    grade=\"D+\"\n  elif [[ $gpa\
    \ > 0.7 ]]; then\n    grade=\"D\"\n  elif [[ $gpa > 0.0 ]]; then\n    grade=\"\
    D-\"\n  else\n    grade=\"E\"\n  fi\n  echo \"$grade\"\n}\n\ncandidate() {\n \
    \   numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if [ $(bc <<< \"$1 >= 4.0\") -eq 1 ]; then\n    echo \"A+\"\n  elif [ $(bc\
    \ <<< \"$1 >= 3.7\") -eq 1 ]; then\n    echo \"A\"\n  elif [ $(bc <<< \"$1 >=\
    \ 3.3\") -eq 1 ]; then\n    echo \"A-\"\n  elif [ $(bc <<< \"$1 >= 3.0\") -eq\
    \ 1 ]; then\n    echo \"B+\"\n  elif [ $(bc <<< \"$1 >= 2.7\") -eq 1 ]; then\n\
    \    echo \"B\"\n  elif [ $(bc <<< \"$1 >= 2.3\") -eq 1 ]; then\n    echo \"B-\"\
    \n  elif [ $(bc <<< \"$1 >= 2.0\") -eq 1 ]; then\n    echo \"C+\"\n  elif [ $(bc\
    \ <<< \"$1 >= 1.7\") -eq 1 ]; then\n    echo \"C\"\n  elif [ $(bc <<< \"$1 >=\
    \ 1.3\") -eq 1 ]; then\n    echo \"C-\"\n  elif [ $(bc <<< \"$1 >= 1.0\") -eq\
    \ 1 ]; then\n    echo \"D+\"\n  elif [ $(bc <<< \"$1 >= 0.7\") -eq 1 ]; then\n\
    \    echo \"D\"\n  elif [ $(bc <<< \"$1 >= 0.0\") -eq 1 ]; then\n    echo \"D-\"\
    \n  else\n    echo \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 27: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwqx_75ou.sh: line 49: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # This is not the most optimized, however it is the best we can do\n    #\
    \ in a shell script.\n    GRADE=$1\n    case $GRADE in\n        A+ )\n       \
    \     NUMBER=4.0\n            ;;\n        A )\n            NUMBER=3.7\n      \
    \      ;;\n        A- )\n            NUMBER=3.3\n            ;;\n        B+ )\n\
    \            NUMBER=3.0\n            ;;\n        B )\n            NUMBER=2.7\n\
    \            ;;\n        B- )\n            NUMBER=2.3\n            ;;\n      \
    \  C+ )\n            NUMBER=2.0\n            ;;\n        C )\n            NUMBER=1.7\n\
    \            ;;\n        C- )\n            NUMBER=1.3\n            ;;\n      \
    \  D+ )\n            NUMBER=1.0\n            ;;\n        D )\n            NUMBER=0.7\n\
    \            ;;\n        D- )\n            NUMBER=0.0\n            ;;\n      \
    \  E )\n            NUMBER=0.0\n            ;;\n    esac\n    echo $NUMBER\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tif (($1 >= 4.0))\n\tthen\n\t\techo \"A+\"\n\telif (($1 >= 3.7))\n\tthen\n\t\t\
    echo \"A\"\n\telif (($1 >= 3.3))\n\tthen\n\t\techo \"A-\"\n\telif (($1 >= 3.0))\n\
    \tthen\n\t\techo \"B+\"\n\telif (($1 >= 2.7))\n\tthen\n\t\techo \"B\"\n\telif\
    \ (($1 >= 2.3))\n\tthen\n\t\techo \"B-\"\n\telif (($1 >= 2.0))\n\tthen\n\t\techo\
    \ \"C+\"\n\telif (($1 >= 1.7))\n\tthen\n\t\techo \"C\"\n\telif (($1 >= 1.3))\n\
    \tthen\n\t\techo \"C-\"\n\telif (($1 >= 1.0))\n\tthen\n\t\techo \"D+\"\n\telif\
    \ (($1 >= 0.7))\n\tthen\n\t\techo \"D\"\n\telif (($1 >= 0.0))\n\tthen\n\t\techo\
    \ \"D-\"\n\telse\n\t\techo \"E\"\n\tfi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx5j96cni.sh: line 27: ((: 4.0 3 1.7 2 3.5 >= 4.0: syntax error:
    invalid arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 4.0")

    /tmp/tmpx5j96cni.sh: line 30: ((: 4.0 3 1.7 2 3.5 >= 3.7: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 3.7")

    /tmp/tmpx5j96cni.sh: line 33: ((: 4.0 3 1.7 2 3.5 >= 3.3: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 3.3")

    /tmp/tmpx5j96cni.sh: line 36: ((: 4.0 3 1.7 2 3.5 >= 3.0: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 3.0")

    /tmp/tmpx5j96cni.sh: line 39: ((: 4.0 3 1.7 2 3.5 >= 2.7: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 2.7")

    /tmp/tmpx5j96cni.sh: line 42: ((: 4.0 3 1.7 2 3.5 >= 2.3: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 2.3")

    /tmp/tmpx5j96cni.sh: line 45: ((: 4.0 3 1.7 2 3.5 >= 2.0: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 2.0")

    /tmp/tmpx5j96cni.sh: line 48: ((: 4.0 3 1.7 2 3.5 >= 1.7: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 1.7")

    /tmp/tmpx5j96cni.sh: line 51: ((: 4.0 3 1.7 2 3.5 >= 1.3: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 1.3")

    /tmp/tmpx5j96cni.sh: line 54: ((: 4.0 3 1.7 2 3.5 >= 1.0: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 1.0")

    /tmp/tmpx5j96cni.sh: line 57: ((: 4.0 3 1.7 2 3.5 >= 0.7: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 0.7")

    /tmp/tmpx5j96cni.sh: line 60: ((: 4.0 3 1.7 2 3.5 >= 0.0: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 0.0")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $(bc <<< \"$1 > 4.0\") -eq 1 ]; then\n        echo A+\n    elif [ $(bc\
    \ <<< \"$1 > 3.7\") -eq 1 ]; then\n        echo A\n    elif [ $(bc <<< \"$1 >\
    \ 3.3\") -eq 1 ]; then\n        echo A-\n    elif [ $(bc <<< \"$1 > 3.0\") -eq\
    \ 1 ]; then\n        echo B+\n    elif [ $(bc <<< \"$1 > 2.7\") -eq 1 ]; then\n\
    \        echo B\n    elif [ $(bc <<< \"$1 > 2.3\") -eq 1 ]; then\n        echo\
    \ B-\n    elif [ $(bc <<< \"$1 > 2.0\") -eq 1 ]; then\n        echo C+\n    elif\
    \ [ $(bc <<< \"$1 > 1.7\") -eq 1 ]; then\n        echo C\n    elif [ $(bc <<<\
    \ \"$1 > 1.3\") -eq 1 ]; then\n        echo C-\n    elif [ $(bc <<< \"$1 > 1.0\"\
    ) -eq 1 ]; then\n        echo D+\n    elif [ $(bc <<< \"$1 > 0.7\") -eq 1 ]; then\n\
    \        echo D\n    elif [ $(bc <<< \"$1 > 0.0\") -eq 1 ]; then\n        echo\
    \ D-\n    else\n        echo E\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 27: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpimib8plg.sh: line 49: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case \"$1\" in\n    4.0)\n        echo \"A+\"\n        ;;\n    3.7)\n   \
    \     echo \"A\"\n        ;;\n    3.3)\n        echo \"A-\"\n        ;;\n    3.0)\n\
    \        echo \"B+\"\n        ;;\n    2.7)\n        echo \"B\"\n        ;;\n \
    \   2.3)\n        echo \"B-\"\n        ;;\n    2.0)\n        echo \"C+\"\n   \
    \     ;;\n    1.7)\n        echo \"C\"\n        ;;\n    1.3)\n        echo \"\
    C-\"\n        ;;\n    1.0)\n        echo \"D+\"\n        ;;\n    0.7)\n      \
    \  echo \"D\"\n        ;;\n    0.0)\n        echo \"D-\"\n        ;;\n    -0.1)\n\
    \        echo \"E\"\n        ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ $(echo $gpa '>' '4.0' | bc -l) -eq 1 ]; then\n   \
    \     echo '\"A+\"'\n    elif [ $(echo $gpa '>' '3.7' | bc -l) -eq 1 ]; then\n\
    \        echo '\"A\"'\n    elif [ $(echo $gpa '>' '3.3' | bc -l) -eq 1 ]; then\n\
    \        echo '\"A-\"'\n    elif [ $(echo $gpa '>' '3.0' | bc -l) -eq 1 ]; then\n\
    \        echo '\"B+\"'\n    elif [ $(echo $gpa '>' '2.7' | bc -l) -eq 1 ]; then\n\
    \        echo '\"B\"'\n    elif [ $(echo $gpa '>' '2.3' | bc -l) -eq 1 ]; then\n\
    \        echo '\"B-\"'\n    elif [ $(echo $gpa '>' '2.0' | bc -l) -eq 1 ]; then\n\
    \        echo '\"C+\"'\n    elif [ $(echo $gpa '>' '1.7' | bc -l) -eq 1 ]; then\n\
    \        echo '\"C\"'\n    elif [ $(echo $gpa '>' '1.3' | bc -l) -eq 1 ]; then\n\
    \        echo '\"C-\"'\n    elif [ $(echo $gpa '>' '1.0' | bc -l) -eq 1 ]; then\n\
    \        echo '\"D+\"'\n    elif [ $(echo $gpa '>' '0.7' | bc -l) -eq 1 ]; then\n\
    \        echo '\"D\"'\n    elif [ $(echo $gpa '>' '0.0' | bc -l) -eq 1 ]; then\n\
    \        echo '\"D-\"'\n    else\n        echo '\"E\"'\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 28: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpmiw5kmhx.sh: line 50: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ \"$1\" == \"4.0\" ]; then\n        echo \"A+\"\n    elif [ \"$1\" >\
    \ \"3.7\" ]; then\n        echo \"A\"\n    elif [ \"$1\" > \"3.3\" ]; then\n \
    \       echo \"A-\"\n    elif [ \"$1\" > \"3.0\" ]; then\n        echo \"B+\"\n\
    \    elif [ \"$1\" > \"2.7\" ]; then\n        echo \"B\"\n    elif [ \"$1\" >\
    \ \"2.3\" ]; then\n        echo \"B-\"\n    elif [ \"$1\" > \"2.0\" ]; then\n\
    \        echo \"C+\"\n    elif [ \"$1\" > \"1.7\" ]; then\n        echo \"C\"\n\
    \    elif [ \"$1\" > \"1.3\" ]; then\n        echo \"C-\"\n    elif [ \"$1\" >\
    \ \"1.0\" ]; then\n        echo \"D+\"\n    elif [ \"$1\" > \"0.7\" ]; then\n\
    \        echo \"D\"\n    elif [ \"$1\" > \"0.0\" ]; then\n        echo \"D-\"\n\
    \    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # HINT: use awk to compare a variable $gpa to the ranges, then print the\
    \ letter grade.\n    if [ \"$gpa\" -gt \"4.0\" ]; then\n        lettergrade =\
    \ \"A+\"\n    elif [ \"$gpa\" -gt \"3.7\" ]; then\n        lettergrade = \"A\"\
    \n    elif [ \"$gpa\" -gt \"3.3\" ]; then\n        lettergrade = \"A-\"\n    elif\
    \ [ \"$gpa\" -gt \"3.0\" ]; then\n        lettergrade = \"B+\"\n    elif [ \"\
    $gpa\" -gt \"2.7\" ]; then\n        lettergrade = \"B\"\n    elif [ \"$gpa\" -gt\
    \ \"2.3\" ]; then\n        lettergrade = \"B-\"\n    elif [ \"$gpa\" -gt \"2.0\"\
    \ ]; then\n        lettergrade = \"C+\"\n    elif [ \"$gpa\" -gt \"1.7\" ]; then\n\
    \        lettergrade = \"C\"\n    elif [ \"$gpa\" -gt \"1.3\" ]; then\n      \
    \  lettergrade = \"C-\"\n    elif [ \"$gpa\" -gt \"1.0\" ]; then\n        lettergrade\
    \ = \"D+\"\n    elif [ \"$gpa\" -gt \"0.7\" ]; then\n        lettergrade = \"\
    D\"\n    elif [ \"$gpa\" -gt \"0.0\" ]; then\n        lettergrade = \"D-\"\n \
    \   else\n        lettergrade = \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8bhx6tu4.sh: line 28: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 30: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 32: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 34: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 36: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 38: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 40: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 42: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 44: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 46: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 48: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 50: [: : integer expression expected

    /tmp/tmp8bhx6tu4.sh: line 53: lettergrade: command not found

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # Because space is the delimiter, we need to handle the case\n    # in which\
    \ a number is less than 0.7.\n    if [ $(echo \"$1 <= 0.7\" | bc) -eq 1 ]; then\n\
    \        echo '\"D-\"'\n    elif [ $(echo \"$1 <= 1.0\" | bc) -eq 1 ]; then\n\
    \        echo '\"D+\"'\n    elif [ $(echo \"$1 <= 1.3\" | bc) -eq 1 ]; then\n\
    \        echo '\"C-\"'\n    elif [ $(echo \"$1 <= 1.7\" | bc) -eq 1 ]; then\n\
    \        echo '\"C\"'\n    elif [ $(echo \"$1 <= 2.0\" | bc) -eq 1 ]; then\n \
    \       echo '\"C+\"'\n    elif [ $(echo \"$1 <= 2.3\" | bc) -eq 1 ]; then\n \
    \       echo '\"B-\"'\n    elif [ $(echo \"$1 <= 2.7\" | bc) -eq 1 ]; then\n \
    \       echo '\"B\"'\n    elif [ $(echo \"$1 <= 3.0\" | bc) -eq 1 ]; then\n  \
    \      echo '\"B+\"'\n    elif [ $(echo \"$1 <= 3.3\" | bc) -eq 1 ]; then\n  \
    \      echo '\"A-\"'\n    elif [ $(echo \"$1 <= 3.7\" | bc) -eq 1 ]; then\n  \
    \      echo '\"A\"'\n    else\n        echo '\"A+\"'\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpa05tfqhl.sh: line 47: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if (( $(echo \"$1 >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n    elif\
    \ (( $(echo \"$1 >= 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif (( $(echo\
    \ \"$1 >= 3.3\" | bc -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"\
    $1 >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n    elif (( $(echo \"$1 >=\
    \ 2.7\" | bc -l) )); then\n        echo \"B\"\n    elif (( $(echo \"$1 >= 2.3\"\
    \ | bc -l) )); then\n        echo \"B-\"\n    elif (( $(echo \"$1 >= 2.0\" | bc\
    \ -l) )); then\n        echo \"C+\"\n    elif (( $(echo \"$1 >= 1.7\" | bc -l)\
    \ )); then\n        echo \"C\"\n    elif (( $(echo \"$1 >= 1.3\" | bc -l) ));\
    \ then\n        echo \"C-\"\n    elif (( $(echo \"$1 >= 1.0\" | bc -l) )); then\n\
    \        echo \"D+\"\n    elif (( $(echo \"$1 >= 0.7\" | bc -l) )); then\n   \
    \     echo \"D\"\n    elif (( $(echo \"$1 >= 0.0\" | bc -l) )); then\n       \
    \ echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tif [[ $1 > 4.0 ]]; then\n\t\tprintf '\"A+\"'\n\telif [[ $1 > 3.7 ]]; then\n\t\
    \tprintf '\"A\"'\n\telif [[ $1 > 3.3 ]]; then\n\t\tprintf '\"A-\"'\n\telif [[\
    \ $1 > 3.0 ]]; then\n\t\tprintf '\"B+\"'\n\telif [[ $1 > 2.7 ]]; then\n\t\tprintf\
    \ '\"B\"'\n\telif [[ $1 > 2.3 ]]; then\n\t\tprintf '\"B-\"'\n\telif [[ $1 > 2.0\
    \ ]]; then\n\t\tprintf '\"C+\"'\n\telif [[ $1 > 1.7 ]]; then\n\t\tprintf '\"C\"\
    '\n\telif [[ $1 > 1.3 ]]; then\n\t\tprintf '\"C-\"'\n\telif [[ $1 > 1.0 ]]; then\n\
    \t\tprintf '\"D+\"'\n\telif [[ $1 > 0.7 ]]; then\n\t\tprintf '\"D\"'\n\telif [[\
    \ $1 > 0.0 ]]; then\n\t\tprintf '\"D-\"'\n\telse\n\t\tprintf '\"E\"'\n\tfi\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local gpa=$1\n  local whole_number=${gpa%.*}\n  local decimal_portion=${gpa#*.}\n\
    \  if [[ $whole_number -ge 4 ]]; then\n    echo '\"A+\"'\n  elif [[ $whole_number\
    \ -ge 3 ]]; then\n    if [[ $decimal_portion -ge 7 ]]; then\n      echo '\"A\"\
    '\n    elif [[ $decimal_portion -ge 3 ]]; then\n      echo '\"A-\"'\n    elif\
    \ [[ $decimal_portion -ge 0 ]]; then\n      echo '\"B+\"'\n    fi\n  elif [[ $whole_number\
    \ -ge 2 ]]; then\n    if [[ $decimal_portion -ge 7 ]]; then\n      echo '\"B\"\
    '\n    elif [[ $decimal_portion -ge 3 ]]; then\n      echo '\"B-\"'\n    elif\
    \ [[ $decimal_portion -ge 0 ]]; then\n      echo '\"C+\"'\n    fi\n  elif [[ $whole_number\
    \ -ge 1 ]]; then\n    if [[ $decimal_portion -ge 7 ]]; then\n      echo '\"C\"\
    '\n    elif [[ $decimal_portion -ge 3 ]]; then\n      echo '\"C-\"'\n    elif\
    \ [[ $decimal_portion -ge 0 ]]; then\n      echo '\"D+\"'\n    fi\n  elif [[ $whole_number\
    \ -ge 0 ]]; then\n    if [[ $decimal_portion -ge 7 ]]; then\n      echo '\"D\"\
    '\n    elif [[ $decimal_portion -ge 0 ]]; then\n      echo '\"D-\"'\n    fi\n\
    \  else\n    echo '\"E\"'\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpumz9zen3.sh: line 30: [[: 4.0 3 1.7 2 3: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3")

    /tmp/tmpumz9zen3.sh: line 32: [[: 4.0 3 1.7 2 3: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3")

    /tmp/tmpumz9zen3.sh: line 40: [[: 4.0 3 1.7 2 3: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3")

    /tmp/tmpumz9zen3.sh: line 48: [[: 4.0 3 1.7 2 3: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3")

    /tmp/tmpumz9zen3.sh: line 56: [[: 4.0 3 1.7 2 3: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # put your code here\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp41rv7kco.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmp41rv7kco.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local GPA=\"$1\"\n    local grade=\"\"\n    local sign=\"\"\n    if (($(echo\
    \ \"$GPA >= 4.0\" | bc -l)))\n    then\n        grade=\"A\"\n        sign=\"+\"\
    \n    elif (($(echo \"$GPA > 3.7\" | bc -l)))\n    then\n        grade=\"A\"\n\
    \    elif (($(echo \"$GPA > 3.3\" | bc -l)))\n    then\n        grade=\"A\"\n\
    \        sign=\"-\"\n    elif (($(echo \"$GPA > 3.0\" | bc -l)))\n    then\n \
    \       grade=\"B\"\n        sign=\"+\"\n    elif (($(echo \"$GPA > 2.7\" | bc\
    \ -l)))\n    then\n        grade=\"B\"\n    elif (($(echo \"$GPA > 2.3\" | bc\
    \ -l)))\n    then\n        grade=\"B\"\n        sign=\"-\"\n    elif (($(echo\
    \ \"$GPA > 2.0\" | bc -l)))\n    then\n        grade=\"C\"\n        sign=\"+\"\
    \n    elif (($(echo \"$GPA > 1.7\" | bc -l)))\n    then\n        grade=\"C\"\n\
    \    elif (($(echo \"$GPA > 1.3\" | bc -l)))\n    then\n        grade=\"C\"\n\
    \        sign=\"-\"\n    elif (($(echo \"$GPA > 1.0\" | bc -l)))\n    then\n \
    \       grade=\"D\"\n        sign=\"+\"\n    elif (($(echo \"$GPA > 0.7\" | bc\
    \ -l)))\n    then\n        grade=\"D\"\n    elif (($(echo \"$GPA > 0.0\" | bc\
    \ -l)))\n    then\n        grade=\"D\"\n        sign=\"-\"\n    else\n       \
    \ grade=\"E\"\n    fi\n    echo \"$grade$sign\"\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=\"$1\"\n    local letter_grade\n    if (( $(bc <<< \"$gpa >= 4.0\"\
    ) )); then\n        letter_grade=\"A+\"\n    elif (( $(bc <<< \"$gpa >= 3.7\"\
    ) )); then\n        letter_grade=\"A\"\n    elif (( $(bc <<< \"$gpa >= 3.3\")\
    \ )); then\n        letter_grade=\"A-\"\n    elif (( $(bc <<< \"$gpa >= 3.0\"\
    ) )); then\n        letter_grade=\"B+\"\n    elif (( $(bc <<< \"$gpa >= 2.7\"\
    ) )); then\n        letter_grade=\"B\"\n    elif (( $(bc <<< \"$gpa >= 2.3\")\
    \ )); then\n        letter_grade=\"B-\"\n    elif (( $(bc <<< \"$gpa >= 2.0\"\
    ) )); then\n        letter_grade=\"C+\"\n    elif (( $(bc <<< \"$gpa >= 1.7\"\
    ) )); then\n        letter_grade=\"C\"\n    elif (( $(bc <<< \"$gpa >= 1.3\")\
    \ )); then\n        letter_grade=\"C-\"\n    elif (( $(bc <<< \"$gpa >= 1.0\"\
    ) )); then\n        letter_grade=\"D+\"\n    elif (( $(bc <<< \"$gpa >= 0.7\"\
    ) )); then\n        letter_grade=\"D\"\n    elif (( $(bc <<< \"$gpa >= 0.0\")\
    \ )); then\n        letter_grade=\"D-\"\n    else\n        letter_grade=\"E\"\n\
    \    fi\n    echo \"$letter_grade\"\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ \"$gpa\" == \"4.0\" ]; then\n        echo '\"A+\"\
    '\n    elif (( $(echo \"$gpa > 3.7\" | bc -l) )); then\n        echo '\"A\"'\n\
    \    elif (( $(echo \"$gpa > 3.3\" | bc -l) )); then\n        echo '\"A-\"'\n\
    \    elif (( $(echo \"$gpa > 3.0\" | bc -l) )); then\n        echo '\"B+\"'\n\
    \    elif (( $(echo \"$gpa > 2.7\" | bc -l) )); then\n        echo '\"B\"'\n \
    \   elif (( $(echo \"$gpa > 2.3\" | bc -l) )); then\n        echo '\"B-\"'\n \
    \   elif (( $(echo \"$gpa > 2.0\" | bc -l) )); then\n        echo '\"C+\"'\n \
    \   elif (( $(echo \"$gpa > 1.7\" | bc -l) )); then\n        echo '\"C\"'\n  \
    \  elif (( $(echo \"$gpa > 1.3\" | bc -l) )); then\n        echo '\"C-\"'\n  \
    \  elif (( $(echo \"$gpa > 1.0\" | bc -l) )); then\n        echo '\"D+\"'\n  \
    \  elif (( $(echo \"$gpa > 0.7\" | bc -l) )); then\n        echo '\"D\"'\n   \
    \ elif (( $(echo \"$gpa > 0.0\" | bc -l) )); then\n        echo '\"D-\"'\n   \
    \ else\n        echo '\"E\"'\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 -ge 4.0 ]; then\n        echo '\"A+\"'\n    elif [ $1 -gt 3.7 ];\
    \ then\n        echo '\"A\"'\n    elif [ $1 -gt 3.3 ]; then\n        echo '\"\
    A-\"'\n    elif [ $1 -gt 3.0 ]; then\n        echo '\"B+\"'\n    elif [ $1 -gt\
    \ 2.7 ]; then\n        echo '\"B\"'\n    elif [ $1 -gt 2.3 ]; then\n        echo\
    \ '\"B-\"'\n    elif [ $1 -gt 2.0 ]; then\n        echo '\"C+\"'\n    elif [ $1\
    \ -gt 1.7 ]; then\n        echo '\"C\"'\n    elif [ $1 -gt 1.3 ]; then\n     \
    \   echo '\"C-\"'\n    elif [ $1 -gt 1.0 ]; then\n        echo '\"D+\"'\n    elif\
    \ [ $1 -gt 0.7 ]; then\n        echo '\"D\"'\n    elif [ $1 -gt 0.0 ]; then\n\
    \        echo '\"D-\"'\n    else\n        echo '\"E\"'\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn24wrhel.sh: line 27: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 29: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 31: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 33: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 35: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 37: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 39: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 41: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 43: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 45: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 47: [: too many arguments

    /tmp/tmpn24wrhel.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $(echo \"$1\" | bc -l) in\n        4.0 ) echo \"A+\";;\n        3.7\
    \ ) echo \"A\";;\n        3.3 ) echo \"A-\";;\n        3.0 ) echo \"B+\";;\n \
    \       2.7 ) echo \"B\";;\n        2.3 ) echo \"B-\";;\n        2.0 ) echo \"\
    C+\";;\n        1.7 ) echo \"C\";;\n        1.3 ) echo \"C-\";;\n        1.0 )\
    \ echo \"D+\";;\n        0.7 ) echo \"D\";;\n        0.0 ) echo \"D-\";;\n   \
    \     *   ) echo \"E\";;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # given a numerical grade, output the letter grade\n    gpa=$1\n    case\
    \ $gpa in\n        4.0)\n            echo '\"A+\"'\n            ;;\n        [0-3].[7-9])\n\
    \            echo '\"A\"'\n            ;;\n        [0-3].[4-6])\n            echo\
    \ '\"A-\"'\n            ;;\n        [0-2].[7-9])\n            echo '\"B+\"'\n\
    \            ;;\n        [0-2].[4-6])\n            echo '\"B\"'\n            ;;\n\
    \        [0-2].[1-3])\n            echo '\"B-\"'\n            ;;\n        [0-1].[7-9])\n\
    \            echo '\"C+\"'\n            ;;\n        [0-1].[4-6])\n           \
    \ echo '\"C\"'\n            ;;\n        [0-1].[1-3])\n            echo '\"C-\"\
    '\n            ;;\n        [0-0].[7-9])\n            echo '\"D+\"'\n         \
    \   ;;\n        [0-0].[4-6])\n            echo '\"D\"'\n            ;;\n     \
    \   [0-0].[1-3])\n            echo '\"D-\"'\n            ;;\n        0.0)\n  \
    \          echo '\"E\"'\n            ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    letter_grade=\"\"\n    GPA=$1\n    if (( $(echo \"$GPA >= 4.0\" | bc -l)\
    \ )); then\n        letter_grade=\"A+\"\n    elif (( $(echo \"$GPA >= 3.7\" |\
    \ bc -l) )); then\n        letter_grade=\"A\"\n    elif (( $(echo \"$GPA >= 3.3\"\
    \ | bc -l) )); then\n        letter_grade=\"A-\"\n    elif (( $(echo \"$GPA >=\
    \ 3.0\" | bc -l) )); then\n        letter_grade=\"B+\"\n    elif (( $(echo \"\
    $GPA >= 2.7\" | bc -l) )); then\n        letter_grade=\"B\"\n    elif (( $(echo\
    \ \"$GPA >= 2.3\" | bc -l) )); then\n        letter_grade=\"B-\"\n    elif ((\
    \ $(echo \"$GPA >= 2.0\" | bc -l) )); then\n        letter_grade=\"C+\"\n    elif\
    \ (( $(echo \"$GPA >= 1.7\" | bc -l) )); then\n        letter_grade=\"C\"\n  \
    \  elif (( $(echo \"$GPA >= 1.3\" | bc -l) )); then\n        letter_grade=\"C-\"\
    \n    elif (( $(echo \"$GPA >= 1.0\" | bc -l) )); then\n        letter_grade=\"\
    D+\"\n    elif (( $(echo \"$GPA >= 0.7\" | bc -l) )); then\n        letter_grade=\"\
    D\"\n    elif (( $(echo \"$GPA >= 0.0\" | bc -l) )); then\n        letter_grade=\"\
    D-\"\n    else\n        letter_grade=\"E\"\n    fi\n    echo $letter_grade\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ \"$gpa\" == \"4.0\" ]; then\n        echo \"A+\"\n\
    \    elif [ $(echo \"$gpa > 3.7\" | bc -l) == 1 ]; then\n        echo \"A\"\n\
    \    elif [ $(echo \"$gpa > 3.3\" | bc -l) == 1 ]; then\n        echo \"A-\"\n\
    \    elif [ $(echo \"$gpa > 3.0\" | bc -l) == 1 ]; then\n        echo \"B+\"\n\
    \    elif [ $(echo \"$gpa > 2.7\" | bc -l) == 1 ]; then\n        echo \"B\"\n\
    \    elif [ $(echo \"$gpa > 2.3\" | bc -l) == 1 ]; then\n        echo \"B-\"\n\
    \    elif [ $(echo \"$gpa > 2.0\" | bc -l) == 1 ]; then\n        echo \"C+\"\n\
    \    elif [ $(echo \"$gpa > 1.7\" | bc -l) == 1 ]; then\n        echo \"C\"\n\
    \    elif [ $(echo \"$gpa > 1.3\" | bc -l) == 1 ]; then\n        echo \"C-\"\n\
    \    elif [ $(echo \"$gpa > 1.0\" | bc -l) == 1 ]; then\n        echo \"D+\"\n\
    \    elif [ $(echo \"$gpa > 0.7\" | bc -l) == 1 ]; then\n        echo \"D\"\n\
    \    elif [ $(echo \"$gpa > 0.0\" | bc -l) == 1 ]; then\n        echo \"D-\"\n\
    \    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 30: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 32: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 34: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 36: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 38: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 40: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 42: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 44: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 46: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 48: [: ==: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpwk9h1zdj.sh: line 50: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 == \"4.0\" ]; then\n        echo \"A+\"\n    elif [ $1 -gt 3.7 ];\
    \ then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ]; then\n        echo \"A-\"\
    \n    elif [ $1 -gt 3.0 ]; then\n        echo \"B+\"\n    elif [ $1 -gt 2.7 ];\
    \ then\n        echo \"B\"\n    elif [ $1 -gt 2.3 ]; then\n        echo \"B-\"\
    \n    elif [ $1 -gt 2.0 ]; then\n        echo \"C+\"\n    elif [ $1 -gt 1.7 ];\
    \ then\n        echo \"C\"\n    elif [ $1 -gt 1.3 ]; then\n        echo \"C-\"\
    \n    elif [ $1 -gt 1.0 ]; then\n        echo \"D+\"\n    elif [ $1 -gt 0.7 ];\
    \ then\n        echo \"D\"\n    elif [ $1 -gt 0.0 ]; then\n        echo \"D-\"\
    \n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp33o9m7xf.sh: line 27: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 29: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 31: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 33: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 35: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 37: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 39: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 41: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 43: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 45: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 47: [: too many arguments

    /tmp/tmp33o9m7xf.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # your code here\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpiwnscpwj.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmpiwnscpwj.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if (( $(echo \"$1 > 4.0\" | bc -l) )); then\n    echo \"A+\"\n  elif (( $(echo\
    \ \"$1 > 3.7\" | bc -l) )); then\n    echo \"A\"\n  elif (( $(echo \"$1 > 3.3\"\
    \ | bc -l) )); then\n    echo \"A-\"\n  elif (( $(echo \"$1 > 3.0\" | bc -l) ));\
    \ then\n    echo \"B+\"\n  elif (( $(echo \"$1 > 2.7\" | bc -l) )); then\n   \
    \ echo \"B\"\n  elif (( $(echo \"$1 > 2.3\" | bc -l) )); then\n    echo \"B-\"\
    \n  elif (( $(echo \"$1 > 2.0\" | bc -l) )); then\n    echo \"C+\"\n  elif ((\
    \ $(echo \"$1 > 1.7\" | bc -l) )); then\n    echo \"C\"\n  elif (( $(echo \"$1\
    \ > 1.3\" | bc -l) )); then\n    echo \"C-\"\n  elif (( $(echo \"$1 > 1.0\" |\
    \ bc -l) )); then\n    echo \"D+\"\n  elif (( $(echo \"$1 > 0.7\" | bc -l) ));\
    \ then\n    echo \"D\"\n  elif (( $(echo \"$1 > 0.0\" | bc -l) )); then\n    echo\
    \ \"D-\"\n  else\n    echo \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [[ $1 =~ ^[0-9]+$ ]]; then \n        if [ $1 -eq 4 ]; then \n        \
    \    echo \"A+\"\n        elif [ $1 -eq 3 ]; then \n            echo \"A\"\n \
    \       elif [ $1 -eq 2 ]; then \n            echo \"B\"\n        elif [ $1 -eq\
    \ 1 ]; then \n            echo \"C\"\n        elif [ $1 -eq 0 ]; then \n     \
    \       echo \"D\"\n        else\n            echo \"E\"\n        fi\n    else\n\
    \        if [ $1 == 4.0 ]; then \n            echo \"A+\"\n        elif [ $1 -gt\
    \ 3.7 ]; then \n            echo \"A\"\n        elif [ $1 -gt 3.3 ]; then \n \
    \           echo \"A-\"\n        elif [ $1 -gt 3.0 ]; then \n            echo\
    \ \"B+\"\n        elif [ $1 -gt 2.7 ]; then \n            echo \"B\"\n       \
    \ elif [ $1 -gt 2.3 ]; then \n            echo \"B-\"\n        elif [ $1 -gt 2.0\
    \ ]; then \n            echo \"C+\"\n        elif [ $1 -gt 1.7 ]; then \n    \
    \        echo \"C\"\n        elif [ $1 -gt 1.3 ]; then \n            echo \"C-\"\
    \n        elif [ $1 -gt 1.0 ]; then \n            echo \"D+\"\n        elif [\
    \ $1 -gt 0.7 ]; then \n            echo \"D\"\n        elif [ $1 -gt 0.0 ]; then\
    \ \n            echo \"D-\"\n        else\n            echo \"E\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp9w7iokye.sh: line 42: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 44: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 46: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 48: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 50: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 52: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 54: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 56: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 58: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 60: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 62: [: too many arguments

    /tmp/tmp9w7iokye.sh: line 64: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # TODO\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp1dsi2oy2.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmp1dsi2oy2.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    local letter_grade\n\n    if (( $(echo \"$gpa >= 4.0\"\
    \ | bc -l) )); then\n        letter_grade=\"A+\"\n    elif (( $(echo \"$gpa >=\
    \ 3.7\" | bc -l) )); then\n        letter_grade=\"A\"\n    elif (( $(echo \"$gpa\
    \ >= 3.3\" | bc -l) )); then\n        letter_grade=\"A-\"\n    elif (( $(echo\
    \ \"$gpa >= 3.0\" | bc -l) )); then\n        letter_grade=\"B+\"\n    elif ((\
    \ $(echo \"$gpa >= 2.7\" | bc -l) )); then\n        letter_grade=\"B\"\n    elif\
    \ (( $(echo \"$gpa >= 2.3\" | bc -l) )); then\n        letter_grade=\"B-\"\n \
    \   elif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then\n        letter_grade=\"\
    C+\"\n    elif (( $(echo \"$gpa >= 1.7\" | bc -l) )); then\n        letter_grade=\"\
    C\"\n    elif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n        letter_grade=\"\
    C-\"\n    elif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n        letter_grade=\"\
    D+\"\n    elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n        letter_grade=\"\
    D\"\n    elif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n        letter_grade=\"\
    D-\"\n    else\n        letter_grade=\"E\"\n    fi\n\n    echo \"$letter_grade\"\
    \n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0)\n            echo A+\n            ;;\n        [3].[7-9])\n\
    \            echo A\n            ;;\n        [3].[3-6])\n            echo A-\n\
    \            ;;\n        [3].[0-2])\n            echo B+\n            ;;\n   \
    \     [2].[7-9])\n            echo B\n            ;;\n        [2].[3-6])\n   \
    \         echo B-\n            ;;\n        [2].[0-2])\n            echo C+\n \
    \           ;;\n        [1].[7-9])\n            echo C\n            ;;\n     \
    \   [1].[3-6])\n            echo C-\n            ;;\n        [1].[0-2])\n    \
    \        echo D+\n            ;;\n        [0].[7-9])\n            echo D\n   \
    \         ;;\n        [0].[0-6])\n            echo D-\n            ;;\n      \
    \  0.0)\n            echo E\n            ;;\n    esac\n}\n\ncandidate() {\n  \
    \  numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 -eq 4 ]; then\n        echo \"A+\"\n    elif [ $1 -gt 3 ] && [ $1\
    \ -lt 4 ]; then\n        echo \"A\"\n    elif [ $1 -gt 3.3 ] && [ $1 -lt 3.7 ];\
    \ then\n        echo \"A-\"\n    elif [ $1 -gt 3 ] && [ $1 -lt 3.3 ]; then\n \
    \       echo \"B+\"\n    elif [ $1 -gt 2.7 ] && [ $1 -lt 3 ]; then\n        echo\
    \ \"B\"\n    elif [ $1 -gt 2.3 ] && [ $1 -lt 2.7 ]; then\n        echo \"B-\"\n\
    \    elif [ $1 -gt 2 ] && [ $1 -lt 2.3 ]; then\n        echo \"C+\"\n    elif\
    \ [ $1 -gt 1.7 ] && [ $1 -lt 2 ]; then\n        echo \"C\"\n    elif [ $1 -gt\
    \ 1.3 ] && [ $1 -lt 1.7 ]; then\n        echo \"C-\"\n    elif [ $1 -gt 1 ] &&\
    \ [ $1 -lt 1.3 ]; then\n        echo \"D+\"\n    elif [ $1 -gt 0.7 ] && [ $1 -lt\
    \ 1 ]; then\n        echo \"D\"\n    elif [ $1 -gt 0 ] && [ $1 -lt 0.7 ]; then\n\
    \        echo \"D-\"\n    elif [ $1 -eq 0 ]; then\n        echo \"E\"\n    fi\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpnv1cwhi3.sh: line 27: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 29: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 31: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 33: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 35: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 37: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 39: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 41: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 43: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 45: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 47: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 49: [: too many arguments

    /tmp/tmpnv1cwhi3.sh: line 51: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tgpa=$1\n\n\tif (( $(echo \"$gpa >= 4.0\" | bc -l) )); then\n\t\techo \"A+\"\n\
    \telif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n\t\techo \"A\"\n\telif ((\
    \ $(echo \"$gpa >= 3.3\" | bc -l) )); then\n\t\techo \"A-\"\n\telif (( $(echo\
    \ \"$gpa >= 3.0\" | bc -l) )); then\n\t\techo \"B+\"\n\telif (( $(echo \"$gpa\
    \ >= 2.7\" | bc -l) )); then\n\t\techo \"B\"\n\telif (( $(echo \"$gpa >= 2.3\"\
    \ | bc -l) )); then\n\t\techo \"B-\"\n\telif (( $(echo \"$gpa >= 2.0\" | bc -l)\
    \ )); then\n\t\techo \"C+\"\n\telif (( $(echo \"$gpa >= 1.7\" | bc -l) )); then\n\
    \t\techo \"C\"\n\telif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n\t\techo \"\
    C-\"\n\telif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n\t\techo \"D+\"\n\t\
    elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n\t\techo \"D\"\n\telif (( $(echo\
    \ \"$gpa >= 0.0\" | bc -l) )); then\n\t\techo \"D-\"\n\telse\n\t\techo \"E\"\n\
    \tfi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # Your code here.\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_di_cr_j.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmp_di_cr_j.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ $(bc <<< \"$gpa >= 4.0\") -eq 1 ]; then\n        echo\
    \ '\"A+\"'\n    elif [ $(bc <<< \"$gpa >= 3.7\") -eq 1 ]; then\n        echo '\"\
    A\"'\n    elif [ $(bc <<< \"$gpa >= 3.3\") -eq 1 ]; then\n        echo '\"A-\"\
    '\n    elif [ $(bc <<< \"$gpa >= 3.0\") -eq 1 ]; then\n        echo '\"B+\"'\n\
    \    elif [ $(bc <<< \"$gpa >= 2.7\") -eq 1 ]; then\n        echo '\"B\"'\n  \
    \  elif [ $(bc <<< \"$gpa >= 2.3\") -eq 1 ]; then\n        echo '\"B-\"'\n   \
    \ elif [ $(bc <<< \"$gpa >= 2.0\") -eq 1 ]; then\n        echo '\"C+\"'\n    elif\
    \ [ $(bc <<< \"$gpa >= 1.7\") -eq 1 ]; then\n        echo '\"C\"'\n    elif [\
    \ $(bc <<< \"$gpa >= 1.3\") -eq 1 ]; then\n        echo '\"C-\"'\n    elif [ $(bc\
    \ <<< \"$gpa >= 1.0\") -eq 1 ]; then\n        echo '\"D+\"'\n    elif [ $(bc <<<\
    \ \"$gpa >= 0.7\") -eq 1 ]; then\n        echo '\"D\"'\n    elif [ $(bc <<< \"\
    $gpa >= 0.0\") -eq 1 ]; then\n        echo '\"D-\"'\n    else\n        echo '\"\
    E\"'\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 28: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4t_aj4s_.sh: line 50: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # $1 is a single number\n    # echo out the corresponding letter grade\n\
    \    if (($1 >= 4)); then\n        echo \"A+\"\n    elif (($1 >= 3.7)); then\n\
    \        echo \"A\"\n    elif (($1 >= 3.3)); then\n        echo \"A-\"\n    elif\
    \ (($1 >= 3)); then\n        echo \"B+\"\n    elif (($1 >= 2.7)); then\n     \
    \   echo \"B\"\n    elif (($1 >= 2.3)); then\n        echo \"B-\"\n    elif (($1\
    \ >= 2)); then\n        echo \"C+\"\n    elif (($1 >= 1.7)); then\n        echo\
    \ \"C\"\n    elif (($1 >= 1.3)); then\n        echo \"C-\"\n    elif (($1 >= 1));\
    \ then\n        echo \"D+\"\n    elif (($1 >= 0.7)); then\n        echo \"D\"\n\
    \    elif (($1 >= 0)); then\n        echo \"D-\"\n    else\n        echo \"E\"\
    \n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n\
    \    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\"\
    \ ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5\
    \ 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdzcb_10k.sh: line 29: ((: 4.0 3 1.7 2 3.5 >= 4: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 4")

    /tmp/tmpdzcb_10k.sh: line 31: ((: 4.0 3 1.7 2 3.5 >= 3.7: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 3.7")

    /tmp/tmpdzcb_10k.sh: line 33: ((: 4.0 3 1.7 2 3.5 >= 3.3: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 3.3")

    /tmp/tmpdzcb_10k.sh: line 35: ((: 4.0 3 1.7 2 3.5 >= 3: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 3")

    /tmp/tmpdzcb_10k.sh: line 37: ((: 4.0 3 1.7 2 3.5 >= 2.7: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 2.7")

    /tmp/tmpdzcb_10k.sh: line 39: ((: 4.0 3 1.7 2 3.5 >= 2.3: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 2.3")

    /tmp/tmpdzcb_10k.sh: line 41: ((: 4.0 3 1.7 2 3.5 >= 2: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 2")

    /tmp/tmpdzcb_10k.sh: line 43: ((: 4.0 3 1.7 2 3.5 >= 1.7: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 1.7")

    /tmp/tmpdzcb_10k.sh: line 45: ((: 4.0 3 1.7 2 3.5 >= 1.3: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 1.3")

    /tmp/tmpdzcb_10k.sh: line 47: ((: 4.0 3 1.7 2 3.5 >= 1: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 1")

    /tmp/tmpdzcb_10k.sh: line 49: ((: 4.0 3 1.7 2 3.5 >= 0.7: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 0.7")

    /tmp/tmpdzcb_10k.sh: line 51: ((: 4.0 3 1.7 2 3.5 >= 0: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 >= 0")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    printf \"%s\\n\" \"$1\" |\n    while read gpa\n    do\n        if [ \"$gpa\"\
    \ -eq \"4.0\" ]; then\n            printf '\"A+\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"3.7\" ]; then\n            printf '\"A\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"3.3\" ]; then\n            printf '\"A-\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"3.0\" ]; then\n            printf '\"B+\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"2.7\" ]; then\n            printf '\"B\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"2.3\" ]; then\n            printf '\"B-\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"2.0\" ]; then\n            printf '\"C+\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"1.7\" ]; then\n            printf '\"C\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"1.3\" ]; then\n            printf '\"C-\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"1.0\" ]; then\n            printf '\"D+\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"0.7\" ]; then\n            printf '\"D\"\\n'\n        elif [ \"$gpa\"\
    \ -gt \"0.0\" ]; then\n            printf '\"D-\"\\n'\n        else\n        \
    \    printf '\"E\"\\n'\n        fi\n    done\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpud8np07l.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 50: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpud8np07l.sh: line 52: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if [ $(echo \"$1 >= 4.0\" | bc -l) -eq 1 ]; then\n    echo \"A+\"\n  elif [\
    \ $(echo \"$1 >= 3.7\" | bc -l) -eq 1 ]; then\n    echo \"A\"\n  elif [ $(echo\
    \ \"$1 >= 3.3\" | bc -l) -eq 1 ]; then\n    echo \"A-\"\n  elif [ $(echo \"$1\
    \ >= 3.0\" | bc -l) -eq 1 ]; then\n    echo \"B+\"\n  elif [ $(echo \"$1 >= 2.7\"\
    \ | bc -l) -eq 1 ]; then\n    echo \"B\"\n  elif [ $(echo \"$1 >= 2.3\" | bc -l)\
    \ -eq 1 ]; then\n    echo \"B-\"\n  elif [ $(echo \"$1 >= 2.0\" | bc -l) -eq 1\
    \ ]; then\n    echo \"C+\"\n  elif [ $(echo \"$1 >= 1.7\" | bc -l) -eq 1 ]; then\n\
    \    echo \"C\"\n  elif [ $(echo \"$1 >= 1.3\" | bc -l) -eq 1 ]; then\n    echo\
    \ \"C-\"\n  elif [ $(echo \"$1 >= 1.0\" | bc -l) -eq 1 ]; then\n    echo \"D+\"\
    \n  elif [ $(echo \"$1 >= 0.7\" | bc -l) -eq 1 ]; then\n    echo \"D\"\n  elif\
    \ [ $(echo \"$1 >= 0.0\" | bc -l) -eq 1 ]; then\n    echo \"D-\"\n  else\n   \
    \ echo \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C\
    \ A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 27: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmp4n1z75c5.sh: line 49: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    gpas=$1\n    ret=\"\"\n    for gpa in $gpas; do\n        if (( $(echo \"\
    $gpa 4.0\" | awk '{print ($1>=$2)}') )); then\n            ret=\"$ret \\\"A+\\\
    \"\"\n        elif (( $(echo \"$gpa 3.7\" | awk '{print ($1>=$2)}') )); then\n\
    \            ret=\"$ret \\\"A\\\"\"\n        elif (( $(echo \"$gpa 3.3\" | awk\
    \ '{print ($1>=$2)}') )); then\n            ret=\"$ret \\\"A-\\\"\"\n        elif\
    \ (( $(echo \"$gpa 3.0\" | awk '{print ($1>=$2)}') )); then\n            ret=\"\
    $ret \\\"B+\\\"\"\n        elif (( $(echo \"$gpa 2.7\" | awk '{print ($1>=$2)}')\
    \ )); then\n            ret=\"$ret \\\"B\\\"\"\n        elif (( $(echo \"$gpa\
    \ 2.3\" | awk '{print ($1>=$2)}') )); then\n            ret=\"$ret \\\"B-\\\"\"\
    \n        elif (( $(echo \"$gpa 2.0\" | awk '{print ($1>=$2)}') )); then\n   \
    \         ret=\"$ret \\\"C+\\\"\"\n        elif (( $(echo \"$gpa 1.7\" | awk '{print\
    \ ($1>=$2)}') )); then\n            ret=\"$ret \\\"C\\\"\"\n        elif (( $(echo\
    \ \"$gpa 1.3\" | awk '{print ($1>=$2)}') )); then\n            ret=\"$ret \\\"\
    C-\\\"\"\n        elif (( $(echo \"$gpa 1.0\" | awk '{print ($1>=$2)}') )); then\n\
    \            ret=\"$ret \\\"D+\\\"\"\n        elif (( $(echo \"$gpa 0.7\" | awk\
    \ '{print ($1>=$2)}') )); then\n            ret=\"$ret \\\"D\\\"\"\n        elif\
    \ (( $(echo \"$gpa 0.0\" | awk '{print ($1>=$2)}') )); then\n            ret=\"\
    $ret \\\"D-\\\"\"\n        else\n            ret=\"$ret \\\"E\\\"\"\n        fi\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphdflrr9e.sh: line 57: syntax error near unexpected token `}''

    /tmp/tmphdflrr9e.sh: line 57: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ $gpa == 4.0 ]; then\n        echo '\"A+\"'\n    elif\
    \ [ $(bc <<< \"$gpa > 3.7\") -eq 1 ]; then\n        echo '\"A\"'\n    elif [ $(bc\
    \ <<< \"$gpa > 3.3\") -eq 1 ]; then\n        echo '\"A-\"'\n    elif [ $(bc <<<\
    \ \"$gpa > 3.0\") -eq 1 ]; then\n        echo '\"B+\"'\n    elif [ $(bc <<< \"\
    $gpa > 2.7\") -eq 1 ]; then\n        echo '\"B\"'\n    elif [ $(bc <<< \"$gpa\
    \ > 2.3\") -eq 1 ]; then\n        echo '\"B-\"'\n    elif [ $(bc <<< \"$gpa >\
    \ 2.0\") -eq 1 ]; then\n        echo '\"C+\"'\n    elif [ $(bc <<< \"$gpa > 1.7\"\
    ) -eq 1 ]; then\n        echo '\"C\"'\n    elif [ $(bc <<< \"$gpa > 1.3\") -eq\
    \ 1 ]; then\n        echo '\"C-\"'\n    elif [ $(bc <<< \"$gpa > 1.0\") -eq 1\
    \ ]; then\n        echo '\"D+\"'\n    elif [ $(bc <<< \"$gpa > 0.7\") -eq 1 ];\
    \ then\n        echo '\"D\"'\n    elif [ $(bc <<< \"$gpa > 0.0\") -eq 1 ]; then\n\
    \        echo '\"D-\"'\n    else\n        echo '\"E\"'\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv8ucsipc.sh: line 28: [: too many arguments

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpv8ucsipc.sh: line 50: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    #### Fill in your code here ####\n    echo \"Please add your code here\"\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local num=$1\n    local grade\n    local rem=${num%.*}\n    local dec=${num#*.}\n\
    \    if [ $rem -eq 4 ]; then\n        grade=\"A+\"\n    elif [ $rem -eq 3 ]; then\n\
    \        if [ $dec -ge 7 ]; then\n            grade=\"A\"\n        elif [ $dec\
    \ -ge 3 ]; then\n            grade=\"A-\"\n        elif [ $dec -ge 0 ]; then\n\
    \            grade=\"B+\"\n        fi\n    elif [ $rem -eq 2 ]; then\n       \
    \ if [ $dec -ge 7 ]; then\n            grade=\"B\"\n        elif [ $dec -ge 3\
    \ ]; then\n            grade=\"B-\"\n        elif [ $dec -ge 0 ]; then\n     \
    \       grade=\"C+\"\n        fi\n    elif [ $rem -eq 1 ]; then\n        if [\
    \ $dec -ge 7 ]; then\n            grade=\"C\"\n        elif [ $dec -ge 3 ]; then\n\
    \            grade=\"C-\"\n        elif [ $dec -ge 0 ]; then\n            grade=\"\
    D+\"\n        fi\n    elif [ $rem -eq 0 ]; then\n        if [ $dec -ge 7 ]; then\n\
    \            grade=\"D\"\n        elif [ $dec -ge 0 ]; then\n            grade=\"\
    D-\"\n        else\n            grade=\"E\"\n        fi\n    fi\n    echo $grade\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg8kq__bn.sh: line 31: [: too many arguments

    /tmp/tmpg8kq__bn.sh: line 33: [: too many arguments

    /tmp/tmpg8kq__bn.sh: line 41: [: too many arguments

    /tmp/tmpg8kq__bn.sh: line 49: [: too many arguments

    /tmp/tmpg8kq__bn.sh: line 57: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  #TODO: implement this method\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzq073e30.sh: line 28: syntax error near unexpected token `}''

    /tmp/tmpzq073e30.sh: line 28: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ \"$gpa\" -eq 4.0 ]; then\n        echo \"A+\"\n  \
    \  elif [ \"$gpa\" -gt 3.7 ]; then\n        echo \"A\"\n    elif [ \"$gpa\" -gt\
    \ 3.3 ]; then\n        echo \"A-\"\n    elif [ \"$gpa\" -gt 3.0 ]; then\n    \
    \    echo \"B+\"\n    elif [ \"$gpa\" -gt 2.7 ]; then\n        echo \"B\"\n  \
    \  elif [ \"$gpa\" -gt 2.3 ]; then\n        echo \"B-\"\n    elif [ \"$gpa\" -gt\
    \ 2.0 ]; then\n        echo \"C+\"\n    elif [ \"$gpa\" -gt 1.7 ]; then\n    \
    \    echo \"C\"\n    elif [ \"$gpa\" -gt 1.3 ]; then\n        echo \"C-\"\n  \
    \  elif [ \"$gpa\" -gt 1.0 ]; then\n        echo \"D+\"\n    elif [ \"$gpa\" -gt\
    \ 0.7 ]; then\n        echo \"D\"\n    elif [ \"$gpa\" -gt 0.0 ]; then\n     \
    \   echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n  \
    \  numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfxpy1my0.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpfxpy1my0.sh: line 50: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ \"$1\" -ge 4 ]; then\n        echo \"A+\"\n    elif [ \"$1\" -ge 3.7\
    \ ]; then\n        echo \"A\"\n    elif [ \"$1\" -ge 3.3 ]; then\n        echo\
    \ \"A-\"\n    elif [ \"$1\" -ge 3 ]; then\n        echo \"B+\"\n    elif [ \"\
    $1\" -ge 2.7 ]; then\n        echo \"B\"\n    elif [ \"$1\" -ge 2.3 ]; then\n\
    \        echo \"B-\"\n    elif [ \"$1\" -ge 2 ]; then\n        echo \"C+\"\n \
    \   elif [ \"$1\" -ge 1.7 ]; then\n        echo \"C\"\n    elif [ \"$1\" -ge 1.3\
    \ ]; then\n        echo \"C-\"\n    elif [ \"$1\" -ge 1 ]; then\n        echo\
    \ \"D+\"\n    elif [ \"$1\" -ge 0.7 ]; then\n        echo \"D\"\n    elif [ \"\
    $1\" -ge 0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg2i2luha.sh: line 27: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 29: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 31: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 33: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 35: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 37: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 39: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 41: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 43: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 45: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 47: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpg2i2luha.sh: line 49: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local grade_numerical=$1\n  local grade_letter=\"\"\n  if [ $(bc <<< \"$grade_numerical\
    \ >= 4.0\") -eq 1 ]; then\n    grade_letter=\"A+\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 3.7\") -eq 1 ]; then\n    grade_letter=\"A\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 3.3\") -eq 1 ]; then\n    grade_letter=\"A-\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 3.0\") -eq 1 ]; then\n    grade_letter=\"B+\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 2.7\") -eq 1 ]; then\n    grade_letter=\"B\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 2.3\") -eq 1 ]; then\n    grade_letter=\"B-\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 2.0\") -eq 1 ]; then\n    grade_letter=\"C+\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 1.7\") -eq 1 ]; then\n    grade_letter=\"C\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 1.3\") -eq 1 ]; then\n    grade_letter=\"C-\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 1.0\") -eq 1 ]; then\n    grade_letter=\"D+\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 0.7\") -eq 1 ]; then\n    grade_letter=\"D\"\n  elif [ $(bc <<< \"$grade_numerical\
    \ >= 0.0\") -eq 1 ]; then\n    grade_letter=\"D-\"\n  else\n    grade_letter=\"\
    E\"\n  fi\n  echo \"$grade_letter\"\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 29: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 31: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 33: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 35: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 37: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 39: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 41: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 43: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 45: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 47: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 49: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpqzpt5den.sh: line 51: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    echo $(jq --null-input \\\n        --arg GPA \"$1\" \\\n        --argjson\
    \ grade_list '\n            [\n                { \"gpa\": \"4.0\", \"letter\"\
    : \"A+\" },\n                { \"gpa\": \"3.7\", \"letter\": \"A\" },\n      \
    \          { \"gpa\": \"3.3\", \"letter\": \"A-\" },\n                { \"gpa\"\
    : \"3.0\", \"letter\": \"B+\" },\n                { \"gpa\": \"2.7\", \"letter\"\
    : \"B\" },\n                { \"gpa\": \"2.3\", \"letter\": \"B-\" },\n      \
    \          { \"gpa\": \"2.0\", \"letter\": \"C+\" },\n                { \"gpa\"\
    : \"1.7\", \"letter\": \"C\" },\n                { \"gpa\": \"1.3\", \"letter\"\
    : \"C-\" },\n                { \"gpa\": \"1.0\", \"letter\": \"D+\" },\n     \
    \           { \"gpa\": \"0.7\", \"letter\": \"D\" },\n                { \"gpa\"\
    : \"0.0\", \"letter\": \"D-\" },\n                { \"gpa\": \"-1.0\", \"letter\"\
    : \"E\" }\n            ]\n        ' \\\n        --argjson n_grade \"$1\" \\\n\
    \        '\n            [ $grade_list[] |\n                select(.gpa > $n_grade)\
    \ |\n                .letter\n            ] |\n            first\n        '\n\
    \    )\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyd_4rez1.sh: line 54: jq: command not found

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local grade=$1\n    if [ \"${grade}\" -ge \"4.0\" ]; then\n        echo \"\
    A+\"\n    elif [ \"${grade}\" -ge \"3.7\" ]; then\n        echo \"A\"\n    elif\
    \ [ \"${grade}\" -ge \"3.3\" ]; then\n        echo \"A-\"\n    elif [ \"${grade}\"\
    \ -ge \"3.0\" ]; then\n        echo \"B+\"\n    elif [ \"${grade}\" -ge \"2.7\"\
    \ ]; then\n        echo \"B\"\n    elif [ \"${grade}\" -ge \"2.3\" ]; then\n \
    \       echo \"B-\"\n    elif [ \"${grade}\" -ge \"2.0\" ]; then\n        echo\
    \ \"C+\"\n    elif [ \"${grade}\" -ge \"1.7\" ]; then\n        echo \"C\"\n  \
    \  elif [ \"${grade}\" -ge \"1.3\" ]; then\n        echo \"C-\"\n    elif [ \"\
    ${grade}\" -ge \"1.0\" ]; then\n        echo \"D+\"\n    elif [ \"${grade}\" -ge\
    \ \"0.7\" ]; then\n        echo \"D\"\n    elif [ \"${grade}\" -ge \"0.0\" ];\
    \ then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpded3hdzx.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpded3hdzx.sh: line 50: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # check for valid input\n    if [[ $1 -ge 4.0 ]]; then\n        echo A+\n\
    \    elif [[ $1 -ge 3.7 ]]; then\n        echo A\n    elif [[ $1 -ge 3.3 ]]; then\n\
    \        echo A-\n    elif [[ $1 -ge 3.0 ]]; then\n        echo B+\n    elif [[\
    \ $1 -ge 2.7 ]]; then\n        echo B\n    elif [[ $1 -ge 2.3 ]]; then\n     \
    \   echo B-\n    elif [[ $1 -ge 2.0 ]]; then\n        echo C+\n    elif [[ $1\
    \ -ge 1.7 ]]; then\n        echo C\n    elif [[ $1 -ge 1.3 ]]; then\n        echo\
    \ C-\n    elif [[ $1 -ge 1.0 ]]; then\n        echo D+\n    elif [[ $1 -ge 0.7\
    \ ]]; then\n        echo D\n    elif [[ $1 -ge 0.0 ]]; then\n        echo D-\n\
    \    else\n        echo E\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl37ad6mp.sh: line 28: [[: 4.0 3 1.7 2 3.5: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 30: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 32: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 34: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 36: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 38: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 40: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 42: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 44: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 46: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 48: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpl37ad6mp.sh: line 50: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local i=0\n    for i in $1; do\n        if [ $(echo \"$i > 4.0\" | bc) -eq\
    \ 1 ]; then\n            echo \"\\\"A+\\\"\"\n        elif [ $(echo \"$i > 3.7\"\
    \ | bc) -eq 1 ]; then\n            echo \"\\\"A\\\"\"\n        elif [ $(echo \"\
    $i > 3.3\" | bc) -eq 1 ]; then\n            echo \"\\\"A-\\\"\"\n        elif\
    \ [ $(echo \"$i > 3.0\" | bc) -eq 1 ]; then\n            echo \"\\\"B+\\\"\"\n\
    \        elif [ $(echo \"$i > 2.7\" | bc) -eq 1 ]; then\n            echo \"\\\
    \"B\\\"\"\n        elif [ $(echo \"$i > 2.3\" | bc) -eq 1 ]; then\n          \
    \  echo \"\\\"B-\\\"\"\n        elif [ $(echo \"$i > 2.0\" | bc) -eq 1 ]; then\n\
    \            echo \"\\\"C+\\\"\"\n        elif [ $(echo \"$i > 1.7\" | bc) -eq\
    \ 1 ]; then\n            echo \"\\\"C\\\"\"\n        elif [ $(echo \"$i > 1.3\"\
    \ | bc) -eq 1 ]; then\n            echo \"\\\"C-\\\"\"\n        elif [ $(echo\
    \ \"$i > 1.0\" | bc) -eq 1 ]; then\n            echo \"\\\"D+\\\"\"\n        elif\
    \ [ $(echo \"$i > 0.7\" | bc) -eq 1 ]; then\n            echo \"\\\"D\\\"\"\n\
    \        elif [ $(echo \"$i > 0.0\" | bc) -eq 1 ]; then\n            echo \"\\\
    \"D-\\\"\"\n        else\n            echo \"\\\"E\\\"\"\n        fi\n    done\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # your code here!\n    # return the letter grade as a string\n    # Hint:\
    \ use the && and || operators to test the ranges\n    # Hint: to test the ranges,\
    \ use if-else statements!\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0cjpsekb.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmp0cjpsekb.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0) echo \"A+\";;\n        3.7) echo \"A\";;\n     \
    \   3.3) echo \"A-\";;\n        3.0) echo \"B+\";;\n        2.7) echo \"B\";;\n\
    \        2.3) echo \"B-\";;\n        2.0) echo \"C+\";;\n        1.7) echo \"\
    C\";;\n        1.3) echo \"C-\";;\n        1.0) echo \"D+\";;\n        0.7) echo\
    \ \"D\";;\n        0.0) echo \"D-\";;\n        *) echo \"E\";;\n    esac\n}\n\n\
    candidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # Your code here\n    # Example how to use case-esac\n    # https://www.cyberciti.biz/faq/bash-shell-case-esac-function/\n\
    \    case $1 in\n        *) \n        ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    gpa=$1\n    if [ $gpa -gt 3.7 ]; then\n        echo \"A+\"\n    elif [ $gpa\
    \ -gt 3.3 ]; then\n        echo \"A\"\n    elif [ $gpa -gt 3.0 ]; then\n     \
    \   echo \"A-\"\n    elif [ $gpa -gt 2.7 ]; then\n        echo \"B+\"\n    elif\
    \ [ $gpa -gt 2.3 ]; then\n        echo \"B\"\n    elif [ $gpa -gt 2.0 ]; then\n\
    \        echo \"B-\"\n    elif [ $gpa -gt 1.7 ]; then\n        echo \"C+\"\n \
    \   elif [ $gpa -gt 1.3 ]; then\n        echo \"C\"\n    elif [ $gpa -gt 1.0 ];\
    \ then\n        echo \"C-\"\n    elif [ $gpa -gt 0.7 ]; then\n        echo \"\
    D+\"\n    elif [ $gpa -gt 0.0 ]; then\n        echo \"D\"\n    elif [ $gpa -gt\
    \ 0.0 ]; then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\n\
    candidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0a_uvd_s.sh: line 28: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 30: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 32: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 34: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 36: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 38: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 40: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 42: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 44: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 46: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 48: [: too many arguments

    /tmp/tmp0a_uvd_s.sh: line 50: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if (( $(echo \"$1 >= 4.0\" | bc -l) )); then\n        echo \"A+\"\n    elif\
    \ (( $(echo \"$1 >= 3.7\" | bc -l) )); then\n        echo \"A\"\n    elif (( $(echo\
    \ \"$1 >= 3.3\" | bc -l) )); then\n        echo \"A-\"\n    elif (( $(echo \"\
    $1 >= 3.0\" | bc -l) )); then\n        echo \"B+\"\n    elif (( $(echo \"$1 >=\
    \ 2.7\" | bc -l) )); then\n        echo \"B\"\n    elif (( $(echo \"$1 >= 2.3\"\
    \ | bc -l) )); then\n        echo \"B-\"\n    elif (( $(echo \"$1 >= 2.0\" | bc\
    \ -l) )); then\n        echo \"C+\"\n    elif (( $(echo \"$1 >= 1.7\" | bc -l)\
    \ )); then\n        echo \"C\"\n    elif (( $(echo \"$1 >= 1.3\" | bc -l) ));\
    \ then\n        echo \"C-\"\n    elif (( $(echo \"$1 >= 1.0\" | bc -l) )); then\n\
    \        echo \"D+\"\n    elif (( $(echo \"$1 >= 0.7\" | bc -l) )); then\n   \
    \     echo \"D\"\n    elif (( $(echo \"$1 >= 0.0\" | bc -l) )); then\n       \
    \ echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  gpa=$1\n  if (( $(echo \"$gpa >= 4.0\" | bc -l) )); then\n    printf \"A+\"\
    \n  elif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n    printf \"A\"\n  elif\
    \ (( $(echo \"$gpa >= 3.3\" | bc -l) )); then\n    printf \"A-\"\n  elif (( $(echo\
    \ \"$gpa >= 3.0\" | bc -l) )); then\n    printf \"B+\"\n  elif (( $(echo \"$gpa\
    \ >= 2.7\" | bc -l) )); then\n    printf \"B\"\n  elif (( $(echo \"$gpa >= 2.3\"\
    \ | bc -l) )); then\n    printf \"B-\"\n  elif (( $(echo \"$gpa >= 2.0\" | bc\
    \ -l) )); then\n    printf \"C+\"\n  elif (( $(echo \"$gpa >= 1.7\" | bc -l) ));\
    \ then\n    printf \"C\"\n  elif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n\
    \    printf \"C-\"\n  elif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n    printf\
    \ \"D+\"\n  elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n    printf \"D\"\
    \n  elif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n    printf \"D-\"\n  else\n\
    \    printf \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0)\n            echo \"A+\"\n            ;;\n     \
    \   3.7)\n            echo \"A\"\n            ;;\n        3.3)\n            echo\
    \ \"A-\"\n            ;;\n        3.0)\n            echo \"B+\"\n            ;;\n\
    \        2.7)\n            echo \"B\"\n            ;;\n        2.3)\n        \
    \    echo \"B-\"\n            ;;\n        2.0)\n            echo \"C+\"\n    \
    \        ;;\n        1.7)\n            echo \"C\"\n            ;;\n        1.3)\n\
    \            echo \"C-\"\n            ;;\n        1.0)\n            echo \"D+\"\
    \n            ;;\n        0.7)\n            echo \"D\"\n            ;;\n     \
    \   0.0)\n            echo \"D-\"\n            ;;\n        *)\n            echo\
    \ \"E\"\n            ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n    4.0)\n        echo '\"A+\"'\n        ;;\n    3.7)\n     \
    \   echo '\"A\"'\n        ;;\n    3.3)\n        echo '\"A-\"'\n        ;;\n  \
    \  3.0)\n        echo '\"B+\"'\n        ;;\n    2.7)\n        echo '\"B\"'\n \
    \       ;;\n    2.3)\n        echo '\"B-\"'\n        ;;\n    2.0)\n        echo\
    \ '\"C+\"'\n        ;;\n    1.7)\n        echo '\"C\"'\n        ;;\n    1.3)\n\
    \        echo '\"C-\"'\n        ;;\n    1.0)\n        echo '\"D+\"'\n        ;;\n\
    \    0.7)\n        echo '\"D\"'\n        ;;\n    0.0)\n        echo '\"D-\"'\n\
    \        ;;\n    *)\n        echo '\"E\"'\n        ;;\n    esac\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $(echo \"$1\" | cut -d '.' -f 1) in\n    4) letter_grade=\"A+\" ;;\n \
    \   3) if [ \"$1\" -ge 3.7 ]; then\n         letter_grade=\"A\"\n       elif [\
    \ \"$1\" -ge 3.3 ]; then\n         letter_grade=\"A-\"\n       elif [ \"$1\" -ge\
    \ 3.0 ]; then\n         letter_grade=\"B+\"\n       elif [ \"$1\" -ge 2.7 ]; then\n\
    \         letter_grade=\"B\"\n       elif [ \"$1\" -ge 2.3 ]; then\n         letter_grade=\"\
    B-\"\n       else\n         letter_grade=\"C+\"\n       fi ;;\n    2) if [ \"\
    $1\" -ge 2.7 ]; then\n         letter_grade=\"B\"\n       elif [ \"$1\" -ge 2.3\
    \ ]; then\n         letter_grade=\"B-\"\n       elif [ \"$1\" -ge 2.0 ]; then\n\
    \         letter_grade=\"C+\"\n       elif [ \"$1\" -ge 1.7 ]; then\n        \
    \ letter_grade=\"C\"\n       elif [ \"$1\" -ge 1.3 ]; then\n         letter_grade=\"\
    C-\"\n       else\n         letter_grade=\"D+\"\n       fi ;;\n    1) if [ \"\
    $1\" -ge 1.7 ]; then\n         letter_grade=\"C\"\n       elif [ \"$1\" -ge 1.3\
    \ ]; then\n         letter_grade=\"C-\"\n       elif [ \"$1\" -ge 1.0 ]; then\n\
    \         letter_grade=\"D+\"\n       elif [ \"$1\" -ge 0.7 ]; then\n        \
    \ letter_grade=\"D\"\n       else\n         letter_grade=\"D-\"\n       fi ;;\n\
    \    0) if [ \"$1\" -gt 0 ]; then\n         letter_grade=\"D+\"\n       elif [\
    \ \"$1\" -eq 0 ]; then\n         letter_grade=\"D-\"\n       else\n         letter_grade=\"\
    E\"\n       fi ;;\n  esac\n  echo \"$letter_grade\"\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local num_grade=$1\n    case $num_grade in\n        4.0) echo '\"A+\"';;\n\
    \        3.7) echo '\"A\"';;\n        3.3) echo '\"A-\"';;\n        3.0) echo\
    \ '\"B+\"';;\n        2.7) echo '\"B\"';;\n        2.3) echo '\"B-\"';;\n    \
    \    2.0) echo '\"C+\"';;\n        1.7) echo '\"C\"';;\n        1.3) echo '\"\
    C-\"';;\n        1.0) echo '\"D+\"';;\n        0.7) echo '\"D\"';;\n        0.0)\
    \ echo '\"D-\"';;\n        *) echo '\"E\"';;\n    esac\n}\n\ncandidate() {\n \
    \   numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    num=$1\n    if [ \"$num\" -ge 3.7 ]; then\n        letter=\"A+\"\n    elif\
    \ [ \"$num\" -ge 3.3 ]; then\n        letter=\"A\"\n    elif [ \"$num\" -ge 3.0\
    \ ]; then\n        letter=\"A-\"\n    elif [ \"$num\" -ge 2.7 ]; then\n      \
    \  letter=\"B+\"\n    elif [ \"$num\" -ge 2.3 ]; then\n        letter=\"B\"\n\
    \    elif [ \"$num\" -ge 2.0 ]; then\n        letter=\"B-\"\n    elif [ \"$num\"\
    \ -ge 1.7 ]; then\n        letter=\"C+\"\n    elif [ \"$num\" -ge 1.3 ]; then\n\
    \        letter=\"C\"\n    elif [ \"$num\" -ge 1.0 ]; then\n        letter=\"\
    C-\"\n    elif [ \"$num\" -ge 0.7 ]; then\n        letter=\"D+\"\n    elif [ \"\
    $num\" -ge 0.0 ]; then\n        letter=\"D\"\n    else\n        letter=\"E\"\n\
    \    fi\n    echo \"$letter\"\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpo5vt2vv3.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpo5vt2vv3.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $1 in\n    4.0) echo \"A+\" ;;\n    3.7) echo \"A\" ;;\n    3.3) echo\
    \ \"A-\" ;;\n    3.0) echo \"B+\" ;;\n    2.7) echo \"B\" ;;\n    2.3) echo \"\
    B-\" ;;\n    2.0) echo \"C+\" ;;\n    1.7) echo \"C\" ;;\n    1.3) echo \"C-\"\
    \ ;;\n    1.0) echo \"D+\" ;;\n    0.7) echo \"D\" ;;\n    0.0) echo \"D-\" ;;\n\
    \    *) echo \"E\" ;;\n  esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024101
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # return the letter grade corresponding to the numerical grade\n    if ((\
    \ $1 > 3.7 ))\n    then\n        echo \"A+\"\n    elif (( $1 > 3.3 ))\n    then\n\
    \        echo \"A\"\n    elif (( $1 > 3.0 ))\n    then\n        echo \"A-\"\n\
    \    elif (( $1 > 2.7 ))\n    then\n        echo \"B+\"\n    elif (( $1 > 2.3\
    \ ))\n    then\n        echo \"B\"\n    elif (( $1 > 2.0 ))\n    then\n      \
    \  echo \"B-\"\n    elif (( $1 > 1.7 ))\n    then\n        echo \"C+\"\n    elif\
    \ (( $1 > 1.3 ))\n    then\n        echo \"C\"\n    elif (( $1 > 1.0 ))\n    then\n\
    \        echo \"C-\"\n    elif (( $1 > 0.7 ))\n    then\n        echo \"D+\"\n\
    \    elif (( $1 > 0.0 ))\n    then\n        echo \"D\"\n    elif (( $1 == 0.0\
    \ ))\n    then\n        echo \"D-\"\n    else\n        echo \"E\"\n    fi\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6j0nswjb.sh: line 28: ((: 4.0 3 1.7 2 3.5 > 3.7 : syntax error:
    invalid arithmetic operator (error token is ".0 3 1.7 2 3.5 > 3.7 ")

    /tmp/tmp6j0nswjb.sh: line 31: ((: 4.0 3 1.7 2 3.5 > 3.3 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 3.3 ")

    /tmp/tmp6j0nswjb.sh: line 34: ((: 4.0 3 1.7 2 3.5 > 3.0 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 3.0 ")

    /tmp/tmp6j0nswjb.sh: line 37: ((: 4.0 3 1.7 2 3.5 > 2.7 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 2.7 ")

    /tmp/tmp6j0nswjb.sh: line 40: ((: 4.0 3 1.7 2 3.5 > 2.3 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 2.3 ")

    /tmp/tmp6j0nswjb.sh: line 43: ((: 4.0 3 1.7 2 3.5 > 2.0 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 2.0 ")

    /tmp/tmp6j0nswjb.sh: line 46: ((: 4.0 3 1.7 2 3.5 > 1.7 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 1.7 ")

    /tmp/tmp6j0nswjb.sh: line 49: ((: 4.0 3 1.7 2 3.5 > 1.3 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 1.3 ")

    /tmp/tmp6j0nswjb.sh: line 52: ((: 4.0 3 1.7 2 3.5 > 1.0 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 1.0 ")

    /tmp/tmp6j0nswjb.sh: line 55: ((: 4.0 3 1.7 2 3.5 > 0.7 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 0.7 ")

    /tmp/tmp6j0nswjb.sh: line 58: ((: 4.0 3 1.7 2 3.5 > 0.0 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 > 0.0 ")

    /tmp/tmp6j0nswjb.sh: line 61: ((: 4.0 3 1.7 2 3.5 == 0.0 : syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5 == 0.0 ")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0) echo \"A+\";;\n        3.7) echo \"A\";;\n     \
    \   3.3) echo \"A-\";;\n        3.0) echo \"B+\";;\n        2.7) echo \"B\";;\n\
    \        2.3) echo \"B-\";;\n        2.0) echo \"C+\";;\n        1.7) echo \"\
    C\";;\n        1.3) echo \"C-\";;\n        1.0) echo \"D+\";;\n        0.7) echo\
    \ \"D\";;\n        0.0) echo \"D-\";;\n        *) echo \"E\";;\n    esac\n}\n\n\
    candidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  gpa=$1\n  if (( $(echo \"$gpa >= 4.0\" | bc -l) )); then\n    echo \"A+\"\n\
    \  elif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n    echo \"A\"\n  elif ((\
    \ $(echo \"$gpa >= 3.3\" | bc -l) )); then\n    echo \"A-\"\n  elif (( $(echo\
    \ \"$gpa >= 3.0\" | bc -l) )); then\n    echo \"B+\"\n  elif (( $(echo \"$gpa\
    \ >= 2.7\" | bc -l) )); then\n    echo \"B\"\n  elif (( $(echo \"$gpa >= 2.3\"\
    \ | bc -l) )); then\n    echo \"B-\"\n  elif (( $(echo \"$gpa >= 2.0\" | bc -l)\
    \ )); then\n    echo \"C+\"\n  elif (( $(echo \"$gpa >= 1.7\" | bc -l) )); then\n\
    \    echo \"C\"\n  elif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then\n    echo\
    \ \"C-\"\n  elif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n    echo \"D+\"\n\
    \  elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n    echo \"D\"\n  elif ((\
    \ $(echo \"$gpa >= 0.0\" | bc -l) )); then\n    echo \"D-\"\n  else\n    echo\
    \ \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ $1 -ge 4 ]; then\n        echo '\"A+\"'\n    elif [ $1 -ge 3.7 ]; then\n\
    \        echo '\"A\"'\n    elif [ $1 -ge 3.3 ]; then\n        echo '\"A-\"'\n\
    \    elif [ $1 -ge 3 ]; then\n        echo '\"B+\"'\n    elif [ $1 -ge 2.7 ];\
    \ then\n        echo '\"B\"'\n    elif [ $1 -ge 2.3 ]; then\n        echo '\"\
    B-\"'\n    elif [ $1 -ge 2 ]; then\n        echo '\"C+\"'\n    elif [ $1 -ge 1.7\
    \ ]; then\n        echo '\"C\"'\n    elif [ $1 -ge 1.3 ]; then\n        echo '\"\
    C-\"'\n    elif [ $1 -ge 1 ]; then\n        echo '\"D+\"'\n    elif [ $1 -ge 0.7\
    \ ]; then\n        echo '\"D\"'\n    elif [ $1 -ge 0 ]; then\n        echo '\"\
    D-\"'\n    else\n        echo '\"E\"'\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp51m7wv2c.sh: line 27: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 29: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 31: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 33: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 35: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 37: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 39: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 41: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 43: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 45: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 47: [: too many arguments

    /tmp/tmp51m7wv2c.sh: line 49: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local letter=\"$(echo $1 | awk '{print substr($0, 1, 2)}')\"\n  if [[ $letter\
    \ == \"A+\" ]]; then\n    echo \"4.0\"\n  elif [[ $letter == \"A-\" ]]; then\n\
    \    echo \"3.7\"\n  elif [[ $letter == \"B+\" ]]; then\n    echo \"3.3\"\n  elif\
    \ [[ $letter == \"B-\" ]]; then\n    echo \"3.0\"\n  elif [[ $letter == \"C+\"\
    \ ]]; then\n    echo \"2.7\"\n  elif [[ $letter == \"C-\" ]]; then\n    echo \"\
    2.3\"\n  elif [[ $letter == \"D+\" ]]; then\n    echo \"2.0\"\n  elif [[ $letter\
    \ == \"D-\" ]]; then\n    echo \"1.7\"\n  elif [[ $letter == \"F\" ]]; then\n\
    \    echo \"1.3\"\n  elif [[ $letter == \"E\" ]]; then\n    echo \"1.0\"\n  fi\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  if (( $(echo \"$1 >= 4.0\" | bc -l) )); then\n    echo A+\n  elif (( $(echo\
    \ \"$1 >= 3.7\" | bc -l) )); then\n    echo A\n  elif (( $(echo \"$1 >= 3.3\"\
    \ | bc -l) )); then\n    echo A-\n  elif (( $(echo \"$1 >= 3.0\" | bc -l) ));\
    \ then\n    echo B+\n  elif (( $(echo \"$1 >= 2.7\" | bc -l) )); then\n    echo\
    \ B\n  elif (( $(echo \"$1 >= 2.3\" | bc -l) )); then\n    echo B-\n  elif ((\
    \ $(echo \"$1 >= 2.0\" | bc -l) )); then\n    echo C+\n  elif (( $(echo \"$1 >=\
    \ 1.7\" | bc -l) )); then\n    echo C\n  elif (( $(echo \"$1 >= 1.3\" | bc -l)\
    \ )); then\n    echo C-\n  elif (( $(echo \"$1 >= 1.0\" | bc -l) )); then\n  \
    \  echo D+\n  elif (( $(echo \"$1 >= 0.7\" | bc -l) )); then\n    echo D\n  elif\
    \ (( $(echo \"$1 >= 0.0\" | bc -l) )); then\n    echo D-\n  else\n    echo E\n\
    \  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  grade=\"$1\"\n  if (( $(echo \"${grade} < 0\" | bc -l) )); then\n    echo '\"\
    E\"'\n  elif (( $(echo \"${grade} < 0.7\" | bc -l) )); then\n    echo '\"D-\"\
    '\n  elif (( $(echo \"${grade} < 1.0\" | bc -l) )); then\n    echo '\"D\"'\n \
    \ elif (( $(echo \"${grade} < 1.3\" | bc -l) )); then\n    echo '\"D+\"'\n  elif\
    \ (( $(echo \"${grade} < 1.7\" | bc -l) )); then\n    echo '\"C-\"'\n  elif ((\
    \ $(echo \"${grade} < 2.0\" | bc -l) )); then\n    echo '\"C\"'\n  elif (( $(echo\
    \ \"${grade} < 2.3\" | bc -l) )); then\n    echo '\"C+\"'\n  elif (( $(echo \"\
    ${grade} < 2.7\" | bc -l) )); then\n    echo '\"B-\"'\n  elif (( $(echo \"${grade}\
    \ < 3.0\" | bc -l) )); then\n    echo '\"B\"'\n  elif (( $(echo \"${grade} < 3.3\"\
    \ | bc -l) )); then\n    echo '\"B+\"'\n  elif (( $(echo \"${grade} < 3.7\" |\
    \ bc -l) )); then\n    echo '\"A-\"'\n  elif (( $(echo \"${grade} < 4.0\" | bc\
    \ -l) )); then\n    echo '\"A\"'\n  else\n    echo '\"A+\"'\n  fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tcase $1 in\n\t4.0) echo '\"A+\"';;\n\t*) if [ $1 -gt 3.7 ]; then echo '\"A\"\
    ';\n\t\telif [ $1 -gt 3.3 ]; then echo '\"A-\"';\n\t\telif [ $1 -gt 3.0 ]; then\
    \ echo '\"B+\"';\n\t\telif [ $1 -gt 2.7 ]; then echo '\"B\"';\n\t\telif [ $1 -gt\
    \ 2.3 ]; then echo '\"B-\"';\n\t\telif [ $1 -gt 2.0 ]; then echo '\"C+\"';\n\t\
    \telif [ $1 -gt 1.7 ]; then echo '\"C\"';\n\t\telif [ $1 -gt 1.3 ]; then echo\
    \ '\"C-\"';\n\t\telif [ $1 -gt 1.0 ]; then echo '\"D+\"';\n\t\telif [ $1 -gt 0.7\
    \ ]; then echo '\"D\"';\n\t\telif [ $1 -gt 0.0 ]; then echo '\"D-\"';\n\t\telse\
    \ echo '\"E\"';\n\t\tfi\n\t\t;;\n\tesac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplno6cygk.sh: line 29: [: too many arguments

    /tmp/tmplno6cygk.sh: line 30: [: too many arguments

    /tmp/tmplno6cygk.sh: line 31: [: too many arguments

    /tmp/tmplno6cygk.sh: line 32: [: too many arguments

    /tmp/tmplno6cygk.sh: line 33: [: too many arguments

    /tmp/tmplno6cygk.sh: line 34: [: too many arguments

    /tmp/tmplno6cygk.sh: line 35: [: too many arguments

    /tmp/tmplno6cygk.sh: line 36: [: too many arguments

    /tmp/tmplno6cygk.sh: line 37: [: too many arguments

    /tmp/tmplno6cygk.sh: line 38: [: too many arguments

    /tmp/tmplno6cygk.sh: line 39: [: too many arguments

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # Enter code here\n    # replace \"pass\" with your code\n    pass\n}\n\n\
    candidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp30_db2pd.sh: line 29: pass: command not found

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \        if (( $(echo \"$1 < 4.0\" | bc -l) )); then\n                letter_grade=\"\
    A+\"\n        elif (( $(echo \"$1 < 3.7\" | bc -l) )); then\n                letter_grade=\"\
    A\"\n        elif (( $(echo \"$1 < 3.3\" | bc -l) )); then\n                letter_grade=\"\
    A-\"\n        elif (( $(echo \"$1 < 3.0\" | bc -l) )); then\n                letter_grade=\"\
    B+\"\n        elif (( $(echo \"$1 < 2.7\" | bc -l) )); then\n                letter_grade=\"\
    B\"\n        elif (( $(echo \"$1 < 2.3\" | bc -l) )); then\n                letter_grade=\"\
    B-\"\n        elif (( $(echo \"$1 < 2.0\" | bc -l) )); then\n                letter_grade=\"\
    C+\"\n        elif (( $(echo \"$1 < 1.7\" | bc -l) )); then\n                letter_grade=\"\
    C\"\n        elif (( $(echo \"$1 < 1.3\" | bc -l) )); then\n                letter_grade=\"\
    C-\"\n        elif (( $(echo \"$1 < 1.0\" | bc -l) )); then\n                letter_grade=\"\
    D+\"\n        elif (( $(echo \"$1 < 0.7\" | bc -l) )); then\n                letter_grade=\"\
    D\"\n        elif (( $(echo \"$1 < 0.0\" | bc -l) )); then\n                letter_grade=\"\
    D-\"\n        else\n                letter_grade=\"E\"\n        fi\n        echo\
    \ \"$letter_grade\"\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C\
    \ A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  grade=$1\n\n  if (( $(echo \"$grade > 4.0\" | bc -l) )); then\n    echo \"\
    A+\"\n  elif (( $(echo \"$grade > 3.7\" | bc -l) )); then\n    echo \"A\"\n  elif\
    \ (( $(echo \"$grade > 3.3\" | bc -l) )); then\n    echo \"A-\"\n  elif (( $(echo\
    \ \"$grade > 3.0\" | bc -l) )); then\n    echo \"B+\"\n  elif (( $(echo \"$grade\
    \ > 2.7\" | bc -l) )); then\n    echo \"B\"\n  elif (( $(echo \"$grade > 2.3\"\
    \ | bc -l) )); then\n    echo \"B-\"\n  elif (( $(echo \"$grade > 2.0\" | bc -l)\
    \ )); then\n    echo \"C+\"\n  elif (( $(echo \"$grade > 1.7\" | bc -l) )); then\n\
    \    echo \"C\"\n  elif (( $(echo \"$grade > 1.3\" | bc -l) )); then\n    echo\
    \ \"C-\"\n  elif (( $(echo \"$grade > 1.0\" | bc -l) )); then\n    echo \"D+\"\
    \n  elif (( $(echo \"$grade > 0.7\" | bc -l) )); then\n    echo \"D\"\n  elif\
    \ (( $(echo \"$grade > 0.0\" | bc -l) )); then\n    echo \"D-\"\n  else\n    echo\
    \ \"E\"\n  fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case \"$1\" in\n        4.0) echo \"A+\" ;;\n        3.7) echo \"A\" ;;\n\
    \        3.3) echo \"A-\" ;;\n        3.0) echo \"B+\" ;;\n        2.7) echo \"\
    B\" ;;\n        2.3) echo \"B-\" ;;\n        2.0) echo \"C+\" ;;\n        1.7)\
    \ echo \"C\" ;;\n        1.3) echo \"C-\" ;;\n        1.0) echo \"D+\" ;;\n  \
    \      0.7) echo \"D\" ;;\n        0.0) echo \"D-\" ;;\n        -1) echo \"E\"\
    \ ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [[ $(echo $1 '>=' 4.0 | bc -l) -eq 1 ]]; then\n        echo \"A+\"\n \
    \   elif [[ $(echo $1 '>=' 3.7 | bc -l) -eq 1 ]]; then\n        echo \"A\"\n \
    \   elif [[ $(echo $1 '>=' 3.3 | bc -l) -eq 1 ]]; then\n        echo \"A-\"\n\
    \    elif [[ $(echo $1 '>=' 3.0 | bc -l) -eq 1 ]]; then\n        echo \"B+\"\n\
    \    elif [[ $(echo $1 '>=' 2.7 | bc -l) -eq 1 ]]; then\n        echo \"B\"\n\
    \    elif [[ $(echo $1 '>=' 2.3 | bc -l) -eq 1 ]]; then\n        echo \"B-\"\n\
    \    elif [[ $(echo $1 '>=' 2.0 | bc -l) -eq 1 ]]; then\n        echo \"C+\"\n\
    \    elif [[ $(echo $1 '>=' 1.7 | bc -l) -eq 1 ]]; then\n        echo \"C\"\n\
    \    elif [[ $(echo $1 '>=' 1.3 | bc -l) -eq 1 ]]; then\n        echo \"C-\"\n\
    \    elif [[ $(echo $1 '>=' 1.0 | bc -l) -eq 1 ]]; then\n        echo \"D+\"\n\
    \    elif [[ $(echo $1 '>=' 0.7 | bc -l) -eq 1 ]]; then\n        echo \"D\"\n\
    \    elif [[ $(echo $1 '>=' 0.0 | bc -l) -eq 1 ]]; then\n        echo \"D-\"\n\
    \    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: -1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # replace # with numerical grades\n  sed 's/#/10/g' | sed 's/A+/40/g' | sed\
    \ 's/A/37/g' | sed 's/A-/33/g' | sed 's/B+/30/g' | sed 's/B/27/g' | sed 's/B-/23/g'\
    \ | sed 's/C+/20/g' | sed 's/C/17/g' | sed 's/C-/13/g' | sed 's/D+/10/g' | sed\
    \ 's/D/7/g' | sed 's/D-/3/g' | sed 's/E/0/g' | sed 's/#/10/g'\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=37 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=33 encoding='utf-8'>
  timestamp: 1660024107
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tlocal gpa=$1\n\tif (( $(echo \"$gpa >= 4.0\" | bc -l) )); then\n\t\techo '\"\
    A+\"'\n\telif (( $(echo \"$gpa >= 3.7\" | bc -l) )); then\n\t\techo '\"A\"'\n\t\
    elif (( $(echo \"$gpa >= 3.3\" | bc -l) )); then\n\t\techo '\"A-\"'\n\telif ((\
    \ $(echo \"$gpa >= 3.0\" | bc -l) )); then\n\t\techo '\"B+\"'\n\telif (( $(echo\
    \ \"$gpa >= 2.7\" | bc -l) )); then\n\t\techo '\"B\"'\n\telif (( $(echo \"$gpa\
    \ >= 2.3\" | bc -l) )); then\n\t\techo '\"B-\"'\n\telif (( $(echo \"$gpa >= 2.0\"\
    \ | bc -l) )); then\n\t\techo '\"C+\"'\n\telif (( $(echo \"$gpa >= 1.7\" | bc\
    \ -l) )); then\n\t\techo '\"C\"'\n\telif (( $(echo \"$gpa >= 1.3\" | bc -l) ));\
    \ then\n\t\techo '\"C-\"'\n\telif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then\n\
    \t\techo '\"D+\"'\n\telif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then\n\t\techo\
    \ '\"D\"'\n\telif (( $(echo \"$gpa >= 0.0\" | bc -l) )); then\n\t\techo '\"D-\"\
    '\n\telse\n\t\techo '\"E\"'\n\tfi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  for gpa in $1; do\n    case $gpa in\n      4.0)\n        echo \"A+\"\n    \
    \    ;;\n      [3-3].[7-9])\n        echo \"A\"\n        ;;\n      [3-3].[3-6])\n\
    \        echo \"A-\"\n        ;;\n      [3-3].[0-2])\n        echo \"B+\"\n  \
    \      ;;\n      [2-2].[7-9])\n        echo \"B\"\n        ;;\n      [2-2].[3-6])\n\
    \        echo \"B-\"\n        ;;\n      [2-2].[0-2])\n        echo \"C+\"\n  \
    \      ;;\n      [1-1].[7-9])\n        echo \"C\"\n        ;;\n      [1-1].[3-6])\n\
    \        echo \"C-\"\n        ;;\n      [1-1].[0-2])\n        echo \"D+\"\n  \
    \      ;;\n      [0-0].[7-9])\n        echo \"D\"\n        ;;\n      [0-0].[0-6])\n\
    \        echo \"D-\"\n        ;;\n      [0-0].[0-0])\n        echo \"E\"\n   \
    \     ;;\n    esac\n  done\n}\n\ncandidate() {\n    numerical_letter_grade \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"\
    A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    echo \"$@\" | while read gpa; do\n        if (( $(echo \"$gpa >= 4.0\" |\
    \ bc -l) )); then echo '\"A+\"';\n        elif (( $(echo \"$gpa >= 3.7\" | bc\
    \ -l) )); then echo '\"A\"';\n        elif (( $(echo \"$gpa >= 3.3\" | bc -l)\
    \ )); then echo '\"A-\"';\n        elif (( $(echo \"$gpa >= 3.0\" | bc -l) ));\
    \ then echo '\"B+\"';\n        elif (( $(echo \"$gpa >= 2.7\" | bc -l) )); then\
    \ echo '\"B\"';\n        elif (( $(echo \"$gpa >= 2.3\" | bc -l) )); then echo\
    \ '\"B-\"';\n        elif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then echo '\"\
    C+\"';\n        elif (( $(echo \"$gpa >= 1.7\" | bc -l) )); then echo '\"C\"';\n\
    \        elif (( $(echo \"$gpa >= 1.3\" | bc -l) )); then echo '\"C-\"';\n   \
    \     elif (( $(echo \"$gpa >= 1.0\" | bc -l) )); then echo '\"D+\"';\n      \
    \  elif (( $(echo \"$gpa >= 0.7\" | bc -l) )); then echo '\"D\"';\n        elif\
    \ (( $(echo \"$gpa >= 0.0\" | bc -l) )); then echo '\"D-\"';\n        else echo\
    \ '\"E\"';\n        fi\n    done\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [ \"$1\" -gt 4.0 ]; then\n        echo '\"A+\"'\n    elif [ \"$1\" -ge\
    \ 3.7 ]; then\n        echo '\"A\"'\n    elif [ \"$1\" -ge 3.3 ]; then\n     \
    \   echo '\"A-\"'\n    elif [ \"$1\" -ge 3.0 ]; then\n        echo '\"B+\"'\n\
    \    elif [ \"$1\" -ge 2.7 ]; then\n        echo '\"B\"'\n    elif [ \"$1\" -ge\
    \ 2.3 ]; then\n        echo '\"B-\"'\n    elif [ \"$1\" -ge 2.0 ]; then\n    \
    \    echo '\"C+\"'\n    elif [ \"$1\" -ge 1.7 ]; then\n        echo '\"C\"'\n\
    \    elif [ \"$1\" -ge 1.3 ]; then\n        echo '\"C-\"'\n    elif [ \"$1\" -ge\
    \ 1.0 ]; then\n        echo '\"D+\"'\n    elif [ \"$1\" -ge 0.7 ]; then\n    \
    \    echo '\"D\"'\n    elif [ \"$1\" -ge 0.0 ]; then\n        echo '\"D-\"'\n\
    \    else\n        echo '\"E\"'\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpux9caxm9.sh: line 27: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 29: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 31: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 33: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 35: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 37: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 39: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 41: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 43: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 45: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 47: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpux9caxm9.sh: line 49: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # Convert string to array using space as delimiter\n  letter_grades=()\n  while\
    \ IFS=' ' read -ra split; do\n    for i in \"${split[@]}\"; do\n      letter_grades+=(\"\
    $i\")\n    done\n  done <<< \"$1\"\n  # Letter grade your algorithm\n  final_letter_grades=()\n\
    \  for num in \"${letter_grades[@]}\"; do\n    if [ $(echo \"$num >= 4.0\" | bc\
    \ -l) -eq 1 ]; then\n      final_letter_grades+=('\"A+\"')\n    elif [ $(echo\
    \ \"$num >= 3.7\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"A\"')\n\
    \    elif [ $(echo \"$num >= 3.3\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    A-\"')\n    elif [ $(echo \"$num >= 3.0\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    B+\"')\n    elif [ $(echo \"$num >= 2.7\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    B\"')\n    elif [ $(echo \"$num >= 2.3\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    B-\"')\n    elif [ $(echo \"$num >= 2.0\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    C+\"')\n    elif [ $(echo \"$num >= 1.7\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    C\"')\n    elif [ $(echo \"$num >= 1.3\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    C-\"')\n    elif [ $(echo \"$num >= 1.0\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    D+\"')\n    elif [ $(echo \"$num >= 0.7\" | bc -l) -eq 1 ]; then\n      final_letter_grades+=('\"\
    D\"')\n    elif [\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\"\
    \ ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"\
    D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3\
    \ 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E\
    \ D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp7hm6hbk5.sh: line 60: syntax error near unexpected token `}''

    /tmp/tmp7hm6hbk5.sh: line 60: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $1 in\n    4.0) echo '\"A+\"' ;;\n    3.7) echo '\"A\"' ;;\n    3.3) echo\
    \ '\"A-\"' ;;\n    3.0) echo '\"B+\"' ;;\n    2.7) echo '\"B\"' ;;\n    2.3) echo\
    \ '\"B-\"' ;;\n    2.0) echo '\"C+\"' ;;\n    1.7) echo '\"C\"' ;;\n    1.3) echo\
    \ '\"C-\"' ;;\n    1.0) echo '\"D+\"' ;;\n    0.7) echo '\"D\"' ;;\n    0.0) echo\
    \ '\"D-\"' ;;\n    *) echo '\"E\"' ;;\n  esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n        4.0) echo '\"A+\"' ;;\n        3.7) echo '\"A\"' ;;\n\
    \        3.3) echo '\"A-\"' ;;\n        3.0) echo '\"B+\"' ;;\n        2.7) echo\
    \ '\"B\"' ;;\n        2.3) echo '\"B-\"' ;;\n        2.0) echo '\"C+\"' ;;\n \
    \       1.7) echo '\"C\"' ;;\n        1.3) echo '\"C-\"' ;;\n        1.0) echo\
    \ '\"D+\"' ;;\n        0.7) echo '\"D\"' ;;\n        0.0) echo '\"D-\"' ;;\n \
    \       -1) echo '\"E\"' ;;\n    esac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    for i in $(echo $1 | tr \" \" \"\\n\")\n    do\n        case $i in\n    \
    \        4.0) echo \"A+\";;\n            3.[7-9]) echo \"A\";;\n            3.[3-6])\
    \ echo \"A-\";;\n            3.0) echo \"B+\";;\n            2.[7-9]) echo \"\
    B\";;\n            2.[3-6]) echo \"B-\";;\n            2.0) echo \"C+\";;\n  \
    \          1.[7-9]) echo \"C\";;\n            1.[3-6]) echo \"C-\";;\n       \
    \     1.0) echo \"D+\";;\n            0.[7-9]) echo \"D\";;\n            0.0)\
    \ echo \"D-\";;\n            * ) echo \"E\";;\n        esac\n    done\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpas=$1\n    for gpa in $gpas\n    do\n        if [ $(awk 'BEGIN{print('$gpa'\
    \ >= 4.0)}') -eq 1 ]\n        then\n            echo -e \"\\t\\t\\\"A+\\\"\"\n\
    \        elif [ $(awk 'BEGIN{print('$gpa' >= 3.7)}') -eq 1 ]\n        then\n \
    \           echo -e \"\\t\\t\\\"A\\\"\"\n        elif [ $(awk 'BEGIN{print('$gpa'\
    \ >= 3.3)}') -eq 1 ]\n        then\n            echo -e \"\\t\\t\\\"A-\\\"\"\n\
    \        elif [ $(awk 'BEGIN{print('$gpa' >= 3.0)}') -eq 1 ]\n        then\n \
    \           echo -e \"\\t\\t\\\"B+\\\"\"\n        elif [ $(awk 'BEGIN{print('$gpa'\
    \ >= 2.7)}') -eq 1 ]\n        then\n            echo -e \"\\t\\t\\\"B\\\"\"\n\
    \        elif [ $(awk 'BEGIN{print('$gpa' >= 2.3)}') -eq 1 ]\n        then\n \
    \           echo -e \"\\t\\t\\\"B-\\\"\"\n        elif [ $(awk 'BEGIN{print('$gpa'\
    \ >= 2.0)}') -eq 1 ]\n        then\n            echo -e \"\\t\\t\\\"C+\\\"\"\n\
    \        elif [ $(awk 'BEGIN{print('$gpa' >= 1.7)}') -eq 1 ]\n        then\n \
    \           echo -e \"\\t\\t\\\"C\\\"\"\n        elif [ $(awk 'BEGIN{print('$gpa'\
    \ >= 1.3)}') -eq 1 ]\n        then\n            echo -e \"\\t\\t\\\"C-\\\"\"\n\
    \        elif [ $(awk 'BEGIN{print('$gpa' >= 1.0)}') -eq 1 ]\n        then\n \
    \           echo -e \"\\t\\t\\\"D+\\\"\"\n        elif [ $(awk 'BEGIN{print('$gpa'\
    \ >= 0.7)}') -eq 1 ]\n        then\n            echo -e \"\\t\\t\\\"D\\\"\"\n\
    \        elif [ $(awk 'BEGIN{print('$\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvkxokzho.sh: line 63: unexpected EOF while looking for matching
    `)''

    /tmp/tmpvkxokzho.sh: line 81: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    # the \"|\" here, is the bitwise or operator, and the \"*\" is the multiplication\
    \ operator\n    # for example, the following line, \n    # echo 'scale=1; (1.1\
    \ + 3.2)*2 + 1' | bc\n    # would return the value of \"8.6\" because bc is the\
    \ linux's calculator program\n    # and it can also handle floating point values.\n\
    \    # \n    # Here, we are using the bitwise or, |, to redirect the input from\
    \ the keyboard, \n    # to the calculator program \"bc\". This is called \"piping\"\
    , and it means that\n    # the output of one program, is the input of another.\n\
    \    # This is similar to how you can use the \">\" in Linux to redirect the output\n\
    \    # of a program to a file. For example, \n    # echo \"hi\" > test.txt would\
    \ put the text \"hi\" into the file \"test.txt\"\n    # So, the calculator program\
    \ \"bc\" is receiving the input from an echo\n    # statement, and it is returning\
    \ it's output in the form of a floating point number.\n    # We can now assign\
    \ this output to a variable and use it in our if statement to\n    # return our\
    \ letter grade.\n    # \n    # echo is a program that outputs data, and bc is\
    \ a program that does math.\n    # bc needs a scale for its output, so we tell\
    \ it to use 1 digit after the decimal point.\n    #\n    # $(echo 'scale=1; (1.1\
    \ + 3.2)*2 + 1' | bc) returns the value of 8.6\n    # \n    # The scale=1 part\
    \ is the only thing bc needs to know, and it will calculate everything\n    #\
    \ else in the parentheses and echo it out.\n    # \n    # So, $(echo \"scale=1;\
    \ $1\" | bc) will calculate the value of the floating point number\n    # that\
    \ is stored in the variable $1.\n    if [ $(echo \"scale=1; $1\" | bc) == 4.0\
    \ ]; then\n        echo '\"A+\"'\n    elif [ $(echo \"scale=1; $1\" | bc) > 3.7\
    \ ]; then\n        echo '\"A\"'\n\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqpey18mo.sh: line 59: syntax error near unexpected token `}''

    /tmp/tmpqpey18mo.sh: line 59: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    grades=$1\n    for x in $grades\n    do\n      if [[ $(echo \"$x > 4.0\"\
    \ | bc -l) -eq 1 ]]; then\n        echo \"\\\"A+\\\"\"\n      elif [[ $(echo \"\
    $x > 3.7\" | bc -l) -eq 1 ]]; then\n        echo \"\\\"A\\\"\"\n      elif [[\
    \ $(echo \"$x > 3.3\" | bc -l) -eq 1 ]]; then\n        echo \"\\\"A-\\\"\"\n \
    \     elif [[ $(echo \"$x > 3.0\" | bc -l) -eq 1 ]]; then\n        echo \"\\\"\
    B+\\\"\"\n      elif [[ $(echo \"$x > 2.7\" | bc -l) -eq 1 ]]; then\n        echo\
    \ \"\\\"B\\\"\"\n      elif [[ $(echo \"$x > 2.3\" | bc -l) -eq 1 ]]; then\n \
    \       echo \"\\\"B-\\\"\"\n      elif [[ $(echo \"$x > 2.0\" | bc -l) -eq 1\
    \ ]]; then\n        echo \"\\\"C+\\\"\"\n      elif [[ $(echo \"$x > 1.7\" | bc\
    \ -l) -eq 1 ]]; then\n        echo \"\\\"C\\\"\"\n      elif [[ $(echo \"$x >\
    \ 1.3\" | bc -l) -eq 1 ]]; then\n        echo \"\\\"C-\\\"\"\n      elif [[ $(echo\
    \ \"$x > 1.0\" | bc -l) -eq 1 ]]; then\n        echo \"\\\"D+\\\"\"\n      elif\
    \ [[ $(echo \"$x > 0.7\" | bc -l) -eq 1 ]]; then\n        echo \"\\\"D\\\"\"\n\
    \      elif [[ $(echo \"$x > 0.0\" | bc -l) -eq 1 ]]; then\n        echo \"\\\"\
    D-\\\"\"\n      else\n        echo \"\\\"E\\\"\"\n      fi\n    done\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    for gpa in \"$@\"; do\n        printf \"\\\"\"\n        if (( $(echo \"$gpa\
    \ >= 4.0\" | bc -l) )); then\n            printf \"A+\"\n        elif (( $(echo\
    \ \"$gpa >= 3.7\" | bc -l) )); then\n            printf \"A\"\n        elif ((\
    \ $(echo \"$gpa >= 3.3\" | bc -l) )); then\n            printf \"A-\"\n      \
    \  elif (( $(echo \"$gpa >= 3.0\" | bc -l) )); then\n            printf \"B+\"\
    \n        elif (( $(echo \"$gpa >= 2.7\" | bc -l) )); then\n            printf\
    \ \"B\"\n        elif (( $(echo \"$gpa >= 2.3\" | bc -l) )); then\n          \
    \  printf \"B-\"\n        elif (( $(echo \"$gpa >= 2.0\" | bc -l) )); then\n \
    \           printf \"C+\"\n        elif (( $(echo \"$gpa >= 1.7\" | bc -l) ));\
    \ then\n            printf \"C\"\n        elif (( $(echo \"$gpa >= 1.3\" | bc\
    \ -l) )); then\n            printf \"C-\"\n        elif (( $(echo \"$gpa >= 1.0\"\
    \ | bc -l) )); then\n            printf \"D+\"\n        elif (( $(echo \"$gpa\
    \ >= 0.7\" | bc -l) )); then\n            printf \"D\"\n        elif (( $(echo\
    \ \"$gpa >= 0.0\" | bc -l) )); then\n            printf \"D-\"\n        else\n\
    \            printf \"E\"\n        fi\n        printf \"\\\" \"\n    done\n}\n\
    \ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    GPAs=($1)\n    grades=()\n    for GPA in ${GPAs[@]}; do\n        case ${GPA%.*}\
    \ in\n            4)  \n                grades+=\"\\\"A+\\\"\"\n             \
    \   ;;\n            3)  \n                if [ $(echo \"scale=2; ${GPA#*.} >=\
    \ 7\" | bc) -eq 1 ]; then\n                    grades+=\"\\\"A\\\"\"\n       \
    \         elif [ $(echo \"scale=2; ${GPA#*.} >= 3\" | bc) -eq 1 ]; then\n    \
    \                grades+=\"\\\"A-\\\"\"\n                else\n              \
    \      grades+=\"\\\"B+\\\"\"\n                fi\n                ;;\n      \
    \      2)\n                if [ $(echo \"scale=2; ${GPA#*.} >= 7\" | bc) -eq 1\
    \ ]; then\n                    grades+=\"\\\"B\\\"\"\n                elif [ $(echo\
    \ \"scale=2; ${GPA#*.} >= 3\" | bc) -eq 1 ]; then\n                    grades+=\"\
    \\\"B-\\\"\"\n                else\n                    grades+=\"\\\"C+\\\"\"\
    \n                fi\n                ;;\n            1)\n                if [\
    \ $(echo \"scale=2; ${GPA#*.} >= 7\" | bc) -eq 1 ]; then\n                   \
    \ grades+=\"\\\"C\\\"\"\n                elif [ $(echo \"scale=2; ${GPA#*.} >=\
    \ 3\" | bc) -eq 1 ]; then\n                    grades+=\"\\\"C-\\\"\"\n      \
    \          else\n                    grades+=\"\\\"D+\\\"\"\n                fi\n\
    \                ;;\n            0)\n                if [ $(echo \"scale=2; ${GPA#*.}\
    \ >= 7\" | bc) -eq 1 ]; then\n                    grades+=\"\\\"D\\\"\"\n    \
    \            elif [ $(echo \"scale=2; ${GPA#*.} >= 0\" | bc) -eq 1 ]; then\n \
    \                   grades+=\"\\\"D-\\\"\"\n                else\n           \
    \         grades+=\"\\\"E\\\"\"\n                fi\n                ;;\n    \
    \    esac\n    done\n    echo $grades\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    grade=\"$1\"\n    if (( $(echo \"$grade >= 4.0\" | bc -l) )); then\n    \
    \    printf \"A+\"\n    elif (( $(echo \"$grade >= 3.7\" | bc -l) )); then\n \
    \       printf \"A\"\n    elif (( $(echo \"$grade >= 3.3\" | bc -l) )); then\n\
    \        printf \"A-\"\n    elif (( $(echo \"$grade >= 3.0\" | bc -l) )); then\n\
    \        printf \"B+\"\n    elif (( $(echo \"$grade >= 2.7\" | bc -l) )); then\n\
    \        printf \"B\"\n    elif (( $(echo \"$grade >= 2.3\" | bc -l) )); then\n\
    \        printf \"B-\"\n    elif (( $(echo \"$grade >= 2.0\" | bc -l) )); then\n\
    \        printf \"C+\"\n    elif (( $(echo \"$grade >= 1.7\" | bc -l) )); then\n\
    \        printf \"C\"\n    elif (( $(echo \"$grade >= 1.3\" | bc -l) )); then\n\
    \        printf \"C-\"\n    elif (( $(echo \"$grade >= 1.0\" | bc -l) )); then\n\
    \        printf \"D+\"\n    elif (( $(echo \"$grade >= 0.7\" | bc -l) )); then\n\
    \        printf \"D\"\n    elif (( $(echo \"$grade >= 0.0\" | bc -l) )); then\n\
    \        printf \"D-\"\n    else\n        printf \"E\"\n    fi\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    (standard_in) 1: syntax error

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    if [[ \"$1\" -ge 4.0 ]]; then\n        echo \"A+\"\n    elif [[ \"$1\" -ge\
    \ 3.7 ]]; then\n        echo \"A\"\n    elif [[ \"$1\" -ge 3.3 ]]; then\n    \
    \    echo \"A-\"\n    elif [[ \"$1\" -ge 3.0 ]]; then\n        echo \"B+\"\n \
    \   elif [[ \"$1\" -ge 2.7 ]]; then\n        echo \"B\"\n    elif [[ \"$1\" -ge\
    \ 2.3 ]]; then\n        echo \"B-\"\n    elif [[ \"$1\" -ge 2.0 ]]; then\n   \
    \     echo \"C+\"\n    elif [[ \"$1\" -ge 1.7 ]]; then\n        echo \"C\"\n \
    \   elif [[ \"$1\" -ge 1.3 ]]; then\n        echo \"C-\"\n    elif [[ \"$1\" -ge\
    \ 1.0 ]]; then\n        echo \"D+\"\n    elif [[ \"$1\" -ge 0.7 ]]; then\n   \
    \     echo \"D\"\n    elif [[ \"$1\" -ge 0.0 ]]; then\n        echo \"D-\"\n \
    \   else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvjyb4naj.sh: line 27: [[: 4.0 3 1.7 2 3.5: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 29: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 31: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 33: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 35: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 37: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 39: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 41: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 43: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 45: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 47: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpvjyb4naj.sh: line 49: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # Fill in this function\n  let \"a = 10 * $1\"\n  let \"b = $a % 10\"\n  let\
    \ \"x = $a / 10\"\n  if [ $x -ge 4 ]\n  then\n    echo \\\"A+\\\"\n  elif [ $x\
    \ -eq 3 ]\n  then\n    if [ $b -ge 7 ]\n    then\n      echo \\\"A\\\"\n    elif\
    \ [ $b -ge 3 ]\n    then\n      echo \\\"A-\\\"\n    elif [ $b -ge 0 ]\n    then\n\
    \      echo \\\"B+\\\"\n    fi\n  elif [ $x -eq 2 ]\n  then\n    if [ $b -ge 7\
    \ ]\n    then\n      echo \\\"B\\\"\n    elif [ $b -ge 3 ]\n    then\n      echo\
    \ \\\"B-\\\"\n    elif [ $b -ge 0 ]\n    then\n      echo \\\"C+\\\"\n    fi\n\
    \  elif [ $x -eq 1 ]\n  then\n    if [ $b -ge 7 ]\n    then\n      echo \\\"C\\\
    \"\n    elif [ $b -ge 3 ]\n    then\n      echo \\\"C-\\\"\n    elif [ $b -ge\
    \ 0 ]\n    then\n      echo \\\"D+\\\"\n    fi\n  elif [ $x -eq 0 ]\n  then\n\
    \    if [ $b -ge 7 ]\n    then\n      echo \\\"D\\\"\n    elif [ $b -ge 0 ]\n\
    \    then\n      echo \\\"D-\\\"\n    else\n      echo \\\"E\\\"\n    fi\n  fi\n\
    }\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0a4xd2ac.sh: line 28: let: a = 10 * 4.0 3 1.7 2 3.5: syntax error:
    invalid arithmetic operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmp0a4xd2ac.sh: line 29: let: b =  % 10: syntax error: operand expected (error
    token is "% 10")

    /tmp/tmp0a4xd2ac.sh: line 30: let: x =  / 10: syntax error: operand expected (error
    token is "/ 10")

    /tmp/tmp0a4xd2ac.sh: line 31: [: -ge: unary operator expected

    /tmp/tmp0a4xd2ac.sh: line 34: [: -eq: unary operator expected

    /tmp/tmp0a4xd2ac.sh: line 46: [: -eq: unary operator expected

    /tmp/tmp0a4xd2ac.sh: line 58: [: -eq: unary operator expected

    /tmp/tmp0a4xd2ac.sh: line 70: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  # Write your solution here\n  local grade=${1:-\"E\"}\n  local grades=()\n\
    \  if [ \"$grade\" = \"E\" ]; then\n    grades=(\"0.0\")\n  elif [ $(echo \"$grade\
    \ > 0.7\" | bc -l) -eq 1 ]; then\n    grades=(\"1.0\")\n  elif [ $(echo \"$grade\
    \ > 1.3\" | bc -l) -eq 1 ]; then\n    grades=(\"1.7\" \"1.0\")\n  elif [ $(echo\
    \ \"$grade > 2.0\" | bc -l) -eq 1 ]; then\n    grades=(\"2.3\" \"2.0\" \"1.7\"\
    )\n  elif [ $(echo \"$grade > 2.7\" | bc -l) -eq 1 ]; then\n    grades=(\"3.0\"\
    \ \"2.7\" \"2.3\" \"2.0\")\n  elif [ $(echo \"$grade > 3.0\" | bc -l) -eq 1 ];\
    \ then\n    grades=(\"3.3\" \"3.0\" \"2.7\" \"2.3\")\n  elif [ $(echo \"$grade\
    \ > 3.3\" | bc -l) -eq 1 ]; then\n    grades=(\"3.7\" \"3.3\" \"3.0\" \"2.7\"\
    )\n  elif [ $(echo \"$grade > 3.7\" | bc -l) -eq 1 ]; then\n    grades=(\"4.0\"\
    \ \"3.7\" \"3.3\" \"3.0\")\n  fi\n  echo \"${grades[@]}\"\n}\n\ncandidate() {\n\
    \    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpl47ccj2a.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpl47ccj2a.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpl47ccj2a.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpl47ccj2a.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpl47ccj2a.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpl47ccj2a.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpl47ccj2a.sh: line 44: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \   gpa=$1\n   if [ \"$gpa\" -eq \"4.0\" ]; then\n     echo \"A+\"\n   elif [\
    \ \"$gpa\" -gt \"3.7\" ]; then\n     echo \"A\"\n   elif [ \"$gpa\" -gt \"3.3\"\
    \ ]; then\n     echo \"A-\"\n   elif [ \"$gpa\" -gt \"3.0\" ]; then\n     echo\
    \ \"B+\"\n   elif [ \"$gpa\" -gt \"2.7\" ]; then\n     echo \"B\"\n   elif [ \"\
    $gpa\" -gt \"2.3\" ]; then\n     echo \"B-\"\n   elif [ \"$gpa\" -gt \"2.0\" ];\
    \ then\n     echo \"C+\"\n   elif [ \"$gpa\" -gt \"1.7\" ]; then\n     echo \"\
    C\"\n   elif [ \"$gpa\" -gt \"1.3\" ]; then\n     echo \"C-\"\n   elif [ \"$gpa\"\
    \ -gt \"1.0\" ]; then\n     echo \"D+\"\n   elif [ \"$gpa\" -gt \"0.7\" ]; then\n\
    \     echo \"D\"\n   elif [ \"$gpa\" -gt \"0.0\" ]; then\n     echo \"D-\"\n \
    \  else\n     echo \"E\"\n   fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj1mfz8g8.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmpj1mfz8g8.sh: line 50: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tif [[ $1 > 4.0 ]]; then\n\t\techo \"A+\"\n\telif [[ $1 > 3.7 ]]; then\n\t\t\
    echo \"A\"\n\telif [[ $1 > 3.3 ]]; then\n\t\techo \"A-\"\n\telif [[ $1 > 3.0 ]];\
    \ then\n\t\techo \"B+\"\n\telif [[ $1 > 2.7 ]]; then\n\t\techo \"B\"\n\telif [[\
    \ $1 > 2.3 ]]; then\n\t\techo \"B-\"\n\telif [[ $1 > 2.0 ]]; then\n\t\techo \"\
    C+\"\n\telif [[ $1 > 1.7 ]]; then\n\t\techo \"C\"\n\telif [[ $1 > 1.3 ]]; then\n\
    \t\techo \"C-\"\n\telif [[ $1 > 1.0 ]]; then\n\t\techo \"D+\"\n\telif [[ $1 >\
    \ 0.7 ]]; then\n\t\techo \"D\"\n\telif [[ $1 > 0.0 ]]; then\n\t\techo \"D-\"\n\
    \telse\n\t\techo \"E\"\n\tfi\n}\n\ncandidate() {\n    numerical_letter_grade \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"\
    A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local N=$1\n\n    if [[ $N -eq 4 ]]; then\n        echo \"A+\"\n    elif\
    \ [[ $N -ge 3 && $N -lt 4 ]]; then\n        echo \"A\"\n    elif [[ $N -ge 2 &&\
    \ $N -lt 3 ]]; then\n        echo \"B\"\n    elif [[ $N -ge 1 && $N -lt 2 ]];\
    \ then\n        echo \"C\"\n    elif [[ $N -ge 0 && $N -lt 1 ]]; then\n      \
    \  echo \"D\"\n    else\n        echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpj0f2k_n7.sh: line 29: [[: 4.0 3 1.7 2 3.5: syntax error: invalid
    arithmetic operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpj0f2k_n7.sh: line 31: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpj0f2k_n7.sh: line 33: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpj0f2k_n7.sh: line 35: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    /tmp/tmpj0f2k_n7.sh: line 37: [[: 4.0 3 1.7 2 3.5: syntax error: invalid arithmetic
    operator (error token is ".0 3 1.7 2 3.5")

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local gpa=$1\n    if [ \"$gpa\" -eq \"4.0\" ]; then\n        echo \"A+\"\n\
    \    elif [ \"$gpa\" -gt \"3.7\" ]; then\n        echo \"A\"\n    elif [ \"$gpa\"\
    \ -gt \"3.3\" ]; then\n        echo \"A-\"\n    elif [ \"$gpa\" -gt \"3.0\" ];\
    \ then\n        echo \"B+\"\n    elif [ \"$gpa\" -gt \"2.7\" ]; then\n       \
    \ echo \"B\"\n    elif [ \"$gpa\" -gt \"2.3\" ]; then\n        echo \"B-\"\n \
    \   elif [ \"$gpa\" -gt \"2.0\" ]; then\n        echo \"C+\"\n    elif [ \"$gpa\"\
    \ -gt \"1.7\" ]; then\n        echo \"C\"\n    elif [ \"$gpa\" -gt \"1.3\" ];\
    \ then\n        echo \"C-\"\n    elif [ \"$gpa\" -gt \"1.0\" ]; then\n       \
    \ echo \"D+\"\n    elif [ \"$gpa\" -gt \"0.7\" ]; then\n        echo \"D\"\n \
    \   elif [ \"$gpa\" -gt \"0.0\" ]; then\n        echo \"D-\"\n    else\n     \
    \   echo \"E\"\n    fi\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C-\
    \ C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\"\
    ) = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0\
    \ 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") =\
    \ \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8g031b90.sh: line 28: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 30: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 32: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 34: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 36: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 38: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 40: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 42: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 44: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 46: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 48: [: 4.0 3 1.7 2 3.5: integer expression expected

    /tmp/tmp8g031b90.sh: line 50: [: 4.0 3 1.7 2 3.5: integer expression expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    local lg=$1\n    local result=\"\"\n    local num_grade=$(echo \"${lg}\"\
    \ | sed -e 's/^\"//' -e 's/\"$//')\n    if [ $(echo \"${num_grade}>=4.0\" | bc)\
    \ -eq 1 ]; then\n        result=\"A+\"\n    elif [ $(echo \"${num_grade}>=3.7\"\
    \ | bc) -eq 1 ]; then\n        result=\"A\"\n    elif [ $(echo \"${num_grade}>=3.3\"\
    \ | bc) -eq 1 ]; then\n        result=\"A-\"\n    elif [ $(echo \"${num_grade}>=3.0\"\
    \ | bc) -eq 1 ]; then\n        result=\"B+\"\n    elif [ $(echo \"${num_grade}>=2.7\"\
    \ | bc) -eq 1 ]; then\n        result=\"B\"\n    elif [ $(echo \"${num_grade}>=2.3\"\
    \ | bc) -eq 1 ]; then\n        result=\"B-\"\n    elif [ $(echo \"${num_grade}>=2.0\"\
    \ | bc) -eq 1 ]; then\n        result=\"C+\"\n    elif [ $(echo \"${num_grade}>=1.7\"\
    \ | bc) -eq 1 ]; then\n        result=\"C\"\n    elif [ $(echo \"${num_grade}>=1.3\"\
    \ | bc) -eq 1 ]; then\n        result=\"C-\"\n    elif [ $(echo \"${num_grade}>=1.0\"\
    \ | bc) -eq 1 ]; then\n        result=\"D+\"\n    elif [ $(echo \"${num_grade}>=0.7\"\
    \ | bc) -eq 1 ]; then\n        result=\"D\"\n    elif [ $(echo \"${num_grade}>=0.0\"\
    \ | bc) -eq 1 ]; then\n        result=\"D-\"\n    else\n        result=\"E\"\n\
    \    fi\n    echo \"${result}\"\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '(standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 30: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 32: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 34: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 36: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 38: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 40: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 42: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 44: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 46: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 48: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 50: [: -eq: unary operator expected

    (standard_in) 1: syntax error

    /tmp/tmpq3nekpl7.sh: line 52: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \t# numerical_letter_grade is a letter grade for a single gpa\n\tcase $1 in\n\t\
    \t# TODO\n\t\t4.0) echo \"A+\";;\n\t\t*[37]) echo \"A\";;\n\t\t*[33]) echo \"\
    A-\";;\n\t\t*[30]) echo \"B+\";;\n\t\t*[27]) echo \"B\";;\n\t\t*[23]) echo \"\
    B-\";;\n\t\t*[20]) echo \"C+\";;\n\t\t*[17]) echo \"C\";;\n\t\t*[13]) echo \"\
    C-\";;\n\t\t*[10]) echo \"D+\";;\n\t\t*[7]) echo \"D\";;\n\t\t*[0]) echo \"D-\"\
    ;;\n\t\t0.0) echo \"E\";;\n\tesac\n}\n\ncandidate() {\n    numerical_letter_grade\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") =\
    \ \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    echo $1 | awk '{print 0.7+($1-1.0)/0.4}' | awk '{if ($1>10) print \"A+\"\
    ; else if ($1>9) print \"A\"; else if ($1>8) print \"A-\"; else if ($1>7) print\
    \ \"B+\"; else if ($1>6) print \"B\"; else if ($1>5) print \"B-\"; else if ($1>4)\
    \ print \"C+\"; else if ($1>3) print \"C\"; else if ($1>2) print \"C-\"; else\
    \ if ($1>1) print \"D+\"; else if ($1>0) print \"D\"; else if ($1==0) print \"\
    D-\"; else print \"E\";}'\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \    case $1 in\n    4.0)\n        echo A+\n        ;;\n    3.7)\n        echo\
    \ A\n        ;;\n    3.3)\n        echo A-\n        ;;\n    3.0)\n        echo\
    \ B+\n        ;;\n    2.7)\n        echo B\n        ;;\n    2.3)\n        echo\
    \ B-\n        ;;\n    2.0)\n        echo C+\n        ;;\n    1.7)\n        echo\
    \ C\n        ;;\n    1.3)\n        echo C-\n        ;;\n    1.0)\n        echo\
    \ D+\n        ;;\n    0.7)\n        echo D\n        ;;\n    0.0)\n        echo\
    \ D-\n        ;;\n    *)\n        echo E\n        ;;\n    esac\n}\n\ncandidate()\
    \ {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"\
    D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\")\
    \ = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n\
    \    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 2
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  local gpa_letter_grade=()\n  local last_gpa=\n  local grade_string=\n  local\
    \ grade_string_list=()\n  local grade_list=()\n  local gpa=\n  local grade=\n\
    \  local number_of_args=${#@}\n  local i=1\n  for gpa in $@; do\n    if [ $number_of_args\
    \ -eq $i ]; then\n      grade_string=$(echo \"$last_gpa $gpa\" |awk '{if ($1 >\
    \ 4.0) print \"A+\"; else if ($1 > 3.7) print \"A\"; else if ($1 > 3.3) print\
    \ \"A-\"; else if ($1 > 3.0) print \"B+\"; else if ($1 > 2.7) print \"B\"; else\
    \ if ($1 > 2.3) print \"B-\"; else if ($1 > 2.0) print \"C+\"; else if ($1 > 1.7)\
    \ print \"C\"; else if ($1 > 1.3) print \"C-\"; else if ($1 > 1.0) print \"D+\"\
    ; else if ($1 > 0.7) print \"D\"; else if ($1 > 0.0) print \"D-\"; else print\
    \ \"E\"}')\n      gpa_letter_grade+=(\"$grade_string\")\n    elif [ $i -eq 1 ];\
    \ then\n      grade_string=$(echo \"$gpa\" |awk '{if ($1 > 4.0) print \"A+\";\
    \ else if ($1 > 3.7) print \"A\"; else if ($1 > 3.3) print \"A-\"; else if ($1\
    \ > 3.0) print \"B+\"; else if ($1 > 2.7) print \"B\"; else if ($1 > 2.3) print\
    \ \"B-\"; else if ($1 > 2.0) print \"C+\"; else if ($1 > 1.7) print \"C\"; else\
    \ if ($1 > 1.3) print \"C-\"; else if ($1 > 1.0) print \"D+\"; else if ($1 > 0.7)\
    \ print \"D\"; else if ($1 > 0.0) print \"D-\"; else print \"E\"}')\n      last_gpa=$gpa\n\
    \n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B C- C A-\" ]]\n    [[ $(candidate\
    \ \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"0.5\") = \"D-\" ]]\n    [[ $(candidate\
    \ \"0.0\") = \"E\" ]]\n    [[ $(candidate \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C-\
    \ B B+\" ]]\n    [[ $(candidate \"0.0 0.7\") = \"E D-\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphwf8tw2y.sh: line 44: syntax error near unexpected token `}''

    /tmp/tmphwf8tw2y.sh: line 44: `}''

    '
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \  case $1 in\n    4.0) echo \"A+\" ;;\n    [3-3][.7-9]) echo \"A\" ;;\n    [3-3][.3-6])\
    \ echo \"A-\" ;;\n    [3-2][.9-9]) echo \"B+\" ;;\n    [2-2][.7-9]) echo \"B\"\
    \ ;;\n    [2-2][.3-6]) echo \"B-\" ;;\n    [2-1][.9-9]) echo \"C+\" ;;\n    [1-1][.7-9])\
    \ echo \"C\" ;;\n    [1-1][.3-6]) echo \"C-\" ;;\n    [1-0][.9-9]) echo \"D+\"\
    \ ;;\n    [0-0][.7-9]) echo \"D\" ;;\n    [0-0][.0-6]) echo \"D-\" ;;\n    *)\
    \ echo \"E\" ;;\n  esac\n}\n\ncandidate() {\n    numerical_letter_grade \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"A+ B\
    \ C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate \"\
    0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
- exit_code: 1
  program: "#!/bin/bash\n# It is the last week of the semester and the teacher has\
    \ to give the grades\n# to students. The teacher has been making her own algorithm\
    \ for grading.\n# The only problem is, she has lost the code she used for grading.\n\
    # She has given you a list of GPAs for some students and you have to write \n\
    # a function that can output a list of letter grades using the following table:\n\
    # GPA       |    Letter grade\n# 4.0                A+\n# > 3.7              \
    \  A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7        \
    \        B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7   \
    \             C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7\
    \                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n\
    # >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"\
    C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n\
    \tcase \"$1\" in\n\t\t4.0) echo \"A+\" ;;\n\t\t3.7) echo \"A\" ;;\n\t\t3.3) echo\
    \ \"A-\" ;;\n\t\t3.0) echo \"B+\" ;;\n\t\t2.7) echo \"B\" ;;\n\t\t2.3) echo \"\
    B-\" ;;\n\t\t2.0) echo \"C+\" ;;\n\t\t1.7) echo \"C\" ;;\n\t\t1.3) echo \"C-\"\
    \ ;;\n\t\t1.0) echo \"D+\" ;;\n\t\t0.7) echo \"D\" ;;\n\t\t0.0) echo \"D-\" ;;\n\
    \t\t*) echo \"E\" ;;\n\tesac\n}\n\ncandidate() {\n    numerical_letter_grade \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4.0 3 1.7 2 3.5\") = \"\
    A+ B C- C A-\" ]]\n    [[ $(candidate \"1.2\") = \"D+\" ]]\n    [[ $(candidate\
    \ \"0.5\") = \"D-\" ]]\n    [[ $(candidate \"0.0\") = \"E\" ]]\n    [[ $(candidate\
    \ \"1.0 0.3 1.5 2.8 3.3\") = \"D D- C- B B+\" ]]\n    [[ $(candidate \"0.0 0.7\"\
    ) = \"E D-\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024102
