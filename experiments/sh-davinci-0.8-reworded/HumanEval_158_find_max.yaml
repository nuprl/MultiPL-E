name: HumanEval_158_find_max
language: sh
prompt: "#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list\
  \ contains different words. Return the word with maximum number\n# of unique characters.\
  \ If multiple strings have maximum number of unique\n# characters, return the one\
  \ which comes first in lexicographical order.\n# >>> $(find_max \"name of string\"\
  )\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max\
  \ \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max()\
  \ {\n"
tests: "}\n\ncandidate() {\n    find_max \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"name of string\") = \"string\" ]]\n    [[ $(candidate \"name enam\
  \ game\") = \"enam\" ]]\n    [[ $(candidate \"aaaaaaa bb cc\") = \"aaaaaaa\" ]]\n\
  \    [[ $(candidate \"abc cba\") = \"abc\" ]]\n    [[ $(candidate \"play this game\
  \ of footbott\") = \"footbott\" ]]\n    [[ $(candidate \"we are gonna rock\") =\
  \ \"gonna\" ]]\n    [[ $(candidate \"we are a mad nation\") = \"nation\" ]]\n  \
  \  [[ $(candidate \"this is a prrk\") = \"this\" ]]\n    [[ $(candidate \"b\") =\
  \ \"b\" ]]\n    [[ $(candidate \"play play play\") = \"play\" ]]\n}\n\nrun_test"
completions: ["    local max_word='' max_unique=0 num_unique=0 word\n\n    for word\
    \ in $1; do\n        num_unique=$(echo \"$word\" | grep -o . | sort | uniq | wc\
    \ -l)\n        if [ $num_unique -gt $max_unique ]; then\n            max_unique=$num_unique\n\
    \            max_word=$word\n        fi\n    done\n\n    echo $max_word", "  \
    \  local best=\"\"\n    local best_len=0\n    for word in $1; do\n        local\
    \ len=$(echo $word | sed -r 's/([^[:space:]])/./g' | tr -d '\\n' | sed 's/\\./\\\
    n/g' | sort | uniq | wc -l)\n        if [[ $len -gt $best_len ]]; then\n     \
    \       best_len=$len\n            best=$word\n        fi\n    done\n    echo\
    \ $best", "    local max_unique=1\n    local max_unique_s=\"\"\n    for s in \"\
    $@\"; do\n        local s_unique=$(echo \"$s\" | fold -w1 | sort -u | wc -l)\n\
    \        if [[ \"$s_unique\" -gt \"$max_unique\" ]]; then\n            max_unique=\"\
    $s_unique\"\n            max_unique_s=\"$s\"\n        elif [[ \"$s_unique\" -eq\
    \ \"$max_unique\" ]]; then\n            if [[ \"$s\" < \"$max_unique_s\" ]]; then\n\
    \                max_unique_s=\"$s\"\n            fi\n        fi\n    done\n \
    \   echo \"$max_unique_s\"", "  # TODO: Implement this function\n  # local max_unique_characters_string_1=\"\
    $1\"\n  # local max_unique_characters_string_2=\"$2\"\n  #\n  # if [[ $max_unique_characters_string_1\
    \ == $max_unique_characters_string_2 ]]; then\n  #   echo $max_unique_characters_string_1\n\
    \  # elif [[ $(echo $max_unique_characters_string_1 < $max_unique_characters_string_2)\
    \ == \"true\" ]]; then\n  #   echo $max_unique_characters_string_2\n  # else\n\
    \  #   echo $max_unique_characters_string_1\n  # fi\n  local max_string=$(echo\
    \ \"$1\" | awk '{\n    print $1\n  }')\n  local max_unique_characters=$(echo \"\
    $max_string\" | grep -o . | sort | uniq | wc -l)\n\n  for string in $(echo \"\
    $1\" | awk '{\n    for (i = 2; i <= NF; i++) {\n      print $i\n    }\n  }');\
    \ do\n    local unique_characters=$(echo \"$string\" | grep -o . | sort | uniq\
    \ | wc -l)\n    if [[ $unique_characters -gt $max_unique_characters ]]; then\n\
    \      max_unique_characters=$unique_characters\n      max_string=$string\n  \
    \  elif [[ $unique_characters -eq $max_unique_characters ]]; then\n      if [[\
    \ $(echo $string < $max_string) == \"true\" ]]; then\n        max_string=$string\n\
    \      fi\n    fi\n  done\n\n  echo $max_string", "    # Define variable.\n  \
    \  local nline=$1\n    local max_char=0\n    local max_str=\"\"\n    local uniq_list=()\n\
    \    # Loop thru every string.\n    for i in $nline; do\n        # Check if the\
    \ string is unique.\n        if [[ $(echo \"$i\" | wc -c) == $(echo \"$i\" | sort\
    \ | uniq | wc -c) ]]; then\n            echo \"$i is unique\"\n            uniq_list=(\"\
    ${uniq_list[@]}\" \"$i\")\n        fi\n    done\n    # Find maximum number of\
    \ characters.\n    for j in ${uniq_list[@]}; do\n        if [[ $(echo \"$j\" |\
    \ wc -c) -gt $max_char ]]; then\n            max_char=$(echo \"$j\" | wc -c)\n\
    \            max_str=\"$j\"\n        fi\n    done\n    echo \"$max_str\"", " \
    \   echo $1 | tr ' ' '\\n' | sort -u | sort -k1,1nr | head -1", "  # Sort the\
    \ words by length\n  # Take only the first\n  # Print without a line break (--zero-terminated)\n\
    \  sort --key=3 --numeric-sort --reverse --zero-terminated -- $1 | head -1", " \
    \ while [[ $# -gt 0 ]]; do\n    local arg=$1\n    local arglen=${#arg}\n    if\
    \ [[ \"$arglen\" -gt \"$maxlen\" ]]; then\n      maxlen=$arglen\n      maxarg=$arg\n\
    \    fi\n    shift\n  done\n  echo $maxarg", "  local res=\n  local -i num_max=0\n\
    \  for word in $*; do\n    local -i num_unique=0\n    for ((i=0; i<${#word}; i++));\
    \ do\n      local -n arr_ref=$(echo \"arr_${word:i:1}\")\n      if [[ -z \"${arr_ref[*]}\"\
    \ ]]; then\n        arr_ref[0]=0\n        ((num_unique++))\n      fi\n    done\n\
    \    if ((num_unique > num_max)); then\n      num_max=$num_unique\n      res=$word\n\
    \    elif ((num_unique == num_max)) &&\n         [[ \"$word\" < \"$res\" ]]; then\n\
    \      res=$word\n    fi\n  done\n  echo \"$res\"", "    local max=0\n    local\
    \ word=\"\"\n    local max_list=\"\"\n    for word in $1; do\n        if (( $(unique_chars_count\
    \ \"$word\") > max )); then\n            max_list=$word\n            max=$(unique_chars_count\
    \ \"$word\")\n        fi\n    done\n    echo \"$max_list\"", "    local str=$1\n\
    \    local max=''\n    local max_num_chars=0\n    for word in $str; do\n     \
    \   if [[ $(echo $word | grep -o . | sort | uniq | wc -l) -gt $max_num_chars ]];\
    \ then\n            max=$word\n            max_num_chars=$(echo $word | grep -o\
    \ . | sort | uniq | wc -l)\n        fi\n    done\n    echo $max", "    max=-1\n\
    \    echo $1 | tr ' ' '\\n' | while read word; do\n        cnt=$(echo $word |\
    \ grep -o . | sort | uniq | wc -l)\n        if [[ $cnt -gt $max ]]; then\n   \
    \         max=$cnt\n            ret=$word\n        fi\n    done\n    echo $ret",
  "  local max=0\n  local max_word=\"\"\n  local max_value=\"\"\n  local word=\"\"\
    \n  local value=\"\"\n  # Iterate through each word\n  for word in $1; do\n  \
    \  # Compute the value of the word\n    value=$(sed 's/\\(.\\)/\\1\\n/g' <<< $word\
    \ | sort | uniq | tr -d '\\n')\n    # Compare with current max\n    if [[ ${#value}\
    \ -gt $max ]]; then\n      max_word=$word\n      max_value=$value\n      max=${#value}\n\
    \    fi\n  done\n  echo $max_word", "  echo \"$1\" | tr ' ' '\\n' | sed 's/.*/&\\\
    t&/' | sort -t$'\\t' -k2r -k1 -u | head -n1 | cut -f1", "    local max_num_uniq\
    \ max_word word num_uniq c\n    max_num_uniq=0\n    for word in $1; do\n     \
    \   num_uniq=0\n        for c in $(echo $word | fold -w1); do\n            if\
    \ ! echo $word | grep -q $c; then\n                ((num_uniq++))\n          \
    \  fi\n        done\n        if ((num_uniq > max_num_uniq)); then\n          \
    \  max_num_uniq=$num_uniq\n            max_word=$word\n        fi\n    done\n\
    \    echo $max_word", "    local max=0\n    local str\n    local n\n\n    while\
    \ read str; do\n        # Count unique characters\n        n=$(echo \"$str\" |\
    \ grep -o . | sort -u | wc -l)\n        [ $n -gt $max ] && max=$n && res=$str\n\
    \    done <<< \"$1\"\n\n    echo \"$res\"", "    # Create a list of words by replacing\
    \ spaces with newlines\n    words=$(echo \"$1\" | tr ' ' '\\n')\n    printf \"\
    %s\" \"$words\" | while read word; do\n        # For each word, count the number\
    \ of unique characters. This is the\n        # length of the output of `tr -d\
    \ <chars_to_delete>`. The string to\n        # delete is all characters in the\
    \ word that are not duplicates. The\n        # pattern `(.)\\\\1*` matches each\
    \ group of duplicates.\n        num_unique=$(printf \"%s\" \"$word\" | tr -d \"\
    $(printf \"%s\" \"$word\" | sed 's/(.)\\\\1*/\\\\1/g')\" | wc -c)\n        echo\
    \ \"$num_unique $word\"\n    done | sort -rn | head -n 1 | cut -d' ' -f2", " \
    \ printf \"%s\\n\" $* | tr \" \" \"\\n\" | awk '{sum=0;for(i=1;i<=length;i++){c=substr($0,i,1);if(!a[c]){a[c]=1;sum+=1}}print\
    \ sum,$0}' | sort -n -k1,1 | tail -1 | cut -d\" \" -f2", "    # 1. Create a list\
    \ of length of unique characters for each word.\n    declare -a uniq_chars\n \
    \   #    - Split the list into an array of words.\n    declare -a words\n    IFS=\"\
    \ \" read -r -a words <<< \"$1\"\n    #    - Store the number of unique characters\
    \ of each word.\n    for word in \"${words[@]}\"; do\n        #    - Remove all\
    \ duplicate characters of each word.\n        uniq_word=$(echo -n \"$word\" |\
    \ fold -w1 | sort | uniq | tr -d \"\\n\")\n        #    - Store the length of\
    \ each word.\n        uniq_chars+=(${#uniq_word})\n    done\n    # 2. Find the\
    \ indices of the words with maximum number of unique characters.\n    #    - Find\
    \ the maximum number of unique characters.\n    max_unique=${uniq_chars[0]}\n\
    \    for word in \"${uniq_chars[@]}\"; do\n        if (( word > max_unique ));\
    \ then\n            max_unique=$word\n        fi\n    done\n    #    - Create\
    \ an array of indices of the words with maximum number of unique characters.\n\
    \    declare -a max_idx\n    for i in \"${!uniq_chars[@]}\"; do\n        if ((\
    \ uniq_chars[i] == max_unique )); then\n            max_idx+=($i)\n        fi\n\
    \    done\n    # 3. Find the first word in lexicographical order.\n    first_word=${words[${max_idx[0]}]}\n\
    \    for word in \"${words[@]}\"; do\n        if [[ \"$word\" < \"$first_word\"\
    \ ]]; then\n            first_word=$word\n        fi\n    done\n    echo -n \"\
    $first_word\"", "    # Write your code here\n    # split the space-separated list\
    \ and store in the array\n    IFS=' ' read -a array <<< \"$1\"\n    max_count=0\n\
    \    max_word=\"\"\n    for word in \"${array[@]}\"\n    do\n        # remove\
    \ duplicate letters of the word and count the number of letters\n        word_count=$(echo\
    \ $word | tr -cd [:alpha:] | sed 's/\\(.\\)/\\1\\n/g' | sort -u | wc -c)\n   \
    \     if [ $word_count -gt $max_count ] || [ $word_count -eq $max_count -a $word\
    \ \\< $max_word ]\n        then\n            max_count=$word_count\n         \
    \   max_word=$word\n        fi\n    done\n    echo $max_word"]
stop_tokens:
- "\n}"
