name: HumanEval_148_bf
language: sh
prompt: "#!/bin/bash\n# There are eight planets in our solar system: the closerst\
  \ to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
  \ \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings\
  \ planet1 and planet2. \n# The function should return a list containing all planets\
  \ whose orbits are \n# located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n# the proximity to the sun. \n# The function should return an empty\
  \ list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>>\
  \ $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\"\
  \ \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"',\
  \ '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n#\
  \ $2 is a string\nbf() {\n"
tests: "}\n\ncandidate() {\n    bf \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"Jupiter\" \"Neptune\") = \"Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\"\
  \ \"Mercury\") = \"Venus\" ]]\n    [[ $(candidate \"Mercury\" \"Uranus\") = \"Venus\
  \ Earth Mars Jupiter Saturn\" ]]\n    [[ $(candidate \"Neptune\" \"Venus\") = \"\
  Earth Mars Jupiter Saturn Uranus\" ]]\n    [[ $(candidate \"Earth\" \"Earth\") =\
  \ \"\" ]]\n    [[ $(candidate \"Mars\" \"Earth\") = \"\" ]]\n    [[ $(candidate\
  \ \"Jupiter\" \"Makemake\") = \"\" ]]\n}\n\nrun_test"
completions: ["    planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"\
    Saturn\" \"Uranus\" \"Neptune\")\n    planet1=$1\n    planet2=$2\n    if [[ \"\
    $planet1\" != \"Mercury\" && \"$planet1\" != \"Venus\" && \"$planet1\" != \"Earth\"\
    \ && \"$planet1\" != \"Mars\" && \"$planet1\" != \"Jupiter\" && \"$planet1\" !=\
    \ \"Saturn\" && \"$planet1\" != \"Uranus\" && \"$planet1\" != \"Neptune\" ]];\
    \ then\n        echo \"Planet $planet1 not found\"\n        return 1\n    fi\n\
    \    if [[ \"$planet2\" != \"Mercury\" && \"$planet2\" != \"Venus\" && \"$planet2\"\
    \ != \"Earth\" && \"$planet2\" != \"Mars\" && \"$planet2\" != \"Jupiter\" && \"\
    $planet2\" != \"Saturn\" && \"$planet2\" != \"Uranus\" && \"$planet2\" != \"Neptune\"\
    \ ]]; then\n        echo \"Planet $planet2 not found\"\n        return 1\n   \
    \ fi\n    if [[ \"$planet1\" == \"$planet2\" ]]; then\n        echo \"Planet $planet1\
    \ and $planet2 are the same\"\n        return 1\n    fi\n    p1_position=0\n \
    \   p2_position=0\n    for p in \"${planets[@]}\"; do\n        if [[ \"$p\" ==\
    \ \"$planet1\" ]]; then\n            p1_position=$i\n        fi\n        if [[\
    \ \"$p\" == \"$planet2\" ]]; then\n            p2_position=$i\n        fi\n  \
    \      i=$((i+1))\n    done\n    if [[ $p1_position -lt $p2_position ]]; then\n\
    \        planets=(${planets[@]:$p1_position:$p2_position})\n    else\n       \
    \ planets=(${planets[@]:$p2_position:$p1_position})\n    fi\n    planets=(${planets[@]})\n\
    \    echo ${planets[@]}", "    planets=(\"Mercury\" \"Venus\" \"Earth\" \"Mars\"\
    \ \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    pos1=-1\n    pos2=-1\n \
    \   for i in \"${!planets[@]}\"; do\n        if [[ \"${planets[$i]}\" == \"$1\"\
    \ ]]; then\n            pos1=$i\n        fi\n        if [[ \"${planets[$i]}\"\
    \ == \"$2\" ]]; then\n            pos2=$i\n        fi\n    done\n    if [ $pos1\
    \ -eq -1 ] || [ $pos2 -eq -1 ]; then\n        echo \"[]\"\n    else\n        if\
    \ [ $pos1 -le $pos2 ]; then\n            IFS=$'\\n'\n            echo \"[\\\"\
    ${planets[@]:$pos1+1:$pos2-$pos1}\\\"]\"\n        else\n            IFS=$'\\n'\n\
    \            echo \"[\\\"${planets[@]:$pos2+1:$pos1-$pos2}\\\"]\"\n        fi\n\
    \    fi", "\tP1=\"$1\"\n\tP2=\"$2\"\n\t\n\t# The function should return an empty\
    \ list if planet1 or planet2\n\t# are not correct planet names.\n\tif [[ \"$P1\"\
    \ == \"Mercury\" || \"$P1\" == \"Venus\" || \"$P1\" == \"Earth\" || \n\t\t\"$P1\"\
    \ == \"Mars\" || \"$P1\" == \"Jupiter\" || \"$P1\" == \"Saturn\" || \n\t\t\"$P1\"\
    \ == \"Uranus\" || \"$P1\" == \"Neptune\" ]]; then\n\t\tif [[ \"$P2\" == \"Mercury\"\
    \ || \"$P2\" == \"Venus\" || \"$P2\" == \"Earth\" || \n\t\t\t\"$P2\" == \"Mars\"\
    \ || \"$P2\" == \"Jupiter\" || \"$P2\" == \"Saturn\" || \n\t\t\t\"$P2\" == \"\
    Uranus\" || \"$P2\" == \"Neptune\" ]]; then\n\t\t\t# The function should return\
    \ a list containing all planets whose \n\t\t\t# orbits are located between the\
    \ orbit of planet1 and the orbit of \n\t\t\t# planet2, sorted by the proximity\
    \ to the sun.\n\t\t\tif [[ \"$P1\" == \"Mercury\" && \"$P2\" == \"Venus\" ]];\
    \ then\n\t\t\t\techo \"Earth\"\n\t\t\telif [[ \"$P1\" == \"Venus\" && \"$P2\"\
    \ == \"Earth\" ]]; then\n\t\t\t\techo \"Mars\"\n\t\t\telif [[ \"$P1\" == \"Earth\"\
    \ && \"$P2\" == \"Mars\" ]]; then\n\t\t\t\techo \"Jupiter\"\n\t\t\telif [[ \"\
    $P1\" == \"Mars\" && \"$P2\" == \"Jupiter\" ]]; then\n\t\t\t\techo \"Saturn\"\n\
    \t\t\telif [[ \"$P1\" == \"Jupiter\" && \"$P2\" == \"Saturn\" ]]; then\n\t\t\t\
    \techo \"Uranus\"\n\t\t\telif [[ \"$P1\" == \"Saturn\" && \"$P2\" == \"Uranus\"\
    \ ]]; then\n\t\t\t", "    if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n        echo\
    \ \"Usage: $0 planet1 planet2\"\n        return\n    fi\n    local planets=(Mercury\
    \ Venus Earth Mars Jupiter Saturn Uranus Neptune)\n    local start=$(indexof \"\
    $1\" \"${planets[@]}\")\n    local end=$(indexof \"$2\" \"${planets[@]}\")\n \
    \   if [ -z \"$start\" ] || [ -z \"$end\" ]; then\n        echo \"Invalid planet\"\
    \n        return\n    fi\n    if [ $start -eq $end ]; then\n        echo \"No\
    \ planets in between\"\n        return\n    fi\n    if [ $start -gt $end ]; then\n\
    \        local index=$start\n        start=$end\n        end=$index\n    fi\n\
    \    local i=$start\n    while [ $i -lt $end ]; do\n        echo -n \"\\\"${planets[$i]}\\\
    \" \"\n        i=$(($i+1))\n    done\n    echo \"\"", "    # Complete the body\
    \ of the function below.\n    # You may create other functions if needed.\n  \
    \  #\n    # The output should be a string, or a list (array) of strings.\n   \
    \ #\n    # Your code starts here\n    declare -a Planet=(\"Mercury\" \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    declare\
    \ -a PlanetIndex=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\")\n    declare\
    \ -a AllPlanetIndex=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\")\n    declare\
    \ -a Res\n\n    for (( i=0; i<${#Planet[@]}; i++ ))\n    do\n        if [ \"${Planet[$i]}\"\
    \ = \"$1\" ]\n        then\n            planet1=${PlanetIndex[$i]}\n        fi\n\
    \        if [ \"${Planet[$i]}\" = \"$2\" ]\n        then\n            planet2=${PlanetIndex[$i]}\n\
    \        fi\n    done\n\n    if [ \"$1\" = \"Neptune\" ]\n    then\n        planet1=7\n\
    \    fi\n    if [ \"$2\" = \"Mercury\" ]\n    then\n        planet2=0\n    fi\n\
    \n    if [ -z \"$planet1\" ] || [ -z \"$planet2\" ]\n    then\n        echo \"\
    []\"\n    else\n        for (( i=0; i<${#AllPlanetIndex[@]}; i++ ))\n        do\n\
    \            if [ \"${AllPlanetIndex[$i]}\" -ge \"$planet1\" ] && [ \"${AllPlanetIndex[$i]}\"\
    \ -le \"$planet2\" ]\n            then\n                Res+=(\"${Planet[$i]}\"\
    )\n            fi\n        done\n        echo \"[\\\"${Res[*]}\\\"]\"\n    fi",
  "  # create a custom array (for fun)\n  declare -a planets=(\n    \"Mercury\"\n\
    \    \"Venus\"\n    \"Earth\"\n    \"Mars\"\n    \"Jupiter\"\n    \"Saturn\"\n\
    \    \"Uranus\"\n    \"Neptune\"\n  )\n  # create an empty array to store the\
    \ output\n  res=()\n  # TODO: fix this method\n  for planet in \"${planets[@]}\"\
    ; do\n    # I could use bc to compare float number\n    if [[ $planet =~ $1 ]];\
    \ then\n      continue\n    fi\n    if [[ $planet =~ $2 ]]; then\n      break\n\
    \    fi\n    res+=(\"$planet\")\n  done\n  echo $res", "  if [[ ${1} =~ ^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$\
    \ ]] &&\n     [[ ${2} =~ ^(Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)$\
    \ ]]; then\n     \n    planet1_index=0\n    planet2_index=0\n    for i in 0 1\
    \ 2 3 4 5 6 7; do\n      if [[ \"${planet_name[$i]}\" == \"${1}\" ]]; then\n \
    \       planet1_index=${i}\n      fi\n      if [[ \"${planet_name[$i]}\" == \"\
    ${2}\" ]]; then\n        planet2_index=${i}\n      fi\n    done\n    [[ ${planet1_index}\
    \ -lt ${planet2_index} ]] && awk -v low=${planet1_index} -v high=${planet2_index}\
    \ '{if (NR>low && NR<high) {print $0}}' planet_distance.txt\n    [[ ${planet1_index}\
    \ -gt ${planet2_index} ]] && awk -v low=${planet2_index} -v high=${planet1_index}\
    \ '{if (NR>low && NR<high) {print $0}}' planet_distance.txt\n  fi", "    # Check\
    \ the input parameters\n    if ! [ \"$1\" ] || ! [ \"$2\" ]; then\n        echo\
    \ \"usage: $(basename $0) first_planet second_planet\"\n        return 1\n   \
    \ fi\n    local first=\"$1\"\n    local second=\"$2\"\n    # Order the planets\
    \ in terms of proximity to the sun\n    local planets=(Mercury Venus Earth Mars\
    \ Jupiter Saturn Uranus Neptune)\n    # Build the list of planets to output\n\
    \    local to_output\n    local found_one=false\n    local found_two=false\n \
    \   local index=0\n    for planet in \"${planets[@]}\"; do\n        if [ \"$planet\"\
    \ == \"$first\" ]; then\n            found_one=true\n        fi\n        if [\
    \ \"$planet\" == \"$second\" ]; then\n            found_two=true\n        fi\n\
    \        if [ \"$found_one\" == true ] && [ \"$found_two\" == false ]; then\n\
    \            to_output=\"$to_output $planet\"\n        fi\n        index=$(($index\
    \ + 1))\n    done\n    # Check if the planets were found\n    if [ \"$found_one\"\
    \ == false ] || [ \"$found_two\" == false ]; then\n        echo \"usage: $(basename\
    \ $0) first_planet second_planet\"\n        return 1\n    fi\n    # Output the\
    \ planets\n    echo $to_output", "    if [[ $1 == \"Mercury\" ]]; then\n     \
    \   start=0\n    elif [[ $1 == \"Venus\" ]]; then\n        start=1\n    elif [[\
    \ $1 == \"Earth\" ]]; then\n        start=2\n    elif [[ $1 == \"Mars\" ]]; then\n\
    \        start=3\n    elif [[ $1 == \"Jupiter\" ]]; then\n        start=4\n  \
    \  elif [[ $1 == \"Saturn\" ]]; then\n        start=5\n    elif [[ $1 == \"Uranus\"\
    \ ]]; then\n        start=6\n    elif [[ $1 == \"Neptune\" ]]; then\n        start=7\n\
    \    else\n        echo \"\"\n        return\n    fi\n    if [[ $2 == \"Mercury\"\
    \ ]]; then\n        end=0\n    elif [[ $2 == \"Venus\" ]]; then\n        end=1\n\
    \    elif [[ $2 == \"Earth\" ]]; then\n        end=2\n    elif [[ $2 == \"Mars\"\
    \ ]]; then\n        end=3\n    elif [[ $2 == \"Jupiter\" ]]; then\n        end=4\n\
    \    elif [[ $2 == \"Saturn\" ]]; then\n        end=5\n    elif [[ $2 == \"Uranus\"\
    \ ]]; then\n        end=6\n    elif [[ $2 == \"Neptune\" ]]; then\n        end=7\n\
    \    else\n        echo \"\"\n        return\n    fi\n    planets=(\"Mercury\"\
    \ \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n\
    \    if [[ $start > $end ]]; then\n        echo \"[\"\n        while [[ $start\
    \ -gt $end ]]; do\n            echo \\\"${planets[$start]}\\\"\n            ((start-=1))\n\
    \        done\n        echo \"]\"\n    else\n        echo \"[\"\n        while\
    \ [[ $start -lt $end ]]; do\n            echo \\\"${planets[$start]}\\\"\n   \
    \         ((start+=1))\n        done\n        echo \"]\"\n    fi", "\tlist=(\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"\
    )\n\tfirst=0\n\tend=0\n\tfor i in $(seq 0 7); do\n\t\tif [ \"${list[$i]}\" = \"\
    $1\" ]; then\n\t\t\tfirst=$i\n\t\tfi\n\t\tif [ \"${list[$i]}\" = \"$2\" ]; then\n\
    \t\t\tend=$i\n\t\tfi\n\tdone\n\tif [ $first -lt $end ]; then\n\t\tfor i in $(seq\
    \ $first $end); do\n\t\t\techo ${list[$i]}\n\t\tdone\n\telse\n\t\tfor i in $(seq\
    \ $end $first); do\n\t\t\techo ${list[$i]}\n\t\tdone\n\tfi", "  local planets\n\
    \  planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune)\n  local planets_small\n\
    \  local planets_big\n  local planets_out\n  local i\n  i=0\n  while [ ${planets[$i]}\
    \ != $1 ] && [ $i -lt 8 ]; do\n    ((i++))\n  done\n  if [ $i -lt 8 ]; then\n\
    \    planets_small=$i\n  else\n    echo \"[]\"\n    return\n  fi\n  i=0\n  while\
    \ [ ${planets[$i]} != $2 ] && [ $i -lt 8 ]; do\n    ((i++))\n  done\n  if [ $i\
    \ -lt 8 ]; then\n    planets_big=$i\n  else\n    echo \"[]\"\n    return\n  fi\n\
    \  if [ $planets_small -gt $planets_big ]; then\n    i=$planets_small\n    planets_small=$planets_big\n\
    \    planets_big=$i\n  fi\n  planets_out=\"[\"\n  i=$planets_small\n  while [\
    \ $i -lt $planets_big ]; do\n    ((i++))\n    planets_out=\"$planets_out\\\"${planets[$i]}\\\
    \",\"\n  done\n  echo \"${planets_out%?}]\"", "    printf \"\\\"$1\\\"\\n\" |\
    \ bf - \n    printf \"\\\"$2\\\"\\n\" | bf - ", "    planets=(\"Mercury\" \"Venus\"\
    \ \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\")\n    # Write\
    \ your code here\n    p1=0\n    p2=0\n    num1=0\n    num2=0\n    for ((i=0;i<8;i++))\n\
    \    do\n        if [ \"${planets[$i]}\" = \"$1\" ]\n        then\n          \
    \  p1=${planets[$i]}\n            num1=$i\n        fi\n        if [ \"${planets[$i]}\"\
    \ = \"$2\" ]\n        then\n            p2=${planets[$i]}\n            num2=$i\n\
    \        fi\n    done\n    if [ $p1 = 0 ] || [ $p2 = 0 ]\n    then\n        echo\
    \ \"[]\"\n    else\n        if [ $num1 -gt $num2 ]\n        then\n           \
    \ echo \"[]\"\n        else\n            cnt=0\n            for ((i=$num1+1;i<$num2;i++))\n\
    \            do\n                array[$cnt]=${planets[$i]}\n                cnt=$(($cnt+1))\n\
    \            done\n            echo $cnt\n            # if [ $cnt -lt 1 ]\n  \
    \          # then\n            #     echo \"[]\"\n            # else\n       \
    \     #     echo \"['\"$array\"']\"\n            # fi\n        fi\n    fi", " \
    \  # Fill in here with the name of each planet\n   # Use a case insentive match\n\
    \   case $1 in\n      Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)\n\
    \         a=$1\n         ;;\n      *)\n         a=\n         ;;\n   esac\n   case\
    \ $2 in\n      Mercury|Venus|Earth|Mars|Jupiter|Saturn|Uranus|Neptune)\n     \
    \    b=$2\n         ;;\n      *)\n         b=\n         ;;\n   esac\n   # check\
    \ that both a and b are set, otherwise return\n   [ -z \"$a\" -o -z \"$b\" ] &&\
    \ return\n   # Fill in here with the order of planets from closest to the Sun\
    \ to \n   # farthest\n   planets=(Mercury Venus Earth Mars Jupiter Saturn Uranus\
    \ Neptune)\n   # return the list of planets between $a and $b\n   planets=(`echo\
    \ ${planets[@]} | sed -E \"s/.*$a.*$b.*|.*$b.*$a.*//g\"`)\n   if [ -z \"$planets\"\
    \ ]; then\n      echo \"[]\"\n   else\n      echo ${planets[@]} | sed 's/ /\"\
    , \"/g' | sed 's/^/[\\\"/' | sed 's/$/\\\"]/'\n   fi", "  if [[ $1 == \"Mercury\"\
    \ && $2 == \"Venus\" ]]; then echo \"Earth\";\n  elif [[ $1 == \"Venus\" && $2\
    \ == \"Earth\" ]]; then echo \"Mercury\";\n  elif [[ $1 == \"Earth\" && $2 ==\
    \ \"Mercury\" ]]; then echo \"Venus\";\n  elif [[ $1 == \"Mercury\" && $2 == \"\
    Earth\" ]]; then echo \"Venus\";\n  elif [[ $1 == \"Venus\" && $2 == \"Mercury\"\
    \ ]]; then echo \"Earth\";\n  elif [[ $1 == \"Earth\" && $2 == \"Venus\" ]]; then\
    \ echo \"Mercury\";\n  elif [[ $1 == \"Venus\" && $2 == \"Mars\" ]]; then echo\
    \ \"Earth\";\n  elif [[ $1 == \"Mars\" && $2 == \"Venus\" ]]; then echo \"Earth\"\
    ;\n  elif [[ $1 == \"Earth\" && $2 == \"Mars\" ]]; then echo \"Venus\";\n  elif\
    \ [[ $1 == \"Mars\" && $2 == \"Earth\" ]]; then echo \"Venus\";\n  elif [[ $1\
    \ == \"Venus\" && $2 == \"Jupiter\" ]]; then echo \"Earth Mars\";\n  elif [[ $1\
    \ == \"Jupiter\" && $2 == \"Venus\" ]]; then echo \"Earth Mars\";\n  elif [[ $1\
    \ == \"Earth\" && $2 == \"Jupiter\" ]]; then echo \"Venus Mars\";\n  elif [[ $1\
    \ == \"Jupiter\" && $2 == \"Earth\" ]]; then echo \"Venus Mars\";\n  elif [[ $1\
    \ == \"Mars\" && $2 == \"Jupiter\" ]]; then echo \"Earth Venus\";\n  elif [[ $1\
    \ == \"Jupiter\" && $2 == \"Mars\" ]]; then echo \"Earth Venus\";\n  elif [[ $1\
    \ == \"Venus\" && $2 == \"Saturn\" ]]; then echo \"Earth Mars Jupiter\";\n  elif\
    \ [[ $1 == \"Saturn\" && $2 == \"Venus\" ]]; then echo \"Earth Mars Jupiter\"\
    ;\n  elif [[ $1 == \"Earth\" && $2 == \"Saturn\" ]]; then echo", "    if [[ $1\
    \ =~ \"Mercury\" ]]; then\n        if [[ $2 =~ \"Mercury\" ]]; then\n        \
    \    :\n        elif [[ $2 =~ \"Venus\" ]]; then\n            echo '\"Venus\"\
    '\n        elif [[ $2 =~ \"Earth\" ]]; then\n            echo '\"Venus\"'\n  \
    \          echo '\"Earth\"'\n        elif [[ $2 =~ \"Mars\" ]]; then\n       \
    \     echo '\"Venus\"'\n            echo '\"Earth\"'\n            echo '\"Mars\"\
    '\n        elif [[ $2 =~ \"Jupiter\" ]]; then\n            echo '\"Venus\"'\n\
    \            echo '\"Earth\"'\n            echo '\"Mars\"'\n            echo '\"\
    Jupiter\"'\n        elif [[ $2 =~ \"Saturn\" ]]; then\n            echo '\"Venus\"\
    '\n            echo '\"Earth\"'\n            echo '\"Mars\"'\n            echo\
    \ '\"Jupiter\"'\n            echo '\"Saturn\"'\n        elif [[ $2 =~ \"Uranus\"\
    \ ]]; then\n            echo '\"Venus\"'\n            echo '\"Earth\"'\n     \
    \       echo '\"Mars\"'\n            echo '\"Jupiter\"'\n            echo '\"\
    Saturn\"'\n            echo '\"Uranus\"'\n        elif [[ $2 =~ \"Neptune\" ]];\
    \ then\n            echo '\"Venus\"'\n            echo '\"Earth\"'\n         \
    \   echo '\"Mars\"'\n            echo '\"Jupiter\"'\n            echo '\"Saturn\"\
    '\n            echo '\"Uranus\"'\n            echo '\"Neptune\"'\n        else\n\
    \            :\n        fi\n    elif [[ $1 =~ \"Venus\" ]]; then\n        if [[\
    \ $2 =~ \"Mercury\" ]]; then\n            :\n        elif [[ $2 =~ \"Venus\" ]];\
    \ then\n            :\n        elif [[ $2 =~ \"Earth\" ]]; then\n            echo\
    \ '\"Earth\"'\n        elif [[ $2 =~ \"Mars\" ]]; then\n            echo '\"Earth\"\
    '\n            echo '\"Mars\"'\n        elif [[ $2 =~ \"Jupiter\" ]]; then\n \
    \           echo '\"Earth\"'\n            echo '\"Mars\"'\n            echo '\"\
    Jupiter\"'", "    # implement the function\n    if [[ \"$1\" == \"Mercury\" ]];\
    \ then\n        if [[ \"$2\" == \"Mercury\" ]]; then\n            echo \"Mercury\"\
    \n        elif [[ \"$2\" == \"Venus\" ]]; then\n            echo \"[\\\"Venus\\\
    \"]\"\n        elif [[ \"$2\" == \"Earth\" ]]; then\n            echo \"[\\\"\
    Venus\\\", \\\"Earth\\\"]\"\n        elif [[ \"$2\" == \"Mars\" ]]; then\n   \
    \         echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\"]\"\n        elif\
    \ [[ \"$2\" == \"Jupiter\" ]]; then\n            echo \"[\\\"Venus\\\", \\\"Earth\\\
    \", \\\"Mars\\\", \\\"Jupiter\\\"]\"\n        elif [[ \"$2\" == \"Saturn\" ]];\
    \ then\n            echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\
    \", \\\"Saturn\\\"]\"\n        elif [[ \"$2\" == \"Uranus\" ]]; then\n       \
    \     echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"\
    Saturn\\\", \\\"Uranus\\\"]\"\n        elif [[ \"$2\" == \"Neptune\" ]]; then\n\
    \            echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\
    \", \\\"Saturn\\\", \\\"Uranus\\\", \\\"Neptune\\\"]\"\n        fi\n    elif [[\
    \ \"$1\" == \"Venus\" ]]; then\n        if [[ \"$2\" == \"Venus\" ]]; then\n \
    \           echo \"Venus\"\n        elif [[ \"$2\" == \"Earth\" ]]; then\n   \
    \         echo \"[\\\"Earth\\\"]\"\n        elif [[ \"$2\" == \"Mars\" ]]; then\n\
    \            echo \"[\\\"Earth\\\", \\\"Mars\\\"]\"\n        elif [[ \"$2\" ==\
    \ \"Jupiter\" ]]; then\n            echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"\
    Jupiter\\\"]\"\n        elif [[ \"$2\" == \"Saturn\" ]]; then\n            echo\
    \ \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\"\n       \
    \ elif [[ \"$2\" == \"Uranus\" ]]; then\n            echo \"[\\\"Earth\\\", \\\
    \"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\"\n        elif [[\
    \ \"$2\" == \"Neptune\" ]]; then\n            echo \"[", "    planets_string=(\"\
    Mercury\" \"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\" \"Uranus\" \"Neptune\"\
    )\n    index1=0\n    index2=0\n    min_value=$1\n    max_value=$2\n    if [ \"\
    ${min_value}\" == \"${max_value}\" ]; then\n        echo \"please input two different\
    \ planet name\"\n        return 1\n    fi\n    for ((i=0; i<${#planets_string[@]};\
    \ i++)); do\n        if [ \"${min_value}\" == \"${planets_string[i]}\" ]; then\n\
    \            index1=$i\n        fi\n        if [ \"${max_value}\" == \"${planets_string[i]}\"\
    \ ]; then\n            index2=$i\n        fi\n    done\n    if [ $index1 -gt $index2\
    \ ]; then\n        return 1\n    fi\n    for ((j=$index1+1; j<$index2; j++));\
    \ do\n        echo '\"'${planets_string[j]}'\"'\n    done", "    case $1 in\n\
    \        \"Mercury\")\n            case $2 in\n                \"Mercury\") echo\
    \ \"[]\";;\n                \"Venus\") echo \"[]\";;\n                \"Earth\"\
    ) echo \"\\\"Venus\\\"\";;\n                \"Mars\") echo \"[\\\"Venus\\\", \\\
    \"Earth\\\"]\";;\n                \"Jupiter\") echo \"[\\\"Venus\\\", \\\"Earth\\\
    \", \\\"Mars\\\"]\";;\n                \"Saturn\") echo \"[\\\"Venus\\\", \\\"\
    Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\";;\n                \"Uranus\") echo\
    \ \"[\\\"Venus\\\", \\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\
    \"]\";;\n                \"Neptune\") echo \"[\\\"Venus\\\", \\\"Earth\\\", \\\
    \"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\";;\n           \
    \     *) echo \"Error, $2 is not a planet.\"\n            esac\n            ;;\n\
    \        \"Venus\")\n            case $2 in\n                \"Mercury\") echo\
    \ \"[]\";;\n                \"Venus\") echo \"[]\";;\n                \"Earth\"\
    ) echo \"[]\";;\n                \"Mars\") echo \"\\\"Earth\\\"\";;\n        \
    \        \"Jupiter\") echo \"[\\\"Earth\\\", \\\"Mars\\\"]\";;\n             \
    \   \"Saturn\") echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"]\";;\n  \
    \              \"Uranus\") echo \"[\\\"Earth\\\", \\\"Mars\\\", \\\"Jupiter\\\"\
    , \\\"Saturn\\\"]\";;\n                \"Neptune\") echo \"[\\\"Earth\\\", \\\"\
    Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\";;\n             \
    \   *) echo \"Error, $2 is not a planet.\"\n            esac\n            ;;\n\
    \        \"Earth\")\n            case $2 in\n                \"Mercury\") echo\
    \ \"\\\"Venus\\\"\";;\n                \"Venus\") echo \"[]\";;\n            \
    \    \"Earth\") echo \"[]\";;\n                \"Mars\") echo \"[]\";;\n     \
    \           \"Jupiter\") echo \"\\\"Mars\\\"\";;\n                \"Saturn\")\
    \ echo \"[\\\"Mars\\\", \\\"Jupiter\\\"]\";;\n                \"Uranus\") echo\
    \ \"[\\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\"]\";;\n                \"Neptune\"\
    ) echo \"[\\\"Mars\\\", \\\"Jupiter\\\", \\\"Saturn\\\", \\\"Uranus\\\"]\";;\n\
    \                *) echo \"Error, $2 is not a planet.\"\n            esac\n  \
    \         ", "\t# If planet $1 and planet $2 are not the same planet, \n\t# then\
    \ print planet $1 and planet $2\n\tif [ \"$1\" != \"$2\" ]; then\n\t\techo \"\
    $1\" \"$2\"\n\tfi"]
stop_tokens:
- "\n}"
