name: HumanEval_147_get_max_triples
language: sh
prompt: "#!/bin/bash\n# You are given a positive integer n. You have to create an\
  \ integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of\
  \ a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a\
  \ where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n\
  # >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n\
  # The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples()\
  \ {\n"
tests: "}\n\ncandidate() {\n    get_max_triples \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"5\") = \"1\" ]]\n    [[ $(candidate \"6\") = \"4\" ]]\n  \
  \  [[ $(candidate \"10\") = \"36\" ]]\n    [[ $(candidate \"100\") = \"53361\" ]]\n\
  }\n\nrun_test"
completions: ["    if [[ $1 =~ ^-?[0-9]+$ ]]; then\n        length=$1\n        # Call\
    \ the Python script with the first argument\n        python <(cat << PYTHON\n\
    from itertools import combinations\n\n# Generate an array with n elements\ndef\
    \ get_array(n):\n    array = []\n    for i in range(n):\n        array.append(i\
    \ * i - i + 1)\n    return array\n\n# Get the list of triples that have a sum\
    \ divisible by 3\ndef get_triples(array):\n    triples = []\n    for triple in\
    \ combinations(array, 3):\n        if sum(triple) % 3 == 0:\n            triples.append(triple)\n\
    \    return triples\n\narray = get_array(${length})\ntriples = get_triples(array)\n\
    print(len(triples))\nPYTHON\n        )\n    else\n        echo \"Please enter\
    \ a positive integer\"\n    fi", "    local len=$1\n    local remainder\n    let\
    \ \"remainder = $len % 3\"\n    local max_triples=$(( $len / 3 ))\n    if [[ \"\
    $remainder\" -eq \"1\" ]]; then\n        echo \"$max_triples\"\n    elif [[ \"\
    $remainder\" -eq \"2\" ]]; then\n        let \"max_triples += 1\"\n        echo\
    \ \"$max_triples\"\n    fi", "    n=$1\n    echo $(printf '%s\\n' $(seq 1 $n)\
    \ | awk '{print ($1 * $1 - $1 + 1) % 3}' | tr -cd '[\\012*]' | wc -c)", "  local\
    \ n=$1\n  local a=\"\"\n  local m=\"\"\n  for (( i=1; i<=$n; i++ )); do\n    ((\
    \ m = i * i - i + 1 ))\n    a+=\" $m\"\n  done\n  echo $a\n  echo $m", "    #\
    \ Write your code here\n    echo \"1\"", "    local a=\"${1}\"; shift\n    # write\
    \ your solution here\n    local i j k\n    local sum\n    local counter=0\n  \
    \  for ((i=1; i<=$((a-2)); i++)); do\n        for ((j=$((i+1)); j<=$((a-1)); j++));\
    \ do\n            for ((k=$((j+1)); k<=$a; k++)); do\n                sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    ((counter++))\n\
    \                fi\n            done\n        done\n    done\n    echo $counter",
  "    declare -a a\n    declare -i n=0\n    declare -i count=0\n    # input the number\
    \ of elements in the array\n    read n\n    # input the elements of the array\n\
    \    for ((i=0; i<n; i++)); do\n        read a[$i]\n    done\n    # write your\
    \ solution here\n    echo \"Implement your solution here\"", "  local last_index=$(($1\
    \ - 1))\n  local sum=0\n  local counter=0\n  local arr=\"\"\n  while [[ ${counter}\
    \ -le ${last_index} ]]; do\n    let \"current = ${counter} * ${counter} - ${counter}\
    \ + 1\"\n    arr+=\"${current} \"\n    let \"counter += 1\"\n  done\n  local number_of_triples=0\n\
    \  for i in $(echo \"${arr}\"); do\n    for j in $(echo \"${arr}\"); do\n    \
    \  for k in $(echo \"${arr}\"); do\n        if [[ \"$((${i} + ${j} + ${k}))\"\
    \ -eq 0 ]]; then\n          let \"number_of_triples += 1\"\n        fi\n     \
    \ done\n    done\n  done\n  echo \"${number_of_triples}\"", "    local input=$1\n\
    \    local output=0\n    local curr_val=0\n    local curr_sum=0\n    local curr_int=0\n\
    \    local prev_int=0\n    local pairs_size=0\n    local pairs=()\n    local triples=()\n\
    \    local i=0\n    local j=0\n    local k=0\n    local pair=0\n    local triple=0\n\
    \    local minus_num=0\n    local minus_denom=0\n    for ((i=1; i<input; i++));\
    \ do\n        curr_val=$((i*i-i+1))\n        curr_sum=$((curr_sum+curr_val))\n\
    \        minus_num=$((curr_sum%3))\n        minus_denom=$((3-minus_num))\n   \
    \     if [[ $minus_num -eq 0 ]]; then\n            triples[$i]=$((minus_denom%3))\n\
    \        else\n            triples[$i]=$((minus_denom%3+3))\n        fi\n    \
    \    if [[ $i -gt 1 ]]; then\n            pairs_size=$((i-1))\n            for\
    \ ((j=0; j<pairs_size; j++)); do\n                curr_int=$((i-j))\n        \
    \        prev_int=$((curr_int-1))\n                pair=$((pairs[$prev_int]))\n\
    \                triple=$((pair+triples[$j]+curr_val))\n                if [[\
    \ $((triple%3)) -eq 0 ]]; then\n                    output=$((output+1))\n   \
    \             fi\n            done\n        fi\n        pairs[$i]=$((curr_sum%3))\n\
    \    done\n    echo $output", "  local number=$1\n  let count=0\n  for (( i=1;\
    \ i<$number; i++ )) do\n    let a=$(( $i * $i - $i + 1 ))\n    let b=$(( ($number\
    \ - $i) * ($number - $i) - ($number - $i) + 1 ))\n    let s=$(( $a + $b ))\n \
    \   if [[ $(( $s % 3 )) -eq 0 ]]; then\n      ((count++))\n    fi\n  done\n  echo\
    \ $count", "    local -a arr=($(seq -s \" \" 1 $1))\n    local count=0\n    for\
    \ i in \"${arr[@]}\"; do\n        for j in \"${arr[@]}\"; do\n            for\
    \ k in \"${arr[@]}\"; do\n                ((i < j && j < k)) && [[ $((i + j +\
    \ k))%3 -eq 0 ]] && ((count++))\n            done\n        done\n    done\n  \
    \  echo $((count/6))", "    max=$1\n    #Write your code here", "    if [[ $1\
    \ -le 3 ]]; then\n        echo \"0\"\n    elif [[ $1 -eq 4 ]]; then\n        echo\
    \ \"1\"\n    else\n        local count=1\n        local num=$1\n        local\
    \ num2=$1\n        while [[ $num -ge 4 ]]; do\n            while [[ $num2 -ge\
    \ 3 ]]; do\n                if [[ $((num*num-num+1+num2*num2-num2+1+3*3-3+1))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \                num2=$((num2-1))\n            done\n            num=$((num-1))\n\
    \            num2=$((num-1))\n        done\n        echo \"$count\"\n    fi",
  "    local n=\"$1\"\n    local a=\"0\"\n    local count=0\n    for (( i=1; i<=n;\
    \ i++ )); do\n        a=$((i*i-i+1))\n        for (( j=i+1; j<=n; j++ )); do\n\
    \            b=$((j*j-j+1))\n            for (( k=j+1; k<=n; k++ )); do\n    \
    \            c=$((k*k-k+1))\n                if [[ $(($a+$b+$c))%3 -eq 0 ]]; then\n\
    \                    ((count++))\n                fi\n            done\n     \
    \   done\n    done\n    echo \"$count\"", "  local n=$1\n  echo \"print(len([1\
    \ for i in range(1,$n) for j in range(i+1,$n) for k in range(j+1,$n) if (i*i-i+1+j*j-j+1+k*k-k+1)%3==0]))\"\
    \ | python", "    i=0\n    for ((i=1; i<=$1; i++)); do\n        if ((i%3 == 0));\
    \ then\n            # echo $i\n            number=$((i*i - i + 1))\n         \
    \   echo $number\n        fi\n    done", "    local n=$1\n    local total=0\n\
    \    for (( i=1; i<=n; i++ )); do\n        for (( j=i+1; j<=n; j++ )); do\n  \
    \          for (( k=j+1; k<=n; k++ )); do\n                (( total += ((i*i-i+1)\
    \ + (j*j-j+1) + (k*k-k+1)) % 3 == 0 ))\n            done\n        done\n    done\n\
    \    echo $total", "    local n=\"$1\"\n    local i j k\n    local a b c\n   \
    \ local x y z\n    local total=0\n    for ((i=1; i<$n; i++)); do\n        a=$((i*i-i+1))\n\
    \        for ((j=i+1; j<$n; j++)); do\n            b=$((j*j-j+1))\n          \
    \  for ((k=j+1; k<$n; k++)); do\n                c=$((k*k-k+1))\n            \
    \    ((x=a+b+c))\n                ((y=x%3))\n                if [[ \"$y\" -eq\
    \ 0 ]]; then\n                    ((total++))\n                fi\n          \
    \  done\n        done\n    done\n    echo \"$total\"", "    local a=()\n    for\
    \ ((i=1; i<=$1; i++)); do\n        a+=($((i*i-i+1)))\n    done\n    count=0\n\
    \    for ((i=0; i<$1-2; i++)); do\n        for ((j=i+1; j<$1-1; j++)); do\n  \
    \          for ((k=j+1; k<$1; k++)); do\n                if [[ $(( ${a[i]} + ${a[j]}\
    \ + ${a[k]} ))%3 -eq 0 ]]; then\n                    count=$((count+1))\n    \
    \            fi\n            done\n        done\n    done\n    echo $count", " \
    \   local total=0\n    for ((i=1; i<=$1; i++)); do\n        for ((j=i+1; j<=$1;\
    \ j++)); do\n            for ((k=j+1; k<=$1; k++)); do\n                (( (i*i-i+1)\
    \ + (j*j-j+1) + (k*k-k+1) % 3 == 0 )) && ((total++))\n            done\n     \
    \   done\n    done\n    echo \"$total\"", "  local n=$1\n  local -a a\n  local\
    \ sum=0\n  local count=0\n  local -a count_array\n  local -i index=0\n  for ((i=1;\
    \ i<=n; i++)); do\n    a[i-1]=$(( i * i - i + 1 ))\n  done\n  for ((i=0; i<n;\
    \ i++)); do\n    for ((j=i+1; j<n; j++)); do\n      for ((k=j+1; k<n; k++)); do\n\
    \        if [[ ( ${a[i]} + ${a[j]} + ${a[k]} ) % 3 -eq 0 ]]; then\n          count_array[index++]=${a[i]}\n\
    \          count_array[index++]=${a[j]}\n          count_array[index++]=${a[k]}\n\
    \          count=$(( count + 1 ))\n        fi\n      done\n    done\n  done\n\
    \  echo \"$count ${count_array[@]}\"", "\tlocal i\n\tlocal j\n\tlocal k\n\tlocal\
    \ sum\n\tlocal count\n\tlocal n=\"$1\"\n\t\n\tcount=0\n\tfor ((i=1; i<=n; i++));\
    \ do\n\t\tfor ((j=i+1; j<=n; j++)); do\n\t\t\tfor ((k=j+1; k<=n; k++)); do\n\t\
    \t\t\tsum=$((i*i-i+1 + j*j-j+1 + k*k-k+1))\n\t\t\t\t[[ $((sum % 3)) -eq 0 ]] &&\
    \ ((count++))\n\t\t\tdone\n\t\tdone\n\tdone\n\techo \"$count\"", "    # SETUP\n\
    \    array_size=$1\n    count=0\n    # SOLUTION\n    for ((i=1; i<$array_size;\
    \ i++)); do\n        for ((j=$i+1; j<$array_size; j++)); do\n            for ((k=$j+1;\
    \ k<$array_size; k++)); do\n                a_i=$((i*i-i+1))\n               \
    \ a_j=$((j*j-j+1))\n                a_k=$((k*k-k+1))\n                if [[ $((a_i+a_j+a_k))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count", "  local -i n=$1\n  a=($(seq\
    \ 1 $n))\n  for ((i=0; i<n; i++)); do\n    ((a[i]=i*i-i+1))\n  done\n  # echo\
    \ \"${a[@]}\"\n  local -i count=0\n  for ((i=0; i<n-2; i++)); do\n    for ((j=i+1;\
    \ j<n-1; j++)); do\n      for ((k=j+1; k<n; k++)); do\n        if (((a[i]+a[j]+a[k])%3==0));\
    \ then\n          ((count++))\n        fi\n      done\n    done\n  done\n  echo\
    \ $count", "  local a\n  local sum\n  local i\n  local j\n  local k\n  local count\n\
    \  count=0\n  for i in `seq 1 $1`; do\n    (( a[i] = i * i - i + 1 ))\n  done\n\
    \  for i in `seq 1 $1`; do\n    for j in `seq 1 $1`; do\n      if [ $j -gt $i\
    \ ]; then\n        for k in `seq 1 $1`; do\n          if [ $k -gt $j ]; then\n\
    \            (( sum = a[i] + a[j] + a[k] ))\n            if [ $(($sum % 3)) -eq\
    \ 0 ]; then\n              (( count++ ))\n            fi\n          fi\n     \
    \   done\n      fi\n    done\n  done\n  echo $count", "\tn=$1\n\tfor (( i=1; i<=n;\
    \ i++ )); do\n\t\t# a[i] = i * i - i + 1\n\t\teval \"a[$i]=$((i * i - i + 1))\"\
    \n\tdone\n\ttotal_triples=0\n\tfor (( i=1; i<=n; i++ )); do\n\t\tfor (( j=i+1;\
    \ j<=n; j++ )); do\n\t\t\tfor (( k=j+1; k<=n; k++ )); do\n\t\t\t\tif [[ $((${a[$i]}\
    \ + ${a[$j]} + ${a[$k]}))%3 -eq 0 ]]; then\n\t\t\t\t\ttotal_triples=$((total_triples\
    \ + 1))\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\techo \"$total_triples\"",
  "    local n=\"$1\"\n    local a=\"\"\n    for ((i=1; i<=n; i++)); do\n        a+=\"\
    $(( (i * i) - i + 1 )) \"\n    done\n    local -A triples\n    local i=0\n   \
    \ for ((i=0; i<n; i++)); do\n        local a1=\"${a[$i]}\"\n        local j=0\n\
    \        for ((j=i+1; j<n; j++)); do\n            local a2=\"${a[$j]}\"\n    \
    \        local k=0\n            for ((k=j+1; k<n; k++)); do\n                local\
    \ a3=\"${a[$k]}\"\n                local sum=$(( a1 + a2 + a3 ))\n           \
    \     if [[ $(( sum % 3 )) -eq 0 ]]; then\n                    triples[\"$a1 $a2\
    \ $a3\"]=1\n                fi\n            done\n        done\n    done\n   \
    \ echo \"${#triples[@]}\"", "    local a=()\n    local n=$1\n    local i=0\n \
    \   local output=0\n    local s=0\n    while [ $i -lt $n ]; do\n        a[$i]=$((i\
    \ * i - i + 1))\n        i=$((i + 1))\n    done\n    echo \"${a[@]}\"\n    for\
    \ ((i=0; i<$n; i++)); do\n        for ((j=i+1; j<$n; j++)); do\n            for\
    \ ((k=j+1; k<$n; k++)); do\n                s=$((a[i] + a[j] + a[k]))\n      \
    \          if [ $((s % 3)) -eq 0 ]; then\n                    output=$((output\
    \ + 1))\n                fi\n            done\n        done\n    done\n    echo\
    \ \"$output\"", "    declare -a a\n    local n=$1\n    local sum=0\n    local\
    \ -i count=0\n    for ((i=1; i<=n; i++)); do\n        a[i]=$((i*i-i+1))\n    done\n\
    \    for ((i=1; i<=n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n      \
    \      for ((k=j+1; k<=n; k++)); do\n                (( sum = a[i] + a[j] + a[k]\
    \ ))\n                if (( $sum % 3 == 0 )); then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count",
  "    local -n arr=$1\n    local len=${#arr[@]}\n    local -i maxTriples=0\n    local\
    \ -i sum=0\n    local -i a=0\n    local -i b=0\n    local -i c=0\n    for ((i=0;\
    \ i<len; i++)); do\n        a=${arr[$i]}\n        for ((j=i+1; j<len; j++)); do\n\
    \            b=${arr[$j]}\n            for ((k=j+1; k<len; k++)); do\n       \
    \         c=${arr[$k]}\n                sum=$((a+b+c))\n                if [[\
    \ $((sum%3)) -eq 0 ]]; then\n                    maxTriples=$((maxTriples+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $maxTriples",
  "  local -i num=$1\n  local a=()\n  local -i i j k sum triple=0\n  # build an array\
    \ where each element i * i - i + 1\n  for ((i=1; i<=num; i++)); do\n    (( a[i]\
    \ = i * i - i + 1 ))\n  done\n  # iterate through array and check for the required\
    \ multiple of 3\n  for ((i=1; i<num-1; i++)); do\n    for ((j=i+1; j<num; j++));\
    \ do\n      for ((k=j+1; k<=num; k++)); do\n        (( sum = a[i] + a[j] + a[k]\
    \ ))\n        (( sum % 3 == 0 )) && (( triple++ ))\n      done\n    done\n  done\n\
    \  echo \"$triple\"", "    INPUT=\"$1\"\n    OUTPUT=$(echo \"($INPUT*($INPUT-1)*($INPUT-2))/6\"\
    \ | bc)\n    echo \"$OUTPUT\"", "    local arr=(\"${!1}\")\n    local length=${#arr[@]}\n\
    \    local triple=0\n    local sum=0\n    # loop over the array and count triplets\n\
    \    for (( i=0; i<${length}; i++ )); do\n        for (( j=i+1; j<${length}; j++\
    \ )); do\n            for (( k=j+1; k<${length}; k++ )); do\n                #\
    \ add the three elements of the triplet\n                sum=$(( arr[i] + arr[j]\
    \ + arr[k] ))\n                # if the sum is divisible by 3, increment triplet\
    \ counter\n                if [ $(( sum % 3 )) -eq 0 ]; then\n               \
    \     triple=$(( triple + 1 ))\n                fi\n            done\n       \
    \ done\n    done\n    echo $triple", "    (( $# != 1 )) && echo \"Usage: $0 <n>\"\
    \ && return 1\n    (( $1 < 3 )) && echo \"0\" && return 0\n    local last=$(($1-1))\n\
    \    local sum=$(( ($1 * ($1 + 1)) / 2 ))\n    (( $sum % 3 == 0 )) && echo $((\
    \ $last * ($last - 1) / 2 )) && return 0\n    local first=$(( ($sum / 3) + 1 ))\n\
    \    (( $first % 3 == 0 )) && echo $(( $last * ($last - 1) / 2 )) && return 0\n\
    \    local count=$(( ($first - $1) + ($last - $first) + 1 ))\n    (( $count %\
    \ 3 == 0 )) && echo $(( $last * ($last - 1) / 2 )) && return 0\n    (( $count\
    \ > 2 )) && echo $(( ($last * ($last - 1) / 2) - ( ($count * ($count - 1)) / 2\
    \ ) )) && return 0\n    echo \"0\"", "  MAX_TRIPLES=0\n  for i in $(seq \"$1\"\
    )\n  do\n    TRIPLES=$(echo \"$i * $i - $i + 1\" | bc)\n    if [[ $((TRIPLES %\
    \ 3)) == 0 ]]\n    then\n      MAX_TRIPLES=$((MAX_TRIPLES + 1))\n    fi\n  done\n\
    \  echo \"$MAX_TRIPLES\"", "    local -i ai aj ak i j k n\n    # get the input.\n\
    \    n=$1\n    # the variable to store the count of valid triples\n    local -i\
    \ cnt=0\n    for ((i=1; i<=((n-2)); i++)); do\n        for ((j=(i+1); j<=((n-1));\
    \ j++)); do\n            for ((k=(j+1); k<=n; k++)); do\n                ai=$((\
    \ i * i - i + 1 ))\n                aj=$(( j * j - j + 1 ))\n                ak=$((\
    \ k * k - k + 1 ))\n                if (( (ai + aj + ak) % 3 == 0 )); then\n \
    \                   (( cnt += 1 ))\n                fi\n            done\n   \
    \     done\n    done\n    echo \"$cnt\"", "    if ! [[ $1 =~ ^[0-9]+$ ]]; then\n\
    \        exit 1\n    fi\n    local result=0\n    local n=$1\n    local array=()\n\
    \    local min_value_of_j=2\n    local max_value_of_j=$((n-1))\n    local min_value_of_k=3\n\
    \    local max_value_of_k=$((n-1))\n    for (( i=1; i<=n; i++ )); do\n       \
    \ array+=($((i*i-i+1)))\n    done\n    for (( i=1; i<=n; i++ )); do\n        for\
    \ (( j=min_value_of_j; j<=max_value_of_j; j++ )); do\n            for (( k=min_value_of_k;\
    \ k<=max_value_of_k; k++ )); do\n                local sum=$((array[i-1]+array[j-1]+array[k-1]))\n\
    \                if (( sum%3 == 0 )); then\n                    ((result++))\n\
    \                fi\n            done\n        done\n        ((min_value_of_j++))\n\
    \        ((max_value_of_j--))\n        ((min_value_of_k++))\n        ((max_value_of_k--))\n\
    \    done\n    echo $result", "    local n=$1\n    local n2=$(( n * n ))\n   \
    \ local t=$(( n2 - n + 1 ))\n    echo $(( (t - 3) * (t - 2) * (t - 1) / 6 ))",
  "    local numbers=$(seq 1 $1 | awk '{print $1*$1-$1+1}')\n    local sum\n    for\
    \ ((i=1; i<${#numbers}; i++)); do\n        for ((j=i+1; j<${#numbers}; j++));\
    \ do\n            for ((k=j+1; k<${#numbers}; k++)); do\n                sum=$((${numbers[i]}+${numbers[j]}+${numbers[k]}))\n\
    \                [[ $((sum%3)) -eq 0 ]] && echo \"${numbers[i]} ${numbers[j]}\
    \ ${numbers[k]}\"\n            done\n        done\n    done | grep -v '1 1 1'\
    \ | wc -l", "   a=$1\n   b=()\n   count=0\n   for((i=1;i<=$a;i++)); do\n     \
    \ b[$i]=$(( $i * $i - $i + 1))\n   done\n   for((i=1;i<=$a;i++)); do\n      for((j=2;j<=$a;j++));\
    \ do\n         for((k=3;k<=$a;k++)); do\n            if [ $i -lt $j -a $j -lt\
    \ $k -a $(( ${b[$i]} + ${b[$j]} + ${b[$k]} )) -eq 0 ]; then\n               count=$((count+1))\n\
    \            fi\n         done\n      done\n   done\n   echo $count", "    # Write\
    \ your code here\n    # To print results to the standard output you can use echo\n\
    \    # Example:\n    # echo \"Hello world\"\n    echo \"1\"", "    local -i n=$1\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local -i temp=0\n \
    \   local -i triple_count=0\n    # Make the array\n    local -a arr=($(seq $n))\n\
    \    # This loop produces the required array\n    for (( i=0; i<n; i++ )); do\n\
    \        arr[$i]=$(( ${arr[$i]} * ${arr[$i]} - ${arr[$i]} + 1 ))\n    done\n \
    \   # This loop is just a bubble sort\n    for (( i=0; i<n; i++ )); do\n     \
    \   for (( j=0; j<(n-i-1); j++ )); do\n            if [[ ${arr[$j]} -gt ${arr[$j+1]}\
    \ ]]; then\n                temp=${arr[$j]}\n                arr[$j]=${arr[$j+1]}\n\
    \                arr[$j+1]=$temp\n            fi\n        done\n    done\n   \
    \ # This loop checks for the condition and increment the counter accordingly\n\
    \    for (( i=0; i<n-2; i++ )); do\n        for (( j=i+1; j<n-1; j++ )); do\n\
    \            for (( k=j+1; k<n; k++ )); do\n                if [[ $(( ${arr[$i]}\
    \ + ${arr[$j]} + ${arr[$k]} ))%3 -eq 0 ]]; then\n                    triple_count=$((\
    \ $triple_count + 1 ))\n                fi\n            done\n        done\n \
    \   done\n    echo $triple_count", "  local _a=$(get_all_triples \"$1\")\n  local\
    \ _b=$(echo \"$_a\" | awk '($3==3) {print}' | wc -l)\n  echo \"$_b\"", "    n=$1\n\
    \    if [[ ! $n =~ ^[0-9]+$ ]]; then\n        return\n    fi\n    if [[ $n -gt\
    \ 10000 ]]; then\n        return\n    fi\n    python -c \"import itertools; print(sum([1\
    \ for i in itertools.combinations(range(1, $n + 1), 3) if sum(i) % 3 == 0]))\"",
  "    local -i n=$1\n    local -i i=1\n    local -i sum=0\n    local -i mult=0\n\
    \    local -i a=0\n    local -i b=0\n    local -i res=0\n    declare -a arr\n\
    \    while [[ $i -le $n ]]; do\n        a=$(($i * $i - $i + 1))\n        arr+=($a)\n\
    \        let i++\n    done\n    let i=0\n    while [[ $i -lt $n ]]; do\n     \
    \   a=${arr[$i]}\n        let j=$i+1\n        while [[ $j -lt $n ]]; do\n    \
    \        b=${arr[$j]}\n            sum=$(($a + $b))\n            mult=$(($sum\
    \ % 3))\n            if [[ $mult -eq 0 ]]; then\n                let k=$j+1\n\
    \                while [[ $k -lt $n ]]; do\n                    c=${arr[$k]}\n\
    \                    sum=$(($sum + $c))\n                    mult=$(($sum % 3))\n\
    \                    if [[ $mult -eq 0 ]]; then\n                        let res++\n\
    \                    fi\n                    let k++\n                done\n \
    \           fi\n            let j++\n        done\n        let i++\n    done\n\
    \    echo $res", "  local array=( $(echo \"{1..$1}\") )\n  local result=0\n  for\
    \ ((i=0; i<$1; i++)); do\n    for ((j=i+1; j<$1; j++)); do\n      for ((k=j+1;\
    \ k<$1; k++)); do\n        if (( (${array[$i]} + ${array[$j]} + ${array[$k]})\
    \ % 3 == 0 )); then\n          ((result++))\n        fi\n      done\n    done\n\
    \  done\n  echo $result", "    local num_str=''\n    for ((i=1; i<=$1; i++));\
    \ do\n        let num_str+=$i*$i-$i+1\n    done\n    local -i cnt=0\n    for ((i=0;\
    \ i<$1-2; i++)); do\n        for ((j=i+1; j<$1-1; j++)); do\n            for ((k=j+1;\
    \ k<$1; k++)); do\n                let sum=$((10#${num_str:$i:1}+10#${num_str:$j:1}+10#${num_str:$k:1}))\n\
    \                if ((sum%3==0)); then\n                    let cnt++\n      \
    \          fi\n            done\n        done\n    done\n    echo $cnt", "   \
    \ # Write your solution here\n    local i j k n=${1} sum\n    local -a a=( )\n\
    \    for ((i=1; i<=n; i++)); do\n        ((a[i]=i*i-i+1))\n    done\n    echo\
    \ \"a[@]=${a[@]}\"\n    for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1; j<=n-1;\
    \ j++)); do\n            for ((k=j+1; k<=n; k++)); do\n                ((sum=a[i]+a[j]+a[k]))\n\
    \                if ((sum%3==0)); then\n                    echo \"$i, $j, $k:\
    \ ${a[i]}, ${a[j]}, ${a[k]}\"\n                fi\n            done\n        done\n\
    \    done", "    local integer=\"$1\"\n    local a=$(seq $(($integer - 1)) -1\
    \ 1)\n    local b=$(seq $(($integer - 2)) -1 1)\n    local c=$(seq $(($integer\
    \ - 3)) -1 1)\n    local d=$(seq $(($integer - 4)) -1 1)\n    local array=()\n\
    \    for i in $a; do\n        for j in $b; do\n            for k in $c; do\n \
    \               for l in $d; do\n                    local index=$(($i + $j +\
    \ $k + $l))\n                    # echo $index\n                    array[$index]=$((${array[$index]}\
    \ + 1))\n                done\n            done\n        done\n    done\n    #\
    \ echo ${array[*]}\n    echo ${array[*]} | grep -o \"1\" | wc -l", "    # your\
    \ code here\n    a=()\n    for (( i=1; i<=$1; i++ ))\n    do\n        a+=($((i*i-i+1)))\n\
    \    done\n    s=0\n    for (( i=0; i<${#a[@]}; i++ ))\n    do\n        for ((\
    \ j=0; j<${#a[@]}; j++ ))\n        do\n            for (( k=0; k<${#a[@]}; k++\
    \ ))\n            do\n                if [[ $((${a[i]}+${a[j]}+${a[k]}))%3 -eq\
    \ 0 ]] && [[ ${a[i]} -lt ${a[j]} ]] && [[ ${a[j]} -lt ${a[k]} ]]\n           \
    \     then\n                    s=$((s+1))\n                fi\n            done\n\
    \        done\n    done\n    echo $s", "    local i j k n=$1\n    local idx=0\n\
    \    local a[0]=0\n    for ((i=1; i<n; i++)); do\n        a[i]=$((i*i-i+1))\n\
    \    done\n    for ((i=0; i<n-2; i++)); do\n        for ((j=i+1; j<n-1; j++));\
    \ do\n            for ((k=j+1; k<n; k++)); do\n                if [[ $((a[i]+a[j]+a[k]))%3\
    \ -eq 0 ]]; then\n                    ((idx++))\n                fi\n        \
    \    done\n        done\n    done\n    echo $idx", "\tnum=$1\n\tcount=0\n\tfor\
    \ (( i=1; i<=num; i++ )) do\n\t\tfor (( j=i+1; j<=num; j++ )) do\n\t\t\tfor ((\
    \ k=j+1; k<=num; k++ )) do\n\t\t\t\t# do not check if not multiple of 3\n\t\t\t\
    \tif (( ( ( $i*$i - $i + 1 ) + ( $j*$j - $j + 1 ) + ( $k*$k - $k + 1 ) ) % 3 !=\
    \ 0 )); then\n\t\t\t\t\tcontinue\n\t\t\t\tfi\n\t\t\t\t#check if value is greater\
    \ than min of (a[i] + a[j] + a[k]) / 3\n\t\t\t\tif (( ( ($i*$i - $i + 1) + ($j*$j\
    \ - $j + 1) + ($k*$k - $k + 1) ) / 3 > $i*$i - $i + 1 )); then\n\t\t\t\t\tcontinue\n\
    \t\t\t\tfi\n\t\t\t\t# Increment count\n\t\t\t\t(( count++ ))\n\t\t\tdone\n\t\t\
    done\n\tdone\n\techo $count", "    local input=$1\n    local triple_array\n  \
    \  local triple_array_index=0\n    local triple_array_sum=0\n    for ((i=1; i<=input;\
    \ i++)); do\n        triple_array[triple_array_index]=$((i*i-i+1))\n        ((triple_array_index++))\n\
    \    done\n    for ((i=0; i<${#triple_array[@]}; i++)); do\n        local first_number=${triple_array[i]}\n\
    \        for ((j=i+1; j<${#triple_array[@]}; j++)); do\n            local second_number=${triple_array[j]}\n\
    \            for ((k=j+1; k<${#triple_array[@]}; k++)); do\n                local\
    \ third_number=${triple_array[k]}\n                local sum=$((first_number+second_number+third_number))\n\
    \                if ((sum%3==0)); then\n                    triple_array_sum=$((triple_array_sum+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $triple_array_sum",
  "    a=( $(echo -e \"$1\" | tr \" \" \"\\n\") )\n    num_of_triple=0\n    for i\
    \ in ${!a[@]}; do\n        a[$i]=$(( ${a[$i]} * ${a[$i]} - ${a[$i]} + 1 ))\n \
    \   done\n    for i in ${!a[@]}; do\n        for j in ${!a[@]}; do\n         \
    \   for k in ${!a[@]}; do\n                if [ $i -lt $j ] && [ $j -lt $k ] &&\
    \ [ $(( ${a[$i]} + ${a[$j]} + ${a[$k]} )) -eq 0 ]; then\n                    num_of_triple=$((\
    \ num_of_triple + 1 ))\n                fi\n            done\n        done\n \
    \   done\n    echo $num_of_triple", "    local i=0\n    local j=0\n    local k=0\n\
    \    local n=${1}\n    local j_k=0\n    local triplets=0\n    for i in $(seq 1\
    \ $((${n} - 2))); do\n        for j in $(seq $((${i} + 1)) $((${n} - 1))); do\n\
    \            for k in $(seq $((${j} + 1)) ${n}); do\n                j_k=$((${j}\
    \ + ${k}))\n                if [ $((j_k % 3)) -eq 0 ]; then\n                \
    \    ((triplets++))\n                fi\n            done\n        done\n    done\n\
    \    echo ${triplets}", "    local -a arr\n    local -i i n=0 ans=0 n=$1\n\n \
    \   for ((i=1; i<=n; i++)); do\n        arr[$i]=$((i*i-i+1))\n    done\n\n   \
    \ for ((i=1; i<=n-2; i++)); do\n        for ((j=i+1; j<=n-1; j++)); do\n     \
    \       for ((k=j+1; k<=n; k++)); do\n                if (( ((arr[$i]+arr[$j]+arr[$k])%3)\
    \ == 0 )); then\n                    ((ans++))\n                fi\n         \
    \   done\n        done\n    done\n\n    echo $ans", "    local -i n=0;\n    local\
    \ -i i=0;\n    local -i j=0;\n    local -i k=0;\n    local -i count=0;\n    n=$1;\n\
    \    for ((i=1; i<n; i++)); do\n        for ((j=i+1; j<n; j++)); do\n        \
    \    for ((k=j+1; k<n; k++)); do\n                if [[ $((i*i-i+1 + j*j-j+1 +\
    \ k*k-k+1))%3 -eq 0 ]]; then\n                    ((count++));\n             \
    \   fi\n            done\n        done\n    done\n    echo $count;", "    local\
    \ input=(\"$@\")\n    input=${input[0]}\n    local answer=\"\"\n    local array=($(seq\
    \ 1 ${input}))\n    local count=0\n    local len=${#array[@]}\n    local i=0\n\
    \    local j=0\n    local k=0\n    echo \"input array: \" ${array[@]}\n    echo\
    \ \"input array length: \" ${len}\n    while [ $i -lt $((len-2)) ]\n    do\n \
    \       j=$((i+1))\n        while [ $j -lt $((len-1)) ]\n        do\n        \
    \    k=$((j+1))\n            while [ $k -lt $len ]\n            do\n         \
    \       echo \"i: \" $i \"j: \" $j \"k: \" $k\n                echo \"array[i]:\
    \ \" ${array[i]} \"array[j]: \" ${array[j]} \"array[k]: \" ${array[k]}\n     \
    \           if [ $(((${array[i]} + ${array[j]} + ${array[k]} ) % 3)) -eq 0 ]\n\
    \                then\n                    echo \"Valid Triple: \" \"(\" ${array[i]}\
    \ \", \" ${array[j]} \", \" ${array[k]} \")\"\n                    count=$((count+1))\n\
    \                fi\n                k=$((k+1))\n            done\n          \
    \  j=$((j+1))\n        done\n        i=$((i+1))\n    done\n    echo \"count: \"\
    \ $count\n    answer=$count\n    echo $answer", "    INPUT_LIST=\"1\"\n    NEXT_ITEM=$((\
    \ 1 * 1 - 1 + 1 ))\n    for i in $(seq 2 $1); do\n        INPUT_LIST=\"$INPUT_LIST\
    \ $NEXT_ITEM\"\n        NEXT_ITEM=$(( $i * $i - $i + 1 ))\n    done\n    echo\
    \ $INPUT_LIST | tr ' ' '\\n' | awk '{ sum += $1; print sum }' | \\\n        tr\
    \ '\\n' ' ' | \\\n        sed -E 's/([0-9] )([0-9] )([0-9])/\\1\\n\\2\\n\\3/g'\
    \ | \\\n        awk '{ total += $1 } END { print total }'", "    a=($(for ((i=1;\
    \ i<=$1; i++)); do echo $(($i*$i-$i+1)); done))\n    b=($(for ((i=0; i<$1; i++));\
    \ do echo ${a[$i]}; done))\n    c=($(for ((i=0; i<$1; i++)); do echo ${a[$i]};\
    \ done))\n    sum=0\n    for ((i=0; i<$1; i++)); do\n        for ((j=i+1; j<$1;\
    \ j++)); do\n            for ((k=j+1; k<$1; k++)); do\n                ((sum=${b[$i]}+${c[$j]}+${c[$k]}))\n\
    \                if (($sum%3==0)); then\n                    echo \"(${b[$i]},\
    \ ${c[$j]}, ${c[$k]})\"\n                fi\n            done\n        done\n\
    \    done | wc -l", "  awk '\n  function triples(n) {\n    return n * (n - 1)\
    \ * (n - 2) / 6\n  }\n  BEGIN {\n    total = 0\n    for (i = 1; i <= n; i++) {\n\
    \      a[i] = i * i - i + 1\n      rem[i] = a[i] % 3\n      if (rem[i] == 0) {\n\
    \        total += triples(i)\n      }\n    }\n    for (i = 1; i <= n; i++) {\n\
    \      for (j = i + 1; j <= n; j++) {\n        k = 3 - rem[i] - rem[j]\n     \
    \   if (k < 0) {\n          k += 3\n        }\n        if (k == 0) {\n       \
    \   total += (j - i - 1) * (j - i) / 2\n        }\n      }\n    }\n    print total\n\
    \  }' \"n=$1\"", "  local n=$1\n  if [[ $((n)) =~ ^[+-]?[0-9]+$ ]]; then\n   \
    \ if [[ $n -ge 3 ]]; then\n      # declare -A an_array\n      # an_array[1]=1\n\
    \      # an_array[2]=3\n      # an_array[3]=7\n      # an_array[4]=13\n      #\
    \ an_array[5]=21\n      # echo ${an_array[@]}\n      # res=0\n      # for (( i=1;\
    \ i<=n; i++ )); do\n      #   for (( j=i+1; j<=n; j++ )); do\n      #     for\
    \ (( k=j+1; k<=n; k++ )); do\n      #       if [[ $((an_array[$i]+an_array[$j]+an_array[$k]))%3\
    \ -eq 0 ]]; then\n      #         ((res+=1))\n      #       fi\n      #     done\n\
    \      #   done\n      # done\n      # echo $res\n      echo $((n*(n-1)*(n-2)/6))\n\
    \    else\n      echo \"0\"\n    fi\n  else\n    echo \"Error: expected an integer\"\
    \n  fi", "    local array_len=$1\n    let \"array_len -= 1\"\n    local a_i=1\n\
    \    local a_j=2\n    local a_k=3\n    local max_triples=0\n    local temp_sum=0\n\
    \    for ((i=0; i<=array_len; i++)); do\n        for ((j=i+1; j<=array_len; j++));\
    \ do\n            for ((k=j+1; k<=array_len; k++)); do\n                temp_sum=$((a_i\
    \ + a_j + a_k))\n                if ((temp_sum % 3 == 0)); then\n            \
    \        let \"max_triples += 1\"\n                fi\n                let \"\
    a_k += 1\"\n            done\n            let \"a_j += 1\"\n            let \"\
    a_k = a_j + 1\"\n        done\n        let \"a_i += 1\"\n        let \"a_j = a_i\
    \ + 1\"\n        let \"a_k = a_j + 1\"\n    done\n    echo $max_triples", "  \
    \  # write your code here\n    # store your result in `result`\n    # use echo\
    \ to print the result\n    declare -a arr\n    num=$1\n    i=1\n    while [ $i\
    \ -le $num ]\n    do\n        square=$((i*i))\n        value=$((square-i+1))\n\
    \        arr[$i]=$value\n        ((i++))\n    done\n    count=0\n    length=${#arr[@]}\n\
    \    for (( i=1; i<${length}-2; i++ ))\n    do\n        for (( j=i+1; j<${length}-1;\
    \ j++ ))\n        do\n            for (( k=j+1; k<${length}; k++ ))\n        \
    \    do\n                sum=$((arr[i]+arr[j]+arr[k]))\n                res=$((sum%3))\n\
    \                if [ $res -eq 0 ]\n                then\n                   \
    \ ((count++))\n                fi\n            done\n        done\n    done\n\
    \    echo $count", "    local a_length=\"$1\"\n    local -a a\n\n    for ((i=1;\
    \ i<=a_length; i++)); do\n        a[i]=$(( i * i - i + 1 ))\n    done\n\n    local\
    \ count=0\n    for ((i=1; i<=a_length; i++)); do\n        for ((j=i+1; j<=a_length;\
    \ j++)); do\n            for ((k=j+1; k<=a_length; k++)); do\n               \
    \ if (( (a[i] + a[j] + a[k]) % 3 == 0 )); then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n\n    echo \"$count\"",
  "\tlocal length=$1\n\tlocal array=()\n\tlocal sum=0\n\tlocal count=0\n\tfor ((i=1;\
    \ i<=$length; i++)); do\n\t\tarray[$i]=$(( i * i - i + 1 ))\n\tdone\n\tfor ((i=1;\
    \ i<=$length; i++)); do\n\t\tfor ((j=i+1; j<=$length; j++)); do\n\t\t\tfor ((k=j+1;\
    \ k<=$length; k++)); do\n\t\t\t\tsum=$(( array[$i] + array[$j] + array[$k] ))\n\
    \t\t\t\tif (( sum % 3 == 0 )); then\n\t\t\t\t\t(( count++ ))\n\t\t\t\tfi\n\t\t\
    \tdone\n\t\tdone\n\tdone\n\techo $count", "    if [[ $1 -eq 0 ]]; then\n     \
    \   echo 0\n        return\n    fi\n    local triplet_count=0\n    local arr=()\n\
    \    for (( i=1; i<=$1; i++ ))\n    do\n        arr[i]=$(( (i*i) - i + 1 ))\n\
    \    done\n    for (( i=1; i<$1; i++ ))\n    do\n        for (( j=i+1; j<$1; j++\
    \ ))\n        do\n            for (( k=j+1; k<=$1; k++ ))\n            do\n  \
    \              if [[ ((${arr[i]} + ${arr[j]} + ${arr[k]}))%3 -eq 0 ]]; then\n\
    \                    ((triplet_count++))\n                fi\n            done\n\
    \        done\n    done\n    echo $triplet_count", "    local n=$1\n    local\
    \ tot=0\n    for (( i=0; i<n; i++ ))\n    do\n        for (( j=i+1; j<n; j++ ))\n\
    \        do\n            for (( k=j+1; k<n; k++ ))\n            do\n         \
    \       local sum=$(( $i*$i-$i+1 + $j*$j-$j+1 + $k*$k-$k+1 ))\n              \
    \  if (( $sum % 3 == 0 ))\n                then\n                    tot=$(( $tot\
    \ + 1 ))\n                fi\n            done\n        done\n    done\n    echo\
    \ $tot", "    local -i len=$1\n    local -i count=0\n    local -i i j k\n    for\
    \ ((i=1; i<=len-2; i++)); do\n        for ((j=i+1; j<=len-1; j++)); do\n     \
    \       for ((k=j+1; k<=len; k++)); do\n                ((i*i-i+1+j*j-j+1+k*k-k+1%3==0))\
    \ && ((count++))\n            done\n        done\n    done\n    echo $count",
  "  [[ $1 =~ ^[0-9]+$ ]] || { echo \"Integer required\" >&2; exit 1; }\n  local n=\"\
    $1\"\n  local -i count=0 i=0 j=0 k=0\n  for ((i=1; i<n-1; i++)); do\n    for ((j=i+1;\
    \ j<n; j++)); do\n      for ((k=j+1; k<=n; k++)); do\n        (( ((i*i-i+1) +\
    \ (j*j-j+1) + (k*k-k+1)) % 3 == 0 )) && (( count++ ))\n      done\n    done\n\
    \  done\n  echo \"$count\"", "    # Write your code here\n    declare -a arr\n\
    \    k=0\n    for ((i=1; i<=$1; i++))\n    do\n        arr[i]=$((i*i-i+1))\n \
    \   done\n    for ((i=1; i<$1-1; i++))\n    do\n        for ((j=i+1; j<$1; j++))\n\
    \        do\n            for ((p=j+1; p<=$1; p++))\n            do\n         \
    \       if [ $((arr[i]+arr[j]+arr[p]))%3 -eq 0 ]\n                then\n     \
    \               k=$((k+1))\n                fi\n            done\n        done\n\
    \    done\n    echo $k", "  declare -a arr=()\n  for ((i=1; i<=\"$1\"; i++));\
    \ do\n    arr+=($(( i * i - i + 1 )))\n  done\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    for ((j=i+1; j<${#arr[@]}; j++)); do\n      for ((k=j+1; k<${#arr[@]};\
    \ k++)); do\n        if (( $((arr[i] + arr[j] + arr[k])) % 3 == 0 )); then\n \
    \         echo $((arr[i] + arr[j] + arr[k]))\n        fi\n      done\n    done\n\
    \  done", "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        local cnt=0\n        local\
    \ triple_sum=0\n        for (( i=1; i<=$1; i++ )); do\n            a[$i]=$(( i*i\
    \ - i + 1 ))\n            for (( j=i+1; j<=$1; j++ )); do\n                for\
    \ (( k=j+1; k<=$1; k++ )); do\n                    triple_sum=$(( a[$i] + a[$j]\
    \ + a[$k] ))\n                    if (( triple_sum % 3 == 0 )); then\n       \
    \                 (( cnt++ ))\n                    fi\n                done\n\
    \            done\n        done\n        echo $cnt\n    else\n        echo \"\
    Error. Integer required.\"\n    fi", "    local i=1 j=1 k=1\n    local count=0\n\
    \    for ((i=1; i<$1; i++)); do\n        for ((j=i+1; j<$1; j++)); do\n      \
    \      for ((k=j+1; k<$1; k++)); do\n                if (( ($i*$i - $i + 1 + $j*$j\
    \ - $j + 1 + $k*$k - $k + 1) % 3 == 0 )); then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count",
  "  awk -v n=$1 'BEGIN{\n    for(i=1;i<=n;i++){\n      a[i]=i*i-i+1\n    }\n    s=0\n\
    \    for(i=1;i<=n;i++){\n      for(j=i+1;j<=n;j++){\n        for(k=j+1;k<=n;k++){\n\
    \          if((a[i]+a[j]+a[k])%3==0){\n            s+=1\n          }\n       \
    \ }\n      }\n    }\n    print s\n  }'", "    local solution=0\n    local arr_len=$1\n\
    \    local arr=()\n    local i j k\n    if [[ $arr_len -lt 3 ]]; then\n      \
    \  echo $solution\n        return\n    fi\n    for ((i=1; i<=$arr_len; i++));\
    \ do\n        arr+=($((i*i-i+1)))\n    done\n    # echo ${arr[@]}\n    for ((i=0;\
    \ i<$((arr_len-2)); i++)); do\n        for ((j=$((i+1)); j<$((arr_len-1)); j++));\
    \ do\n            for ((k=$((j+1)); k<$arr_len; k++)); do\n                if\
    \ [[ $((arr[i]+arr[j]+arr[k]))%3 -eq 0 ]]; then\n                    # echo \"\
    ${arr[i]} + ${arr[j]} + ${arr[k]}\"\n                    solution=$((solution+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $solution",
  "  sum_arr=()\n  local -i sum_arr_len=0\n  local -i a_len=0\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local -i i_j_sum=0\n  local -i num_multiple_three=0\n\
    \  local -i ind=0\n  local -i lower_limit=0\n  local -i upper_limit=0\n  # a_len\
    \ is number of elements in array\n  a_len=${#a[@]}\n  # fill up sum_arr with a[i]\
    \ + a[j] for each i and j\n  for ((i=0; i<$a_len; i++)); do\n    for ((j=i+1;\
    \ j<$a_len; j++)); do\n      i_j_sum=$((a[i] + a[j]))\n      sum_arr[sum_arr_len]=$i_j_sum\n\
    \      ((sum_arr_len++))\n    done\n  done\n  # sort array in increasing order\n\
    \  IFS=$'\\n' sum_arr=($(sort -g <<<\"${sum_arr[*]}\"))\n  unset IFS\n  # binary\
    \ search first element in array with value >= 0\n  lower_limit=0\n  upper_limit=$((sum_arr_len-1))\n\
    \  # find index of first element with value >= 0\n  while true; do\n    ind=$((lower_limit\
    \ + (upper_limit - lower_limit)/2))\n    if [ ${sum_arr[ind]} -ge 0 ]; then\n\
    \      if [ $ind -eq 0 ] || [ ${sum_arr[ind-1]} -lt 0 ]; then\n        break\n\
    \      else\n        upper_limit=$((ind-1))\n      fi\n    else\n      lower_limit=$((ind+1))\n\
    \    fi\n  done\n  # count the number of multiples of 3\n  for ((k=0; k<$a_len;\
    \ k++)); do\n    while [ $ind -lt $sum_arr_len ] && [ $((sum_arr[ind] + a[k]))\
    \ -lt 0 ]; do\n     ", "    a=($(seq 1 $1))\n    echo $(for ((i=0; i<$1; i++));\
    \ do \n        a[$i]=$((${a[$i]}*${a[$i]}-${a[$i]}+1))\n    done)\n    count=0\n\
    \    for ((i=0; i<$1; i++)); do\n        for ((j=i+1; j<$1; j++)); do\n      \
    \      for ((k=j+1; k<$1; k++)); do\n                if [[ $((${a[$i]}+${a[$j]}+${a[$k]}))%3\
    \ -eq 0 ]]; then\n                    count=$(($count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo $count", "    local n=\"$1\"\
    \n    local a=()\n    local i=0\n    local j=0\n    local k=0\n    local count=0\n\
    \    for ((i=1; i<=n; i++)); do\n        a[$i]=$((i*i-i+1))\n    done\n    for\
    \ ((i=1; i<=n; i++)); do\n        for ((j=$((i+1)); j<=n; j++)); do\n        \
    \    for ((k=$((j+1)); k<=n; k++)); do\n                if [[ $((a[$i]+a[$j]+a[$k]))%3\
    \ -eq 0 ]]; then\n                    count=$((count+1))\n                fi\n\
    \            done\n        done\n    done\n    echo \"$count\"", "  if [[ \"$1\"\
    \ -ge \"1\" && \"$1\" -le \"10^18\" ]]; then\n    RESULT=0\n    local i=1\n  \
    \  while [[ \"$i\" -lt \"$1\" ]]; do\n      local j=$((i+1))\n      while [[ \"\
    $j\" -lt \"$1\" ]]; do\n        local k=$((j+1))\n        while [[ \"$k\" -le\
    \ \"$1\" ]]; do\n          RESULT=$((RESULT+1))\n          k=$((k+1))\n      \
    \  done\n        j=$((j+1))\n      done\n      i=$((i+1))\n    done\n    echo\
    \ \"$RESULT\"\n  else\n    echo \"Please give a positive integer n between 1 and\
    \ 10^18\"\n  fi", "    local array=\"\"\n    for ((i=1; i<=$1; i++)); do\n   \
    \     ((array+=$((i*i-i+1)) ))\n    done\n    local array=$(echo $array | fold\
    \ -w1 | sort -n)\n    local mult3=$(echo $array | grep -o \"3\\|6\\|9\\|12\\|15\\\
    |18\\|21\" | wc -l)\n    echo $mult3", "  if [ $1 -eq 3 ]; then\n    echo \"1\"\
    \n  else\n    echo \"0\"\n  fi", "  a=($(seq $1))\n  for i in \"${!a[@]}\"; do\n\
    \    a[$i]=$((a[$i] * a[$i] - a[$i] + 1))\n  done\n  count=0\n  for i in \"${!a[@]}\"\
    ; do\n    for j in \"${!a[@]}\"; do\n      for k in \"${!a[@]}\"; do\n       \
    \ if [ $((a[$i] + a[$j] + a[$k])) -eq 0 ] && [ $i -lt $j ] && [ $j -lt $k ]; then\n\
    \          count=$((count + 1))\n        fi\n      done\n    done\n  done\n  echo\
    \ $count", "    local -i n=$1\n    local -i i j k=0\n    local -i sum=0\n\n  \
    \  declare -a arr\n    arr=($(seq $n | xargs -I@ echo '@ * @ - @ + 1' | bc))\n\
    \n    for ((i=0; i<$n-2; i++)); do\n        for ((j=i+1; j<$n-1; j++)); do\n \
    \           for ((k=j+1; k<$n; k++)); do\n                sum=$((${arr[$i]} +\
    \ ${arr[$j]} + ${arr[$k]}))\n                if (($sum % 3 == 0)); then\n    \
    \                ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count", "    local n=$1\n    local sum=0\n    local ix=0\n\
    \    local iy=0\n    local iz=0\n    local i=0\n    local j=0\n    local k=0\n\
    \    local a=()\n    local indices=()\n    local sum_triples=0\n    local m=0\n\
    \    local p=0\n    local max_triples=0\n    sum=0\n    ix=0\n    iy=0\n    iz=0\n\
    \    i=0\n    j=0\n    k=0\n    a=()\n    indices=()\n    sum_triples=0\n    m=0\n\
    \    p=0\n    max_triples=0\n    for (( i=1; i<=$n; i++ ))\n    do\n        a[$i]=$((\
    \ ($i*$i) - $i + 1 ))\n    done\n    for (( i=1; i<=($n-2); i++ ))\n    do\n \
    \       for (( j=$(( $i+1 )); j<=($n-1); j++ ))\n        do\n            for ((\
    \ k=$(( $j+1 )); k<=$n; k++ ))\n            do\n                indices=($i $j\
    \ $k)\n                for p in ${indices[@]}\n                do\n          \
    \          sum=$(( $sum + ${a[$p]} ))\n                done\n                if\
    \ [[ $(($sum % 3)) -eq 0 ]]\n                then\n                    sum_triples=$((\
    \ $sum_triples + 1 ))\n                fi\n                sum=0\n           \
    \ done\n        done\n    done\n    echo $sum_triples", "  local n=$1\n  local\
    \ accum=\"\"\n  local a_i=1\n  local a_j=1\n  local a_k=1\n  local count=0\n \
    \ for i in $(seq 1 $n); do\n    a_i=$((i * i - i + 1))\n    for j in $(seq $(($i\
    \ + 1)) $n); do\n      a_j=$((j * j - j + 1))\n      for k in $(seq $(($j + 1))\
    \ $n); do\n        a_k=$((k * k - k + 1))\n        if [ $((a_i + a_j + a_k)) -eq\
    \ 0 ]; then\n          count=$((count + 1))\n        fi\n      done\n    done\n\
    \  done\n  echo $count", "  local total=0\n  local arr=\n  local a=\n  local b=\n\
    \  local c=\n  local i=0\n  local j=0\n  local k=0\n  for ((i=1; i<=$1; i++));\
    \ do\n    for ((j=i+1; j<=$1; j++)); do\n      for ((k=j+1; k<=$1; k++)); do\n\
    \        a=$((i*i-i+1))\n        b=$((j*j-j+1))\n        c=$((k*k-k+1))\n    \
    \    if (((a+b+c)%3==0)); then\n          ((total++))\n        fi\n      done\n\
    \    done\n  done\n  echo \"$total\"", "    (( $# == 1 )) || return 1\n    declare\
    \ -i a b c i j k\n    declare -i sum=0\n    if (( $1 > 0 ))\n    then\n\tfor ((\
    \ i=1; i<=$1; i++ ))\n\tdo\n\t    (( a = i * i - i + 1 ))\n\t    for (( j=i+1;\
    \ j<=$1; j++ ))\n\t    do\n\t\t(( b = j * j - j + 1 ))\n\t\tfor (( k=j+1; k<=$1;\
    \ k++ ))\n\t\tdo\n\t\t    (( c = k * k - k + 1 ))\n\t\t    (( sum += ( a + b +\
    \ c ) % 3 == 0 ))\n\t\tdone\n\t    done\n\tdone\n    fi\n    echo $sum", "  #\
    \ 1. Create an array a[i]\n  # 1.1. Read in the length n\n  # 1.2. Initialize\
    \ the array with the default value 0\n  # 1.3. Calculate the values of a[i]\n\
    \  # 1.4. Print out the result\n\n  # 2. Create an array b[i]\n  # 2.1. Initialize\
    \ the array with the default value 0\n  # 2.2. Calculate the values of b[i]\n\
    \  # 2.3. Print out the result\n\n  # 3. Return the length of b[i]\n  return 0",
  "  local result=\"\"\n  local -a numbers\n  local -i counter=0\n  local -i length=$1\n\
    \  local -i i=0\n  local -i j=0\n  local -i k=0\n  for (( i=1; i<=$length; i++\
    \ )); do\n    numbers[$i]=$(( i * i - i + 1 ))\n  done\n  for (( i=1; i<=$length;\
    \ i++ )); do\n    for (( j=$((i+1)); j<=$length; j++ )); do\n      for (( k=$((j+1));\
    \ k<=$length; k++ )); do\n        if [[ $(( numbers[$i] + numbers[$j] + numbers[$k]\
    \ ))%3 -eq 0 ]]; then\n          (( counter++ ))\n        fi\n      done\n   \
    \ done\n  done\n  echo \"$counter\"", "  local test_arr=()\n  for ((i=1; i<=$1;\
    \ i++)); do\n    test_arr[$i]=$((i*i-i+1))\n  done\n  max_triples=0\n  for ((i=1;\
    \ i<${#test_arr[@]}; i++)); do\n    for ((j=i+1; j<${#test_arr[@]}; j++)); do\n\
    \      for ((k=j+1; k<${#test_arr[@]}; k++)); do\n        if [[ $((test_arr[$i]+test_arr[$j]+test_arr[$k]))%3\
    \ -eq 0 ]]; then\n          ((max_triples++))\n        fi\n      done\n    done\n\
    \  done\n  echo $max_triples", "    local max_triples=0\n    local max_triples_1=0\n\
    \    local max_triples_2=0\n    local max_triples_3=0\n    local max_triples_4=0\n\
    \    local max_triples_5=0\n    local max_triples_6=0\n    local max_triples_7=0\n\
    \    local max_triples_8=0\n    local max_triples_9=0\n    local max_triples_10=0\n\
    \    local max_triples_11=0\n    local max_triples_12=0\n    local max_triples_13=0\n\
    \    local max_triples_14=0\n    local max_triples_15=0\n    local max_triples_16=0\n\
    \    local max_triples_17=0\n    local max_triples_18=0\n    local max_triples_19=0\n\
    \    local max_triples_20=0\n    local max_triples_21=0\n    local max_triples_22=0\n\
    \    local max_triples_23=0\n    local max_triples_24=0\n    local max_triples_25=0\n\
    \    local max_triples_26=0\n    local max_triples_27=0\n    local max_triples_28=0\n\
    \    local max_triples_29=0\n    local max_triples_30=0\n    local max_triples_31=0\n\
    \    local max_triples_32=0\n    local max_triples_33=0\n    local max_triples_34=0\n\
    \    local max_triples_35=0\n    local max_triples_36=0\n    local max_triples_37=0\n\
    \    local max_triples_38=0\n    local max_triples_39=0\n    local max_triples_40=0\n\
    \    local max_triples_41=0\n    local max_triples_42=0\n    local max_triples_43=0\n\
    \    local max_triples_44=0\n    local max_triples_45=0\n    local max_triples_",
  "    read -r \"integer\"\n    integer=$(($integer - 1))\n    while [ $integer -gt\
    \ 2 ]; do\n        integer=$(($integer - 1))\n    done\n    printf \"%d\" $integer",
  "  if [ \"$#\" -ne 1 ]; then\n    return 1\n  fi\n  num=$1\n  if [ $num -lt 3 ];\
    \ then\n    echo 0\n    return 0\n  fi\n  num_triples=0\n  for ((i=1; i<$((num-1));\
    \ i++)); do\n    for ((j=$((i+1)); j<$((num)); j++)); do\n      for ((k=$((j+1));\
    \ k<$((num+1)); k++)); do\n        sum=$(( ($i*$i - $i + 1) + ($j*$j - $j + 1)\
    \ + ($k*$k - $k + 1) ))\n        if [ $((sum % 3)) -eq 0 ]; then\n          ((num_triples++))\n\
    \        fi\n      done\n    done\n  done\n  echo $num_triples", "    local n=$1\n\
    \    local a=()\n    local sum=0\n    local counter=0\n    for (( i=1; i<=n; i++\
    \ )); do\n        a+=($(( i*i - i + 1 )))\n    done\n    #echo \"${a[@]}\"\n \
    \   #echo \"${#a[@]}\"\n    for (( i=0; i<${#a[@]}; i++ )); do\n        for ((\
    \ j=i+1; j<${#a[@]}; j++ )); do\n            for (( k=j+1; k<${#a[@]}; k++ ));\
    \ do\n                (( sum = a[i] + a[j] + a[k] ))\n                #echo \"\
    ${a[i]} ${a[j]} ${a[k]} = $sum\"\n                if [[ \"$(( sum % 3 ))\" -eq\
    \ 0 ]]; then\n                    (( counter++ ))\n                fi\n      \
    \      done\n        done\n    done\n    echo \"$counter\"", "    if [ $1 -lt\
    \ 3 ]; then\n        echo \"0\"\n        return 0\n    fi\n    local max_triples=0\n\
    \    local a_i=0\n    local a_j=0\n    local a_k=0\n    for i in $(seq 2 $(($1\
    \ - 1))); do\n        a_i=$(($i * $i - $i + 1))\n        for j in $(seq $(($i\
    \ + 1)) $(($1 - 1))); do\n            a_j=$(($j * $j - $j + 1))\n            for\
    \ k in $(seq $(($j + 1)) $(($1 - 1))); do\n                a_k=$(($k * $k - $k\
    \ + 1))\n                if [ $(($a_i + $a_j + $a_k)) -mod 3 -eq 0 ]; then\n \
    \                   let max_triples++\n                fi\n            done\n\
    \        done\n    done\n    echo \"$max_triples\"", "    function check_if_num_triple()\
    \ {\n        local i=$1\n        local j=$2\n        local k=$3\n        local\
    \ sum=$(( $i + $j + $k ))\n        if (( $sum % 3 == 0 )); then\n            echo\
    \ $sum\n        fi\n    }\n    local N=$1\n    local sum=0\n    for (( i=1; i<N;\
    \ i++ )); do\n        for (( j=i+1; j<N; j++ )); do\n            for (( k=j+1;\
    \ k<N; k++ )); do\n                local a_i=$(( $i * $i - $i + 1 ))\n       \
    \         local a_j=$(( $j * $j - $j + 1 ))\n                local a_k=$(( $k\
    \ * $k - $k + 1 ))\n                local tmp=$(check_if_num_triple $a_i $a_j\
    \ $a_k)\n                if [[ -n $tmp ]]; then\n                    sum=$(( $sum\
    \ + 1 ))\n                fi\n            done\n        done\n    done\n    echo\
    \ $sum", "    read a\n    echo $a | awk '\n        {\n            n = $1\n   \
    \         sum = 0\n            for (i = 1; i <= n; i++) {\n                for\
    \ (j = i + 1; j <= n; j++) {\n                    for (k = j + 1; k <= n; k++)\
    \ {\n                        if ((i * i - i + 1 + j * j - j + 1 + k * k - k +\
    \ 1) % 3 == 0) {\n                            sum++\n                        }\n\
    \                    }\n                }\n            }\n            print sum\n\
    \        }\n    '", "    local -i i j k\n    local -i a b c sum\n    local -i\
    \ count=0\n    local array\n    local -i N=$1\n    for ((i=1; i<=N; i++)); do\n\
    \        array+=($((i*i-i+1)))\n    done\n    for ((i=0; i<N-2; i++)); do\n  \
    \      for ((j=i+1; j<N-1; j++)); do\n            for ((k=j+1; k<N; k++)); do\n\
    \                a=${array[i]}\n                b=${array[j]}\n              \
    \  c=${array[k]}\n                sum=$((a+b+c))\n                if (( sum%3\
    \ == 0 )); then\n                    ((count++))\n                fi\n       \
    \     done\n        done\n    done\n    echo $count", "    local -i res=0 a_len=$1\n\
    \    local -a a=() a_sum=() a_index=() b=()\n    a=($(seq 1 $a_len))\n    a[0]=1\n\
    \    for (( i=1; i<$a_len; i++ )); do\n        a[$i]=$(( i * i - i + 1 ))\n  \
    \  done\n    for (( i=0; i<$a_len; i++ )); do\n        for (( j=i+1; j<$a_len;\
    \ j++ )); do\n            for (( k=j+1; k<$a_len; k++ )); do\n               \
    \ if (( ( a[$i] + a[$j] + a[$k] ) % 3 == 0 )); then\n                    res=$((\
    \ res + 1 ))\n                fi\n            done\n        done\n    done\n \
    \   echo $res", "  local _i=1;\n  local _j=1;\n  local _k=1;\n  local _n=$1;\n\
    \  local _output=$(( (_n * (_n - 1) * (_n - 2)) / 6 ));\n  echo ${_output};",
  "\tlocal arr=($(for n in $(seq 1 $1); do\n\t\techo \"$((n*n-n+1))\"\n\tdone))\n\t\
    local count=0\n\tfor i in $(seq 0 $((1-1))); do\n\t\tfor j in $(seq $((i+1)) $((2-1)));\
    \ do\n\t\t\tfor k in $(seq $((j+1)) $((3-1))); do\n\t\t\t\tif [ $(((${arr[$i]}+${arr[$j]}+${arr[$k]})/3))\
    \ -eq $(((${arr[$i]}+${arr[$j]}+${arr[$k]})/3)) ]; then\n\t\t\t\t\tcount=$((count+1))\n\
    \t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\techo \"$count\"", "    # (a[i], a[j],\
    \ a[k]) of a where i < j < k, \n    # and a[i] + a[j] + a[k] is a multiple of\
    \ 3.\n    #\n    # i < j < k\n    # 1 < 2 < 3\n    # 3 < 4 < 5\n    # 6 < 7 <\
    \ 8\n    #\n    # a[i] + a[j] + a[k] is a multiple of 3\n    # 1 + 3 + 7 = 11\
    \ (not multiple of 3)\n    # 1 + 3 + 13 = 17 (not multiple of 3)\n    # 1 + 3\
    \ + 21 = 25 (not multiple of 3)\n    # 1 + 7 + 13 = 21 (not multiple of 3)\n \
    \   # 1 + 7 + 21 = 29 (not multiple of 3)\n    # 1 + 13 + 21 = 35 (not multiple\
    \ of 3)\n    # 3 + 7 + 13 = 23 (not multiple of 3)\n    # 3 + 7 + 21 = 31 (not\
    \ multiple of 3)\n    # 3 + 13 + 21 = 37 (not multiple of 3)\n    # 7 + 13 + 21\
    \ = 41 (not multiple of 3)\n    #\n    # So no triplet is a multiple of 3.\n \
    \   #\n    echo 1", "  local input_array=\n  local triple_count=0\n  local triple_total=0\n\
    \  local pair_total=0\n  # read the input array, one line at a time\n  while read\
    \ input_array; do\n    # find the number of valid triples\n    # compare each\
    \ integer with each other integer\n    for (( i=0; i<${#input_array[@]}; i++ ));\
    \ do\n      for (( j=0; j<${#input_array[@]}; j++ )); do\n        for (( k=0;\
    \ k<${#input_array[@]}; k++ )); do\n          if [[ \"$i\" -lt \"$j\" && \"$j\"\
    \ -lt \"$k\" ]]; then\n            triple_total=$(( ${input_array[$i]} + ${input_array[$j]}\
    \ + ${input_array[$k]} ))\n            # Check if the triple_total is a multiple\
    \ of 3\n            if [[ \"$triple_total\" -eq 0 ]]; then\n              triple_count=$((\
    \ triple_count + 1 ))\n            elif [[ \"$triple_total\" -gt 0 && \"$triple_total\"\
    %3 -eq 0 ]]; then\n              triple_count=$(( triple_count + 1 ))\n      \
    \      fi\n          fi\n        done\n      done\n    done\n  done\n  # display\
    \ the output\n  echo \"$triple_count\"", "  local len=0\n  local i=0\n  local\
    \ j=0\n  local k=0\n  local sum=0\n  local count=0\n  len=$1\n  for ((i=1; i<$len;\
    \ i++)); do\n    for ((j=i+1; j<$len; j++)); do\n      for ((k=j+1; k<$len; k++));\
    \ do\n        sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n        if [ $((sum%3)) -eq 0\
    \ ]; then\n          count=$((count+1))\n        fi\n      done\n    done\n  done\n\
    \  echo $count", "    local input=$1\n    local array=()\n    # Populate the array.\n\
    \    local i=1\n    while [ $i -le $input ]; do\n        array[$((i-1))]=$((i*i-i+1))\n\
    \        i=$((i+1))\n    done\n    # Start counting valid triples.\n    local\
    \ count=0\n    for i in ${!array[@]}; do\n        for j in ${!array[@]}; do\n\
    \            for k in ${!array[@]}; do\n                if [ $i -lt $j ] && [\
    \ $j -lt $k ] && [ $((array[i]+array[j]+array[k])) -eq 0 ]; then\n           \
    \         ((count++))\n                fi\n            done\n        done\n  \
    \  done\n    echo $count", "    (( $# == 1 )) || return 1\n\n    local n=$1;\n\
    \    local a[$n];\n    local count=0;\n    local i=0;\n    local j=0;\n    local\
    \ k=0;\n\n    if (( $n >= 3 )); then\n        for (( i=1; i <= $n; i++ )); do\n\
    \            a[$i]=$(( $i * $i - $i + 1 ))\n        done\n\n        for (( i=1;\
    \ i <= $n; i++ )); do\n            for (( j=$(( $i + 1 )); j <= $n; j++ )); do\n\
    \                for (( k=$(( $j + 1 )); k <= $n; k++ )); do\n               \
    \     if (( $(( ${a[$i]} + ${a[$j]} + ${a[$k]} )) % 3 == 0 )); then\n        \
    \                (( count++ ))\n                    fi\n                done\n\
    \            done\n        done\n    fi\n\n    echo $count", "    # Write your\
    \ code here\n    if [[ $1 =~ ^[0-9]+$ ]]; then\n        let result=0\n       \
    \ for ((i=1; i<$1; i++)); do\n            for ((j=i+1; j<$1; j++)); do\n     \
    \           for ((k=j+1; k<$1; k++)); do\n                    let sum=$((i*i-i+1+j*j-j+1+k*k-k+1))\n\
    \                    if [[ $((sum%3)) == 0 ]]; then\n                        let\
    \ result++\n                    fi\n                done\n            done\n \
    \       done\n        echo $result\n    else\n        echo \"ERROR\"\n    fi",
  "    local a=()\n    for (( i=1; i<=$1; i++ ))\n    do\n        a+=($((i*i-i+1)))\n\
    \    done\n    local count=0\n    for (( i=0; i<$1-2; i++ ))\n    do\n       \
    \ for (( j=i+1; j<$1-1; j++ ))\n        do\n            for (( k=j+1; k<$1; k++\
    \ ))\n            do\n                if (( (a[i]+a[j]+a[k])%3 == 0 ))\n     \
    \           then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count", "\tlocal n=$1\n\techo \"\
    $n\"", "    local a=($(for ((i=1; i<=$1; i++)); do echo $(($i*$i-$i+1)); done))\n\
    \    local c=0\n    for ((i=0; i<$1-2; i++)); do\n        for ((j=i+1; j<$1-1;\
    \ j++)); do\n            for ((k=j+1; k<$1; k++)); do\n                if [[ $((${a[$i]}+${a[$j]}+${a[$k]}))%3\
    \ -eq 0 ]]; then\n                    let c++\n                fi\n          \
    \  done\n        done\n    done\n    echo $c", "  declare -A arr\n  i=1\n  while\
    \ [[ $i -le $1 ]]; do\n    arr[$i]=$((i*i-i+1))\n    ((i++))\n  done\n  echo ${arr[@]}\n\
    \  get_triples \"${arr[@]}\"", "    read -r input\n    declare -a array\n    #\
    \ Create the array\n    for ((i=1; i<=$input; i++)); do\n        array[$i]=$((i*i-i+1))\n\
    \    done\n    count=0\n    # Iterate to all combination of indexes\n    for ((i=1;\
    \ i<$input-1; i++)); do\n        for ((j=$((i+1)); j<$input; j++)); do\n     \
    \       for ((k=$((j+1)); k<=$input; k++)); do\n                # Check if the\
    \ sum is multiple of 3\n                if [[ $(( ${array[$i]} + ${array[$j]}\
    \ + ${array[$k]} ))%3 -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count",
  "    local a=()\n    for ((i=1; i<=$1; i++)); do\n        a[$i]=$((i*i-i+1))\n \
    \   done\n    local count=0\n    for ((i=1; i<=$1; i++)); do\n        for ((j=$((i+1));\
    \ j<=$1; j++)); do\n            for ((k=$((j+1)); k<=$1; k++)); do\n         \
    \       if ((a[$i]+a[$j]+a[$k])%3==0)); then\n                    ((count++))\n\
    \                fi\n            done\n        done\n    done\n    echo $count",
  "  let \"n = $1\";\n  let \"max_triples = 0\";\n  for ((i = 1; i < n; i++)); do\n\
    \    for ((j = i + 1; j < n; j++)); do\n      for ((k = j + 1; k < n; k++)); do\n\
    \        let \"a_i = i * i - i + 1\";\n        let \"a_j = j * j - j + 1\";\n\
    \        let \"a_k = k * k - k + 1\";\n        let \"sum = a_i + a_j + a_k\";\n\
    \        if ((sum % 3 == 0)); then\n          let \"max_triples++\";\n       \
    \ fi\n      done\n    done\n  done\n  echo \"$max_triples\";", "    # Write your\
    \ code here\n    declare -a arr\n    len=${#1}\n    start_index=0\n    last_index=$((len-1))\n\
    \    num=0\n    max_triple=0\n    for i in $(seq 1 $len); do\n        num=$((i*i-i+1))\n\
    \        arr[i]=$num\n    done\n    #echo ${arr[@]}\n    for ((i=1; i<$len-1;\
    \ i++)); do\n        for ((j=i+1; j<$len; j++)); do\n            for ((k=j+1;\
    \ k<=$len; k++)); do\n                res=$((arr[i]+arr[j]+arr[k]))\n        \
    \        #echo $res\n                if [ $((res%3)) -eq 0 ]; then\n         \
    \           #echo $i\n                    #echo $j\n                    #echo\
    \ $k\n                    max_triple=$((max_triple+1))\n                fi\n \
    \           done\n        done\n    done\n    echo $max_triple", "    declare\
    \ -a arr\n    n=$1\n    counter=0\n    for (( i=1; i<=$n; i++ ))\n    do\n   \
    \     element=$((i*i-i+1))\n        arr[$counter]=$element\n        ((counter++))\n\
    \    done\n    echo ${arr[@]}\n\n    counter=0\n    for (( i=0; i<$n-2; i++ ))\n\
    \    do\n        for (( j=i+1; j<$n-1; j++ ))\n        do\n            for ((\
    \ k=j+1; k<$n; k++ ))\n            do\n                if [[ $((arr[i]+arr[j]+arr[k]))%3\
    \ -eq 0 ]]\n                then\n                    ((counter++))\n        \
    \        fi\n            done\n        done\n    done\n    echo $counter", " \
    \ local -n arr=(\"$1\")\n  local arr_length=${#arr[@]}\n  local count=0\n  for\
    \ (( i=0; i<$arr_length; i++ )); do\n    for (( j=i+1; j<$arr_length; j++ ));\
    \ do\n      for (( k=j+1; k<$arr_length; k++ )); do\n        if [[ $((arr[i]+arr[j]+arr[k]))%3\
    \ -eq 0 ]]; then\n          count=$((count+1))\n        fi\n      done\n    done\n\
    \  done\n  echo $count", "    local -n arr=$1\n    local -i m=${#arr[@]}\n   \
    \ local -i i j k\n    local -i triple=0\n    for ((i=0; i<$m-2; i++)); do\n  \
    \      for ((j=i+1; j<$m-1; j++)); do\n            for ((k=j+1; k<$m; k++)); do\n\
    \                if [[ $(((${arr[i]}+${arr[j]}+${arr[k]}))%3)) -eq 0 ]]; then\n\
    \                    (( triple++ ))\n                fi\n            done\n  \
    \      done\n    done\n    echo $triple", "\tlocal total=0\n\tlocal N=$1\n\tlocal\
    \ a=()\n\tfor (( i=1; i<=$N; i++ )); do\n\t\ta+=($(( i*i - i + 1 )))\n\tdone\n\
    \tfor (( i=0; i<$N-2; i++ )); do\n\t\tfor (( j=$i+1; j<$N-1; j++ )); do\n\t\t\t\
    for (( k=$j+1; k<$N; k++ )); do\n\t\t\t\tlocal sum=$(( a[i] + a[j] + a[k] ))\n\
    \t\t\t\tif (( sum % 3 == 0 )); then\n\t\t\t\t\t(( total++ ))\n\t\t\t\tfi\n\t\t\
    \tdone\n\t\tdone\n\tdone\n\techo $total", "    local n=$1\n    local a=()\n  \
    \  local solution=0\n    local i\n    local j\n    local k\n    for ((i=1; i<=n;\
    \ i++)); do\n        a[i-1]=$((i*i-i+1))\n    done\n    for ((i=0; i<=n-3; i++));\
    \ do\n        for ((j=i+1; j<=n-2; j++)); do\n            for ((k=j+1; k<=n-1;\
    \ k++)); do\n                if (((a[i]+a[j]+a[k])%3==0)); then\n            \
    \        solution=$((solution+1))\n                fi\n            done\n    \
    \    done\n    done\n    echo $solution", "    local n=$1\n    local a=($(create_arr_from_1_to_n\
    \ $n))\n    local sum_triples=0\n    local count_triples=0\n    while [[ $sum_triples\
    \ -le $n ]]; do\n        local i=${a[$sum_triples]}\n        local j=${a[$(($sum_triples\
    \ + 1))]}\n        local k=${a[$(($sum_triples + 2))]}\n        if [[ $i && $j\
    \ && $k ]]; then\n            if [[ $((i + j + k))%3 -eq 0 ]]; then\n        \
    \        count_triples=$((count_triples + 1))\n            fi\n        fi\n  \
    \      sum_triples=$((sum_triples + 1))\n    done\n    echo $count_triples", "\t\
    local n=$1\n\tlocal a=()\n\t# Your code starts here\n\tfor i in $(seq 1 $n); do\n\
    \t\ta+=($(($i*$i-$i+1)))\n\tdone\n\tlocal result=0\n\tfor ((i=0; i<$n-2; i++));\
    \ do\n\t\tfor ((j=i+1; j<$n-1; j++)); do\n\t\t\tfor ((k=j+1; k<$n; k++)); do\n\
    \t\t\t\tif [[ $(((${a[$i]}+${a[$j]}+${a[$k]}))) -eq 0 ]]; then\n\t\t\t\t\tresult=$((result+1))\n\
    \t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\techo $result\n\t# Your code ends here",
  "    local -n arr=$1\n    local n=$2\n    local res=0\n    for ((i=0; i<$n; i++));\
    \ do\n        for ((j=i+1; j<$n; j++)); do\n            for ((k=j+1; k<$n; k++));\
    \ do\n                if [[ $((${arr[$i]} + ${arr[$j]} + ${arr[$k]}))%3 -eq 0\
    \ ]]; then\n                    res=$(($res+1))\n                fi\n        \
    \    done\n        done\n    done\n    echo $res", "  printf \"%s\\n\" \"$1\"\
    \ | awk '{\n    res = 0;\n    for (i = 1; i <= $1; i++) {\n      for (j = i +\
    \ 1; j <= $1; j++) {\n        for (k = j + 1; k <= $1; k++) {\n          if ((i*i\
    \ - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n            res++;\n     \
    \     }\n        }\n      }\n    }\n    print res;\n  }'", "\tpython <<-END\n\t\
    from itertools import combinations\n\tfrom collections import Counter\n\tfrom\
    \ collections import defaultdict\n\tfrom functools import reduce\n\tfrom operator\
    \ import add\n\ta = [i * i - i + 1 for i in range(1, int($1) + 1)]\n\ttriples\
    \ = Counter(reduce(add, comb) % 3 for comb in combinations(a, 3))\n\tprint(triples[0])\n\
    \tEND", "\tif ! [[ $1 =~ ^[0-9]+$ ]]; then\n\t\techo \"No valid integer has been\
    \ entered\"\n\t\texit 1\n\tfi\n\t\n\tn=$1\n\t((n--))\n\t((n*n*n/6))", "\t# Write\
    \ your solution here\n\tlength=$1\n\ta=0\n\tfor i in $(seq 1 1 $length)\n\tdo\n\
    \t\tb=$(expr $i \\* $i - $i + 1)\n\t\tfor j in $(seq $i 1 $length)\n\t\tdo\n\t\
    \t\tc=$(expr $j \\* $j - $j + 1)\n\t\t\tfor k in $(seq $j 1 $length)\n\t\t\tdo\n\
    \t\t\t\td=$(expr $k \\* $k - $k + 1)\n\t\t\t\tif [ $(expr $b + $c + $d) % 3 -eq\
    \ 0 ]\n\t\t\t\tthen\n\t\t\t\t\ta=$(expr $a + 1)\n\t\t\t\tfi\n\t\t\tdone\n\t\t\
    done\n\tdone\n\techo $a", "\tlocal arr=()\n\tfor (( i=1; i<=\"$1\"; i++ ))\n\t\
    do\n\t\tarr+=(\"$((i*i-i+1))\")\n\tdone\n\tlocal sum\n\tlocal c=0\n\tfor (( i=0;\
    \ i<${#arr[@]}-2; i++ ))\n\tdo\n\t\tfor (( j=i+1; j<${#arr[@]}-1; j++ ))\n\t\t\
    do\n\t\t\tfor (( k=j+1; k<${#arr[@]}; k++ ))\n\t\t\tdo\n\t\t\t\tsum=$((arr[i]+arr[j]+arr[k]))\n\
    \t\t\t\tif (( sum%3==0 ))\n\t\t\t\tthen\n\t\t\t\t\t((c++))\n\t\t\t\tfi\n\t\t\t\
    done\n\t\tdone\n\tdone\n\techo \"$c\"", "    n=$1\n    count=0\n    a=()\n   \
    \ # Building an array of length n where a[i] = i*i - i + 1\n    for ((i=1; i<=$n;\
    \ i++)); do\n        a[$i]=$((i*i - i + 1))\n    done\n    # Iterating over the\
    \ array of length n\n    for ((i=1; i<$n-1; i++)); do\n        for ((j=$i+1; j<$n;\
    \ j++)); do\n            for ((k=$j+1; k<=$n; k++)); do\n                # Checking\
    \ the condition a[i] + a[j] + a[k] is a multiple of 3\n                if [ $((a[$i]\
    \ + a[$j] + a[$k])) -eq $(((a[$i] + a[$j] + a[$k])/3 * 3)) ]; then\n         \
    \           ((count++))\n                fi\n            done\n        done\n\
    \    done\n    echo $count", "  local __resultvar=$1\n  local __array=()\n  local\
    \ __i=1\n  while [ $__i -le $1 ]; do\n    local __value=$((($__i * $__i) - $__i\
    \ + 1))\n    if [ $((__value % 3)) -eq 0 ]; then\n      __array+=($__value)\n\
    \    fi\n    ((__i++))\n  done\n  echo ${__array[@]} | wc -w", "  local ARRAY=()\n\
    \  for (( i=1; i<=$1; i++ )); do\n    ARRAY+=($((i*i-i+1)))\n  done\n  local COUNT=0\n\
    \  for (( i=0; i<${#ARRAY[@]}; i++ )); do\n    for (( j=i+1; j<${#ARRAY[@]}; j++\
    \ )); do\n      for (( k=j+1; k<${#ARRAY[@]}; k++ )); do\n        if [[ $((${ARRAY[i]}+${ARRAY[j]}+${ARRAY[k]}))%3\
    \ -eq 0 ]]; then\n          ((COUNT++))\n        fi\n      done\n    done\n  done\n\
    \  echo $COUNT", "\t[ $# -eq 0 ] && return 1\n\techo \"($(seq 0 $1) | awk '{print\
    \ $1 * $1 - $1 + 1}') | awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 -\
    \ $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' |\
    \ awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print\
    \ $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 -\
    \ $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' |\
    \ awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print\
    \ $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 -\
    \ $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' |\
    \ awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print\
    \ $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 -\
    \ $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' | awk '{print $1 * $1 - $1 + 1}' |\
    \ awk '{print $1 * $1 - $1 + 1}' | awk", "    # Write your code here\n    local\
    \ array=()\n    for (( i=1; i<=$1; i++ ))\n    do\n        array[$i]=$(( i*i -\
    \ i + 1 ))\n    done\n    # echo \"${array[@]}\"\n    local count=0\n    for ((\
    \ i=1; i<=$(( $1-2 )); i++ ))\n    do\n        for (( j=$(( $i+1 )); j<=$(( $1-1\
    \ )); j++ ))\n        do\n            for (( k=$(( $j+1 )); k<=$1; k++ ))\n  \
    \          do\n                if [[ $(( ${array[$i]} + ${array[$j]} + ${array[$k]}\
    \ ))%3 -eq 0 ]]\n                then\n                    (( count++ ))\n   \
    \             fi\n            done\n        done\n    done\n    echo \"$count\"",
  "    echo $(( $(echo $( for (( i=1; i<=$1; i++ ))\n    do\n        echo $(( $i *\
    \ $i - $i + 1 ))\n    done\n)) | sed 's/ /\\n/g' | sort -n | uniq | sed 's/\\\
    n/ + /g' | grep ' + [0-9]\\+ + [0-9]\\+$' | grep -oP '\\+ \\K[0-9]+' | wc -l )\
    \ 2> /dev/null)", "  awk -v \"n=$1\" '\n    BEGIN {\n      for (i = 1; i <= n;\
    \ i++) a[i] = i * i - i + 1\n      for (i = 1; i <= n; i++)\n        for (j =\
    \ i + 1; j <= n; j++)\n          for (k = j + 1; k <= n; k++)\n            if\
    \ ((a[i] + a[j] + a[k]) % 3 == 0)\n              cnt++\n      print cnt\n    }\n\
    \  '", '    echo $1', "    n=$1\n    (( n % 3 == 0 )) && (( n > 3 )) && echo $((\
    \ n * (n - 1) * (n - 2) / 6 )) || echo 0", "\tlocal -a a\n\tfor ((i=1; i<=$1;\
    \ i++)); do\n\t\ta[$i]=$((i*i-i+1))\n\tdone\n\tlocal count=0\n\tfor ((i=1; i<=$1;\
    \ i++)); do\n\t\tfor ((j=1; j<=$1; j++)); do\n\t\t\tfor ((k=1; k<=$1; k++)); do\n\
    \t\t\t\tif [[ $i -lt $j && $j -lt $k && $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n\
    \t\t\t\t\tcount=$((count+1))\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\techo\
    \ $count", "    local array\n    local len=$1\n    local triple_counter=0\n  \
    \  for ((i=1; i<=$len; i++)); do\n        for ((j=i+1; j<=$len; j++)); do\n  \
    \          for ((k=j+1; k<=$len; k++)); do\n                if (( ( $i * $i -\
    \ $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1 ) % 3 == 0 )); then\n         \
    \           ((triple_counter++))\n                fi\n            done\n     \
    \   done\n    done\n    echo \"$triple_counter\"", "    local input=${1}\n   \
    \ local num_count=${input}\n    local num_line=${input}\n    local -i num_multi=0\n\
    \    local -i i=0\n    local -i j=0\n    local -i k=0\n    local output=0\n  \
    \  local line=''\n    local -i tmp=0\n    local -i sum=0\n    local -i mod=0\n\
    \    for (( i=1; i<=${num_count}; i++ )); do\n        tmp=$(( ${i} * ${i} - ${i}\
    \ + 1 ))\n        line+=\"${tmp} \"\n    done\n    while read -r line; do\n  \
    \      num_line=$(( ${num_line} - 1 ))\n        if [[ \"${num_line}\" -eq 0 ]];\
    \ then\n            break\n        fi\n        arr=( ${line} )\n        arr_len=${#arr[@]}\n\
    \        for (( i=0; i<((${arr_len}-2)); i++ )); do\n            for (( j=(i+1);\
    \ j<((${arr_len}-1)); j++ )); do\n                for (( k=(j+1); k<${arr_len};\
    \ k++ )); do\n                    sum=$(( ${arr[${i}]} + ${arr[${j}]} + ${arr[${k}]}\
    \ ))\n                    mod=$(( ${sum} % 3 ))\n                    if [[ \"\
    ${mod}\" -eq 0 ]]; then\n                        num_multi=$(( ${num_multi} +\
    \ 1 ))\n                    fi\n                done\n            done\n     \
    \   done\n    done <<< \"${line}\"\n    echo \"${num_multi}\"", "    local a=(\
    \ $(for ((i=1; i<=$1; i++)); do echo \"$((i*i-i+1))\"; done) )\n    local n=$(($1-2))\n\
    \    local counter=0\n    for ((i=0; i<$n; i++)); do\n        for ((j=$((i+1));\
    \ j<$(($n+1)); j++)); do\n            for ((k=$((j+1)); k<$(($n+2)); k++)); do\n\
    \                if [[ $((a[i]+a[j]+a[k]))%3 -eq 0 ]]; then ((counter++)); fi\n\
    \            done\n        done\n    done\n    echo \"$counter\"", "    c=0\n\
    \    for ((i=1; i<$1; i++)); do\n        for ((j=i+1; j<$1; j++)); do\n      \
    \      for ((k=j+1; k<$1; k++)); do\n                (($(($i+$j+$k))%3==0)) &&\
    \ ((c++))\n            done\n        done\n    done\n    echo $c", "    [ -z \"\
    $1\" ] && echo -1 && return 1\n    [[ ! \"$1\" =~ ^[0-9]+$ ]] && echo -1 && return\
    \ 1\n    declare -a arr\n    arr[0]=0\n    arr[1]=1\n    arr[2]=1\n    arr[3]=1\n\
    \    n=$1\n    for (( i=4; i<=n; i++ ))\n    do\n        arr[i]=arr[i-3]+arr[i-2]\n\
    \    done\n    echo ${arr[n]}", '    echo $(python -c "s = 0; [s.add(nums) for
    nums in [sum(a) for a in itertools.combinations(map(lambda x: x * x - x + 1, range(1,
    int($1) + 1)) , 3) if sum(a) % 3 == 0]]; print(len(s))")', "    local n=\"$1\"\
    \n    # Fill this \n    local a=\n    printf \"%s\" \"$a\"", "  local n=\"$1\"\
    \n  local -a arr\n  local sum=0\n  local i=0\n  local j=0\n  local k=0\n  local\
    \ max=0\n  local result=0\n  for (( i=1; i<=$n; i++ )); do\n    arr[$i]=$(( $i\
    \ * $i - $i + 1 ))\n  done\n  for (( i=1; i<=$n; i++ )); do\n    for (( j=1; j<=$n;\
    \ j++ )); do\n      for (( k=1; k<=$n; k++ )); do\n        if [[ \"$i\" -lt \"\
    $j\" && \"$j\" -lt \"$k\" ]]; then\n          sum=$(( ${arr[$i]} + ${arr[$j]}\
    \ + ${arr[$k]} ))\n          if [[ $(( $sum % 3 )) -eq 0 ]]; then\n          \
    \  result=$(( $result + 1 ))\n          fi\n        fi\n      done\n    done\n\
    \  done\n  echo \"$result\"", "    local -n a=$1\n    local c=0\n    for ((i=0;\
    \ i<${#a[@]}; i++)); do\n        for ((j=i+1; j<${#a[@]}; j++)); do\n        \
    \    for ((k=j+1; k<${#a[@]}; k++)); do\n                if (( (a[i] + a[j] +\
    \ a[k]) % 3 == 0 )); then\n                    ((c++))\n                fi\n \
    \           done\n        done\n    done\n    echo $c", "    local n=$1\n    local\
    \ sum=0\n\n    for (( i=1; i<n; i++ )); do\n        for (( j=i+1; j<n; j++ ));\
    \ do\n            for (( k=j+1; k<n; k++ )); do\n                (( ((i*i - i\
    \ + 1) + (j*j - j + 1) + (k*k - k + 1)) % 3 == 0 )) && (( sum++ ))\n         \
    \   done\n        done\n    done\n\n    echo $sum", "    if [[ $1 =~ ^[1-9][0-9]*$\
    \ ]]; then\n        local d=${1}\n        local array\n        for ((i=1; i<=d;\
    \ i++)); do\n            array[$i]=$((i*i-i+1))\n        done\n        local sum_triples=0\n\
    \        for ((i=1; i<=d-2; i++)); do\n            for ((j=i+1; j<=d-1; j++));\
    \ do\n                for ((k=j+1; k<=d; k++)); do\n                    sum=$((array[$i]+array[$j]+array[$k]))\n\
    \                    if [[ ${sum} -eq 0 || ${sum}%3 -eq 0 ]]; then\n         \
    \               ((sum_triples++))\n                    fi\n                done\n\
    \            done\n        done\n        echo ${sum_triples}\n    else\n     \
    \   echo \"Error: $1 is not an integer\"\n    fi", '  # your code here', "   \
    \ readonly n=$1\n    readonly a=()\n    readonly l=()\n    readonly r=()\n   \
    \ readonly ans=0\n    local -i k\n\n    for (( i=1; i<=$n; i++ )); do\n      \
    \  a+=($((i*i-i+1)))\n    done\n\n    for (( i=0; i<=$n; i++ )); do\n        l+=(0)\n\
    \        r+=(0)\n    done\n\n    for (( i=0; i<$n; i++ )); do\n        for ((\
    \ j=i+1; j<$n; j++ )); do\n            k=$((a[i]+a[j]))\n            k=$((k%3))\n\
    \            if (( k == 0 )); then\n                l[j]=$((l[j]+1))\n       \
    \     fi\n        done\n    done\n\n    for (( i=$((n-1)); i>=0; i-- )); do\n\
    \        for (( j=$((i-1)); j>=0; j-- )); do\n            k=$((a[i]+a[j]))\n \
    \           k=$((k%3))\n            if (( k == 0 )); then\n                r[j]=$((r[j]+1))\n\
    \            fi\n        done\n    done\n\n    for (( i=0; i<$n; i++ )); do\n\
    \        ans=$((ans+l[i]*r[i]))\n    done\n\n    echo $ans", "\tlocal n=$1\n\t\
    local a=()\n\tfor ((i=1; i<=n; i++)); do\n\t\tlocal x=$((i*i-i+1))\n\t\ta[i]=$x\n\
    \tdone\n\t#echo ${a[@]}\n\tlocal count=0\n\tfor ((i=1; i<=n; i++)); do\n\t\tfor\
    \ ((j=i+1; j<=n; j++)); do\n\t\t\tfor ((k=j+1; k<=n; k++)); do\n\t\t\t\tlocal\
    \ x=$((a[i]+a[j]+a[k]))\n\t\t\t\tif [[ $((x%3)) -eq 0 ]]; then\n\t\t\t\t\t((count++))\n\
    \t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\techo $count", "  local n=\"$1\"\n\
    \  local count=0\n  # write your solution here\n  return $count", "\tlocal inp=\"\
    $1\"\n\tlocal -i i=0 sum=0 n_triples=0 n_triples_rem=0\n\tlocal -i max_triples=0\
    \ \n\tlocal -i sum_modulo=0\n\t# for each element of the array\n\tfor ((i=1; i<=inp;\
    \ i++)); do\n\t\tsum=$((i*i - i + 1))\n\t\t# for each element of the remaining\
    \ array\n\t\tfor ((j=i+1; j<=inp; j++)); do\n\t\t\t# for each element of the remaining\
    \ array\n\t\t\tfor ((k=j+1; k<=inp; k++)); do\n\t\t\t\t# check the sum of triple\n\
    \t\t\t\tsum_modulo=$((sum+j*j-j+1+k*k-k+1))\n\t\t\t\tif ((sum_modulo%3==0)); then\n\
    \t\t\t\t\t((n_triples++))\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\techo \"\
    $n_triples\"", "    if [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo $(( $1 - 1\
    \ ))\n    else\n        echo $1\n    fi", "  if [[ $1 -ge 1 && $1 -le 10^9 ]];\
    \ then\n    awk -v n=$1 'BEGIN {\n      sum = 0;\n      for (i = 1; i <= n; i++)\
    \ {\n        arr[i] = i * i - i + 1;\n      }\n      for (i = 1; i <= n; i++)\
    \ {\n        for (j = i + 1; j <= n; j++) {\n          for (k = j + 1; k <= n;\
    \ k++) {\n            if ((arr[i] + arr[j] + arr[k]) % 3 == 0) {\n           \
    \   sum = sum + 1;\n            }\n          }\n        }\n      }\n      print\
    \ sum;\n    }'\n  fi", "\tlocal ans=0\n\tfor (( i=1; i<=$1; i++ ))\n\tdo\n\t\t\
    for (( j=i+1; j<=$1; j++ ))\n\t\tdo\n\t\t\tlocal ai=$(( $i * $i - $i + 1 ))\n\t\
    \t\tlocal aj=$(( $j * $j - $j + 1 ))\n\t\t\tlocal sum=$(( $ai + $aj ))\n\t\t\t\
    if (( $sum % 3 == 0 ))\n\t\t\tthen\n\t\t\t\t(( ans++ ))\n\t\t\tfi\n\t\tdone\n\t\
    done\n\techo $ans", "    declare -a a\n    sum=0\n    n=$1\n    for (( i=1; i<=n;\
    \ i++ )); do\n        a[$i]=$(( $i * $i - $i + 1 ))\n    done\n    echo ${a[@]}\n\
    \    for (( i=1; i<=n; i++ )); do\n        for (( j=i+1; j<=n; j++ )); do\n  \
    \          for (( k=j+1; k<=n; k++ )); do\n                sum=$(( a[$i] + a[$j]\
    \ + a[$k] ))\n                if [[ $(( $sum % 3 )) -eq 0 ]]; then\n         \
    \           count=$(( $count + 1 ))\n                fi\n            done\n  \
    \      done\n    done\n    echo $count", '    echo $((($1 - 1) * $1 * ($1 - 2)
    / 6))', "    local count=0\n    local result=0\n    local -a array\n    for i\
    \ in $(seq 0 $1); do\n        array[$i]=$((i*i-i+1))\n    done\n    echo ${array[@]}\n\
    \    for i in $(seq 0 $1); do\n        for j in $(seq 0 $1); do\n            for\
    \ k in $(seq 0 $1); do\n                if [[ $((i<j)) == 1 && $((j<k)) == 1 ]];\
    \ then\n                    if [[ $((array[i]+array[j]+array[k]))%3 == 0 ]]; then\n\
    \                        ((count++))\n                    fi\n               \
    \ fi\n            done\n        done\n    done\n    echo $count", "    local input=$1\n\
    \    local a_i=0\n    local sum=0\n    local counter=0\n    for (( i=1; i<=$input;\
    \ i++ ))\n    do\n        a_i=$((i*i-i+1))\n        for (( j=i+1; j<=$input; j++\
    \ ))\n        do\n            a_j=$((j*j-j+1))\n            for (( k=j+1; k<=$input;\
    \ k++ ))\n            do\n                a_k=$((k*k-k+1))\n                sum=$((a_i+a_j+a_k))\n\
    \                if [ $((sum%3)) -eq 0 ]\n                then\n             \
    \       counter=$((counter+1))\n                fi\n            done\n       \
    \ done\n    done\n    echo $counter", "    local a=()\n    local sum=0\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local result=0\n    for (( i=1; i<=$1;\
    \ i++ )); do\n        a[i]=$(( i*i - i + 1 ))\n    done\n    for (( i=1; i<$1-1;\
    \ i++ )); do\n        for (( j=i+1; j<$1; j++ )); do\n            for (( k=j+1;\
    \ k<=$1; k++ )); do\n                (( sum = a[i] + a[j] + a[k] ))\n        \
    \        if [[ $(( sum % 3 )) -eq 0 ]]; then\n                    (( result++\
    \ ))\n                fi\n            done\n        done\n    done\n    echo \"\
    $result\"", "    local array=()\n    for (( i=1; i<=$1; i++ ))\n    do\n     \
    \   array+=($((i*i-i+1)))\n    done\n    local sum=0\n    for (( i=0; i<${#array[@]};\
    \ i++ ))\n    do\n        for (( j=i+1; j<${#array[@]}; j++ ))\n        do\n \
    \           for (( k=j+1; k<${#array[@]}; k++ ))\n            do\n           \
    \     sum=$((array[i]+array[j]+array[k]))\n                if [[ $(($sum%3)) -eq\
    \ 0 ]]\n                then\n                    echo $((sum%3))\n          \
    \      fi\n            done\n        done\n    done", "    local N=$1\n    local\
    \ solution=0\n    for (( j=1; j<N-1; j++ ))\n    do\n        for (( k=j+1; k<N;\
    \ k++ ))\n        do\n            if [[ $((j*j-j+1+k*k-k+1))%3 -eq 0 ]]\n    \
    \        then\n                solution=$((solution+1))\n            fi\n    \
    \    done\n    done\n    echo $solution", "    a=\"1 3 7 13 21\"\n    b=\"5 9\
    \ 19 31 47\"\n    [ $1 -gt 5 ] && a+=\" $b\"\n    echo $a | tr \" \" \"\\n\" |\
    \ grep -cE '^[0-9]+$'", "  local a=($(seq 1 $1))\n  local triples=0\n  for i in\
    \ $(seq 0 $(( $1 - 3 ))); do\n    a[$i]=$(( (i+1)**2 - (i+1) + 1 ))\n    for j\
    \ in $(seq $(( i + 1 )) $(( $1 - 2 ))); do\n      a[$j]=$(( (j+1)**2 - (j+1) +\
    \ 1 ))\n      for k in $(seq $(( j + 1 )) $(( $1 - 1 ))); do\n        a[$k]=$((\
    \ (k+1)**2 - (k+1) + 1 ))\n        if [[ $(( a[$i] + a[$j] + a[$k] ))%3 -eq 0\
    \ ]]; then\n          triples=$(( triples + 1 ))\n        fi\n      done\n   \
    \ done\n  done\n  echo \"$triples\"", "    array=($(for ((i=1; i<=$1; i++)); do\
    \ echo $(($i*$i-$i+1)); done;))\n    for ((i=0; i<$1; i++)); do\n        for ((j=i+1;\
    \ j<$1; j++)); do\n            for ((k=j+1; k<$1; k++)); do\n                if\
    \ [[ $((array[i]+array[j]+array[k]))%3 -eq 0 ]]; then\n                    counter=$((counter+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $counter",
  "  local __resultvar=$1\n  local -n a=$2\n  local n=$3\n  local mid=\"$(( n / 2\
    \ ))\"\n  local idx=0\n  local sum=0\n  local mod_sum=0\n  while [ $idx -lt $n\
    \ ]; do\n    a[$idx]=$(( idx * idx - idx + 1 ))\n    (( idx++ ))\n  done\n  idx=0\n\
    \  while [ $idx -lt $mid ]; do\n    (( sum = a[idx] + a[n - idx - 1] ))\n    ((\
    \ mod_sum += sum % 3 ))\n    (( idx++ ))\n  done\n  if [ $(( n % 2 )) -eq 1 ];\
    \ then\n    (( mod_sum += a[mid] % 3 ))\n  fi\n  mod_sum=$(( mod_sum % 3 ))\n\
    \  local res=0\n  case $mod_sum in\n    1)  res=1 ;;\n    2)  res=2 ;;\n    0)\
    \  res=3 ;;\n  esac\n  echo \"$res\"", "    local max=$1\n    local sum=0\n  \
    \  local triple=0\n    local i=0\n    local j=0\n    local k=0\n    for ((i=1;\
    \ i<max; i++)); do\n        for ((j=i+1; j<max; j++)); do\n            for ((k=j+1;\
    \ k<max; k++)); do\n                sum=$((i*i-i+1 + j*j-j+1 + k*k-k+1))\n   \
    \             if ((sum%3==0)); then\n                    triple=$((triple+1))\n\
    \                fi\n            done\n        done\n    done\n    echo \"$triple\"",
  '   echo $((($1 * $1 * $1) - ($1 * $1) + $1))', "    local n=$1\n    # Return number\
    \ of triplets of a[] \n    # whose sum is a multiple of 3. \n    local count=0\n\
    \    for ((i=0; i<=$((n-3)); i++)) \n    do \n        for ((j=$((i+1)); j<=$((n-2));\
    \ j++)) \n        do \n            for ((k=$((j+1)); k<=$((n-1)); k++)) \n   \
    \         do \n                if (( ( (i+j+k)%3 ) == 0 )) \n                then\
    \ \n                    ((count++)) \n                fi \n            done \n\
    \        done \n    done \n    echo $count", "    echo \"$1\" | awk '{\n     \
    \   for (i = 1; i <= $1; i++)\n            a[i] = i * i - i + 1\n        count\
    \ = 0\n        for (i = 1; i <= $1 - 2; i++)\n            for (j = i + 1; j <=\
    \ $1 - 1; j++)\n                for (k = j + 1; k <= $1; k++)\n              \
    \      if ((a[i] + a[j] + a[k]) % 3 == 0)\n                        count++\n \
    \       print count\n    }'", "\tlocal sum_of_three\n\tlocal a_i a_j a_k\n\tlocal\
    \ n=$1\n\tlocal i j k\n\tlocal valid_triples=0\n\t# create an array of length\
    \ n, with values from 1..n*n-n+1\n\tfor (( i=1; i<=n; i++ )); do\n\t\ta[$i]=$((\
    \ i*i-i+1 ))\n\tdone\n\t# for each triple of a[i], a[j], a[k] (i < j < k) see\
    \ if their sum is a multiple of 3\n\tfor (( i=1; i<=n-2; i++ )); do\n\t\ta_i=${a[$i]}\n\
    \t\tfor (( j=i+1; j<=n-1; j++ )); do\n\t\t\ta_j=${a[$j]}\n\t\t\tfor (( k=j+1;\
    \ k<=n; k++ )); do\n\t\t\t\ta_k=${a[$k]}\n\t\t\t\tsum_of_three=$(( a_i+a_j+a_k\
    \ ))\n\t\t\t\tif [[ $(( sum_of_three%3 )) -eq 0 ]]; then\n\t\t\t\t\tvalid_triples=$((\
    \ valid_triples+1 ))\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tdone\n\techo $valid_triples",
  "    # Write your solution here\n    echo \"\"", "    read -r n\n    local a\n \
    \   a=($(get_array_of_length_n $n))\n    local count=0\n    for ((i=0; i<${#a[@]};\
    \ i++)); do\n        for ((j=i+1; j<${#a[@]}; j++)); do\n            for ((k=j+1;\
    \ k<${#a[@]}; k++)); do\n                if [[ $((${a[i]} + ${a[j]} + ${a[k]}))%3\
    \ -eq 0 ]]; then\n                    ((count++))\n                fi\n      \
    \      done\n        done\n    done\n    echo $count", "    local n=$1\n    if\
    \ [ $n -lt 3 ]; then\n        echo 0\n        return\n    fi\n    n=$((n-1))\n\
    \    echo $(( n*(n-1)*(n-2)/6 ))", "\tlocal i j k\n\tlocal counter=0\n\tlocal\
    \ max=$1\n\t# 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47\
    \ 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n\
    \tfor ((i=1; i<=max; i++)); do\n\t\tfor ((j=1; j<=max; j++)); do\n\t\t\tfor ((k=1;\
    \ k<=max; k++)); do\n\t\t\t\tif [ $i -lt $j ] && [ $j -lt $k ]; then\n\t\t\t\t\
    \tif [ $(($i+$j+$k)) -eq $((3*$((($i*$i)-$i+1+$((($j*$j)-$j+1+$((($k*$k)-$k+1))))))))\
    \ ]; then\n\t\t\t\t\t\t((counter++))\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tdone\n\t\
    \tdone\n\tdone\n\techo $counter", "\tif [[ $1 -gt 0 ]]; then\n\t\tfor n in $(seq\
    \ $1); do echo -n $(($n * $n - $n + 1))' '; done | tr ' ' '\\n' |\n\t\twhile read\
    \ i; do\n\t\t\tfor j in $(seq $((i + 1)) $1); do\n\t\t\t\tif [[ $(((i + j) % 3))\
    \ -eq 0 ]]; then\n\t\t\t\t\tfor k in $(seq $((j + 1)) $1); do\n\t\t\t\t\t\tif\
    \ [[ $(((i + j + k) % 3)) -eq 0 ]]; then\n\t\t\t\t\t\t\techo $(($i + $j + $k))\n\
    \t\t\t\t\t\tfi\n\t\t\t\t\tdone\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone | sort -rn |\
    \ head -n 1\n\tfi", "    local n=\"$1\"\n    local mod=3\n    local even=\"$((n/2))\"\
    \n    local odd=\"$((n%2))\"\n    local num_even_1=\"$((even*(even-1)))\"\n  \
    \  local num_even_2=\"$((even*(even+1)))\"\n    local num_odd_1=\"$((odd*(odd-1)))\"\
    \n    local num_odd_2=\"$((odd*(odd+1)))\"\n    local result=$((((mod-1)*(num_even_1)\
    \ + (mod-2)*(num_even_2) + mod*(num_odd_1) + (mod-2)*(num_odd_2))/mod))\n    echo\
    \ \"$result\"", "    local sum=0\n    local triple=3\n    echo $1\n    for i in\
    \ $(seq 1 $1); do\n        sum=$((sum + $i))\n        if [[ $((sum % 3)) -eq 0\
    \ ]]; then\n            triple=$((triple + 1))\n        fi\n    done\n    echo\
    \ $triple", "  local input\n  input=$1\n  local -i total=0\n  local -i i\n  for\
    \ ((i=1; i<input; i++)); do\n    ((total=total+i))\n  done\n  echo $total", " \
    \ local i\n  local j\n  local k\n  local sum\n  local a\n  local b\n  local c\n\
    \  local count\n  declare -i i\n  declare -i j\n  declare -i k\n  declare -i sum\n\
    \  declare -i count\n  for ((i=1; i<$1; i++)); do\n    a=$(($i * $i - $i + 1))\n\
    \    for ((j=i+1; j<$1; j++)); do\n      b=$(($j * $j - $j + 1))\n      for ((k=j+1;\
    \ k<$1; k++)); do\n        c=$(($k * $k - $k + 1))\n        sum=$(($a + $b + $c))\n\
    \        if [[ $(($sum % 3)) -eq 0 ]]; then\n          (( count++ ))\n       \
    \ fi\n      done\n    done\n  done\n  echo $count", "    a=()\n    echo $1 | sed\
    \ -e 's/^[ \\t]*//' | tr '\\n' ' ' | sed -e 's/[ \\t]*$//' | tr -s ' ' | sed -e\
    \ 's/ /\\n/g' |\n    while read number\n    do\n        a+=($number)\n    done\n\
    \    #counts=0\n    if [ \"${#a[@]}\" -gt 2 ]; then\n        counter=0\n     \
    \   for (( i=0; i<\"${#a[@]}\"; i++ )); do\n            sum1=0\n            for\
    \ (( j=0; j<\"${#a[@]}\"; j++ )); do\n                for (( k=0; k<\"${#a[@]}\"\
    ; k++ )); do\n                    sum1=$(( a[$i] + a[$j] + a[$k] ))\n        \
    \            if [ $sum1 -ge 0 ] && [ $(( sum1 % 3 )) -eq 0 ] && [ $i -lt $j ]\
    \ && [ $j -lt $k ]; then\n                        counter=$(( counter + 1 ))\n\
    \                    fi\n                done\n            done\n        done\n\
    \        echo $counter\n    else\n        echo 0\n    fi", "    if [[ $1 -eq 1\
    \ ]]; then\n        echo \"0\"\n    else\n        echo \"$(( $1 - 2 ))\"\n   \
    \ fi", "  n=$1\n  for (( i=1; i<=$n; i++ )); do\n    for (( j=i+1; j<=$n; j++\
    \ )); do\n      for (( k=j+1; k<=$n; k++ )); do\n        a=$(( $i*$i - $i + 1\
    \ ))\n        b=$(( $j*$j - $j + 1 ))\n        c=$(( $k*$k - $k + 1 ))\n     \
    \   sum=$(( $a + $b + $c ))\n        if [ $(($sum % 3)) -eq 0 ]; then\n      \
    \    ((counter++))\n        fi\n      done\n    done\n  done\n  echo $counter",
  "    MAX=$1\n    a=()\n    for (( i=1; i<=MAX; i++ )); do\n        a+=($(( i*i -\
    \ i + 1 )))\n    done\n    echo \"${a[@]}\"\n    N=${#a[@]}\n    counter=0\n \
    \   for (( i=0; i<N; i++ )); do\n        for (( j=i+1; j<N; j++ )); do\n     \
    \       for (( k=j+1; k<N; k++ )); do\n                s=$(( ${a[i]} + ${a[j]}\
    \ + ${a[k]} ))\n                r=$(( s % 3 ))\n                if [ $r -eq 0\
    \ ]; then\n                    counter=$(( counter + 1 ))\n                fi\n\
    \            done\n        done\n    done\n    echo \"$counter\"", "    local\
    \ n=${1}\n    if [[ $n -lt 3 ]]; then\n        echo \"0\"\n        return\n  \
    \  fi\n    if [[ $n -eq 3 ]]; then\n        echo \"1\"\n        return\n    fi\n\
    \    local a=$((n - 1))\n    local b=$((a * (a - 1) / 2))\n    echo \"$b\"", " \
    \   local n=$1\n    local result=0\n    for (( i=1; i<=$n; i++ )); do\n      \
    \  for (( j=$((i+1)); j<=$n; j++ )); do\n            for (( k=$((j+1)); k<=$n;\
    \ k++ )); do\n                local sum=$((i + j + k))\n                if ((\
    \ sum % 3 == 0 )); then\n                    result=$((result + 1))\n        \
    \        fi\n            done\n        done\n    done\n    echo $result", "  \
    \  local n=$1\n    local max_triples=0\n    local triples=0\n    local a=\"\"\n\
    \    for ((i=1; i<=$n; i++)); do\n        a=\"$a$(($i*$i-$i+1)) \"\n    done\n\
    \    echo $a | awk '{\n        for (i=1; i<=NF; i++) {\n            for (j=i+1;\
    \ j<=NF; j++) {\n                for (k=j+1; k<=NF; k++) {\n                 \
    \   if (($i+$j+$k)%3==0) {\n                        printf \"%d %d %d\\n\", $i,\
    \ $j, $k\n                        triples++\n                    }\n         \
    \       }\n            }\n        }\n        printf \"max triples: %d\\n\", triples\n\
    \    }'", "    declare -a a\n    a[0]=0\n    for ((i=1; i<=$1; i++)); do\n   \
    \     a[$i]=$(( (i * i) - i + 1 ))\n    done\n    echo ${a[@]}\n    local ans=0\n\
    \    for ((i=1; i<=$1; i++)); do\n        for ((j=i+1; j<=$1; j++)); do\n    \
    \        for ((k=j+1; k<=$1; k++)); do\n                if [[ $((${a[$i]} + ${a[$j]}\
    \ + ${a[$k]}))%3 -eq 0 ]]; then\n                    ((ans++))\n             \
    \   fi\n            done\n        done\n    done\n    echo $ans", "    # Write\
    \ your code here\n    a=()\n    count=0\n    for ((i=1; i<=$1; i++)); do\n   \
    \     a[$i]=$((i*i-i+1))\n    done\n    for ((i=1; i<$1-1; i++)); do\n       \
    \ for ((j=i+1; j<$1; j++)); do\n            for ((k=j+1; k<=$1; k++)); do\n  \
    \              if [[ $((a[$i]+a[$j]+a[$k]))%3 -eq 0 ]]; then\n               \
    \     count=$((count+1))\n                fi\n            done\n        done\n\
    \    done\n    echo $count", "    local my_answer\n    my_answer=$(answer-get_max_triples.sh\
    \ \"$@\")\n    echo \"$my_answer\"", "    declare -a a\n    local max=0\n    local\
    \ n=0\n    # check input, if not integer - exit with 1\n    if ! [[ \"$1\" =~\
    \ ^[0-9]+$ ]]\n    then\n        exit 1\n    fi\n    # and if input is 0 - return\
    \ 0\n    if [ \"$1\" -eq 0 ]\n    then\n        echo \"0\"\n        exit 0\n \
    \   fi\n    # initialize a\n    for ((i=1; i<=\"$1\"; i++))\n    do\n        a[$i]=$((\
    \ i * i - i + 1 ))\n    done\n    # main loop\n    for ((i=1; i<=${#a[@]}; i++))\n\
    \    do\n        for ((j=1; j<=${#a[@]}; j++))\n        do\n            for ((k=1;\
    \ k<=${#a[@]}; k++))\n            do\n                # if condition\n       \
    \         if [ $i -lt $j ] && [ $j -lt $k ] && [ $(( a[$i] + a[$j] + a[$k] ))\
    \ -eq $(( (a[$i] + a[$j] + a[$k]) / 3 * 3 )) ]\n                then\n       \
    \             # count number of triples\n                    n=$(( n + 1 ))\n\
    \                fi\n            done\n        done\n    done\n    # print number\
    \ of triples\n    echo \"$n\"", "    #\n    # Write your code here.\n    #", " \
    \   if [[ $1 =~ ^[0-9]+$ ]]; then\n        local -a numbers=()\n        for ((i=1;\
    \ i<=$1; i++)); do\n            numbers+=( $((i*i-i+1)) )\n        done\n    \
    \    local -i count=0\n        for ((i=0; i<$1-2; i++)); do\n            for ((j=i+1;\
    \ j<$1-1; j++)); do\n                for ((k=j+1; k<$1; k++)); do\n          \
    \          if [[ $((numbers[i]+numbers[j]+numbers[k]))%3 -eq 0 ]]; then\n    \
    \                    count+=1\n                    fi\n                done\n\
    \            done\n        done\n        echo $count\n    else\n        echo \"\
    Argument must be an integer.\" >&2\n        exit 1\n    fi", "    local n=${1?}\n\
    \    local res=0\n    local i\n    local j\n    local k\n    for ((i=1; i<$((n-2));\
    \ i++)); do\n        for ((j=$((i+1)); j<$((n-1)); j++)); do\n            for\
    \ ((k=$((j+1)); k<$((n)); k++)); do\n                if [[ $(((i*i-i+1)+(j*j-j+1)+(k*k-k+1)))\
    \ -eq 0 ]]; then\n                    ((res++))\n                fi\n        \
    \    done\n        done\n    done\n    echo \"$res\"", "    local n=$1\n    local\
    \ i\n    local j\n    local k\n    local x\n    local count=0\n    local sum\n\
    \    for ((i=1; i<$n; i++)); do\n        x=$((i*i-i+1))\n        for ((j=$((i+1));\
    \ j<$n; j++)); do\n            y=$((j*j-j+1))\n            for ((k=$((j+1)); k<$n;\
    \ k++)); do\n                z=$((k*k-k+1))\n                sum=$((x+y+z))\n\
    \                if [[ $((sum%3)) -eq 0 ]]; then\n                    count=$((count+1))\n\
    \                fi\n            done\n        done\n    done\n    echo $count",
  "  local arr_length=$1\n  local arr=()\n  local sum=0\n  local i\n  for i in $(seq\
    \ 1 $arr_length); do\n    arr[$i]=$(( i * i - i + 1 ))\n  done\n  for ((i=1; i<$arr_length-1;\
    \ i++)); do\n    for ((j=i+1; j<$arr_length; j++)); do\n      for ((k=j+1; k<=$arr_length;\
    \ k++)); do\n        sum=$(( arr[$i] + arr[$j] + arr[$k] ))\n        if [[ $((sum\
    \ % 3)) -eq 0 ]]; then\n          printf \"%s %s %s\\n\" \"${arr[$i]}\" \"${arr[$j]}\"\
    \ \"${arr[$k]}\"\n        fi\n      done\n    done\n  done", "    if [[ ! $1 =~\
    \ ^[0-9]+$ ]]; then\n        echo \"Error: Not an integer\"\n        return 1\n\
    \    fi\n    seq 1 $1 | awk '{a[$1]=$1*$1-$1+1}END{i=0;j=0;k=0;while(i<j&&j<k){i++;j++;k++}print\
    \ i}'"]
stop_tokens:
- "\n}"
