name: HumanEval_4_mean_absolute_deviation
language: sh
prompt: "#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute\
  \ Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the\
  \ average absolute difference between each\n# element and a centerpoint (mean in\
  \ this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"\
  1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation()\
  \ {\n"
tests: "}\n\ncandidate() {\n    mean_absolute_deviation \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"1.0 2.0\") = \"0.5\" ]]\n    [[ $(candidate \"1.0 2.0\
  \ 3.0 4.0\") = \"1.0\" ]]\n    [[ $(candidate \"1.0 2.0 3.0 4.0 5.0\") = \"1.2\"\
  \ ]]\n}\n\nrun_test"
completions: ["  if [ -z \"$1\" ]; then\n    echo \"\"\n    return\n  fi\n  local\
    \ mean=$(echo \"$1\" | python -c \"\nimport sys\nimport numpy as np\nprint np.mean(np.array(map(float,\
    \ sys.stdin.read().split())))\n\")\n  echo \"$1\" | python -c \"\nimport sys\n\
    import numpy as np\nprint np.mean(np.absolute(np.array(map(float, sys.stdin.read().split()))\
    \ - $mean))\n\"", "    all=(${1})\n    s=0\n    for element in ${all[@]}; do\n\
    \        s=$(echo \"$s + abs($element - (${all[@]} / ${#all[@]}))\" | bc -l)\n\
    \    done\n    average=$(echo \"$s / ${#all[@]}\" | bc -l)\n    echo $average",
  "    local list=\"$1\"\n    echo \"$list\" | awk '\n        BEGIN {\n          \
    \  sum = 0\n            x_mean = 0\n            count = 0\n        }\n       \
    \ {\n            sum += $1\n            count++\n        }\n        END {\n  \
    \          x_mean = sum / count\n            sum = 0\n            for (i = 1;\
    \ i <= count; i++) {\n                sum += (x_mean - $i)\n            }\n  \
    \          print sum / count\n        }\n    '", "    echo \"$1\" | awk '{ x =\
    \ 0; for (i = 1; i <= NF; i++) { x += $i; } x /= NF;\n        for (i = 1; i <=\
    \ NF; i++) { s += abs($i - x); } print s / NF; }'", "  IFS=\" \" read -r -a array\
    \ <<< \"$1\"\n  length=${#array[@]}\n  sum=0\n  for value in \"${array[@]}\";\
    \ do\n    sum=$(echo \"$sum + $value\" | bc -l)\n  done\n  mean=$(echo \"$sum\
    \ / $length\" | bc -l)\n  sum=0\n  for value in \"${array[@]}\"; do\n    sum=$(echo\
    \ \"$sum + abs($value - $mean)\" | bc -l)\n  done\n  mad=$(echo \"$sum / $length\"\
    \ | bc -l)\n  echo \"$mad\"", "  mean=$(echo \"$1\" | mean)\n  data_array=($1)\n\
    \  data_len=$(echo \"$1\" | wc -w)\n  total=0\n  for (( i=0; i<$data_len; i++\
    \ )); do\n    v=${data_array[$i]}\n    total=$(bc <<< \"scale=4; $total + abs($v\
    \ - $mean)\")\n  done\n  bc <<< \"scale=4; $total / $data_len\"", "  # get mean\n\
    \  local center=$(mean \"$1\")\n  # abs distance from center\n  local distances=$(echo\
    \ \"$1\" | awk -v center=\"$center\" '{print int(sqrt(center - $1)^2)}')\n  #\
    \ average distance\n  mean \"$distances\"", "    local data=$1\n    local mad=$(echo\
    \ \"$data\" | awk '{sum=0; num_elements=0;\n                                 \
    \    for (i=1; i<=NF; i++) {\n                                         sum +=\
    \ $i;\n                                         num_elements += 1;\n         \
    \                            }\n                                     print sum/num_elements;\n\
    \                                     }')\n    mad=$(echo \"$data\" | awk -v mad=$mad\
    \ '{\n                                          sum=0;\n                     \
    \                     num_elements=0;\n                                      \
    \    for (i=1; i<=NF; i++) {\n                                              sum\
    \ += abs($i - mad);\n                                              num_elements\
    \ += 1;\n                                          }\n                       \
    \                   print sum/num_elements;\n                                \
    \          }')\n    echo $mad", "    echo $1 | tr ' ' '\\n' | awk '{ sum += $1;\
    \ count += 1; } END { print sum / count; }' | awk '{ print $1; }'", "    local\
    \ x_mean\n    x_mean=$(mean \"$@\")\n    local x\n    x=$(echo \"$@\" | tr ' '\
    \ '\\n' | awk -v mean=$x_mean '{print ($1-mean)}' | \\\n        tr '\\n' ' ')\n\
    \    #echo \"x=$x\"\n    local x_abs\n    x_abs=$(echo \"$x\" | tr ' ' '\\n' |\
    \ awk '{print (0.0+($1>0?$1:-$1))}' | \\\n        tr '\\n' ' ')\n    #echo \"\
    x_abs=$x_abs\"\n    local mean_x_abs\n    mean_x_abs=$(mean \"$x_abs\")\n    echo\
    \ \"$mean_x_abs\"", "    total=0.0\n    x_mean=$(mean $1)\n    for x in $1; do\n\
    \        total=$(python -c \"print $total + abs($x - $x_mean)\")\n    done\n \
    \   echo $(python -c \"print $total / $#\")", "\tvals=\"$1\"\n\tif [ -z \"$vals\"\
    \ ]; then\n\t\techo 0\n\t\treturn\n\tfi\n\t#mean=\"$(echo $vals | sed 's/ /\\\
    n/g' | awk '{ total += $1; count++ } END { print total/count }')\"\n\t#mean=\"\
    $(awk \"BEGIN { print $(echo $vals | sed 's/ /+/g')/5 }\")\"\n\tmean=\"$(echo\
    \ $vals | awk '{ total += $1; count++ } END { print total/count }')\"\n\tmad=\"\
    $(echo $vals | sed 's/ /\\n/g' | awk -v mean=$mean '{ total += sqrt(($1-mean)*($1-mean));\
    \ count++ } END { print total/count }')\"\n\techo $mad", "    # Extract mean and\
    \ divide by the number of elements\n    mean=$( echo \"$1\" | awk '{ total +=\
    \ $1; count++ } END { print total/count }' )\n    # Replace each element with\
    \ the difference between it and the mean\n    diffs=$( echo \"$1\" | awk -v mean=\"\
    $mean\" '{ print $1 - mean }' )\n    # Get the absolute value of each difference\n\
    \    abs_diffs=$( echo \"$diffs\" | awk '{ print ($1 < 0 ? $1 * -1 : $1) }' )\n\
    \    # Take the mean of the absolute differences\n    echo \"$abs_diffs\" | awk\
    \ '{ total += $1; count++ } END { print total/count }'", "    if [[ $# -ne 1 ]];\
    \ then\n        echo \"ERROR in $FUNCNAME: Provide exactly one argument.\"\n \
    \       exit 1\n    fi\n    check_command 'bc'\n    check_command 'echo'\n   \
    \ check_command 'awk'\n    check_command 'sort'\n    check_command 'head'\n  \
    \  check_command 'tail'\n    check_command 'wc'\n    check_command 'cut'\n   \
    \ check_command 'uniq'\n    check_command 'rm'\n    # remove leading/trailing\
    \ whitespace and any duplicate whitespace:\n    echo $1 | tr -s ' ' | tr -d '\\\
    n' > mad_tmp.txt\n    # sort numerically, get the mean, and sort again alphabetically:\n\
    \    sort -n mad_tmp.txt > mad_tmp_sorted.txt\n    # get length of dataset:\n\
    \    n=$(wc -l mad_tmp_sorted.txt | cut -d' ' -f1)\n    # calculate mean:\n  \
    \  x_mean=$(echo \"scale=3; $(head -n $n mad_tmp_sorted.txt | tr '\\n' '+') 0\"\
    \ | bc -l | cut -d. -f1)\n    x_mean=$(echo \"scale=3; $x_mean / $n\" | bc -l)\n\
    \    # calculate sum of absolute difference between each element and mean:\n \
    \   sum_abs_dev=0\n    while read x; do\n        sum_abs_dev=$(echo \"scale=3;\
    \ $sum_abs_dev + abs($x - $x_mean)\" | bc -l)\n    done < mad_tmp_sorted.txt\n\
    \    # calculate average absolute difference and output result:\n    echo \"scale=3;\
    \ $sum_abs_dev / $n\" | bc -l\n    rm mad_tmp*.txt", "  local mean\n  mean=$(mean\
    \ \"$@\")\n  eval echo \\($(echo \"$@\" | tr ' ' '+' | sed \"s/^/$mean - /\")\\\
    ) | bc -l | tr '\\n' '+' | sed 's/+$//' | awk '{printf \"%.10f\", ($0)/NR}'",
  "  local x_mean=\"$(mean \"$@\")\"\n  local num_elements=\"$(echo \"$@\" | wc -w)\"\
    \n  local sum=0\n  local element\n  for element in $@; do\n    local term=\"$(echo\
    \ \"${element} - ${x_mean}\" | bc -l)\"\n    local abs_term=\"$(echo \"if (${term}\
    \ < 0) ${term} * -1 else ${term}\" | bc -l)\"\n    sum=\"$(echo \"${sum} + ${abs_term}\"\
    \ | bc -l)\"\n  done\n  echo \"$(echo \"${sum} / ${num_elements}\" | bc -l)\"",
  "  local -a input\n  input=( $( echo \"$@\" | tr ' ' '\\n' ) )\n  mean \"${input[@]}\"\
    \ | awk '{print \"(\"$1\"-\"$2\")\"}' | paste -sd+ | bc -l | awk '{print $1/'${#input[@]}'}'",
  "    if [ $# -eq 0 ]; then\n        echo \"Usage: $(basename $0) [-v] vals\" >&2\n\
    \        return 1\n    fi\n    # input_numbers is a string of space-separated\
    \ numbers: \"1.0 2.0 3.0 4.0\"\n    input_numbers=\"$1\"\n    # empty string\n\
    \    total_numbers=0\n    # Create a vector of space-separated numbers.\n    while\
    \ read -r number; do\n        input_numbers_vector[$total_numbers]=$number\n \
    \       ((total_numbers+=1))\n    done <<<\"$input_numbers\"\n    # Calculate\
    \ mean\n    # Sample mean for $input_numbers_vector\n    mean=$(mean $input_numbers)\n\
    \    # Using bash array to store the absolute differences from mean.\n    # A\
    \ vector of absolute difference from mean.\n    i=0\n    for number in \"${input_numbers_vector[@]}\"\
    ; do\n        deviation=$(echo \"$number - $mean\" | bc -l)\n        abs_deviation=$(echo\
    \ \"if ($deviation < 0) -1 * $deviation else $deviation\" | bc -l)\n        absolute_deviations[$i]=$abs_deviation\n\
    \        ((i+=1))\n    done\n    # Calculate Mean Absolute Deviation\n    abs_deviations_sum=$(echo\
    \ \"${absolute_deviations[@]}\" | tr ' ' '+' | bc -l)\n    mean_absolute_deviation=$(echo\
    \ \"$abs_deviations_sum / $total_numbers\" | bc -l)\n    echo \"$mean_absolute_deviation\"",
  "  seq $1 | statistics -m -s | awk '{ print $2 }'", "    local data=($1)\n    local\
    \ mean=$(mean $1)\n    local abs_diff=0\n    local sum_abs_diff=0\n    for i in\
    \ ${data[@]}; do\n        abs_diff=$(python -c \"print abs($i - $mean)\")\n  \
    \      sum_abs_diff=$(python -c \"print $sum_abs_diff + $abs_diff\")\n    done\n\
    \    local mad=$(python -c \"print $sum_abs_diff / len(${data[@]})\")\n    echo\
    \ $mad", "    local list=($@)\n    local mean=$(mean $@)\n    declare -a deviation\n\
    \    for x in ${list[@]}; do\n        deviation+=($(awk -v mean=\"$mean\" -v x=\"\
    $x\" 'BEGIN { printf \"%f\", x - mean }'))\n    done\n    mean $(absolute \"${deviation[@]}\"\
    )", "  local mean=`average \"$1\"`\n  local -a abs_diffs=()\n  local -a nums=($1)\n\
    \  local n=${#nums[@]}\n  for ((i=0; i<$n; i++)); do\n    local num=${nums[$i]}\n\
    \    local abs_diff=`echo \"$num $mean\" | awk '{print $1 - $2}' |\n      awk\
    \ 'function abs(x){return x < 0 ? -x : x} {print abs($1)}'`\n    abs_diffs+=(\"\
    $abs_diff\")\n  done\n  average \"${abs_diffs[@]}\"", "    local -r numbers=\"\
    $1\"\n    local -r number_list=( $numbers )\n    local -r count=${#number_list[@]}\n\
    \    local -r mean=$(mean \"$numbers\")\n    local total=0\n    local -r scale=10\n\
    \    for number in \"${number_list[@]}\"; do\n        # Use bc for floating point\
    \ arithmetic\n        # bc prints its result on stdout, so we use echo to grab\
    \ it\n        local -r diff=$(echo \"$mean - $number\" | bc)\n        local -r\
    \ diff_abs=$(echo \"($diff + ($diff < 0)) * -1\" | bc)\n        local -r diff_abs_int=$(echo\
    \ \"$diff_abs * $scale\" | bc)\n        total=$(echo \"$total + $diff_abs_int\"\
    \ | bc)\n    done\n    local -r mad=$(echo \"$total / $count / $scale\" | bc)\n\
    \    echo \"$mad\"", "  local mad=$(python -c \"from functools import reduce;\
    \ print(reduce(lambda x, y: x + abs(y), list(map(float, \\\"$1\\\".split())))/len(\\\
    \"$1\\\".split()))\")\n  echo \"$mad\"", "  # Grab the mean of the input list\n\
    \  local input_mean=$(mean \"$1\")\n  #\n  # Calculate the absolute difference\
    \ of each list element and the mean, then\n  # take an average of these absolute\
    \ differences.\n  #\n  # TODO: replace this with a call to mean()\n  echo $1 |\
    \ awk '{for(i=1;i<=NF;i++) {sum += ($i - '\"$input_mean\"')*($i - '\"$input_mean\"\
    ');}} END {print sqrt(sum/NF)}'", "    IFS=' ' read -ra ADDR <<< \"$1\"\n    n_elements=${#ADDR[@]}\n\
    \    sum=0.0\n    for elem in \"${ADDR[@]}\"; do\n        sum=$(echo \"$sum +\
    \ $elem\" | bc -l)\n    done\n    mean=$(echo \"$sum / $n_elements\" | bc -l)\n\
    \    sum=0.0\n    for elem in \"${ADDR[@]}\"; do\n        sum=$(echo \"$sum +\
    \ ($elem - $mean)\" | bc -l)\n    done\n    echo \"$sum / $n_elements\" | bc -l",
  "  # Calculate mean of this dataset\n  local list=\"$1\"\n  mean=$(average \"$list\"\
    )\n  # Calculate absolute differences between each element and the mean\n  local\
    \ abs_devs=\"\"\n  for i in $list; do\n    abs_devs=\"$abs_devs $(echo \"scale=2;\
    \ $i - $mean\" | bc)\"\n  done\n  # Calculate average of absolute differences:\n\
    \  average \"$abs_devs\"", "  local x_mean=$(mean \"$@\")\n  local x_absdev=(\
    \ $(echo \"$@\" | awk -v mean=$x_mean '{print $1 - mean}' |\n    awk 'BEGIN {\
    \ OFMT = \"%.5f\" } {print $1}' | awk '{print sqrt($1*$1)}') )\n  echo $(mean\
    \ \"${x_absdev[@]}\")", "  echo $(average \"$@\") $(average_absolute_deviation\
    \ \"$@\") | awk '{print $2/$1}'", "    mean=$(mean \"$@\")\n    awk -v mean=\"\
    $mean\" '{ sum += fabs($1 - mean); print sum }' <<< \"$@\" | tail -n 1", "  local\
    \ mean\n  mean=$(mean \"$@\")\n  # To calculate MAD, we first calculate the difference\
    \ between each element\n  # and the mean, then the absolute value of this difference,\
    \ then the mean\n  # of this list.\n  echo \"$(mean \"$(echo \"$@\" | awk -v mean=\"\
    $mean\" '{for (i=1; i<=NF; i++) print $i - mean}' | awk '{for (i=1; i<=NF; i++)\
    \ print abs($i)}')\")\"", "    total=0.0\n    mean=$(echo $@ | awk '{sum=0.0;\
    \ for(i=1;i<=NF;i++) {sum+=$i}; print sum/NF}')\n    for num in $@; do\n     \
    \   total=$(echo \"$total + abs($num - $mean)\" | bc -l)\n    done\n    echo $(echo\
    \ \"$total / $#\" | bc -l)", "    input=($1)\n    mean=$(get_mean \"${input[@]}\"\
    )\n    len=${#input[@]}\n    sum=0\n    for i in \"${input[@]}\"; do\n       \
    \ sum=$(python -c \"print($sum + abs($i - $mean))\")\n    done\n    echo $(python\
    \ -c \"print($sum / $len)\")", "  local x x_mean sum_absolute_deviation\n  local\
    \ len=0\n  for x in $1; do\n    let len++\n    sum_absolute_deviation+=$(echo\
    \ \"scale=2; ${sum_absolute_deviation} + abs(${x})\" | bc)\n  done\n  # bc needs\
    \ a period as decimal separator\n  x_mean=$(echo \"scale=2; ${sum_absolute_deviation}\
    \ / ${len}\" | bc | sed -e 's/\\./,/g')\n  echo \"scale=2; ${sum_absolute_deviation}\
    \ / ${len}\" | bc | sed -e 's/\\./,/g'", "    average=$(average $1)\n    abs_diff=$(echo\
    \ \"$1\" | awk '{for(i=1;i<=NF;i++) {print $i \"-\" '$average'}}' | awk '{for(i=1;i<=NF;i++)\
    \ {printf \"%f\\n\",$i}}' | awk '{for(i=1;i<=NF;i++) {if($i<0) {printf \"%f\\\
    n\",$i*-1} else {printf \"%f\\n\",$i}}}')\n    average=$(average $abs_diff)\n\
    \    echo $average", "  local mean\n  mean=$( mean $1 )\n  echo $1 | awk -v m=$mean\
    \ '{for (i=1; i<=NF; i++) {s += sqrt( ($i-m)*($i-m) )} print s/NF}'", "    numbers=$1\n\
    \    # Calculate mean\n    sum=0\n    count=0\n    for num in $numbers; do\n \
    \       sum=$(echo \"$sum + $num\" | bc)\n        count=$(echo \"$count + 1\"\
    \ | bc)\n    done\n    mean=$(echo \"$sum / $count\" | bc -l)\n    # Calculate\
    \ MAD\n    sum=0\n    for num in $numbers; do\n        abs_diff=$(echo \"if ($num\
    \ - $mean < 0) ($mean - $num) else ($num - $mean)\" | bc -l)\n        sum=$(echo\
    \ \"$sum + $abs_diff\" | bc)\n    done\n    mad=$(echo \"$sum / $count\" | bc\
    \ -l)\n    echo $mad", "    MEAN=$(mean \"$1\")\n    ABS_DEV=$(echo \"$1\" | awk\
    \ -v mean=\"$MEAN\" '\n        { sum += (mean - $1) < 0 ? -1 * (mean - $1) : (mean\
    \ - $1) }\n        END { print sum / NR }\n    ')\n    echo \"$ABS_DEV\"", " \
    \ local total_x=\"0.0\" total_abs=\"0.0\"\n  for i in $1\n  do\n    total_x=$(echo\
    \ \"$total_x + $i\" | bc)\n    total_abs=$(echo \"$total_abs + abs($i)\" | bc)\n\
    \  done\n  echo $(echo \"$total_abs / $total_x\" | bc -l)", "  # We use the simple\
    \ average of the given numbers. There are other ways of\n  # averaging out there\
    \ (median, mode, etc).\n  local sum=0\n  local x\n  for x in $1; do\n    sum=$(echo\
    \ \"scale=2; $sum + $x\" | bc)\n  done\n  local mean=$(echo \"scale=2; $sum /\
    \ $#\" | bc)\n\n  local sum=0\n  for x in $1; do\n    local diff=$(echo \"scale=2;\
    \ $x - $mean\" | bc)\n    local abs=$(echo \"scale=2; $diff < 0 ? -$diff : $diff\"\
    \ | bc)\n    sum=$(echo \"scale=2; $sum + $abs\" | bc)\n  done\n  echo \"scale=2;\
    \ $sum / $#\" | bc", "  awk 'BEGIN {FS=\" \"}\n       { \n         sum = 0; n\
    \ = 0;\n         for (i = 1; i <= NF; i++) {\n           if ($i != \"\") {\n \
    \            a[n++] = $i;\n             sum += $i;\n           }\n         }\n\
    \         mean = sum / n;\n         sum = 0;\n         for (i = 0; i < n; i++)\
    \ {\n           sum += fabs(a[i] - mean);\n         }\n         print sum / n;\n\
    \       }' <<< $1", "    local x_mean=$(mean $1)\n    echo $1 | awk -v x_mean=$x_mean\
    \ '{ for (i=1; i<=NF; i++) { sum += sqrt( ($i - x_mean)^2 ); } print sum / NF;\
    \ }'", "  local list=\"$1\"\n\n  local sum=0\n  local mean=$(echo \"$list\" |\
    \ awk '{sum+=$1} END {print sum/NR}')\n  local len=$(echo \"$list\" | wc -w)\n\
    \n  for x in $list; do\n    local diff=$(echo \"$x - $mean\" | bc -l)\n    sum=$(echo\
    \ \"$sum + ${diff#-}\" | bc -l)\n  done\n\n  echo \"$sum / $len\" | bc -l", " \
    \   input=\"$1\"\n    mean=$(average \"$input\")\n    deviation_sum=0\n    for\
    \ i in $input; do\n        deviation_sum=$(echo \"$deviation_sum + abs($i - $mean)\"\
    \ | bc -l)\n    done\n    echo \"$deviation_sum / $#\" | bc -l", "  local -a vals=($1)\n\
    \  local sum=0\n  local count=0\n  for val in \"${vals[@]}\"; do\n    count=$((\
    \ count + 1 ))\n    sum=$(bc <<< \"$sum + $val\")\n  done\n  mean=$(bc <<< \"\
    scale=4; $sum / $count\")\n  local sum=0\n  for val in \"${vals[@]}\"; do\n  \
    \  sum=$(bc <<< \"$sum + abs($val - $mean)\")\n  done\n  bc <<< \"scale=4; $sum\
    \ / $count\"", "  local -r IN=$(filter_infinite \"$@\")\n  local -r MEAN=$(mean\
    \ \"$@\")\n  local -r OUT=$(awk \"{print sqrt(\\$1^2)}\")\n  #  >>> $(echo \"\
    1.0 2.0 3.0 4.0\" | mean_absolute_deviation)\n  #  \"1.0\"\n  echo \"$IN\" | awk\
    \ \"{print sqrt(\\$1^2)} | mean\"", "  nvals=$(echo \"$1\" | wc -w)\n  mean=$(echo\
    \ \"$1\" | awk '{ a+=$1 } END { printf(\"%f\", a/NR) }')\n  diff=0\n  for val\
    \ in $1; do\n    diff=$(echo \"$diff + (a=$val - $mean) < 0 ? -a : a\" | bc)\n\
    \  done\n  echo \"$diff / $nvals\" | bc -l", "    set -- $(echo \"$1\" | tr \"\
    \ \" \"\\n\")\n    local mean=$(echo \"$*\" | awk '{\n        sum = 0; n = 0;\n\
    \        for (i = 1; i <= NF; i++) {\n            sum += $i; n++;\n        }\n\
    \        print sum / n;\n    }')\n    local diff_sum=0\n    local n=0\n    for\
    \ x in \"$@\"; do\n        diff_sum=$(echo \"$diff_sum + abs($x - $mean)\" | bc\
    \ -l)\n        n=$((n + 1))\n    done\n    echo $(echo \"$diff_sum / $n\" | bc\
    \ -l)", "  local data=()\n  while read -r num; do\n    data+=(\"$num\")\n  done\
    \ <<< \"$1\"\n  local mean=$(mean \"${data[@]}\")\n  local abs_deviations=()\n\
    \  for num in \"${data[@]}\"; do\n    abs_deviations+=(\"$(echo \"scale=9; a=($num-$mean);\
    \ if (a<0) a=-a; a\" | bc)\")\n  done\n  mean \"${abs_deviations[@]}\"", "   \
    \ # Calculate mean\n    local sum=0\n    local count=0\n    for x in $1; do\n\
    \        sum=$(echo $sum + $x | bc)\n        count=$(echo $count + 1 | bc)\n \
    \   done\n    local mean=$(echo $sum / $count | bc -l)\n\n    # For each number,\
    \ calculate difference from mean, then sum the absolute\n    # values of the differences.\n\
    \    local deviation_sum=0\n    for x in $1; do\n        deviation_sum=$(echo\
    \ $deviation_sum + \\\n                        $(echo $x - $mean | bc -l | awk\
    \ '{printf \"%f\", $0}') \\\n                        | bc -l)\n    done\n\n  \
    \  # Finally, divide this by the number of inputs, to get the MAD\n    echo $deviation_sum\
    \ / $count | bc -l", "    mean=$(mean \"$@\")\n    echo \"$@\" | awk -v mean=\"\
    $mean\" '{for (i=1; i<=NF; i++) {print int(abs($i-mean)+0.5)}}' \\\n        |\
    \ mean", "   local x_list=( $1 )\n   local x_len=${#x_list[@]}\n   local x_mean=$(\
    \ average \"${x_list[@]}\" )\n   local abs_deviations_list=()\n   for (( i=0;\
    \ i<${x_len}; i++ )); do\n      abs_deviations_list+=( $( printf \"%.3f\" $(bc\
    \ -l <<< \"scale=3; ${x_list[$i]} - $x_mean\") | sed -e 's/-//' ) )\n   done\n\
    \   average \"${abs_deviations_list[@]}\"", "    dataset=`echo \"$1\" | sed 's/[^0-9.-]/\
    \ /g'`\n    N=`echo \"$dataset\" | wc -w`\n    mean=`echo \"$dataset\" | awk '{sum+=$1}\
    \ END {print sum/NR}'`\n    echo \"$dataset\" | awk '{sum+=($1-mean)*($1-mean)}\
    \ END {print sqrt(sum/NR)}' mean=$mean", "    # get mean of input dataset\n  \
    \  m=$(echo \"$1\" | mean.sh)\n    # subtract mean from each element\n    # |sed\
    \ -e 's/^/echo\\ /g'|sh|\n    gawk -v m=$m 'BEGIN{s=0;n=0} {s+=($1-m<0?-1:1)*($1-m);n+=1}\
    \ END{print s/n}'", "    local result=$(calc_mean_absolute_deviation \"$@\")\n\
    \    [[ \"$result\" == *\"Error\"* ]] && return 1\n    echo \"$result\"", "  \
    \  numbers=($1)\n    mean=$(mean $1)\n    absolute_differences=\"\"\n    for number\
    \ in ${numbers[@]}; do\n        absolute_differences=\"$absolute_differences $(echo\
    \ \"scale=1; $number - $mean\" | bc -l | sed 's/-//')\"\n    done\n    echo $(mean\
    \ $absolute_differences)", "    local data=$1\n    local average=$(average $data)\n\
    \    local sum=0\n    for i in $data; do\n        sum=$(echo \"$sum + abs($i -\
    \ $average)\" | bc -l)\n    done\n    echo $(echo \"scale=2; $sum / $(echo $data\
    \ | wc -w)\" | bc -l)", "    if [[ $# -eq 0 ]]; then\n        echo 0\n       \
    \ return\n    fi\n    local mean=$(mean $@)\n    local abs_diff_sum=0\n    for\
    \ x in $@; do\n        abs_diff_sum=$(bc <<< \"scale=4; ${abs_diff_sum} + abs(${x}\
    \ - ${mean})\")\n    done\n    echo $(bc <<< \"scale=4; ${abs_diff_sum} / $#\"\
    )", "    if [[ $# -ne 1 ]]; then\n        echo \"Usage: $(basename $0) [LIST]\"\
    \n        exit 1\n    fi\n    local dataset=($1)\n    local count=$(echo ${dataset[@]}\
    \ | wc -w)\n    local mean=$(echo ${dataset[@]} | awk '{s=0; for(i=1;i<=NF;i++)\
    \ s+=$i; print s/NF}')\n    local deviations=()\n    for ((i=0; i<$count; i++));\
    \ do\n        deviations+=($(echo \"scale=4; ${dataset[$i]} - $mean\" | bc))\n\
    \    done\n    local absolute_deviations=()\n    for ((i=0; i<$count; i++)); do\n\
    \        if [[ $(echo \"${deviations[$i]} < 0\" | bc) -eq 1 ]]; then\n       \
    \     absolute_deviations+=($(echo \"scale=4; ${deviations[$i]} * -1\" | bc))\n\
    \        else\n            absolute_deviations+=(${deviations[$i]})\n        fi\n\
    \    done\n    local mad=$(echo ${absolute_deviations[@]} | awk '{s=0; for(i=1;i<=NF;i++)\
    \ s+=$i; print s/NF}')\n    echo $mad", "\tlocal datasum=$(echo \"$1\" | Rscript\
    \ -e 'cat(mean(scan(\"stdin\")))')\n\techo \"$1\" | awk -v ds=$datasum 'BEGIN\
    \ {sum=0} {sum += abs($1-ds)} END {print sum/NR}'", "    read -r -a input_data\
    \ <<< \"$1\"\n    input_size=${#input_data[@]}\n    input_data_sum=0\n    for\
    \ number in \"${input_data[@]}\"; do\n        input_data_sum=$(printf \"%.10f\"\
    \ $(echo \"${input_data_sum} + ${number}\" | bc -l))\n    done\n    mean=$(printf\
    \ \"%.10f\" $(echo \"${input_data_sum} / ${input_size}\" | bc -l))\n    mean_absolute_deviation_sum=0\n\
    \    for number in \"${input_data[@]}\"; do\n        mean_absolute_deviation_sum=$(printf\
    \ \"%.10f\" $(echo \"${mean_absolute_deviation_sum} + ( ${number} - ${mean} )\"\
    \ | bc -l))\n    done\n    echo $(printf \"%.10f\" $(echo \"${mean_absolute_deviation_sum}\
    \ / ${input_size}\" | bc -l))", "    mean=$(echo \"$*\" | awk '{sum=0; for(i=1;\
    \ i<=NF; i++) sum+=$i; print sum/NF}')\n    absolute_deviations=\"\"\n    for\
    \ number in $*; do\n        absolute_deviations=\"$absolute_deviations $(echo\
    \ $number - $mean | bc -l | awk '{print sqrt($1^2)}')\"\n    done\n    echo \"\
    $absolute_deviations\" | awk '{sum=0; for(i=1; i<=NF; i++) sum+=$i; print sum/NF}'",
  "    set -f\n    set -- $1\n    local min_value=${1:-0}\n    local max_value=${1:-0}\n\
    \    local n=0\n    local mean=0\n    local mean_absolute_deviation=0\n    for\
    \ value in $*; do\n        n=$((n+1))\n        if [[ $value < $min_value ]]; then\n\
    \            min_value=$value\n        fi\n        if [[ $value > $max_value ]];\
    \ then\n            max_value=$value\n        fi\n        mean=$(echo \"scale=10;\
    \ $mean + $value\" | bc)\n    done\n    mean=$(echo \"scale=10; $mean / $n\" |\
    \ bc)\n    for value in $*; do\n        mean_absolute_deviation=$(echo \"scale=10;\
    \ $mean_absolute_deviation + (if($value - $mean < 0, 0 - ($value - $mean), $value\
    \ - $mean))\" | bc)\n    done\n    echo \"scale=10; $mean_absolute_deviation /\
    \ $n\" | bc", "  local values=$1\n\n  local n=$(echo $values | wc -w)\n  local\
    \ mean=$(echo $values | awk '{s+=$1} END {print s/NR}')\n\n  local deviations=$(for\
    \ value in $values; do\n                      echo \"$value - $mean\" | bc -l\n\
    \                    done)\n\n  local sum=0\n  for deviation in $deviations; do\n\
    \    local absolute_deviation=$(echo $deviation | awk '{ print ($1<0)?-$1:$1 }')\n\
    \    sum=$(echo \"$sum + $absolute_deviation\" | bc -l)\n  done\n\n  echo \"$sum\
    \ / $n\" | bc -l", "  local list=$1\n  local mean=$(mean \"$list\")\n  local diffs=$(\n\
    \    for n in $list; do\n      echo \"scale=4; abs($n - $mean)\" | bc\n    done\n\
    \  )\n  echo $(mean \"$diffs\")", "    local x_mean=$(echo \"$1\" | xargs echo\
    \ $(printf \"%s+\" $1)0 | bc -l)\n    x_mean=$(echo \"$x_mean / $(echo $1 | wc\
    \ -w)\" | bc -l)\n    local diff=$(echo \"$1\" | xargs echo $(printf \"|%s-$x_mean|+\"\
    \ $1)0 | bc -l)\n    echo \"$diff / $(echo $1 | wc -w)\" | bc -l", "  local mean=$(mean\
    \ \"$1\")\n  local diff=\"\"\n  for x in $1; do\n    diff=\"$diff $(echo \"$mean\
    \ - $x\" | bc -l)\"\n  done\n  mean \"$diff\"", "    local input=${1}\n    local\
    \ mean=$(mean \"${input}\")\n    local sum_sq=0\n    for value in ${input}; do\n\
    \        diff=$(echo \"scale=4; ${value} - ${mean}\" | bc)\n        abs=$(echo\
    \ \"scale=4; ${diff} < 0 ? -${diff} : ${diff}\" | bc)\n        sum_sq=$(echo \"\
    scale=4; ${sum_sq} + ${abs}\" | bc)\n    done\n    echo $(echo \"scale=4; ${sum_sq}\
    \ / ${#input[@]}\" | bc)", "    local mean=$(avg \"$1\")\n    local sum=0\n  \
    \  for el in $1; do\n        sum=$(echo \"$sum + ${el#$mean}\" | bc -l)\n    done\n\
    \    echo \"$sum / $#\" | bc -l", "    local sum=0\n    local x\n    local mean=0\n\
    \    local count=0\n    for x in $1; do\n        mean=$(echo \"$mean + $x\" |\
    \ bc -l)\n        count=$(echo \"$count + 1\" | bc -l)\n    done\n    mean=$(echo\
    \ \"$mean / $count\" | bc -l)\n    for x in $1; do\n        sum=$(echo \"$sum\
    \ + (abs($x - $mean))\" | bc -l)\n    done\n    echo \"$sum / $count\" | bc -l",
  "  local mean=$(mean \"$1\")\n  local dev=$(cat <(echo \"$1\") <(echo \"$mean\"\
    ) | awk '{print $1-$2}' | awk '{print sqrt($1*$1)}' | paste -sd+ - | bc)\n  echo\
    \ \"$dev\"", "  # Calculate Mean and MAD\n  mean=$(mean $1)\n  mad=$(echo $1 |\
    \ tr \" \" \"\\n\" | awk \"{ printf \\\"%s\\n\\\",\\$1 - $mean }\" | \\\n    sed\
    \ 's/\\([^0-9-]\\)/+\\1/g' | sed 's/[+-]//g' | \\\n    awk '{ sum += $1; n++ }\
    \ END { if (n > 0) print sum / n; }')\n  echo $mad", "    eval \"local -a x=({$1})\"\
    \n    local x_mean=$(mean \"${x[@]}\")\n    local n=${#x[@]}\n    local s=0\n\
    \    for ((i=0; i<n; i++)); do\n        ((s+=${x[i]}-$x_mean))\n    done\n   \
    \ echo \"$s\"", "    if [[ $# -ne 1 ]]; then\n        printf 'Expected one argument,\
    \ got %d.\\n' $#\n        return 1\n    fi\n    # calculate the mean\n    mean=$(\n\
    \        printf '%s\\n' $1 | awk '{\n            sum = 0\n            for (i =\
    \ 1; i <= NF; i++) {\n                sum += $i\n            }\n            printf\
    \ \"%.2f\", sum / NF\n        }'\n    )\n    # calculate the deviation\n    deviation=$(\n\
    \        printf '%s\\n' $1 | awk -v mean=$mean '{\n            sum = 0\n     \
    \       for (i = 1; i <= NF; i++) {\n                sum += abs($i - mean)\n \
    \           }\n            printf \"%.2f\", sum / NF\n        }'\n    )\n    printf\
    \ '%s\\n' $deviation", "  local INPUTS=($1)\n  local INPUTS_LEN=${#INPUTS[@]}\n\
    \  local INPUTS_SUM=0.0\n  local X\n  for X in ${INPUTS[@]}; do\n    INPUTS_SUM=$(echo\
    \ \"${INPUTS_SUM} + ${X}\" | bc -l)\n  done\n  local MEAN=$(echo \"${INPUTS_SUM}\
    \ / ${INPUTS_LEN}\" | bc -l)\n  local DEVIATIONS=()\n  for X in ${INPUTS[@]};\
    \ do\n    DEVIATIONS+=($(echo \"scale=4; ${X} - ${MEAN}\" | bc -l))\n  done\n\
    \  local DEVIATIONS_ABS=()\n  for X in ${DEVIATIONS[@]}; do\n    DEVIATIONS_ABS+=($(echo\
    \ \"scale=4; ${X} < 0 ? -${X} : ${X}\" | bc -l))\n  done\n  local DEVIATIONS_ABS_SUM=0.0\n\
    \  for X in ${DEVIATIONS_ABS[@]}; do\n    DEVIATIONS_ABS_SUM=$(echo \"${DEVIATIONS_ABS_SUM}\
    \ + ${X}\" | bc -l)\n  done\n  echo $(echo \"${DEVIATIONS_ABS_SUM} / ${INPUTS_LEN}\"\
    \ | bc -l)", "    list=$1\n    sum=0\n    count=0\n    mean=0\n    for x in $list;\
    \ do\n        sum=$(echo \"$sum + $x\" | bc -l)\n        count=$(echo \"$count\
    \ + 1\" | bc -l)\n    done\n    mean=$(echo \"$sum / $count\" | bc -l)\n    abs_diff_sum=0\n\
    \    for x in $list; do\n        abs_diff=$(echo \"if ($x > $mean) $x - $mean\
    \ else $mean - $x\" | bc -l)\n        abs_diff_sum=$(echo \"$abs_diff_sum + $abs_diff\"\
    \ | bc -l)\n    done\n    echo \"$abs_diff_sum / $count\" | bc -l", "    [[ $#\
    \ -eq 0 ]] && return 1\n\n    declare -a numbers=($@)\n    declare -i total=0\n\
    \    declare -i count=0\n    for n in \"${numbers[@]}\"; do\n        ((total+=n))\n\
    \        ((count++))\n    done\n    declare -i mean=$((total/count))\n\n    declare\
    \ -i sum_abs_dev=0\n    for n in \"${numbers[@]}\"; do\n        ((sum_abs_dev+=abs(n-mean)))\n\
    \    done\n    declare -i mad=$((sum_abs_dev/count))\n\n    echo \"$mad\"", "\t\
    local mean=$(mean \"$@\")\n\tlocal abs_dev_sum=0\n\tlocal abs_dev=0\n\tlocal count=0\n\
    \tfor i in $@; do\n\t\t(( count++ ))\n\t\tabs_dev=$(echo \"scale=2; $i - $mean\"\
    \ | bc -l)\n\t\tabs_dev=$(echo \"scale=2; ${abs_dev#-} / 1\" | bc -l)\n\t\tabs_dev_sum=$(echo\
    \ \"scale=2; $abs_dev_sum + $abs_dev\" | bc -l)\n\tdone\n\techo $(echo \"scale=2;\
    \ $abs_dev_sum / $count\" | bc -l)", "    if [ $# -eq 0 ]; then\n        echo\
    \ \"error: mean_absolute_deviation got an empty list\"\n        return 1\n   \
    \ fi\n    local sum=0\n    local x_mean=$(mean \"$@\")\n    local abs_diff\n \
    \   for x in $@; do\n        abs_diff=$(echo \"$x - $x_mean\" | bc -l)\n     \
    \   if [ $(echo \"$abs_diff < 0\" | bc -l) -eq 1 ]; then\n            abs_diff=$(echo\
    \ \"-1 * $abs_diff\" | bc -l)\n        fi\n        sum=$(echo \"$sum + $abs_diff\"\
    \ | bc -l)\n    done\n    echo \"$sum / $#\" | bc -l", "    declare -a ary=(\"\
    $@\")\n    n=$((${#ary[@]}))\n    mean=$(mean ${ary[@]})\n    sum=0.0\n    for\
    \ ((i=0; i<$n; i++)); do\n        sum=$(echo \"$sum + abs(${ary[$i]} - $mean)\"\
    \ | bc -l)\n    done\n    echo \"$sum / $n\" | bc -l", "    awk -v n=$1 -v sum=$2\
    \ -v mean=$3 'BEGIN { print sum / n; }'", "  local avg=$(average \"$1\")\n  local\
    \ sum=0.0\n  for n in $1; do\n    sum=$(add $sum $(absolute_value $(subtract $n\
    \ $avg)))\n  done\n  echo $(divide $sum $(echo \"$1\" | wc -w))", "  # make sure\
    \ we have something to work with\n  [ -z \"$1\" ] && return 1\n\n  # get the mean\n\
    \  local mean=$(mean \"$@\")\n\n  # calc mean absolute deviation\n  local abs_devs=0\n\
    \  local total_elems=0\n  for elem in $@; do\n    total_elems=$((total_elems +\
    \ 1))\n    abs_devs=$(echo \"$abs_devs + ${elem} - ${mean}\" | bc)\n  done\n \
    \ echo \"scale=1; (${abs_devs} / ${total_elems})\" | bc", "    _mean_absolute_deviation()\
    \ {\n        nums=\"$1\"\n        mean=\"$2\"\n        echo \"$nums\" | awk -v\
    \ mean=\"$mean\" \\\n            '{diff = mean - $1; abs = diff < 0 ? -diff :\
    \ diff; print abs}'\n    }\n    nums=\"$1\"\n    mean=$(mean \"$nums\")\n    echo\
    \ \"$nums\" | awk '{print $1}' | awk -v mean=\"$mean\" \\\n        '{print _mean_absolute_deviation($1,\
    \ mean)}' |\\\n        awk '{sum += $1} END {print sum/NR}'", "    local list=\"\
    $1\"\n    local mean=\"$(mean \"$list\")\"\n    local list_length=\"$(echo \"\
    $list\" | wc -w)\"\n    local sum_abs_diffs=\"$(echo \"$list\" | awk -v mean=\"\
    $mean\" '\n        {\n            sum_abs_diffs += (mean - $1 > 0) ? mean - $1\
    \ : $1 - mean\n        }\n        END {\n            print sum_abs_diffs\n   \
    \     }')\"\n    # print the average\n    echo \"$sum_abs_diffs / $list_length\"\
    \ | bc -l", "  awk 'BEGIN {mean=0; abs_diff=0; sum=0; cnt=0}\n       {cnt += 1}\n\
    \       {mean += $1}\n       END {mean = mean / cnt}\n       {sum += ($1 - mean)^2}\n\
    \       END {print sqrt(sum / cnt)}'", "    local -n arr=$1\n    local -a arr=(\"\
    ${arr[@]}\")\n    local sum dev mean\n    local -i i n=${#arr[@]}\n    for ((i=0;\
    \ i<n; i++)); do\n        dev=\"${arr[i]}-$(mean_average \"${arr[@]}\")\"\n  \
    \      ((dev < 0)) && dev=\"$((-dev))\"\n        ((sum+=dev))\n    done\n    bc\
    \ -l <<< \"$sum/$n\"", "    local dataset=\"$1\"\n    local mean=$(echo \"$dataset\"\
    \ | mean)\n    local abs_diff_from_mean=$(echo \"$dataset\" |\n              \
    \                 awk -v \"mean=$mean\" '{print $1 - mean}' |\n              \
    \                 absolute_value)\n    echo \"$abs_diff_from_mean\" | mean", " \
    \   local ds_mean=\"$(mean \"$1\")\"\n    local num_vals=\"$(wc -w <<< \"$1\"\
    )\"\n    local numerator=0\n    local denominator=0\n    local elements=()\n \
    \   local element=0\n    local retval=0\n    IFS=' ' read -r -a elements <<< \"\
    $1\"\n    for element in \"${elements[@]}\"; do\n        numerator=$(printf \"\
    %.4f\" \"$(awk \"BEGIN { print ${numerator} + abs(${element} - ${ds_mean}) }\"\
    )\")\n    done\n    retval=$(printf \"%.4f\" \"$(awk \"BEGIN { print ${numerator}\
    \ / ${num_vals} }\")\")\n    echo \"${retval}\"", "    declare -a numbers=${1}\n\
    \    total=0.0\n    for n in ${numbers[@]}; do\n        total=$(echo $total +\
    \ $n | bc)\n    done\n    #echo ${total}\n    mean=$(echo $total / ${#numbers[@]}\
    \ | bc -l)\n    #echo ${mean}\n    sum_diffs=0.0\n    for n in ${numbers[@]};\
    \ do\n        sum_diffs=$(echo $sum_diffs + $(echo \"($n - $mean) > 0\" | bc -l)\
    \ * ($n - $mean) | bc -l)\n    done\n    echo $(echo $sum_diffs / ${#numbers[@]}\
    \ | bc -l)", "    local x_mean=$(mean $1)\n    local abs_diff_sum=0\n    local\
    \ n=0\n    for x in $1; do\n        abs_diff_sum=$(echo \"$abs_diff_sum + ($x\
    \ - $x_mean)\" | bc -l)\n        n=$(($n + 1))\n    done\n    echo $(echo \"$abs_diff_sum\
    \ / $n\" | bc -l)", "  local values=\"$1\"\n  local list=()\n  local sum=0\n \
    \ local n=$(wc -w <<< \"$values\")\n  local mean\n  local abs_devs=()\n  local\
    \ abs_devs_sum=0\n  local abs_devs_mean\n  # Split space-separated values into\
    \ an array.\n  IFS=' ' read -r -a list <<< \"$values\"\n  # Calculate sum of all\
    \ values.\n  for element in \"${list[@]}\"; do\n    ((sum += element))\n  done\n\
    \  # Calculate mean of all values.\n  ((mean = sum / n))\n  # Calculate absolute\
    \ deviation of each value from the mean.\n  for element in \"${list[@]}\"; do\n\
    \    ((abs_devs+=(abs(element - mean))))\n  done\n  # Calculate sum of absolute\
    \ deviations.\n  for element in \"${abs_devs[@]}\"; do\n    ((abs_devs_sum +=\
    \ element))\n  done\n  # Calculate mean of absolute deviations.\n  ((abs_devs_mean\
    \ = abs_devs_sum / n))\n  echo \"$abs_devs_mean\"", "  eval \"local -a list=(\\\
    ${$1[@]})\"\n  eval \"local -a mean=(\\$(mean \\\"\\${list[@]}\\\") )\"\n  local\
    \ num_elements=${#list[@]}\n  local sum=0\n  for elem in \"${list[@]}\"; do\n\
    \    local diff=$(bc <<< \"scale=3; abs($elem - ${mean[0]})\")\n    sum=$(bc <<<\
    \ \"scale=3; $sum + $diff\")\n  done\n  bc <<< \"scale=3; $sum / $num_elements\"",
  "    if [ -z \"$1\" ]; then\n        echo \"mean_absolute_deviation() requires 1\
    \ argument\"\n        return 1\n    fi\n    local total=0\n    # Sum of absolute\
    \ differences from mean\n    for i in $1; do\n        total=$(echo \"$total +\
    \ $(abs $i - $(mean $1))\" | bc -l)\n    done\n    # Average the sum (total number\
    \ of numbers in list is hardcoded to 5)\n    echo \"$total / 5\" | bc -l", " \
    \   local arr=($1)\n    local sum=0\n    local count=0\n    local mean=0\n   \
    \ local abs_deviation=0\n    local abs_deviation_sum=0\n    local mad=0\n\n  \
    \  for i in \"${arr[@]}\"; do\n        sum=$(echo \"$sum + $i\" | bc -l)\n   \
    \     count=$(echo \"$count + 1\" | bc -l)\n    done\n    mean=$(echo \"$sum /\
    \ $count\" | bc -l)\n\n    for i in \"${arr[@]}\"; do\n        abs_deviation=$(echo\
    \ \"sqrt($i - $mean)^2\" | bc -l)\n        abs_deviation_sum=$(echo \"$abs_deviation_sum\
    \ + $abs_deviation\" | bc -l)\n    done\n    mad=$(echo \"$abs_deviation_sum /\
    \ $count\" | bc -l)\n\n    echo \"$mad\"", "    # Calculate the mean\n    local\
    \ mean=$(echo \"$@\" | awk '{ sum=0; for(i=1; i<=NF; i++) sum+=$i; print sum/NF\
    \ }')\n    # Calculate the average of the differences (absolute) between each\
    \ element\n    # and the mean\n    local abs_dev=$(echo \"$@\" | awk -v mean=$mean\
    \ '{ sum=0; for(i=1; i<=NF; i++) sum+=fabs($i-mean); print sum/NF }')\n    echo\
    \ $abs_dev", "    check_parameter $# 1 $FUNCNAME\n    local mean=$(mean \"$1\"\
    )\n    local mad=0\n    local result=0\n    for v in $1; do\n        local d=$(echo\
    \ $v - $mean | bc)\n        local abs_d=$(abs $d)\n        mad=$(echo $mad + $abs_d\
    \ | bc)\n    done\n    result=$(echo \"scale=3; $mad / $1\" | bc)\n    echo $result",
  "  local LIST=$1;\n  local MEAN=$(mean \"$LIST\");\n  echo \"$LIST\" | awk -v M=$MEAN\
    \ 'BEGIN {n=0; s=0;} {s += fabs($1-M); n+=1;} END {print s/n}';", "    declare\
    \ -a data=($1)\n    local mean=0\n    local num=0\n    local denom=0\n    local\
    \ sum=0\n    local index=0\n    local retval=0\n\n    local num=${#data[@]}\n\
    \    for(( index=0; index<num; index++)); do\n        local v=${data[$index]}\n\
    \        sum=$( awk \"BEGIN {print $sum + $v}\" )\n    done\n    mean=$( awk \"\
    BEGIN {print $sum / $num}\" )\n\n    for(( index=0; index<num; index++)); do\n\
    \        local v=${data[$index]}\n        denom=$( awk \"BEGIN {print $denom +\
    \ abs($v - $mean)}\" )\n    done\n    retval=$( awk \"BEGIN {print $denom / $num}\"\
    \ )\n    echo $retval", "    # calculate the mean\n    local total=0\n    local\
    \ count=0\n    for num in $1\n    do\n        total=$(echo \"$total + $num\" |\
    \ bc)\n        count=$(echo \"$count + 1\" | bc)\n    done\n    local mean=$(echo\
    \ \"$total / $count\" | bc -l)\n\n    # calculate the mean absolute deviation\n\
    \    local deviations=0\n    for num in $1\n    do\n        local diff=$(echo\
    \ \"$num - $mean\" | bc -l)\n        local abs=$(echo \"$diff < 0 ? -$diff : $diff\"\
    \ | bc -l)\n        deviations=$(echo \"$deviations + $abs\" | bc -l)\n    done\n\
    \    echo \"$deviations / $count\" | bc -l", "    local -a array=($1)\n    local\
    \ -a devs=()\n    local -i i=0\n    for (( i=0; i<${#array[@]}; i++ )); do\n \
    \       local diff=$(echo \"${array[$i]} - $(average ${array[@]})\" | bc -l)\n\
    \        local abs=$(echo \"$diff >= 0 ? $diff : -$diff\" | bc -l)\n        devs+=($abs)\n\
    \    done\n    average ${devs[@]}", "\tlocal input=$1\n\tlocal average=$(average\
    \ $input)\n\tlocal absolutes=$(absolute_difference_to_average $input $average)\n\
    \techo $(average $absolutes)", "  x_mean=$(echo $1 | sed -e 's/ /\\n/g' | gawk\
    \ '{x += $1; n++} END {print x/n}')\n  echo $1 | sed -e 's/ /\\n/g' | gawk '{print\
    \ $1 - '\"$x_mean\"'}' | awk '{s+=$1} END {print s/NR}' | awk '{printf \"%f\"\
    , $1}'", "\tlocal data=$@\n\tlocal mean=$(mean \"$data\")\n\tlocal total=0\n\t\
    for x in $data; do\n\t\tlocal delta=$(echo \"$x - $mean\" | bc -l)\n\t\tlocal\
    \ abs=$(echo \"($delta < 0.0) ? -$delta : $delta\" | bc -l)\n\t\ttotal=$(echo\
    \ \"$total + $abs\" | bc -l)\n\tdone\n\tlocal count=$(num_elements \"$data\")\n\
    \techo $(echo \"$total / $count\" | bc -l)", "    local x=\"$1\"\n    local sum=0.0\n\
    \    local count=0\n    local x_mean\n    local delta\n    for xi in $x; do\n\
    \        sum=$(printf \"%0.4f\" $(echo \"$sum + $xi\" | bc -l))\n        count=$((count\
    \ + 1))\n    done\n    x_mean=$(printf \"%0.4f\" $(echo \"$sum / $count\" | bc\
    \ -l))\n    sum=0.0\n    for xi in $x; do\n        delta=$(printf \"%0.4f\" $(echo\
    \ \"$xi - $x_mean\" | bc -l))\n        delta=$(printf \"%0.4f\" $(echo \"sqrt($delta\
    \ * $delta)\" | bc -l))\n        sum=$(printf \"%0.4f\" $(echo \"$sum + $delta\"\
    \ | bc -l))\n    done\n    echo $(printf \"%0.4f\" $(echo \"$sum / $count\" |\
    \ bc -l))", "  local x_mean=$(echo \"$1\" | awk '{sum=0; n=0; for (i=1; i<=NF;\
    \ i++) {sum+=$i; n++;} printf \"%.5f\", sum/n}')\n  local x_minus_x_mean=$(echo\
    \ \"$1\" | awk -v xm=$x_mean '{sum=0; n=0; for (i=1; i<=NF; i++) {sum+=fabs($i-xm);\
    \ n++;} printf \"%.5f\", sum/n}')\n  echo $x_minus_x_mean", "    if [ $# -ne 1\
    \ ]; then\n        echo \"Invalid parameters.\"\n        echo \"USAGE: $0 num1\
    \ num2 num3 ...\"\n        exit 1\n    fi\n\n    nums=\"$1\"\n    num_sum=0.0\n\
    \    num_count=0\n    for num in $nums; do\n        num_sum=$(awk \"BEGIN {print\
    \ $num_sum + $num}\")\n        num_count=$((num_count + 1))\n    done\n    mean=$(awk\
    \ \"BEGIN {print $num_sum / $num_count}\")\n\n    sum_absolute_deviation=0.0\n\
    \    for num in $nums; do\n        absolute_deviation=$(awk \"BEGIN {print $num\
    \ - $mean}\")\n        if [ $(echo \"$absolute_deviation < 0\" | bc) -eq 1 ];\
    \ then\n            absolute_deviation=$(awk \"BEGIN {print $absolute_deviation\
    \ * -1}\")\n        fi\n        sum_absolute_deviation=$(awk \"BEGIN {print $sum_absolute_deviation\
    \ + $absolute_deviation}\")\n    done\n    awk \"BEGIN {print $sum_absolute_deviation\
    \ / $num_count}\"", "    local array=($1)\n    local mean=$(average \"${array[@]}\"\
    )\n    sum=0\n    for value in \"${array[@]}\"; do\n        local difference=$(bc\
    \ <<< \"scale=4; $value - $mean\")\n        local absolute_difference=$(abs \"\
    $difference\")\n        sum=$(bc <<< \"scale=4; $sum + $absolute_difference\"\
    )\n    done\n    bc <<< \"scale=4; $sum / ${#array[@]}\"", "\techo \"$1\" | awk\
    \ '\n\tBEGIN {\n\t\tmean = 0;\n\t\tsum_of_absolute_differences = 0;\n\t\tnumber_of_values\
    \ = 0;\n\t}\n\t{\n\t\tnumber_of_values++;\n\t\tsum_of_absolute_differences +=\
    \ $1;\n\t}\n\tEND {\n\t\tmean = sum_of_absolute_differences / number_of_values;\n\
    \t\tsum_of_absolute_differences = 0;\n\t\tfor (i = 1; i <= number_of_values; i++)\
    \ {\n\t\t\tsum_of_absolute_differences += abs($i - mean);\n\t\t}\n\t\tprint sum_of_absolute_differences\
    \ / number_of_values;\n\t}'", "    local numbers=($1)\n    local mean=\"$(mean\
    \ \"$1\")\"\n    echo \"${numbers[@]}\" | awk \"{for(i=1;i<=NF;i++) print \\$i-$mean}\"\
    \ |\n        sed 's/-//g' | awk '{sum+=$1} END {print sum/NR}'", "  mean=$(echo\
    \ $@ | awk '{for(i=1;i<=NF;i++) sum+=$i; print sum/NF}')\n  mad=$(echo $@ | awk\
    \ -v mean=$mean '{for(i=1;i<=NF;i++) sum+=sqrt(($i-mean)^2)} END {print sum/NF}')\n\
    \  echo $mad", "    local lst=\"$1\"\n    local mean=$(average \"$lst\")\n   \
    \ # Bash does not have map functions, so we wrap the lst variable\n    # in a\
    \ function and call this function through xargs.\n    # To keep things simple,\
    \ we use the 'echo' command as our map-function,\n    # but this can be replaced\
    \ with any valid bash command.\n    echo \"$lst\" | xargs -n1 -I{} echo $(expr_to_float\
    \ \"$mean - {}\") | xargs -n1 -I{} echo $(expr_to_float \"abs({})\") | average",
  "    data=( $1 )\n    length=${#data[@]}\n    sum=0\n    for (( i=0; i<${length};\
    \ i++ )); do\n        sum=$(bc <<< \"$sum + ${data[$i]}\")\n    done\n    mean=$(bc\
    \ <<< \"scale=2; $sum / $length\")\n    # This could use some work\n    # https://stackoverflow.com/questions/19242275/passing-arbitrary-precision-numbers-to-shell-scripts-bc-dc-or-awk\n\
    \    sum=0\n    for (( i=0; i<${length}; i++ )); do\n        diff=$(bc <<< \"\
    scale=2; ${data[$i]} - $mean\")\n        absdiff=$(bc <<< \"scale=2; (0 > $diff)\
    \ * $diff * -1 + (0 < $diff) * $diff\")\n        sum=$(bc <<< \"scale=2; $sum\
    \ + $absdiff\")\n    done\n    echo $(bc <<< \"scale=2; $sum / $length\")", " \
    \   echo \"$1\" | {\n        local tot=0\n        local count=0\n        while\
    \ read val; do\n            tot=$(bc <<< \"$tot + $val\")\n            count=$((count\
    \ + 1))\n        done\n        local mean=$(bc <<< \"scale=2; $tot / $count\"\
    )\n        tot=0\n        count=0\n        while read val; do\n            tot=$(bc\
    \ <<< \"$tot + abs($val - $mean)\")\n            count=$((count + 1))\n      \
    \  done\n        local mad=$(bc <<< \"scale=2; $tot / $count\")\n        echo\
    \ \"$mad\"\n    }", "\tNUMBERS=( $1 )\n\tMEAN=$(average \"$1\")\n\tTOTAL=0\n\t\
    for NUM in ${NUMBERS[@]}; do\n\t\tDIFF=$(echo \"scale=4; $NUM - $MEAN\" | bc)\n\
    \t\tTOTAL=$(echo \"scale=4; $TOTAL + abs($DIFF)\" | bc)\n\tdone\n\techo \"$(echo\
    \ \"scale=4; $TOTAL / ${#NUMBERS[@]}\" | bc)\"", "    local mean=`mean \"$@\"\
    `\n    local deviations=\n    for x in $@; do\n        deviations=\"$deviations\
    \ `abs $x-$mean`\"\n    done\n    mean $deviations", "    if [[ -z \"$1\" ]];\
    \ then\n        echo \"mean_absolute_deviation: no input\" >&2\n        exit 1\n\
    \    fi\n    local mean=$(mean \"$1\")\n    local dev_list=\"\"\n    for n in\
    \ $1; do\n        local dev=$(echo \"scale=2;$n - $mean\" | bc)\n        dev_list=\"\
    $dev_list $dev\"\n    done\n    abs \"$dev_list\" | mean", "    local count\n\
    \    local sum\n    local mean\n    local mad\n    local num\n\n    count=0\n\
    \    sum=0\n    for num in $1; do\n        let count=count+1\n        sum=$(echo\
    \ \"$sum + $num\" | bc -l)\n    done\n    mean=$(echo \"$sum / $count\" | bc -l)\n\
    \n    mad=0\n    for num in $1; do\n        mad=$(echo \"$mad + abs($num - $mean)\"\
    \ | bc -l)\n    done\n    mad=$(echo \"$mad / $count\" | bc -l)\n\n    echo \"\
    $mad\"", "  local -a input_array\n  local input_size\n  local -a abs_array\n \
    \ local i\n  local j\n  local sum_abs\n  local abs_deviation\n  local abs_deviation_rounded\n\
    \  local mean_abs_deviation\n\n  input_array=($1)\n  input_size=${#input_array[@]}\n\
    \n  # Calculate mean\n  mean=$(average $1)\n\n  # Calculate absolute deviation\n\
    \  for ((i=0; i<$input_size; i++)); do\n    abs_array[$i]=$(bc <<< \"scale=3;\
    \ ${input_array[$i]} - $mean\")\n    abs_array[$i]=$(bc <<< \"scale=3; ${abs_array[$i]}\
    \ < 0 ? ${abs_array[$i]} * -1 : ${abs_array[$i]}\")\n  done\n\n  # Calculate mean\
    \ of absolute deviations\n  for ((i=0; i<$input_size; i++)); do\n    sum_abs=$(bc\
    \ <<< \"scale=3; $sum_abs + ${abs_array[$i]}\")\n  done\n  mean_abs_deviation=$(bc\
    \ <<< \"scale=3; $sum_abs / $input_size\")\n\n  # Round to nearest integer, if\
    \ needed\n  abs_deviation=$(bc <<< \"scale=3; $mean_abs_deviation * 1000\")\n\
    \  abs_deviation_rounded=$(printf \"%0.f\" $abs_deviation)\n  if [[ $abs_deviation_rounded\
    \ -eq $abs_deviation ]]; then\n    echo $mean_abs_deviation\n  else\n    echo\
    \ $mean_abs_deviation | sed -e 's/\\.[0-9]*$//'\n  fi", "    local s=0 \n    local\
    \ n=0\n    local d=0\n    local m=0\n    local v=0\n    local i=0\n    local sum_of_numbers=0\n\
    \n    for i in $(echo $1); do\n        sum_of_numbers=$(python -c \"print($sum_of_numbers\
    \ + $i)\")\n        n=$(python -c \"print($n + 1)\")\n    done\n\n    m=$(python\
    \ -c \"print($sum_of_numbers / $n)\")\n\n    for i in $(echo $1); do\n       \
    \ d=$(python -c \"print(abs($i - $m))\")\n        s=$(python -c \"print($s + $d)\"\
    )\n    done\n\n    v=$(python -c \"print($s / $n)\")\n    echo \"$v\"", "    sum=0\n\
    \    n=0\n    for i in $1; do\n        sum=$(echo $sum+$i | bc)\n        n=$(echo\
    \ $n+1 | bc)\n    done\n    mean=$(echo $sum/$n | bc -l)\n    sum=0\n    for i\
    \ in $1; do\n        sum=$(echo $sum+\\($i-$mean\\) | bc)\n    done\n    echo\
    \ $(echo $sum/$n | bc -l)", "    if [ \"$#\" -ne 1 ]; then\n        echo \"Usage:\
    \ $0 <list_of_numbers>\"\n        exit 1\n    fi\n    # Calculate mean\n    sum=0\n\
    \    for element in $1; do\n        sum=$(bc <<< \"$sum + $element\")\n    done\n\
    \    mean=$(bc <<< \"$sum / $#\")\n    # Calculate absolute deviations from mean\n\
    \    for element in $1; do\n        abs_deviations=\"$abs_deviations $(bc <<<\
    \ \"if ($element > $mean) $element - $mean else $mean - $element\")\"\n    done\n\
    \    # Calculate mean absolute deviation\n    for element in $abs_deviations;\
    \ do\n        sum=$(bc <<< \"$sum + $element\")\n    done\n    bc <<< \"$sum /\
    \ $#\"", "    [ $# -ne 1 ] && error \"Usage: mean_absolute_deviation \\\"1.0 2.0\
    \ 3.0 4.0\\\"\"\n    local dataset\n    dataset=( $1 )\n    local mean\n    mean=$(mean\
    \ \"$1\")\n    local abs_dist\n    for num in \"${dataset[@]}\"; do\n        abs_dist=\"\
    $abs_dist $((echo \"$num $mean\" | awk '{print $1-$2}' | awk '{if ($1>=0) {print\
    \ $1} else {print -$1}}'))\"\n    done\n    echo $abs_dist | awk '{for (i=1;i<=NF;i++)\
    \ sum+=$i; print sum/NF}'", "    local input_list=\"$1\"\n    local mean\n   \
    \ local element\n    local absolute_deviation\n    local sum_absolute_deviations\n\
    \    local number_elements\n    local -a input_array\n    local -a absolute_deviations\n\
    \    # Turn the space-separated list into an array of elements\n    IFS=\" \"\
    \ read -r -a input_array <<< \"$input_list\"\n    # Calculate the mean of this\
    \ array\n    mean=$(mean \"${input_array[@]}\")\n    # For each element, calculate\
    \ it's absolute difference to the mean\n    sum_absolute_deviations=0\n    number_elements=0\n\
    \    for element in \"${input_array[@]}\"; do\n        absolute_deviation=$(absolute_difference\
    \ \"$element\" \"$mean\")\n        sum_absolute_deviations=$((\"$sum_absolute_deviations\"\
    \ + \"$absolute_deviation\"))\n        absolute_deviations+=(\"$absolute_deviation\"\
    )\n        number_elements=$((\"$number_elements\" + 1))\n    done\n    # Take\
    \ the average of these absolute differences\n    echo \"$((\"$sum_absolute_deviations\"\
    \ / \"$number_elements\"))\"", "    numbers=$1\n    mean=$(mean \"$numbers\")\n\
    \    sum=0\n    for num in $numbers; do\n        sum=$(add $sum $(absolute_difference\
    \ $num $mean))\n    done\n    echo $(divide $(num_elements \"$numbers\") $sum)",
  "    local -r mean=$(echo $1 | mean.sh)\n    local sum=0\n    for i in $1; do\n\
    \        sum=$(echo \"$sum + abs($i - $mean)\" | bc -l)\n    done\n    echo $(echo\
    \ \"$sum / ($#)\" | bc -l)", "    local input=$1\n    local average\n    average=$(echo\
    \ \"$input\" | average)\n    local sum\n    sum=0\n    for n in $input; do\n \
    \       sum=$(echo \"$sum + ${n} - ${average}\" | bc -l)\n    done\n    echo \"\
    $sum / ${#input[@]}\" | bc -l", "    local -a numbers=($(printf \"%f\" $1))\n\
    \    local total=$(printf \"%f\" $(echo ${numbers[@]} | tr ' ' '+'))\n    local\
    \ count=$(echo ${numbers[@]} | wc -w)\n    local mean=$(echo \"scale=3; $total\
    \ / $count\" | bc)\n    local abs_deviations=()\n    for number in ${numbers[@]};\
    \ do\n        abs_deviations+=($(echo \"scale=3; $number - $mean\" | bc | awk\
    \ '{print ($1 < 0) ? -$1 : $1}'))\n    done\n    local sum=$(printf \"%f\" $(echo\
    \ ${abs_deviations[@]} | tr ' ' '+'))\n    echo $(echo \"scale=3; $sum / $count\"\
    \ | bc)", "    local num_list=\"$1\"\n    local x_mean\n    x_mean=$(mean \"$num_list\"\
    )\n    local abs_distance\n    abs_distance=$(echo \"$num_list\" | \\\n      \
    \  awk '{ for (i=1; i<=NF; i++) { printf(\"%s%s\", $i, (i<NF) ? \" \" : \"\\n\"\
    ) } }' | \\\n        awk '{ for (i=1; i<=NF; i++) { printf(\"%s%s\", $i - '\"\
    $x_mean\"', (i<NF) ? \" \" : \"\\n\") } }' | \\\n        awk '{ for (i=1; i<=NF;\
    \ i++) { printf(\"%s%s\", $i < 0 ? -$i : $i, (i<NF) ? \" \" : \"\\n\") } }' |\
    \ \\\n        awk '{ sum=0; for (i=1; i<=NF; i++) { sum+=$i }; printf(\"%f\\n\"\
    , sum / NF) }')\n    echo \"$abs_distance\"", "  local sum_diffs=0\n  local count=0\n\
    \  local mean=0\n  local diff=0\n  local sum_abs_diffs=0\n  local mean_abs_diff=0\n\
    \  local result=0\n\n  mean=$(mean \"$1\")\n  for x in $1\n  do\n    (( count++\
    \ ))\n    diff=$(echo \"$x - $mean\" | bc -l)\n    sum_diffs=$(echo \"$sum_diffs\
    \ + $diff\" | bc -l)\n    sum_abs_diffs=$(echo \"$sum_abs_diffs + ${diff#-}\"\
    \ | bc -l)\n  done\n  mean_abs_diff=$(echo \"$sum_abs_diffs / $count\" | bc -l)\n\
    \  echo \"$mean_abs_diff\"", "    if (( $# != 1 )); then\n        echo \"You must\
    \ provide the MAD's input data, space-separated!\"\n        exit 1\n    fi\n \
    \   IFS=' ' read -r -a array <<< \"$1\"\n    n=${#array[@]}\n    sum=0\n    for\
    \ i in ${array[@]}; do\n        sum=$(echo \"$sum + $i\" | bc -l)\n    done\n\
    \    mean=$(echo \"$sum / $n\" | bc -l)\n    sum=0\n    for i in ${array[@]};\
    \ do\n        sum=$(echo \"$sum + abs($i - $mean)\" | bc -l)\n    done\n    echo\
    \ \"$(echo \"$sum / $n\" | bc -l)\"", "    # Find mean, store in variable \"mean\"\
    \n    mean=$(python3 -c \"import numpy; print(sum(numpy.array([$1])) / len([$1]))\"\
    )\n    # Find absolute values of each element minus mean, store in variable \"\
    abs_diffs\"\n    abs_diffs=$(python3 -c \"import numpy; print(' '.join(str(abs(x\
    \ - $mean)) for x in numpy.array([$1])))\")\n    # Take mean of abs_diffs, store\
    \ in variable \"m\"\n    m=$(python3 -c \"import numpy; print(sum(numpy.array([$abs_diffs]))\
    \ / len([$abs_diffs]))\")\n    # Print result\n    echo $m", "    local sum=0\n\
    \    local count=0\n    local mean=0\n    local dev=0\n    local value=0\n   \
    \ local mad=0\n    local nums=\"$1\"\n    for value in $nums; do\n        sum=$(echo\
    \ \"scale=3;$sum + $value\" | bc)\n        count=$(echo \"scale=3;$count + 1\"\
    \ | bc)\n    done\n    mean=$(echo \"scale=3;$sum / $count\" | bc)\n    for value\
    \ in $nums; do\n        dev=$(echo \"scale=3;$value - $mean\" | bc)\n        dev=$(abs\
    \ $dev)\n        mad=$(echo \"scale=3;$mad + $dev\" | bc)\n    done\n    mad=$(echo\
    \ \"scale=3;$mad / $count\" | bc)\n    echo $mad", "  if [ $# -eq 0 ]; then\n\
    \    echo \"mean_absolute_deviation: error: expecting at least one argument\"\
    \ >&2\n    return 1\n  fi\n  # Calculate mean\n  local x_mean=$(echo \"$@\" |\
    \ awk '{sum=0; for (i=1; i<=NF; i++) sum+=$i; print sum/NF}')\n  # Now calculate\
    \ mean absolute deviation\n  local abs_diff_sum=0\n  local x_abs_diff\n  for x\
    \ in $@; do\n    x_abs_diff=$(echo \"$x - $x_mean\" | bc -l)\n    abs_diff_sum=$(echo\
    \ \"$abs_diff_sum + $x_abs_diff\" | bc -l)\n  done\n  echo \"$abs_diff_sum / $#\"\
    \ | bc -l", "    if [ -z \"$1\" ]; then\n        return\n    fi\n    local mean=$(arithmetic_mean\
    \ \"$@\")\n    local total=0\n    for x in $@; do\n        let total+=${x}-${mean}\n\
    \    done\n    echo \"$(echo \"${total}\" | awk '{printf \"%.4f\", ($1/$2)}' \"\
    ${total}\" \"$#\")\"", "    local values=$(echo $1 | sed 's/ /,/g')\n    echo\
    \ \"$values\" | awk -F, '{\n        sum = 0;\n        for (i = 1; i <= NF; i++)\
    \ {\n            sum += $i;\n        }\n        mean = sum / NF;\n        sum\
    \ = 0;\n        for (i = 1; i <= NF; i++) {\n            sum += abs($i - mean);\n\
    \        }\n        print sum / NF;\n    }'", "    local X_SUM=0.0\n    local\
    \ N=0\n    for X in $1; do\n        let N=N+1\n        X_SUM=$(echo \"$X_SUM +\
    \ $X\" | bc -l)\n    done\n    local X_MEAN=$(echo \"$X_SUM / $N\" | bc -l)\n\
    \    local ABS_DIFF_SUM=0.0\n    for X in $1; do\n        local ABS_DIFF=$(echo\
    \ \"if ($X > $X_MEAN) $X - $X_MEAN else $X_MEAN - $X\" | bc -l)\n        ABS_DIFF_SUM=$(echo\
    \ \"$ABS_DIFF_SUM + $ABS_DIFF\" | bc -l)\n    done\n    echo \"$ABS_DIFF_SUM /\
    \ $N\" | bc -l", "  # Calculate mean\n  mean=$(mean $1)\n  # For each element\
    \ in the list, calculate absolute difference from mean\n  # and concatenate to\
    \ list\n  absdiff_list=\"\"\n  for element in $1; do\n    absdiff_list+=\"$(math::absolute_difference\
    \ $element $mean) \"\n  done\n  # Return mean of the new list\n  mean $absdiff_list",
  "    mean=$(echo \"$1\" | python -c \"\nimport sys\nimport numpy as np\n\ndef main():\n\
    \    data = [float(i) for i in sys.stdin.read().split()]\n    mean = np.mean(data)\n\
    \    absolute_deviations = [abs(d - mean) for d in data]\n    print(np.mean(absolute_deviations))\n\
    \nif __name__ == '__main__':\n    main()\n\")\n    echo \"$mean\"", "    local\
    \ numbers=\"$1\"\n    local mean=$(average_dataset \"$numbers\")\n    local abs_diff_sum=0.0\n\
    \    for number in $numbers; do\n        abs_diff_sum=$(awk \"BEGIN { print $abs_diff_sum\
    \ + ( $number - $mean ) }\")\n    done\n    local abs_diff_sum_abs=$(awk \"BEGIN\
    \ { print ($abs_diff_sum < 0 ? -$abs_diff_sum : $abs_diff_sum) }\")\n    local\
    \ abs_diff_mean=$(awk \"BEGIN { print $abs_diff_sum_abs / ($#+1) }\")\n    echo\
    \ \"$abs_diff_mean\"", "  # Mean Absolute Deviation is the average absolute difference\
    \ between each\n  # element and a centerpoint (mean in this case):\n  # MAD =\
    \ average | x - x_mean |\n  # >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\"\
    )\n  # \"1.0\"\n  _mad \"$(mean \"$1\")\" \"$1\"", "    local x_mean=\"$(average\
    \ \"$1\")\"\n    local sum=0\n    local counter=0\n    for x in $1; do\n     \
    \   sum=$(echo \"$sum + abs($x - $x_mean)\" | bc -l)\n        counter=$((counter\
    \ + 1))\n    done\n    local mean_absolute_deviation=$(echo \"$sum / $counter\"\
    \ | bc -l)\n    echo \"$mean_absolute_deviation\"", "    echo $@ | awk '{\n  \
    \  x_mean = 0;\n    for (i = 1; i <= NF; i++) {\n        x_mean += $i\n    }\n\
    \    x_mean /= NF;\n    x_sum = 0;\n    for (i = 1; i <= NF; i++) {\n        x_sum\
    \ += abs($i - x_mean)\n    }\n    print x_sum / NF", "    local data=$(echo $1\
    \ | tr \" \" \"\\n\")\n    local n_data=$(echo $data | wc -w)\n    local x_bar=$(echo\
    \ $data | ./mean.sh)\n    local abs_x_minus_x_bar=$(echo \"$data\" | awk -v x_bar=$x_bar\
    \ '{print sqrt((x_bar - $1)**2)}')\n    local sum_abs_x_minus_x_bar=$(echo \"\
    $abs_x_minus_x_bar\" | ./sum.sh)\n    local mean_abs_x_minus_x_bar=$(echo \"scale=3;\
    \ $sum_abs_x_minus_x_bar / $n_data\" | bc)\n    echo $mean_abs_x_minus_x_bar",
  "  # If we have GNU awk, then use it. Otherwise, calculate mean with sum\n  # and\
    \ count bash functions.\n  if command -v gawk 2>&1 >/dev/null; then\n    mean=$(echo\
    \ \"$*\" | gawk '{ sum=0; for (i=1; i<=NF; i++) sum += $i; print sum/NF }')\n\
    \  else\n    mean=$(echo \"$*\" | sum | awk '{print $1/NF}')\n  fi\n  echo \"\
    $*\" | awk \"{sum=0; for (i=1; i<=NF; i++) sum += \\$i - $mean; print sum/NF }\"",
  "\tlocal average=0\n\tlocal sum=0\n\tlocal numbers=( $1 )\n\tlocal count=${#numbers[@]}\n\
    \tfor i in ${numbers[@]}; do\n\t\tsum=$(echo \"${sum} + ${i}\" | bc)\n\tdone\n\
    \taverage=$(echo \"${sum} / ${count}\" | bc -l)\n\tlocal accum=0\n\tfor i in ${numbers[@]};\
    \ do\n\t\taccum=$(echo \"${accum} + (${i} - ${average})^2\" | bc -l)\n\tdone\n\
    \tmean_squared_deviation=$(echo \"${accum} / ${count}\" | bc -l)\n\techo \"$(sqrt\
    \ ${mean_squared_deviation})\"", "  local list=$1\n  local mean=$(echo $list |\
    \ python -c \"import sys; print(sum(map(float, sys.stdin.read().split())) / len(sys.stdin.read().split()))\"\
    )\n  local mad=$(echo $list | python -c \"import sys; list = map(float, sys.stdin.read().split());\
    \ print(sum(map(lambda x: abs(x - $mean), list)) / len(list))\")\n  echo $mad",
  "    # It would be faster just to calculate the mean twice, but as we are\n    #\
    \ calling it on columns of a large table, better to keep the mean\n    # calculated\
    \ by the calling function and pass it in.\n    mean=\"$2\"\n    (\n    # Read\
    \ the input into array, one element per line\n    IFS=\" \" read -r -a input_array\
    \ <<< \"$1\"\n    # Do the math, absolute value the difference\n    for element\
    \ in \"${input_array[@]}\"; do\n        printf \"%.0f\\n\" $(echo \"scale=4; ${element}\
    \ - ${mean}\" | bc)\n    done\n    ) |\n    # Now sum all these up and divide\
    \ by the number of elements\n    # We don't need a loop here, bash can do it all\
    \ at once\n    awk -v len=${#input_array[@]} '{sum+=$1} END {print sum/len}'",
  "    # Mean Absolute Deviation\n    #  - compute the mean of the input\n    local\
    \ mean=$(mean \"$1\")\n    #  - compute the absolute difference of each element\
    \ with the mean\n    #    to get a list of positive numbers\n    local abs_devs=$(map\
    \ \"fabs(\\$1 - $mean)\" $1)\n    #  - compute the mean of the absolute deviations\
    \ to get the answer\n    #    (note that mean_absolute_deviation is not so concisely\
    \ named)\n    echo $(mean \"$abs_devs\")", "    local list=\"$1\"\n    # Calculate\
    \ the mean of all input values\n    local mean=$(echo \"$list\" | awk '{ sum +=\
    \ $1 } END { print sum / NR }')\n    # Calculate the absolute deviation of each\
    \ value from the mean, sum them\n    # up and divide by the number of values to\
    \ get the Mean Absolute Deviation\n    echo \"$list\" | awk -v mean=\"$mean\"\
    \ '{ sum += $1 } END { print sum / NR }'", "  local sum=0\n  local mean=$(mean\
    \ \"$1\")\n  for val in $1; do\n    sum=$(echo \"$sum + abs($val - $mean)\" |\
    \ bc -l)\n  done\n  local sum=$(echo \"$sum / $val_count\" | bc -l)\n  echo $sum",
  "    local x=\"$1\"\n    local mean=$(mean \"$x\")\n    for x in $x; do\n      \
    \  echo $x - $mean | bc -l\n    done | awk '{sum += $1; sumsq += $1 * $1} END\
    \ {print sqrt(sumsq / NR - (sum / NR) * (sum / NR))}'", "    input=$1\n    local\
    \ mean=$(echo \"$input\" | awk '{sum += $1} END {print sum/NR}')\n    local abs_diff=$(echo\
    \ \"$input\" | awk '{print $1 - \"'$mean'\"}' | awk '{sum += $1} END {print sum/NR}')\n\
    \    echo $abs_diff", "  local x_sum=0\n  local n=0\n  for x in $1; do\n    x_sum=$(echo\
    \ \"$x_sum + $x\" | bc -l)\n    n=$(echo \"$n + 1\" | bc -l)\n  done\n  local\
    \ x_mean=$(echo \"$x_sum / $n\" | bc -l)\n  local mad_sum=0\n  for x in $1; do\n\
    \    local deviation=$(echo \"$x - $x_mean\" | bc -l)\n    mad_sum=$(echo \"$mad_sum\
    \ + $(echo \"scale=12; $deviation < 0 ? -$deviation : $deviation\" | bc -l)\"\
    \ | bc -l)\n  done\n  echo \"$(echo \"scale=12; $mad_sum / $n\" | bc -l)\"", " \
    \   local -r list=\"$1\"\n    local -r count=$(echo \"$list\" | wc -w)\n    #\
    \ Make sure we have at least two values\n    if [[ $count -lt 2 ]]; then\n   \
    \     echo 0\n        return\n    fi\n    local -r x_mean=$(echo \"$list\" | awk\
    \ '{sum+=$1} END {print sum/NR}')\n    local sum=0\n    echo \"$list\" |\n   \
    \     while read x; do\n            sum=$(echo \"$sum + abs($x - $x_mean)\" |\
    \ bc -l)\n        done\n    echo $(echo \"$sum / $count\" | bc -l)", "    # Calculate\
    \ the mean first\n    local input=$(echo \"$1\" | sed 's/\\s+/\\n/g')\n    local\
    \ mean=$(echo $input | python -c \"import sys; print(sum(float(l) for l in sys.stdin)/len(sys.stdin.readlines()))\"\
    )\n    # Calculate the MAD\n    local mad=$(echo $input | python -c \"import sys;\
    \ print(sum(abs(float(l)-$mean) for l in sys.stdin)/len(sys.stdin.readlines()))\"\
    )\n    echo $mad", "  awk '{sum+=$1}END{print sum/NR}' <<< \"$1\" | \n  awk '{\n\
    \    sum=0\n    split($0, a, \" \")\n    for (i in a)\n      sum+=sqrt(a[i]*a[i])\n\
    \    print sum/length(a)\n  }'", "    local SUM=0\n    local COUNT=0\n    while\
    \ read NUM; do\n        SUM=$(echo \"scale=20; $SUM + $NUM\" | bc -l)\n      \
    \  let COUNT++\n    done <<< $(echo $1)\n    local MEAN=$(echo \"scale=20; $SUM\
    \ / $COUNT\" | bc -l)\n    local ABS_DIFF_SUM=0\n    while read NUM; do\n    \
    \    local ABS_DIFF=$(echo \"scale=20; $NUM - $MEAN\" | bc -l)\n        ABS_DIFF=$(echo\
    \ \"scale=20; $ABS_DIFF < 0 ? $ABS_DIFF * -1 : $ABS_DIFF\" | bc -l)\n        ABS_DIFF_SUM=$(echo\
    \ \"scale=20; $ABS_DIFF_SUM + $ABS_DIFF\" | bc -l)\n    done <<< $(echo $1)\n\
    \    echo $(echo \"scale=20; $ABS_DIFF_SUM / $COUNT\" | bc -l)", "\tarr=($1)\n\
    \tn=${#arr[@]}\n\tx_mean=$(mean \"$1\")\n\tfor x in \"${arr[@]}\"; do\n\t\tx_diff=$(printf\
    \ \"%.3f\" $(echo \"$x - $x_mean\" | bc -l))\n\t\tx_abs=$(printf \"%.3f\" $(echo\
    \ \"($x_diff < 0) ? 0 - $x_diff : $x_diff\" | bc -l))\n\t\tsum=$(printf \"%.3f\"\
    \ $(echo \"$sum + $x_abs\" | bc -l))\n\tdone\n\tmean_absolute_deviation=$(printf\
    \ \"%.3f\" $(echo \"$sum / $n\" | bc -l))\n\techo \"$mean_absolute_deviation\"",
  "  local list mean median sum abs_deviations divisor\n  list=(${@})\n  mean=$(average\
    \ \"${list[@]}\")\n  sum=0\n  for number in \"${list[@]}\"; do\n    abs_deviations=$(bc\
    \ <<< \"${number} - ${mean}\")\n    sum=$(bc <<< \"${sum} + ${abs_deviations}\"\
    )\n  done\n  divisor=$(bc <<< \"${#list[@]}\")\n  bc <<< \"scale=4; ${sum} / ${divisor}\"",
  "  local target_numbers=\"$1\"\n  local target_numbers_count=\"$(word_count \"$target_numbers\"\
    )\"\n  local mean=\"$(average \"$target_numbers\")\"\n  local abs_diffs=\"\"\n\
    \  local abs_diff=\"\"\n  local abs_diffs_sum=\"\"\n  for target_number in $target_numbers;\
    \ do\n    abs_diff=\"$(abs_diff \"$target_number\" \"$mean\")\"\n    abs_diffs=\"\
    $abs_diffs $abs_diff\"\n  done\n  abs_diffs_sum=\"$(sum \"$abs_diffs\")\"\n  echo\
    \ $abs_diffs_sum", "    IFS=\" \" read -r -a array <<< \"$1\"\n    local mean\n\
    \    mean=$(mean \"${array[@]}\")\n    abs_diffs=()\n    for e in \"${array[@]}\"\
    ; do\n        abs_diffs+=(\"$(absolute_difference \"$e\" \"$mean\")\")\n    done\n\
    \    python -c \"print $($(mean \"${abs_diffs[@]}\"))\"", "  input=\"$*\"\n  center=$(echo\
    \ \"$input\" | awk '{ SUM += $1; COUNT++ } END { print SUM / COUNT }')\n  echo\
    \ \"$input\" | awk -v center=\"$center\" '{ SUM += center - $1 } END { print SUM\
    \ / NR }'", "    local mean=$(mean_of \"$1\")\n    local sum=0\n    for x in $1;\
    \ do\n        sum=$(echo \"$sum + ${x/./} - ${mean/./}\" | bc)\n    done\n   \
    \ echo \"${sum/./} / $(echo $1 | wc -w)\" | bc", "    local -r data=\"$1\"\n \
    \   local -r length=$(wc -w <<< \"$data\")\n    # Calculate the mean by adding\
    \ all elements and dividing by the number of\n    # elements.\n    local -r mean=$(echo\
    \ \"$data\" | awk '{sum+=$1} END {print sum/NR}')\n    # Calculate the absolute\
    \ value of all elements minus the mean.\n    local -r deviation=$(echo \"$data\"\
    \ | awk -v mean=\"$mean\" '{print mean-$1}' |\n                        awk '{printf\
    \ \"%s\\n\", ($1>0)?$1:-$1}')\n    # Sum the absolute values and divide by the\
    \ number of elements to get the\n    # Mean Absolute Deviation.\n    echo \"$deviation\"\
    \ | awk '{sum+=$1} END {print sum/NR}'", "    local x\n    local mean\n    local\
    \ sum=0\n    local count=0\n    local abs_sum=0\n    for x in $@; do\n       \
    \ sum=$(echo \"$sum + $x\" | bc -l)\n        ((count++))\n    done\n    mean=$(echo\
    \ \"$sum / $count\" | bc -l)\n    for x in $@; do\n        local abs_x=$(echo\
    \ \"if ($x < 0) -1 * $x else $x\" | bc -l)\n        abs_sum=$(echo \"$abs_sum\
    \ + $abs_x\" | bc -l)\n    done\n    echo \"$abs_sum / $count\" | bc -l", "  \
    \  local nums=$1\n    # Calculate mean\n    local mean=$(echo $nums | awk '{sum=0;\
    \ for(i=1; i<=NF; i++) sum+=$i; print sum/NF}')\n    # Calculate absolute deviations\
    \ from mean\n    local adevs=$(echo $nums | awk -v mean=$mean '{sum=0; for(i=1;\
    \ i<=NF; i++) sum+=sqrt((($i-mean)*($i-mean))); print sum/NF}')\n    echo $adevs",
  "  local -r original_list=\"$1\"\n  local -r mean=$(echo \"${original_list}\" |\
    \ mean)\n  echo \"${original_list}\" | sed \"s/[0-9.]\\+/|&-${mean}|/g\" |\n \
    \   paste -sd+ - | bc | sed \"s/^/scale=4;/\" | bc | sed \"s/^/scale=2;/\" | bc",
  "  list=$(echo \"$1\" | tr \" \" \"\\n\")\n  average_difference=$(avg_abs_difference\
    \ \"$list\")\n  average_difference=$(echo \"$average_difference\" | sed -E 's/^(-*)([0-9.]+)(\\\
    ..*$)/\\2/')\n  echo \"$average_difference\"", "  if [ \"$#\" -eq 0 ]; then echo\
    \ \"mean_absolute_deviation requires an argument\"; return 1; fi\n  local mean=$(average\
    \ $@)\n  if [ -z \"$mean\" ]; then return 1; fi\n  local deltas=\"\"\n  for elem\
    \ in $@; do\n    local delta=$(echo \"$elem $mean\" | awk '{print $1 - $2}')\n\
    \    local abs_delta=$(abs $delta)\n    deltas=\"$deltas $abs_delta\"\n  done\n\
    \  average $deltas", "    local mean=$(mean $1)\n    local abs_diffs=$(for n in\
    \ $1; do echo $n $mean | awk '{printf \"%f\\n\", $1 - $2}'; done)\n    local abs_diff_mags=$(for\
    \ n in $abs_diffs; do echo $n | awk '{printf \"%f\\n\", sqrt($1^2)}'; done)\n\
    \    mean $abs_diff_mags", "  local num_regex=\"^[0-9]*(.[0-9]+)?$\"\n  local\
    \ input_data=($1)\n  local output_data=()\n  local input_data_sum=0\n  local input_data_length=0\n\
    \  local mean=0\n  local total_absolute_difference=0\n  local absolute_difference=0\n\
    \  for num in \"${input_data[@]}\"; do\n    if [[ $num =~ $num_regex ]]; then\n\
    \      output_data+=(\"$num\")\n      input_data_sum=$(echo \"$input_data_sum\
    \ + $num\" | bc)\n      input_data_length=$(echo \"$input_data_length + 1\" |\
    \ bc)\n    fi\n  done\n  mean=$(echo \"$input_data_sum / $input_data_length\"\
    \ | bc -l)\n  for num in \"${output_data[@]}\"; do\n    absolute_difference=$(echo\
    \ \"a=($num - $mean); if (a < 0) a = -a; a\" | bc -l)\n    total_absolute_difference=$(echo\
    \ \"$total_absolute_difference + $absolute_difference\" | bc)\n  done\n  echo\
    \ \"$(echo \"$total_absolute_difference / $input_data_length\" | bc -l)\"", " \
    \   local input=($1)\n    local n=${#input[@]}\n    local mean=$(mean \"${input[@]}\"\
    )\n    local a=0\n    for i in \"${input[@]}\"; do\n        a=$(echo \"$a + abs($i\
    \ - $mean)\" | bc -l)\n    done\n    echo $(echo \"$a / $n\" | bc -l)", "    local\
    \ -r mean=$(mean $1)\n    # Get absolute difference between each element and mean\n\
    \    local diffs\n    for n in $1; do\n        diffs=\"$diffs $(calc \"abs($n\
    \ - $mean)\")\"\n    done\n    # Calculate the mean of this list of differences\n\
    \    mean $diffs", "\tlocal -a num_array\n\tlocal i mean sum\n\tIFS=' ' read -r\
    \ -a num_array <<< \"$1\"\n\tmean=$(echo ${num_array[@]} | awk '{sum=0; for(i=1;i<=NF;i++)\
    \ sum+=$i; print sum/NF}')\n\tfor i in \"${num_array[@]}\"; do\n\t\tsum=$(echo\
    \ \"$sum + abs($i - $mean)\" | bc -l)\n\tdone\n\techo \"$sum / $#\" | bc -l",
  "    echo $1 | awk '{\n        for (i=1; i<=NF; i++)\n            s += $i\n    \
    \    mean = s / NF\n        for (i=1; i<=NF; i++)\n            s += abs($i - mean)\n\
    \        print s / NF\n    }'", "  local mean=$(mean \"$@\")\n  local squared_sum=0\n\
    \  for x in $@; do\n    local squared_diff=$(echo \"$x - $mean\" | bc -l)\n  \
    \  squared_sum=$(echo \"$squared_sum + $squared_diff^2\" | bc -l)\n  done\n  local\
    \ num_x=$(echo \"$#\" | bc -l)\n  echo \"scale=5; sqrt($squared_sum / $num_x)\"\
    \ | bc -l", "  # http://stackoverflow.com/questions/5092111/\n  # calculate-pythons-mean-median-mode-and-range-from-a-list-of-ints\n\
    \  local mean=$(mean \"$@\")\n  local list=$(echo \"$@\" | tr ' ' '\\n')\n  local\
    \ sumsq=0\n  local n=0\n  while read number; do\n    sumsq=$(bc <<< \"$sumsq +\
    \ ($number - $mean)^2\")\n    n=$((n + 1))\n  done <<< \"$list\"\n  # http://stackoverflow.com/questions/13647437/\n\
    \  # how-to-get-decimal-numbers-after-the-float-number-division-in-bash\n  bc\
    \ <<< \"scale=3; sqrt($sumsq/$n)\"", "  local sum x_mean abs_delta abs_deltas\
    \ deltas x_i\n  x_mean=$(echo \"$1\" | awk '{x = 0; for (i = 1; i <= NF; i++)\
    \ x += $i; print x / NF}')\n  abs_deltas=\"\"\n  for x_i in $1; do\n    abs_delta=$(echo\
    \ | awk -v x_i=\"$x_i\" -v x_mean=\"$x_mean\" '{print sqrt((x_i - x_mean)^2)}')\n\
    \    abs_deltas=\"$abs_deltas $abs_delta\"\n  done\n  # Calculate mean of the\
    \ absolute deltas:\n  echo \"$abs_deltas\" | awk '{x = 0; for (i = 1; i <= NF;\
    \ i++) x += $i; print x / NF}'", "    local mean=$(average \"$1\")\n    local\
    \ total=0\n    for i in $1; do\n        total=$(python -c \"print($total + abs($i\
    \ - $mean))\")\n    done\n    python -c \"print($total / len(\\\"$1\\\".split('\
    \ ')))\"", "    # Get mean of elements in $1\n    x_mean=$(mean \"$1\")\n    #\
    \ Now calculate mean absolute difference\n    sum_absolute_deviation=$(\n    echo\
    \ \"$1\" | sed 's/ /\\n/g' |\n    while read x\n    do\n        echo \"($x-$x_mean)\"\
    \ | bc -l\n    done |\n    sed 's/-//g' |\n    mean)\n    echo \"$sum_absolute_deviation\"",
  "  # Find the mean\n  local mean=$(mean \"$1\")\n  # Get a list of absolute values\
    \ of differences between mean and input values\n  local abs_diffs=$(echo \"$1\"\
    \ | awk '{for (i=1; i<=NF; i++) {printf \"%s \", ( $i >= \"'\"$mean\"'\" ? $i\
    \ - \"'\"$mean\"'\" : \"'\"$mean\"'\" - $i );}}')\n  # Take the mean of this list\
    \ of absolute differences to get MAD\n  mean \"$abs_diffs\"", "    source \"$(dirname\
    \ \"${BASH_SOURCE[0]}\")/mean.sh\"\n    source \"$(dirname \"${BASH_SOURCE[0]}\"\
    )/absolute_deviation.sh\"\n    local average_abs_deviation\n    local values=$(echo\
    \ \"$1\" | tr ' ' '\\n')\n    local mean=$(mean \"$1\")\n    local abs_deviation\n\
    \    local sum=0.0\n    for value in $values; do\n        abs_deviation=$(absolute_deviation\
    \ \"$value\" \"$mean\")\n        sum=$(bc <<< \"$sum + $abs_deviation\")\n   \
    \ done\n    average_abs_deviation=$(bc <<< \"scale=4; $sum / $(echo \"$values\"\
    \ | wc -w)\")\n    echo \"$average_abs_deviation\"", "    if [ -z \"$1\" ]; then\n\
    \        echo \"mean_absolute_deviation() requires at least one parameter\"\n\
    \        exit 1\n    fi\n    local x_bar=$(mean \"$1\")\n    local sum=0\n   \
    \ local num_elements=0\n    local x_i\n    for x_i in $1; do\n        sum=$(bc\
    \ <<< \"$sum + abs($x_i - $x_bar)\")\n        num_elements=$((num_elements + 1))\n\
    \    done\n    if [ $num_elements -eq 0 ]; then\n        echo \"mean_absolute_deviation()\
    \ requires at least one parameter\"\n        exit 1\n    fi\n    bc <<< \"$sum\
    \ / $num_elements\"", "  local -r dataset=\"$1\"\n  local -r count=$(echo \"$dataset\"\
    \ | wc -w)\n  local -r mean=$(echo \"$dataset\" | awk '{for(i=1;i<=NF;i++) sum+=$i;\
    \ print sum/NF}')\n  echo \"$dataset\" | awk -v \"mean=$mean\" -v \"count=$count\"\
    \ '{\n    for(i=1;i<=NF;i++) {\n      sum+=abs($i-mean);\n    }\n    print sum/count;\n\
    \  }'", "    mean=$(echo \"$*\" | awk '{ SUM = 0; for (i=1; i<=NF; i++) SUM +=\
    \ $i; print SUM/NF }')\n    square_diff_sum=$(echo \"$*\" | awk -v mean=$mean\
    \ '{ SUM = 0; for (i=1; i<=NF; i++) SUM += ($i - mean)^2; print SUM/NF }')\n \
    \   echo $(echo \"$square_diff_sum\" | awk '{print sqrt($1)}')", "  local list=$1;\
    \ shift\n  # Work on a copy of the input list, so we don't modify it\n  local\
    \ list_copy=$list\n  # Calculate mean\n  local mean=$(mean $list_copy)\n  # Get\
    \ length of list\n  local list_length=$(count_list_elements $list_copy)\n  # Initialize\
    \ total\n  local total=0\n  # Iterate over list and sum absolute differences from\
    \ mean\n  for element in $list; do\n    local diff=$(echo \"$element - $mean\"\
    \ | bc -l)\n    local abs_diff=$(echo \"if ($diff < 0) $diff * -1 else $diff\"\
    \ | bc -l)\n    local total=$(echo \"$total + $abs_diff\" | bc -l)\n  done\n \
    \ # Divide total by length of list and print result\n  echo \"$total / $list_length\"\
    \ | bc -l", '    echo "$(python -c "import numpy; print numpy.mean(numpy.absolute(numpy.array($1)
    - numpy.mean(numpy.array($1))))")"', "  declare -a values=($1)\n  local sum=$(echo\
    \ ${values[@]} | awk '{ sum=0; for (i=1; i<=NF; i++) sum+=$i; print sum}')\n \
    \ local size=${#values[@]}\n  local mean=$(echo \"scale=4; $sum / $size\" | bc)\n\
    \  local absdiff_sum=0\n  for v in ${values[@]}; do\n    local absdiff=$(echo\
    \ \"scale=4; $v - $mean\" | bc)\n    absdiff_sum=$(echo \"scale=4; $absdiff_sum\
    \ + $absdiff\" | bc)\n  done\n  echo \"scale=4; $absdiff_sum / $size\" | bc",
  "    mean=$(average $1)\n    echo $1 | awk -v mean=$mean '{\n        for (i=1; i<=NF;\
    \ i++)\n            {print $i - mean}\n    }' | abs | average", "    if [ -z \"\
    $1\" ]; then\n        echo \"mean_absolute_deviation: Error: Please supply input\
    \ parameters.\" >&2\n        return 1\n    fi\n    data_mean=$(mean \"$1\")\n\
    \    data_mad=0\n    for el in $1; do\n        data_mad=$(echo \"$data_mad + $(echo\
    \ \"sqrt($el-$data_mean)\" | bc -l)\" | bc -l)\n    done\n    echo \"$(echo \"\
    $data_mad / $(echo \"$1\" | wc -w)\" | bc -l)\"", "\tlocal out=$(echo \"$@\" |\
    \ awk '{s=0;n=0; for (i=1;i<=NF;i++) {s=s+$i;n=n+1;} print s/n;}')\n\tlocal n_cells=$(echo\
    \ \"$@\" | awk '{n=0; for (i=1;i<=NF;i++) {n=n+1;} print n;}')\n\tfor x in $@;\
    \ do\n\t\t# abs(x - out)\n\t\tdx=$(awk \"BEGIN {print $x - $out;}\")\n\t\tdx=${dx#-}\n\
    \t\t# we have to use bc for floating point stuff\n\t\t# it's a pain, but I don't\
    \ want to switch to python for this just yet\n\t\tsum=$(echo \"scale=10; $sum\
    \ + $dx\" | bc)\n\tdone\n\techo \"scale=10; $sum / $n_cells\" | bc", "\tlocal\
    \ sum_of_abs_deviation=0.0\n\tlocal number_list=($1)\n\tlocal list_length=${#number_list[@]}\n\
    \tlocal mean=$(mean $1)\n\tfor i in $(seq 1 $list_length); do\n\t\tlocal this_value=${number_list[$((i-1))]}\n\
    \t\tlocal diff_from_mean=$(echo \"$this_value - $mean\" | bc -l)\n\t\tsum_of_abs_deviation=$(echo\
    \ \"$sum_of_abs_deviation + $diff_from_mean\" | bc -l)\n\tdone\n\techo $(echo\
    \ \"$sum_of_abs_deviation / $list_length\" | bc -l)", "  local array=($@)\n  local\
    \ mean=$(mean \"${array[@]}\")\n  local diffs=()\n  for elem in \"${array[@]}\"\
    ; do\n    local diff=$(echo \"$elem - $mean\" | bc -l)\n    if [[ $diff == -*\
    \ ]]; then\n      diff=${diff/-}\n    fi\n    diffs+=(\"$diff\")\n  done\n  echo\
    \ $(average \"${diffs[@]}\")", "  if [ $# -eq 0 ]; then\n    echo \"Insufficient\
    \ input arguments.\"\n    echo \"Usage: mean_absolute_deviation \\\"1.0 2.0 3.0\
    \ 4.0\\\"\"\n    return -1\n  fi\n  arr=($1)\n  mean=`mean $1`\n  if [ `echo \"\
    $mean < 0\" | bc` -eq 1 ]; then\n    echo \"Mean is less than 0.\"\n    return\
    \ -1\n  fi\n  sum=0\n  for elem in ${arr[@]}; do\n    diff=`echo \"$elem - $mean\"\
    \ | bc`\n    if [ `echo \"$diff < 0\" | bc` -eq 1 ]; then\n      sum=`echo \"\
    $sum + -1 * $diff\" | bc`\n    else\n      sum=`echo \"$sum + $diff\" | bc`\n\
    \    fi\n  done\n  mean_abs_dev=`echo \"$sum / ${#arr[@]}\" | bc`\n  echo $mean_abs_dev",
  "    # List of input numbers\n    local list=\"$1\"\n    # Mean of the list\n  \
    \  local mean=$(echo \"$list\" | mean)\n    # Calculate the absolute difference\
    \ between each number and the mean\n    # and calculate the mean of those\n  \
    \  local delta=$(echo \"$list\" | awk '{print $1 - '\"$mean\"'}' | \\\n      \
    \  awk '{if ($1<0) $1=-$1}1' | \\\n        awk '{sum+=$1}END{print sum/NR}')\n\
    \    echo \"$delta\"", "    local list=\"$1\"\n    echo \"$list\" | xargs -n1\
    \ | awk '{ sum += $1; n++ } END { if (n > 0) print sum / n; }' | xargs -I{} echo\
    \ \"$list\" | xargs -n1 | awk -v mean={} '{ print $1 - mean }' | xargs -n1 | awk\
    \ '{ sum += $1; n++ } END { if (n > 0) print sum / n; }' | xargs -I{} echo \"\
    scale=2; {}\" | bc", "    # Compare each element to the mean by subtracting\n\
    \    # and take the absolute value of each.\n    list=$(for x in $1; do echo \"\
    $(echo $x - $(mean \"$1\") | bc)\"; done | sed 's/^-//')\n    # Now that each\
    \ element is the difference between\n    # the element and the mean, take the\
    \ mean of that.\n    echo $(mean \"$list\")", "    local numbers=( $(echo $1)\
    \ )\n    local mean=$(echo ${numbers[@]} | awk '{sum=0; for(i=1;i<=NF;i++) sum+=$i;\
    \ print sum/NF}')\n    local mad=0\n    for n in ${numbers[@]}; do\n        local\
    \ diff=$(echo \"$n - $mean\" | bc -l)\n        local diff_abs=$(echo \"if ($diff\
    \ >= 0) $diff else -$diff\" | bc -l)\n        mad=$(echo \"$mad + $diff_abs\"\
    \ | bc -l)\n    done\n    mad=$(echo \"$mad / ${#numbers[@]}\" | bc -l)\n    echo\
    \ \"$mad\"", "  local mean=$(mean $1)\n  local squared_sum=0.0\n  for element\
    \ in $1; do\n    squared_sum=$(echo \"$squared_sum + ($element - $mean)^2\" |\
    \ bc -l)\n  done\n  echo \"scale=4; sqrt($squared_sum / $#)\" | bc -l"]
stop_tokens:
- "\n}"
