language: sh
name: HumanEval_41_car_race_collision
results:
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # The left-to-right cars are the integers\
    \ in [1, n]\n  # The right-to-left cars are [1, n] in reverse order\n  # The left-to-right\
    \ cars have to drive n units; the right-to-left cars have to drive 1 unit.\n \
    \ # So the left-to-right cars are 1/n the speed of the right-to-left cars.\n \
    \ #\n  # The left-to-right cars start at 0, 1, 2, ..., n-1; the right-to-left\
    \ cars start at n, n-1, ..., 1.\n  #\n  # We want to know the number of left-to-right\
    \ cars that pass the position of a right-to-left car\n  # before the right-to-left\
    \ car passes that position.  The right-to-left car passes that position\n  # after\
    \ the right-to-left car has traveled 1 unit.  The left-to-right car passes the\
    \ position\n  # after the left-to-right car has traveled n units.  This means\
    \ the left-to-right car passes\n  # the position after n-1 units; otherwise, the\
    \ right-to-left car would have passed the position.\n  #\n  # The left-to-right\
    \ car with value x passes the position after x-1 units.\n  # The right-to-left\
    \ car with value x passes the position after x-1 units.\n  #\n  # That is, the\
    \ positions at which the cars pass the position is from 1 to n-1, inclusive.\n\
    \  # The value of the left-to-right car at the position is x if x-1 is one of\
    \ these values.\n  # The value of the right-to-left car at the position is x if\
    \ x-1 is one of these values.\n  #\n  # Of these, there are x-1 left-to-right\
    \ cars, and n-x+1 right-to-left cars.\n  # We want to find the number of cars\
    \ that pass the position.\n  #\n  # The left-to-right cars are the values in [1,\
    \ n].\n  # The right-to-left cars are the values in [1, n].\n  #\n  # The left-to-right\
    \ cars have\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi85uv5qo.sh: line 40: syntax error near unexpected token `}''

    /tmp/tmpi85uv5qo.sh: line 40: `}''

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local hits=0\n    for\
    \ ((i=1; i<n; i++)); do\n        for ((j=i+1; j<=n; j++)); do\n            if\
    \ [ $((i % j)) -eq 0 ]; then\n                ((hits++))\n            fi\n   \
    \     done\n    done\n    echo $hits\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n\n    # If the number of\
    \ cars is odd, then there is a single car moving in\n    # both directions (i.e.\
    \ left to right and right to left).  Every car\n    # collides with every other\
    \ car; hence, the number of collisions is\n    # (n-1)+(n-3)+(n-5)+...+3+1.  We\
    \ can write this as n(n-1)/2.\n    if [ $(( n % 2 )) -eq 1 ]; then\n        echo\
    \ $(( n * (n - 1) / 2 ))\n        return\n    fi\n\n    # If the number of cars\
    \ is even, then there are two cars moving in both\n    # directions.  Every car\
    \ collides with every other car except one;\n    # hence, the number of collisions\
    \ is\n    # (n-2)+(n-4)+(n-6)+...+4+2\n    # = (n^2-n-4)/2\n    echo $(( (n *\
    \ n - n - 4) / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local num_cars_l2r=$1\n  local num_cars_r2l=$1\n\
    \  local ret_val=0\n  local i=0\n  local j=0\n  local dist_l2r=0\n  local dist_r2l=0\n\
    \  for ((i=0; i<num_cars_l2r; i++)); do\n    ((dist_l2r += i))\n  done\n  for\
    \ ((j=0; j<num_cars_r2l; j++)); do\n    ((dist_r2l += j))\n  done\n  ((ret_val\
    \ = dist_l2r - dist_r2l))\n  echo $ret_val\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n\n  check_num \"$1\" 'n' || return\
    \ $?\n  local half_n=$((n / 2))\n  local collisions=$((half_n * half_n))\n  if\
    \ ((n % 2 == 1)); then\n    collisions=$((collisions + half_n))\n  fi\n  echo\
    \ \"$collisions\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppgz97mo6.sh: line 14: check_num: command not found

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  i=0\n  j=0\n  c=0\n  while read f; do\n\
    \    while read g; do\n      if [ $f -eq $g ]; then\n        c=$((c+1))\n    \
    \  fi\n      j=$((j+1))\n    done < <(seq 1 $1)\n    i=$((i+1))\n  done < <(seq\
    \ 1 $1)\n  echo \"$c\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 0
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local i=0\n    local j=0\n    local\
    \ n=$1\n    local collision=0\n    for (( i=0; i<$n; i++ ))\n    do\n        for\
    \ (( j=0; j<$n; j++ ))\n        do\n            collision=$(( $collision + 1 ))\n\
    \        done\n    done\n    echo $collision\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo $(( ($1 - 1) * $1 / 2 ))\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 0
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [ \"$1\" -lt 0 ]; then\n    echo \"\
    error: $1 is not a non-negative integer\" >&2\n    return\n  fi\n  echo \"$1\"\
    \ | awk '{\n    if ($1 < 0) {\n      print \"error: \" $1 \" is not a non-negative\
    \ integer\" > \"/dev/stderr\"\n      exit\n    }\n    print $1 * $1\n  }'\n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # We don't need to check numbers below\
    \ 1 as our race can't\n    # have less than 2 cars.\n    if [ $1 -lt 1 ]; then\n\
    \        return\n    fi\n\n    # To achieve linear time complexity, we are going\
    \ to use 2 arrays.\n    # The first array records the location of left-to-right\
    \ cars, while\n    # the second array records the location of right-to-left cars.\n\
    \    # As we iterate through the numbers between 1 and $1, we are going to\n \
    \   # add the current number to the first array, iff the current number is\n \
    \   # odd.  Otherwise, we add the current number to the second array.\n    # At\
    \ each iteration, we are going to check whether the current number\n    # has\
    \ collided with an element in the other array.  If it has, we are\n    # going\
    \ to increment our collision count.\n    #\n    # We don't know the size of our\
    \ array.  So, we are going to\n    # use associative arrays in bash.  Note that\
    \ the location of the\n    # cars is our array index.\n    local left_to_right_cars=()\n\
    \    local right_to_left_cars=()\n    local collisions=0\n\n    for i in $(seq\
    \ 1 $1); do\n        if [ $((i % 2)) -eq 1 ]; then\n            left_to_right_cars[$i]=$i\n\
    \        else\n            right_to_left_cars[$i]=$i\n        fi\n    done\n\n\
    \    for i in $(seq 1 $1); do\n        if [ $((i % 2)) -eq 1 ]; then\n       \
    \     if [ ! -z \"${right_to_left_cars[$i]}\" ]; then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        else\n            if [ ! -z \"${left_to_right_cars[$i]}\"\
    \ ]; then\n                collisions=$((collisions + 1))\n            fi\n  \
    \      fi\n    done\n\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # There are only two cases where cars\
    \ collide.\n    # (1) Two cars happen to be at the same position at the same time.\n\
    \    # (2) Two cars happen to be at the exact same speed, and they are moving\
    \ in opposite directions.\n    #\n    # Case (1) is easy to detect since we can\
    \ model time as step numbers, so\n    # a collision at time $t is equivalent to\
    \ having two cars at the same position\n    # at the same step number.\n    #\n\
    \    # Case (2) is tricky to detect since we don't have access to the speed of\
    \ the cars,\n    # only their positions.  However, there is a nice approach:\n\
    \    #\n    # Suppose we take the positions of two cars and sort them as a pair.\n\
    \    # (a, b) and (c, d) are two pairs.  If a+b = c+d, then the pair (a, b) is\
    \ a collision.\n    #\n    # The beauty of this is that it works for the case\
    \ of a collision between a \"left-to-right\"\n    # car and a \"right-to-left\"\
    \ car.  If a car is moving left to right, then its position\n    # will be increasing\
    \ monotonically.  If a car is moving right to left, then its position\n    # will\
    \ be decreasing monotonically.  So take the cars at positions (a, b) and (c, d)\n\
    \    # and arrange them as a pair.  The left car is moving left to right, so its\
    \ position increases\n    # and is represented by the first number in the pair.\
    \  The right car is moving right to left,\n    # so its position decreases and\
    \ is represented by the second number in the pair.\n    #\n    # If a car moves\
    \ from position 2 to position 4, then it is represented by the pair (2, 4).\n\
    \    # If a car moves from position 4 to position 2, then it is represented by\
    \ the pair (4, 2).\n    # If a car moves from position 2 to position 3, then it\
    \ is represented by the pair (2, 3).\n    # If a car moves from position 3 to\
    \ position 2, then it is represented by the pair (3, 2).\n    #\n    # In all\
    \ cases, the left car (moving left to right\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp588s8g4b.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmp588s8g4b.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # write your code here\n    if [[ $1\
    \ -lt 0 ]]; then\n        echo \"Error: invalid number\"\n        return 1\n \
    \   fi\n    echo $(( $1*($1-1)/2 ))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  collision_count=0\n  num_cars=$1\n  left_to_right=()\n\
    \  right_to_left=()\n  time=0\n  while (( num_cars > 0 )) ; do\n    if (( $RANDOM\
    \ % 2 == 0 )) ; then\n      left_to_right+=( \"$time\" )\n    else\n      right_to_left+=(\
    \ \"$time\" )\n    fi\n    (( num_cars -= 1 ))\n    (( time += 1 ))\n  done\n\
    \  for right_car in \"${right_to_left[@]}\" ; do\n    for left_car in \"${left_to_right[@]}\"\
    \ ; do\n      if (( right_car < left_car )) ; then\n        (( collision_count\
    \ += 1 ))\n      fi\n    done\n  done\n  echo $collision_count\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local retval=1 # 0 if call is incorrect\n\
    \    (( $# == 1 )) || return $retval\n    local input=$1\n    [[ $input =~ ^[0-9]+$\
    \ ]] || return $retval\n    (( input > 0 )) || return $retval\n    local output=$((input*(input-1)/2))\n\
    \    echo \"$output\"\n    return 0\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n   local n=$1\n   # let n be the number\
    \ of cars in each direction\n\n   # let L[i] be the position of the ith car going\
    \ from left to right\n   # let R[i] be the position of the ith car going from\
    \ right to left\n   # So L[1] and R[1] are the cars closest to each other, and\
    \ they will collide\n   # Let's compute the position of L[i] and R[i]\n   # and\
    \ compute the number of collisions in O(n) time\n   # Car i position, going right\
    \ to left, starts at -n+i-1\n   # Car i position, going left to right, starts\
    \ at n-i\n   #\n   # To compute the number of collisions, we need to count the\
    \ number of pairs (L[i], R[i])\n   # such that L[i] == R[i]\n   # Another way\
    \ to say that is the number of pairs such that R[i] == -L[i]\n   # So we compute\
    \ n-1+1 pairs R[i], -L[i], i=1..n\n   # Compute the number of collisions in O(n)\
    \ time:\n   # Step 1: Sort R[i] in O(n log n) time\n   # Step 2: Using a binary\
    \ search, find the number of -L[i] that are less than R[i], for each i\n   # That's\
    \ the number of cars that are on the left side of R[i], i.e. the number of\n \
    \  # cars that will collide with R[i]\n   # Total time: O(n log n)\n\n   # Step\
    \ 1: sort the R[i] array in O(n log n) time\n   local -a R=()\n   for ((i=1; i<=n;\
    \ i++)); do\n      R[i]=-n+i-1\n   done\n   # We can run a quick sort on the R\
    \ array\n   _quicksort_helper R\n\n   # Step 2: use binary search to find the\
    \ number of -L[i] that are less than R[i], for each i\n   local num_collisions=0\n\
    \   for ((i=1; i<=n; i++)); do\n      L[\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmplj74rtiv.sh: line 46: unexpected EOF while looking for matching
    `]''

    /tmp/tmplj74rtiv.sh: line 63: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -eq 1 ]]; then\n        echo\
    \ 0\n    else\n        # n=1, n=2 have no collisions\n        echo $(( (1+$1)*$1/2\
    \ - 2 ))\n    fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # TODO\n  echo \"TODO\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=\"$1\"\n  local collisions=0\n\
    \  local i=0\n  local car_left_at\n  local car_right_at\n  local zeroes\n\n  #\
    \ Break down $n into an array that contains each digit of $n.\n  # For example,\
    \ if $n is 12345, the array will contain {1, 2, 3, 4, 5}.\n  read -r -a array\
    \ <<< \"$(echo \"$n\" | sed -e 's/\\(.\\)/\\1 /g')\"\n\n  while [ \"$i\" -lt \"\
    ${#array[@]}\" ]; do\n    # Find out the position of the leftmost car going left\
    \ to right.\n    car_left_at=$(echo \"${array[i]}\" | sed -e 's/\\(.\\)/\\1 /g'\
    \ | awk '{print $1}')\n\n    # Find out the position of the rightmost car going\
    \ right to left.\n    car_right_at=$(echo \"${array[i]}\" | sed -e 's/\\(.\\)/\\\
    1 /g' | awk '{print $2}')\n\n    # The number of collisions is the sum of the\
    \ position of the leftmost car\n    # going left to right and the position of\
    \ the rightmost car going right to left.\n    collisions=$((collisions + car_left_at\
    \ + car_right_at))\n\n    # Some digits are 0.  We can ignore those.\n    if [\
    \ \"$car_left_at\" -eq 0 ] && [ \"$car_right_at\" -eq 0 ]; then\n      # This\
    \ digit is 0.  Ignore it.\n      continue\n    else\n      # This digit is a number\
    \ between 1 and 9.  Do not ignore it.\n      # Show some progress to the user.\n\
    \      echo -n \"${car_left_at}${car_right_at} \"\n    fi\n\n    # Add leading\
    \ zeroes.\n    zeroes=$(echo $((10 ** (i - 1))))\n    car_left_at=$(printf \"\
    %0$zeroes\"\"d\" \"$car_left_at\")\n    car_right_at=$(printf \"%0$zeroes\"\"\
    d\" \"$car_right_at\")\n\n\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4zp48ap0.sh: line 51: syntax error near unexpected token `}''

    /tmp/tmp4zp48ap0.sh: line 51: `}''

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tif [[ $1 -le 0 ]]; then\n\t\techo \"error:\
    \ car_race_collision\"\n\t\treturn 1\n\tfi\n\techo \"$(expr $1 \\* \\( $1 - 1\
    \ \\) / 2)\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # $1 is an integer\n    number_of_divisors()\
    \ {\n        # Returns the number of positive integers that evenly divide $1\n\
    \        # Be careful that this function may cause a divide by zero error\n  \
    \      # if $1 is zero\n        local -i count=0\n        local -i j=1\n     \
    \   local -i parameter=$1\n        while [ $j -le $parameter ]\n        do\n \
    \           if [ $((parameter % j)) -eq 0 ]\n            then\n              \
    \  count=$((count + 1))\n            fi\n            j=$((j + 1))\n        done\n\
    \        echo $count\n    }\n    local -i i=0\n    local -i answer=0\n    local\
    \ -i parameter=$1\n    while [ $i -lt $parameter ]\n    do\n        i=$((i + 1))\n\
    \        answer=$((answer + number_of_divisors(i)))\n    done\n    echo $answer\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbobvf7iq.sh: line 37: answer + number_of_divisors(i): syntax error
    in expression (error token is "(i)")

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal n=$1\n\tlocal collisions=0\n\tlocal\
    \ i=0\n\tlocal j=0\n\twhile (( i < n )); do\n\t\twhile (( j < n )); do\n\t\t\t\
    (( ++collisions ))\n\t\t\t(( ++j ))\n\t\tdone\n\t\t(( ++i ))\n\tdone\n\techo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local N=$1\n  for ((i=1; i<=N; i++));\
    \ do\n    for ((j=i+1; j<=N; j++)); do\n      echo $i $j\n    done\n  done | wc\
    \ -l\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # let's generate the two lists of cars:\n\
    \    # each has a random number between 1 and 10\n    # (this is just to simplify\
    \ the input; normally this would be\n    # the speed of each car)\n    #\n   \
    \ # example:\n    #   ./car_race_collision.sh 100\n    # will have the output:\n\
    \    #   544\n    #\n    # that is, there are 544 collisions with 100 cars\n \
    \   # on each side\n    #\n    # using awk's printf function, we can format the\
    \ numbers\n    # with the '0' character, so the numbers are left-padded\n    #\
    \ with zeros.  This is helpful for sorting.\n    #\n    # example:\n    #   ./car_race_collision.sh\
    \ 2\n    #   001 02 001 02\n    #\n    # this tells us that the speeds of the\
    \ two cars\n    # going left to right are 1 and 2; the speeds of the two cars\n\
    \    # going right to left are 1 and 2.\n    #\n    # The trick here is to use\
    \ sed (stream editor) to swap\n    # all the numbers that are great than 5.\n\
    \    # We use sed's replacement command 's/[characters]/[replacement]/g'\n   \
    \ # to replace the [characters] with [replacement] globally\n    #\n    # Example:\n\
    \    #   \"02\" becomes \"20\"\n    #\n    # Hence, the output will be sorted\
    \ by the second number\n    # so that we can then use comm command to get the\
    \ number\n    # of collisions\n    #\n    seq -f \"%02g\" 1 10 | shuf | head -n\
    \ $1 |\\\n        awk '{printf \"%s \", $1}' |\\\n        sed 's/6/9/g;s/7/9/g;s/8/9/g;s/9/6/g'\
    \ |\\\n        awk '{printf \"%s \", $1}' |\\\n        sed 's/4/7/g;s/5/7/g;s/6/7/g;s/7/4/g'\
    \ |\\\n        awk '{printf \"%s \", $1}' |\\\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpawir3sk0.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmpawir3sk0.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local number_of_cars=${1:-1}\n  local\
    \ -i number_of_collisions=0\n  local -i lr_car_index=0\n  local -i rl_car_index=0\n\
    \  local -i array_size=0\n  local -i lr_car_position=0\n  local -i rl_car_position=0\n\
    \  if (( number_of_cars == 0 )); then\n    number_of_collisions=0\n  else\n  \
    \  # Left to right cars array\n    array_size=$(( number_of_cars * 2 ))\n    local\
    \ -a lr_cars=( $(shuf -i 1-$(( number_of_cars * number_of_cars )) -n $array_size)\
    \ )\n    # Right to left cars array\n    local -a rl_cars=( $(shuf -i 1-$(( number_of_cars\
    \ * number_of_cars )) -n $array_size) )\n    # Let's determine the initial position\
    \ of the first car from each array\n    lr_car_position=${lr_cars[0]}\n    rl_car_position=${rl_cars[0]}\n\
    \    # Now we can start checking positions of the cars\n    for (( i=1; i<$array_size;\
    \ i++ )); do\n      if (( lr_car_position < rl_car_position )); then\n       \
    \ # The left to right car is still ahead, so we increase its index\n        lr_car_index=$((\
    \ lr_car_index + 1 ))\n        lr_car_position=${lr_cars[$lr_car_index]}\n   \
    \   elif (( lr_car_position > rl_car_position )); then\n        # The right to\
    \ left car is still ahead, so we increase its index\n        rl_car_index=$((\
    \ rl_car_index + 1 ))\n        rl_car_position=${rl_cars[$rl_car_index]}\n   \
    \   else\n        # When the cars from both sides have the same position, it's\
    \ a collision\n        number_of_collisions=$(( number_of_collisions + 1 ))\n\
    \        # Increase the index for both arrays\n        lr_car_index=$\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptk636ppd.sh: line 46: syntax error near unexpected token `}''

    /tmp/tmptk636ppd.sh: line 46: `}''

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    awk 'BEGIN { for (i=1; i<='$1'; i++)\
    \ cars[i] = i; }\n    {\n        for (i=1; i<='$1'; i++)\n            for (j=1;\
    \ j<='$1'; j++)\n                if (i == cars[j])\n                    pos[i]\
    \ = '$1'+1-j;\n    }\n    END {\n        for (i=1; i<='$1'; i++)\n           \
    \ for (j=1; j<='$1'; j++)\n                if (i != j && pos[i] == pos[j])\n \
    \                   count++;\n        print count/2;\n    }' /dev/null\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local -a left_to_right\n\
    \    local -a right_to_left\n    local -i i\n    for ((i=0; i<n; i++)); do\n \
    \       left_to_right[i]=$RANDOM\n        right_to_left[i]=$RANDOM\n    done\n\
    \    left_to_right=($(printf \"%s\\n\" \"${left_to_right[@]}\" | sort -n))\n \
    \   right_to_left=($(printf \"%s\\n\" \"${right_to_left[@]}\" | sort -n))\n  \
    \  for ((i=0; i<n; i++)); do\n        if [[ ${left_to_right[i]} -gt ${right_to_left[i]}\
    \ ]]; then\n            echo $((i+1))\n            return\n        fi\n    done\n\
    \    echo 0\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [[ $1 -lt 0 ]]; then\n    echo 0\n\
    \  else\n    echo $1\n  fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t# There are no collisions in the trivial\
    \ case where there are no cars\n\tif [ \"$1\" -eq 0 ]; then\n\t\techo 0\n\t\t\
    return\n\tfi\n\n\tif [ \"$1\" -lt 0 ]; then\n\t\techo \"Must pass a positive integer\"\
    \n\t\treturn\n\tfi\n\n\t# If n = 1, there is no collision (left car passes the\
    \ right car)\n\t# If n = 2, there is no collision (right car passes the left car)\n\
    \t# If n = 3, there is a collision (left car passes the right car, and\n\t# then\
    \ the left car collides with the middle car)\n\t# If n = 4, there is a collision\
    \ (right car passes the left car, and\n\t# then the right car collides with the\
    \ middle car)\n\t# If n = 5, there are two collisions (left car passes the right\
    \ car, and\n\t# then the left car collides with the third car, and then the middle\
    \ car\n\t# collides with the fourth car)\n\t# If n = 6, there are two collisions\
    \ (right car passes the left car, and\n\t# then the right car collides with the\
    \ third car, and then the middle car\n\t# collides with the fourth car)\n\t# If\
    \ n = 7, there are three collisions (left car passes the right car, and\n\t# then\
    \ the left car collides with the third car, and then the middle car\n\t# collides\
    \ with the fourth car, and then the middle car collides with the\n\t# fifth car)\n\
    \t# If n = 8, there are three collisions (right car passes the left car, and\n\
    \t# then the right car collides with the third car, and then the middle car\n\t\
    # collides with the fourth car, and then the middle car collides with the\n\t\
    # fifth car)\n\t# If n = 9, there are four collisions (left car passes the right\
    \ car, and\n\t# then the left car collides with the third car, and then the middle\
    \ car\n\t# collides with the fourth car, and then the middle car collides with\
    \ the\n\t# fifth car, and then the middle car collides with the sixth car)\n\t\
    # If n = 10, there are four collisions (right car passes the left car, and\n\t\
    # then\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    python -c \"print(int(bin(~int($1))[2:],2))\"\
    \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n\
    ValueError: invalid literal for int() with base 2: 'b11'\n"
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n   #Check if 1 argument\n   if (( $# !=\
    \ 1 )); then\n      echo \"Usage: $0 <integer>\"\n      return 1\n   fi\n\n  \
    \ #Check if positive integer\n   if !(( $1 >= 0 )) 2>/dev/null; then\n      echo\
    \ \"Error: $1 is not a positive integer\"\n      return 1\n   fi\n\n   echo \"\
    $1\" | grep -q \"^[0-9]*$\"\n   if (( $? == 1 )); then\n      echo \"Error: $1\
    \ is not a positive integer\"\n      return 1\n   fi\n\n   #init variables\n \
    \  speed=$1\n   collision=0\n   halfSpeed=$(( $speed / 2 ))\n\n   #loop from 0\
    \ to halfSpeed\n   for (( i=0; i<=$halfSpeed; i++ )); do\n      collision=$((\
    \ $collision + $i * 2 ))\n   done\n\n   echo \"$collision\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local CARS=()\n  local CAR_DIR=()\n  local\
    \ CAR_START=()\n  local CAR_END=()\n  local CAR_INDEX=()\n  local CAR_INDEX_SORTED=()\n\
    \  local CAR_POS=()\n  local LOCAL_DEBUG=0\n  local LOCAL_CARS\n  local LOCAL_START\n\
    \  local LOCAL_END\n  local LOCAL_DIR\n  local LOCAL_POS\n  local LOCAL_CAR_INDEX\n\
    \  local LOCAL_CAR_INDEX_SORTED\n  local LOCAL_NUM_POSITIONS\n  local LOCAL_DEBUG=0\n\
    \  local LOCAL_NUM_COLLISIONS=0\n  local LOCAL_DISTANCE_RUN\n  local LOCAL_CAR\n\
    \  local LOCAL_DIR_CAR\n  local LOCAL_i\n  local LOCAL_j\n  local LOCAL_K\n  local\
    \ LOCAL_DEBUG_OUTPUT\n  if [ \"$1\" -eq 0 ]; then\n    echo 0\n    return 0\n\
    \  fi\n  if [ \"$1\" -lt 0 ]; then\n    echo \"Invalid input: $1\"\n    return\
    \ 1\n  fi\n  # Initialize cars\n  for (( i=0; i<$1; i++ )); do\n    CARS[$i]=$i\n\
    \    # A car can be going left to right or right to left\n    if [ $((RANDOM%2))\
    \ -eq 0 ]; then\n      CAR_DIR[$i]=-1\n    else\n      CAR_DIR[$i]=1\n    fi\n\
    \    # A car starts at a random position\n    CAR_START[$i]=$((RANDOM%100))\n\
    \    # A car ends at a random position\n    CAR_END[$i]=$((RANDOM%100))\n    #\
    \ Sort according to start position\n    CAR_INDEX[$i]=$i\n    CAR_INDEX_SORTED[$i]=$i\n\
    \  done\n  # Sort cars according to start position\n  array_sort_asc CAR_START\
    \ CAR_INDEX\n  for (( i=0; i<$1; i++ )); do\n    CAR_INDEX_\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0qx8apsp.sh: line 67: syntax error near unexpected token `}''

    /tmp/tmp0qx8apsp.sh: line 67: `}''

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n   local ncars=${1?}\n   if (( ncars <=\
    \ 1 )); then\n      echo \"0\"\n   else\n      echo \"$(( (ncars-1) * ncars /\
    \ 2 ))\"\n   fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  num_cars=$1\n\n  # The function is called\
    \ recursively.  The left-to-right cars are numbered 0, 1, ..., n-1.\n  # The right-to-left\
    \ cars are numbered 0, 1, ..., n-1.  The function is called with\n  # the argument\
    \ \"$num_cars $cur_left_car $cur_right_car\".\n  #\n  # base case:\n  # - if $cur_left_car\
    \ == n, there is no more left-to-right car to inspect;\n  # - if $cur_right_car\
    \ == n, there is no more right-to-left car to inspect.\n  #\n  # recursive case:\n\
    \  # - if $cur_left_car < $cur_right_car, the current left-to-right car is\n \
    \ #   \"to the left\" of the current right-to-left car; there is no collision\
    \ at the current\n  #   position.  The solution is the solution of the problem\
    \ with one more left-to-right car.\n  # - if $cur_left_car > $cur_right_car, the\
    \ current left-to-right car is\n  #   \"to the right\" of the current right-to-left\
    \ car; there is a collision at the current\n  #   position.  The solution is the\
    \ solution of the problem with one more right-to-left car.\n  # - if $cur_left_car\
    \ == $cur_right_car, then no matter which car we move, the outcome is the same.\n\
    \  #   Therefore, the solution is the solution of the problem with one more left-to-right\
    \ car plus\n  #   the solution of the problem with one more right-to-left car.\n\
    \  #\n  # Note that the size of the problem decreases.  Therefore, this is a valid\
    \ recursive function.\n  recurse() {\n    (( \"$#\" != 3 )) && { echo \"Internal\
    \ error: wrong number of arguments $# != 3.\" >&2; exit 1; }\n    num_cars=$1\n\
    \    cur_left_car=$2\n    cur_right_car=$3\n\n    if (( $cur_left_car == $num_cars\
    \ )) || (( $cur_right_car == $num_cars\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6j6s3w_e.sh: line 41: unexpected EOF while looking for matching
    `)''

    /tmp/tmp6j6s3w_e.sh: line 58: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Generate a random list of $1 integers\
    \ between -100 and 100\n  for i in $(seq 1 $1); do\n    echo $(( $RANDOM % 200\
    \ - 100 ))\n  done | sort\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  n=$1\n  # Your code goes here\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i=0\n  local j=0\n\
    \  local collisions=0\n  # Loop to find the car that is moving from left to right\
    \ and is closest to the middle\n  for (( i=0; i<n; i++ ))\n  do\n    # Loop to\
    \ find the car that is moving from right to left and is closest to the middle\n\
    \    for (( j=0; j<n; j++ ))\n    do\n      # If the two cars are closest to the\
    \ middle, they will collide.\n      if [ $i -eq $j ]\n      then\n        collisions=$((collisions+1))\n\
    \      fi\n    done\n  done\n  echo \"$collisions\"\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  declare -i n=$1\n  declare -i collisions=0\n\
    \  declare -i pos=0\n  declare -i step=1\n  for i in $(seq 1 $n); do\n    if [\
    \ $((pos+step)) -eq 0 ]; then\n      collisions=$((collisions+1))\n    fi\n  \
    \  pos=$((pos+step))\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    echo $((n * (n - 1)\
    \ / 2))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local sum\n  # Create and expand the two\
    \ sequences.\n  seq -s' ' 1 \"$1\"\n  seq -s' ' \"$1\" -1 1\n  # Use $IFS as a\
    \ separator to paste the two sequences.\n  IFS=$' ' paste -d' ' - <(\n    seq\
    \ -s' ' 1 \"$1\"\n  ) <(\n    seq -s' ' \"$1\" -1 1\n  ) | {\n    # Add up the\
    \ products.\n    sum=0\n    while read -r left right; do\n      (( sum += left\
    \ * right ))\n    done\n    echo \"$sum\"\n  }\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660023548
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ \"$1\" -eq 0 ]; then\n        echo\
    \ 0\n    else\n        local -i tmp=0\n        while read -r n; do\n         \
    \   ((tmp+=n))\n        done < <(car_race_collision \"$(( $1 - 1 ))\")\n     \
    \   echo \"$tmp\"\n    fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    if [[ ! $n =~ ^[0-9]+$\
    \ ]]; then\n        echo \"ERROR: $n is not an integer\"\n        return 1\n \
    \   fi\n    if (( n == 0 )); then\n        echo 0\n        return 0\n    fi\n\
    \    echo $((n-1))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tif [[ $1 -le 1 ]]; then\n\t\techo 0\n\t\
    else\n\t\techo $(( $1 * $(( $1 - 1 )) / 2 ))\n\tfi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    echo \"$(($n*$(($n-1))/2))\"\
    \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # There are multiple solutions to this\
    \ problem.  Here are some:\n    # A)  We ignore all cars except the one at the\
    \ absolute middle of the road.\n    #     This car must collide with the other\
    \ car at the absolute middle of the road.\n    #     This solution is O(1) in\
    \ time and O(1) in space.\n    # B)  We sort the cars and pairs of adjacent cars\
    \ will collide.\n    #     This solution is O(nlogn) in time and O(n) in space.\n\
    \    # C)  We create two queues, one for the cars going left to right and one\
    \ for the cars\n    #     going right to left.  We merge these two queues.  If\
    \ the left-to-right car is\n    #     immediately followed by a right-to-left\
    \ car, they will collide.\n    #     This solution is O(n) in time and O(n) in\
    \ space.\n    # D)  We create two queues, one for the cars going left to right\
    \ and one for the cars\n    #     going right to left.  We merge these two queues.\
    \  If the left-to-right car is\n    #     immediately followed by a right-to-left\
    \ car, we remove that pair from the queue.\n    #     If the left-to-right car\
    \ is not immediately followed by a right-to-left car,\n    #     we remove the\
    \ left-to-right car from the queue.  Repeat until the queue is empty.\n    # \
    \    The result is that all left-to-right cars that collide with right-to-left\
    \ cars\n    #     will be removed, so the remaining cars form a queue of left-to-right\
    \ cars that\n    #     did not collide with any right-to-left cars.  The number\
    \ of such cars is the result.\n    #     This solution is O(n) in time and O(n)\
    \ in space.\n    # E)  We use the fact that we have n cars driving left to right\
    \ and n cars driving right to left.\n    #     This means that the median of the\
    \ left-to-right cars is the same as the median of the right-to-left cars.\n  \
    \  #     The median of the left-to-right cars is the car in the middle, since\
    \ there are an even number of\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpu54es8i3.sh: line 35: syntax error near unexpected token `}''

    /tmp/tmpu54es8i3.sh: line 35: `}''

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if (( $1 == 0 ))\n    then\n       \
    \ echo \"No car in the race\"\n        return 0\n    fi\n    if (( $1 < 0 ))\n\
    \    then\n        echo \"Please provide a positive integer\"\n        return\
    \ 0\n    fi\n    echo $(( $1 * ($1 - 1) / 2 ))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  n=$1\n\n  # For n=1, 0 collisions\n  if\
    \ [[ n -eq 1 ]]; then\n    echo 0\n    return\n  fi\n\n  # For n=2, 1 collision\n\
    \  if [[ n -eq 2 ]]; then\n    echo 1\n    return\n  fi\n\n  # For n=3, 3 collisions\n\
    \  if [[ n -eq 3 ]]; then\n    echo 3\n    return\n  fi\n\n  # For n=4, 6 collisions\n\
    \  if [[ n -eq 4 ]]; then\n    echo 6\n    return\n  fi\n\n  # For n=5, 10 collisions\n\
    \  if [[ n -eq 5 ]]; then\n    echo 10\n    return\n  fi\n\n  # For n=6, 15 collisions\n\
    \  if [[ n -eq 6 ]]; then\n    echo 15\n    return\n  fi\n\n  # I noticed a pattern,\
    \ so I made a function to calculate the number of collisions.\n  # The function\
    \ is simple: \n  # It takes the number of cars and multiplies it by the number\
    \ of cars-1, then divides it by 2.\n  echo \"$((($1 * ($1 - 1)) / 2))\"\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal n=\"$1\"\n\tlocal collisions=0\n\
    \tlocal i=0\n\tfor ((i=0; i<n; i++)); do\n\t\tcollisions=$((collisions + i))\n\
    \tdone\n\techo \"$collisions\"\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    # let's first simulate\
    \ the cars going to the right\n    local pos_x=0\n    local prev_pos_x=-1\n  \
    \  for i in $(seq $n); do\n        pos_x=$((pos_x + 1))\n        if [ $pos_x -eq\
    \ $prev_pos_x ]; then\n            collision_cnt=$((collision_cnt + 1))\n    \
    \    fi\n        prev_pos_x=$pos_x\n    done\n    # let's simulate the cars going\
    \ to the left\n    pos_x=0\n    prev_pos_x=1\n    for i in $(seq $n); do\n   \
    \     pos_x=$((pos_x - 1))\n        if [ $pos_x -eq $prev_pos_x ]; then\n    \
    \        collision_cnt=$((collision_cnt + 1))\n        fi\n        prev_pos_x=$pos_x\n\
    \    done\n    echo $collision_cnt\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t# If argument is not an integer, exit\
    \ with error code\n\tif ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n\t\techo 'Not an integer'\
    \ >&2\n\t\treturn 1\n\tfi\n\n\t# Otherwise, return the number of collisions\n\t\
    echo \"$1\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  declare -i n\n  n=\"$1\"\n  declare -i\
    \ sum\n  sum=0\n  declare -i x\n  x=0\n  while [ \"$x\" -lt \"$n\" ]; do\n   \
    \ (( sum += n - x ))\n    (( x++ ))\n  done\n  echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal n=$1\n\tlocal nl=$(echo ${n}/2 |\
    \ bc)\n\tlocal nr=$n\n\n\t# main logic\n\tlocal count=0\n\twhile [ $nl -gt 0 ];\
    \ do\n\t\tlocal d=$(echo $nl*2 | bc)\n\t\tcount=$(echo $count+$d | bc)\n\t\tlet\
    \ nl--\n\t\tlet nr--\n\tdone\n\n\techo $count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # pre-conditions:\n    # 1. input is\
    \ an integer.  A negative input is meaningless\n    # 2. input is not greater\
    \ than 10^5\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n        echo \"error: input\
    \ must be a non-negative integer\"\n        return\n    fi\n    if (( $1 > 100000\
    \ )); then\n        echo \"error: input too large (> 10^5)\"\n        return\n\
    \    fi\n\n    # we will have n/2 cars going left to right, and n/2 cars going\
    \ right to left\n    # we will then ensure the cars start at the same point, and\
    \ find the number of cars\n    # that are approaching that point at the same time.\n\
    \n    # a matrix of n by n.  The n/2 left cars are going to the right, while the\
    \ other n/2\n    # cars are going to the left.  The numbers in the matrix are\
    \ the\n    # distances from starting point.\n    # So for example, for a 3 car\
    \ race:\n    #\n    # -2  0  2\n    #  0 -2  0\n    #  2  0 -2\n    #\n    # As\
    \ time passes, the distances in the matrix will change.  The lower triangle\n\
    \    # of the matrix represents the distances of the cars that are moving to the\
    \ left.\n    # The upper triangle represents the cars that are moving to the right.\n\
    \    declare -A arr\n    n=$1\n    # we will make the n/2 cars going left to right\
    \ start at x=0, and the n/2 cars\n    # going right to left start at x=n\n   \
    \ for i in $(seq $n); do\n        for j in $(seq $n); do\n            if (( i\
    \ < j )); then\n                # the car going to the left is starting at 0,\
    \ and is i steps behind\n                # the car going to the right\n      \
    \          arr[$i,$j]=$(( i - j ))\n            else\n                # the car\
    \ going to the right is starting at n, and is j steps behind\n               \
    \ # the car going to the left\n                arr[$i,$j]=$(( n - j + i ))\n \
    \           fi\n        done\n    done\n\n    # every second, the\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    (( n = $1 ))\n    # 0 1 2 3 4 5 ...\
    \ n-1 n\n    # ......n-1 n 0 1 2 ... n-2\n    # i=0, t=n-1\n    # i=1, t=n-2\n\
    \    # i=2, t=n-3\n    # i=3, t=n-4\n    # ...\n    # i=n-1, t=0\n    # i=n, t=n-1\n\
    \    # i=n+1, t=n-2\n    # i=n+2, t=n-3\n    # ...\n    # i=2n-1, t=n-1\n    #\
    \ i=2n, t=n\n    # ...\n    # i=3n-1, t=2n-1\n    # i=3n, t=2n\n    # ..\n   \
    \ # i=4n-1, t=3n-1\n    for (( i = 0; i < 4 * n; i++ )); do\n        (( t = (i\
    \ + n - 1) % n ))\n        for (( j = 0; j < 4 * n; j++ )); do\n            ((\
    \ s = (j + n) % n ))\n            (( s == t )) && echo \"$i $j\"\n        done\n\
    \    done\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo \"It is easy to see that the number\
    \ of collisions is $1.\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    printf '%d\\n' $(( ($1*($1+1))/2 ))\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    # Your code here.\n\
    \    # The input value is stored in the variable n\n    # Note that you can use\
    \ \"return\" to specify the output of the function\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local count=0\n  for (( i=1; i<=$1; i++\
    \ ))\n  do\n    for (( j=1; j<=$1; j++ ))\n    do\n      if [ $i -ne $j ]\n  \
    \    then\n        (( count++ ))\n      fi\n    done\n  done\n  echo $count\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ \"$1\" -le 0 ]; then\n        echo\
    \ \"0\"\n    else\n        # (1+(n-1)) + (1+(n-2)) + ... + (1+0) = n*(n+1)/2\n\
    \        echo \"$(( $1 * ( $1 + 1 ) / 2 ))\"\n    fi\n}\n\ncandidate() {\n   \
    \ car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  else\n\
    \    echo \"$(( $1 - 1 ))\"\n  fi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n   declare -i n=$1\n   declare -i x=0\n\
    \   declare -i p=0\n   while [ $n -gt 0 ]; do\n      if [ $p -eq 0 ]; then\n \
    \        x=$((x+1))\n      elif [ $p -eq 1 ]; then\n         x=$((x-1))\n    \
    \  fi\n      echo \"$x\"\n      n=$((n-1))\n      p=$((p^1))\n   done\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local -i res=0\n  local -i i j\n  declare\
    \ -a left_cars\n  declare -a right_cars\n  for ((i=0; i<$1; i++)); do\n    left_cars[$i]=$RANDOM\n\
    \    right_cars[$i]=$RANDOM\n  done\n  for ((i=0; i<$1; i++)); do\n    for ((j=0;\
    \ j<$1; j++)); do\n      if ((left_cars[$i]==right_cars[$j])); then\n        ((++res))\n\
    \      fi\n    done\n  done\n  echo $res\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tawk -v d=\"$1\" '\n\tBEGIN {\n\t\t# set\
    \ the final value to -1, so that we can easily check whether we need to print\
    \ the final value\n\t\ttotal_collisions=-1\n\t}\n\t{\n\t\tcar_distance[$1] = $2\n\
    \t}\n\tEND {\n\t\t# iterate through the car distances\n\t\tfor (distance in car_distance)\
    \ {\n\t\t\tcurrent_collisions = 0\n\t\t\tfor (distance2 in car_distance) {\n\t\
    \t\t\t# check for collision.  We cannot have distance == distance2, because\n\t\
    \t\t\t# then we are comparing a car with itself.\n\t\t\t\tif (distance != distance2\
    \ && abs(distance - distance2) <= d) {\n\t\t\t\t\tcurrent_collisions += 1\n\t\t\
    \t\t}\n\t\t\t}\n\t\t\t# update the total_collisions\n\t\t\tif (total_collisions\
    \ == -1 || current_collisions < total_collisions) {\n\t\t\t\ttotal_collisions\
    \ = current_collisions\n\t\t\t}\n\t\t}\n\t\t# print the final value\n\t\tprint\
    \ total_collisions\n\t}\n\t'\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=15 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=22 encoding='utf-8'>
  timestamp: 1660023548
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  (( $1 < 1 )) && return 1 # $1 is not a\
    \ positive integer\n  # I could use $1-1 but let's assume if $1 is 1, the answer\
    \ is 0\n  echo $(( ($1 - 1) * $1 / 2 ))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local num_cars=$1;\n    if ((num_cars\
    \ < 1)); then\n        echo \"The number of cars must be a positive integer.\"\
    \n        exit 1;\n    fi\n\n    echo \"There were $(( num_cars * (num_cars -\
    \ 1) / 2 )) collisions\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # create n cars going right to left\n\
    \    right_left=$(for ((i=1; i<=$1; i++)); do echo \"r$i\"; done)\n    # create\
    \ n cars going left to right\n    left_right=$(for ((i=1; i<=$1; i++)); do echo\
    \ \"l$i\"; done)\n    # combine them\n    cars=$right_left$left_right\n    # count\
    \ the number of collisions\n    echo $cars | sed -r 's/r([0-9]+)l([0-9]+)/\\1\\\
    2/g' | tr -cd '0-9' | wc -c\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -le 1 ]; then\n        echo\
    \ 0\n    else\n        echo $(( ( ( $1 * ( $1 - 1 ) ) / 2 ) + $1 ))\n    fi\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Your code goes here.\n    n=$1\n \
    \   count=0\n    if [ \"$n\" -gt 0 ]; then\n        count=$((n-1))\n    fi\n \
    \   echo $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  let \"a = 2 * $1 - 1\"\n  echo \"$a\"\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    (( $1 < 1 )) && { echo \"Must be a positive\
    \ integer\"; return 1; }\n    # Fill the left-to-right going cars array with numbers\
    \ from 0 to $1-1\n    # This will be the cars' initial position on the road\n\
    \    left_to_right_cars=($(seq 0 $(( $1 - 1 )) ))\n    # Fill the right-to-left\
    \ going cars array with numbers from $1-1 to 0\n    # This will be the cars' initial\
    \ position on the road\n    right_to_left_cars=($(seq $(( $1 - 1 )) -1 0 ))\n\
    \    collisions=0\n\n    # The road has length $1\n    (( road_length = $1 ))\n\
    \    while (( road_length > 0 )); do\n        # remove the first car from each\
    \ array (i.e. move the car one increment)\n        left_to_right_cars=(${left_to_right_cars[@]:1})\n\
    \        right_to_left_cars=(${right_to_left_cars[@]:1})\n        # If the car\
    \ that was removed was at the same position as the car that moved\n        # then\
    \ we have a collision, so increment the collision counter\n        (( ${right_to_left_cars[0]}\
    \ == ${left_to_right_cars[0]} )) && collisions=$(( collisions + 1 ))\n       \
    \ (( road_length-- ))\n    done\n    echo $collisions\n}\n\ncandidate() {\n  \
    \  car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpi8d8zcsg.sh: line 30: ((: ==  : syntax error: operand expected
    (error token is "==  ")

    '
  stdout: ''
  timestamp: 1660023543
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local count=0\n  local to_left=`echo {1..$1}`\n\
    \  local to_right=`echo {$1..1}`\n  while [[ -n $to_left && -n $to_right ]]; do\n\
    \    first_left=${to_left%% *}\n    first_right=${to_right%% *}\n    if [[ $first_left\
    \ -gt $first_right ]]; then\n      count=$((count + 1))\n      to_right=${to_right#*\
    \ }\n    else\n      to_left=${to_left#* }\n    fi\n  done\n  echo $count\n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=57 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660023549
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n\n    # Base case\n    if\
    \ [[ $n -le 0 ]]; then\n        echo 0\n        return\n    fi\n\n    # Recursive\
    \ case\n    let \"left = car_race_collision($n - 1)\"\n    let \"right = car_race_collision($n\
    \ - 2)\"\n    let \"num_collisions = $left + $right\"\n    echo $num_collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp0nd34plm.sh: line 22: let: left = car_race_collision(2 - 1): syntax
    error in expression (error token is "(2 - 1)")

    /tmp/tmp0nd34plm.sh: line 23: let: right = car_race_collision(2 - 2): syntax error
    in expression (error token is "(2 - 2)")

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  declare -i n=\"$1\"\n  for i in $(seq\
    \ \"$n\")\n  do\n    for j in $(seq \"$n\")\n    do\n      if [ \"$i\" -eq \"\
    $j\" ]\n      then\n        echo \"$i\"\n      fi\n    done\n  done | wc -l\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if (( $1 <= 0 )); then\n        return\
    \ 0\n    fi\n    if (( $1 == 1 )); then\n        return 0\n    fi\n    if (( $1\
    \ == 2 )); then\n        return 1\n    fi\n    if (( $1 > 2 )); then\n       \
    \ # The recurrence relation:\n        # C(n) = 1 + C(n-1) + C(n-2) + C(n-3) +\
    \ ... + C(n-n)\n        # when n >= 3\n        local a=0\n        local b=1\n\
    \        local c=1\n        local i\n        for (( i=3; i<=$1; i++ )); do\n \
    \           (( a=b, b=c, c=1+a+b ))\n        done\n        return $c\n    fi\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # it is assumed that $1 is an integer\
    \ greater than 0.\n  # also, it is assumed that bash is installed on the computer.\n\
    \  # the function is expected to be called using command substitution\n  # it\
    \ is expected that no cars will drive in the same direction\n  sum=0;\n  for i\
    \ in `seq 1 \"$1\"`; do\n    sum=$((sum+i));\n  done;\n  echo \"$sum\";\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n\
    \    echo \"Only numbers are allowed\" >&2\n    return 1\n  fi\n  echo \"($1*$1-($1/2))/2\"\
    \ | bc\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: 0
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    cars_on_the_left=$1\n    cars_on_the_right=$1\n\
    \    if [[ $cars_on_the_left -lt 0 || $cars_on_the_right -lt 0 ]]; then\n    \
    \    echo \"arguments must be non-negative\" >&2\n        return 1\n    fi\n \
    \   echo $(( cars_on_the_left * cars_on_the_right ))\n}\n\ncandidate() {\n   \
    \ car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  echo $(( $1 * ($1 - 1) / 2 ))\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  echo \"This is an unimplemented function.\"\
    \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local -i n=$1\n  (( $n >= 0 )) || return\
    \ 1\n\n  if (( n == 0 )); then\n    echo 0\n  else\n    echo \"$(( 2 * n - 1 ))\"\
    \n  fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023543
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local i\n  local j\n  local num_collisions\n\
    \  local start_left\n  local start_right\n  local end_left\n  local end_right\n\
    \  local this_start_left\n  local this_start_right\n  local this_end_left\n  local\
    \ this_end_right\n  num_collisions=0\n  for ((i=0; i<$1; i++)); do\n    read start_left\n\
    \    read start_right\n    read end_left\n    read end_right\n    for ((j=i+1;\
    \ j<$1; j++)); do\n      read this_start_left\n      read this_start_right\n \
    \     read this_end_left\n      read this_end_right\n      if \\\n        [[ $start_left\
    \ < $this_start_right && $this_start_right < $end_left ]] || \\\n        [[ $start_left\
    \ < $this_end_right && $this_end_right < $end_left ]] || \\\n        [[ $this_start_left\
    \ < $start_right && $start_right < $this_end_left ]] || \\\n        [[ $this_start_left\
    \ < $end_right && $end_right < $this_end_left ]]; then\n        ((num_collisions++))\n\
    \      fi\n    done\n  done\n  echo $num_collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=42 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=32 encoding='utf-8'>
  timestamp: 1660023548
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  integer=$1\n  if [[ $integer -eq 0 ]];\
    \ then\n    echo 0\n  else\n    echo $((integer-1))\n  fi\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -lt 1 ]]; then\n        echo\
    \ \"invalid number of cars $1\"\n        return 1\n    fi\n    echo $((($1*($1-1))/2))\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    declare -i num_collisions=0\n    declare\
    \ -i n=$1\n    for i in $(seq 1 $n); do\n        for j in $(seq $i $n); do\n \
    \           if [ $i -ne $j ]; then\n                num_collisions=$((num_collisions+1))\n\
    \            fi\n        done\n    done\n    echo $num_collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 0
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  # O(n)\n  local collisions=0\n\
    \  for ((i=0; i<n; i++)); do\n    for ((j=0; j<n; j++)); do\n      ((collisions++))\n\
    \    done\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n   # TODO: Implement this function\n   #\
    \ Hint: How would you describe the two sets of cars in terms of the element values\n\
    \   # in the array.\n   # Hint: How would you distinguish the two sets of cars,\
    \ so that your algorithm knows when\n   # to count a collision\n   # Hint: What\
    \ are the real-world collisions of interest, and how would you express that in\
    \ your\n   # array and counting logic?\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzti1s5oo.sh: line 20: syntax error near unexpected token `}''

    /tmp/tmpzti1s5oo.sh: line 20: `}''

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local i\n  local j\n  local\
    \ collision_count=0\n  local collision_temp\n  for i in $(seq 1 $n); do\n    for\
    \ j in $(seq 1 $n); do\n      collision_temp=$((i-j))\n      if [ $collision_temp\
    \ -eq 0 ]; then\n        collision_count=$((collision_count+1))\n      fi\n  \
    \  done\n  done\n  echo $collision_count\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i=0\n    local\
    \ count=0\n    local step=1\n    #\n    # The algorithm: \n    #\n    # Consider\
    \ the n-th car driving left to right.  \n    # The n-th car will collide with\
    \ all cars\n    # that are driving right to left and is in the first n positions,\n\
    \    # including itself if the latter is true. \n    # \n    # Thus, if we let\
    \ n = 1,2,3,..., then we need to add to the count\n    # the total number of cars\
    \ that are in the first n positions.\n    #\n    # Thus, it's best to let n =\
    \ 1,2,3,...,n and add to the count the value of n.\n    #\n    while [ $i -lt\
    \ $n ]; do\n        count=$((count + $step))\n        i=$((i + 1))\n    done\n\
    \    echo $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    declare -i n=\"$1\"\n    # If a car\
    \ is moving left to right, it's sign is plus; if it's moving right to left, its\
    \ sign is minus.\n    declare -i i\n    declare -i j\n    declare -i res=0\n \
    \   declare -i a b\n    # let two cars that are moving left to right are 0 and\
    \ 1\n    # let two cars that are moving right to left are 2 and 3\n    # We create\
    \ a coordinate system so that car 0 is the origin\n    # and car 1 is the positive\
    \ x-axis.  Then, car 2 is the positive y-axis\n    # and car 3 is the positive\
    \ z-axis.\n    # We can then reduce the problem of finding whether cars collides\
    \ to\n    # a system of linear equations.\n    # In this case, the system of equations\
    \ is simply,\n    #\n    # x[0] + x[1] = x[2] + x[3]\n    # x[0] - x[1] = x[2]\
    \ - x[3]\n    #\n    # These equations have 4 variables x[0] .. x[3] and 2 equations,\n\
    \    # so there will be infinite solutions\n    # With some algebraic manipulation,\
    \ we have,\n    #\n    # x[0] = x[2] and x[1] = x[3]\n    #\n    # This indicates\
    \ that if cars 0 and 2 meet, and cars 1 and 3 meet,\n    # then the cars will\
    \ collide.  We can do this in O(n^2) time.\n    #\n    # The following code is\
    \ implemented assuming that the input is an array of\n    # positive and negative\
    \ integers.  The negative integers represent cars\n    # that are moving right\
    \ to left, while the positive integers represent\n    # cars that are moving left\
    \ to right.\n    #\n    # The first thing we do is sort the input array.  Then,\
    \ we create two\n    # arrays, one for cars moving left to right, and one for\
    \ cars moving\n    # right to left.  Then, we generate all the possible pairs\
    \ for each array.\n    # If the two pairs have the same absolute value, then cars\
    \ collide.\n    #\n    # The following code is actually an implementation of the\
    \ above algorithm,\n    #\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  (( $1 < 1 )) && return 1\n\n  if (( $1\
    \ == 1 )); then\n    echo 0\n  else\n    car_race_collision $(( $1 - 1 ))\n  fi\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # your code goes here\n  n=$1\n  counter=0\n\
    \  collision=0\n  while [ $counter -lt $n ]\n  do\n    collision=$((collision+counter))\n\
    \    counter=$((counter+1))\n  done\n  echo $collision\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal total_cars=$1\n\tlocal left_to_right_cars=\"\
    1 2 3 4 5\"\n\tlocal right_to_left_cars=\"10 11 12 13 14\"\n\tlocal left_to_right_cars_count=`echo\
    \ $left_to_right_cars | wc -w`\n\tlocal right_to_left_cars_count=`echo $right_to_left_cars\
    \ | wc -w`\n\tlocal left_to_right_cars_array=($left_to_right_cars)\n\tlocal right_to_left_cars_array=($right_to_left_cars)\n\
    \tlocal i\n\tlocal j\n\tlocal num_collisions=0\n\tfor ((i=0; i<left_to_right_cars_count;\
    \ i++)); do\n\t\tfor ((j=0; j<right_to_left_cars_count; j++)); do\n\t\t\tif [[\
    \ ${left_to_right_cars_array[$i]} == ${right_to_left_cars_array[$j]} ]]; then\n\
    \t\t\t\tnum_collisions=$((num_collisions+1))\n\t\t\tfi\n\t\tdone\n\tdone\n\techo\
    \ $num_collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    awk '\n    function abs(x) {\n     \
    \   return (x < 0 ? -x : x)\n    }\n    BEGIN {\n        n = '\"$1\"'\n      \
    \  for (i = 1; i <= n; i++) {\n            car_pos[i] = rand() * n\n        }\n\
    \        num_collisions = 0\n        for (i = 1; i <= n; i++) {\n            for\
    \ (j = 1; j <= n; j++) {\n                if (abs(car_pos[i] - car_pos[j]) < 1)\
    \ {\n                    num_collisions++\n                }\n            }\n\
    \        }\n        print num_collisions / 2\n    }\n    '\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ ! $1 =~ ^[0-9]+$ ]]; then\n  \
    \      return 1\n    fi\n    # Feel free to implement it however you'd like.\n\
    \    # Optimize for speed.\n    # If your solution doesn't terminate in an hour,\
    \ we will consider it a bug.\n    # Don't use brute force to find the solution;\n\
    \    # that is, don't write a loop to iterate through all possibilities.\n   \
    \ # If you don't know how to implement the function,\n    # return 0 to let us\
    \ know you can't solve it.\n    # A template solution would look like this:\n\
    \    # echo \"replaced with your solution\"\n    echo 0\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal __resultvar=$2\n\tif [ $1 -gt 0\
    \ ]; then\n\t\tif [ $1 -eq 1 ]; then\n\t\t\teval $__resultvar=0\n\t\telse\n\t\t\
    \tlocal a\n\t\t\tcar_race_collision $(( $1 - 1 )) a\n\t\t\teval $__resultvar=$((\
    \ $1 - 1 + $a ))\n\t\tfi\n\telse\n\t\teval $__resultvar=0\n\tfi\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd43d3snm.sh: line 20: =1: command not found

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ \"$1\" -lt 0 ]]; then\n      \
    \  echo 'integer greater than 0 expected'\n        return 2\n    fi\n    echo\
    \ \"$1\" | awk 'BEGIN { FS = \",\" } ;\n                        { for (i = 1;\
    \ i <= NF; i++) {\n                            for (j = 1; j <= NF; j++) {\n \
    \                               if (j > i) {\n                               \
    \     if ($i == $j) {\n                                        count += 1\n  \
    \                                  }\n                                }\n    \
    \                        }\n                        }\n                      \
    \  print count }'\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    echo \"\
    TODO\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Write your code here...\n  local n=$1\n\
    \  local m=$((n-1))\n  echo $((n * m))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t#validate that $1 is an integer\n\tif\
    \ [[ ! $1 =~ ^-?[0-9]+$ ]]; then\n\t\techo \"1st arg is not an integer\"\n\t\t\
    return 1\n\tfi\n\t#set x to the integer in $1\n\tx=$1\n\t#compute the upper limit\
    \ of the infinite sum of the kth power of 2\n\t#this is the number of possible\
    \ ways to choose two cars from a set of 2n cars, one car moving in one direction,\
    \ the other car moving in the other direction\n\tk=1\n\tx=$((2**x))\n\tsum=$((2**(x-1)))\n\
    \twhile [ $k -lt $x ]; do\n\t\t#add the sum of the binomial expansion of (-1)^k*2^(2n-k)\n\
    \t\tsum=$((sum+((-1)**k)*(2**(x-k))))\n\t\t#increment k\n\t\tk=$((k+1))\n\tdone\n\
    \t#the number of collisions is the sum of the binomial expansion divided by 2\n\
    \tsum=$((sum/2))\n\techo \"$sum\"\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal n=${1:?}\n\tlocal collisions=0\n\
    \tlocal i=0\n\twhile [[ i -lt n ]]; do\n\t\tlet collisions++\n\t\tlet i++\n\t\
    done\n\techo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tinteger -i $1\n\techo $(( $1 * ($1 - 1)\
    \ / 2 ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_urmup0w.sh: line 13: integer: command not found

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [[ ! \"$1\" =~ ^[0-9]+$ ]]; then\n\
    \    echo \"Error: $1 must be an integer\"\n    return 1\n  fi\n  if [[ $1 -le\
    \ 0 ]]; then\n    echo \"Error: $1 must be an integer greater than 0\"\n    return\
    \ 1\n  fi\n  if [[ $1 -gt 500 ]]; then\n    echo \"Error: $1 must be an integer\
    \ less than or equal to 500\"\n    return 1\n  fi\n  echo \"$1\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [ $1 -eq 0 ]; then\n    echo 0\n  else\n\
    \    echo $(( $(car_race_collision $(( $1 - 1 ))) + ( $1 - 1 ) ))\n  fi\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    (( $1 <= 0 )) && echo \"N must be positive\"\
    \ >&2 && return 1\n    n=$1\n    # Each car is moving in one of two possible directions\n\
    \    # 1: Left to right\n    # 2: Right to left\n    declare -A lr_cars # Left\
    \ to right cars\n    declare -A rl_cars # Right to left cars\n    i=0\n    while\
    \ (( i < n )); do\n        lr_cars[$i]=$(( $RANDOM % n ))\n        rl_cars[$i]=$((\
    \ $RANDOM % n ))\n        (( ++i ))\n    done\n    collisions=0\n    i=0\n   \
    \ while (( i < n )); do\n        # For each left to right car\n        j=0\n \
    \       while (( j < n )); do\n            # For each right to left car\n    \
    \        # If the left to right car is ahead of the right to left car,\n     \
    \       # there will be a collision\n            if (( ${lr_cars[$i]} < ${rl_cars[$j]}\
    \ )); then\n                (( ++collisions ))\n            fi\n            ((\
    \ ++j ))\n        done\n        (( ++i ))\n    done\n    echo $collisions\n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if (( $1 == 0 ))\n    then\n       \
    \ echo 0\n    else\n        echo $(( $1 - 1 ))\n    fi\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [ $1 -lt 2 ]; then\n        echo\
    \ \"Invalid number of cars:  $1;  must be greater than 1.\"\n        return 1\n\
    \    fi\n    echo $(( $1*($1-1)/2 ))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Check that the argument is a positive\
    \ integer.\n  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n    echo \"An argument is required,\
    \ and it must be a positive integer.\"\n    return 1\n  fi\n\n  # Calculate the\
    \ collision.\n  echo \"This function is not yet implemented.\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local -r NUM_CARS=$1\n    local -r LEFT_CARS=$(seq\
    \ 1 $NUM_CARS)\n    local -r RIGHT_CARS=$(seq 1 $NUM_CARS | tac)\n    echo \"\
    $LEFT_CARS\" | tr ' ' '\\n' | sort | join - \"$RIGHT_CARS\" | wc -l\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'join: ''2''$''\n''''1'': No such file or directory

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  echo $(( ($1 * ($1 - 1)) / 2 ))\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  # echo \"First parameter\
    \ is: $n\"\n  if [[ ! $n =~ ^[0-9]+$ ]]; then\n    echo \"Error: not a number.\"\
    \n    exit 1\n  fi\n  let n*=(n-1)/2\n  # echo $n\n  return $n\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmprz74l0hq.sh: line 19: syntax error near unexpected token `(''

    /tmp/tmprz74l0hq.sh: line 19: `  let n*=(n-1)/2''

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local -i num_cars=\"$1\"\n    local\
    \ -i collisions=0\n    local -i i\n\n    for ((i=0; i<num_cars; i++)); do\n  \
    \      if [[ $((i % 2)) -eq 0 ]]; then\n            collisions=$((collisions +\
    \ num_cars - 1 - i))\n        else\n            collisions=$((collisions + i))\n\
    \        fi\n    done\n\n    echo \"$collisions\"\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Write your code here\n    if [[ \"\
    $1\" -eq 0 ]]; then\n        echo 0\n    else\n        echo \"$1\"\n    fi\n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t(($1<1)) && {\n\t\treturn 0\n\t}\n\treturn\
    \ $(( (1+$1)*($1/2) ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n\n  if [[ $n -eq 0 ]]; then\n\
    \    return 0\n  fi\n\n  echo $((2 * n - 1))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 = *[!0-9]* ]]; then\n     \
    \   # $1 contains non-numeric chars\n        echo \"You must give a number as\
    \ the first argument.\"\n        return 1\n    fi\n    # Collisions are simply\
    \ the number of cars going in one direction\n    # divided by two.\n    expr $1\
    \ / 2\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tif [[ $1 -eq 0 ]]; then\n\t\techo 0\n\t\
    else\n\t\tcar_race_collision $(( $1 - 1 ))\n\tfi\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo $(( $1 * ($1 - 1) / 2 ))\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local cars=${1:-2}\n  # We simulate the\
    \ race in a for loop.  We keep track of left-moving cars in\n  # array left_moving,\
    \ and right-moving cars in array right_moving.\n  local -a left_moving right_moving\n\
    \  # The left-most and right-most positions taken by a car.\n  local left_extent\
    \ right_extent\n  # The number of cars that have been assigned left and right\
    \ movements.\n  local left_assigned right_assigned\n  # The current position of\
    \ each of the cars.\n  local -i position\n  # The collision_count counts the number\
    \ of collisions.\n  local -i collision_count\n  # Used to indicate that a car\
    \ has been assigned a movement.\n  local -i assigned\n  for (( i=0; i<$cars; i++\
    \ )); do\n    left_moving[$i]=$i\n    right_moving[$i]=$i\n  done\n  collision_count=0\n\
    \  left_assigned=0\n  right_assigned=0\n  # Assign the left-most car to move right.\n\
    \  right_moving[0]=$assigned\n  right_extent=0\n  right_assigned=1\n  # The following\
    \ loop runs n^2 times.  There is an outer loop that tracks the\n  # left-moving\
    \ cars, and there is an inner loop that tracks the right-moving cars.\n  for ((\
    \ left_position=0; left_position<$cars; left_position++ )); do\n    # Get the\
    \ cars that are to the left of the left_position.\n    for (( i=0; i<$left_assigned;\
    \ i++ )); do\n      position=${left_moving[$i]}\n      if (( position < left_position\
    \ )); then\n        collision_count=$(( collision_count + 1 ))\n      fi\n   \
    \ done\n    # Get the cars that are to the right of the left_position.\n    for\
    \ (( i=0; i<$right_assigned; i++ )); do\n      position=${right_moving[$i]}\n\
    \      if (( position > left_position )); then\n        collision_count=$(( collision_count\
    \ + 1 ))\n      fi\n    done\n    # If the\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp3ksoa6tm.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmp3ksoa6tm.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [[ $1 -lt 1 ]]; then\n    echo \"error\"\
    \n    return\n  fi\n  if [[ $1 -eq 1 ]]; then\n    echo \"0\"\n    return\n  fi\n\
    \  if [[ $1 -eq 2 ]]; then\n    echo \"1\"\n    return\n  fi\n  if [[ $1 -eq 3\
    \ ]]; then\n    echo \"2\"\n    return\n  fi\n  if [[ $1 -eq 4 ]]; then\n    echo\
    \ \"5\"\n    return\n  fi\n  if [[ $1 -eq 5 ]]; then\n    echo \"10\"\n    return\n\
    \  fi\n  if [[ $1 -eq 6 ]]; then\n    echo \"17\"\n    return\n  fi\n  if [[ $1\
    \ -eq 7 ]]; then\n    echo \"26\"\n    return\n  fi\n  if [[ $1 -eq 8 ]]; then\n\
    \    echo \"37\"\n    return\n  fi\n  if [[ $1 -eq 9 ]]; then\n    echo \"50\"\
    \n    return\n  fi\n  if [[ $1 -eq 10 ]]; then\n    echo \"65\"\n    return\n\
    \  fi\n  if [[ $1 -eq 11 ]]; then\n    echo \"82\"\n    return\n  fi\n  if [[\
    \ $1 -eq 12 ]]; then\n    echo \"101\"\n    return\n  fi\n  if [[ $1 -eq 13 ]];\
    \ then\n    echo \"122\"\n    return\n  fi\n  if [[ $1 -eq 14 ]]; then\n    echo\
    \ \"145\"\n    return\n  fi\n  if [[ $1 -eq 15 ]]; then\n    echo \"170\"\n  \
    \  return\n  fi\n  if [[ $1 -eq 16 ]]; then\n    echo \"197\"\n    return\n  fi\n\
    \  if [[ $1 -eq 17 ]]; then\n    echo \"226\"\n    return\n  fi\n  if [[ $1 -eq\
    \ 18 ]]; then\n    echo \"257\"\n    return\n  fi\n  if [[ $1 -eq 19 ]]; then\n\
    \    echo \"290\"\n    return\n  fi\n  if [[ $1 -eq 20 ]]; then\n    echo \"325\"\
    \n    return\n  fi\n  if [[ $1 -eq\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw6vbmnwu.sh: line 97: unexpected argument `newline'' to conditional
    binary operator

    /tmp/tmpw6vbmnwu.sh: line 97: syntax error near `-eq''

    /tmp/tmpw6vbmnwu.sh: line 97: `  if [[ $1 -eq''

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [[ $1 -gt 0 ]]; then\n    n=$1\n  \
    \  if [[ $n -eq 1 ]]; then\n      echo 0\n    else\n      let n=$n-1\n      let\
    \ n=$n/2\n      echo $(($n+$(car_race_collision $n)))\n    fi\n  else\n    echo\
    \ 0\n  fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    declare -i n=$1\n    # Parameter error\
    \ checking\n    if (( n < 1 )); then\n        echo \"Illegal parameter '$n'\"\n\
    \        return 1\n    fi\n    # Let's consider 4 cars and see if we can generalize\n\
    \    # The positions of the cars would be like this:\n    #  (1)          (2)\n\
    \    #    C          C  \n    #  (4)          (3)\n    # 1 collision occurs, at\
    \ time 1, between cars 2 and 3.\n    # At time 0, 1 and 4 will be at the same\
    \ position.\n    # 1 and 4 will collide.  However, 1 and 4 are both moving left\
    \ to right;\n    # hence the collision is not considered.\n    # At time 3, 3\
    \ and 4 will collide.  However, both cars are moving right to left.\n    # No\
    \ collision at time 3.\n    # 4 cars can be arranged in $((n*(n-1))) ways.\n \
    \   # However, since cars moving left to right are indistinguishable from\n  \
    \  # cars moving right to left, there are $((n*(n-1)/2)) pairs of cars.\n    echo\
    \ $((n*(n-1)/2))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ \"$1\" -lt 2 ]]; then\n      \
    \  echo 0\n        return\n    fi\n    local n=$1\n    local idx=1\n    local\
    \ pos_left_to_right\n    local pos_right_to_left\n    local collisions=0\n   \
    \ while [[ $idx -le $n ]]; do\n        echo \"Enter left-to-right position of\
    \ car $idx:\"\n        read pos_left_to_right\n        echo \"Enter right-to-left\
    \ position of car $idx:\"\n        read pos_right_to_left\n        if [[ $pos_left_to_right\
    \ -gt $pos_right_to_left ]]; then\n            ((collisions++))\n        fi\n\
    \        ((idx++))\n    done\n    echo \"There are $collisions collisions\"\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=64 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=49 encoding='utf-8'>
  timestamp: 1660023549
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    [ \"$1\" -lt 0 ] && {\n        echo\
    \ \"Error: Input must be positive\"\n        return 1\n    }\n    # if $1 is 0,\
    \ there are 0 collisions.\n    # otherwise, $1*($1-1)/2 as per the sample output\n\
    \    (( $1 == 0 )) && echo 0 || echo \"$(($1*($1-1)/2))\"\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Write your code here\n  if (( $1 <=\
    \ 0 )); then\n    echo \"Invalid input\"\n    return\n  fi\n  echo $(expr $1 -\
    \ 1)\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  declare -i n=$1\n  declare -i a=0\n  declare\
    \ -i b=0\n  declare -i i=0\n  for ((i=0; i<n; i++)); do\n    a=$((a+1))\n    b=$((b-1))\n\
    \    if ((a==b)); then\n      echo \"$a,$b\"\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    test $# -ne 1 && echo \"Usage: car_race_collision\
    \ <n>\" && return\n    # if n is negative, return 0\n    test $1 -lt 0 && echo\
    \ 0 && return\n    # if n is 1, return 0\n    test $1 -eq 1 && echo 0 && return\n\
    \    # if n is 2, return 1\n    test $1 -eq 2 && echo 1 && return\n    # for n=3\
    \ to 10, we have 0, 1, 2, 4, 6, 9, 12, 16, 20\n    # so, the pattern is n*(n-1)/2\
    \ for even n and n*(n-1) for odd n\n    mod=$(( $1 % 2 ))\n    if [ $mod -eq 0\
    \ ]; then\n        echo $(( $1 * ($1 - 1) / 2 ))\n    else\n        echo $(( $1\
    \ * ($1 - 1) ))\n    fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=\"$1\"\n\n    # TODO - write\
    \ your code below this line\n\n    echo -1\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    echo $((n*(n-1)))\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local -i max=0\n    local -i counter=0\n\
    \    local -i i=0\n    local -i input=$1\n    echo \"input = $input\"\n    if\
    \ [[ $input -le 0 ]]; then\n\techo \"input must be a positive integer!\" >&2\n\
    \treturn 1\n    fi\n    echo \"counter = $counter\"\n    while [[ $i -lt $input\
    \ ]]; do\n\techo \"counter = $counter\"\n\tlocal -i random=$(( $RANDOM % $input\
    \ + 1 ))\n\techo \"random = $random\"\n\tif [[ $random -gt $max ]]; then\n\t \
    \   (( ++counter ))\n\t    max=$random\n\tfi\n\t(( ++i ))\n    done\n    echo\
    \ \"counter = $counter\"\n    return 0\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n   #local x\n   #for (( x=1; x<=$1; x++\
    \ )); do\n      # echo $x\n   #done\n   echo $(( ($1 * ($1 + 1)) / 2 ))\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # Set magic variables for current file\
    \ & dir\n    __dir=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n   \
    \ __file=\"${__dir}/$(basename \"${BASH_SOURCE[0]}\")\"\n    __base=\"$(basename\
    \ ${__file} .sh)\"\n    __root=\"$(cd \"$(dirname \"${__dir}\")\" && pwd)\" #\
    \ <-- change this as it depends on your app\n\n    source ${__dir}/../bin/functions.sh\n\
    \n    [ -z \"$1\" ] && echo \"I need a number as an argument\" && exit 1\n\n \
    \   echo \"$1\" | ${__dir}/../bin/collisions.awk\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4lqbqyox.sh: line 19: /tmp/../bin/functions.sh: No such file or
    directory

    /tmp/tmp4lqbqyox.sh: line 23: /tmp/../bin/collisions.awk: No such file or directory

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t# This function is already complete.\n\
    \t# You need not modify it.\n\tC=${1:-1}\n\techo \"($C * ($C - 1)) / 2\" | bc\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local result=0\n  if [[ $1 -eq 0 ]]; then\n\
    \    result=0\n  elif [[ $1 -eq 1 ]]; then\n    result=0\n  elif [[ $1 -eq 2 ]];\
    \ then\n    result=1\n  else\n    result=$(( $1 * ($1 - 1) / 2 ))\n  fi\n  echo\
    \ $result\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local -i n=\"$1\"\n    # The cars are\
    \ numbered 1 to n.  Let's start with a hash table of size n.\n    # The hash table\
    \ will hold a list of cars that are driving right to left;\n    # the key is the\
    \ car number, and the value is the car's distance to the right.\n    # Since the\
    \ cars are infinitely long, it's enough to store the cars' distance\n    # to\
    \ the right.\n    declare -A rhash\n    # We now add cars 1 to n to the hash table,\
    \ by mapping the car number to its\n    # distance to the right.\n    for (( i=1;\
    \ i<=n; i++ )); do\n        rhash[$i]=$i\n    done\n    # Now we add cars 1 to\
    \ n to a second hash table; the second hash table will\n    # hold a list of cars\
    \ that are driving left to right; the key is the car number,\n    # and the value\
    \ is the car's distance to the left.\n    declare -A lhash\n    for (( i=1; i<=n;\
    \ i++ )); do\n        lhash[$i]=$i\n    done\n    # Now we simulate the cars'\
    \ movement;\n    # We drive the car that's farthest to the right until it reaches\
    \ n; this is\n    # car n; then, we drive the car that's next to the right until\
    \ it reaches n-1;\n    # and so on.\n    local -i collisions=0\n    local max_distance=$n\n\
    \    local -i lhash_key lhash_value lhash_max_distance_key lhash_max_distance\n\
    \    for (( i=1; i<=n; i++ )); do\n        # Move the cars 1 to n that are driving\
    \ left to right.\n        # Find the car that's farthest to the left\n       \
    \ lhash_max_distance=${lhash[1]}\n        lhash_max_distance_key=1\n        for\
    \ (( lhash_key=1; lhash_key<=n; lhash_key++ )); do\n            lhash_value=${lhash[$lhash_key]}\n\
    \            if (( lhash_value > lhash_max_distance )); then\n               \
    \ lhash_max_distance=$l\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp280fn1wd.sh: line 48: syntax error near unexpected token `}''

    /tmp/tmp280fn1wd.sh: line 48: `}''

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # REPLACE THE BODY OF THIS FUNCTION WITH\
    \ YOUR IMPLEMENTATION\n  echo \"0\"\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local collisions=0\n  if\
    \ [[ $n -lt 1 ]]; then\n    echo $collisions\n    return 0\n  fi\n  local i\n\
    \  for ((i=1; i<n; i++)); do\n    collisions=$((collisions + i))\n  done\n  echo\
    \ $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  local num_left_to_right=0\n\
    \  local num_right_to_left=0\n  local left_to_right=0\n  local right_to_left=0\n\
    \  local collision=0\n  local count=0\n  local delta=0\n  local sign=0\n  for\
    \ ((i=0; i<2*n; i++)); do\n    read delta\n    read sign\n    if [ $sign -eq 0\
    \ ]; then\n      num_left_to_right=$((num_left_to_right+1))\n      left_to_right=$((left_to_right+delta))\n\
    \    else\n      num_right_to_left=$((num_right_to_left+1))\n      right_to_left=$((right_to_left+delta))\n\
    \    fi\n    collision=$((left_to_right-right_to_left))\n    if [ $collision -lt\
    \ 0 ]; then\n      collision=0\n    fi\n    count=$((count+collision))\n  done\n\
    \  echo $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=28 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=5 encoding='utf-8'>
  timestamp: 1660023549
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal -i i=0 #index\n\tlocal -i j=0 #index\n\
    \tlocal -i coll=0 #number of collisions\n\tlocal -i n=$1 #number of cars\n\tlocal\
    \ -i temp_i=0 #temp index\n\tlocal -i temp_j=0 #temp index\n\tlocal -i collision_array\
    \ #array that contains car collision coordinates\n\tdeclare -a car_array_left\n\
    \tdeclare -a car_array_right\n\tlocal -i car_index=0\n\twhile ((i < n))\n\tdo\n\
    \t\tcar_array_left[i]=$(( $RANDOM % 10000 + 1 ))\n\t\tlet \"i++\"\n\tdone\n\t\
    while ((j < n))\n\tdo\n\t\tcar_array_right[j]=$(( $RANDOM % 10000 + 1 ))\n\t\t\
    let \"j++\"\n\tdone\n\tcar_array_left=( $( printf \"%s\\n\" \"${car_array_left[@]}\"\
    \ | sort -n ) )\n\tcar_array_right=( $( printf \"%s\\n\" \"${car_array_right[@]}\"\
    \ | sort -n ) )\n\techo ${car_array_left[@]}\n\techo ${car_array_right[@]}\n\t\
    for (( car_index=0; car_index<n; car_index++ ));\n\tdo\n\t\tif [[ ${car_array_left[car_index]}\
    \ -eq ${car_array_right[car_index]} ]]; then\n\t\t\tlet \"coll++\"\n\t\tfi\n\t\
    done\n\techo $coll\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Input processing\n  # If a non-integer\
    \ is passed in, output an error message and exit with error code 1\n  if [ $#\
    \ -ne 1 ] || ! [[ $1 =~ ^[0-9]+$ ]]; then\n    echo \"Argument must be an integer\"\
    \n    exit 1\n  fi\n\n  # If the integer that is passed in is less than 2, there\
    \ will be no collisions\n  if [ $1 -lt 2 ]; then\n    echo \"0\"\n    return\n\
    \  fi\n\n  # Logic: The two groups of cars can be lined up such that the order\
    \ of the cars\n  # is alternating;\n  #\n  #     left-to-right: (c11, c21, c12,\
    \ c22, c13, c23, ...)\n  #    right-to-left: (c21, c11, c22, c12, c23, c13, ...)\n\
    \  #\n  # Now the number of collisions is equal to the number of pairs of cars\
    \ that are\n  # equidistant apart.   For example, for the above set, there are\
    \ 4 collisions\n  # because (c11, c21), (c12, c22), (c13, c23), and (c14, c24)\
    \ are equidistant apart.\n  # Note that the order of the cars in the above line-up\
    \ is not important.\n  #\n  # We now have a combinatorics problem.   If we have\
    \ n cars, there are n/2 pairs of\n  # equidistant cars.   If we line up n cars\
    \ in a row, the first car can be paired\n  # with n-1 cars.  The second car can\
    \ be paired with n-2 cars, and so on.\n  # Thus the number of collisions is\n\
    \  #\n  #     n*(n-1)*(n-2)*...*1 = n!\n  #\n  # However, if we consider the above\
    \ line-up of cars:\n  #\n  #     left-to-right: (c11, c21, c12, c22, c13, c23,\
    \ ...)\n  #    right-to-left: (c21, c11, c22, c12, c23, c13, ...)\n  #\n \n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local res=0\n  # enter your code here\n\
    \  if [[ $1 == 1 ]]; then\n    res=0\n  elif [[ $1 == 2 ]]; then\n    res=1\n\
    \  else\n    res=$((1+$1*$(($1-1))/2))\n  fi\n  echo $res\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local cars_r2l=`seq $1`\n  local cars_l2r=`seq\
    \ $1 | tac`\n  local counter=0\n  while [[ ! -z \"$cars_r2l\" ]]; do\n    car=`echo\
    \ $cars_r2l | sed -e 's/ .*//'`\n    cars_r2l=`echo $cars_r2l | sed -e 's/^[0-9]*\
    \ //'`\n    for c in $cars_l2r; do\n      if [[ $c == $car ]]; then\n        let\
    \ counter=counter+1\n      fi\n    done\n  done\n  echo $counter\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=60 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660023549
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # TODO: Write me\n\tif [ \"$1\" -eq 0\
    \ ]; then\n\t\treturn 0\n\telse\n\t\tlocal i=1\n\t\tlocal sum=0\n\t\twhile [ \"\
    $i\" -le \"$1\" ]; do\n\t\t\tlocal j=1\n\t\t\twhile [ \"$j\" -le \"$1\" ]; do\n\
    \t\t\t\tif [ \"$i\" -ne \"$j\" ]; then\n\t\t\t\t\tsum=$((sum+1))\n\t\t\t\tfi\n\
    \t\t\t\tj=$((j+1))\n\t\t\tdone\n\t\t\ti=$((i+1))\n\t\tdone\n\t\techo \"$sum\"\n\
    \tfi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  echo $( echo \"$1 * ($1-1) / 2\" | bc\
    \ )\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # TODO:  Write code here and put the answer\
    \ into the variable ANSWER.\n  local -i n=$1\n  local -i i\n  local -i j\n  local\
    \ -i k\n  local -i x\n  for ((i=1; i<=n; i++)); do\n    for ((j=1; j<=n; j++));\
    \ do\n      if [ \"$i\" -eq \"$j\" ]; then\n        continue\n      fi\n     \
    \ for ((k=1; k<=n; k++)); do\n        if [ \"$k\" -eq \"$i\" ] || [ \"$k\" -eq\
    \ \"$j\" ]; then\n          continue\n        fi\n        for ((x=1; x<=n; x++));\
    \ do\n          if [ \"$x\" -eq \"$i\" ] || [ \"$x\" -eq \"$j\" ] || [ \"$x\"\
    \ -eq \"$k\" ]; then\n            continue\n          fi\n          if [ $i -gt\
    \ $j ] && [ $j -gt $k ] && [ $k -gt $x ]; then\n            if [ $i -gt $x ];\
    \ then\n              ANSWER=$((ANSWER+1))\n            fi\n          fi\n   \
    \     done\n      done\n    done\n  done\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  let 'n=$1'\n  if [ $n -lt 0 ]; then\n\
    \    echo \"n is less than 0\"\n    return 1\n  fi\n  let 'collisions=n-1'\n \
    \ if [ $collisions -lt 0 ]; then\n    collisions=0\n  fi\n  echo \"$collisions\"\
    \n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuq20g8xt.sh: line 13: let: n=$1: syntax error: operand expected
    (error token is "$1")

    /tmp/tmpuq20g8xt.sh: line 14: [: -lt: unary operator expected

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local N\n    N=$1\n    local sum\n \
    \   sum=0\n    while [ $N -gt 0 ]; do\n        let sum+=N\n        let N-=1\n\
    \    done\n    echo $sum\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local collisions=0\n\
    \    local i=0\n    while [ $i -lt $n ]; do\n        local j=$i\n        while\
    \ [ $j -lt $n ]; do\n            collisions=$((collisions + 1))\n            j=$((j\
    \ + 1))\n        done\n        i=$((i + 1))\n    done\n    echo $collisions\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal n=$1\n\t# your code here\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    # Trivial case:\n  \
    \  if [ $n -le 1 ]; then\n        echo \"0\"\n        return\n    fi\n    local\
    \ sum=0\n    for ((i=1; i<$n; i++)); do\n        let sum+=$i\n    done\n    echo\
    \ \"$sum\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [[ $1 -lt 1 ]]; then\n    printf \"\
    %s\\n\" \"Error, not enough cars.\"\n    return 1\n  elif [[ $1 -gt 2147483647\
    \ ]]; then\n    printf \"%s\\n\" \"Error, too many cars.\"\n    return 1\n  fi\n\
    \  printf \"%s\\n\" $(((1 + $1) * $1 / 2))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local collisions=0\n\
    \    local -a left_to_right_cars\n    local -a right_to_left_cars\n    # for each\
    \ car, generate a random position between [0, n]\n    for ((i=0; i<n; i++)); do\n\
    \        left_to_right_cars[$i]=$RANDOM\n        right_to_left_cars[$i]=$RANDOM\n\
    \    done\n    # sort the cars from left to right, from smallest to largest\n\
    \    readarray -t sorted_left_to_right_cars < <(printf '%s\\n' \"${left_to_right_cars[@]}\"\
    \ | sort -n)\n    # sort the cars from right to left, from smallest to largest\n\
    \    readarray -t sorted_right_to_left_cars < <(printf '%s\\n' \"${right_to_left_cars[@]}\"\
    \ | sort -n)\n    # now that they're sorted, we compare first car in left to right\
    \ to the first car in right to left\n    # if they're equal, they collide.  We\
    \ increment collisions by 1, and move the right to left car by\n    # the smallest\
    \ amount possible so that it no longer matches the left to right car.\n    # We\
    \ keep doing this until we run out of cars.\n    for ((i=0; i<n; i++)); do\n \
    \       if [[ ${sorted_left_to_right_cars[$i]} -eq ${sorted_right_to_left_cars[$i]}\
    \ ]]; then\n            ((collisions++))\n            sorted_right_to_left_cars[$i]=$((sorted_right_to_left_cars[$i]\
    \ + 1))\n        fi\n    done\n    echo \"$collisions\"\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if [[ $1 -lt 1 ]]; then\n    echo \"Input\
    \ must be at least 1.\"\n    return\n  fi\n  echo \"Number of cars going left\
    \ to right: $1\"\n  echo \"Number of cars going right to left: $1\"\n  echo \"\
    The number of collisions is: $(( $1 * ($1 - 1) / 2 ))\"\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t# Let's not bother with a number that's\
    \ not positive.\n\tif [[ $1 -lt 1 ]]; then\n\t\techo 0\n\t\treturn 0\n\tfi\n\n\
    \t# This can be solved using pascal's triangle\n\t# But instead, let's do it using\
    \ combination.\n\tn=$1\n\tif (( $n % 2 == 0 )); then\n\t\tn=$(( n / 2 ))\n\t\t\
    echo $(( n * (n - 1) / 2 ))\n\telse\n\t\tn=$(( (n + 1) / 2 ))\n\t\techo $(( n\
    \ * (n - 1) ))\n\tfi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 0
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local collisions=0\n    local N=$1\n\
    \    local rightLeft=()\n    local leftRight=()\n    local i\n    local j\n  \
    \  # Fill rightLeft with $N random numbers between 0 and 99\n    for i in $(seq\
    \ 1 $N); do\n        rightLeft[$i]=$(random_int 99)\n    done\n    # Sort the\
    \ array\n    quicksort rightLeft[@]\n    # Fill leftRight with $N random numbers\
    \ between 0 and 99\n    for i in $(seq 1 $N); do\n        leftRight[$i]=$(random_int\
    \ 99)\n    done\n    # Sort the array\n    quicksort leftRight[@]\n    # Compare\
    \ the two arrays;  increment collisions each time an item appears in both arrays\n\
    \    for i in $(seq 1 $N); do\n        for j in $(seq 1 $N); do\n            if\
    \ [[ ${rightLeft[$i]} -eq ${leftRight[$j]} ]]; then\n                collisions=$((collisions\
    \ + 1))\n            fi\n        done\n    done\n    # Return the number of collisions\n\
    \    echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 24: quicksort: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 30: quicksort: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 24: quicksort: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 30: quicksort: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 24: quicksort: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 30: quicksort: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 21: random_int: command not found

    /tmp/tmpcnjud4y9.sh: line 24: quicksort: command not found

    /tmp/tmpcnjud4y9.sh: line 27: random_int: command not found

    /tmp/tmpcnjud4y'
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo \"$(($1-1))\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # get n\n  n=$1\n  # check n is a number\n\
    \  if [[ ! \"$n\" =~ ^[0-9]+$ ]]; then\n    echo \"arg 1 not a number\"\n    return\
    \ 1\n  fi\n  # check n is greater than 0\n  if [ \"$n\" -le 0 ]; then\n    echo\
    \ \"arg 1 is not greater than 0\"\n    return 1\n  fi\n  # loop through the first\
    \ n numbers (the left to right cars)\n  # and check if they are equal to any of\
    \ the right to left cars\n  # if they are, increment $collisions\n  collisions=0\n\
    \  for left_to_right_car in $(seq 1 $n); do\n    for right_to_left_car in $(seq\
    \ 1 $n); do\n      if [ \"$left_to_right_car\" -eq \"$right_to_left_car\" ]; then\n\
    \        collisions=$((collisions + 1))\n      fi\n    done\n  done\n  # divide\
    \ $collisions by 2\n  # because we've over-counted.\n  # we did not check for\
    \ equality with numbers going left to right\n  # that are already greater than\
    \ the number going right to left\n  # because the left to right number will have\
    \ already collided with\n  # a number going right to left that is smaller\n  collisions=$((collisions\
    \ / 2))\n  echo \"$collisions\"\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tif ! [[ \"$1\" =~ ^[0-9]+$ ]]; then\n\t\
    \techo \"Error: argument $1 is not a positive integer\" >&2\n\t\treturn 1\n\t\
    fi\n\ta=\"$1\"\n\tif [ \"$a\" -lt 1 ]; then\n\t\techo \"Error: argument $1 is\
    \ less than 1\" >&2\n\t\treturn 1\n\tfi\n\tif [ \"$a\" -eq 1 ]; then\n\t\techo\
    \ \"0\"\n\t\treturn 0\n\tfi\n\techo \"$(expr \"$a\" \\* \\( \"$a\" - 1 \\) / 2)\"\
    \n\treturn 0\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  declare -i n=$1\n  declare -i cnt=0\n\
    \  declare -i i\n  declare -i j\n  for ((i=1; i<=n; i++)); do\n    for ((j=1;\
    \ j<=n; j++)); do\n      if ((i > j)); then\n        ((cnt++))\n      fi\n   \
    \ done\n  done\n  echo $cnt\n}\n\ncandidate() {\n    car_race_collision \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  echo \"Car Race Collision\
    \ (n=$n)\"\n  echo \"========================\"\n  echo \"N/A\"\n  echo\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local cars_left_to_right\n  local cars_right_to_left\n\
    \  local collisions\n\n  cars_left_to_right=\"$( seq 1 \"$1\" )\"\n  cars_right_to_left=\"\
    $( seq \"$1\" -1 1 )\"\n\n  collisions=\"$(\n  for i in $cars_left_to_right\n\
    \  do\n    for j in $cars_right_to_left\n    do\n      if [[ $i == $j ]]\n   \
    \   then\n        echo \"$i $j\"\n      fi\n    done\n  done\n  )\"\n\n  echo\
    \ \"$collisions\" | wc -l\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    n=$1\n    echo $(( n * (n - 1) / 2 ))\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo \"Not yet implemented\"\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal n=$1\n\tlocal c=0\n\tlocal i\n\t\
    for ((i=0; i<n; i++)); do\n\t\t((c+=i))\n\tdone\n\techo $c\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local i=0 j=0\n  for ((i=0; i<$1; i++));\
    \ do\n    for ((j=0; j<$1; j++)); do\n      if (( j == i + 2 )) || (( j == i -\
    \ 2 )); then\n        echo \"Car $i hits car $j.\"\n      fi\n    done\n  done\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local cars=\"$1\"\n    for ((i=0; i<cars;\
    \ i++)); do\n        for ((j=0; j<cars; j++)); do\n            if ((i>j)); then\n\
    \                printf \"%d\\n\" \"$((i*cars+j))\"\n            fi\n        done\n\
    \    done | wc -l\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # We use a helper function named _car_race_collision_helper\
    \ to write this function.\n  # We have to use a helper function because bash does\
    \ not have variable scope.\n  # $1 is an integer\n  # $2 is an array of integers\n\
    \  # $3 is an array of integers\n  # $4 is an integer\n  # $5 is an integer\n\
    \  _car_race_collision_helper() {\n    local -i i=\"$1\"\n    local -a left_cars=(\"\
    ${!2}\")\n    local -a right_cars=(\"${!3}\")\n    local -i left_size=\"$4\"\n\
    \    local -i right_size=\"$5\"\n    local -i collisions=0\n    local -i left_car_position=0\n\
    \    local -i right_car_position=0\n    local -i left_car_index=0\n    local -i\
    \ right_car_index=0\n    local -i left_car_velocity=0\n    local -i right_car_velocity=0\n\
    \    local -i number_of_cars=\"$(( left_size + right_size ))\"\n    local -i left_car_collision_time=0\n\
    \    local -i right_car_collision_time=0\n    local -i collision_time=0\n    #\
    \ Array of collision times\n    local -a collision_times=()\n    # Array of collision\
    \ times with duplicates removed\n    local -a unique_collision_times=()\n    #\
    \ $left_car_velocity is the velocity of the left car as it travels left-to-right.\n\
    \    # $right_car_velocity is the velocity of the right car as it travels right-to-left.\n\
    \    # $left_car_position is the initial position of the left car as it travels\
    \ left-to-right.\n    # $right_car_position is the initial position of the right\
    \ car as it travels right-to-left.\n    #\n    # $left_car_collision_time is the\
    \ time at which the left car collides.\n    # $right_car_collision_time is the\
    \ time at which the right car collides.\n    # $collision_time is the\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo3voa8i0.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Assume $1 is greater than 0.\n  local\
    \ distance=0\n  local collision=0\n  while [ $distance -lt $1 ]; do\n    ((distance++))\n\
    \    ((collision+=$distance))\n  done\n  echo $collision\n}\n\ncandidate() {\n\
    \    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    :\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # input: 1 12 5 4 8 10 9 7 6 3 2 11\n\
    \    #\n    # total_cars=12\n    # left-to-right   right-to-left\n    #     1\
    \               12\n    #     5               5\n    #     8               4\n\
    \    #     9               8\n    #     7               10\n    #     6      \
    \         9\n    #     3               7\n    #     2               6\n    # \
    \    11              3\n    #                     2\n    #                   \
    \  11\n    #\n    # first pass\n    #     1   0\n    #     5   1\n    #     8\
    \   2\n    #     9   3\n    #     7   4\n    #     6   5\n    #     3   6\n  \
    \  #     2   7\n    #     11  8\n    #\n    # second pass\n    #        1   0\n\
    \    #     5   0   1\n    #     8   1   1\n    #     9   2   2\n    #     7  \
    \ 3   3\n    #     6   4   4\n    #     3   5   5\n    #     2   6   6\n    #\
    \     11  7   7\n    #\n    # left_to_right\n    #     1   0\n    #     5   0\
    \   1\n    #     8   1   1\n    #     9   2   2\n    #     7   3   3\n    #  \
    \   6   4   4\n    #     3   5   5\n    #     2   6   6\n    #     11  7   7\n\
    \    #\n    # right_to_left\n    #     12  7   8\n    #      5  5   6\n    # \
    \     4  4   5\n    #      8  3   4\n    #     10  2   3\n    #      9  1   2\n\
    \    #      7  0   1\n    #      6  0   0\n    #      3  0   0\n    #      2 \
    \ 0   0\n    #     11  0   0\n    #\n    # when left_to_right[i] != 0 and right_to_left[i]\
    \ != 0\n    #      1  0   0\n   \n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgzu5rs9j.sh: line 78: syntax error near unexpected token `}''

    /tmp/tmpgzu5rs9j.sh: line 78: `}''

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local -i i\n    local -i j\n    local\
    \ -i limit=$1\n    local -i result=0\n    for ((i=0; i<limit; i++)); do\n    \
    \    for ((j=0; j<limit; j++)); do\n            if ((i<j)); then\n           \
    \     result=$((result+1))\n            fi\n        done\n    done\n    echo \"\
    $result\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local num=$1\n    local collisions=0\n\
    \    local left_to_right=\"$(seq 1 $num)\"\n    local right_to_left=\"$(seq $num\
    \ -1 1)\"\n    for car in $left_to_right; do\n        for other_car in $right_to_left;\
    \ do\n            [[ $car -eq $other_car ]] && ((collisions++))\n        done\n\
    \    done\n    echo $collisions\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 2
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\tlocal IFS=$'\\n' # use newline as delimiter\n\
    \tlocal n=$1\n\tlocal speed=0\n\tlocal myleft=( )\n\tlocal myright=( )\n\t#\n\t\
    for (( i=0; i<n; i++ )); do\n\t\tread -r speed # read the speed of the car coming\
    \ from the left\n\t\tmyleft[$i]=$speed\n\tdone\n\tfor (( i=0; i<n; i++ )); do\n\
    \t\tread -r speed # read the speed of the car coming from the right\n\t\tmyright[$i]=$speed\n\
    \tdone\n\t#\n\t# because n is an integer, we can optimize the algorithm by using\n\
    \t# a bubble sort.\n\tfor (( i=0; i<n; i++ )); do\n\t\tfor (( j=0; j<n-1; j++\
    \ )); do\n\t\t\tif [[ ${myleft[$j]} -gt ${myleft[$((j+1))]} ]]; then\n\t\t\t\t\
    local tmp=${myleft[$j]}\n\t\t\t\tmyleft[$j]=${myleft[$((j+1))]}\n\t\t\t\tmyleft[$((j+1))]=$tmp\n\
    \t\t\tfi\n\t\t\tif [[ ${myright[$j]} -gt ${myright[$((j+1))]} ]]; then\n\t\t\t\
    \tlocal tmp=${myright[$j]}\n\t\t\t\tmyright[$j]=${myright[$((j+1))]}\n\t\t\t\t\
    myright[$((j+1))]=$tmp\n\t\t\tfi\n\t\tdone\n\tdone\n\t#\n\t# now that both of\
    \ the vehicles are sorted, we can check for collisions\n\t# by comparing the highest\
    \ speed vehicle to the lowest speed vehicle\n\t# of the opposite direction\n\t\
    local count=0\n\tlocal index=0\n\twhile [[ $index -lt $n ]]; do\n\t\tlocal leftspeed=${myleft[$index]}\n\
    \t\tlocal rightspeed=${myright[$index]}\n\t\t#\n\t\tif [[ $leftspeed -lt $rightspeed\
    \ ]]; then\n\t\t\tlet count++\n\t\tfi\n\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpf4gzcjad.sh: line 58: syntax error near unexpected token `}''

    /tmp/tmpf4gzcjad.sh: line 58: `}''

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t# Convert the input string into an integer.\n\
    \tN=$(echo \"$1\" | sed 's/[^0-9]//g')\n\tif (( $N == 0 )); then\n\t\t# Must have\
    \ at least 1 car.\n\t\techo \"error: must have at least 1 car\"\n\t\treturn 1\n\
    \tfi\n\techo \"Number of cars moving left to right: $N\"\n\techo \"Number of cars\
    \ moving right to left: $N\"\n\t# How many cars are there in total?\n\ttotal_num_cars=$((2*$N))\n\
    \techo \"Total number of cars: $total_num_cars\"\n\t# Number of collisions is\
    \ the number of times the number of cars moving left\n\t# to right is divisible\
    \ by the number of cars moving right to left.\n\techo \"Number of collisions:\
    \ $((($N/2)*2))\"\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"\
    3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"\
    8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local N\n    N=\"$1\"\n    local divisors\n\
    \    divisors=$(divisors \"$N\")\n    local sum\n    sum=0\n    for d in $divisors;\
    \ do\n        sum=$((sum + 1))\n    done\n    echo \"$sum\"\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpn5wt7vax.sh: line 16: divisors: command not found

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    let n=$1\n    let m=$1\n    let i=0\n\
    \    let j=0\n    let k=0\n    let collisions=0\n    while [ $i -lt $n ] && [\
    \ $j -lt $m ]; do\n        if [ $k -eq 1 ]; then\n            let j=$j+1\n   \
    \     else\n            let i=$i+1\n        fi\n        let k=$k^1\n        let\
    \ collisions=$collisions+$k\n    done\n    echo $collisions\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo \"$1\" | ./car_race_collision\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpleq3qgka.sh: line 13: ./car_race_collision: No such file or directory

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    case \"$1\" in\n        [0-9]*)\n  \
    \          echo \"($1 + 1) * $1 / 2\" | bc\n            ;;\n        *)\n     \
    \       echo \"Usage: car_race_collision <number>\"\n            ;;\n    esac\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # your implementation goes here\n  # refer\
    \ to the testcases for the expected output\n  num_cars=$1\n  test1=$((num_cars/2))\n\
    \  test2=$((num_cars-test1))\n  echo \"$test1\"\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local input=\"$1\"\n    local num_collisions=0\n\
    \    local i\n    local j\n    local rand_n\n    local rand_pos\n    local rand_dir\n\
    \n    if [ $# -ne 1 ]; then\n        echo \"Usage: car_race_collision integer\"\
    \n        return 1\n    fi\n\n    if ! [[ \"$input\" =~ ^[0-9]+$ ]]; then\n  \
    \      echo \"car_race_collision: input integer is not a valid integer\"\n   \
    \     return 1\n    fi\n\n    if [ \"$input\" -eq 0 ]; then\n        echo 0\n\
    \        return 0\n    fi\n\n    for ((i=0; i<input; i++)); do\n        rand_n=$((RANDOM\
    \ % 4))\n        rand_pos=$((RANDOM % 10))\n        rand_dir=$((RANDOM % 2))\n\
    \        # echo \"rand_n=$rand_n, rand_pos=$rand_pos, rand_dir=$rand_dir\"\n \
    \       case $rand_n in\n            0)\n                # if [ $rand_dir -eq\
    \ 0 ]; then\n                #     echo \"l-r car: 1\"\n                # else\n\
    \                #     echo \"r-l car: 1\"\n                # fi\n           \
    \     :\n                ;;\n            1)\n                # if [ $rand_dir\
    \ -eq 0 ]; then\n                #     echo \"l-r car: 2\"\n                #\
    \ else\n                #     echo \"r-l car: 2\"\n                # fi\n    \
    \            num_collisions=$((num_collisions + 1))\n                ;;\n    \
    \        2)\n                # if [ $rand_dir -eq 0 ]; then\n                #\
    \     echo \"l-r car: 3\"\n                # else\n                #     echo\
    \ \"r-l car: 3\"\n                # fi\n                num_collisions=$((num_collisions\
    \ + 1))\n                ;;\n            3)\n                # if [ $rand_dir\
    \ -eq 0 ]; then\n                #     echo \"l-r car: 4\"\n                #\
    \ else\n                #     echo \"r-l car: 4\"\n                # fi\n    \
    \            num_collisions=$((num_collisions + 2))\n                ;;\n    \
    \    esac\n    done\n\n\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate\
    \ \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate\
    \ \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -le 0 ]]; then\n        echo\
    \ \"This function only accepts positive integers.\"\n        return 1\n    fi\n\
    \    # let's assume that the cars are natural numbers.\n    # If a car is traveling\
    \ left to right and has value x, then the car traveling\n    # right to left will\
    \ have value n + x.  This relation will hold for all cars.\n    # For instance,\
    \ if n = 8 and car number 7 is traveling left to right, then\n    # car number\
    \ 15 is traveling right to left.\n    #\n    # Since the collisions occur when\
    \ a car that's traveling left to right hits\n    # a car that's traveling right\
    \ to left, this means that we can ignore the \n    # directions of the cars altogether\
    \ and just look at the integer values that\n    # the cars have.  In other words,\
    \ we can just think about whether x and n + x\n    # collide with each other,\
    \ or whether y and n + y collide with each other, etc.\n    #\n    # In the example\
    \ above, we see that 7 and 15 collide with each other.\n    # We can express this\
    \ collision in terms of the values of n and x as\n    # x + n = 2 * x + n\n  \
    \  # or in other words\n    # 2 * x = 2 * n\n    # or\n    # x = n\n    # That\
    \ is, we simply have to find every pair of x and n such that x = n.\n    # There\
    \ are a total of n such pairs.\n    # For instance, if n = 5, then there are 5\
    \ pairs:\n    # x = 0 and n = 0\n    # x = 1 and n = 1\n    # x = 2 and n = 2\n\
    \    # x = 3 and n = 3\n    # x = 4 and n = 4\n    #\n    # So the solution to\
    \ this problem is simply the value of n.\n    echo $1\n}\n\ncandidate() {\n  \
    \  car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo $(( ($1 * ($1 - 1)) / 2 ))\n}\n\
    \ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n  \
    \  [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo $(( ($1*$1 + $1)/2 ))\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    # there are no collisions if the number\
    \ of cars is 0, 1, or 2\n    if [ $1 -lt 3 ]; then\n        echo 0\n        return\n\
    \    fi\n\n    # otherwise, first calculate the number of distinct ways in which\
    \ two cars can collide\n    # this number is simply equal to n * (n - 1)\n\n \
    \   echo $(($1 * $(($1 - 1))))\n}\n\ncandidate() {\n    car_race_collision \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[\
    \ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[\
    \ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\
    \nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n   time ( echo $1 | factor )\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "\nreal\t0m0.001s\nuser\t0m0.001s\nsys\t0m0.001s\n"
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    echo $(( $1 * ($1 - 1) / 2 ))\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local num_cars=$1\n  local temp_out_file=\"\
    $(mktemp)\"\n  generate_random_integers_between -1 $num_cars $num_cars > \"$temp_out_file\"\
    \n  tr '\\n' ' ' < \"$temp_out_file\" | sed 's/^ //' | sed 's/ $//' | sed 's/\
    \ /\\n/g' | sort | uniq -c | grep -v ' 1 ' | grep -v ' -1 ' | cut -d ' ' -f 1\
    \ | bc\n  rm -f \"$temp_out_file\"\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfuaacc3l.sh: line 15: generate_random_integers_between: command
    not found

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    typeset -i -r number=$1\n    typeset\
    \ -i i\n    typeset -i collision\n    collision=0\n    if (( number > 0 ))\n \
    \   then\n        for (( i=1; i <= number; i++ ))\n        do\n            collision=$((\
    \ i + collision ))\n        done\n    fi\n    echo $collision\n}\n\ncandidate()\
    \ {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate\
    \ \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate\
    \ \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=$1\n  let n+=1\n  local left=1\n\
    \  local right=$n\n  local collisions=0\n  while [ $left -lt $right ]; do\n  \
    \  # echo \"left $left right $right\" >&2\n    if [ $(( left % right )) -eq 0\
    \ ]; then\n      collisions=$(( collisions + left ))\n    fi\n    let left+=1\n\
    \    let right-=1\n  done\n  echo $collisions\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    n=$1\n\n    #\n    # Write your code\
    \ here\n    #\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\")\
    \ = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\"\
    ) = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    if [[ $1 -lt 1 ]]; then\n        echo\
    \ 0\n        return\n    fi\n    # Let's say the right-to-left cars are at position\
    \ k and the left-to-right\n    # cars are at position l.  Since the two cars meet\
    \ at the origin,\n    # k - l = 0.  And since the total number of cars is 2n and\
    \ a total of n cars\n    # are moving left to right, then k = n and l = n.  Because\
    \ all the cars\n    # move in the same speed, the number of collisions is then\
    \ n.\n    #\n    # The following lines are necessary because of Bash's\n    #\
    \ floating point arithmetic.\n    n=$1\n    echo $n | awk '{ printf \"%.0f\",\
    \ $1 }'\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    re='^[0-9]+$'\n    if ! [[ $1 =~ $re\
    \ ]] ; then\n       echo \"error: Not a number\" >&2; exit 1\n    fi\n    if [\
    \ $1 -eq 0 ]; then\n        echo 0\n    else\n        echo $((($1*($1-1))/2))\n\
    \    fi\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  # Why 0?  Assume that n cars are going\
    \ left-to-right,\n  # and n cars are going right-to-left.\n  # Assume n=0.  Then\
    \ there are 0 cars moving left-to-right,\n  # and 0 cars moving right-to-left.\
    \  There are no collisions.\n  # We've proven that this function is correct when\
    \ n=0;\n  # we've proven that it works as expected.\n  # (In CS lingo, we've proven\
    \ this function's \"base case\".)\n  if [ $1 -eq 0 ]; then\n    echo 0\n    return\n\
    \  fi\n\n  # We know that this function works when n=0.\n  # We assume that this\
    \ function works when n=1, 2, 3, ..., $1-1.\n  # We want to prove that it works\
    \ when n=$1.\n  # We assume it works for the smaller cases.  This is called\n\
    \  # the \"inductive hypothesis\".\n  #\n  # Assume n=$1.  Then there are n cars\
    \ moving left-to-right,\n  # and n cars moving right-to-left.\n  #\n  # If the\
    \ leftmost car moving left-to-right collides with the\n  # rightmost car moving\
    \ right-to-left, then there are now\n  # $1-1 cars moving left-to-right, and $1-1\
    \ cars moving right-to-left.\n  # As a result, there are n-1+n-1=$2-2 collisions.\n\
    \  #\n  # If the leftmost car moving left-to-right does not collide with the\n\
    \  # rightmost car moving right-to-left, there are now $1-1 cars moving\n  # left-to-right,\
    \ and $1-1 cars moving right-to-left.  As a result,\n  # there are n-1+n-1=$2-2\
    \ collisions.\n  #\n  # This function is correct when n=$1.\n  # We've proven\
    \ that it works as expected for the base case,\n  # and we've proven that it works\
    \ as expected for the inductive case.\n  # We've proven that this function works\
    \ for all n.  This is called\n  # \"proof by induction\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  if ! is_natural_number \"$1\"; then\n\
    \    stderr \"fatal: ${FUNCNAME[0]} requires a natural number as argument\"\n\
    \    return 1\n  fi\n  local -i n=$1\n  # There are nC2 pairs of cars that can\
    \ potentially collide.\n  echo $((n * (n - 1) / 2))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpz31sl5yq.sh: line 13: is_natural_number: command not found

    /tmp/tmpz31sl5yq.sh: line 14: stderr: command not found

    '
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  (($1>1)) || return 0\n  echo $(( ($1-1)*$1\
    \ ))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  local n=\"$1\"\n  echo $((n * (n - 1)\
    \ / 2))\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n\t# this is the left to right array\n\t\
    l2r=( $@ )\n\t# this is the right to left array\n\tr2l=( $@ )\n\t\n\t# reversing\
    \ the right to left array\n\tr2l=(\"${r2l[@]}\" \"${l2r[@]}\")\n\t\n\t# output\
    \ array, initially empty\n\tretval=()\n\t\n\t# for each element in the left to\
    \ right array,\n\t# check if it exists in the right to left array,\n\t# if it\
    \ does, then store its index (plus the length of the\n\t# left to right array)\
    \ in the retval array\n\tfor i in \"${!l2r[@]}\"; do\n\t\tindex=`echo \"${r2l[@]}\"\
    \ | grep -w \"${l2r[$i]}\" | cut -d \" \" -f1`\n\t\tif [ -n \"$index\" ]; then\n\
    \t\t\tretval[$i]=$(( index + ${#l2r[@]} ))\n\t\tfi\n\tdone\n\t\n\t# output the\
    \ number of collisions as a count of non-empty elements\n\techo ${#retval[@]}\n\
    }\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: -1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    ## Write your code here\n    # If a\
    \ car at position x moving right to left, it will collide a car moving left to\
    \ right at x + 1\n    # We start from the leftmost car, then for each car moving\
    \ right to left,\n    # increase the number of collisons by the number of cars\
    \ moving left to right from its left\n    read n\n    declare -a left_to_right\n\
    \    declare -a right_to_left\n    declare -a collisions\n\n    collisions[0]=0\n\
    \n    for ((i=0; i<n; i++)); do\n        read left_to_right[$i]\n    done\n\n\
    \    for ((i=0; i<n; i++)); do\n        read right_to_left[$i]\n    done\n\n \
    \   for ((i=1; i<n; i++)); do\n        collisions[$i]=${collisions[$(($i-1))]}\n\
    \        if [[ ${right_to_left[$i]} -le ${left_to_right[$(($i-1))]} ]]; then\n\
    \            collisions[$i]=$((${collisions[$i]}+1))\n        fi\n    done\n\n\
    \    for ((i=0; i<n; i++)); do\n        echo ${collisions[$i]}\n    done\n}\n\n\
    candidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[\
    \ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[\
    \ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=71 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=69 encoding='utf-8'>
  timestamp: 1660023549
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local DISTANCE_BETWEEN_CARS=1\n    local\
    \ DISTANCE_BETWEEN_SETS_OF_CARS=$1\n    echo $(( ( $DISTANCE_BETWEEN_SETS_OF_CARS\
    \ / $DISTANCE_BETWEEN_CARS ) - 1 ))\n}\n\ncandidate() {\n    car_race_collision\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"2\") = \"4\" ]]\n  \
    \  [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\") = \"16\" ]]\n \
    \   [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\") = \"100\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n    local n=$1\n    local i\n    local count=0\n\
    \    for i in $(seq 1 $n); do\n        count=$((count + i))\n    done\n    echo\
    \ $count\n}\n\ncandidate() {\n    car_race_collision \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n\
    \    [[ $(candidate \"4\") = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n\
    \    [[ $(candidate \"10\") = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
- exit_code: 1
  program: "#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long\
    \ line.\n# n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n# are driving right to left.   The two sets of cars start out being\
    \ very far from\n# each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n# when a car that's moving left to right hits a car that's\
    \ moving right to left.\n# However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n# in their trajectory as if they did not\
    \ collide.\n# This function outputs the number of such collisions.\n#\n# $1 is\
    \ an integer\ncar_race_collision() {\n  echo $(($1/2))\n}\n\ncandidate() {\n \
    \   car_race_collision \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    2\") = \"4\" ]]\n    [[ $(candidate \"3\") = \"9\" ]]\n    [[ $(candidate \"4\"\
    ) = \"16\" ]]\n    [[ $(candidate \"8\") = \"64\" ]]\n    [[ $(candidate \"10\"\
    ) = \"100\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023544
