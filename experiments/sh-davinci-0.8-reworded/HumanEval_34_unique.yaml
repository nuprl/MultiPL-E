name: HumanEval_34_unique
language: sh
prompt: "#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"\
  5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"\
  ']\n#\n# $1 is a space-separated list\nunique() {\n"
tests: "}\n\ncandidate() {\n    unique \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5 3 5 2 3 3 9 0 123\") = \"0 2 3 5 9 123\" ]]\n}\n\nrun_test"
completions: ["    list=($(for e in \"$@\"; do echo \"$e\"; done | sort -u))\n   \
    \ echo \"[$(for e in \"${list[@]}\"; do echo \"\\\"$e\\\"\"; done | paste -sd\
    \ ',')]\"", "  echo \"$@\" | tr ' ' '\\n' | sort -u | tr '\\n' ' '", "  local\
    \ array=$1\n  local -a newArray\n  for i in ${array}; do\n    if [[ ! \" ${newArray[@]}\
    \ \" =~ \" ${i} \" ]]; then\n      newArray+=(\"${i}\")\n    fi\n  done\n  echo\
    \ ${newArray[@]}", "  # For each entry of the given list\n  while [ \"$#\" -gt\
    \ 0 ]; do\n    # There is no current element?\n    if [ -z \"${CURRENT_ELEMENT}\"\
    \ ]; then\n      # Set the first element\n      CURRENT_ELEMENT=\"$1\"\n    #\
    \ The current element is a new one?\n    elif [ \"${CURRENT_ELEMENT}\" != \"$1\"\
    \ ]; then\n      # Set the new element\n      CURRENT_ELEMENT=\"$1\"\n      #\
    \ Add the current element to the result list\n      printf '%s' \"${CURRENT_ELEMENT}\"\
    \n      printf ' '\n    fi\n    # Next entry\n    shift\n  done", "  eval '\n\
    \    declare -a list=($1)\n    sorted=($(printf \"%s\\n\" \"${list[@]}\" | sort\
    \ -r))\n    for i in \"${sorted[@]}\"; do\n      if [[ -z $unique ]]; then\n \
    \       unique=$i\n      elif [[ \"$unique\" != *\"$i\"* ]]; then\n        unique+=\"\
    \ $i\"\n      fi\n    done\n    echo \"$unique\"\n  '", "    sorted=$(echo \"\
    $*\" | tr ' ' '\\n' | sort -u | tr '\\n' ' ')\n    if [ -z \"$sorted\" ]; then\n\
    \        echo \"''\"\n    else\n        echo \"'$sorted'\"\n    fi", '    python
    -c "import sys; sorted(set(sys.argv[1:]))" $*', '    echo "$1" | sort -u | xargs
    -n1', '    echo "$(sort -n -u <<<"$1")"', "    _list=\"$1\"\n    _list=${_list//\
    \ /' '}\n    echo \"[$(printf '\"%s\" ' $(printf '%s\\n' \"${_list[@]}\" | sort\
    \ -u))]\"", "    python -c \"print ' '.join(sorted(set(\\\"$1\\\".split())))\"",
  "    if [[ -z \"$1\" ]]; then\n        return\n    fi\n    echo \"$1\" | \\\n  \
    \      tr \" \" \"\\n\" | \\\n        sort -n | \\\n        uniq | \\\n      \
    \  jq -Rc '.[]' | \\\n        jq -s 'sort'", "    echo \"$(echo \"$1\" | awk '{\
    \ for (i = 1; i <= NF; i++) { print $i } }' | sort -u | tr '\\n' ' ')\"", "  for\
    \ i in $1; do\n    echo \"$i\"\n  done | sort -n | uniq", "    tr ' ' '\\n' <<<\
    \ \"$@\" | sort -n | uniq", "  local LIST=\"$@\"\n  local UNIQUE\n  local ARRAY=()\n\
    \  for ELEMENT in $LIST; do\n    if [[ -z \"$(echo \"${ARRAY[@]}\" | grep -o \"\
    $ELEMENT\")\" ]]; then\n      ARRAY+=(\"$ELEMENT\")\n    fi\n  done\n  IFS=$'\\\
    n' SORTED=($(sort <<<\"${ARRAY[*]}\"))\n  unset IFS\n  echo \"${SORTED[*]}\"",
  "  local n=$'\\n' IFS=$' '\n  printf \"[%s]\" $(printf \"%s\\n\" \"$*\" | sort -n\
    \ | uniq | sed -e 's/^/\"/' -e 's/$/\"/' -e \"s/^$n//\" -e \"s/$n$//\")", "  local\
    \ _line=\"${1}\"\n  _line=${_line// /\\\\n}\n  _line=${_line//\\'/\\'\\\"\\'\\\
    \"\\'}\n  echo -n \"[\"\n  paste -sd, <(printf %s \"${_line}\" | sort -u) | sed\
    \ 's/^/\"/;s/$/\"/'\n  echo -n \"]\"", "  local list=$1\n  local result=()\n \
    \ for item in $list; do\n    if [[ ! \" ${result[@]} \" =~ \" ${item} \" ]]; then\n\
    \      result=(\"${result[@]}\" \"$item\")\n    fi\n  done\n  IFS=$'\\n' sorted=($(sort\
    \ <<<\"${result[*]}\"))\n  echo \"${sorted[*]}\"", "    (\n        IFS=$'\\n'\
    \ sorted=($(sort <<<\"$*\"))\n        unset IFS\n        printf \"%s\\n\" \"${sorted[@]}\"\
    \n    ) | uniq"]
stop_tokens:
- "\n}"
