name: HumanEval_114_minSubArraySum
language: sh
prompt: "#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any\
  \ non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2\
  \ 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated\
  \ list\nminSubArraySum() {\n"
tests: "}\n\ncandidate() {\n    minSubArraySum \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"2 3 4 1 2 4\") = \"1\" ]]\n    [[ $(candidate \"-1 -2 -3\"\
  ) = \"-6\" ]]\n    [[ $(candidate \"-1 -2 -3 2 -10\") = \"-14\" ]]\n    [[ $(candidate\
  \ \"-9999999999999999\") = \"-9999999999999999\" ]]\n    [[ $(candidate \"0 10 20\
  \ 1000000\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 -3 10 -5\") = \"-6\" ]]\n  \
  \  [[ $(candidate \"100 -1 -2 -3 10 -5\") = \"-6\" ]]\n    [[ $(candidate \"10 11\
  \ 13 8 3 4\") = \"3\" ]]\n    [[ $(candidate \"100 -33 32 -1 0 -2\") = \"-33\" ]]\n\
  \    [[ $(candidate \"-10\") = \"-10\" ]]\n    [[ $(candidate \"7\") = \"7\" ]]\n\
  \    [[ $(candidate \"1 -1\") = \"-1\" ]]\n}\n\nrun_test"
completions: ["  arr=($1)\n  min=0\n  for (( i=0; i<${#arr[@]}; i++ )); do\n    for\
    \ (( j=0; j<${#arr[@]}; j++ )); do\n      (( j >= i )) && sub=$(printf '%s\\n'\
    \ \"${arr[@]:i:j-i+1}\" | tr ' ' '+' | bc)\n      (( min == 0 || (sub < min &&\
    \ sub != 0) )) && min=$sub\n    done\n  done\n  echo $min", "    local nums=($1)\n\
    \    local minSum=$nums\n\n    for ((i=0; i<${#nums[@]}; i++)); do\n        sum=0\n\
    \        for ((j=i; j<${#nums[@]}; j++)); do\n            ((sum+=nums[j]))\n \
    \           ((sum<minSum)) && minSum=$sum\n        done\n    done\n\n    echo\
    \ $minSum", "    local min_sum=0;\n    local sum=0;\n    local num;\n    for num\
    \ in $1; do\n        sum=$((sum + num));\n        if [[ $sum -lt $min_sum ]];\
    \ then\n            min_sum=$sum;\n        fi\n    done\n    echo $min_sum;",
  "    if [[ $# -eq 0 ]]; then\n        echo \"Array is empty\"\n        return 0\n\
    \    fi\n    local min_sum=0\n    local array=($1)\n    local sum=0\n    for ((i=0;\
    \ i<${#array[@]}; i++)); do\n        sum=$(($sum + ${array[$i]}))\n        if\
    \ [[ $sum -lt $min_sum ]]; then\n            min_sum=$sum\n        fi\n      \
    \  if [[ $sum -gt 0 ]]; then\n            sum=0\n        fi\n    done\n    echo\
    \ $min_sum", "  local -r nums=($1)\n  local minSubArraySum=0\n  local currentSum=0\n\
    \  for (( i=0; i<${#nums[@]}; i++ )); do\n    if (( nums[i] > currentSum + nums[i]\
    \ )); then\n      currentSum=0\n    fi\n    currentSum=$(( currentSum + nums[i]\
    \ ))\n    if (( currentSum < minSubArraySum )); then\n      minSubArraySum=$currentSum\n\
    \    fi\n  done\n  echo $minSubArraySum", "  local -a A=($1)\n  local N=${#A[@]}\n\
    \  local S=$(IFS=+; echo \"${A[*]}\")\n  local minS=$S\n  for (( i=0; i<N; i++\
    \ )); do\n    (( N - i < 2 )) && break\n    for (( j=i+1; j<N; j++ )); do\n  \
    \    (( N - j < 2 )) && break\n      S=${S#${A[i]}+}\n      S=${S%+${A[j]}}\n\
    \      [[ $S -lt $minS ]] && minS=$S\n    done\n  done\n  echo $minS", "    IFS='\
    \ ' read -r -a n < <(echo \"$1\")\n    a=0\n    b=0\n    while [ \"${n[$a]}\"\
    \ -lt 0 ] && [ $a -lt ${#n[@]} ]; do\n        let a++\n    done\n    m=${n[$a]}\n\
    \    while [ $a -lt ${#n[@]} ]; do\n        let b++\n        while [ $b -lt ${#n[@]}\
    \ ] && [ $((m + n[$b])) -lt $m ]; do\n            let m+=n[$b]\n            let\
    \ b++\n        done\n        let a++\n        while [ $a -lt ${#n[@]} ] && [ $((m\
    \ + n[$a])) -lt $m ]; do\n            let m+=n[$a]\n            let a++\n    \
    \    done\n    done\n    echo \"$m\"", "  local xs=(\"$@\")\n  # Return 0 if the\
    \ list is empty.\n  if [[ \"${#xs[@]}\" == 0 ]]; then\n    echo 0\n    return\n\
    \  fi\n  local curr_sum=0\n  local min_sum=0\n  for x in \"${xs[@]}\"; do\n  \
    \  curr_sum=$((curr_sum + x))\n    if [[ curr_sum -lt min_sum ]]; then\n     \
    \ min_sum=$curr_sum\n    fi\n    if [[ curr_sum -gt 0 ]]; then\n      curr_sum=0\n\
    \    fi\n  done\n  echo $min_sum", "    local array=($1)\n    local minSum=0\n\
    \    local lastSum=0\n    local sum=0\n    # local i=0\n    for num in \"${array[@]}\"\
    ; do\n        sum=$((sum + num))\n        if [ $sum -lt $minSum ]; then\n    \
    \        minSum=$sum\n        fi\n        if [ $sum -gt $lastSum ]; then\n   \
    \         lastSum=$sum\n        fi\n    done\n    if [ $lastSum -lt 0 ]; then\n\
    \        echo $lastSum\n    else\n        echo $minSum\n    fi", "  INITIAL=0\n\
    \  SUM=0\n  MIN_SUM=0\n  for ((i=0; i<${#1}; i++)); do\n    INTEGER=$(echo \"\
    ${1:i:1}\")\n    if [ \"$INTEGER\" = \" \" ]; then\n      if [ \"$SUM\" -lt \"\
    $MIN_SUM\" ] || [ \"$MIN_SUM\" -eq \"$INITIAL\" ]; then\n        MIN_SUM=$SUM\n\
    \      fi\n      SUM=$INITIAL\n    else\n      SUM=$((SUM+INTEGER))\n    fi\n\
    \  done\n  echo \"$MIN_SUM\"", "    awk 'BEGIN {\n        a[\"0\"] = 0\n     \
    \   for (i = 1; i <= NF; i++) {\n            a[i] = a[i-1] + $i\n        }\n \
    \       min = a[NF]\n        for (i = 1; i <= NF; i++) {\n            for (j =\
    \ i; j <= NF; j++) {\n                b = a[j] - a[i-1]\n                if (b\
    \ < min) {\n                    min = b\n                }\n            }\n  \
    \      }\n        print min\n    }'", "  local -a nums\n  local i\n  local sum=0\n\
    \  local minSum=0\n  local ans=0\n  read -r -a nums <<< \"$1\"\n  minSum=${nums[0]}\n\
    \  sum=${nums[0]}\n  for ((i=1; i<${#nums[@]}; i++)); do\n    sum=$((sum + nums[i]))\n\
    \    ((sum < 0)) && sum=0\n    ((sum < minSum)) && minSum=$sum\n  done\n  ans=$minSum\n\
    \  ((minSum > 0)) && ans=0\n  echo \"$ans\"", "  local -a array\n  IFS=' ' read\
    \ -r -a array <<< \"$1\"\n  local min_sum=0\n  local min_sum_found=false\n  for\
    \ ((i=0; i<${#array[@]}; i++)); do\n    local sum=0\n    for ((j=i; j<${#array[@]};\
    \ j++)); do\n      local num=${array[j]}\n      ((sum+=num))\n      if ((min_sum_found));\
    \ then\n        if ((sum < min_sum)); then\n          min_sum=$sum\n        fi\n\
    \      else\n        if ((sum <= 0)); then\n          min_sum=$sum\n         \
    \ min_sum_found=true\n        fi\n      fi\n    done\n  done\n  echo \"$min_sum\"",
  "  local -a nums=($1)\n  local min_sum=${nums[0]}\n  local sum=0\n  for ((i=0; i<${#nums[@]};\
    \ i++)); do\n    sum=$(($sum + ${nums[$i]}))\n    ((min_sum > sum)) && min_sum=$sum\n\
    \    ((sum < 0)) && sum=0\n  done\n  echo $min_sum", "  local -a input=($1)\n\
    \  local min=${input[0]}\n  local sum=0\n  for ((i=0; i<${#input[@]}; i++)); do\n\
    \    sum+=${input[$i]}\n    ((sum<min)) && min=$sum\n    ((sum>0)) && sum=0\n\
    \  done\n  echo $min", '    echo "$1" | tr " " "\n" | sort -g | head -n 1', " \
    \   local min_so_far min_ending_here\n    IFS=' ' read -r -a arr <<< \"$1\"\n\
    \    for num in \"${arr[@]}\"; do\n        (( min_ending_here = min_ending_here\
    \ + num ))\n        if [[ min_so_far -eq 0 ]] || [[ min_so_far -gt min_ending_here\
    \ ]]; then\n            min_so_far=${min_ending_here}\n        fi\n        if\
    \ [[ min_ending_here -gt 0 ]]; then\n            min_ending_here=0\n        fi\n\
    \    done\n    echo ${min_so_far}", "    # sum, minSum, start, end\n    res=$(echo\
    \ \"$@\" | \\\n    sed 's/\\([^ ]*\\)/\\1 0/g' | \\\n    awk '\n        {\n  \
    \          a[NR] = $0\n        }\n        END {\n            minSum = a[1]\n \
    \           sum = 0\n            for (i = 1; i <= NR; i++) {\n               \
    \ sum += a[i]\n                sum > 0 ? sum : sum = 0\n                if (sum\
    \ < minSum) {\n                    minSum = sum\n                    end = i\n\
    \                }\n            }\n            sum = 0\n            for (i = end;\
    \ i >= 1; i--) {\n                sum += a[i]\n                if (sum == minSum)\
    \ {\n                    start = i\n                    break\n              \
    \  }\n            }\n            print minSum, start, end\n        }\n    ')\n\
    \    minSum=$(echo \"$res\" | awk '{print $1}')\n    start=$(echo \"$res\" | awk\
    \ '{print $2}')\n    end=$(echo \"$res\" | awk '{print $3}')\n    if [[ \"$minSum\"\
    \ == \"0\" ]]; then\n        # all numbers are non-negative\n        minSum=$(echo\
    \ \"$@\" | awk '{for (i = 1; i <= NF; i++) printf \"%s \", $i}' | \\\n       \
    \     awk '{print $1}')\n    fi\n    echo \"$minSum\"", "    # if the the minimum\
    \ number is negative, there is no point\n    # in adding it to any other number;\
    \ simply use it\n    local min=0\n    for i in $1; do\n        local sum=$(( $i\
    \ + $min ))\n        if (( $sum < $min )); then\n            min=$sum\n      \
    \  fi\n    done\n    echo $min", "  local currSum=0; local minSum=0\n  local -a\
    \ arr=($@)\n  local arrLength=${#arr[@]}\n  local counter=0\n\n  while [ $counter\
    \ -lt $arrLength ]; do\n    currSum=$(($currSum + ${arr[$counter]}))\n    if [\
    \ $currSum -lt $minSum ]; then\n      minSum=$currSum\n    fi\n    counter=$(($counter\
    \ + 1))\n  done\n\n  echo $minSum"]
stop_tokens:
- "\n}"
