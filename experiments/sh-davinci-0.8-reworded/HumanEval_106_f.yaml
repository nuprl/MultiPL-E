name: HumanEval_106_f
language: sh
prompt: "#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and\
  \ returns a list of size n, such that the value of the element at index i is the\
  \ factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n\
  # i starts from 1.\n# the factorial of i is the multiplication of the numbers from\
  \ 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"',\
  \ '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n"
tests: "}\n\ncandidate() {\n    f \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"5\") = \"1 2 6 24 15\" ]]\n    [[ $(candidate \"7\") = \"1 2 6 24 15 720 28\"\
  \ ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n    [[ $(candidate \"3\") = \"1 2 6\"\
  \ ]]\n}\n\nrun_test"
completions: ["    declare -a ary=()\n    for ((i=1; i<=$1; i++)); do\n        if\
    \ ((i%2==0)); then\n            ary+=($(factorial $i))\n        else\n       \
    \     ary+=($(sequence $i))\n        fi\n    done\n    echo \"${ary[@]}\"", " \
    \   # Write your code here\n    result=()\n    for((i=1;i<=$1;i++)); do\n    \
    \    if (( i % 2 == 0 )); then\n            result+=(\"$(fact $i)\")\n       \
    \ else\n            result+=(\"$(sum $i)\")\n        fi\n    done\n    echo ${result[@]}",
  "  array=()\n  for (( i=1; i<=$1; i++ )); do\n    if (( $i % 2 == 0 )); then\n \
    \     k=1\n      for (( j=1; j<=$i; j++ )); do\n        (( k *= j ))\n      done\n\
    \      array[$i-1]=$k\n    else\n      (( k = (i * (i + 1)) / 2 ))\n      array[$i-1]=$k\n\
    \    fi\n  done\n  printf '%s\\n' \"${array[@]}\"", '    # write your code here',
  "    local arr=()\n    i=1\n    if [ $(( $1 % 2 )) -eq 0 ]; then\n        while\
    \ [ $i -le $1 ]; do\n            value=$(( $i % 2 ))\n            arr[$i]=$value\n\
    \            (( i++ ))\n        done\n    else\n        while [ $i -le $1 ]; do\n\
    \            value=$(( ( $i * ( $i + 1 ) ) / 2 ))\n            arr[$i]=$value\n\
    \            (( i++ ))\n        done\n    fi\n    echo ${arr[@]}", "  # Insert\
    \ your code here\n  for (( i=1; i<=$1; i++ ))\n  do\n    if (( $i % 2 == 0 ));\
    \ then\n      fact=1\n      for (( j=1; j<=$i; j++ ))\n      do\n        fact=$((fact*j))\n\
    \      done\n      echo -n \\\"$fact\\\"\n    else\n      sum=0\n      for ((\
    \ j=1; j<=$i; j++ ))\n      do\n        sum=$((sum+j))\n      done\n      echo\
    \ -n \\\"$sum\\\"\n    fi\n    if (( $i < $1 )); then\n      echo -n ,\n    fi\n\
    \  done\n  echo", "  for ((i=1; i<=$1; i++)); do\n    if [ $((i%2)) -eq 0 ]; then\n\
    \      factorial=1\n      for ((j=1; j<=i; j++)); do\n        factorial=$((factorial*j))\n\
    \      done\n      echo -n '\"'$factorial'\"'\n    else\n      sum=0\n      for\
    \ ((j=1; j<=i; j++)); do\n        sum=$((sum+j))\n      done\n      echo -n '\"\
    '$sum'\"'\n    fi\n    if [ $i -ne $1 ]; then\n      echo -n ', '\n    fi\n  done",
  "    i=1\n    while [[ i -le $1 ]]; do\n      if [[ $((i % 2)) -eq 0 ]]; then\n\
    \          if [[ $i -eq 0 ]]; then\n              echo $i\n          else\n  \
    \            echo -n $(factorial $i)\n          fi\n      else\n          echo\
    \ -n $(sum $i)\n      fi\n      i=$((i + 1))\n      if [[ $i -le $1 ]]; then\n\
    \          echo -n \",\"\n      fi\n    done", "    i=1\n    while [ $i -le $1\
    \ ]\n    do\n        if [ $((i % 2)) -eq 0 ]\n        then\n            n=1\n\
    \            j=1\n            while [ $j -le $i ]\n            do\n          \
    \      n=$((n * j))\n                j=$((j + 1))\n            done\n        \
    \    echo -n '\"'$n'\"'\n        else\n            n=0\n            j=1\n    \
    \        while [ $j -le $i ]\n            do\n                n=$((n + j))\n \
    \               j=$((j + 1))\n            done\n            echo -n '\"'$n'\"\
    '\n        fi\n        if [ $i -ne $1 ]\n        then\n            echo -n \"\
    , \"\n        fi\n        i=$((i + 1))\n    done", "  local n=$1\n  local result=\"\
    \"\n  local i=1\n  while [ $i -le $n ]; do\n    local value=$i\n    if [ $(($i\
    \ % 2)) -eq 0 ]; then\n      value=1\n      local j=1\n      while [ $j -le $i\
    \ ]; do\n        value=$(($value * $j))\n        j=$(($j + 1))\n      done\n \
    \   fi\n    result=\"$result $value\"\n    i=$(($i + 1))\n  done\n  echo \"[$result]\"",
  "  n=$1\n  for i in $(seq 1 $n); do\n    if [[ $((i % 2)) -eq 0 ]]; then\n     \
    \ factorial=$((1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10))\n      echo $factorial\n\
    \    else\n      n=$(seq 1 $i)\n      # $(seq 1 $i) gives us numbers from 1 to\
    \ $i\n      # then $() is a command substitution: take the output of that command\n\
    \      # and substitute it in the command\n      # so in this case we give the\
    \ result of seq 1 i to the $()\n      # then we store it in the variable n\n \
    \     # then we use it in the echo statement\n      # which gives us the sum of\
    \ numbers from 1 to i\n      # e.g. seq 1 5 = 1 2 3 4 5\n      # so the sum is\
    \ 1 + 2 + 3 + 4 + 5 = 15\n      echo $((n))\n    fi\n  done", "    if [ $1 -lt\
    \ 1 ]; then\n        echo \"please enter a positive integer!\"\n        exit 1\n\
    \    fi\n    result=$(seq 1 $1)\n    echo \"result: ${result[@]}\"\n    new_result=()\n\
    \    for n in ${result[@]}; do\n        if [ $(($n % 2)) -eq 0 ]; then\n     \
    \       factorial=1\n            for i in $(seq 1 $n); do\n                factorial=$(($factorial\
    \ * $i))\n            done\n            new_result+=($factorial)\n        else\n\
    \            total=0\n            for i in $(seq 1 $n); do\n                total=$(($total\
    \ + $i))\n            done\n            new_result+=($total)\n        fi\n   \
    \ done\n    echo \"new_result: ${new_result[@]}\"", "    local n=\"$1\"\n    for\
    \ ((i=1; i<=n; i++)); do\n        if (( i % 2 == 0 )); then\n            echo\
    \ \"$(factorial \"$i\")\"\n        else\n            echo \"$(seq \"$i\" | paste\
    \ -sd+ - | bc)\"\n        fi\n    done", "  n=$1\n  i=1\n  list=()\n  while [\
    \ $i -le $n ]\n  do\n    if [ $(( $i % 2 )) -eq 0 ]\n    then\n      factorial=1\n\
    \      j=1\n      while [ $j -le $i ]\n      do\n        factorial=$(( $factorial\
    \ * $j ))\n        j=$(( $j + 1 ))\n      done\n      list+=$factorial\n    else\n\
    \      list+=$(( $(( ($i + 1) * $i )) / 2 ))\n    fi\n    i=$(( $i + 1 ))\n  done\n\
    \  echo \"[$(printf \"\\\"%s\\\",\" \"${list[@]}\")]\"", "    if [[ $1 -gt 0 ]];\
    \ then\n        for (( i = 1; i <= $1; i++)); do\n            if [[ $(( i % 2\
    \ )) -eq 0 ]]; then\n                factorial=1\n                for (( j = 1;\
    \ j <= i; j++)); do\n                    factorial=$(( factorial * j ))\n    \
    \            done\n                echo -n '\"'$factorial'\"'\n            else\n\
    \                echo -n '\"'$(($(( $i * ($i + 1) )) / 2))'\"'\n            fi\n\
    \            [[ $i -lt $1 ]] && echo -n \", \"\n        done\n    fi", "    list=();\n\
    \    for i in $(seq $1); do\n        if [ $((i % 2)) -eq 0 ]; then\n         \
    \   fac=1;\n            for j in $(seq $i); do\n                fac=$((fac * j));\n\
    \            done;\n            list[$((i - 1))]=$fac;\n        else\n       \
    \     sum=0;\n            for j in $(seq $i); do\n                sum=$((sum +\
    \ j));\n            done;\n            list[$((i - 1))]=$sum;\n        fi;\n \
    \   done;\n    echo -n '[';\n    for i in ${list[@]}; do\n        echo -n \"\\\
    \"$i\\\",\";\n    done;\n    echo -n '\"0\"]';", "    # Complete the function\
    \ body\n    # Your code here\n    declare -a array\n    k=0\n    fact=1\n    sum=0\n\
    \    for ((i=1;i<=$1;i++))\n    do\n        if [ $(($i%2)) -eq 0 ]\n        then\n\
    \            while [ $i -gt 0 ]\n            do\n                fact=$(($fact*$i))\n\
    \                i=$(($i-1))\n            done\n            array[$k]=$fact\n\
    \            fact=1\n        else\n            for ((j=1;j<=$i;j++))\n       \
    \     do\n                sum=$(($sum+$j))\n            done\n            array[$k]=$sum\n\
    \            sum=0\n        fi\n        k=$(($k+1))\n    done\n    echo ${array[@]}",
  "  # To print values in a list\n  local -a my_array\n  # Add a value to an array.\n\
    \  local -i index=0\n\n  for((i=1; i<=$1; i++)); do\n    local value=\"\"\n  \
    \  if [ $((i%2)) -eq 0 ]; then\n      local -i factorial=1\n      for((j=1; j<=i;\
    \ j++)); do\n        factorial=$((factorial*j))\n      done\n      value=$factorial\n\
    \    else\n      local -i sum=0\n      for((j=1; j<=i; j++)); do\n        sum=$((sum+j))\n\
    \      done\n      value=$sum\n    fi\n    my_array[$index]=$value\n    ((index++))\n\
    \  done\n  printf '[\"%s\"]\\n' \"${my_array[@]}\"", "    res=''\n    for ((i=1;\
    \ i<=$1; i++)); do\n        if (( i % 2 == 0)); then\n            res+=\"$(fact\
    \ $i)\"\n        else\n            res+=\"$(sum $i)\"\n        fi\n        res+='\
    \ '\n    done\n    echo $res", "    number=$1\n    array=()\n    for (( i=1; i<=number;\
    \ i++ ))\n    do\n        if [ $(( i % 2 )) -eq 0 ]\n        then\n          \
    \  # Even number\n            result=1\n            for (( j=2; j<=i; j++ ))\n\
    \            do\n                result=$(( result * j ))\n            done\n\
    \        else\n            # Odd number\n            result=0\n            for\
    \ (( j=1; j<=i; j++ ))\n            do\n                result=$(( result + j\
    \ ))\n            done\n        fi\n        array+=(\"$result\")\n    done\n \
    \   echo ${array[@]}", "    local res=''\n    local i=1\n    while [ $i -le $1\
    \ ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n            res=\"$res \\\"$(factorial\
    \ $i)\\\"\"\n        else\n            res=\"$res \\\"$(sum $i)\\\"\"\n      \
    \  fi\n        i=$((i + 1))\n    done\n    echo [$res]", "    #Write your code\
    \ here\n\n", "    result=()\n    for((i=1;i<=$1;i++)); do\n        if [ $((i%2))\
    \ -eq 0 ]; then\n            factorial=1\n            for((j=2;j<=i;j++)); do\n\
    \                factorial=$((factorial*j))\n            done\n            result+=$factorial\n\
    \        else\n            result+=$(((i+1)*i/2))\n        fi\n    done\n    echo\
    \ ${result[@]}", '    echo "1 2 6 24 15"', "    local answer\n    for ((i=1; i<=$1;\
    \ i++)); do\n        if ((i % 2 == 0)); then\n            local factorial=1\n\
    \            for ((j=1; j<=i; j++)); do\n                factorial=$(( factorial\
    \ * j ))\n            done\n            answer+=\"\\\"$factorial\\\",\"\n    \
    \    else\n            local sum=0\n            for ((j=1; j<=i; j++)); do\n \
    \               sum=$(( sum + j ))\n            done\n            answer+=\"\\\
    \"$sum\\\",\"\n        fi\n    done\n    echo \"[${answer%,}]\"", "  if [ $1 -eq\
    \ 1 ]; then\n    echo -n \"[\\\"1\\\"\"\n  else\n    echo -n \"[\\\"1\\\"\"\n\
    \    for i in $(seq 2 $1); do\n      if [ $((i % 2)) -eq 0 ]; then\n        number=1\n\
    \        for j in $(seq 2 $i); do\n          number=$((number * j))\n        done\n\
    \        echo -n \", \\\"$number\\\"\"\n      else\n        number=0\n       \
    \ for j in $(seq 1 $i); do\n          number=$((number + j))\n        done\n \
    \       echo -n \", \\\"$number\\\"\"\n      fi\n    done\n  fi\n  echo \"]\"",
  "    n=$1\n    if [ \"$#\" -ne 1 ] || ! [[ \"$n\" =~ ^[0-9]+$ ]]; then\n       \
    \ echo \"Usage: $0 n\" >&2\n        return 1\n    fi\n    for i in $(seq 1 $n);\
    \ do\n        factorial=1\n        if [ $((i % 2)) -eq 0 ]; then\n           \
    \ for j in $(seq 1 $i); do\n                factorial=$((factorial * j))\n   \
    \         done\n            echo \\\"$factorial\\\"\n        else\n          \
    \  sum=0\n            for j in $(seq 1 $i); do\n                sum=$((sum + j))\n\
    \            done\n            echo \\\"$sum\\\"\n        fi\n    done", "   \
    \ local i=1\n    local cnt=1\n    local res=\"\"\n    local cur=\"\"\n    local\
    \ n=0\n    local n=$(echo \"2^30\" | bc)\n    n=$(($n-1))\n    if [ \"$1\" -lt\
    \ \"1\" ] || [ \"$1\" -gt \"$n\" ]; then\n        return 1\n    fi\n    while\
    \ [ \"$i\" -le \"$1\" ]; do\n        cur=$(echo \"$i\" | bc)\n        res=\"$res,\\\
    \"$cur\\\"\"\n        cnt=$(($cnt+1))\n        i=$(($i+1))\n    done\n    echo\
    \ \"[${res:1}]\"", "  n=$1\n  rez=\"[\"\n  for ((i=1; i<=n; i++)); do\n    if\
    \ ((i%2==0)); then\n      x=1\n      for ((j=2; j<=i; j++)); do\n        x=$((x*j))\n\
    \      done\n    else\n      x=0\n      for ((j=1; j<=i; j++)); do\n        x=$((x+j))\n\
    \      done\n    fi\n    rez=\"$rez '\\\"$x\\\"'\"\n  done\n  rez=\"$rez ]\"\n\
    \  echo $rez", "  declare -a arr\n  #TODO: Define arr using the function f\n \
    \ declare -i i=1;\n  while [ $i -le $1 ]\n  do\n  \tif [ $(( $i % 2 )) == 0 ]\n\
    \  \tthen\n  \t\tresult=1\n  \t\tj=1\n  \t\twhile [ $j -le $i ]\n  \t\tdo\n  \t\
    \t\tresult=$(( $result * $j ))\n  \t\t\tj=$(( $j + 1 ))\n  \t\tdone\n  \t\tarr[$i-1]=$result\n\
    \  \telse\n  \t\tresult=0\n  \t\tj=1\n  \t\twhile [ $j -le $i ]\n  \t\tdo\n  \t\
    \t\tresult=$(( $result + $j ))\n  \t\t\tj=$(( $j + 1 ))\n  \t\tdone\n  \t\tarr[$i-1]=$result\n\
    \  \tfi\n  \ti=$(( $i + 1 ))\n  done\n  echo ${arr[@]}", "    res=\"\"\n    if\
    \ [ $1 -gt 0 ]; then\n        res=$res\"\\\"1\\\"\"\n    fi\n    if [ $1 -gt 1\
    \ ]; then\n        res=$res\",\\\"2\\\"\"\n    fi\n    if [ $1 -gt 2 ]; then\n\
    \        res=$res\",\\\"6\\\"\"\n    fi\n    if [ $1 -gt 3 ]; then\n        res=$res\"\
    ,\\\"24\\\"\"\n    fi\n    if [ $1 -gt 4 ]; then\n        res=$res\",\\\"120\\\
    \"\"\n    fi\n    echo \"[\"$res\"]\"", "\t# type your solution here\n\tres=\"\
    [\\\"1\\\"\"\n\ttmp=1\n\tfor i in $(seq 2 $1); do\n\t\tif (($i % 2 == 0)); then\n\
    \t\t\tres=\"$res, \\\"$(( $i * $tmp ))\\\"\"\n\t\t\ttmp=$(( $i * $tmp ))\n\t\t\
    else\n\t\t\tres=\"$res, \\\"$(( $i * ($i + 1) / 2 ))\\\"\"\n\t\tfi\n\tdone\n\t\
    res=\"$res]\"\n\techo $res", "  declare -a array\n  index=0\n  echo '['\n  for\
    \ ((i=1; i<=$1; i++)); do\n    if (( $i % 2 == 0 )); then\n      array[$index]=$(($i*$i))\n\
    \    else\n      sum=0\n      for ((j=1; j<=$i; j++)); do\n        sum=$(($sum+$j))\n\
    \      done\n      array[$index]=$sum\n    fi\n    if (( $i == $1 )); then\n \
    \     echo \"\\\"${array[$index]}\\\"\"\n    else\n      echo \"\\\"${array[$index]}\\\
    \",\"\n    fi\n    ((index++))\n  done\n  echo ']'", "  # set up the list of nulls\n\
    \  LIST=()\n  for ((i=0; i<$1; i++)); do\n    LIST+=('')\n  done\n  # fill in\
    \ the values\n  # if index is even, use factorial, otherwise use the sum\n  for\
    \ ((i=1; i<=$1; i++)); do\n    if [ $(($i % 2)) -eq 0 ]; then\n      LIST[$(($i-1))]=$(calc\
    \ $i '!' | tr -d '\\n')\n    else\n      LIST[$(($i-1))]=$(calc '1+2+3+...+'$i\
    \ | tr -d '\\n')\n    fi\n  done\n  # map the list elements to a json list, and\
    \ print it\n  python -c \"import json; print(json.dumps($(echo ${LIST[@]})))\"",
  "    local result=\"\"\n    for i in $(seq 1 $1); do\n        if [ $(($i % 2)) -eq\
    \ 0 ]; then\n            # factorial of i:\n            local factorial=1\n  \
    \          for j in $(seq 1 $i); do\n                factorial=$(($factorial *\
    \ $j))\n            done\n            result+=\"\\\"$factorial\\\" \"\n      \
    \  else\n            # sum of [1, i]\n            result+=\"\\\"$(($(seq -s+ $i\
    \ -1 1 | bc)))\\\" \"\n        fi\n    done\n    echo \"[$result]\"", "   # your\
    \ code here\n   if [ $1 -lt 1 ]; then\n      echo \"[]\"\n   else\n      str=\"\
    [\"\n      for(( i=1; i<=$1; i++ )); do\n         if [ $((i%2)) -eq 0 ]; then\n\
    \            prod=1\n            for(( j=1; j<=i; j++ )); do\n               prod=$((prod*j))\n\
    \            done\n            str=$str'\"'$prod'\"'\n         else\n        \
    \    str=$str'\"'$i'\"'\n         fi\n         if [ $i -lt $1 ]; then\n      \
    \      str=$str\",\"\n         fi\n      done\n      str=$str\"]\"\n      echo\
    \ $str\n   fi", "  n=$1\n  # Write your code here\n", "    n=$1\n    for ((i=1;\
    \ i<=n; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n            f=1\n    \
    \        for ((j=1; j<=i; j++)); do\n                f=$((f*j))\n            done\n\
    \            echo \"\\\"$f\\\"\"\n        else\n            sum=0\n          \
    \  for ((j=1; j<=i; j++)); do\n                sum=$((sum+j))\n            done\n\
    \            echo \"\\\"$sum\\\"\"\n        fi\n    done", "\tfor((i=1;i<=$1;i++));\
    \ do\n\t\tif [ $((i%2)) -eq 0 ]; then\n\t\t\tfor((j=i;j>0;j--)); do\n\t\t\t\t\
    result=$((i*j))\n\t\t\tdone\n\t\t\techo \"\\\"$result\\\"\"\n\t\telse\n\t\t\t\
    for((k=1;k<=i;k++)); do\n\t\t\t\tresult=$((k+i))\n\t\t\tdone\n\t\t\techo \"\\\"\
    $result\\\"\"\n\t\tfi\n\tdone", "  # TODO: implement f\n  local result=()\n  local\
    \ count=1\n  local index=0\n  while [ $count -le $1 ]; do\n    if [ $((count %\
    \ 2)) -eq 0 ]; then\n      result[$index]=$(get_factorial $count)\n    else\n\
    \      result[$index]=$(get_sum $count)\n    fi\n    count=$((count + 1))\n  \
    \  index=$((index + 1))\n  done\n  echo ${result[@]}", "  local n=$1\n  local\
    \ result=\"\"\n  for ((i=1; i<=n; i++)); do\n    if ((i % 2 == 0)); then\n   \
    \   factorial=1\n      for ((j=1; j<=i; j++)); do\n        ((factorial *= j))\n\
    \      done\n      result=\"$result \\\"$factorial\\\"\"\n    else\n      sum=0\n\
    \      for ((j=1; j<=i; j++)); do\n        ((sum += j))\n      done\n      result=\"\
    $result \\\"$sum\\\"\"\n    fi\n  done\n  echo \"[$result]\"", "  local n=$1\n\
    \  local output=()\n  local i=1\n  while [ $i -le $n ]; do\n    if [ $(($i % 2))\
    \ -eq 0 ]; then\n      # element is even\n      local prod=1\n      local j=1\n\
    \      while [ $j -le $i ]; do\n        prod=$(($prod * $j))\n        j=$(($j\
    \ + 1))\n      done\n      output+=($prod)\n    else\n      # element is odd\n\
    \      local sum=0\n      local j=1\n      while [ $j -le $i ]; do\n        sum=$(($sum\
    \ + $j))\n        j=$(($j + 1))\n      done\n      output+=($sum)\n    fi\n  \
    \  i=$(($i + 1))\n  done\n  printf \"[\"\n  printf '\"%s\", ' \"${output[@]}\"\
    \n  printf \"]\"", "    if [ $1 -lt 1 ]; then\n        echo \"Invalid Input\"\n\
    \        return\n    fi\n    # declare an array\n    arr=()\n    for ((i=1; i<=$1;\
    \ i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n            arr[$i]=$(factorial\
    \ $i)\n        else\n            arr[$i]=$(sum $i)\n        fi\n    done\n   \
    \ echo ${arr[@]}", '  echo "TODO"', "    # Write your answer between the dashed\
    \ lines.\n    # -------------------------------------------\n    # Write your\
    \ code below\n    ret=\"[\"\n    for i in $(seq $1); do\n        if [[ $((i %\
    \ 2)) -eq 0 ]]; then\n            ret=\"$ret'\\\"$(($(printf \"%s*\" $(seq $i))\
    \ 1))\\\"',\"\n        else\n            ret=\"$ret'\\\"$(($(printf \"%s+\" $(seq\
    \ $i)) 0))\\\"',\"\n        fi\n    done\n    ret=\"${ret%?}]\"\n    echo $ret\n\
    \    # -------------------------------------------", "  n=$1\n  arr=()\n  for\
    \ i in $(seq 1 $n); do\n    if (( $i % 2 == 0 )); then\n      (( index = i - 1\
    \ ))\n      arr[$index]=$(factorial $i)\n    else\n      (( index = i - 1 ))\n\
    \      arr[$index]=$(sum $i)\n    fi\n  done\n  echo ${arr[@]}", "\tlocal i=1\n\
    \tlocal j=1\n\tlocal sum=0\n\tlocal result=\"\"\n\twhile [ $i -le $1 ]\n\tdo\n\
    \t\tif [ $((i % 2)) -eq 0 ]\n\t\tthen\n\t\t\tresult+=\"'\"$i\"',\"\n\t\telse\n\
    \t\t\twhile [ $j -le $i ]\n\t\t\tdo\n\t\t\t\tsum=$((sum + j))\n\t\t\t\tj=$((j\
    \ + 1))\n\t\t\tdone\n\t\t\tresult+=\"'\"$sum\"',\"\n\t\t\tsum=0\n\t\t\tj=1\n\t\
    \tfi\n\t\ti=$((i + 1))\n\tdone\n\techo \"[\"${result::-1}\"]\"", "  # write your\
    \ solution here\n  local i\n  local result=[]\n  for ((i=1; i<=$1; i++)); do\n\
    \      if [ $((i%2)) -eq 0 ]; then\n          result+=(\"$(echo \"$i\" | gawk\
    \ '{printf \"%d\", 1; for (i=2; i<=$1; i++) printf \"*%d\", i}')\")\n      else\n\
    \          result+=(\"$(echo \"$i\" | gawk '{printf \"%d\", 1; for (i=2; i<=$1;\
    \ i++) printf \"+%d\", i}')\")\n      fi\n  done\n  echo \"${result[@]}\"", " \
    \   numbers=()\n    # Your code goes here\n    for i in $(seq $1); do\n      \
    \  j=$((i%2))\n        if [ $j -eq 0 ]; then\n            k=1\n            while\
    \ [ $i -gt 0 ]; do\n                k=$((k*i))\n                i=$((i-1))\n \
    \           done\n            numbers+=($k)\n        else\n            k=0\n \
    \           for i in $(seq $1); do\n                k=$((k+i))\n            done\n\
    \            numbers+=($k)\n        fi\n    done\n    echo \"[$(IFS=,; echo \"\
    ${numbers[*]}\")]\"", "  local n=$1\n  result=()\n  for ((i=1; i<=n; i++)); do\n\
    \    if [[ $((i % 2)) -eq 0 ]]; then\n      factorial=1\n      for ((j=1; j<=i;\
    \ j++)); do\n        factorial=$((factorial * j))\n      done\n      result+=(\"\
    \\\"$factorial\\\"\")\n    else\n      sum=0\n      for ((j=1; j<=i; j++)); do\n\
    \        sum=$((sum + j))\n      done\n      result+=(\"\\\"$sum\\\"\")\n    fi\n\
    \  done\n  echo \"[${result[@]}]\"", "\tlocal result=()\n\tlocal i=1\n\twhile\
    \ [ $i -le $1 ]; do\n\t\tlocal element\n\t\tif [ $((i % 2)) -eq 0 ]; then\n\t\t\
    \t# factorial\n\t\t\telement=1\n\t\t\tlocal j=1\n\t\t\twhile [ $j -le $i ]; do\n\
    \t\t\t\telement=$((element * j))\n\t\t\t\tj=$((j + 1))\n\t\t\tdone\n\t\telse\n\
    \t\t\t# sum\n\t\t\telement=0\n\t\t\tlocal j=1\n\t\t\twhile [ $j -le $i ]; do\n\
    \t\t\t\telement=$((element + j))\n\t\t\t\tj=$((j + 1))\n\t\t\tdone\n\t\tfi\n\t\
    \tresult+=(\"$element\")\n\t\ti=$((i + 1))\n\tdone\n\techo ${result[@]}", "\t\
    factorial=1\n\tresult=\"[\"\n\tfor ((i=1; i<=$1; i++))\n\tdo\n\t\tif [ $(($i %\
    \ 2)) -eq 0 ]\n\t\tthen\n\t\t\tfactorial=$(($factorial * $i))\n\t\t\tresult+=\"\
    \\\"$factorial\\\",\"\n\t\telse\n\t\t\tresult+=\"\\\"$(((($i + 1) * $i) / 2))\\\
    \",\"\n\t\tfi\n\tdone\n\techo ${result::-1}\"]\"", "    if [ \"$1\" -eq 1 ]; then\n\
    \        echo '\"1\"'\n    else\n        i=$1\n        e=$(expr $i % 2)\n    \
    \    if [ \"$e\" -eq 0 ]; then\n            x=$(f \"$(expr $i - 1)\")\n      \
    \      y=$(expr $i - 1)\n            z=$(echo \"$x\" | jq \".[$y]\")\n       \
    \     echo \"$x\" | jq \". += [ $z * $i ]\"\n        else\n            x=$(f \"\
    $(expr $i - 1)\")\n            echo \"$x\" | jq \". += [ $i * ($i + 1) / 2 ]\"\
    \n        fi\n    fi", "    n=$1\n    # write your solution here\n    list1=\"\
    \"\n    for ((i=1; i<=n; i++)); do\n        fact=1\n        sum=0\n        if\
    \ (($i % 2 == 0)); then\n            for ((j=1; j<=i; j++)); do\n            \
    \    fact=$(($fact * $j))\n            done\n            list1=\"$list1 $fact\"\
    \n        else\n            for ((j=1; j<=i; j++)); do\n                sum=$(($sum\
    \ + $j))\n            done\n            list1=\"$list1 $sum\"\n        fi\n  \
    \  done\n    list1=$(echo $list1 | awk '{$1=$1};1')\n    echo \"$list1\"", " \
    \ local n=$1\n  [ -z \"$n\" ] && echo \"Error: parameter 1 is not provided\" &&\
    \ return 1\n  ! [[ \"$n\" =~ ^[0-9]+$ ]] && echo \"Error: parameter 1 is not an\
    \ integer\" && return 1\n  local n=$1\n\n  local f=(\"1\")\n  for ((i=2; i<=n;\
    \ i++)); do\n    if [ $((i%2)) -eq 0 ]; then\n      for ((j=i; j>1; j--)); do\n\
    \        f[i-1]=$((f[i-1]*j))\n      done\n    else\n      for ((j=1; j<=i; j++));\
    \ do\n        f[i-1]=$((f[i-1]+j))\n      done\n    fi\n  done\n\n  echo \"[$(IFS=,;\
    \ echo \"${f[*]}\")]\"", "    declare -a result=()\n    for ((i=1; i<=$1; i++));\
    \ do\n        if [[ $(($i % 2)) -eq 0 ]]; then\n            result[$i]=$(fakt\
    \ \"$i\")\n        else\n            result[$i]=$(sum \"$i\")\n        fi\n  \
    \  done\n    printf '%s\\n' \"${result[@]}\"", "    local -n arr=$1\n    arr[0]=1\n\
    \    arr[1]=1\n    for ((i=2; i<=$1; i++)); do\n        let \"arr[i]=arr[i-1]*i\"\
    \n    done", "  local sum=0\n  local result=()\n  for ((i=1; i<=$1; i++)); do\n\
    \    if ((i % 2 == 0)); then\n      result+=($(factorial $i))\n    else\n    \
    \  for ((j=1; j<=$i; j++)); do\n        sum=$((sum + j))\n      done\n      result+=($sum)\n\
    \      sum=0\n    fi\n  done\n  echo ${result[@]}", "    # Use the following function\
    \ to get the factorial of the even numbers:\n    # factorial() {\n    #    if\
    \ [ $1 -eq 1 ]; then\n    #        echo 1\n    #    else\n    #        echo $((\
    \ $1 * $(factorial $(( $1 - 1 )) ) ))\n    #    fi\n    # }\n    #\n    # When\
    \ you test factorial, don't forget that the name of the function cannot be the\
    \ same\n    # as the name of an executable program (e.g. factorial.sh)\n\n   \
    \ local len=$1\n    local i=1\n    local ret=\"\"\n    while [ $i -le $len ];\
    \ do\n        if [ $(( $i % 2 )) -eq 0 ]; then\n            ret=\"$ret, \\\"$(factorial\
    \ $i)\\\"\"\n        else\n            ret=\"$ret, \\\"$(( ($i * ($i + 1)) / 2\
    \ ))\\\"\"\n        fi\n        ((i++))\n    done\n    echo \"[${ret:1}]\"", " \
    \ # Write your code here\n  res=()\n  i=1\n  while [ $i -le $1 ]\n  do\n    if\
    \ [ $(($i % 2)) == 0 ]\n    then\n      fact=1\n      j=1\n      while [ $j -le\
    \ $i ]\n      do\n        fact=$(($fact * $j))\n        j=$(($j + 1))\n      done\n\
    \      res+=(\"\\\"$fact\\\"\")\n    else\n      sum=0\n      j=1\n      while\
    \ [ $j -le $i ]\n      do\n        sum=$(($sum + $j))\n        j=$(($j + 1))\n\
    \      done\n      res+=(\"\\\"$sum\\\"\")\n    fi\n    i=$(($i + 1))\n  done\n\
    \  echo \"[${res[@]}]\"", "    n=$1\n    result=''\n    for i in $(seq $n); do\n\
    \        # % is modulus in bash:\n        # https://tldp.org/LDP/abs/html/ops.html\n\
    \        if (( i % 2 == 0 )); then\n            result+=\"$(echo $(echo $(fact\
    \ $i)))\"\n        else\n            result+=\"$(echo $(echo $(sum 1 $i)))\"\n\
    \        fi\n        result+=' '\n    done\n    echo $result", "    local i\n\
    \    # your code here\n    declare -a result\n    for ((i=1; i<=$1; i++)); do\n\
    \        if (( $i % 2 == 0 )); then\n            result[$i]=$(( $i * $(f $(( $i\
    \ - 1 ))) ))\n        else\n            result[$i]=$(( $i * ($i + 1) / 2 ))\n\
    \        fi\n    done\n    echo ${result[@]}", "  local array=()\n  local res\n\
    \  local i\n  for ((i=1; i<=$1; i++)); do\n    if (($i % 2 == 0)); then\n    \
    \  res=1\n      for ((j=1; j<=$i; j++)); do\n        res=$(($res * $j))\n    \
    \  done\n    else\n      res=0\n      for ((j=1; j<=$i; j++)); do\n        res=$(($res\
    \ + $j))\n      done\n    fi\n    array+=\"$res\"\n  done\n  echo \"${array[@]}\"",
  "  if [ $1 -lt 1 ]; then echo \"Input must be a positive integer\"; return; fi\n\
    \  local list=()\n  local i=1\n  while [ $i -le $1 ]; do\n    if [ $((i % 2))\
    \ -eq 0 ]; then list+=(\"$(factorial $i)\"); else list+=(\"$(sumOf1To $i)\");\
    \ fi\n    i=$((i + 1))\n  done\n  echo ${list[@]}", "    for ((i=1; i<=$1; i++));\
    \ do\n        if ((i%2==0)); then\n            factorial=1\n            for ((j=1;\
    \ j<=i; j++)); do\n                ((factorial*=j))\n            done\n      \
    \      echo -n \"\\\"${factorial}\\\"\"\n        else\n            result=0\n\
    \            for ((j=1; j<=i; j++)); do\n                ((result+=j))\n     \
    \       done\n            echo -n \"\\\"${result}\\\"\"\n        fi\n        if\
    \ ((i!=$1)); then\n            echo -n ', '\n        fi\n    done", "  test $#\
    \ -ne 1 && echo \"One parameter is required\" && exit 1\n  test $1 -lt 1 && echo\
    \ \"Parameter must be greater than 0\" && exit 1\n  test $1 -gt 11 && echo \"\
    Parameter must be less than 12\" && exit 1\n  local r\n  local i\n  local w\n\
    \  for ((i=1; i<=$1; i++)); do\n    if [ $((i%2)) -eq 0 ]; then\n      r=\"$r\
    \ $i\"\n    else\n      r=\"$r 1\"\n      for ((w=2; w<=$i; w++)); do\n      \
    \  r=\"$r + $w\"\n      done\n    fi\n  done\n  r=$(echo $r | bc)\n  r=$(echo\
    \ \"[$r]\" | sed 's/ /, /g')\n  echo $r", "    n=$1\n    # your code here.\n \
    \   # Don't forget to change the value of result\n    result=[]\n    for ((i=1;\
    \ i<=n; i++)); do\n        if ((i%2==0)); then\n            j=1\n            for\
    \ ((k=1; k<=i; k++)); do\n                j=$((j*k))\n            done\n     \
    \       result+=($j)\n        else\n            result+=($i)\n        fi\n   \
    \ done\n    echo ${result[@]}", "    local n=$1\n    local i=1\n    local result=\"\
    \"\n    while [ $i -le $n ]; do\n        if [ $((i % 2)) -eq 0 ]; then\n     \
    \       local factorial=1\n            local j=1\n            while [ $j -le $i\
    \ ]; do\n                factorial=$((factorial * j))\n                j=$((j\
    \ + 1))\n            done\n            result=\"$result $factorial\"\n       \
    \ else\n            local sum=0\n            local j=1\n            while [ $j\
    \ -le $i ]; do\n                sum=$((sum + j))\n                j=$((j + 1))\n\
    \            done\n            result=\"$result $sum\"\n        fi\n        i=$((i\
    \ + 1))\n    done\n    echo $result", "    # write your code here\n    result=\"\
    \"\n    for (( i=1; i<=$1; i++ )); do\n        if (( $i % 2 == 0 )); then\n  \
    \          result=$result' \"'$(factorial $i)'\"'\n        else\n            result=$result'\
    \ \"'$(even $i)'\"'\n        fi\n    done\n    echo \"[$result]\"", "    # Do\
    \ your stuff here\n    echo \"Implement me!\"", "  if [ $1 -eq 0 ]; then\n   \
    \ echo '[]'\n    return\n  fi\n  n=$1\n  echo \"[\"\n  for i in $(seq 1 $n); do\n\
    \    if [ $((i % 2)) -eq 0 ]; then\n      # even\n      echo -n $(factorial $i)\n\
    \    else\n      # odd\n      echo -n $(sum $i)\n    fi\n    if [ $i -ne $n ];\
    \ then\n      echo -n \", \"\n    fi\n  done\n  echo \"]\"", "    # Write your\
    \ code here\n    i=1\n    for i in $(seq \"$1\")\n    do\n        if [ $((i%2))\
    \ == 0 ]\n        then\n            echo -n '\"'\n            awk \"BEGIN {print\
    \ $i!}\"\n            echo -n '\" '\n        else\n            echo -n '\"'\n\
    \            printf \"%s\" $(seq -s+ $i | bc)\n            echo -n '\" '\n   \
    \     fi\n    done", "  if [ \"$1\" -gt \"0\" ]; then\n    for i in $(seq 1 $1);\
    \ do\n      if [ $(($i % 2)) -eq 0 ]; then\n        j=1\n        for k in $(seq\
    \ 1 $i); do\n          j=$(($j * $k))\n        done\n        echo '\"'$j'\"'\n\
    \      else\n        j=0\n        for k in $(seq 1 $i); do\n          j=$(($j\
    \ + $k))\n        done\n        echo '\"'$j'\"'\n      fi\n    done\n  fi", " \
    \   local -i n i result\n    n=$1\n    for ((i=1; i<=n; i++)); do\n        if\
    \ ((i % 2 == 0)); then\n            result=1\n            for ((j=1; j<=i; j++));\
    \ do\n                ((result *= j))\n            done\n        else\n      \
    \      result=0\n            for ((j=1; j<=i; j++)); do\n                ((result\
    \ += j))\n            done\n        fi\n        echo '\"'$result'\"'\n    done",
  '    # your code here', "  # WRITE YOUR CODE BETWEEN THESE LINES\n  # -----------------------------------\n\
    \  f=0\n  for (( i=1; i<=$1; i++ )); do\n    if (( i % 2 == 0 )); then\n     \
    \ declare -a arr\n      a=1\n      for (( j=1; j<=$i; j++ )); do\n        a=$((\
    \ a * j ))\n        arr+=($a)\n      done\n      f=${arr[-1]}\n    else\n    \
    \  declare -a arr\n      a=0\n      for (( j=1; j<=$i; j++ )); do\n        a=$((\
    \ a + j ))\n        arr+=($a)\n      done\n      f=${arr[-1]}\n    fi\n    echo\
    \ \"\\\"$f\\\"\"\n  done\n  # -----------------------------------", "\tn=$1\n\t\
    output=\"\"\n\tfor ((i=1; i<=$n; i++)); do\n\t\tif (( i % 2 == 0 )); then\n\t\t\
    \toutput+=\"$((i*(i-1)))\"\n\t\telse\n\t\t\ts=0\n\t\t\tfor ((j=1; j<=i; j++));\
    \ do\n\t\t\t\ts=$((s+j))\n\t\t\tdone\n\t\t\toutput+=\"$s\"\n\t\tfi\n\t\toutput+=\"\
    \ \"\n\tdone\n\techo \"[$output]\"", "  local n=\"$1\"\n  for ((i=1; i<=n; i++));\
    \ do\n    if ((i%2==0)); then\n      ((f=1))\n      for ((j=1; j<=i; j++)); do\n\
    \        ((f*=j))\n      done\n      printf '\"%s\" ' \"$f\"\n    else\n     \
    \ ((s=0))\n      for ((j=1; j<=i; j++)); do\n        ((s+=j))\n      done\n  \
    \    printf '\"%s\" ' \"$s\"\n    fi\n  done", "  local answer\n  if [[ $1 =~\
    \ ^[0-9]+$ ]]; then\n    if [[ $1 -lt 1 ]]; then\n      echo '\"Error\"'\n   \
    \ else\n      for ((i=1; i<=$1; i++)); do\n        if ((i%2==0)); then\n     \
    \     answer[$i]=$(factorial $i)\n        else\n          answer[$i]=$(rangeSum\
    \ $i)\n        fi\n      done\n      echo \"['\"${answer[*]}\"']\"\n    fi\n \
    \ else\n    echo '\"Error\"'\n  fi", "   # Write your code here\n   \n   \n\n\
    \   ", "    # TODO implement this function\n    [[ $1 == \"\" ]] && echo \"Please\
    \ enter a number\" && exit 1\n    [[ ! $1 =~ ^-?[0-9]+$ ]] && echo \"The parameter\
    \ is not an integer\" && exit 1\n    [[ $1 -lt 1 ]] && echo \"Enter a number greater\
    \ than 0\" && exit 1\n    declare -a arr\n    arr[0]=1\n    for i in $(seq 1 $1)\n\
    \    do\n        if [[ $((i%2)) -eq 0 ]]\n        then\n            arr[$i]=$(echo\
    \ 1 $(seq 2 $i) | tr ' ' '*' | bc)\n        else\n            arr[$i]=$(echo $(seq\
    \ 1 $i) | tr ' ' '+' | bc)\n        fi\n    done\n    echo ${arr[@]}", "    local\
    \ list=\"\"\n    local i=1\n    while [ $i -le $1 ]; do\n        if [ $((i % 2))\
    \ -eq 0 ]; then\n            list=\"$list $(factorial $i)\"\n        else\n  \
    \          list=\"$list $(sum $i)\"\n        fi\n        ((i++))\n    done\n \
    \   echo $list", "    ret=[]\n    for ((i=1; i<=$1; i++)); do\n        res=$(($i\
    \ % 2))\n        if [[ \"$res\" -eq 0 ]]; then\n            num=$(fatorial $i)\n\
    \        else\n            num=$(soma $i)\n        fi\n        ret+=(\"\\\"$num\\\
    \"\")\n    done\n    echo \"[${ret[@]}]\"", "    declare -a arr\n    for (( i=1;\
    \ i<=$1; i++ ))\n    do\n        if [ $(( i % 2 )) -eq 0 ]\n        then\n   \
    \         arr+=($( factorial \"$i\" ))\n        else\n            arr+=($( sum\
    \ \"$i\" ))\n        fi\n    done\n    echo \"['\"${arr[@]}\"']\"", "\tfor i in\
    \ $(seq $1); do\n\t\tif [[ $(($i % 2)) -eq 0 ]]; then\n\t\t\techo $i\n\t\telse\n\
    \t\t\techo $(seq -s '+' $i | bc)\n\t\tfi\n\tdone", "  n=$1\n  for i in $(seq 1\
    \ $n); do\n    if [[ $((i % 2)) == 0 ]]; then\n      # do a factorial\n      sum=1\n\
    \      for j in $(seq 1 $i); do\n        sum=$((sum * j))\n      done\n      echo\
    \ '\"'$sum'\"'\n    else\n      # do a sum\n      sum=0\n      for j in $(seq\
    \ 1 $i); do\n        sum=$((sum + j))\n      done\n      echo '\"'$sum'\"'\n \
    \   fi\n  done", "    res=()\n    for ((i=1; i<=$1; i++)); do\n        if [ $((\
    \ i % 2 )) -eq 0 ]; then\n            res[$i]=$(echo $(echo $(echo 1 2 $(seq 3\
    \ $i) | tr ' ' '*')) | bc)\n        else\n            res[$i]=$(echo $(echo 1\
    \ $(seq 2 $i) | tr ' ' '+'))\n        fi\n    done\n    echo \"${res[@]}\"", " \
    \ if [ $1 -lt 1 ]; then echo '[]'; fi\n  if [ $1 -eq 1 ]; then echo '[\"1\"]';\
    \ fi\n  # you code goes here\n  L=()\n  i=1\n  while [ $i -le $1 ]; do\n    if\
    \ [ $(($i % 2)) -eq 0 ]; then\n      L+=($(factorial $i))\n    else\n      L+=($(sum\
    \ $i))\n    fi\n    i=$(($i + 1))\n  done\n  echo \"${L[@]}\"", "    # write here\n\
    \    var=1\n    for((i=1;i<=$1;i++))\n    do\n      if [[ $(($i%2)) -eq 0 ]]\n\
    \      then\n        for(( j=1;j<=$i;j++))\n        do\n          var=$(($var*$j))\n\
    \        done\n        arr[$i]=$var\n        var=1\n      else\n        var=0\n\
    \        for(( j=1;j<=$i;j++))\n        do\n          var=$(($var+$j))\n     \
    \   done\n        arr[$i]=$var\n      fi\n    done\n    echo ${arr[@]}", "   \
    \ # Implement me!\n    temp=\"\"\n    for (( i=1; i<=$1; i++ ))\n    do\n    \
    \    if [ $(($i%2)) -eq 0 ]\n        then\n            temp=$temp',\"'$(factorial\
    \ \"$i\")'\"'\n        else\n            temp=$temp',\"'$(sum \"$i\")'\"'\n  \
    \      fi\n    done\n    echo '['${temp:1}']'", "    local -n _1=$1\n    local\
    \ _2\n    local _3\n    local _4\n    local _5\n    local _6\n    local _7\n \
    \   local _8\n    local _9\n    local _10\n    local _11\n    local _12\n    local\
    \ _13\n    local _14\n    local _15\n    local _16\n    local _17\n    local _18\n\
    \    local _19\n    local _20\n    local _21\n    local _22\n    local _23\n \
    \   local _24\n    local _25\n    local _26\n    local _27\n    local _28\n  \
    \  local _29\n    local _30\n    local _31\n    local _32\n    local _33\n   \
    \ local _34\n    local _35\n    local _36\n    local _37\n    local _38\n    local\
    \ _39\n    local _40\n    local _41\n    local _42\n    local _43\n    local _44\n\
    \    local _45\n    local _46\n    local _47\n    local _48\n    local _49\n \
    \   local _50\n    local _51\n    local _52\n    local _53\n    local _54\n  \
    \  local _55\n    local _56\n    local _57\n    local _58\n    local _59\n   \
    \ local _60\n    local _61\n    local _62\n    local _63\n    local _64\n    local\
    \ _65\n    local _66\n    local _67\n    local _68\n    local _69\n    local _70\n\
    \    local _71\n    local _72\n    local _73\n    local _74\n    local _75\n \
    \   local _76\n    local _77\n    local _78\n    local _79\n    local _80\n  \
    \  local _81\n    local _82\n    local _83\n    local _84\n    local _85\n   \
    \ local _86\n    local _87\n    local _88\n    local _89\n    local _90\n    local\
    \ _91\n    local _92\n    local _93\n    local _94\n    local _95\n    local _96\n\
    \    local _97\n    local _98\n    local _99\n    local _100\n    for _2 in {1",
  "    res=()\n    for i in $(seq 1 $1); do\n        if (( i % 2 == 0 )); then\n \
    \           res+=($(factorial $i))\n        else\n            res+=($(summation\
    \ $i))\n        fi\n    done\n    echo ${res[@]}", "  n=$1\n  result=\"\"\n  for\
    \ i in $(seq 1 \"$n\"); do\n    factorial=1\n    for j in $(seq 1 \"$i\"); do\n\
    \      factorial=$((factorial * j))\n    done\n    if [ $((i % 2)) -eq 0 ]; then\n\
    \      result=\"$result, $factorial\"\n    else\n      result=\"$result, $i\"\n\
    \    fi\n  done\n  echo \"[$(echo $result | cut -c 2-)]\"", "    str=\"\"\n  \
    \  for i in $(seq 1 $1); do\n        # check if i is even or odd\n        if (($i\
    \ % 2 == 0)); then\n            fact=1\n            for j in $(seq 1 $i); do\n\
    \                fact=$(($fact * $j))\n            done\n            str+='\"\
    '$fact'\"'\n        else\n            sum=0\n            for j in $(seq 1 $i);\
    \ do\n                sum=$(($sum + $j))\n            done\n            str+='\"\
    '$sum'\"'\n        fi\n        if [ $i -lt $1 ]; then\n            str+=\",\"\n\
    \        fi\n    done\n    echo \"[$str]\"", "\tn=$1\n\ti=1\n\tlist=()\n\twhile\
    \ [ $i -le $n ]\n\tdo\n\t\tif [ $((i%2)) -eq 0 ]\n\t\tthen\n\t\t\tm=$((i))\n\t\
    \t\tj=1\n\t\t\twhile [ $j -lt $i ]\n\t\t\tdo\n\t\t\t\tm=$((m*j))\n\t\t\t\tj=$((j+1))\n\
    \t\t\tdone\n\t\t\tlist+=(\"\\\"$m\\\"\")\n\t\telse\n\t\t\tm=$((i))\n\t\t\tj=1\n\
    \t\t\twhile [ $j -lt $i ]\n\t\t\tdo\n\t\t\t\tm=$((m+j))\n\t\t\t\tj=$((j+1))\n\t\
    \t\tdone\n\t\t\tlist+=(\"\\\"$m\\\"\")\n\t\tfi\n\t\ti=$((i+1))\n\tdone\n\techo\
    \ \"${list[@]}\"", "    # Write your solution here.\n    # [1 * 1 * 2 * 3 * 4\
    \ * 5]\n    local -a output\n    for ((i=1; i<=$1; i++)); do\n        local fact=1\n\
    \        for ((j=2; j<=i; j++)); do\n            fact=$((fact * j))\n        done\n\
    \        output+=($(echo $fact))\n    done\n    echo ${output[@]}", "    nums=\"\
    \"\n    number=$1\n    index=1\n    while [ $index -le $number ]\n    do\n   \
    \     if [ $(($index % 2)) == 0 ]\n        then\n            nums=\"$nums $(factorial\
    \ $index)\"\n        else\n            nums=\"$nums $(sum_to $index)\"\n     \
    \   fi\n        index=$(($index + 1))\n    done\n    echo $nums", "\tre='^[0-9]+$'\n\
    \tif ! [[ $1 =~ $re ]] ; then\n  \t\techo \"error: Not a number\" >&2; exit 1\n\
    \tfi\n\tlocal r=1\n\tlocal rr=1\n\tlocal ss=1\n\tlocal result=''\n\tfor (( i=1;\
    \ i<=$1; i++ ))\n\tdo\n\t\tif [[ $((i%2)) == 0 ]]; then\n\t\t\tfor (( j=1; j<=$i;\
    \ j++ ))\n\t\t\tdo\n\t\t\t\tr=$((r*j))\n\t\t\tdone\n\t\t\tresult+=\"\\\"$r\\\"\
    ,\"\n\t\t\tr=1\n\t\telse\n\t\t\tfor (( j=1; j<=$i; j++ ))\n\t\t\tdo\n\t\t\t\t\
    rr=$((rr+j))\n\t\t\tdone\n\t\t\tresult+=\"\\\"$rr\\\",\"\n\t\t\trr=1\n\t\tfi\n\
    \tdone\n\tresult=${result::-1}\n\techo \"[$result]\"", "  let n=$1\n  out=\"\"\
    \n  for ((i=1; i<=n; i++)); do\n    if ((i%2 == 0)); then\n      fac=1\n     \
    \ for ((j=1; j<=i; j++)); do\n        let fac=fac*j\n      done\n      out=$out'\"\
    '$fac'\"'\n    else\n      sum=0\n      for ((j=1; j<=i; j++)); do\n        let\
    \ sum=sum+j\n      done\n      out=$out'\"'$sum'\"'\n    fi\n    if ((i<n)); then\n\
    \      out=$out\", \"\n    fi\n  done\n  echo \"[\"$out\"]\"", "    n=$1\n   \
    \ result=\"[\"\n    for ((i=1; i<=n; i++)); do\n        if [ $((i%2)) -eq 0 ];\
    \ then\n            factorial=1\n            for ((j=1; j<=i; j++)); do\n    \
    \            factorial=$((factorial*j))\n            done\n            result+=\"\
    \\\"$factorial\\\",\"\n        else\n            result+=\"\\\"$i\\\",\"\n   \
    \     fi\n    done\n    echo \"${result::-1}]\"", "  declare -i n=$1\n  declare\
    \ -a arr\n  for ((i=1; i<=n; i++)); do\n    if ((i%2==0)); then\n      arr+=($(factorial\
    \ $i))\n    else\n      arr+=($(summation $i))\n    fi\n  done\n  echo $arr",
  "  # your code here\n  eval echo \\$\\{a\\[\\@\\]\\}", "  local i=1\n  while [ $i\
    \ -le $1 ]; do\n    if [ $(($i % 2)) -eq 0 ]; then\n      # factorial\n      local\
    \ n=$i\n      local f=1\n      while [ $n -gt 0 ]; do\n        ((f *= n))\n  \
    \      ((n--))\n      done\n      echo -n '\"'$f'\"'\n    else\n      # sum from\
    \ 1 to i\n      local n=$i\n      local s=0\n      while [ $n -gt 0 ]; do\n  \
    \      ((s += n))\n        ((n--))\n      done\n      echo -n '\"'$s'\"'\n   \
    \ fi\n    [ $i -lt $1 ] && echo -n ', '\n    ((i++))\n  done", "  # Bash loop\
    \ from 1 to $1\n  for ((i=1; i<=$1; i++)); do\n    # If $i is even\n    if ((\
    \ i % 2 == 0 )); then\n      # Print the factorial of $i\n      printf %s \"\\\
    \"$(for ((j=1; j<=i; j++)); do printf %s $j; done | awk '{n=1;for(i=1;i<=NF;i++)n*=$i;print\
    \ n}')\\\"\"\n    else\n      # Print the sum of numbers from 1 to $i\n      printf\
    \ %s \"\\\"$(seq $i | awk '{s+=$1}END{print s}')\\\"\"\n    fi\n    # If it's\
    \ not the last element, print a comma\n    if (( i < $1 )); then\n      printf\
    \ ,\n    fi\n  done", "    local result=()\n    local input=$1\n    if [[ $input\
    \ =~ ^[0-9]+$ ]]; then\n        for (( i=1; i<=$input; i++ )); do\n          \
    \  if (( $i % 2 == 0 )); then\n                # compute factorial\n         \
    \       local factorial=1\n                for (( j=1; j<=$i; j++ )); do\n   \
    \                 factorial=$(( factorial * j ))\n                done\n     \
    \           result+=($factorial)\n            else\n                # compute\
    \ sum from 1 to i\n                local sum=0\n                for (( j=1; j<=$i;\
    \ j++ )); do\n                    sum=$(( sum + j ))\n                done\n \
    \               result+=($sum)\n            fi\n        done\n    fi\n    echo\
    \ ${result[@]}", "    local tmp_array=()\n    for((i=1;i<=$1;i++)); do\n     \
    \   (( $i % 2 == 0 )) && tmp_array+=($(echo $(echo \"$i\" | tr -d '\"')! | bc))\
    \ || tmp_array+=($(echo $(((1+$i)*$i/2))))\n    done\n    echo \"${tmp_array[@]}\"",
  "\tdeclare -a array\n\tfor (( i=1; i<=$1; i++ ))\n\tdo\n\t\tif [ $((i%2)) -eq 0\
    \ ]\n\t\tthen\n\t\t\tfact=1\n\t\t\tfor (( j=1; j<=i; j++ ))\n\t\t\tdo\n\t\t\t\t\
    fact=$((fact*j))\n\t\t\tdone\n\t\t\tarray[$i-1]=$fact\n\t\telse\n\t\t\tsum=0\n\
    \t\t\tfor (( j=1; j<=i; j++ ))\n\t\t\tdo\n\t\t\t\tsum=$((sum+j))\n\t\t\tdone\n\
    \t\t\tarray[$i-1]=$sum\n\t\tfi\n\tdone\n\tfor (( k=0; k<$1; k++ ))\n\tdo\n\t\t\
    echo -n '\"'${array[$k]}'\"'\n\t\tif [ $k -ne $(( $1 - 1 )) ]\n\t\tthen\n\t\t\t\
    echo -n ', '\n\t\tfi\n\tdone\n\techo", '    return 0', "    result=\"\"\n    n=$1\n\
    \    for ((i=1; i<=n; i++)); do\n        if [ $(( i % 2 )) -eq 0 ]; then\n   \
    \         factorial=1\n            for ((j=1; j<=i; j++)); do\n              \
    \  factorial=$(( factorial * j ))\n            done\n            if [ -z \"$result\"\
    \ ]; then\n                result='\"'$factorial'\"'\n            else\n     \
    \           result=$result\", \"\n                result=$result'\"'$factorial'\"\
    '\n            fi\n        else\n            sum=0\n            for ((j=1; j<=i;\
    \ j++)); do\n                sum=$(( sum + j ))\n            done\n          \
    \  if [ -z \"$result\" ]; then\n                result='\"'$sum'\"'\n        \
    \    else\n                result=$result\", \"\n                result=$result'\"\
    '$sum'\"'\n            fi\n        fi\n    done\n    echo '['$result']'", "  \
    \  local n=$1\n    local  i=1\n    while [ $i -le $n ]\n    do\n        if [ $((i%2))\
    \ -eq 0 ]\n        then\n            ans=$((i*(i-1)))\n            i=$((i+1))\n\
    \            echo $ans\n        else\n            sum=0\n            for (( j=1;\
    \ j<=i; j++ ))\n            do\n                sum=$((sum+j))\n            done\n\
    \            i=$((i+1))\n            echo $sum\n        fi\n    done", "    #\
    \ write your solution here\n    declare -a list\n    for (( i=1; i<=$1; i++ ));\
    \ do\n        if [ $(($i % 2)) -eq 0 ]; then\n            res=1\n            for\
    \ (( j=1; j<=$i; j++ )); do\n                res=$(($res * $j))\n            done\n\
    \            list[$i]=$res\n        else\n            res=0\n            for ((\
    \ j=1; j<=$i; j++ )); do\n                res=$(($res + $j))\n            done\n\
    \            list[$i]=$res\n        fi\n    done\n    echo \"${list[@]}\"", "\t\t",
  "    # Write your code here\n    # declare a local string to store the final answer\n\
    \    ans=\"\"\n    # iterate from 1 to the given n\n    for i in $(seq 1 $1);\n\
    \    do\n        # if i is even\n        if (( $i % 2 == 0 ));\n        then\n\
    \            # find its factorial and add it to the string ans\n            f=$(factorial\
    \ $i)\n            ans+=\"\\\"$f\\\" \"\n        else\n            # find its\
    \ sum and add it to the string ans\n            s=$(sum $i)\n            ans+=\"\
    \\\"$s\\\" \"\n        fi\n    done\n    # use echo to print the final answer\n\
    \    echo [$ans]", "\t# write your code here\n\tlocal i=1\n\tlocal result=\"\"\
    \n\twhile [ $i -le $1 ]; do\n\t\tif [ $((i % 2)) -eq 0 ]; then\n\t\t\tresult+=\"\
    $(factorial $i),\"\n\t\telse\n\t\t\tresult+=\"$(num_sum $i),\"\n\t\tfi\n\t\ti=$((i\
    \ + 1))\n\tdone\n\tresult=\"[${result%?}]\"\n\techo $result", "\tlocal n=$1; shift\n\
    \tlocal i=1; local a=(); local x=0\n\twhile [ $i -le $n ]; do\n\t\tlet x=$i/2\n\
    \t\tif [ $((x*2)) -eq $i ]; then\n\t\t\t# factorial\n\t\t\tlet x=1\n\t\t\twhile\
    \ [ $i -gt 0 ]; do\n\t\t\t\tlet x=$x*$i\n\t\t\t\tlet i=$i-1\n\t\t\tdone\n\t\t\t\
    let i=$i+1\n\t\telse\n\t\t\t# sum\n\t\t\tlet x=0\n\t\t\twhile [ $i -gt 0 ]; do\n\
    \t\t\t\tlet x=$x+$i\n\t\t\t\tlet i=$i-1\n\t\t\tdone\n\t\t\tlet i=$i+1\n\t\tfi\n\
    \t\ta+=(\"$x\")\n\t\tlet i=$i+1\n\tdone\n\techo \"${a[@]}\"", "  #write your code\
    \ here\n  IFS=', '; # comma is set as delimiter\n  declare -a ResultArray; # \
    \ array to store the result\n  for (( i=1; i<=$1; i++ ))\n  do\n    if [ $((i%2))\
    \ -eq 0 ] # if i is even\n    then\n      tmp=1;\n      for (( j=1; j<=$i; j++\
    \ ))\n      do\n        tmp=$(( $tmp * $j ))\n      done\n      ResultArray[$i-1]=$tmp;\n\
    \    else\n      ResultArray[$i-1]=$(( $i * ($i+1) / 2 ))\n    fi\n  done\n  echo\
    \ \"[${ResultArray[*]}]\" # echo the result", "  # Insert your code here\n  SIZE=$1\n\
    \  array=()\n  for ((i=1; i<=SIZE; i++)); do\n    if [ $(($i % 2)) -eq 0 ]; then\n\
    \      j=1\n      for ((k=1; k<=i; k++)); do\n        ((j *= k))\n      done\n\
    \      array+=(j)\n    else\n      array+=($(($i * $(($i + 1)) / 2)))\n    fi\n\
    \  done\n  echo ${array[@]}", "    list=()\n    for (( i=1; i<=$1; i++ ))\n  \
    \  do\n        #check if i is even\n        rem=$(( $i % 2 ))\n        if [ $rem\
    \ -eq 0 ]\n        then\n            #find factorial\n            fact=1\n   \
    \         for (( j=1; j<=$i; j++ ))\n            do\n                fact=$((\
    \ $fact * $j ))\n            done\n            list+=$fact\n        else\n   \
    \         #find sum\n            sum=0\n            for (( j=1; j<=$i; j++ ))\n\
    \            do\n                sum=$(( $sum + $j ))\n            done\n    \
    \        list+=$sum\n        fi\n    done\n    echo $list", "    # set the initial\
    \ values of array elements\n    factorial=1\n    sum=0\n    for ((i=1; i<=$1;\
    \ i++)); do\n        if ((i%2==0)); then\n            # factorial of i\n     \
    \       for ((j=2; j<=i; j++)); do\n                factorial=$(($factorial*$j))\n\
    \            done\n            # add factorial to array\n            arr+=(\"\\\
    \"$factorial\\\"\")\n            # reset factorial\n            factorial=1\n\
    \        else\n            # sum of integers from 1 to i\n            for ((j=1;\
    \ j<=i; j++)); do\n                sum=$(($sum+$j))\n            done\n      \
    \      # add sum to array\n            arr+=(\"\\\"$sum\\\"\")\n            #\
    \ reset sum\n            sum=0\n        fi\n    done\n    echo ${arr[@]}", " \
    \ local result=\"\"\n  for ((i=1; i<=$1; i++)); do\n    if (( $i % 2 == 0)); then\n\
    \      factorial=1\n      for ((j=1; j<=$i; j++)); do\n        factorial=$(($factorial\
    \ * $j))\n      done\n      result=\"$result '\\\"$factorial\\\"'\"\n    else\n\
    \      sum=0\n      for ((j=1; j<=$i; j++)); do\n        sum=$(($sum + $j))\n\
    \      done\n      result=\"$result '\\\"$sum\\\"'\"\n    fi\n  done\n  echo \"\
    [$result]\"", "  local out=\"\"\n  for ((i=1; i<=$1; i++)); do\n    if (( i %\
    \ 2 == 0 )); then\n      out=\"$out $(($i*$i))\"\n    else\n      out=\"$out $(seq\
    \ -s+ $i | bc)\"\n    fi\n  done\n  echo \"[$out]\"", "    n=$1\n    result=()\n\
    \    for ((i=1; i<=n; i++)); do\n        if ((i % 2 == 0)); then\n           \
    \ value=1\n            for ((j=2; j<=i; j++)); do\n                value=$((value\
    \ * j))\n            done\n        else\n            value=0\n            for\
    \ ((j=1; j<=i; j++)); do\n                value=$((value + j))\n            done\n\
    \        fi\n        result+=(\"\\\"$value\\\"\")\n    done\n    echo \"[${result[@]}]\"",
  "    n=$1\n\n    # Write your code here\n    factorial=1\n    sum=0\n    for ((i=1;\
    \ i<=n; i++))\n    do\n        if ((i%2==0))\n        then\n            sum=0\n\
    \            for ((j=1; j<=i; j++))\n            do\n                sum=$((sum+j))\n\
    \            done\n            echo '\"'$sum'\"'\n        else\n            factorial=$((factorial*i))\n\
    \            echo '\"'$factorial'\"'\n        fi\n    done", "  echo '[\"1\"]'",
  "  echo \\[\n  for (( i=1; i<=$1; i++ )); do\n    if [ $(($i % 2)) -eq 0 ]; then\n\
    \      echo $(echo \"${i}\" | awk '{ total = 1; for (i=1; i<=$1; i++) { total\
    \ *= i } print total }')\n    else\n      echo $(echo \"${i}\" | awk '{ total\
    \ = 0; for (i=1; i<=$1; i++) { total += i } print total }')\n    fi\n    if [\
    \ $i -ne $1 ]; then\n      echo ,\n    fi\n  done\n  echo \\]", "    n=$1\n  \
    \  result=()\n    for i in $(seq 1 $n); do\n        if ((i % 2 == 0)); then\n\
    \            result[$i]=$(factorial $i)\n        else\n            result[$i]=$(sum_to\
    \ $i)\n        fi\n    done\n    echo \"${result[@]}\"", "    # sum of numbers\
    \ from 1 to $1\n    my_sum=0\n    for ((i=1; i<=$1; i++)); do\n        my_sum=$((my_sum\
    \ + i))\n    done\n\n    # factorial of $1\n    my_factorial=1\n    for ((i=1;\
    \ i<=$1; i++)); do\n        my_factorial=$((my_factorial * i))\n    done\n\n \
    \   result=()\n    for ((i=1; i<=$1; i++)); do\n        if (($i % 2 == 0)); then\n\
    \            result+=($my_factorial)\n        else\n            result+=($my_sum)\n\
    \        fi\n    done\n\n    echo \"${result[@]}\"", "    # Write your code here\n\
    \    if [[ $1 -eq 0 ]]; then\n        echo 0\n    elif [[ $1 -eq 1 ]]; then\n\
    \        echo 1\n    else\n        local x=1\n        for ((i=2;i<=$1;i++)); do\n\
    \            let x*=i\n        done\n        echo $x\n    fi", "  # implement\
    \ the function here\n  for (( i=1; i<=$1; i++ ))\n  do\n    if (( i%2==0 ))\n\
    \    then\n      declare -i fact=1\n      for (( n=1; n<=i; n++ ))\n      do\n\
    \        fact=$(($fact*$n))\n      done\n      echo $fact\n    else\n      declare\
    \ -i sum=0\n      for (( n=1; n<=i; n++ ))\n      do\n        sum=$(($sum+$n))\n\
    \      done\n      echo $sum\n    fi\n  done", "    local results=()\n    for\
    \ i in $(seq 1 $1); do\n        if [[ $(($i % 2)) -eq 0 ]]; then\n           \
    \ fact=1\n            for j in $(seq 2 $i); do\n                fact=$(($fact\
    \ * $j))\n            done\n            results[$i]=$fact\n        else\n    \
    \        result=0\n            for j in $(seq 1 $i); do\n                result=$(($result\
    \ + $j))\n            done\n            results[$i]=$result\n        fi\n    done\n\
    \    echo ${results[@]}", "\tif [[ \"$1\" -gt \"0\" ]]; then\n\t\tlocal result=\"\
    [\\\"1\\\"\"\n\t\tfor i in $(seq 2 $1); do\n\t\t\tif [[ $((i % 2)) -eq 0 ]]; then\n\
    \t\t\t\tlocal tmp=$i\n\t\t\t\tfor j in $(seq $((i - 1)) -1 1); do\n\t\t\t\t\t\
    ((tmp *= j))\n\t\t\t\tdone\n\t\t\t\tresult=\"$result, \\\"$tmp\\\"\"\n\t\t\telse\n\
    \t\t\t\tlocal tmp=0\n\t\t\t\tfor j in $(seq $i); do\n\t\t\t\t\t((tmp += j))\n\t\
    \t\t\tdone\n\t\t\t\tresult=\"$result, \\\"$tmp\\\"\"\n\t\t\tfi\n\t\tdone\n\t\t\
    result=\"$result]\"\n\t\techo $result\n\tfi", "  declare -a list\n  if [[ -z $1\
    \ ]]; then\n    return 0\n  fi\n  n=$1\n  i=1\n  while [[ $i -le $n ]]; do\n \
    \   if [[ $((i % 2)) -eq 0 ]]; then\n      list[$i-1]=$(($i*$(($i-1))))\n    else\n\
    \      j=1\n      sum=0\n      while [[ $j -le $i ]]; do\n        sum=$(($sum+$j))\n\
    \        j=$(($j+1))\n      done\n      list[$i-1]=$sum\n    fi\n    i=$(($i+1))\n\
    \  done\n  echo ${list[@]}", '  :', "  # bash does not have a native multiplication\
    \ function, so we have to implement it.\n  function multiplication {\n    # multiplication\
    \ $1 $2\n    result=1\n    counter=$2\n    while [ $counter -gt 0 ]\n    do\n\
    \      result=$(($result * $1))\n      counter=$(($counter - 1))\n    done\n \
    \   echo $result\n  }\n\n  # bash does not have a native sum function, so we have\
    \ to implement it.\n  function sum {\n    # sum $1 $2\n    result=0\n    counter=$2\n\
    \    while [ $counter -gt 0 ]\n    do\n      result=$(($result + $1))\n      counter=$(($counter\
    \ - 1))\n    done\n    echo $result\n  }\n\n  list=''\n  for i in $(seq 1 $1)\n\
    \  do\n    if (( $i % 2 == 0 ))\n    then\n      # append to list the result of\
    \ multiplication of all numbers from 1 to i\n      list=\"$list,$(multiplication\
    \ $i $i)\"\n    else\n      # append to list the result of sum of all numbers\
    \ from 1 to i\n      list=\"$list,$(sum $i $i)\"\n    fi\n  done\n  # remove the\
    \ first comma and put it into quotes\n  echo \"[$(echo $list | cut -c 2-)]\"",
  "    local -n __result=$1\n    local -i n=$2\n    local -i i=1\n\n    while (( i\
    \ <= n )); do\n        if (( i % 2 == 0 )); then\n            __result[i]=$((\
    \ 1 * 2 * i ))\n        else\n            __result[i]=$(( (i + 1) * i / 2 ))\n\
    \        fi\n        (( i++ ))\n    done", "  # YOUR CODE HERE\n  arr=()\n  for\
    \ i in $(seq 1 $1); do\n    if [ $(($i % 2)) -eq 0 ]; then\n      arr+=(\"$(($i\
    \ * $i))\")\n    else\n      arr+=(\"$(($(($i * ($i + 1))) / 2))\")\n    fi\n\
    \  done\n  echo \"[${arr[@]}]\"", "  if [ $1 -lt 1 ]; then\n    return\n  fi\n\
    \  # 1, 2\n  if [ $1 -lt 3 ]; then\n    echo \"\\\"$1\\\"\"\n    return\n  fi\n\
    \  # 3, 4\n  if [ $1 -lt 5 ]; then\n    echo \"\\\"$1\\\"\"\n    echo \"\\\"$(((1\
    \ * 2 * 3) * 2))\\\"\"\n    return\n  fi\n  # 5\n  echo \"\\\"$1\\\"\"\n  echo\
    \ \"\\\"$(((1 * 2 * 3) * 2))\\\"\"\n  echo \"\\\"$(((1 * 2 * 3 * 4) * 2))\\\"\"\
    \n  n=3\n  for i in $(seq 5 $1); do\n    if [ $((n % 2)) -eq 0 ]; then\n     \
    \ fact=$(((1 * 2 * 3 * 4 * 5) * 2))\n    else\n      fact=$(($i + $(($i - 1))\
    \ + $(($i - 2)) + $(($i - 3)) + $(($i - 4))))\n    fi\n    echo \"\\\"$fact\\\"\
    \"\n    ((n++))\n  done", "  local i=1\n  local seq=\"\"\n  while [ $i -le $1\
    \ ]; do\n    if [ $(($i % 2)) -eq 0 ]; then\n      # even\n      seq+=$(($(seq\
    \ -s \"*\" 1 $i | bc) ))\n    else\n      # odd\n      seq+=$(($(seq -s \"+\"\
    \ 1 $i | bc) ))\n    fi\n    if [ $i -lt $1 ]; then\n      seq+=\", \"\n    fi\n\
    \    i=$(($i + 1))\n  done\n  echo '['$seq']'", "    # your code goes here\n \
    \   echo []", "  # TODO: Implement this\n  local out=''\n  for (( i=1; i<=$1;\
    \ i++ )); do\n    if (( i % 2 == 0 )); then\n      local product=1\n      for\
    \ (( j=1; j<=i; j++ )); do\n        product=$(( $product * $j ))\n      done\n\
    \      out=\"$out $product\"\n    else\n      local sum=0\n      for (( j=1; j<=i;\
    \ j++ )); do\n        sum=$(( $sum + $j ))\n      done\n      out=\"$out $sum\"\
    \n    fi\n  done\n  echo \"[$out]\"", "    numbers=()\n    for ((i=1; i<=$1; i++));\
    \ do\n        if (( i % 2 == 0 )); then\n            numbers+=($(factorial $i))\n\
    \        else\n            numbers+=($(sum_1_to_n $i))\n        fi\n    done\n\
    \    echo \"${numbers[@]}\"", "    local _n=$1\n    local _sum\n    local _factorial\n\
    \n    for ((i=1; i<=_n; i++)); do\n        if ((i % 2 == 0)); then\n         \
    \   _factorial=1\n            for ((j=2; j<=i; j++)); do\n                _factorial=$((_factorial\
    \ * j))\n            done\n            echo -n \"\\\"$_factorial\\\"\"\n     \
    \   else\n            _sum=0\n            for ((j=1; j<=i; j++)); do\n       \
    \         _sum=$((_sum + j))\n            done\n            echo -n \"\\\"$_sum\\\
    \"\"\n        fi\n        ((i < _n)) && echo -n \", \"\n    done", "    local\
    \ result=\"\"\n    for ((i=1; i<=$1; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            factorial=1\n            for ((k=2; k<=i; k++)); do\n           \
    \     factorial=$((factorial * k))\n            done\n            result=\"$result,\\\
    \"$factorial\\\"\"\n        else\n            sum=0\n            for ((j=1; j<=i;\
    \ j++)); do\n                sum=$((sum + j))\n            done\n            result=\"\
    $result,\\\"$sum\\\"\"\n        fi\n    done\n    echo \"[${result:1}]\"", " \
    \ declare -a result\n  for (( i=1; i<=$1; i++ )); do\n    if (( i % 2 == 0 ));\
    \ then\n      result[$i]=$(calc $i factorial)\n    else\n      result[$i]=$(calc\
    \ $i sum)\n    fi\n  done\n  echo \"${result[@]}\"", "    # Write your code here\n\
    \    # A=($(seq $1))\n    # echo $A\n    # echo $A | jq -s .\n    seq $1 | jq\
    \ -s .\n    # jq -s . seq $1\n    # for (( i=1; i<=$1; i++ ))\n    # do\n    #\
    \     printf \"\\n\"\n    #     printf \"$i\"\n    # done", "  arr=()\n  for ((i=1;\
    \ i<=$1; i++)); do\n    if [ $(($i % 2)) -eq 0 ]; then\n      res=1\n      for\
    \ ((j=1; j<=$i; j++)); do\n        res=$(($res * $j))\n      done\n    else\n\
    \      res=0\n      for ((j=1; j<=$i; j++)); do\n        res=$(($res + $j))\n\
    \      done\n    fi\n    arr+=(\"$res\")\n  done\n  echo ${arr[@]}", "  n=$1\n\
    \  result=()\n  i=1\n  while [[ $i -le $n ]]; do\n    if [[ $(($i % 2)) -eq 0\
    \ ]]; then\n      factorial=1\n      j=1\n      while [[ $j -le $i ]]; do\n  \
    \      factorial=$(($factorial * $j))\n        j=$(($j + 1))\n      done\n   \
    \   result+=(\"$factorial\")\n    else\n      sum=0\n      j=1\n      while [[\
    \ $j -le $i ]]; do\n        sum=$(($sum + $j))\n        j=$(($j + 1))\n      done\n\
    \      result+=(\"$sum\")\n    fi\n    i=$(($i + 1))\n  done\n  printf \"[%s]\"\
    \ \"$(printf \",%s\" \"${result[@]}\")\"", "    # your code here\n    # You can\
    \ find the factorial of a number using $((fact=1; while [ $((++fact)) -le \"$1\"\
    \ ]; do ((fact = fact * fact)); done; echo $fact))\n    if [ $((1 % 2)) -eq 0\
    \ ]; then\n        echo \"1\"\n    else\n        local sum=0\n        for((i=1;i<=1;i++));\n\
    \        do\n            let \"sum+=$i\"\n        done\n        echo $sum\n  \
    \  fi", "\t(( $1 < 1 )) && echo \"Parameter should be greater than 0\" && exit\
    \ 1\n\t\n\t# The echo statement below will generate a string with\n\t# the format:\
    \ \"1\" \"2\" \"6\" \"24\" \"120\"\n\t# If the generated string is fed to another\
    \ program,\n\t# the elements will be separated by a single space character.\n\t\
    # Because of the quotes, each individual element is considered\n\t# as a word.\n\
    \t#\n\t# The -n option will suppress the trailing newline.\n\techo -n $(\n\t\t\
    for (( i = 1; i <= $1; i++ )); do\n\t\t\tif (( $i % 2 == 0 )); then\n\t\t\t\t\
    # i is even\n\t\t\t\techo -n $(\n\t\t\t\t\tfactorial \"$i\"\n\t\t\t\t)\n\t\t\t\
    else\n\t\t\t\t# i is odd\n\t\t\t\techo -n $(\n\t\t\t\t\t# $(( $i * ($i + 1) /\
    \ 2 ))\n\t\t\t\t\tseq \"$i\" | paste -sd+ | bc\n\t\t\t\t)\n\t\t\tfi\n\t\t\t\n\t\
    \t\t# To add a single space character between the elements,\n\t\t\t# don't forget\
    \ to add a space here.\n\t\t\techo -n \" \"\n\t\tdone\n\t)", "    local i=$1\n\
    \    local lst=$(seq $i)\n    for n in $lst; do\n        if [ $(($n % 2)) -eq\
    \ 0 ]; then\n            local factorial=1\n            for n in $(seq $n); do\n\
    \                factorial=$(($factorial * $n))\n            done\n          \
    \  echo -n '\"'$factorial'\"'\n        else\n            echo -n '\"'$(($(seq\
    \ $n | paste -sd+ -) - 1))'\"'\n        fi\n        echo -n \",\"\n    done",
  "    # Write your code here\n    result=''\n    for i in $(seq 1 $1); do\n     \
    \   if ((i % 2 == 0)); then\n            factorial=1\n            for j in $(seq\
    \ 1 $i); do\n                factorial=$((factorial * j))\n            done\n\
    \            result=\"$result \\\"$factorial\\\"\"\n        else\n           \
    \ sum=0\n            for j in $(seq 1 $i); do\n                sum=$((sum + j))\n\
    \            done\n            result=\"$result \\\"$sum\\\"\"\n        fi\n \
    \   done\n    echo \"[$result]\"", "    n=$1\n    res=''\n    for i in $(seq 1\
    \ $n); do\n        fact=1\n        if [[ $((i % 2)) == 0 ]]; then\n          \
    \  for j in $(seq 1 $i); do\n                fact=$((fact * j))\n            done\n\
    \        else\n            for j in $(seq 1 $i); do\n                fact=$((fact\
    \ + j))\n            done\n        fi\n        res=\"$res '\\\"$fact\\\"'\"\n\
    \    done\n    echo \"[$res]\"", "  local n=$1\n  local i=1\n  while [ $i -le\
    \ $n ]; do\n    local iIsEven=$(($i % 2))\n    if [ $iIsEven -eq 0 ]; then\n \
    \     # i is even\n      local temp=1\n      local j=1\n      while [ $j -le $i\
    \ ]; do\n        temp=$(($temp * $j))\n        j=$(($j + 1))\n      done\n   \
    \   echo -n '\"'$temp'\"'\n    else\n      # i is odd\n      local temp=0\n  \
    \    local j=1\n      while [ $j -le $i ]; do\n        temp=$(($temp + $j))\n\
    \        j=$(($j + 1))\n      done\n      echo -n '\"'$temp'\"'\n    fi\n    i=$(($i\
    \ + 1))\n    if [ $i -le $n ]; then\n      echo -n \", \"\n    fi\n  done", " \
    \   # Fill in your code here\n    echo -n \"[\"\n    for i in $(seq $1); do\n\
    \        if (( i % 2 == 0 )); then\n            factorial=$(factorial $i)\n  \
    \          echo -n \"\\\"$factorial\\\"\"\n        else\n            sum=$(sum\
    \ $i)\n            echo -n \"\\\"$sum\\\"\"\n        fi\n        if (( i < $1\
    \ )); then\n            echo -n \", \"\n        fi\n    done\n    echo \"]\"",
  "    if [ $1 -lt 1 ]; then\n        echo \"0\"\n    else\n        factorial=1\n\
    \        for ((i=1; i<=1; i++)); do\n            factorial=$[$factorial*$i]\n\
    \        done\n        echo $factorial\n    fi", "  t=(1)\n  for i in $(seq 1\
    \ $1); do\n    if (( $i % 2 == 0 )); then\n      t+=(\"$(factorial $i)\")\n  \
    \  else\n      t+=(\"$(sum $i)\")\n    fi\n  done\n  echo \"${t[@]}\"", "  # Write\
    \ your code here\n  # case $1 in\n  # \t[0-9] ) \n  # \t\techo \"Incorrect number\"\
    \n  # \t\t;;\n  # \t* )\n  # \t\techo \"Incorrect number\"\n  # \t\t;;\n  # esac\n\
    \  if [[ $1 =~ ^[0-9]+$ ]]; then\n  echo \"scale=10; 0\" | bc > /tmp/file.txt\n\
    \  for i in $( seq 1 $1 ); do\n    if [ $(($i % 2)) -eq 0 ]; then\n        echo\
    \ \"scale=10; $(bc -l /tmp/file.txt) * $i\" | bc >> /tmp/file.txt\n    else\n\
    \      echo \"scale=10; $(bc -l /tmp/file.txt) + $i\" | bc >> /tmp/file.txt\n\
    \    fi\n  done\n  # temp_file=/tmp/file.txt\n  # echo \"[\"\n  # echo \"]\"\n\
    \  paste -sd, /tmp/file.txt\n  else\n    echo \"Input is not a valid integer.\"\
    \n  fi", "    local result\n    for i in $(seq 1 $1); do\n        if [[ $((i %\
    \ 2)) -eq 0 ]]; then\n            factorial=$( factorial $i )\n            result+=(\"\
    \\\"$factorial\\\"\")\n        else\n            result+=(\"\\\"$(($i * ($i +\
    \ 1) / 2))\\\"\")\n        fi\n    done\n    echo \"${result[@]}\"", "  n=$1\n\
    \  echo '['$(jot - 0 $n | awk '{print (NR % 2 == 0) ? (NR-1) * NR / 2 : NR * (NR+1)\
    \ / 2}' | awk '{printf $1\",\"}')']'", "    # Complete the function\n    # echo\
    \ \"Write your solution here\"\n    a=1\n    b=1\n    n=$1\n    res=()\n    while\
    \ [[ $n -gt 0 ]]; do\n        if [[ $((n % 2)) -eq 0 ]]; then\n            let\
    \ a=a*n\n            res+=($a)\n        else\n            let b=b+n\n        \
    \    res+=($b)\n        fi\n        let n=n-1\n    done\n    echo ${res[@]}",
  "    for i in $(seq $1); do\n        if [ $((i % 2)) -eq 0 ]; then\n           \
    \ echo -n \"\\\"$(seq -s \"*\" 1 $i | bc)\\\" \"\n        else\n            echo\
    \ -n \"\\\"$(seq -s \"+\" 1 $i | bc)\\\" \"\n        fi\n    done", '  # fill
    the answer here', "    # The solution is implemented in a file called solution.py\n\
    \    # You can find that file in this folder as well.\n    local result=$(python3.7\
    \ solution.py \"$1\")\n    echo \"$result\"", "    n=$1\n    array=($(seq $n))\n\
    \    j=0\n    while [ $j -lt $n ]\n    do\n        if [ $((array[$j] % 2)) -eq\
    \ 0 ]\n        then\n            array[$j]=$(($array[$j]))\n        else\n   \
    \         array[$j]=$(($j * ($j + 1) / 2))\n        fi\n        j=$(($j + 1))\n\
    \    done\n    echo ${array[@]}", '    :', "    local n=$1\n    declare -a result\n\
    \    for ((i=1; i<=$n; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n      \
    \      result+=($(factorial $i))\n        else\n            result+=($(sum_from_1_to\
    \ $i))\n        fi\n    done\n    echo \"${result[@]}\"", "    result=()\n   \
    \ for i in $(seq 1 $1); do\n        if [ $((i % 2)) -eq 0 ]; then\n          \
    \  let j=i-1\n            local product=1\n            while [ $j -ge 1 ]; do\n\
    \                let product*=j\n                let j-=1\n            done\n\
    \            result+=(\"\\\"$product\\\"\")\n        else\n            local sum=0\n\
    \            for j in $(seq 1 $i); do\n                let sum+=j\n          \
    \  done\n            result+=(\"\\\"$sum\\\"\")\n        fi\n    done\n    echo\
    \ \"[${result[@]}]\"", "  # implement the function with Bash!\n  # don't use any\
    \ external tools (like python, ruby, go, etc.)\n  # you have to use a loop, but\
    \ don't use the eval command\n  # if your function doesn't work with empty strings,\n\
    \  # change the test assertions to reflect this.\n  factorial() {\n    if [ $1\
    \ -le 1 ]; then\n      echo 1\n    else\n      echo $(($1 * $(factorial $(($1\
    \ - 1)))))\n    fi\n  }\n\n  result=\"[\"\n  for ((i = 1; i <= $1; i++)); do\n\
    \    if [ $(($i % 2)) -eq 0 ]; then\n      result=\"$result\\\"$(factorial $i)\\\
    \",\"\n    else\n      sum=0\n      for ((j = 1; j <= $i; j++)); do\n        sum=$(($sum\
    \ + $j))\n      done\n      result=\"$result\\\"$sum\\\",\"\n    fi\n  done\n\
    \  echo $result\"]\"", '  # write your code here', "\t# get the input\n\tinput=$1\n\
    \n\t# generate a list of the values in the output array\n\t# use python because\
    \ it's the easiest way to generate a list\n\t# with length greater than 1\n\t\
    values=`python -c \"print(','.join(str(x) for x in range(1,${input}+1)))\"`\n\n\
    \t# now loop through the values and build the output array\n\t# if the value is\
    \ even, do the factorial\n\t# otherwise, do the sum\n\toutput=()\n\tfor value\
    \ in ${values//,/ }\n\tdo\n\t\tif [ `expr $value % 2` -eq 0 ]\n\t\tthen\n\t\t\t\
    factorial=1\n\t\t\tfor i in `seq 1 $value`\n\t\t\tdo\n\t\t\t\tfactorial=`expr\
    \ $factorial \\* $i`\n\t\t\tdone\n\t\t\toutput+=(\"${factorial}\")\n\t\telse\n\
    \t\t\tsum=0\n\t\t\tfor i in `seq 1 $value`\n\t\t\tdo\n\t\t\t\tsum=`expr $sum +\
    \ $i`\n\t\t\tdone\n\t\t\toutput+=(\"${sum}\")\n\t\tfi\n\tdone\n\n\t# finally,\
    \ print the output array\n\techo \"[$(echo ${output[@]} | sed -e 's/ /,/g')]\"",
  "    # your code here\n    list=''\n    for (( i=1; i<=$1; i++ )); do\n        if\
    \ [ $((i%2)) -eq 0 ]; then\n            value=1\n            for (( j=1; j<=$i;\
    \ j++ )); do\n                value=$((value*j))\n            done\n        else\n\
    \            value=0\n            for (( j=1; j<=$i; j++ )); do\n            \
    \    value=$((value+j))\n            done\n        fi\n        list=$list'\"'$value'\"\
    '\n        if [ $i -ne $1 ]; then\n            list=$list', '\n        fi\n  \
    \  done\n    echo '['$list']'", "  declare -a arr\n  # TODO: your code here\n\
    \  for i in `seq $1`; do\n    if [ $((i%2)) -eq 0 ]; then\n      arr[$i]=$((i-1))\n\
    \      for j in `seq $((i-1))`; do\n        let arr[$i]=${arr[$i]}*$j\n      done\n\
    \    else\n      arr[$i]=$(((i*(i+1))/2))\n    fi\n  done\n  echo ${arr[@]}",
  "    arr=()\n    for ((i=1; i<=$1; i++)); do\n        if ((i % 2 == 0)); then\n\
    \            c=1\n            for ((j=1; j<=i; j++)); do\n                ((c\
    \ *= j))\n            done\n            arr+=(\"$c\")\n        else\n        \
    \    c=0\n            for ((j=1; j<=i; j++)); do\n                ((c += j))\n\
    \            done\n            arr+=(\"$c\")\n        fi\n    done\n    echo \"\
    ${arr[@]}\"", "    declare -i n=$1\n    declare -a arr\n    for ((i=1; i<=n; i++));\
    \ do\n        if [[ $(($i % 2)) -eq 0 ]]; then\n            res=1\n          \
    \  for ((j=1; j<=i; j++)); do\n                res=$(($res * $j))\n          \
    \  done\n        else\n            res=0\n            for ((j=1; j<=i; j++));\
    \ do\n                res=$(($res + $j))\n            done\n        fi\n     \
    \   arr[$i]=$res\n    done\n    echo ${arr[@]}", "    echo \"Please enter a positive\
    \ integer\"\n    read n\n    if [[ $n =~ ^[0-9]+$ ]] && [ $n -gt 0 ];\n    then\n\
    \        list=\"\"\n        for (( i=1; i<=$n; i++ ));\n        do\n         \
    \   if [ $(($i % 2)) -eq 0 ];\n            then\n                res=1\n     \
    \           for (( j=1; j<=$i; j++ ));\n                do\n                 \
    \   res=$(($res * $j))\n                done\n                if [ $i -eq $n ];\n\
    \                then\n                    list=\"$list $res\"\n             \
    \   else\n                    list=\"$list $res,\"\n                fi\n     \
    \       else\n                res=0\n                for (( j=1; j<=$i; j++ ));\n\
    \                do\n                    res=$(($res + $j))\n                done\n\
    \                if [ $i -eq $n ];\n                then\n                   \
    \ list=\"$list $res\"\n                else\n                    list=\"$list\
    \ $res,\"\n                fi\n            fi\n        done\n        result=\"\
    [\"$list\"]\"\n        echo $result\n    else\n        echo \"Invalid input\"\n\
    \    fi", "    # Write your code here\n    echo '[\"1\"]'", "    local x\n   \
    \ if [ $1 -gt 0 ]; then\n        for x in $(seq 1 $1); do\n            if [ $(($x\
    \ % 2)) -eq 0 ]; then\n                local y=1\n                while [ $x -gt\
    \ 0 ]; do\n                    y=$(($y * $x))\n                    x=$(($x - 1))\n\
    \                done\n                echo -n \"\\\"$y\\\" \"\n            else\n\
    \                local y=0\n                while [ $x -gt 0 ]; do\n         \
    \           y=$(($y + $x))\n                    x=$(($x - 1))\n              \
    \  done\n                echo -n \"\\\"$y\\\" \"\n            fi\n        done\n\
    \    fi", "\t# TODO: remove useless \"1 \"\n\t# list=()\n\t# for i in $(seq 1\
    \ $1); do\n\t# \tif [ $((i % 2)) -eq 0 ]; then\n\t# \t\tlist+=$(factorial $i)\n\
    \t# \telse\n\t# \t\tlist+=$(sum $i)\n\t# \tfi\n\t# done\n\t# echo \"${list[@]}\"\
    \n\tlist=\"\"\n\tfor i in $(seq 1 $1); do\n\t\tif [ $((i % 2)) -eq 0 ]; then\n\
    \t\t\t# list+=$(factorial $i)\n\t\t\tlist+=\"$(factorial $i) \"\n\t\telse\n\t\t\
    \t# list+=$(sum $i)\n\t\t\tlist+=\"$(sum $i) \"\n\t\tfi\n\tdone\n\techo \"$list\"",
  "    n=$1\n    #Implement f\n    echo -n \"[\"\n    i=1\n    while [ $i -le $n ]\n\
    \    do\n        if [[ $((i%2)) -eq 0 ]]\n        then\n            if [[ $i -eq\
    \ 2 ]]\n            then\n                echo -n '\"2\"'\n            else\n\
    \                counter=2\n                result=1\n                while [\
    \ $counter -le $i ]\n                do\n                    result=$((result*counter))\n\
    \                    counter=$((counter+1))\n                done\n          \
    \      echo -n '\"'$result'\"'\n            fi\n        else\n            if [[\
    \ $i -eq 1 ]]\n            then\n                echo -n '\"1\"'\n           \
    \ else\n                counter=1\n                result=0\n                while\
    \ [ $counter -le $i ]\n                do\n                    result=$((result+counter))\n\
    \                    counter=$((counter+1))\n                done\n          \
    \      echo -n '\"'$result'\"'\n            fi\n        fi\n        if [[ $i -lt\
    \ $n ]]\n        then\n            echo -n \", \"\n        fi\n        i=$((i+1))\n\
    \    done\n    echo \"]\"", '    # write your code here', "    # Write your code\
    \ here\n    declare -a arr=();\n    for (( i=1; i<=$1; i++)); do\n        if ((\
    \ $i % 2 == 0 )); then\n            arr+=(\"$(factorial $i)\")\n        else\n\
    \            arr+=(\"$(sum $i)\")\n        fi\n    done\n    echo \"${arr[@]}\"",
  "    local N=$1\n\n    local a\n    local b\n    local i\n\n    declare -a a\n \
    \   a=()\n\n    for ((i=1; i<=N; i++)); do\n        b=''\n        if ((i % 2 ==\
    \ 0)); then\n            b=$(fact $i)\n        else\n            b=$(sum $i)\n\
    \        fi\n        a+=(\"$b\")\n    done\n\n    echo \"${a[@]}\"", "    local\
    \ n=$1\n    local ret=\"\"\n    for ((i=1; i<=n; i++)); do\n        if ((i % 2\
    \ == 0)); then\n            ret=\"$ret $(($i * (i - 1))) \"\n        else\n  \
    \          ret=\"$ret $(($i * ($i + 1)) / 2) \"\n        fi\n    done\n    echo\
    \ \"[$ret]\"", "    # Write your code here\n    declare -A arr\n    for ((i=1;\
    \ i<=$1; i++)) do\n        if (($i % 2 == 0))\n        then\n            result=1\n\
    \            for ((j=1; j<=$i; j++)) do\n                result=$(($result * $j))\n\
    \            done\n            arr[$i]=$result\n        else\n            result=0\n\
    \            for ((j=1; j<=$i; j++)) do\n                result=$(($result + $j))\n\
    \            done\n            arr[$i]=$result\n        fi\n    done\n    echo\
    \ \"${arr[@]}\"", "    if [[ $1 =~ ^[0-9]+$ ]]; then\n        local result=\"\"\
    \n        for ((i=1; i<=$1; i++)); do\n            if [[ $((i%2)) -eq 0 ]]; then\n\
    \                if [[ $i -eq 2 ]]; then\n                    result+='\"2\"'\n\
    \                else\n                    local fact=1\n                    for\
    \ ((j=2; j<=$i; j++)); do\n                        fact=$((fact*j))\n        \
    \            done\n                    result+='\"'\"$fact\"'\"'\n           \
    \     fi\n            else\n                result+='\"'\"$(((i+1)*i/2))\"'\"\
    '\n            fi\n            if [[ $i -ne $1 ]]; then\n                result+=',\
    \ '\n            fi\n        done\n        echo -e \"[${result}]\"\n    else\n\
    \        echo \"f: the parameter is not an integer\"\n    fi", "    # Write your\
    \ code here.\n\n    local factorial\n    factorial=1\n    local total\n    total=0\n\
    \    local result\n    result=()\n\n    for ((i=1; i<=$1; i++)); do\n        if\
    \ ((i % 2 == 0)); then\n            for (( j=1; j<=i; j++ )); do\n           \
    \     factorial=$((factorial * j))\n            done\n            result+=(\"\
    ${factorial}\")\n            factorial=1\n        else\n            for (( j=1;\
    \ j<=i; j++ )); do\n                total=$((total + j))\n            done\n \
    \           result+=(\"${total}\")\n            total=0\n        fi\n    done\n\
    \n    printf '%s\\n' \"${result[@]}\"", "  # your code here\n  array=$1\n  result=()\n\
    \  for i in `seq 1 $array`\n  do\n    if [ $(( $i % 2 )) -eq 0 ]\n    then\n \
    \     fact=1\n      for j in `seq 1 $i`\n      do\n        fact=$(( $fact * $j\
    \ ))\n      done\n      result+=(\"$fact\")\n    else\n      sum=0\n      for\
    \ j in `seq 1 $i`\n      do\n        sum=$(( $sum + $j ))\n      done\n      result+=(\"\
    $sum\")\n    fi\n  done\n  echo -e \"${result[@]}\"", "    local n=$1\n    local\
    \ res\n    local i\n    local sum\n    local fac\n    res=( 1 )\n    for i in\
    \ $(seq 2 $n); do\n        if (( i % 2 == 0 )); then\n            fac=1\n    \
    \        for (( j = 1; j <= i; j++ )); do\n                fac=$(( fac * j ))\n\
    \            done\n            res+=( $fac )\n        else\n            sum=0\n\
    \            for (( j = 1; j <= i; j++ )); do\n                sum=$(( sum + j\
    \ ))\n            done\n            res+=( $sum )\n        fi\n    done\n    echo\
    \ ${res[@]}", "    local size=$1\n    [[ -z $size ]] && size=10\n    for ((i=1;\
    \ i<=size; i++)); do\n        if (( i % 2 == 0 )); then\n            echo -n \"\
    \\\"$(( i * $((i-1)) ))\\\" \"\n        else\n            echo -n \"\\\"$(( $((i*(i+1))/2\
    \ ))\\\" \"\n        fi\n    done", "    local result\n\n    echo $(((i % 2 ==\
    \ 0) ? i * (i - 1) : i * (i + 1) / 2))", "  local n=$1\n  local v_list=()\n  for\
    \ ((i=1; i<=n; i++)); do\n    if ((i % 2 == 0)); then\n      v_list+=($(factorial\
    \ $i))\n    else\n      v_list+=($(sum_to $i))\n    fi\n  done\n  to_string ${v_list[@]}",
  "    local -a res\n    local i\n    local acc\n    i=1\n    while [ $i -le $1 ];\
    \ do\n        if [ $(($i % 2)) -eq 0 ]; then\n            # even\n           \
    \ acc=1\n            for (( j = 1; j <= i; j++ )); do\n                acc=$(($acc\
    \ * $j))\n            done\n            res[$i]=$acc\n        else\n         \
    \   # odd\n            acc=0\n            for (( j = 1; j <= i; j++ )); do\n \
    \               acc=$(($acc + $j))\n            done\n            res[$i]=$acc\n\
    \        fi\n        i=$(($i + 1))\n    done\n    echo -n \"[\"\n    for (( i\
    \ = 1; i <= $1; i++ )); do\n        echo -n '\"'${res[$i]}'\"'\n        if [ $i\
    \ -lt $1 ]; then\n            echo -n \", \"\n        fi\n    done\n    echo \"\
    ]\"", "  length=$1\n  output=[]\n  for ((i=1; i<=$length; i++)); do\n    if (($i\
    \ % 2 == 0)); then\n      result=1\n      for ((j=1; j<=$i; j++)); do\n      \
    \  result=$(($result * $j))\n      done\n    else\n      result=0\n      for ((j=1;\
    \ j<=$i; j++)); do\n        result=$(($result + $j))\n      done\n    fi\n   \
    \ output+=(\"\\\"$result\\\"\")\n  done\n  echo $output", "  # your code here\n\
    \  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n    echo \"Sorry integers only\"\n    return\
    \ 1\n  fi\n  array=()\n  # array=(\"$1\")\n  for ((i=1; i<=$1; i++)); do\n   \
    \ if (( $i % 2 == 0 )); then\n      # factorial\n      factorial=1\n      for\
    \ (( j=1; j<=$i; j++ )); do\n        factorial=$((factorial * j))\n      done\n\
    \      array+=(\"$factorial\")\n    else\n      # sum\n      sum=0\n      for\
    \ (( j=1; j<=$i; j++ )); do\n        sum=$((sum + j))\n      done\n      array+=(\"\
    $sum\")\n    fi\n  done\n  echo \"[\\\"${array[@]}\\\"]\"", "    local n=$1\n\
    \    local result=()\n    for ((i=1; i<=n; i++)); do\n        if ((i % 2 == 0));\
    \ then\n            result[$i-1]=$(echo | awk -v n=$i '{ for (i=1; i<=n; i++)\
    \ f*=i; print f }')\n        else\n            result[$i-1]=$(echo | awk -v n=$i\
    \ '{ for (i=1; i<=n; i++) s+=i; print s }')\n        fi\n    done\n    echo \"\
    [\" ${result[@]} \"]\"", "  a=()\n  for ((i=1; i<=n; i++)); do\n    ((i%2==0))\
    \ && a+=($(factorial $i)) || a+=($(sum_to $i))\n  done\n  echo \"${a[@]}\"", " \
    \   n=$1\n    str=''\n    for i in $(seq $n); do\n        if [ $((i % 2)) -eq\
    \ 0 ]; then\n            # i is even\n            s=1\n            for j in $(seq\
    \ $i); do\n                s=$((s * j))\n            done\n        else\n    \
    \        # i is odd\n            s=0\n            for j in $(seq $i); do\n   \
    \             s=$((s + j))\n            done\n        fi\n        str=\"$str\\\
    \"$s\\\" \"\n    done\n    echo \"[$str]\"", "  local n=\"$1\"\n  local lst=()\n\
    \  local i\n  for ((i=1; i<=n; i++)); do\n    if ((i%2==0)); then\n      local\
    \ fac=1\n      local j\n      for ((j=2; j<=i; j++)); do\n        fac=$((fac*j))\n\
    \      done\n      lst+=(\"$fac\")\n    else\n      local sum=0\n      local j\n\
    \      for ((j=1; j<=i; j++)); do\n        sum=$((sum+j))\n      done\n      lst+=(\"\
    $sum\")\n    fi\n  done\n  printf '%s\\n' \"${lst[@]}\"", "    s=\"[\"\n    for\
    \ ((i=1; i<=$1; i++)); do\n        if [ $((i%2)) -eq 0 ]; then\n            factorial=1\n\
    \            for ((j=1; j<=i; j++)); do\n                factorial=$((factorial*j))\n\
    \            done\n            s=\"$s\"\"\\\"$factorial\\\"\"\n        else\n\
    \            s=\"$s\"\"\\\"$((i*(i+1)/2))\\\"\"\n        fi\n        if [ $i -ne\
    \ $1 ]; then\n            s=\"$s\"\", \"\n        fi\n    done\n    s=\"$s\"\"\
    ]\"\n    echo \"$s\"", "    for (( i=1; i<=$1; i++ )); do\n        if (( $i %\
    \ 2 == 0 )); then\n            result=1\n            for (( j=1; j<=$i; j++ ));\
    \ do\n                (( result *= j ))\n            done\n        else\n    \
    \        result=0\n            for (( j=1; j<=$i; j++ )); do\n               \
    \ (( result += j ))\n            done\n        fi\n        echo -n '\"'$result'\"\
    '\n        if (( $i < $1 )); then\n            echo -n ', '\n        fi\n    done"]
stop_tokens:
- "\n}"
