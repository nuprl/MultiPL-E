name: HumanEval_76_is_simple_power
language: sh
prompt: "#!/bin/bash\n# Your task is to write a function that returns true if a number\
  \ x is a simple\n# power of n and false in other cases.\n# x is a simple power of\
  \ n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# true\n\
  # >>> $(is_simple_power \"2\" \"2\")\n# true\n# >>> $(is_simple_power \"8\" \"2\"\
  )\n# true\n# >>> $(is_simple_power \"3\" \"2\")\n# false\n# >>> $(is_simple_power\
  \ \"3\" \"1\")\n# false\n# >>> $(is_simple_power \"5\" \"3\")\n# false\n#\n# $1\
  \ is an integer\n# $2 is an integer\nis_simple_power() {\n"
tests: "}\n\ncandidate() {\n    is_simple_power \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"16\" \"2\") = \"true\" ]]\n    [[ $(candidate \"143214\" \"\
  16\") = \"false\" ]]\n    [[ $(candidate \"4\" \"2\") = \"true\" ]]\n    [[ $(candidate\
  \ \"9\" \"3\") = \"true\" ]]\n    [[ $(candidate \"16\" \"4\") = \"true\" ]]\n \
  \   [[ $(candidate \"24\" \"2\") = \"false\" ]]\n    [[ $(candidate \"128\" \"4\"\
  ) = \"false\" ]]\n    [[ $(candidate \"12\" \"6\") = \"false\" ]]\n    [[ $(candidate\
  \ \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"1\" \"12\") = \"true\" ]]\n}\n\
  \nrun_test"
completions: ["  local -i x=$1\n  local -i n=$2\n  local -i i=0\n  ((x > 0 && n >\
    \ 0)) || return 1\n\n  while ((n**i < x)); do\n    ((++i))\n  done\n\n  ((n**i\
    \ == x)) && echo true || echo false", "  if (( $2 < 1 )) || [[ ! $1 =~ ^[0-9]+$\
    \ ]] || [[ ! $2 =~ ^[0-9]+$ ]]; then\n    echo false\n    return\n  fi\n  if ((\
    \ $2 == 1 )); then\n    echo true\n    return\n  fi\n  pow_res=$(echo \"scale=0;\
    \ $1/$2\" | bc)\n  if (( $pow_res == $2 )); then\n    echo true\n    return\n\
    \  fi\n  echo false", "    echo $(echo $1 $2 | awk '{print ($1 == $2**int($1/$2))?\
    \ \"true\": \"false\"}')", '    echo $1 | grep -Eq "^$2\^[0-9]+$" && echo true
    || echo false', '  echo "$2**$(echo "l($1)/l($2)" | bc -l | cut -c1-6)" | bc -l
    | grep "$1" > /dev/null && echo true || echo false', '  # your code here', " \
    \ # Write your code here\n  # Remember to echo true or false\n  echo true", " \
    \ [ $# -eq 2 ] || return 1\n  echo \"($2 ** $(printf \"%.0f\" $(echo \"l($1)/l($2)\"\
    \ | bc -l))) == $1\" | bc -l", "\t[ $1 -eq $(( $2 ** $(echo \"scale=20; l($1)/l($2)\"\
    \ | bc -l) )) ]", "  if (( $1 == 1 )); then\n    echo \"true\"\n  elif (( $1%$2\
    \ == 0 )); then\n    is_simple_power $(($1/$2)) $2\n  else\n    echo \"false\"\
    \n  fi", "  if [ \"$1\" == \"$(bc <<< \"scale=2;($2^$2) == $1\")\" ]; then\n \
    \   echo true\n  else\n    echo false\n  fi", "  declare -i base=$2\n  declare\
    \ -i num=$1\n  declare -i result=1\n  while [ $result -lt $num ]; do\n    result=$(($result\
    \ * $base))\n  done\n  if [ $result -eq $num ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  n=$1\n  x=$2\n  if ((n**n==x)); then\n    return\
    \ 0\n  else\n    return 1\n  fi", "    if [ $# -ne 2 ]; then\n        echo 'Usage:\
    \ is_simple_power \"number\" \"power\"'\n        return 1\n    fi\n    bc <<<\
    \ \"$1 == (pow($2, int(l($1)/l($2))))\"", "  local x=$1\n  local n=$2\n  local\
    \ power=$(echo \"scale=0; l($x)/l($n) \" | bc -l)\n  if echo $power | grep -q\
    \ '^[0-9]\\+$'; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \ local x=$1\n  local n=$2\n  # Create an exponent and calculate pow value\n \
    \ for (( i=0; ; i++ )); do\n    local pow=$((n**i))\n    [[ $pow -eq $x ]] &&\
    \ return 0\n    [[ $pow -gt $x ]] && return 1\n  done", '    echo "($1**(1/$2))"
    | bc -l | grep -q "^$1$"', "  if (( ! $2 )) || (( ! $1 )); then\n    echo false\n\
    \    return\n  fi\n  # if root, save the root\n  if (( $1 == $2 ** $2 )); then\n\
    \    root=$2\n  else\n    root=$(echo \"sqrt($1)\" | bc)\n  fi\n  for (( i=1;\
    \ i<=root; i++ )); do\n    if (( $1 == $2 ** $i )); then\n      echo true\n  \
    \    return\n    fi\n  done\n  echo false", "  [[ $(echo \"$1 / $2\" | bc -l |\
    \ cut -d \".\" -f 1) == $(echo \"sqrt ($1)\" | bc -l | cut -d \".\" -f 1) ]] &&\
    \ \\\n    [[ $(echo \"$1 / $2\" | bc -l | cut -d \".\" -f 1) == $(echo \"log ($1)\
    \ / log ($2)\" | bc -l | cut -d \".\" -f 1) ]]", "    # Write a body for this\
    \ function\n    if (( $1 == 1 && $2 == 1 )); then\n        echo true\n    elif\
    \ (( $1 == $2 )); then\n        echo true\n    elif (( $1%$2 )); then\n      \
    \  echo false\n    else\n        x=$1\n        while (( $x%$2 == 0 )); do\n  \
    \          x=$((x/2))\n        done\n        if (( $x == 1 )); then\n        \
    \    echo true\n        else\n            echo false\n        fi\n    fi"]
stop_tokens:
- "\n}"
