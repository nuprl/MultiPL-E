name: HumanEval_157_right_angle_triangle
language: sh
prompt: "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return\
  \ true if the three\n# sides form a right-angled triangle, false otherwise.\n# A\
  \ right-angled triangle is a triangle in which one angle is right angle or \n# 90\
  \ degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\
  \n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n\
  # $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n"
tests: "}\n\ncandidate() {\n    right_angle_triangle \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"true\" ]]\n    [[ $(candidate \"\
  1\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"10\" \"6\" \"8\") = \"true\"\
  \ ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"false\" ]]\n    [[ $(candidate \"\
  7\" \"24\" \"25\") = \"true\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"false\"\
  \ ]]\n    [[ $(candidate \"5\" \"12\" \"13\") = \"true\" ]]\n    [[ $(candidate\
  \ \"15\" \"8\" \"17\") = \"true\" ]]\n    [[ $(candidate \"48\" \"55\" \"73\") =\
  \ \"true\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"false\" ]]\n    [[ $(candidate\
  \ \"2\" \"2\" \"10\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    local a=$1\n    local b=$2\n    local c=$3\n    local hypotenuse=$c\n\
    \    local sum=$(($a*$a + $b*$b))\n    local expected_sum=$(($c*$c))\n    if [\
    \ $hypotenuse -ne $(($a > $b ? $a : $b)) ]; then\n        if [ $a -gt $b ]; then\n\
    \            hypotenuse=$a\n        else\n            hypotenuse=$b\n        fi\n\
    \    fi\n    if [ $sum -eq $expected_sum ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  if [ $# -eq 3 ]; then\n    # a^2 + b^2 =\
    \ c^2\n    if [ $(($1*$1+$2*$2)) -eq $(($3*$3)) ]; then\n      echo \"true\"\n\
    \    else\n      echo \"false\"\n    fi\n  else\n    echo \"Usage: right_angle_triangle\
    \ \\\"integer\\\" \\\"integer\\\" \\\"integer\\\"\"\n  fi", "  local ARG1=${1:-0}\n\
    \  local ARG2=${2:-0}\n  local ARG3=${3:-0}\n  local sum=$((ARG1 + ARG2 + ARG3))\n\
    \  if [[ $sum -ne 180 ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n\
    \  fi", "  # The length of the three sides of a triangle is greater than 0.\n\
    \  if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n    echo \"false\"\n\
    \    return\n  fi\n  # a is the longest side\n  a=$1\n  if [ $2 -gt $a ]; then\n\
    \    a=$2\n  fi\n  if [ $3 -gt $a ]; then\n    a=$3\n  fi\n  # b is the second\
    \ longest side\n  b=$1\n  if [ $2 -gt $b ] && [ $2 -lt $a ]; then\n    b=$2\n\
    \  fi\n  if [ $3 -gt $b ] && [ $3 -lt $a ]; then\n    b=$3\n  fi\n  # c is the\
    \ third longest side\n  c=$1\n  if [ $2 -gt $c ] && [ $2 -lt $b ]; then\n    c=$2\n\
    \  fi\n  if [ $3 -gt $c ] && [ $3 -lt $b ]; then\n    c=$3\n  fi\n  # If a is\
    \ the longest side, and it has the length of sqrt(a^2 + b^2)\n  # The triangle\
    \ is a right-angled triangle.\n  if [ $a -eq $(echo \"sqrt($b*$b + $c*$c)\" |\
    \ bc) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if [[\
    \ \"$1\" =~ ^[0-9]+$ && \"$2\" =~ ^[0-9]+$ && \"$3\" =~ ^[0-9]+$ ]]; then\n  \
    \  a=$1\n    b=$2\n    c=$3\n    if (( a*a + b*b == c*c )) || (( b*b + c*c ==\
    \ a*a )) || (( c*c + a*a == b*b )); then\n      echo \"true\"\n    else\n    \
    \  echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", "  # Variables are\
    \ named c, b, a for better readability.\n  # The formula for the check is: c^2\
    \ = a^2 + b^2\n  local a=\"$1\"\n  local b=\"$2\"\n  local c=\"$3\"\n  local a_sqr\n\
    \  local b_sqr\n  local c_sqr\n  # Square the lengths.\n  a_sqr=$(( a * a ))\n\
    \  b_sqr=$(( b * b ))\n  c_sqr=$(( c * c ))\n  # Check the equation.\n  if [ \"\
    $c_sqr\" -eq \"$(( a_sqr + b_sqr ))\" ]; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi", "  square_a=$(( $1 ** 2 ))\n  square_b=$(( $2 ** 2 ))\n\
    \  square_c=$(( $3 ** 2 ))\n  # If a^2 + b^2 = c^2 then it is a right angled triangle\n\
    \  if [[ \"$square_a\" -eq \"$(( $square_b + $square_c ))\" ]]; then\n    echo\
    \ \"true\"\n  elif [[ \"$square_b\" -eq \"$(( $square_a + $square_c ))\" ]]; then\n\
    \    echo \"true\"\n  elif [[ \"$square_c\" -eq \"$(( $square_a + $square_b ))\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local a=$1\n\
    \    local b=$2\n    local c=$3\n    if [ $((a*a+b*b)) -eq $((c*c)) ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local a=$1\n\
    \  local b=$2\n  local c=$3\n  local max_val=$(($a * $a + $b * $b))\n  local result\n\
    \  if [[ $max_val -eq $(($c * $c)) ]]; then\n    result=\"true\"\n  else\n   \
    \ result=\"false\"\n  fi\n  echo $result", "    # a, b, c are sides of the triangle\n\
    \    local a=${1?}\n    local b=${2?}\n    local c=${3?}\n    local arr=($a $b\
    \ $c)\n    local max=${arr[0]}\n    local sum=0\n    # Find max value\n    for\
    \ i in \"${arr[@]}\"; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n\
    \        fi\n    done\n    # Count sum of other two sides\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ne $max ]]; then\n            sum=$((sum + i))\n     \
    \   fi\n    done\n    # Return true if max = sum^2\n    if [[ $max -eq $((sum*sum))\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    if (($1 > 0 && $2 > 0 && $3 > 0)); then\n        # Compute the squares of the\
    \ three sides\n        a=$(( $1 * $1 ))\n        b=$(( $2 * $2 ))\n        c=$((\
    \ $3 * $3 ))\n        if (( $a + $b == $c || $a + $c == $b || $b + $c == $a ));\
    \ then\n            echo \"true\"\n        else\n            echo \"false\"\n\
    \        fi\n    else\n        echo \"false\"\n    fi", "  a=\"$1\"\n  b=\"$2\"\
    \n  c=\"$3\"\n  if (( $a == 0 || $b == 0 || $c == 0 )); then\n    echo \"false\"\
    \n  elif (( $a > $b && $a > $c && $a < $(($b+$c)) )); then\n    if (( $a == $(($b*$b+$c*$c))**0.5\
    \ )); then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  elif\
    \ (( $b > $a && $b > $c && $b < $(($a+$c)) )); then\n    if (( $b == $(($a*$a+$c*$c))**0.5\
    \ )); then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  elif\
    \ (( $c > $a && $c > $b && $c < $(($a+$b)) )); then\n    if (( $c == $(($a*$a+$b*$b))**0.5\
    \ )); then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi", "    if [[ $1 -lt 1 || $2 -lt 1 || $3 -lt 1 ]]; then\n\
    \        echo \"false\"\n        return\n    fi\n    local perimeter=$(($1 + $2\
    \ + $3))\n    local p=$(($perimeter / 2))\n    local area=$(echo \"scale=2; sqrt($p\
    \ * ($p - $1) * ($p - $2) * ($p - $3))\" | bc)\n    local a=$(echo \"$area * 4\"\
    \ | bc)\n    local tolerance=$(echo \"scale=6; 1.0 / 1000\" | bc)\n    local area_rounded=$(echo\
    \ \"$area + $tolerance\" | bc)\n    local a_rounded=$(echo \"$a + $tolerance\"\
    \ | bc)\n    if [[ $area_rounded == $a_rounded ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "  [[ \"$1\" -eq \"0\" ]] && return\
    \ 1\n  [[ \"$2\" -eq \"0\" ]] && return 1\n  [[ \"$3\" -eq \"0\" ]] && return\
    \ 1\n  [[ \"$1\" -lt \"0\" ]] && return 1\n  [[ \"$2\" -lt \"0\" ]] && return\
    \ 1\n  [[ \"$3\" -lt \"0\" ]] && return 1\n  [[ \"$(python -c \"import math;print\
    \ math.pow($1,2) == math.pow($2,2) + math.pow($3,2)\")\" == \"True\" ]] && return\
    \ 0\n  [[ \"$(python -c \"import math;print math.pow($2,2) == math.pow($1,2) +\
    \ math.pow($3,2)\")\" == \"True\" ]] && return 0\n  [[ \"$(python -c \"import\
    \ math;print math.pow($3,2) == math.pow($1,2) + math.pow($2,2)\")\" == \"True\"\
    \ ]] && return 0\n  return 1", "    local max=\n    local mid=\n    local min=\n\
    \    # We use bc(1) to do the floating point comparison.\n    if [ $1 -gt $2 ];\
    \ then\n        max=$1\n        min=$2\n    else\n        max=$2\n        min=$1\n\
    \    fi\n    if [ $max -gt $3 ]; then\n        mid=$min\n        min=$3\n    else\n\
    \        mid=$3\n    fi\n    if [ $((max*max)) -eq $((mid*mid+min*min)) ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    max=0\n\
    \    if [[ $1 -gt $2 ]]; then\n        if [[ $1 -gt $3 ]]; then\n            max=$1\n\
    \        else\n            max=$3\n        fi\n    else\n        if [[ $2 -gt\
    \ $3 ]]; then\n            max=$2\n        else\n            max=$3\n        fi\n\
    \    fi\n    sum=0\n    for n in $1 $2 $3; do\n        if [[ $n -ne $max ]]; then\n\
    \            sum=$((sum + n*n))\n        fi\n    done\n    if [[ $max*$max -eq\
    \ $sum ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi", "  # Variables to hold input\n  local a=$1\n  local b=$2\n  local c=$3\n\
    \  # TODO: Return true or false to indicate whether $a, $b, $c forms a right \n\
    \  # angled triangle.\n  echo \"your code goes here\"", "    # write your code\
    \ here\n    a=$1\n    b=$2\n    c=$3\n    for i in \"$@\"\n    do\n        if\
    \ [[ $i -le 0 ]]\n        then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $a -eq 0 || $b -eq 0 || $c -eq 0 ]]\n    then\n\
    \        echo \"false\"\n        return\n    fi\n    if [[ $a -lt $b && $a -lt\
    \ $c ]]\n    then\n        sum_square=$((b*b+c*c))\n        if [[ $sum_square\
    \ -eq $((a*a)) ]]\n        then\n            echo \"true\"\n            return\n\
    \        fi\n    elif [[ $b -lt $a && $b -lt $c ]]\n    then\n        sum_square=$((a*a+c*c))\n\
    \        if [[ $sum_square -eq $((b*b)) ]]\n        then\n            echo \"\
    true\"\n            return\n        fi\n    elif [[ $c -lt $a && $c -lt $b ]]\n\
    \    then\n        sum_square=$((a*a+b*b))\n        if [[ $sum_square -eq $((c*c))\
    \ ]]\n        then\n            echo \"true\"\n            return\n        fi\n\
    \    fi\n    echo \"false\"", "  input=(\"$@\")\n  i=0\n  while [ $i -lt 3 ];\
    \ do\n    # Int check\n    if ! [[ \"${input[$i]}\" =~ ^[0-9]+$ ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n    i=$((i+1))\n  done\n  # Pythagorean\
    \ theorem\n  # a^2 + b^2 = c^2\n  if [ \"$((input[0]*input[0] + input[1]*input[1]))\"\
    \ -eq \"$((input[2]*input[2]))\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  if [[ $# -ne 3 ]]; then\n    echo \"Use: right_angle_triangle\
    \ <integer> <integer> <integer>\"\n    return 1\n  fi\n  local biggest=$1\n  if\
    \ [[ $2 -gt $biggest ]]; then\n    biggest=$2\n  fi\n  if [[ $3 -gt $biggest ]];\
    \ then\n    biggest=$3\n  fi\n  local second_biggest=$1\n  if [[ $2 -gt $second_biggest\
    \ ]]; then\n    second_biggest=$2\n  fi\n  if [[ $3 -gt $second_biggest ]]; then\n\
    \    second_biggest=$3\n  fi\n  local smallest=$1\n  if [[ $2 -lt $smallest ]];\
    \ then\n    smallest=$2\n  fi\n  if [[ $3 -lt $smallest ]]; then\n    smallest=$3\n\
    \  fi\n  if [[ ($biggest**2) -eq $((second_biggest**2 + smallest**2)) ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi"]
stop_tokens:
- "\n}"
