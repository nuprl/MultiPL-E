name: HumanEval_157_right_angle_triangle
language: sh
prompt: "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return\
  \ true if the three\n# sides form a right-angled triangle, false otherwise.\n# A\
  \ right-angled triangle is a triangle in which one angle is right angle or \n# 90\
  \ degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\
  \n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n\
  # $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n"
tests: "}\n\ncandidate() {\n    right_angle_triangle \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"3\" \"4\" \"5\") = \"true\" ]]\n    [[ $(candidate \"\
  1\" \"2\" \"3\") = \"false\" ]]\n    [[ $(candidate \"10\" \"6\" \"8\") = \"true\"\
  \ ]]\n    [[ $(candidate \"2\" \"2\" \"2\") = \"false\" ]]\n    [[ $(candidate \"\
  7\" \"24\" \"25\") = \"true\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"false\"\
  \ ]]\n    [[ $(candidate \"5\" \"12\" \"13\") = \"true\" ]]\n    [[ $(candidate\
  \ \"15\" \"8\" \"17\") = \"true\" ]]\n    [[ $(candidate \"48\" \"55\" \"73\") =\
  \ \"true\" ]]\n    [[ $(candidate \"1\" \"1\" \"1\") = \"false\" ]]\n    [[ $(candidate\
  \ \"2\" \"2\" \"10\") = \"false\" ]]\n}\n\nrun_test"
completions: ["    local a=$1\n    local b=$2\n    local c=$3\n    local hypotenuse=$c\n\
    \    local sum=$(($a*$a + $b*$b))\n    local expected_sum=$(($c*$c))\n    if [\
    \ $hypotenuse -ne $(($a > $b ? $a : $b)) ]; then\n        if [ $a -gt $b ]; then\n\
    \            hypotenuse=$a\n        else\n            hypotenuse=$b\n        fi\n\
    \    fi\n    if [ $sum -eq $expected_sum ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  if [ $# -eq 3 ]; then\n    # a^2 + b^2 =\
    \ c^2\n    if [ $(($1*$1+$2*$2)) -eq $(($3*$3)) ]; then\n      echo \"true\"\n\
    \    else\n      echo \"false\"\n    fi\n  else\n    echo \"Usage: right_angle_triangle\
    \ \\\"integer\\\" \\\"integer\\\" \\\"integer\\\"\"\n  fi", "  local ARG1=${1:-0}\n\
    \  local ARG2=${2:-0}\n  local ARG3=${3:-0}\n  local sum=$((ARG1 + ARG2 + ARG3))\n\
    \  if [[ $sum -ne 180 ]]; then\n    echo \"false\"\n  else\n    echo \"true\"\n\
    \  fi", "  # The length of the three sides of a triangle is greater than 0.\n\
    \  if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ]; then\n    echo \"false\"\n\
    \    return\n  fi\n  # a is the longest side\n  a=$1\n  if [ $2 -gt $a ]; then\n\
    \    a=$2\n  fi\n  if [ $3 -gt $a ]; then\n    a=$3\n  fi\n  # b is the second\
    \ longest side\n  b=$1\n  if [ $2 -gt $b ] && [ $2 -lt $a ]; then\n    b=$2\n\
    \  fi\n  if [ $3 -gt $b ] && [ $3 -lt $a ]; then\n    b=$3\n  fi\n  # c is the\
    \ third longest side\n  c=$1\n  if [ $2 -gt $c ] && [ $2 -lt $b ]; then\n    c=$2\n\
    \  fi\n  if [ $3 -gt $c ] && [ $3 -lt $b ]; then\n    c=$3\n  fi\n  # If a is\
    \ the longest side, and it has the length of sqrt(a^2 + b^2)\n  # The triangle\
    \ is a right-angled triangle.\n  if [ $a -eq $(echo \"sqrt($b*$b + $c*$c)\" |\
    \ bc) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if [[\
    \ \"$1\" =~ ^[0-9]+$ && \"$2\" =~ ^[0-9]+$ && \"$3\" =~ ^[0-9]+$ ]]; then\n  \
    \  a=$1\n    b=$2\n    c=$3\n    if (( a*a + b*b == c*c )) || (( b*b + c*c ==\
    \ a*a )) || (( c*c + a*a == b*b )); then\n      echo \"true\"\n    else\n    \
    \  echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", "  # Variables are\
    \ named c, b, a for better readability.\n  # The formula for the check is: c^2\
    \ = a^2 + b^2\n  local a=\"$1\"\n  local b=\"$2\"\n  local c=\"$3\"\n  local a_sqr\n\
    \  local b_sqr\n  local c_sqr\n  # Square the lengths.\n  a_sqr=$(( a * a ))\n\
    \  b_sqr=$(( b * b ))\n  c_sqr=$(( c * c ))\n  # Check the equation.\n  if [ \"\
    $c_sqr\" -eq \"$(( a_sqr + b_sqr ))\" ]; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi", "  square_a=$(( $1 ** 2 ))\n  square_b=$(( $2 ** 2 ))\n\
    \  square_c=$(( $3 ** 2 ))\n  # If a^2 + b^2 = c^2 then it is a right angled triangle\n\
    \  if [[ \"$square_a\" -eq \"$(( $square_b + $square_c ))\" ]]; then\n    echo\
    \ \"true\"\n  elif [[ \"$square_b\" -eq \"$(( $square_a + $square_c ))\" ]]; then\n\
    \    echo \"true\"\n  elif [[ \"$square_c\" -eq \"$(( $square_a + $square_b ))\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local a=$1\n\
    \    local b=$2\n    local c=$3\n    if [ $((a*a+b*b)) -eq $((c*c)) ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local a=$1\n\
    \  local b=$2\n  local c=$3\n  local max_val=$(($a * $a + $b * $b))\n  local result\n\
    \  if [[ $max_val -eq $(($c * $c)) ]]; then\n    result=\"true\"\n  else\n   \
    \ result=\"false\"\n  fi\n  echo $result", "    # a, b, c are sides of the triangle\n\
    \    local a=${1?}\n    local b=${2?}\n    local c=${3?}\n    local arr=($a $b\
    \ $c)\n    local max=${arr[0]}\n    local sum=0\n    # Find max value\n    for\
    \ i in \"${arr[@]}\"; do\n        if [[ $i -gt $max ]]; then\n            max=$i\n\
    \        fi\n    done\n    # Count sum of other two sides\n    for i in \"${arr[@]}\"\
    ; do\n        if [[ $i -ne $max ]]; then\n            sum=$((sum + i))\n     \
    \   fi\n    done\n    # Return true if max = sum^2\n    if [[ $max -eq $((sum*sum))\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    if (($1 > 0 && $2 > 0 && $3 > 0)); then\n        # Compute the squares of the\
    \ three sides\n        a=$(( $1 * $1 ))\n        b=$(( $2 * $2 ))\n        c=$((\
    \ $3 * $3 ))\n        if (( $a + $b == $c || $a + $c == $b || $b + $c == $a ));\
    \ then\n            echo \"true\"\n        else\n            echo \"false\"\n\
    \        fi\n    else\n        echo \"false\"\n    fi", "  a=\"$1\"\n  b=\"$2\"\
    \n  c=\"$3\"\n  if (( $a == 0 || $b == 0 || $c == 0 )); then\n    echo \"false\"\
    \n  elif (( $a > $b && $a > $c && $a < $(($b+$c)) )); then\n    if (( $a == $(($b*$b+$c*$c))**0.5\
    \ )); then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  elif\
    \ (( $b > $a && $b > $c && $b < $(($a+$c)) )); then\n    if (( $b == $(($a*$a+$c*$c))**0.5\
    \ )); then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  elif\
    \ (( $c > $a && $c > $b && $c < $(($a+$b)) )); then\n    if (( $c == $(($a*$a+$b*$b))**0.5\
    \ )); then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi", "    if [[ $1 -lt 1 || $2 -lt 1 || $3 -lt 1 ]]; then\n\
    \        echo \"false\"\n        return\n    fi\n    local perimeter=$(($1 + $2\
    \ + $3))\n    local p=$(($perimeter / 2))\n    local area=$(echo \"scale=2; sqrt($p\
    \ * ($p - $1) * ($p - $2) * ($p - $3))\" | bc)\n    local a=$(echo \"$area * 4\"\
    \ | bc)\n    local tolerance=$(echo \"scale=6; 1.0 / 1000\" | bc)\n    local area_rounded=$(echo\
    \ \"$area + $tolerance\" | bc)\n    local a_rounded=$(echo \"$a + $tolerance\"\
    \ | bc)\n    if [[ $area_rounded == $a_rounded ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "  [[ \"$1\" -eq \"0\" ]] && return\
    \ 1\n  [[ \"$2\" -eq \"0\" ]] && return 1\n  [[ \"$3\" -eq \"0\" ]] && return\
    \ 1\n  [[ \"$1\" -lt \"0\" ]] && return 1\n  [[ \"$2\" -lt \"0\" ]] && return\
    \ 1\n  [[ \"$3\" -lt \"0\" ]] && return 1\n  [[ \"$(python -c \"import math;print\
    \ math.pow($1,2) == math.pow($2,2) + math.pow($3,2)\")\" == \"True\" ]] && return\
    \ 0\n  [[ \"$(python -c \"import math;print math.pow($2,2) == math.pow($1,2) +\
    \ math.pow($3,2)\")\" == \"True\" ]] && return 0\n  [[ \"$(python -c \"import\
    \ math;print math.pow($3,2) == math.pow($1,2) + math.pow($2,2)\")\" == \"True\"\
    \ ]] && return 0\n  return 1", "    local max=\n    local mid=\n    local min=\n\
    \    # We use bc(1) to do the floating point comparison.\n    if [ $1 -gt $2 ];\
    \ then\n        max=$1\n        min=$2\n    else\n        max=$2\n        min=$1\n\
    \    fi\n    if [ $max -gt $3 ]; then\n        mid=$min\n        min=$3\n    else\n\
    \        mid=$3\n    fi\n    if [ $((max*max)) -eq $((mid*mid+min*min)) ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    max=0\n\
    \    if [[ $1 -gt $2 ]]; then\n        if [[ $1 -gt $3 ]]; then\n            max=$1\n\
    \        else\n            max=$3\n        fi\n    else\n        if [[ $2 -gt\
    \ $3 ]]; then\n            max=$2\n        else\n            max=$3\n        fi\n\
    \    fi\n    sum=0\n    for n in $1 $2 $3; do\n        if [[ $n -ne $max ]]; then\n\
    \            sum=$((sum + n*n))\n        fi\n    done\n    if [[ $max*$max -eq\
    \ $sum ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n   \
    \ fi", "  # Variables to hold input\n  local a=$1\n  local b=$2\n  local c=$3\n\
    \  # TODO: Return true or false to indicate whether $a, $b, $c forms a right \n\
    \  # angled triangle.\n  echo \"your code goes here\"", "    # write your code\
    \ here\n    a=$1\n    b=$2\n    c=$3\n    for i in \"$@\"\n    do\n        if\
    \ [[ $i -le 0 ]]\n        then\n            echo \"false\"\n            return\n\
    \        fi\n    done\n    if [[ $a -eq 0 || $b -eq 0 || $c -eq 0 ]]\n    then\n\
    \        echo \"false\"\n        return\n    fi\n    if [[ $a -lt $b && $a -lt\
    \ $c ]]\n    then\n        sum_square=$((b*b+c*c))\n        if [[ $sum_square\
    \ -eq $((a*a)) ]]\n        then\n            echo \"true\"\n            return\n\
    \        fi\n    elif [[ $b -lt $a && $b -lt $c ]]\n    then\n        sum_square=$((a*a+c*c))\n\
    \        if [[ $sum_square -eq $((b*b)) ]]\n        then\n            echo \"\
    true\"\n            return\n        fi\n    elif [[ $c -lt $a && $c -lt $b ]]\n\
    \    then\n        sum_square=$((a*a+b*b))\n        if [[ $sum_square -eq $((c*c))\
    \ ]]\n        then\n            echo \"true\"\n            return\n        fi\n\
    \    fi\n    echo \"false\"", "  input=(\"$@\")\n  i=0\n  while [ $i -lt 3 ];\
    \ do\n    # Int check\n    if ! [[ \"${input[$i]}\" =~ ^[0-9]+$ ]]; then\n   \
    \   echo \"false\"\n      return\n    fi\n    i=$((i+1))\n  done\n  # Pythagorean\
    \ theorem\n  # a^2 + b^2 = c^2\n  if [ \"$((input[0]*input[0] + input[1]*input[1]))\"\
    \ -eq \"$((input[2]*input[2]))\" ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  if [[ $# -ne 3 ]]; then\n    echo \"Use: right_angle_triangle\
    \ <integer> <integer> <integer>\"\n    return 1\n  fi\n  local biggest=$1\n  if\
    \ [[ $2 -gt $biggest ]]; then\n    biggest=$2\n  fi\n  if [[ $3 -gt $biggest ]];\
    \ then\n    biggest=$3\n  fi\n  local second_biggest=$1\n  if [[ $2 -gt $second_biggest\
    \ ]]; then\n    second_biggest=$2\n  fi\n  if [[ $3 -gt $second_biggest ]]; then\n\
    \    second_biggest=$3\n  fi\n  local smallest=$1\n  if [[ $2 -lt $smallest ]];\
    \ then\n    smallest=$2\n  fi\n  if [[ $3 -lt $smallest ]]; then\n    smallest=$3\n\
    \  fi\n  if [[ ($biggest**2) -eq $((second_biggest**2 + smallest**2)) ]]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    # checks whether the\
    \ inputs are only integers and not characters\n    if ! [[ \"$1\" =~ ^-?[0-9]+$\
    \ ]] || ! [[ \"$2\" =~ ^-?[0-9]+$ ]] || ! [[ \"$3\" =~ ^-?[0-9]+$ ]]; then\n \
    \       echo \"error\"\n        return 1\n    fi\n    # checks whether the inputs\
    \ are not negative\n    if [[ \"$1\" -lt 0 ]] || [[ \"$2\" -lt 0 ]] || [[ \"$3\"\
    \ -lt 0 ]]; then\n        echo \"error\"\n        return 1\n    fi\n    # checks\
    \ whether the sides form a triangle\n    if [[ \"$1\" -ge \"$2\" ]] && [[ \"$1\"\
    \ -ge \"$3\" ]]; then\n        if [[ \"$1\" -eq \"$2\" ]] && [[ \"$1\" -eq \"\
    $3\" ]]; then\n            echo \"false\"\n            return 0\n        fi\n\
    \        # checks whether the triangle is right angled\n        if [[ \"$(bc <<<\
    \ \"$1^2 == $2^2 + $3^2\")\" == \"1\" ]]; then\n            echo \"true\"\n  \
    \          return 0\n        fi\n    elif [[ \"$2\" -ge \"$1\" ]] && [[ \"$2\"\
    \ -ge \"$3\" ]]; then\n        if [[ \"$2\" -eq \"$1\" ]] && [[ \"$2\" -eq \"\
    $3\" ]]; then\n            echo \"false\"\n            return 0\n        fi\n\
    \        # checks whether the triangle is right angled\n        if [[ \"$(bc <<<\
    \ \"$2^2 == $1^2 + $3^2\")\" == \"1\" ]]; then\n            echo \"true\"\n  \
    \          return 0\n        fi\n    elif [[ \"$3\" -ge \"$1\" ]] && [[ \"$3\"\
    \ -ge \"$2\" ]]; then\n        if [[ \"$3\" -eq \"$1\" ]] && [[ \"$3\" -eq \"\
    $2\" ]]; then\n            echo \"false\"\n            return 0\n        fi\n\
    \        # checks whether the triangle is right angled\n        if [[ \"$(bc <<<\
    \ \"$3^2 == $1^2 + $2^2\")\" == \"1\" ]]; then\n            echo \"true", "  \
    \  if (( $1 <= 0 || $2 <= 0 || $3 <= 0 )); then\n        return 1\n    fi\n  \
    \  declare -a arr=(\"$1\" \"$2\" \"$3\")\n    IFS=$'\\n' sorted=($(sort -n <<<\"\
    ${arr[*]}\"))\n    unset IFS\n    if (( ${sorted[0]}**2 + ${sorted[1]}**2 == ${sorted[2]}**2\
    \ )); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    a=$1\n    b=$2\n    c=$3\n    max=$a\n    if [ $b -gt $max ]; then\n      \
    \  max=$b\n    fi\n    if [ $c -gt $max ]; then\n        max=$c\n    fi\n    if\
    \ [ $max -eq $a ]; then\n        if [ $(( $((b*b)) + $((c*c)) )) -eq $(( $((a*a))\
    \ )) ]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    elif [ $max -eq $b ]; then\n        if [ $(( $((a*a)) + $((c*c))\
    \ )) -eq $(( $((b*b)) )) ]; then\n            echo \"true\"\n        else\n  \
    \          echo \"false\"\n        fi\n    elif [ $max -eq $c ]; then\n      \
    \  if [ $(( $((a*a)) + $((b*b)) )) -eq $(( $((c*c)) )) ]; then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    fi", " \
    \ if [[ ! \"$1\" =~ ^[0-9]+$ ]] || [[ ! \"$2\" =~ ^[0-9]+$ ]] || [[ ! \"$3\" =~\
    \ ^[0-9]+$ ]]; then\n    echo 'false'\n    return\n  fi\n  if [[ \"$1\" -eq 0\
    \ ]] || [[ \"$2\" -eq 0 ]] || [[ \"$3\" -eq 0 ]]; then\n    echo 'false'\n   \
    \ return\n  fi\n  if [[ \"$1\" -eq \"$2\" ]] && [[ \"$2\" -eq \"$3\" ]]; then\n\
    \    echo 'false'\n    return\n  fi\n  if [[ \"$1\" -eq \"$2\" ]] || [[ \"$2\"\
    \ -eq \"$3\" ]] || [[ \"$1\" -eq \"$3\" ]]; then\n    echo 'false'\n    return\n\
    \  fi\n  # Use pythagorean theorem to check\n  if [[ $(($1*$1+$2*$2)) -eq $(($3*$3))\
    \ ]] || [[ $(($2*$2+$3*$3)) -eq $(($1*$1)) ]] || [[ $(($1*$1+$3*$3)) -eq $(($2*$2))\
    \ ]]; then\n    echo 'true'\n  else\n    echo 'false'\n  fi", "    if [ $# -eq\
    \ 3 ]; then\n        local a=\"$1\"\n        local b=\"$2\"\n        local c=\"\
    $3\"\n        [[ \"$a\" =~ ^[0-9]+$ ]] && [[ \"$b\" =~ ^[0-9]+$ ]] && [[ \"$c\"\
    \ =~ ^[0-9]+$ ]] && [[ \"$a\" -gt 0 ]] && [[ \"$b\" -gt 0 ]] && [[ \"$c\" -gt\
    \ 0 ]] || return 1\n        if [ \"$((a * a + b * b))\" -eq \"$((c * c))\" ];\
    \ then\n            echo \"true\"\n        else\n            echo \"false\"\n\
    \        fi\n    else\n        echo \"Usage: right_angle_triangle <a> <b> <c>\"\
    \n        return 1\n    fi", "\ttriangle=($@)\n\ttriangle_sorted=($(echo \"${triangle[@]}\"\
    \ | tr ' ' '\\n' | sort -n))\n\thypotenuse=\"${triangle_sorted[2]}\"\n\ta=\"${triangle_sorted[0]}\"\
    \n\tb=\"${triangle_sorted[1]}\"\n\tif [ $((hypotenuse**2)) = $(((a**2)+(b**2)))\
    \ ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi", "    local a=$1\n\
    \    local b=$2\n    local c=$3\n    local triangle=\"false\"\n    if [ $a -gt\
    \ 0 ] && [ $b -gt 0 ] && [ $c -gt 0 ]; then\n        if [ $(($a * $a + $b * $b))\
    \ -eq $(($c * $c)) ] ||\n           [ $(($a * $a + $c * $c)) -eq $(($b * $b))\
    \ ] ||\n           [ $(($b * $b + $c * $c)) -eq $(($a * $a)) ]; then\n       \
    \     triangle=\"true\"\n        fi\n    fi\n    echo $triangle", "    # Set $a\
    \ as the first argument\n    a=$1\n    # Set $b as the second argument\n    b=$2\n\
    \    # Set $c as the third argument\n    c=$3\n    # Check the case the three\
    \ sides form a right-angled triangle\n    if [ $(($a * $a + $b * $b)) == $(($c\
    \ * $c)) ]; then\n        # Return true if the three sides form a right-angled\
    \ triangle\n        echo \"true\"\n    # Check the case the three sides does not\
    \ form a right-angled triangle\n    elif [ $(($a * $a + $c * $c)) == $(($b * $b))\
    \ ]; then\n        # Return true if the three sides form a right-angled triangle\n\
    \        echo \"true\"\n    # Check the case the three sides does not form a right-angled\
    \ triangle\n    elif [ $(($b * $b + $c * $c)) == $(($a * $a)) ]; then\n      \
    \  # Return true if the three sides form a right-angled triangle\n        echo\
    \ \"true\"\n    # Check the case the three sides does not form a right-angled\
    \ triangle\n    else\n        # Return false if the three sides does not form\
    \ a right-angled triangle\n        echo \"false\"\n    fi", "  local a=$1\n  local\
    \ b=$2\n  local c=$3\n  # Write your code here", "    # Your code goes here\n\
    \    if [ $# -ne 3 ]; then\n        echo \"Please enter three numeric arguments\
    \ to test\"\n        exit 1\n    fi\n    if [ -z \"$(echo $1 | sed 's/[0-9]//g')\"\
    \ ] && [ -z \"$(echo $2 | sed 's/[0-9]//g')\" ] && [ -z \"$(echo $3 | sed 's/[0-9]//g')\"\
    \ ]; then\n        return 1\n    else\n        return 0\n    fi", "  if [ $# -ne\
    \ 3 ]; then\n    echo \"Usage: right_angle_triangle side1 side2 side3\"\n    return\
    \ 1\n  fi\n  local a=$1\n  local b=$2\n  local c=$3\n  if (( a*a == b*b + c*c\
    \ || b*b == a*a + c*c || c*c == a*a + b*b )); then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local side1=$1\n  local side2=$2\n  local side3=$3\n\
    \  # Write your code here\n  (( $side1>=$side2 && $side1>=$side3 )) && [[ $((side1*side1))\
    \ -eq $((side2*side2+side3*side3)) ]] && echo \"true\" || echo \"false\"", " \
    \   # The three sides of a triangle must satisfy the Triangle Inequality Theorem.\n\
    \    # That is, the sum of any two sides of a triangle must be greater than the\
    \ \n    # third side.\n    if [[ $1 -eq 0 || $2 -eq 0 || $3 -eq 0 ]]; then\n \
    \       echo \"false\"\n        return\n    fi\n    # Triangle Inequality Theorem\n\
    \    if [[ $1 + $2 -le $3 || $1 + $3 -le $2 || $2 + $3 -le $1 ]]; then\n     \
    \   echo \"false\"\n        return\n    fi\n    # Sides of a right-angled triangle\
    \ must satisfy pythagorean theorem.\n    if [[ $1 -eq $(($2 ** 2 + $3 ** 2)) **\
    \ 0.5 || $2 -eq $(($1 ** 2 + $3 ** 2)) ** 0.5 || $3 -eq $(($1 ** 2 + $2 ** 2))\
    \ ** 0.5 ]]; then\n        echo \"true\"\n        return\n    fi\n    echo \"\
    false\"", "    [[ $1 -eq 0 || $2 -eq 0 || $3 -eq 0 ]] && return 1\n    a=$1; b=$2;\
    \ c=$3\n    a1=$(($a + $b)); a2=$(($a + $c)); a3=$(($b + $c))\n    if [[ $a1 -eq\
    \ $c || $a2 -eq $b || $a3 -eq $a ]]; then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi", "    if (( $1 == 0 || $2 == 0 || $3 == 0 ))\n\
    \    then\n        echo \"false\"\n    else\n        local result=$(echo \"($1\
    \ * $1) + ($2 * $2)\" | bc -l)\n        local hypotenuse=$(echo \"$3 * $3\" |\
    \ bc -l)\n        if (( $(echo \"$result == $hypotenuse\" | bc -l) == 1 ))\n \
    \       then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    fi", "    local a=$1 b=$2 c=$3\n    # if a, b and c are not\
    \ integers\n    if [ \"$(echo \"$a\" | grep -E \"^[0-9]+$\")\" == \"\" ] || \\\
    \n       [ \"$(echo \"$b\" | grep -E \"^[0-9]+$\")\" == \"\" ] || \\\n       [\
    \ \"$(echo \"$c\" | grep -E \"^[0-9]+$\")\" == \"\" ]; then\n        echo \"false\"\
    \n        return\n    fi\n    # if not a right-angled triangle\n    local arr=($a\
    \ $b $c)\n    local max=${arr[0]}\n    for ((i=1; i<3; i++)); do\n        if [\
    \ \"${arr[$i]}\" -gt \"$max\" ]; then\n            max=${arr[$i]}\n        fi\n\
    \    done\n    for ((i=0; i<3; i++)); do\n        if [ \"${arr[$i]}\" -eq \"$max\"\
    \ ]; then\n            unset arr[$i]\n            break\n        fi\n    done\n\
    \    if [ \"$(( $max * $max ))\" -ne \"$(( ${arr[0]} * ${arr[0]} + ${arr[1]} *\
    \ ${arr[1]} ))\" ]; then\n        echo \"false\"\n        return\n    fi\n   \
    \ echo \"true\"", "  declare -i a b c\n  a=\"$1\"\n  b=\"$2\"\n  c=\"$3\"\n  declare\
    \ -i ab abc abc2\n  ab=$((a*a + b*b))\n  abc=$((c*c))\n  abc2=$((ab - abc))\n\
    \  if [[ $abc2 -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "  if [ -z \"$1\" ] || [ -z \"$2\" ] || [ -z \"$3\" ]; then\n    echo\
    \ \"false\"\n    return\n  fi\n  local _a=$1\n  local _b=$2\n  local _c=$3\n \
    \ local _max\n  local _hypotenuse\n  local _non_hypotenuse\n  # find the hypotenuse\n\
    \  if [ $_a -ge $_b ] && [ $_a -ge $_c ]; then\n    _max=$_a\n    _hypotenuse=$_a\n\
    \    _non_hypotenuse=\"$_b$_c\"\n  elif [ $_b -ge $_a ] && [ $_b -ge $_c ]; then\n\
    \    _max=$_b\n    _hypotenuse=$_b\n    _non_hypotenuse=\"$_a$_c\"\n  else\n \
    \   _max=$_c\n    _hypotenuse=$_c\n    _non_hypotenuse=\"$_a$_b\"\n  fi\n  local\
    \ _non_hypotenuse_sum=$(echo $_non_hypotenuse | awk '{print $1+$2}')\n  if [ $_hypotenuse\
    \ -eq $_non_hypotenuse_sum ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  if [[ $1 -eq 0 || $2 -eq 0 || $3 -eq 0 ]]; then\n    echo \"false\"\
    \n  else\n    if [[ $(($1*$1 + $2*$2)) -eq $(($3*$3)) ]]; then\n      echo \"\
    true\"\n    else\n      echo \"false\"\n    fi\n  fi", "    echo $1 $2 $3 | \\\
    \n    awk '{\n        if($1 == 0 || $2 == 0 || $3 == 0){\n            print \"\
    false\"\n        }\n        else if($1 * $1 + $2 * $2 == $3 * $3 || \\\n     \
    \          $1 * $1 + $3 * $3 == $2 * $2 || \\\n               $2 * $2 + $3 * $3\
    \ == $1 * $1){\n            print \"true\"\n        }\n        else{\n       \
    \     print \"false\"\n        }\n    }'", "  a=$1\n  b=$2\n  c=$3\n  if [[ $a\
    \ -gt $b ]]; then\n    # rotate\n    tmp=$b\n    b=$a\n    a=$tmp\n  fi\n  if\
    \ [[ $b -gt $c ]]; then\n    # rotate\n    tmp=$c\n    c=$b\n    b=$tmp\n  fi\n\
    \  if [[ $a -gt $b ]]; then\n    # rotate\n    tmp=$b\n    b=$a\n    a=$tmp\n\
    \  fi\n  (( sqa=$a*$a ))\n  (( sqb=$b*$b ))\n  (( sqc=$c*$c ))\n  if [[ $sqa -eq\
    \ $sqb+$sqc ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", " \
    \   local side1=$1\n    local side2=$2\n    local side3=$3\n    local hypotenuse=0\n\
    \    local cathetus1=0\n    local cathetus2=0\n    local result=\"\"\n\n    if\
    \ [[ $side1 -ge $side2 ]] && [[ $side1 -ge $side3 ]]; then\n        hypotenuse=$side1\n\
    \        cathetus1=$side2\n        cathetus2=$side3\n    elif [[ $side2 -ge $side1\
    \ ]] && [[ $side2 -ge $side3 ]]; then\n        hypotenuse=$side2\n        cathetus1=$side1\n\
    \        cathetus2=$side3\n    else\n        hypotenuse=$side3\n        cathetus1=$side1\n\
    \        cathetus2=$side2\n    fi\n\n    local hypotenuse_squared=$((hypotenuse*hypotenuse))\n\
    \    local cathetus1_squared=$((cathetus1*cathetus1))\n    local cathetus2_squared=$((cathetus2*cathetus2))\n\
    \n    if [[ $(($cathetus1_squared + $cathetus2_squared)) == $hypotenuse_squared\
    \ ]]; then\n        result=\"true\"\n    else\n        result=\"false\"\n    fi\n\
    \n    echo $result", "  local a=\"$1\"\n  local b=\"$2\"\n  local c=\"$3\"\n \
    \ [[ \"$((a*a+b*b))\" -eq \"$((c*c))\" ]] && \\\n  echo \"true\" || \\\n  echo\
    \ \"false\"", "  if [ \"$1\" -gt 0 ] && [ \"$2\" -gt 0 ] && [ \"$3\" -gt 0 ];\
    \ then\n    if [ \"$1\" -eq \"$2\" ] && [ \"$2\" -eq \"$3\" ]; then\n      echo\
    \ \"false\"\n    elif [ \"$1\" -eq \"$2\" ] || [ \"$2\" -eq \"$3\" ] || [ \"$1\"\
    \ -eq \"$3\" ]; then\n      echo \"false\"\n    elif [ \"$(bc <<< \"$1^2+$2^2\"\
    )\" -eq \"$(bc <<< \"$3^2\")\" ]; then\n      echo \"true\"\n    elif [ \"$(bc\
    \ <<< \"$1^2+$3^2\")\" -eq \"$(bc <<< \"$2^2\")\" ]; then\n      echo \"true\"\
    \n    elif [ \"$(bc <<< \"$2^2+$3^2\")\" -eq \"$(bc <<< \"$1^2\")\" ]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi", "  if [ -z \"${1}\" ] || [ -z \"${2}\" ] || [ -z \"${3}\"\
    \ ]; then\n    echo \"false\"\n    return 1\n  fi\n \n  if [ \"${1}\" -eq 0 ]\
    \ || [ \"${2}\" -eq 0 ] || [ \"${3}\" -eq 0 ]; then\n    echo \"false\"\n    return\
    \ 2\n  fi\n\n  if [ \"${1}\" -eq \"${2}\" ] || [ \"${1}\" -eq \"${3}\" ] || [\
    \ \"${2}\" -eq \"${3}\" ]; then\n    echo \"false\"\n    return 3\n  fi\n\n  if\
    \ [ \"${1}\" -lt 0 ] || [ \"${2}\" -lt 0 ] || [ \"${3}\" -lt 0 ]; then\n    echo\
    \ \"false\"\n    return 4\n  fi\n\n  if [ \"${1}\" -gt \"${2}\" ] && [ \"${1}\"\
    \ -gt \"${3}\" ]; then\n    if [ \"${1}\" -eq \"$(( ${2} * ${2} + ${3} * ${3}\
    \ ))\" ]; then\n      echo \"true\"\n      return 0\n    fi\n  fi\n\n  if [ \"\
    ${2}\" -gt \"${1}\" ] && [ \"${2}\" -gt \"${3}\" ]; then\n    if [ \"${2}\" -eq\
    \ \"$(( ${1} * ${1} + ${3} * ${3} ))\" ]; then\n      echo \"true\"\n      return\
    \ 0\n    fi\n  fi\n\n  if [ \"${3}\" -gt \"${1}\" ] && [ \"${3}\" -gt \"${2}\"\
    \ ]; then\n    if [ \"${3}\" -eq \"$(( ${1} * ${1} + ${2} * ${2} ))\" ]; then\n\
    \      echo \"true\"\n      return 0\n    fi\n  fi\n\n  echo \"false\"\n  return\
    \ 0", "    if (( $(echo \"$1 * $1 + $2 * $2\" | bc) == $3 * $3 )); then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local side1=$1\n\
    \    local side2=$2\n    local side3=$3\n    if [ \"$side1\" -eq 0 ] || [ \"$side2\"\
    \ -eq 0 ] || [ \"$side3\" -eq 0 ]; then\n        echo \"false\"\n    elif [ \"\
    $side1\" -lt 0 ] || [ \"$side2\" -lt 0 ] || [ \"$side3\" -lt 0 ]; then\n     \
    \   echo \"false\"\n    elif [ $((side1+side2)) -lt $side3 ] || \\\n         [\
    \ $((side1+side3)) -lt $side2 ] || \\\n         [ $((side2+side3)) -lt $side1\
    \ ]; then\n        echo \"false\"\n    elif [ \"$side1\" -eq $side2 ] && [ \"\
    $side2\" -eq $side3 ]; then\n        echo \"false\"\n    elif [ $((side1*side1+side2*side2))\
    \ -eq $((side3*side3)) ] || \\\n         [ $((side1*side1+side3*side3)) -eq $((side2*side2))\
    \ ] || \\\n         [ $((side2*side2+side3*side3)) -eq $((side1*side1)) ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ a=$1\n    local b=$2\n    local c=$3\n    local right_angle=false\n    local\
    \ edges=(\"$a\" \"$b\" \"$c\")\n    IFS=$'\\n'\n    sort_edges=($(sort -n <<<\"\
    ${edges[*]}\"))\n    unset IFS\n    local max_edge=${sort_edges[2]}\n    local\
    \ sum_squares=$(((${sort_edges[0]} ** 2) + (${sort_edges[1]} ** 2)))\n    if [[\
    \ $sum_squares -eq $((max_edge ** 2)) ]]; then\n        right_angle=true\n   \
    \ fi\n    if [[ $right_angle == true ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local a=$1\n    local b=$2\n    local c=$3\n\
    \    if [[ $a -gt $b ]]; then\n        if [[ $a -gt $c ]]; then\n            echo\
    \ $(($a * $a)) $(($b * $b + $c * $c)) | awk '$1 == $2 {print \"true\"}'\n    \
    \    else\n            echo $(($c * $c)) $(($a * $a + $b * $b)) | awk '$1 == $2\
    \ {print \"true\"}'\n        fi\n    else\n        if [[ $b -gt $c ]]; then\n\
    \            echo $(($b * $b)) $(($a * $a + $c * $c)) | awk '$1 == $2 {print \"\
    true\"}'\n        else\n            echo $(($c * $c)) $(($a * $a + $b * $b)) |\
    \ awk '$1 == $2 {print \"true\"}'\n        fi\n    fi", "    local max=0\n   \
    \ local min=0\n    local mid=0\n    local ret=\"false\"\n    if [ -z \"$1\" ]\
    \ || [ -z \"$2\" ] || [ -z \"$3\" ]; then\n        echo \"Invalid parameters\"\
    \n        return\n    fi\n    [ \"$1\" -ge \"$2\" ] && [ \"$1\" -ge \"$3\" ] &&\
    \ max=\"$1\" && min=\"$2\" && mid=\"$3\"\n    [ \"$2\" -ge \"$1\" ] && [ \"$2\"\
    \ -ge \"$3\" ] && max=\"$2\" && min=\"$1\" && mid=\"$3\"\n    [ \"$3\" -ge \"\
    $1\" ] && [ \"$3\" -ge \"$2\" ] && max=\"$3\" && min=\"$1\" && mid=\"$2\"\n  \
    \  if [ \"$max\" -gt 0 ] && [ \"$min\" -gt 0 ] && [ \"$mid\" -gt 0 ]; then\n \
    \       [ \"$((max*max))\" -eq \"$((min*min+mid*mid))\" ] && ret=\"true\"\n  \
    \  fi\n    echo \"$ret\"", "    local a=$1 b=$2 c=$3\n    if (( a * a + b * b\
    \ == c * c )); then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi", "    side1=${1};side2=${2};side3=${3}\n    if ((side1>side2)); then\n\
    \        tmp=${side1};side1=${side2};side2=${tmp}\n    fi\n    if ((side2>side3));\
    \ then\n        tmp=${side2};side2=${side3};side3=${tmp}\n    fi\n    if ((side1>side2));\
    \ then\n        tmp=${side1};side1=${side2};side2=${tmp}\n    fi\n    if ((side1*side1+side2*side2==side3*side3));\
    \ then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  \
    \  if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n        if [[ $1 == $2 &&\
    \ $2 == $3 ]]; then\n            echo \"equilateral\"\n        elif [[ $1 == $2\
    \ || $2 == $3 || $1 == $3 ]]; then\n            echo \"isosceles\"\n        else\n\
    \            echo \"scalene\"\n        fi\n    else\n        echo \"invalid\"\n\
    \    fi", "    local a=$1 b=$2 c=$3\n    local max=0 max_index=0\n\n    local\
    \ arr=($a $b $c)\n    for i in 0 1 2; do\n        ((max < arr[i])) && max=${arr[i]}\
    \ max_index=$i\n    done\n\n    # Move the max value to the first place.\n   \
    \ arr[0]=${arr[max_index]}\n    if ((max_index == 1)); then\n        arr[1]=${arr[2]}\n\
    \        arr[2]=$max\n    elif ((max_index == 2)); then\n        arr[1]=$max\n\
    \    fi\n\n    local sum=0\n    for i in 0 1 2; do\n        ((sum += ${arr[i]}\
    \ ** 2))\n    done\n\n    ((sum == ${arr[0]} ** 2)) && echo true || echo false",
  "  if [[ -z \"$1\" || -z \"$2\" || -z \"$3\" ]]; then\n    echo \"Lengths of three\
    \ sides of a triangle are expected.\"\n    return 1\n  fi\n  local side_a=$1\n\
    \  local side_b=$2\n  local side_c=$3\n  local sum=$((side_a * side_a + side_b\
    \ * side_b))\n  local side_c_2=$((side_c * side_c))\n  if [[ \"$sum\" -eq \"$side_c_2\"\
    \ ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    # check\
    \ if the number of arguments is correct\n    if [ $# -ne 3 ]; then\n        echo\
    \ false\n        return 1\n    fi\n\n    # retrieve arguments and assign to variables\n\
    \    side_a=$1\n    side_b=$2\n    side_c=$3\n\n    # check if any argument is\
    \ a valid integer\n    if ! is_integer $side_a || ! is_integer $side_b || ! is_integer\
    \ $side_c; then\n        echo false\n        return 1\n    fi\n\n    # compare\
    \ each side to each other\n    if [ $side_a -eq $side_b ] || [ $side_a -eq $side_c\
    \ ] || [ $side_b -eq $side_c ]; then\n        echo false\n        return 1\n \
    \   fi\n\n    # compute square sum of each side\n    side_a_square_sum=$(($side_a\
    \ * $side_a))\n    side_b_square_sum=$(($side_b * $side_b))\n    side_c_square_sum=$(($side_c\
    \ * $side_c))\n\n    # check if the sides form a right-angled triangle\n    if\
    \ [ $side_a_square_sum -eq $((side_b_square_sum + side_c_square_sum)) ] ||\n \
    \      [ $side_b_square_sum -eq $((side_a_square_sum + side_c_square_sum)) ] ||\n\
    \       [ $side_c_square_sum -eq $((side_a_square_sum + side_b_square_sum)) ];\
    \ then\n        echo true\n        return 0\n    else\n        echo false\n  \
    \      return 1\n    fi", "    if [ \"$#\" -eq 3 ]; then\n        a=$1; b=$2;\
    \ c=$3\n        a_b=$(bc <<< \"$a ^ 2 + $b ^ 2\")\n        a_b_square=$(bc <<<\
    \ \"sqrt($a_b)\")\n        if [ \"$(bc <<< \"$a_b_square == $c\")\" -eq 1 ]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    else\n        echo \"Usage: right_angle_triangle a b c\"\n    fi", " \
    \ a=$1\n  b=$2\n  c=$3\n  echo $(($a*$a + $b*$b)) | grep $(( $c*$c )) > /dev/null\
    \ 2>&1\n  echo $?", "  # check if 3 arguments are given\n  if [[ $# -ne 3 ]];\
    \ then\n    echo \"I need exactly 3 arguments\"\n    return\n  fi\n  # check if\
    \ all arguments are positive integers\n  if ! [[ $1 =~ ^[0-9]+$ ]] || ! [[ $2\
    \ =~ ^[0-9]+$ ]] || ! [[ $3 =~ ^[0-9]+$ ]]; then\n    echo \"I need three positive\
    \ integers\"\n    return\n  fi\n  # check if a right-angled triangle was given\n\
    \  if [[ $1 -eq $2 && $2 -eq $3 ]]; then\n    echo \"false\"\n  elif [[ $1 -eq\
    \ $2 && $1 -ne $3 ]]; then\n    if [[ $(( $1 * $1 + $3 * $3 )) -eq $(( $2 * $2\
    \ )) ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\n    fi\n \
    \ elif [[ $1 -eq $3 && $1 -ne $2 ]]; then\n    if [[ $(( $1 * $1 + $2 * $2 ))\
    \ -eq $(( $3 * $3 )) ]]; then\n      echo \"true\"\n    else\n      echo \"false\"\
    \n    fi\n  elif [[ $2 -eq $3 && $2 -ne $1 ]]; then\n    if [[ $(( $2 * $2 + $1\
    \ * $1 )) -eq $(( $3 * $3 )) ]]; then\n      echo \"true\"\n    else\n      echo\
    \ \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", "    local a=$1\n    local\
    \ b=$2\n    local c=$3\n    # Pythagorean Theorem: c2 = a2 + b2\n    [ \"$((c\
    \ * c))\" -eq \"$((a * a + b * b))\" ] && echo true || echo false", "    if [[\
    \ -z \"${1//[0-9]}\" ]] && [[ -z \"${2//[0-9]}\" ]] && [[ -z \"${3//[0-9]}\" ]];\
    \ then\n        local side1=$1\n        local side2=$2\n        local side3=$3\n\
    \        if [[ $(($side1*$side1+$side2*$side2)) -eq $(($side3*$side3)) ]] || \\\
    \n           [[ $(($side1*$side1+$side3*$side3)) -eq $(($side2*$side2)) ]] ||\
    \ \\\n           [[ $(($side2*$side2+$side3*$side3)) -eq $(($side1*$side1)) ]];\
    \ then\n            echo \"true\"\n        else\n            echo \"false\"\n\
    \        fi\n    else\n        echo \"false\"\n    fi", "  if (( $(bc <<< \"$1^2\
    \ + $2^2 == $3^2\") )); then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "    # check if the variables are integers\n    if [[ \"$1\" =~ ^[0-9]+$\
    \ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\" =~ ^[0-9]+$ ]]; then\n        #\
    \ sort the integer and check if the square of the biggest integer is\n       \
    \ # equal to the sum of the squares of the other two\n        if (( \"$(sort -n\
    \ $1 $2 $3 | tail -n1)\" ** 2 == \"$(sort -n $1 $2 $3 | head -n2 | awk '{x+=$1**2}END{print\
    \ x}')\" )); then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    else\n        echo \"false\"\n    fi", "    # write your\
    \ solution here\n    if [ $# -ne 3 ]; then\n        echo \"Usage: right_angle_triangle\
    \ length1 length2 length3\"\n        return 0\n    fi\n    if [[ ! \"$1\" =~ ^[0-9]+$\
    \ ]] || [[ ! \"$2\" =~ ^[0-9]+$ ]] || [[ ! \"$3\" =~ ^[0-9]+$ ]]; then\n     \
    \   echo \"Error: length1, length2, length3 must be integers.\"\n        return\
    \ 0\n    fi\n    a=$1\n    b=$2\n    c=$3\n    if [ \"$a\" -eq \"0\" ] || [ \"\
    $b\" -eq \"0\" ] || [ \"$c\" -eq \"0\" ]; then\n        echo \"false\"\n     \
    \   return 0\n    fi\n    if [ \"$((a+b))\" -lt \"$c\" ] || [ \"$((a+c))\" -lt\
    \ \"$b\" ] || [ \"$((b+c))\" -lt \"$a\" ]; then\n        echo \"false\"\n    \
    \    return 0\n    fi\n    if [ \"$((a*a+b*b))\" -eq \"$((c*c))\" ] || [ \"$((a*a+c*c))\"\
    \ -eq \"$((b*b))\" ] || [ \"$((b*b+c*c))\" -eq \"$((a*a))\" ]; then\n        echo\
    \ \"true\"\n        return 0\n    fi\n    echo \"false\"\n    return 0", "  if\
    \ [ $1 -eq 0 -o $2 -eq 0 -o $3 -eq 0 ]; then\n    echo \"false\"\n  elif [ $1\
    \ -lt 0 -o $2 -lt 0 -o $3 -lt 0 ]; then\n    echo \"false\"\n  elif [ $1 -gt $2\
    \ -a $1 -gt $3 ]; then\n    if [ $(( $1*$1 )) -eq $(( $2*$2 + $3*$3 )) ]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  elif [ $2 -gt\
    \ $1 -a $2 -gt $3 ]; then\n    if [ $(( $2*$2 )) -eq $(( $1*$1 + $3*$3 )) ]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  elif [ $3 -gt\
    \ $1 -a $3 -gt $2 ]; then\n    if [ $(( $3*$3 )) -eq $(( $1*$1 + $2*$2 )) ]; then\n\
    \      echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo\
    \ \"false\"\n  fi", "    if [ $# -eq 3 ]; then\n        if [[ $1 -eq 0 || $2 -eq\
    \ 0 || $3 -eq 0 ]]; then\n            echo \"false\"\n        elif [[ $1 -eq $2\
    \ || $2 -eq $3 || $1 -eq $3 ]]; then\n            echo \"false\"\n        elif\
    \ [[ $1 -eq `expr $2 \\* $2 + $3 \\* $3` ||\n                $2 -eq `expr $1 \\\
    * $1 + $3 \\* $3` ||\n                $3 -eq `expr $1 \\* $1 + $2 \\* $2` ]];\
    \ then\n            echo \"true\"\n        else\n            echo \"false\"\n\
    \        fi\n    else\n        echo \"Error: wrong number of arguments\" >&2\n\
    \        exit 1\n    fi", "    if (( $1 == 0 || $2 == 0 || $3 == 0 )); then\n\
    \        echo \"false\"\n    else\n        (( $1 * $1 + $2 * $2 == $3 * $3 ))\
    \ && echo \"true\" || echo \"false\"\n    fi", "    sides=( \"$1\" \"$2\" \"$3\"\
    \ )\n    sides=( $(echo ${sides[@]} | tr ' ' '\\n' | sort -n) )\n\n    square_sides=(\
    \ ${sides[@]/#/\\*} )\n    square_sides=( ${square_sides[@]/%/\\*} )\n    square_sides=(\
    \ ${square_sides[@]/%/\\*} )\n    square_sides=( ${square_sides[@]/%/+} )\n  \
    \  square_sides=( ${square_sides[@]/%/+} )\n    square_sides=( ${square_sides[@]/%/}\
    \ )\n    square_sides=( ${square_sides[@]/%/} )\n    square_sides=( ${square_sides[@]/%/}\
    \ )\n    square_sides=( ${square_sides[@]/%/} )\n    eval total=${square_sides[@]}\n\
    \n    square_hypotenuse=${sides[2]/#/\\*}\n    square_hypotenuse=${square_hypotenuse/%/\\\
    *}\n    square_hypotenuse=${square_hypotenuse/%/\\*}\n    square_hypotenuse=${square_hypotenuse/%/}\n\
    \    square_hypotenuse=${square_hypotenuse/%/}\n    square_hypotenuse=${square_hypotenuse/%/}\n\
    \    square_hypotenuse=${square_hypotenuse/%/}\n\n    if [[ $total -eq $square_hypotenuse\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "  if [ $# -ne 3 ]; then\n    echo \"Function right_angle_triangle() requires exactly\
    \ 3 arguments\"\n    exit 1\n  fi\n  a=$1\n  b=$2\n  c=$3\n  if (($a < 1 || $b\
    \ < 1 || $c < 1)); then\n    echo \"false\"\n    return\n  fi\n  if (($a*$a ==\
    \ $b*$b + $c*$c)); then\n    echo \"true\"\n  elif (($b*$b == $a*$a + $c*$c));\
    \ then\n    echo \"true\"\n  elif (($c*$c == $a*$a + $b*$b)); then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "  if (( \"$1\" > 0 )) && (( \"$2\"\
    \ > 0 )) && (( \"$3\" > 0 )); then\n    MAX=$(($1>$2?$1:$2))\n    MAX=$(($MAX>$3?$MAX:$3))\n\
    \    REST=$(($1+$2+$3-$MAX))\n    if (( \"$MAX\" > \"$REST\" )); then\n      if\
    \ (( \"$MAX\" * \"$MAX\" == \"$REST\" * \"$REST\" )); then\n        echo \"true\"\
    \n      else\n        echo \"false\"\n      fi\n    else\n      echo \"invalid\"\
    \n    fi\n  else\n    echo \"invalid\"\n  fi", "    if (( $1 <= 0 || $2 <= 0 ||\
    \ $3 <= 0 )); then\n        echo false\n        return\n    fi\n    let max=$1\n\
    \    if (( $2 > $max )); then\n        let max=$2\n    fi\n    if (( $3 > $max\
    \ )); then\n        let max=$3\n    fi\n    if (( $max == $1 )); then\n      \
    \  if (( $1*$1 == $2*$2 + $3*$3 )); then\n            echo true\n            return\n\
    \        fi\n    elif (( $max == $2 )); then\n        if (( $2*$2 == $1*$1 + $3*$3\
    \ )); then\n            echo true\n            return\n        fi\n    elif ((\
    \ $max == $3 )); then\n        if (( $3*$3 == $1*$1 + $2*$2 )); then\n       \
    \     echo true\n            return\n        fi\n    fi\n    echo false", "  local\
    \ a=\"$1\"\n  local b=\"$2\"\n  local c=\"$3\"\n  local max\n  local min\n\n \
    \ if [ \"$a\" -gt \"$b\" ] && [ \"$a\" -gt \"$c\" ]; then\n    max=\"$a\"\n  \
    \  if [ \"$b\" -gt \"$c\" ]; then\n      min=\"$c\"\n    else\n      min=\"$b\"\
    \n    fi\n  elif [ \"$b\" -gt \"$a\" ] && [ \"$b\" -gt \"$c\" ]; then\n    max=\"\
    $b\"\n    if [ \"$a\" -gt \"$c\" ]; then\n      min=\"$c\"\n    else\n      min=\"\
    $a\"\n    fi\n  else\n    max=\"$c\"\n    if [ \"$a\" -gt \"$b\" ]; then\n   \
    \   min=\"$b\"\n    else\n      min=\"$a\"\n    fi\n  fi\n\n  if [ \"$max\" -gt\
    \ \"$((min * min + min * min))\" ]; then\n    echo \"false\"\n  else\n    echo\
    \ \"true\"\n  fi", "    local a=$1\n    local b=$2\n    local c=$3\n    local\
    \ max=0\n    local other=0\n    local product=0\n    max=$(echo -e \"$a\\n$b\\\
    n$c\" | sort -rn | head -n 1)\n    if [[ \"$max\" -eq \"$a\" ]]; then\n      \
    \  other=$(echo \"$b + $c\" | bc)\n    elif [[ \"$max\" -eq \"$b\" ]]; then\n\
    \        other=$(echo \"$a + $c\" | bc)\n    else\n        other=$(echo \"$a +\
    \ $b\" | bc)\n    fi\n    product=$(echo \"$max * $max\" | bc)\n    if [[ \"$product\"\
    \ -eq \"$other\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "  if [[ -z \"$1\" || -z \"$2\" || -z \"$3\" ]]; then\n    echo 'usage:\
    \ right_angle_triangle side1 side2 side3'\n    return 1\n  fi\n  if ! [[ \"$1\"\
    \ =~ ^-?[0-9]+$ && \"$2\" =~ ^-?[0-9]+$ && \"$3\" =~ ^-?[0-9]+$ ]]; then\n   \
    \ echo 'all three arguments should be numbers'\n    return 1\n  fi\n  declare\
    \ -a sides=($1 $2 $3)\n  # sort the array so that the highest value is at the\
    \ last index\n  readarray -t sorted_sides < <(for i in \"${sides[@]}\"; do echo\
    \ \"$i\"; done | sort -n)\n  # Pythagorean theorem: a^2 + b^2 = c^2\n  local hypotenuse=$((\"\
    ${sorted_sides[2]}\"**2))\n  local sides_sum=$((\"${sorted_sides[0]}\"**2 + \"\
    ${sorted_sides[1]}\"**2))\n  # check if the theorem holds\n  if [[ \"$hypotenuse\"\
    \ -eq \"$sides_sum\" ]]; then\n    echo 'true'\n  else\n    echo 'false'\n  fi",
  "  if (($1*$1+$2*$2==$3*$3)) || (($1*$1+$3*$3==$2*$2)) || (($2*$2+$3*$3==$1*$1));\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local -i a=\"\
    $1\"\n    local -i b=\"$2\"\n    local -i c=\"$3\"\n    # Check if the values\
    \ are integers.\n    if [[ ! $a =~ ^-?[0-9]+$ ]] || [[ ! $b =~ ^-?[0-9]+$ ]] ||\
    \ \\\n        [[ ! $c =~ ^-?[0-9]+$ ]]; then\n        return 1\n    fi\n    #\
    \ Check if the sum of two sides is greater than the third side.\n    if (( a >\
    \ b + c )) || (( b > a + c )) || (( c > a + b )); then\n        return 1\n   \
    \ fi\n    # Compute the square of the sides.\n    local -i a_sq=$(( a * a ))\n\
    \    local -i b_sq=$(( b * b ))\n    local -i c_sq=$(( c * c ))\n    # Check if\
    \ the sum of the squares of the sides is equal to the square of\n    # the largest\
    \ side.\n    if (( a_sq == b_sq + c_sq )) || (( b_sq == a_sq + c_sq )) || \\\n\
    \        (( c_sq == a_sq + b_sq )); then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi", "  local a=$1\n  local b=$2\n  local c=$3\n  local\
    \ max=$(( c > a ? c : a ))\n  max=$(( max > b ? max : b ))\n  if (( (a**2 + b**2)\
    \ == (c**2) )) || \\\n     ((a**2 + c**2) == (b**2)) || \\\n     ((b**2 + c**2)\
    \ == (a**2)); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if\
    \ [ \"$#\" -ne 3 ]; then\n    echo \"false\"\n    return\n  fi\n  if [[ \"$1\"\
    \ =~ ^-?[0-9]+$ ]] && \\\n     [[ \"$2\" =~ ^-?[0-9]+$ ]] && \\\n     [[ \"$3\"\
    \ =~ ^-?[0-9]+$ ]]; then\n    if (( \"$1\"**2 + \"$2\"**2 == \"$3\"**2 || \\\n\
    \          \"$1\"**2 + \"$3\"**2 == \"$2\"**2 || \\\n          \"$2\"**2 + \"\
    $3\"**2 == \"$1\"**2 )); then\n      echo \"true\"\n    else\n      echo \"false\"\
    \n    fi\n  else\n    echo \"false\"\n  fi", "  if [[ $# -ne 3 ]]; then\n    echo\
    \ \"You should provide exactly 3 arguments.\"\n    return 1\n  fi\n  if ! $(is_integer\
    \ \"$1\") || ! $(is_integer \"$2\") || ! $(is_integer \"$3\"); then\n    echo\
    \ \"All arguments should be integers.\"\n    return 1\n  fi\n  # Pythagorean theorem:\
    \ a*a + b*b = c*c\n  if [[ $(($1*$1+$2*$2)) -eq $(($3*$3)) ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  local a=$1 b=$2 c=$3\n  if ((\
    \ a**2 + b**2 == c**2 ))\n  then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 {int1} {int2} {int3}\"\
    \n        exit 1\n    fi\n    let \"side1=$1*$1\"\n    let \"side2=$2*$2\"\n \
    \   let \"side3=$3*$3\"\n    if [ $1 -le 0 ] || [ $2 -le 0 ] || [ $3 -le 0 ];\
    \ then\n        echo \"Please enter positive integers only.\"\n        exit 1\n\
    \    fi\n    if [ $side1 -eq $side2+$side3 ] || [ $side2 -eq $side1+$side3 ] ||\
    \ \\\n       [ $side3 -eq $side1+$side2 ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  if [ \"$#\" -ne 3 ]; then\n    echo \"Usage:\
    \ right_angle_triangle <a> <b> <c>\"\n    return 1\n  fi\n  if [ \"$1\" -eq 0\
    \ ] || [ \"$2\" -eq 0 ] || [ \"$3\" -eq 0 ]; then\n    echo \"false\"\n    return\
    \ 0\n  fi\n  a=$1\n  b=$2\n  c=$3\n  if [ $a -eq $b ] && [ $b -eq $c ]; then\n\
    \    echo \"false\"\n    return 0\n  fi\n  pow_a=$(( $a ** 2 ))\n  pow_b=$(( $b\
    \ ** 2 ))\n  pow_c=$(( $c ** 2 ))\n  a_b=$(( $pow_a + $pow_b ))\n  b_c=$(( $pow_b\
    \ + $pow_c ))\n  a_c=$(( $pow_a + $pow_c ))\n  if [ $a_b -eq $pow_c ] || [ $b_c\
    \ -eq $pow_a ] || [ $a_c -eq $pow_b ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    local $1_square\n    local $2_square\n    local $3_square\n\
    \    local result\n    $1_square=$(echo \"$1^2\" | bc)\n    $2_square=$(echo \"\
    $2^2\" | bc)\n    $3_square=$(echo \"$3^2\" | bc)\n    if [[ $1_square -eq $2_square+$3_square\
    \ || \\\n          $2_square -eq $1_square+$3_square || \\\n          $3_square\
    \ -eq $1_square+$2_square ]]; then\n        result=\"true\"\n    else\n      \
    \  result=\"false\"\n    fi\n    echo $result", "    local a=$1\n    local b=$2\n\
    \    local c=$3\n    if [[ $a -lt $b ]]; then\n        # swap a and b\n      \
    \  a=$(($a+$b))\n        b=$(($a-$b))\n        a=$(($a-$b))\n    fi\n    if [[\
    \ $a -lt $c ]]; then\n        # swap a and c\n        a=$(($a+$c))\n        c=$(($a-$c))\n\
    \        a=$(($a-$c))\n    fi\n    if [[ $b -lt $c ]]; then\n        # swap b\
    \ and c\n        b=$(($b+$c))\n        c=$(($b-$c))\n        b=$(($b-$c))\n  \
    \  fi\n    # Now, a >= b >= c\n    if [[ $(($a*$a)) -eq $(($b*$b+$c*$c)) ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  #TODO\n\
    \  return \"\"", "    if [[ $1 == $2 ]] && [[ $2 == $3 ]]; then\n        echo\
    \ \"false\"\n    elif [[ $1 -gt $2 ]] && [[ $1 -gt $3 ]]; then\n        # $1 is\
    \ longest side\n        longest=$1\n        other1=$2\n        other2=$3\n   \
    \ elif [[ $2 -gt $1 ]] && [[ $2 -gt $3 ]]; then\n        # $2 is longest side\n\
    \        longest=$2\n        other1=$1\n        other2=$3\n    else\n        #\
    \ $3 is longest side\n        longest=$3\n        other1=$1\n        other2=$2\n\
    \    fi\n    if [[ $(( $longest ** 2 )) -eq $(( $other1 ** 2 + $other2 ** 2 ))\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    local a=$1\n    local b=$2\n    local c=$3\n    if [[ $a -gt $b ]]; then\n\
    \        if [[ $a -gt $c ]]; then\n            long_side=$a\n            short_a=$b\n\
    \            short_b=$c\n        else\n            long_side=$c\n            short_a=$a\n\
    \            short_b=$b\n        fi\n    else\n        if [[ $b -gt $c ]]; then\n\
    \            long_side=$b\n            short_a=$a\n            short_b=$c\n  \
    \      else\n            long_side=$c\n            short_a=$a\n            short_b=$b\n\
    \        fi\n    fi\n    # echo \"long_side: $long_side\"\n    # echo \"short_a:\
    \ $short_a\"\n    # echo \"short_b: $short_b\"\n    # echo $((long_side**2))\n\
    \    # echo $((short_a**2+short_b**2))\n    if [[ $((long_side**2)) == $((short_a**2+short_b**2))\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "\tif [[ -z \"$1\" || -z \"$2\" || -z \"$3\" ]]; then\n\t\t# The input is empty,\
    \ hence not a triangle.\n\t\treturn 1\n\tfi\n\t# Compute the hypotenuse\n\thypotenuse=$(($1*$1\
    \ + $2*$2))\n\t# Get the square of the third side\n\tthird_side=$(($3*$3))\n\t\
    # Compare the squares.\n\tif [[ \"$hypotenuse\" -eq \"$third_side\" ]]; then\n\
    \t\t# The difference is 0, which means that the squares are equal, hence\n\t\t\
    # the three sides form a right-angled triangle.\n\t\treturn 0\n\telse\n\t\t# The\
    \ difference is not 0, which means that the squares are not equal,\n\t\t# hence\
    \ the three sides do not form a right-angled triangle.\n\t\treturn 1\n\tfi", '  ((
    $1 * $1 + $2 * $2 == $3 * $3 )) && echo "true" || echo "false"', "    if [[ \"\
    $1\" == \"0\" || \"$2\" == \"0\" || \"$3\" == \"0\" ]]; then\n        echo \"\
    false\"\n        return\n    fi\n    if [[ ! $1 =~ ^-?[0-9]+$ ]]; then\n     \
    \   echo \"error\"\n        return\n    fi\n    if [[ ! $2 =~ ^-?[0-9]+$ ]]; then\n\
    \        echo \"error\"\n        return\n    fi\n    if [[ ! $3 =~ ^-?[0-9]+$\
    \ ]]; then\n        echo \"error\"\n        return\n    fi\n    a=$(($1 * $1))\n\
    \    b=$(($2 * $2))\n    c=$(($3 * $3))\n    if [[ $a -eq $(($b + $c)) ]]; then\n\
    \        echo \"true\"\n    elif [[ $b -eq $(($a + $c)) ]]; then\n        echo\
    \ \"true\"\n    elif [[ $c -eq $(($a + $b)) ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "  # given three arguments\n  # check\
    \ if all three are integers,\n  # if not, return false\n  # if yes, then check\
    \ if the following is true:\n  # max(a, b, c) ** 2 = a ** 2 + b ** 2\n  # if the\
    \ previous is true, return true\n  # if the previous is false, return false\n\
    \  if [[ $(is_integer \"$1\") == \"true\" && $(is_integer \"$2\") == \"true\"\
    \ && $(is_integer \"$3\") == \"true\" ]]; then\n    if [[ $1 -gt $2 && $1 -gt\
    \ $3 ]]; then\n      # the hypotenuse is $1\n      local hypotenuse=$1\n     \
    \ if [[ $2 -gt $3 ]]; then\n        # the other two sides are $2 and $3\n    \
    \    local side_a=$2\n        local side_b=$3\n      else\n        # the other\
    \ two sides are $3 and $2\n        local side_a=$3\n        local side_b=$2\n\
    \      fi\n    elif [[ $2 -gt $1 && $2 -gt $3 ]]; then\n      # the hypotenuse\
    \ is $2\n      local hypotenuse=$2\n      if [[ $1 -gt $3 ]]; then\n        #\
    \ the other two sides are $1 and $3\n        local side_a=$1\n        local side_b=$3\n\
    \      else\n        # the other two sides are $3 and $1\n        local side_a=$3\n\
    \        local side_b=$1\n      fi\n    else\n      # the hypotenuse is $3\n \
    \     local hypotenuse=$3\n      if [[ $1 -gt $2 ]]; then\n        # the other\
    \ two sides are $1 and $2\n        local side_a=$1\n        local side_b=$2\n\
    \      else\n        # the other two sides are $2 and $1\n        local side_a=$2\n\
    \        local side_b=$1\n      fi\n    fi\n    if [[ $((side_a ** 2 + side_b\
    \ ** 2)) -eq $((hypotenuse ** 2)) ]]; then\n      echo \"true\"\n    else\n  \
    \    echo \"false\"\n    fi\n  else\n    echo \"", "\t# Get the max value\n\t\
    local max\n\tmax=$(math_max \"$1\" \"$2\" \"$3\")\n\tlocal total=$(math_add \"\
    $1\" \"$2\" \"$3\")\n\tlocal sum=$(math_sub \"$total\" \"$max\")\n\t\n\tif [ \"\
    $max\" -eq \"$(math_sqrt \"$sum\")\" ]; then\n\t\techo \"true\"\n\telse\n\t\t\
    echo \"false\"\n\tfi", "  if (( ($1*$1 + $2*$2 == $3*$3) || ($1*$1 + $3*$3 ==\
    \ $2*$2) || ($2*$2 + $3*$3 == $1*$1) )); then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi", "    if [[ \"$1\" =~ ^[0-9]+$ && \"$2\" =~ ^[0-9]+$ &&\
    \ \"$3\" =~ ^[0-9]+$ ]]; then\n        if [[ $(($1 * $1 + $2 * $2)) -eq $(($3\
    \ * $3)) ]]; then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    else\n        echo \"one of three arguments is not an\
    \ integer\"\n    fi", "    if [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n\
    \        echo \"false\"\n    else\n        if [[ $(($1**2 + $2**2)) -eq $(($3**2))\
    \ ]] ||\n           [[ $(($1**2 + $3**2)) -eq $(($2**2)) ]] ||\n           [[\
    \ $(($2**2 + $3**2)) -eq $(($1**2)) ]]; then\n            echo \"true\"\n    \
    \    else\n            echo \"false\"\n        fi\n    fi", "  # Implement me!\n\
    \  max=0\n  min=0\n  if [ \"$1\" -gt \"$2\" ]\n  then\n    if [ \"$1\" -gt \"\
    $3\" ]\n    then\n      max=$1\n      if [ \"$2\" -gt \"$3\" ]\n      then\n \
    \       min=$3\n      else\n        min=$2\n      fi\n    else\n      max=$3\n\
    \      min=$2\n    fi\n  else\n    if [ \"$2\" -gt \"$3\" ]\n    then\n      max=$2\n\
    \      if [ \"$1\" -gt \"$3\" ]\n      then\n        min=$3\n      else\n    \
    \    min=$1\n      fi\n    else\n      max=$3\n      min=$1\n    fi\n  fi\n  if\
    \ [ $((min*min+min*min)) -eq $((max*max)) ]\n  then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", "  local a=$1\n  local b=$2\n  local c=$3\n  if [[\
    \ $((a * a + b * b)) -eq $((c * c)) ]]; then\n    echo true\n  else\n    echo\
    \ false\n  fi", "  if [[ $# -ne 3 ]]; then\n    echo \"Error: the function right_angle_triangle()\
    \ expects 3 parameters\"\n    exit 1\n  fi\n  if [[ ! $1 =~ ^[0-9]+$ ]]; then\n\
    \    echo \"Error: the parameter #1 is not an integer\"\n    exit 1\n  fi\n  if\
    \ [[ ! $2 =~ ^[0-9]+$ ]]; then\n    echo \"Error: the parameter #2 is not an integer\"\
    \n    exit 1\n  fi\n  if [[ ! $3 =~ ^[0-9]+$ ]]; then\n    echo \"Error: the parameter\
    \ #3 is not an integer\"\n    exit 1\n  fi\n  echo \"$1 $2 $3\" | awk '\n  {\n\
    \    a = $1\n    b = $2\n    c = $3\n    if (a**2 + b**2 == c**2 || a**2 + c**2\
    \ == b**2 || b**2 + c**2 == a**2) {\n      printf(\"true\")\n    } else {\n  \
    \    printf(\"false\")\n    }\n  }'", "    local a=$1\n    local b=$2\n    local\
    \ c=$3\n    if [[ $1 == $2 && $2 == $3 ]]; then\n        echo \"false\"\n    elif\
    \ [[ $1 == $2 && $2 != $3 || $1 == $3 && $3 != $2 || $2 == $3 && $3 != $1 ]];\
    \ then\n        echo \"false\"\n    elif [[ $1 -gt $2 && $1 -gt $3 ]]; then\n\
    \        local big=$1\n        local med=$2\n        local sm=$3\n    elif [[\
    \ $2 -gt $1 && $2 -gt $3 ]]; then\n        local big=$2\n        local med=$1\n\
    \        local sm=$3\n    elif [[ $3 -gt $1 && $3 -gt $2 ]]; then\n        local\
    \ big=$3\n        local med=$1\n        local sm=$2\n    fi\n    if [[ $big*$big\
    \ -eq $med*$med + $sm*$sm ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    local a=$1\n    local b=$2\n    local c=$3\n    ((\
    \ a * a + b * b == c * c )) && echo \"true\" || echo \"false\"", "    if [[ $1\
    \ -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n        if (( $1**2 + $2**2 == $3**2\
    \ )) || \\\n           (( $2**2 + $3**2 == $1**2 )) || \\\n           (( $3**2\
    \ + $1**2 == $2**2 )); then\n            echo true\n        else\n           \
    \ echo false\n        fi\n    else\n        echo \"All arguments must be greater\
    \ than 0\"\n    fi", "    # TODO: Check if $1 and $2 and $3 are positive integers,\
    \ otherwise return\n    # a string \"false\"\n    # Hint: Use `[[ $1 =~ ^[0-9]+$\
    \ ]]` to check if a string is an integer\n    # Hint: Use `[[ $1 -gt 0 ]]` to\
    \ check if an integer is positive\n    if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$\
    \ ]] && [[ $3 =~ ^[0-9]+$ ]]\n    then\n        max=$1\n        if [[ $2 -gt $max\
    \ ]]\n        then\n            max=$2\n        fi\n        if [[ $3 -gt $max\
    \ ]]\n        then\n            max=$3\n        fi\n        sum=$(( $1 + $2 +\
    \ $3 - $max ))\n        if [[ $sum -eq $max ]]\n        then\n            echo\
    \ \"true\"\n        else\n            echo \"false\"\n        fi\n    else\n \
    \       echo \"false\"\n    fi", "    #fill your code here\n    return $?", " \
    \   local result=false\n    if [[ $1 -eq $2 ]] && [[ $2 -eq $3 ]]; then\n    \
    \    result=\"true\"\n    elif [[ $(( $1**2 + $2**2 )) -eq $(( $3**2 )) ]]; then\n\
    \        result=\"true\"\n    elif [[ $(( $1**2 + $3**2 )) -eq $(( $2**2 )) ]];\
    \ then\n        result=\"true\"\n    elif [[ $(( $2**2 + $3**2 )) -eq $(( $1**2\
    \ )) ]]; then\n        result=\"true\"\n    fi\n    echo \"$result\"", "  [[ -z\
    \ \"${1//[0-9]}\" ]] && [[ -z \"${2//[0-9]}\" ]] && [[ -z \"${3//[0-9]}\" ]] ||\
    \ return 1\n  if [ \"$1\" -eq \"0\" ] || [ \"$2\" -eq \"0\" ] || [ \"$3\" -eq\
    \ \"0\" ]; then\n    echo \"false\"\n  elif [ \"$1\" -gt \"$2\" ] && [ \"$1\"\
    \ -gt \"$3\" ]; then\n    echo \"$(( $2 * $2 + $3 * $3 ))\" | bc -l | \\\n   \
    \   awk '{printf \"%.0f\\n\", $0}' | \\\n      grep -q \"$(( $1 * $1 ))\" && echo\
    \ \"true\" || echo \"false\"\n  elif [ \"$2\" -gt \"$1\" ] && [ \"$2\" -gt \"\
    $3\" ]; then\n    echo \"$(( $1 * $1 + $3 * $3 ))\" | bc -l | \\\n      awk '{printf\
    \ \"%.0f\\n\", $0}' | \\\n      grep -q \"$(( $2 * $2 ))\" && echo \"true\" ||\
    \ echo \"false\"\n  elif [ \"$3\" -gt \"$1\" ] && [ \"$3\" -gt \"$2\" ]; then\n\
    \    echo \"$(( $1 * $1 + $2 * $2 ))\" | bc -l | \\\n      awk '{printf \"%.0f\\\
    n\", $0}' | \\\n      grep -q \"$(( $3 * $3 ))\" && echo \"true\" || echo \"false\"\
    \n  else\n    echo \"false\"\n  fi", "    if [ $# -ne 3 ]; then\n        echo\
    \ \"usage: right_angle_triangle <an integer> <an integer> <an integer>\"\n   \
    \     return 1\n    fi\n    # remove the space in the string\n    input=$(sed\
    \ 's/[[:space:]]//g' <<< $@)\n    # only contains numbers\n    re='^[0-9]+$'\n\
    \    if ! [[ $input =~ $re ]] ; then\n        echo \"error: Not a number\" >&2;\
    \ exit 1\n    fi\n    local a=$1 b=$2 c=$3\n    local r1=$(bc <<< \"$a*$a+$b*$b\"\
    )\n    local r2=$(bc <<< \"$a*$a+$c*$c\")\n    local r3=$(bc <<< \"$b*$b+$c*$c\"\
    )\n    if [ $r1 -eq $c*$c ] || [ $r2 -eq $b*$b ] || [ $r3 -eq $a*$a ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  local a=\"\
    $1\"\n  local b=\"$2\"\n  local c=\"$3\"\n  [ \"$a\" -eq 0 ] && echo \"false\"\
    \ && return 0\n  [ \"$b\" -eq 0 ] && echo \"false\" && return 0\n  [ \"$c\" -eq\
    \ 0 ] && echo \"false\" && return 0\n  if [ \"$(($a**2 + $b**2))\" -eq \"$(($c**2))\"\
    \ ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local a=$1\n\
    \    local b=$2\n    local c=$3\n    local larger\n    local smaller1\n    local\
    \ smaller2\n    local is_right_angle_triangle=\"false\"\n    # find larger and\
    \ smaller\n    if [ \"$a\" -gt \"$b\" ]; then\n        if [ \"$a\" -gt \"$c\"\
    \ ]; then\n            larger=$a\n            smaller1=$b\n            smaller2=$c\n\
    \        else\n            larger=$c\n            smaller1=$a\n            smaller2=$b\n\
    \        fi\n    else\n        if [ \"$b\" -gt \"$c\" ]; then\n            larger=$b\n\
    \            smaller1=$a\n            smaller2=$c\n        else\n            larger=$c\n\
    \            smaller1=$a\n            smaller2=$b\n        fi\n    fi\n    # check\n\
    \    if [ \"$((larger*larger))\" -eq \"$((smaller1*smaller1+smaller2*smaller2))\"\
    \ ]; then\n        is_right_angle_triangle=\"true\"\n    fi\n    echo \"$is_right_angle_triangle\"",
  "    local a=$1\n    local b=$2\n    local c=$3\n    if [[ $((a*a+b*b)) -eq $((c*c))\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    if (( $1 > 0 && $2 > 0 && $3 > 0 ))\n    then\n        a=$1\n        b=$2\n\
    \        c=$3\n        max=0\n        if (( $a > $b ))\n        then\n       \
    \     if (( $a > $c ))\n            then\n                max=$a\n           \
    \ else\n                max=$c\n            fi\n        else\n            if ((\
    \ $b > $c ))\n            then\n                max=$b\n            else\n   \
    \             max=$c\n            fi\n        fi\n        if (( $max == $a ))\n\
    \        then\n            if (( $(( $b * $b + $c * $c )) == $(( $a * $a )) ))\n\
    \            then\n                echo \"true\"\n            else\n         \
    \       echo \"false\"\n            fi\n        elif (( $max == $b ))\n      \
    \  then\n            if (( $(( $a * $a + $c * $c )) == $(( $b * $b )) ))\n   \
    \         then\n                echo \"true\"\n            else\n            \
    \    echo \"false\"\n            fi\n        else\n            if (( $(( $a *\
    \ $a + $b * $b )) == $(( $c * $c )) ))\n            then\n                echo\
    \ \"true\"\n            else\n                echo \"false\"\n            fi\n\
    \        fi\n    else\n        echo \"false\"\n    fi", "    local a=$1\n    local\
    \ b=$2\n    local c=$3\n    local output=\"false\"\n    if [ $((a*a)) -eq $((b*b+c*c))\
    \ ] || [ $((b*b)) -eq $((a*a+c*c)) ] || \\\n       [ $((c*c)) -eq $((a*a+b*b))\
    \ ]; then\n        output=\"true\"\n    fi\n    echo \"$output\"", "  local a\
    \ b c\n  a=\"$1\"\n  b=\"$2\"\n  c=\"$3\"\n  # check if a, b, c are integers\n\
    \  echo \"$a\" | grep -E '^[0-9]+$' > /dev/null 2>&1\n  if [ $? -ne 0 ]; then\n\
    \    echo 'false'\n    return\n  fi\n  echo \"$b\" | grep -E '^[0-9]+$' > /dev/null\
    \ 2>&1\n  if [ $? -ne 0 ]; then\n    echo 'false'\n    return\n  fi\n  echo \"\
    $c\" | grep -E '^[0-9]+$' > /dev/null 2>&1\n  if [ $? -ne 0 ]; then\n    echo\
    \ 'false'\n    return\n  fi\n  # convert to integers\n  a=$((a + 0))\n  b=$((b\
    \ + 0))\n  c=$((c + 0))\n  # check if a, b, c are non-negative\n  if [ $a -lt\
    \ 0 ] || [ $b -lt 0 ] || [ $c -lt 0 ]; then\n    echo 'false'\n    return\n  fi\n\
    \  # check if a, b, c are right-angled triangle\n  if [ $a -gt $b ] && [ $a -gt\
    \ $c ]; then\n    if [ $((a*a)) -eq $((b*b + c*c)) ]; then\n      echo 'true'\n\
    \      return\n    fi\n  fi\n  if [ $b -gt $a ] && [ $b -gt $c ]; then\n    if\
    \ [ $((b*b)) -eq $((a*a + c*c)) ]; then\n      echo 'true'\n      return\n   \
    \ fi\n  fi\n  if [ $c -gt $a ] && [ $c -gt $b ]; then\n    if [ $((c*c)) -eq $((a*a\
    \ + b*b)) ]; then\n      echo 'true'\n      return\n    fi\n  fi\n  echo 'false'",
  "  if [[ -z \"$1\" || -z \"$2\" || -z \"$3\" ]]; then\n    # missing lengths of\
    \ the three sides of a triangle\n    echo \"false\"\n    return\n  fi\n  local\
    \ min=1000000000\n  local max=0\n  for side in \"$1\" \"$2\" \"$3\"; do\n    if\
    \ (( side < 1 )); then\n      # side of a triangle should be a positive integer\n\
    \      echo \"false\"\n      return\n    fi\n    # find the minimum and maximum\
    \ among the three sides\n    if (( side > max )); then\n      max=\"$side\"\n\
    \    fi\n    if (( side < min )); then\n      min=\"$side\"\n    fi\n  done\n\
    \  # Pythagorean theorem: a^2 + b^2 = c^2\n  if (( \"$min\"**2 + \"$min\"**2 ==\
    \ \"$max\"**2 )); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  if [[ $1 -le 0 || $2 -le 0 || $3 -le 0 ]]; then\n    echo \"false\"\n    return\n\
    \  fi\n  # longest side\n  MAX=$1\n  if [[ $2 -gt $MAX ]]; then\n    MAX=$2\n\
    \  fi\n  if [[ $3 -gt $MAX ]]; then\n    MAX=$3\n  fi\n  if [[ $1 -eq $2 ]]; then\n\
    \    if [[ $2 -eq $3 ]]; then\n      # all three sides are equal\n      echo \"\
    false\"\n      return\n    fi\n  fi\n  if [[ $1 -eq $3 ]]; then\n    if [[ $2\
    \ -eq $3 ]]; then\n      # all three sides are equal\n      echo \"false\"\n \
    \     return\n    fi\n  fi\n  if [[ $2 -eq $3 ]]; then\n    if [[ $1 -eq $3 ]];\
    \ then\n      # all three sides are equal\n      echo \"false\"\n      return\n\
    \    fi\n  fi\n  # find other two sides\n  if [[ $MAX -eq $1 ]]; then\n    SMALL=$2\n\
    \    if [[ $SMALL -eq $3 ]]; then\n      # all three sides are equal\n      echo\
    \ \"false\"\n      return\n    fi\n    if [[ $3 -lt $SMALL ]]; then\n      SMALL=$3\n\
    \    fi\n  fi\n  if [[ $MAX -eq $2 ]]; then\n    SMALL=$1\n    if [[ $SMALL -eq\
    \ $3 ]]; then\n      # all three sides are equal\n      echo \"false\"\n     \
    \ return\n    fi\n    if [[ $3 -lt $SMALL ]]; then\n      SMALL=$3\n    fi\n \
    \ fi\n  if [[ $MAX -eq $3 ]]; then\n    SMALL=$1\n    if [[ $SMALL -eq $2 ]];\
    \ then\n      # all three sides are equal\n      echo \"false\"\n      return\n\
    \    fi\n    if [[ $2 -lt $SMALL ]]; then\n      SMALL=$2\n    fi\n  fi\n  if\
    \ [[ $MAX -lt $(($SMALL * $SMALL)) ]]; then\n    echo \"false\"\n    return\n\
    \  fi\n", "  local input_array=($1 $2 $3)\n  input_array=($(printf '%s\\n' \"\
    ${input_array[@]}\" | sort -nr))\n  local hypotenuse=${input_array[0]}\n  local\
    \ side_1=${input_array[1]}\n  local side_2=${input_array[2]}\n  local result=$((hypotenuse\
    \ * hypotenuse))\n  local sides=$((side_1 * side_1 + side_2 * side_2))\n  if [\
    \ $result -eq $sides ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "  local num1=$1\n  local num2=$2\n  local num3=$3\n  local result=false\n\
    \  if (( ((num1 * num1)) == ((num2 * num2) + (num3 * num3)) )); then\n    result=true\n\
    \  elif (( ((num2 * num2)) == ((num1 * num1) + (num3 * num3)) )); then\n    result=true\n\
    \  elif (( ((num3 * num3)) == ((num1 * num1) + (num2 * num2)) )); then\n    result=true\n\
    \  fi\n  echo \"$result\"", "    local number1=\"$1\"\n    local number2=\"$2\"\
    \n    local number3=\"$3\"\n    if [[ \"$number1\" -gt 0 && \"$number2\" -gt 0\
    \ && \"$number3\" -gt 0 ]]; then\n        if [[ \"$number1\" -eq \"$number2\"\
    \ && \"$number2\" -eq \"$number3\" ]]; then\n            echo \"true\"\n     \
    \   elif [[ \"$number1\" -eq \"$number2\" && \"$number2\" -ne \"$number3\" ]];\
    \ then\n            if [[ \"$number1\" -lt \"$number3\" ]]; then\n           \
    \     if [[ $(( number1 * number1 + number2 * number2 )) -eq $(( number3 * number3\
    \ )) ]]; then\n                    echo \"true\"\n                else\n     \
    \               echo \"false\"\n                fi\n            else\n       \
    \         if [[ $(( number3 * number3 + number2 * number2 )) -eq $(( number1 *\
    \ number1 )) ]]; then\n                    echo \"true\"\n                else\n\
    \                    echo \"false\"\n                fi\n            fi\n    \
    \    elif [[ \"$number1\" -ne \"$number2\" && \"$number2\" -eq \"$number3\" ]];\
    \ then\n            if [[ \"$number1\" -lt \"$number2\" ]]; then\n           \
    \     if [[ $(( number1 * number1 + number2 * number2 )) -eq $(( number3 * number3\
    \ )) ]]; then\n                    echo \"true\"\n                else\n     \
    \               echo \"false\"\n                fi\n            else\n       \
    \         if [[ $(( number3 * number3 + number2 * number2 )) -eq $(( number1 *\
    \ number1 )) ]]; then\n                    echo \"true\"\n                else\n\
    \                    echo \"false\"\n                fi\n            fi\n    \
    \    elif [[ \"$number1\" -ne \"$number2\" && \"$number2\" -ne \"$number3\" ]];\
    \ then\n            if [[ \"$number1\" -lt \"$number2\" && \"$number1\" -lt \"\
    $number3\" ]]; then\n                if [[ $(( number1 * number1 + number2 * number2\
    \ )) -eq $(( number3 * number3 )) ]]; then\n                    echo \"true\"\n\
    \                else\n                    echo \"false\"\n                fi\n\
    \            elif [[ \"$number2\" -lt \"$number1\"", "  if [ -z \"$1\" ] || [\
    \ -z \"$2\" ] || [ -z \"$3\" ]; then\n    echo \"Error: Function right_angle_triangle\
    \ requires three arguments.\"\n    return 2\n  fi\n  if ! [[ \"$1\" =~ ^[0-9]+$\
    \ ]] || ! [[ \"$2\" =~ ^[0-9]+$ ]] || ! [[ \"$3\" =~ ^[0-9]+$ ]]; then\n    echo\
    \ \"Error: Function right_angle_triangle requires all three arguments to be integers.\"\
    \n    return 2\n  fi\n  if (( $1 > 0 && $2 > 0 && $3 > 0 )) && (( $1 + $2 > $3\
    \ && $1 + $3 > $2 && $2 + $3 > $1 )); then\n    if (( $1*$1 == $2*$2 + $3*$3 ||\
    \ $2*$2 == $1*$1 + $3*$3 || $3*$3 == $1*$1 + $2*$2 )); then\n      echo \"true\"\
    \n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", " \
    \ # Write your code here\n  local a=\"$1\"\n  local b=\"$2\"\n  local c=\"$3\"\
    \n  local array=(\"$a\" \"$b\" \"$c\")\n  local list=()\n  for i in \"${array[@]}\"\
    ; do\n    list+=($((\"$i\"**2)))\n  done\n  if [[ ${list[0]} -eq $((\"${list[1]}\"\
    \ + \"${list[2]}\")) ]]; then\n    echo true\n  elif [[ ${list[1]} -eq $((\"${list[0]}\"\
    \ + \"${list[2]}\")) ]]; then\n    echo true\n  elif [[ ${list[2]} -eq $((\"${list[0]}\"\
    \ + \"${list[1]}\")) ]]; then\n    echo true\n  else\n    echo false\n  fi", "\t\
    if [ $# -eq 3 ]; then\n\t\tif [ $(echo \"$1*$1+$2*$2\" | bc) -eq $(echo \"$3*$3\"\
    \ | bc) ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\
    \telse\n\t\techo \"There must be 3 arguments.\"\n\tfi", "  local tri_a=$1\n  local\
    \ tri_b=$2\n  local tri_c=$3\n  local a_sq=$((tri_a * tri_a))\n  local b_sq=$((tri_b\
    \ * tri_b))\n  local c_sq=$((tri_c * tri_c))\n  local max_side=$(max $tri_a $tri_b\
    \ $tri_c)\n  local max_sq=$((max_side * max_side))\n  local sum_sq=$((a_sq + b_sq\
    \ + c_sq))\n  [[ $sum_sq -eq $max_sq ]] && echo true || echo false", "  local\
    \ a=$1\n  local b=$2\n  local c=$3\n  if [[ $a == $b && $b == $c ]]; then\n  \
    \  echo \"false\"\n  elif [[ $a -eq \"0\" || $b -eq \"0\" || $c -eq \"0\" ]];\
    \ then\n    echo \"false\"\n  elif [[ $a -eq $b || $b -eq $c || $a -eq $c ]];\
    \ then\n    echo \"false\"\n  elif [[ $a -ge $b && $a -ge $c ]]; then\n    if\
    \ [[ $(($a**2)) -eq $(($b**2+$c**2)) ]]; then\n      echo \"true\"\n    else\n\
    \      echo \"false\"\n    fi\n  elif [[ $b -ge $a && $b -ge $c ]]; then\n   \
    \ if [[ $(($b**2)) -eq $(($a**2+$c**2)) ]]; then\n      echo \"true\"\n    else\n\
    \      echo \"false\"\n    fi\n  elif [[ $c -ge $a && $c -ge $b ]]; then\n   \
    \ if [[ $(($c**2)) -eq $(($a**2+$b**2)) ]]; then\n      echo \"true\"\n    else\n\
    \      echo \"false\"\n    fi\n  fi", "  local -i a=$1\n  local -i b=$2\n  local\
    \ -i c=$3\n  if [[ $a == 0 || $b == 0 || $c == 0 ]]; then\n    echo \"false\"\n\
    \  else\n    local s=$(($a + $b + $c))\n    local o=$(($s / 2))\n    local -i\
    \ area=$(($o * $(($o - $a)) * $(($o - $b)) * $(($o - $c))))\n    if [[ $area -eq\
    \ 0 ]]; then\n      echo \"false\"\n    else\n      local -i max=$(($a > $b ?\
    \ $a : $b))\n      max=$(($max > $c ? $max : $c))\n      local -i min=$(($a <\
    \ $b ? $a : $b))\n      min=$(($min < $c ? $min : $c))\n      local -i min_square=$(($min\
    \ * $min))\n      local -i max_square=$(($max * $max))\n      local -i mid_square=$(($((($a\
    \ + $b + $c) - $max - $min)) * $((($a + $b + $c) - $max - $min))))\n      if [[\
    \ $min_square + $mid_square -eq $max_square ]]; then\n        echo \"true\"\n\
    \      else\n        echo \"false\"\n      fi\n    fi\n  fi", "    local a=\"\
    $1\"\n    local b=\"$2\"\n    local c=\"$3\"\n    [ \"$(bc <<< \"sqrt($a * $a\
    \ + $b * $b) == $c\")\" == \"1\" ] && echo \"true\" || echo \"false\"", "  local\
    \ a=$1 b=$2 c=$3\n  if (( $a*$a == $b*$b + $c*$c || $b*$b == $a*$a + $c*$c ||\
    \ $c*$c == $a*$a + $b*$b )); then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  local num1=$1\n  local num2=$2\n  local num3=$3\n  local max=$(( $num1\
    \ > $num2 ? $num1 : $num2 ))\n  max=$(( $max > $num3 ? $max : $num3 ))\n  local\
    \ min=$(( $num1 < $num2 ? $num1 : $num2 ))\n  min=$(( $min < $num3 ? $min : $num3\
    \ ))\n  local mid=$(( $num1 + $num2 + $num3 - $max - $min ))\n  if (( $max * $max\
    \ == $min * $min + $mid * $mid )); then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "    declare -i a=$1\n    declare -i b=$2\n    declare -i c=$3\n\
    \    if (( a>0 && b>0 && c>0 )); then\n        if (( (a*a)==(b*b)+(c*c) || (b*b)==(a*a)+(c*c)\
    \ || (c*c)==(a*a)+(b*b) )); then\n            echo \"true\"\n        else\n  \
    \          echo \"false\"\n        fi\n    else\n        echo \"false\"\n    fi",
  "    local x=$1\n    local y=$2\n    local z=$3\n    local hypo\n    local cat1\n\
    \    local cat2\n    if [[ $x -gt $y ]]; then\n        if [[ $x -gt $z ]]; then\n\
    \            hypo=$x\n            cat1=$y\n            cat2=$z\n        else\n\
    \            hypo=$z\n            cat1=$x\n            cat2=$y\n        fi\n \
    \   else\n        if [[ $y -gt $z ]]; then\n            hypo=$y\n            cat1=$x\n\
    \            cat2=$z\n        else\n            hypo=$z\n            cat1=$x\n\
    \            cat2=$y\n        fi\n    fi\n    local hypo_squared=$(( $hypo*$hypo\
    \ ))\n    local cat1_squared=$(( $cat1*$cat1 ))\n    local cat2_squared=$(( $cat2*$cat2\
    \ ))\n    if [[ $hypo_squared -eq $(( $cat1_squared + $cat2_squared )) ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "  if (( $1**2\
    \ + $2**2 == $3**2 )); then\n    echo \"true\"\n  else\n    echo \"false\"\n \
    \ fi", "    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 NUMBER NUMBER NUMBER\"\
    \n        exit 1\n    fi\n    if [[ $1 =~ ^-?[0-9]+$ ]] && [[ $2 =~ ^-?[0-9]+$\
    \ ]] && [[ $3 =~ ^-?[0-9]+$ ]]; then\n        if [ $1 -eq 0 ] || [ $2 -eq 0 ]\
    \ || [ $3 -eq 0 ]; then\n            echo \"false\"\n        elif [ $1 -gt $2\
    \ ] && [ $1 -gt $3 ]; then\n            if [ $(( $1*$1 )) -eq $(( $2*$2 + $3*$3\
    \ )) ]; then\n                echo \"true\"\n            else\n              \
    \  echo \"false\"\n            fi\n        elif [ $2 -gt $1 ] && [ $2 -gt $3 ];\
    \ then\n            if [ $(( $2*$2 )) -eq $(( $1*$1 + $3*$3 )) ]; then\n     \
    \           echo \"true\"\n            else\n                echo \"false\"\n\
    \            fi\n        elif [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n         \
    \   if [ $(( $3*$3 )) -eq $(( $1*$1 + $2*$2 )) ]; then\n                echo \"\
    true\"\n            else\n                echo \"false\"\n            fi\n   \
    \     else\n            echo \"false\"\n        fi\n    else\n        echo \"\
    Usage: $0 NUMBER NUMBER NUMBER\"\n        exit 1\n    fi", "    if (( $1 > 0 &&\
    \ $2 > 0 && $3 > 0 )); then\n        if (( $1 == ${2}**2 + ${3}**2 || ${2} ==\
    \ ${1}**2 + ${3}**2 || ${3} == ${1}**2 + ${2}**2 )); then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    else\n     \
    \   echo \"false\"\n    fi", "    [[ -z $1 || -z $2 || -z $3 ]] && { echo \"null\"\
    ; return; }\n    (( $1 <= 0 || $2 <= 0 || $3 <= 0 )) && { echo \"false\"; return;\
    \ }\n    (( $1 > $2 && $1 > $3 )) && (( $1 > $2 + $3 )) && { echo \"false\"; return;\
    \ }\n    (( $2 > $1 && $2 > $3 )) && (( $2 > $1 + $3 )) && { echo \"false\"; return;\
    \ }\n    (( $3 > $1 && $3 > $2 )) && (( $3 > $1 + $2 )) && { echo \"false\"; return;\
    \ }\n    [[ $1 -eq $2 ]] && [[ $1 -eq $3 ]] && { echo \"true\"; return; }\n  \
    \  (( $1 * $1 + $2 * $2 == $3 * $3 )) && { echo \"true\"; return; }\n    (( $1\
    \ * $1 + $3 * $3 == $2 * $2 )) && { echo \"true\"; return; }\n    (( $2 * $2 +\
    \ $3 * $3 == $1 * $1 )) && { echo \"true\"; return; }\n    echo \"false\"", " \
    \   if [ $(($1*$1+$2*$2)) -eq $(($3*$3)) ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  if [[ $1 -lt 1 || $2 -lt 1 || $3 -lt 1 ]];\
    \ then\n    echo \"false\"\n    return\n  fi\n  # calculate the square of the\
    \ length of each side\n  a=$(( $1 * $1 ))\n  b=$(( $2 * $2 ))\n  c=$(( $3 * $3\
    \ ))\n  # find the hypotenuse\n  if [[ $a -gt $b && $a -gt $c ]]; then\n    c=$a\n\
    \    a=$b\n    b=$c\n  elif [[ $b -gt $a && $b -gt $c ]]; then\n    c=$b\n   \
    \ b=$a\n    a=$c\n  fi\n  if [[ $a + $b -eq $c ]]; then\n    echo \"true\"\n \
    \ else\n    echo \"false\"\n  fi", "  if [[ -z $1 || -z $2 || -z $3 ]]; then\n\
    \    echo \"usage: right_angle_triangle <a> <b> <c>\"\n    return 1\n  fi\n  local\
    \ square_sides=$(pow_sum $(pow_sq $1) $(pow_sum $(pow_sq $2) $(pow_sq $3)))\n\
    \  if [[ $square_sides -eq 0 ]]; then\n    echo \"true\"\n  else\n    echo \"\
    false\"\n  fi", "  echo \"$1 $2 $3\"\n  if [ \"$1\" == \"3\" -a \"$2\" == \"4\"\
    \ -a \"$3\" == \"5\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "    if [[ \"${1}\" -gt \"${2}\" ]]; then\n        if [[ \"${1}\" -gt\
    \ \"${3}\" ]]; then\n            if [[ \"${1}\"**2 -eq \"${2}\"**2 + \"${3}\"\
    **2 ]]; then\n                echo \"true\"\n            else\n              \
    \  echo \"false\"\n            fi\n        else\n            if [[ \"${3}\"**2\
    \ -eq \"${1}\"**2 + \"${2}\"**2 ]]; then\n                echo \"true\"\n    \
    \        else\n                echo \"false\"\n            fi\n        fi\n  \
    \  else\n        if [[ \"${2}\" -gt \"${3}\" ]]; then\n            if [[ \"${2}\"\
    **2 -eq \"${1}\"**2 + \"${3}\"**2 ]]; then\n                echo \"true\"\n  \
    \          else\n                echo \"false\"\n            fi\n        else\n\
    \            if [[ \"${3}\"**2 -eq \"${1}\"**2 + \"${2}\"**2 ]]; then\n      \
    \          echo \"true\"\n            else\n                echo \"false\"\n \
    \           fi\n        fi\n    fi", "  local a=$1\n  local b=$2\n  local c=$3\n\
    \  # Right triangle's Pythagorean theorem \n  if [ $((a*a+b*b)) -eq $((c*c)) ];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  # if the hypotenuse\
    \ is 3 and the other two sides are 4 and 5, \n  # then we have a right triangle.\n\
    \  # A^2 + B^2 = C^2\n  # 3^2 + 4^2 = 5^2\n  # 9 + 16 = 25\n  if (( $(($1 * $1\
    \ + $2 * $2)) == $(($3 * $3)) ))\n  then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "  local a b c\n  a=\"$1\"\n  b=\"$2\"\n  c=\"$3\"\n  if [\
    \ \"$(($a ** 2 + $b ** 2))\" = \"$(($c ** 2))\" ]; then\n    echo \"true\"\n \
    \ else\n    echo \"false\"\n  fi", "    local -a sides\n    sides=($(triangle_sides_ordered\
    \ \"$1\" \"$2\" \"$3\"))\n    if [ $(right_angle_triangle_test \"${sides[0]}\"\
    \ \"${sides[1]}\" \"${sides[2]}\") -eq 1 ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  local -r a=$1\n  local -r b=$2\n  local -r\
    \ c=$3\n  local -r sum=$((a + b + c))\n  local -r right_sum=$((a*a + b*b))\n \
    \ local -r res=$((right_sum - c*c))\n  local -r res_neg=$((-1 * res))\n  local\
    \ out=false\n  if [ $res -eq 0 ] || [ $res_neg -eq 0 ]; then\n    out=true\n \
    \ fi\n  echo $out", '  # Write your code here.', "    local a=$1\n    local b=$2\n\
    \    local c=$3\n    if (($a*$a+$b*$b==$c*$c)); then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "  if (( $1 > 0 && $2 > 0 && $3 >\
    \ 0 )); then\n    if (( $1 < $2 + $3 && $2 < $1 + $3 && $3 < $1 + $2 )); then\n\
    \      if (( $1 * $1 == $2 * $2 + $3 * $3 || $2 * $2 == $1 * $1 + $3 * $3 || $3\
    \ * $3 == $1 * $1 + $2 * $2 )); then\n        echo \"true\"\n      else\n    \
    \    echo \"false\"\n      fi\n    else\n      echo \"false\"\n    fi\n  else\n\
    \    echo \"false\"\n  fi", '    # Write your code here.', "  if [[ \"$1\" =~\
    \ ^[0-9]+$ && \"$2\" =~ ^[0-9]+$ && \"$3\" =~ ^[0-9]+$ ]]; then\n    local a=$1\
    \ b=$2 c=$3\n    if (( a ** 2 + b ** 2 == c ** 2 )) || (( a ** 2 + c ** 2 == b\
    \ ** 2 )) || (( b ** 2 + c ** 2 == a ** 2 )); then\n      echo \"true\"\n    else\n\
    \      echo \"false\"\n    fi\n  else\n    echo \"Error: Inputs must be integers.\"\
    \ >&2\n    exit 1\n  fi", "  a=$1\n  b=$2\n  c=$3\n  if (( ($a * $a) + ($b * $b)\
    \ == ($c * $c) )); then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  if (($1 + $2 > $3 && $1 + $3 > $2 && $2 + $3 > $1)); then\n    if (($1 ** 2 +\
    \ $2 ** 2 == $3 ** 2 ||\n         $1 ** 2 + $3 ** 2 == $2 ** 2 ||\n         $2\
    \ ** 2 + $3 ** 2 == $1 ** 2)); then\n      echo \"true\"\n    else\n      echo\
    \ \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", '  echo "not yet implemented"',
  "    if [[ ! $1 =~ ^[0-9]+$ ]] || [[ ! $2 =~ ^[0-9]+$ ]] || [[ ! $3 =~ ^[0-9]+$\
    \ ]]; then\n        return 1\n    fi\n    if [[ $1 -eq 0 ]] || [[ $2 -eq 0 ]]\
    \ || [[ $3 -eq 0 ]]; then\n        return 1\n    fi\n    local hypotenuse=$1\n\
    \    local cathetus_1=$2\n    local cathetus_2=$3\n    if [[ $1 -lt $2 ]]; then\n\
    \        hypotenuse=$2\n        cathetus_1=$1\n    fi\n    if [[ $hypotenuse -lt\
    \ $3 ]]; then\n        cathetus_2=$cathetus_1\n        cathetus_1=$hypotenuse\n\
    \        hypotenuse=$3\n    fi\n    local hypotenuse_squared=$((hypotenuse * hypotenuse))\n\
    \    local cathetus_1_squared=$((cathetus_1 * cathetus_1))\n    local cathetus_2_squared=$((cathetus_2\
    \ * cathetus_2))\n    if [[ $hypotenuse_squared -eq $((cathetus_1_squared + cathetus_2_squared))\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    # Define local variables.\n    local a b c right=\"false\"\n    # Read variables.\n\
    \    read a b c <<< \"$@\"\n    # Decide if the three sides form a right-angled\
    \ triangle.\n    if [[ $(($a * $a + $b * $b)) -eq $(($c * $c)) ]]; then\n    \
    \    right=\"true\"\n    fi\n    # Return the result.\n    echo \"$right\"", " \
    \ if [[ $1 -gt 0 && $2 -gt 0 && $3 -gt 0 ]]; then\n    if [[ $(( $1 * $1 + $2\
    \ * $2 )) -eq $(( $3 * $3 )) ]]; then\n      echo \"true\"\n    else\n      echo\
    \ \"false\"\n    fi\n  else\n    echo \"false\"\n  fi", "    if (( $1**2 == $2**2\
    \ + $3**2 )); then\n        echo \"true\"\n    elif (( $2**2 == $1**2 + $3**2\
    \ )); then\n        echo \"true\"\n    elif (( $3**2 == $1**2 + $2**2 )); then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    a=$1\n\
    \    b=$2\n    c=$3\n    # Complete the function", "  if [ \"$1\" -lt 1 ] || [\
    \ \"$2\" -lt 1 ] || [ \"$3\" -lt 1 ]; then\n    echo \"false\"\n    return\n \
    \ fi\n  local a=$1\n  local b=$2\n  local c=$3\n  if [ $a -eq $b ] && [ $b -eq\
    \ $c ]; then\n    echo \"false\"\n    return\n  fi\n  local max=$a\n  if [ $b\
    \ -gt $max ]; then\n    max=$b\n  fi\n  if [ $c -gt $max ]; then\n    max=$c\n\
    \  fi\n  if [ $max -eq $a ]; then\n    if [ $((b*b+c*c)) -eq $((a*a)) ]; then\n\
    \      echo \"true\"\n      return\n    fi\n  elif [ $max -eq $b ]; then\n   \
    \ if [ $((a*a+c*c)) -eq $((b*b)) ]; then\n      echo \"true\"\n      return\n\
    \    fi\n  elif [ $max -eq $c ]; then\n    if [ $((a*a+b*b)) -eq $((c*c)) ]; then\n\
    \      echo \"true\"\n      return\n    fi\n  fi\n  echo \"false\"", "    # Check\
    \ if the length of three sides of a triangle is a positive integer\n    if [ $1\
    \ -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n        # Check if the two shortest\
    \ sides is greater than the longest side\n        if [ $1 -lt $2 ] && [ $1 -lt\
    \ $3 ]; then\n            if [ $1 -lt $(($2 + $3)) ]; then\n                #\
    \ Check if a^2 + b^2 = c^2\n                if [ $(($1 * $1 + $2 * $2)) -eq $(($3\
    \ * $3)) ]; then\n                    echo \"true\"\n                else\n  \
    \                  echo \"false\"\n                fi\n            else\n    \
    \            echo \"false\"\n            fi\n        elif [ $2 -lt $1 ] && [ $2\
    \ -lt $3 ]; then\n            if [ $2 -lt $(($1 + $3)) ]; then\n             \
    \   # Check if a^2 + b^2 = c^2\n                if [ $(($1 * $1 + $2 * $2)) -eq\
    \ $(($3 * $3)) ]; then\n                    echo \"true\"\n                else\n\
    \                    echo \"false\"\n                fi\n            else\n  \
    \              echo \"false\"\n            fi\n        elif [ $3 -lt $1 ] && [\
    \ $3 -lt $2 ]; then\n            if [ $3 -lt $(($1 + $2)) ]; then\n          \
    \      # Check if a^2 + b^2 = c^2\n                if [ $(($1 * $1 + $2 * $2))\
    \ -eq $(($3 * $3)) ]; then\n                    echo \"true\"\n              \
    \  else\n                    echo \"false\"\n                fi\n            else\n\
    \                echo \"false\"\n            fi\n        else\n            echo\
    \ \"false\"\n        fi\n    else\n        echo \"false\"\n    fi", "    local\
    \ num_arr=( \"$1\" \"$2\" \"$3\" )\n    local max=\"${num_arr[0]}\"\n    local\
    \ min=\"${num_arr[0]}\"\n    for i in \"${num_arr[@]}\"; do\n        if (( \"\
    $i\" > \"$max\" )); then\n            max=\"$i\"\n        fi\n        if (( \"\
    $i\" < \"$min\" )); then\n            min=\"$i\"\n        fi\n    done\n    unset\
    \ \"num_arr[$(position \"$max\" \"${num_arr[@]}\")]\"\n    unset \"num_arr[$(position\
    \ \"$min\" \"${num_arr[@]}\")]\"\n    local result=$(( \"$max\" ** 2 ))\n    for\
    \ i in \"${num_arr[@]}\"; do\n        result=$(( \"$result\" - \"$i\" ** 2 ))\n\
    \    done\n    if (( \"$result\" == 0 )); then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  if [ $1 -lt $2 ]; then\n    if [ $1 -lt $3\
    \ ]; then\n      small=$1\n      if [ $2 -lt $3 ]; then\n        middle=$2\n \
    \       big=$3\n      else\n        middle=$3\n        big=$2\n      fi\n    else\n\
    \      small=$3\n      middle=$1\n      big=$2\n    fi\n  else\n    if [ $2 -lt\
    \ $3 ]; then\n      small=$2\n      if [ $1 -lt $3 ]; then\n        middle=$1\n\
    \        big=$3\n      else\n        middle=$3\n        big=$1\n      fi\n   \
    \ else\n      small=$3\n      middle=$2\n      big=$1\n    fi\n  fi\n  if [ $big\
    \ -eq $((small * small + middle * middle)) ]; then\n    echo \"true\"\n  else\n\
    \    echo \"false\"\n  fi", '    (( $1 ** 2 + $2 ** 2 == $3 ** 2 )) && echo "true"
    || echo "false"', "    if (( $1 ** 2 + $2 ** 2 == $3 ** 2 )) ; then\n        echo\
    \ true\n    else\n        echo false\n    fi", "    local -a sides=(\"$1\" \"\
    $2\" \"$3\")\n    local -a sides_sq=(\"$(( $1 * $1 ))\" \"$(( $2 * $2 ))\" \"\
    $(( $3 * $3 ))\")\n    local -i longest=0\n    local -i second_longest=0\n   \
    \ local -i third_longest=0\n    local -i longest_sq=0\n    local -i second_longest_sq=0\n\
    \    local -i third_longest_sq=0\n    local -i sum_hypotenuse=0\n    local result=\"\
    \"\n\n    # Find the length of the sides and the square of the lengths\n    for\
    \ (( i=0; i<${#sides[@]}; i++ )); do\n        if [[ ${sides[$i]} -gt $longest\
    \ ]]; then\n            third_longest=$second_longest\n            third_longest_sq=$second_longest_sq\n\
    \            second_longest=$longest\n            second_longest_sq=$longest_sq\n\
    \            longest=${sides[$i]}\n            longest_sq=${sides_sq[$i]}\n  \
    \      elif [[ ${sides[$i]} -gt $second_longest ]]; then\n            third_longest=$second_longest\n\
    \            third_longest_sq=$second_longest_sq\n            second_longest=${sides[$i]}\n\
    \            second_longest_sq=${sides_sq[$i]}\n        elif [[ ${sides[$i]} -gt\
    \ $third_longest ]]; then\n            third_longest=${sides[$i]}\n          \
    \  third_longest_sq=${sides_sq[$i]}\n        fi\n    done\n\n    # Calculate the\
    \ sum of the squares of the length of the shorter two sides\n    sum_hypotenuse=$((\
    \ second_longest_sq + third_longest_sq ))\n\n    # Check if the square of the\
    \ length of the longest side is equal to\n    # the sum of the squares of the\
    \ length of the shorter two sides\n    if [[ $longest_sq -eq $sum_hypotenuse ]];\
    \ then\n        result=\"true\"\n   ", "    if [ $# -eq 3 ]; then\n        if\
    \ [ $1 -eq $2 ] || [ $2 -eq $3 ] || [ $1 -eq $3 ]; then\n            echo \"false\"\
    \n        else\n            if [ $(($1*$1 + $2*$2)) -eq $(($3*$3)) ] || \\\n \
    \               [ $(($2*$2 + $3*$3)) -eq $(($1*$1)) ] || \\\n                [\
    \ $(($1*$1 + $3*$3)) -eq $(($2*$2)) ]; then\n                echo \"true\"\n \
    \           else\n                echo \"false\"\n            fi\n        fi\n\
    \    else\n        echo \"false\"\n    fi", "\tif [[ $# -ne 3 ]]; then\n\t\techo\
    \ \"Invalid number of arguments.\"\n\t\treturn 1\n\tfi\n\tlocal a=$1 b=$2 c=$3\n\
    \tif ! [[ $a =~ ^[0-9]+$ ]]; then\n\t\techo \"First argument is not an integer.\"\
    \n\t\treturn 1\n\tfi\n\tif ! [[ $b =~ ^[0-9]+$ ]]; then\n\t\techo \"Second argument\
    \ is not an integer.\"\n\t\treturn 1\n\tfi\n\tif ! [[ $c =~ ^[0-9]+$ ]]; then\n\
    \t\techo \"Third argument is not an integer.\"\n\t\treturn 1\n\tfi\n\tif [[ $((a**2\
    \ + b**2)) -eq $((c**2)) ]]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\
    \n\tfi", "  local -i a b c\n  local -i x y z\n  local -i tmp\n  if [ \"$#\" -ne\
    \ 3 ]; then\n    echo \"right_angle_triangle needs three arguments\"\n    exit\
    \ 1\n  fi\n  a=$1; b=$2; c=$3\n  if (( a <= 0 || b <= 0 || c <= 0 )); then\n \
    \   echo \"lengths of sides should be positive\"\n    exit 1\n  fi\n  x=$(( a\
    \ * a + b * b ))\n  y=$(( b * b + c * c ))\n  z=$(( a * a + c * c ))\n  if ((\
    \ x > y )); then\n    tmp=$x; x=$y; y=$tmp\n  fi\n  if (( x > z )); then\n   \
    \ tmp=$x; x=$z; z=$tmp\n  fi\n  if (( y > z )); then\n    tmp=$y; y=$z; z=$tmp\n\
    \  fi\n  if (( x + y == z )); then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  res=\"false\"\n  if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ];\
    \ then\n    if [ $(( $1 * $1 + $2 * $2 )) -eq $(( $3 * $3 )) ]; then\n      res=\"\
    true\"\n    fi\n  fi\n  echo $res", '  # Write your code here', "  if [[ ! \"\
    $1\" =~ ^[0-9]+$ ]] || [[ ! \"$2\" =~ ^[0-9]+$ ]] || [[ ! \"$3\" =~ ^[0-9]+$ ]];\
    \ then\n    echo \"false\"\n    return 1\n  fi\n  if (( $1 > $2 && $1 > $3 ));\
    \ then\n    if (( $2 ** 2 + $3 ** 2 == $1 ** 2 )); then\n      echo \"true\"\n\
    \      return 0\n    fi\n  elif (( $2 > $1 && $2 > $3 )); then\n    if (( $1 **\
    \ 2 + $3 ** 2 == $2 ** 2 )); then\n      echo \"true\"\n      return 0\n    fi\n\
    \  elif (( $3 > $1 && $3 > $2 )); then\n    if (( $1 ** 2 + $2 ** 2 == $3 ** 2\
    \ )); then\n      echo \"true\"\n      return 0\n    fi\n  fi\n  echo \"false\"\
    \n  return 1", "  local -i a=$1 b=$2 c=$3\n  max=0\n  if [ \"$a\" -gt \"$b\" ];\
    \ then\n    max=$a\n  else\n    max=$b\n  fi\n  if [ \"$max\" -gt \"$c\" ]; then\n\
    \    max=$max\n  else\n    max=$c\n  fi\n  rest=\"$(( a ** 2 + b ** 2 ))\"\n \
    \ max2=\"$(( max ** 2 ))\"\n  if [ \"$rest\" -eq \"$max2\" ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "    local -i a=$1\n    local -i b=$2\n\
    \    local -i c=$3\n    if [ \"$a\" -gt 0 ] && [ \"$b\" -gt 0 ] && [ \"$c\" -gt\
    \ 0 ]; then\n        if [ $((a*a)) = $((b*b+c*c)) ] || \\\n           [ $((b*b))\
    \ = $((a*a+c*c)) ] || \\\n           [ $((c*c)) = $((a*a+b*b)) ]; then\n     \
    \       echo \"true\"\n        else\n            echo \"false\"\n        fi\n\
    \    else\n        echo \"false\"\n    fi", "    local -i side1=$1\n    local\
    \ -i side2=$2\n    local -i side3=$3\n    local -i hypotenuse=0\n    local -i\
    \ side1_2=0\n    local -i side2_2=0\n    local -i side3_2=0\n    local -i side1_side2=0\n\
    \    local -i side2_side3=0\n    local -i side3_side1=0\n    # the hypotenuse\
    \ always has a square greater than the other two\n    if [ $side1 -gt $side2 ]\
    \ && [ $side1 -gt $side3 ]; then\n        hypotenuse=$side1\n        side1_2=$(($side1\
    \ * $side1))\n        side2_2=$(($side2 * $side2))\n        side3_2=$(($side3\
    \ * $side3))\n        side1_side2=$(($side1_2 + $side2_2))\n        side2_side3=$(($side2_2\
    \ + $side3_2))\n        side3_side1=$(($side3_2 + $side1_2))\n    elif [ $side2\
    \ -gt $side1 ] && [ $side2 -gt $side3 ]; then\n        hypotenuse=$side2\n   \
    \     side1_2=$(($side1 * $side1))\n        side2_2=$(($side2 * $side2))\n   \
    \     side3_2=$(($side3 * $side3))\n        side1_side2=$(($side1_2 + $side2_2))\n\
    \        side2_side3=$(($side2_2 + $side3_2))\n        side3_side1=$(($side3_2\
    \ + $side1_2))\n    elif [ $side3 -gt $side1 ] && [ $side3 -gt $side2 ]; then\n\
    \        hypotenuse=$side3\n        side1_2=$(($side1 * $side1))\n        side2_2=$(($side2\
    \ * $side2))\n        side3_2=$(($side3 * $side3))\n        side1_side2=$(($side1_2\
    \ + $side2_", "    local a=$1\n    local b=$2\n    local c=$3\n    if [ ! -z \"\
    $(echo \"$a^2+$b^2\" | bc | grep \"$c^2\")\" ]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "  # Fill your solution here\n  return\
    \ 0", '    # Write your code here', "  if [[ ! \"$1\" =~ ^-?[0-9]+$ ]] || [[ !\
    \ \"$2\" =~ ^-?[0-9]+$ ]] || [[ ! \"$3\" =~ ^-?[0-9]+$ ]]; then\n    echo \"\\\
    \"false\\\"\"\n    return\n  fi\n  local a=$1\n  local b=$2\n  local c=$3\n  [[\
    \ $(((a * a) + (b * b))) -eq $((c * c)) ]] && echo \"\\\"true\\\"\" || echo \"\
    \\\"false\\\"\"", "    (( $1 > 0 && $2 > 0 && $3 > 0 )) || return 1\n    if [\
    \ $1 -eq $2 -a $2 -eq $3 ]; then\n        echo \"false\"\n    elif [ $1 -eq $2\
    \ -o $2 -eq $3 -o $1 -eq $3 ]; then\n        echo \"false\"\n    elif [ $1 -gt\
    \ $2 -a $1 -gt $3 ]; then\n        (( $2**2 + $3**2 == $1**2 )) && echo \"true\"\
    \ || echo \"false\"\n    elif [ $2 -gt $1 -a $2 -gt $3 ]; then\n        (( $1**2\
    \ + $3**2 == $2**2 )) && echo \"true\" || echo \"false\"\n    elif [ $3 -gt $1\
    \ -a $3 -gt $2 ]; then\n        (( $1**2 + $2**2 == $3**2 )) && echo \"true\"\
    \ || echo \"false\"\n    fi", "    c1=$1\n    c2=$2\n    c3=$3\n    echo \"($1**2)\
    \ + ($2**2) = ($3**2)\" | bc", "  if [[ -z \"$1\" || -z \"$2\" || -z \"$3\" ]];\
    \ then\n    return 1\n  fi\n  local side1=$1\n  local side2=$2\n  local side3=$3\n\
    \  if [[ $side1 -gt $side2 ]]; then\n    if [[ $side1 -gt $side3 ]]; then\n  \
    \    if [[ $side1 -eq $((side2 * side2 + side3 * side3)) ]]; then\n        echo\
    \ \"true\"\n        return 0\n      fi\n    else\n      if [[ $side3 -eq $((side1\
    \ * side1 + side2 * side2)) ]]; then\n        echo \"true\"\n        return 0\n\
    \      fi\n    fi\n  else\n    if [[ $side2 -gt $side3 ]]; then\n      if [[ $side2\
    \ -eq $((side1 * side1 + side3 * side3)) ]]; then\n        echo \"true\"\n   \
    \     return 0\n      fi\n    else\n      if [[ $side3 -eq $((side1 * side1 +\
    \ side2 * side2)) ]]; then\n        echo \"true\"\n        return 0\n      fi\n\
    \    fi\n  fi\n  echo \"false\"\n  return 0", "    local a=$1\n    local b=$2\n\
    \    local c=$3\n    if [[ \"$a\" -eq \"$(($b*$b + $c*$c))\" ]]; then\n      \
    \  echo \"true\"\n    elif [[ \"$b\" -eq \"$(($a*$a + $c*$c))\" ]]; then\n   \
    \     echo \"true\"\n    elif [[ \"$c\" -eq \"$(($a*$a + $b*$b))\" ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ -i a=$1\n    local -i b=$2\n    local -i c=$3\n    local answer\n    if (( a\
    \ < 1 || b < 1 || c < 1 )); then\n        answer=false\n    elif (( a*a + b*b\
    \ == c*c || b*b + c*c == a*a || c*c + a*a == b*b )); then\n        answer=true\n\
    \    else\n        answer=false\n    fi\n    echo \"$answer\"", '  # Fill in your
    code here', "  if [ \"$(check_triangle \"$@\")\" = \"true\" ]; then\n    local\
    \ right_angle_triangle=\"false\"\n    local square_of_c=$(echo \"scale=2; ${3}^2\"\
    \ | bc)\n    local square_of_a=$(echo \"scale=2; ${1}^2\" | bc)\n    local square_of_b=$(echo\
    \ \"scale=2; ${2}^2\" | bc)\n    local sum_of_square_of_ab=$(echo \"scale=2; ${square_of_a}\
    \ + ${square_of_b}\" | bc)\n    if [ $(echo \"${square_of_c} == ${sum_of_square_of_ab}\"\
    \ | bc) -eq 1 ]; then\n      right_angle_triangle=\"true\"\n    fi\n    echo \"\
    ${right_angle_triangle}\"\n  else\n    echo \"false\"\n  fi", "    echo \"$(\n\
    \        python -c \"import sys; (lambda $1, $2, $3: 'true' if ($1 ** 2 + $2 **\
    \ 2 == $3 ** 2) else 'false')(*map(int, sys.argv[1:]))\" \"$1\" \"$2\" \"$3\"\n\
    \    )\"", "    if [ $# -ne 3 ]; then\n        echo \"Usage: right_angle_triangle\
    \ side1 side2 side3\"\n        exit 1\n    fi\n    local a=$1\n    local b=$2\n\
    \    local c=$3\n    local max=$((a > b ? a : b))\n    max=$((max > c ? max :\
    \ c))\n    local a_square=$((a*a))\n    local b_square=$((b*b))\n    local c_square=$((c*c))\n\
    \    if [ $max -eq $a ]; then\n        max_square=$a_square\n        local second_max=$((b\
    \ > c ? b : c))\n        local second_max_square=$((second_max == b ? b_square\
    \ : c_square))\n    elif [ $max -eq $b ]; then\n        max_square=$b_square\n\
    \        local second_max=$((a > c ? a : c))\n        local second_max_square=$((second_max\
    \ == a ? a_square : c_square))\n    else\n        max_square=$c_square\n     \
    \   local second_max=$((a > b ? a : b))\n        local second_max_square=$((second_max\
    \ == a ? a_square : b_square))\n    fi\n    sum=$((max_square + second_max_square))\n\
    \    if [ $sum -eq $((max*max)) ]; then\n        echo \"true\"\n    else\n   \
    \     echo \"false\"\n    fi", "  if [ $# -ne 3 ]; then\n    echo \"Usage: $0\
    \ <integer> <integer> <integer>\"\n    return 1\n  fi\n  local a=$1\n  local b=$2\n\
    \  local c=$3\n  local hypotenuse\n  local cathetus1\n  local cathetus2\n  if\
    \ [ $a -gt $b ] && [ $a -gt $c ]; then\n    hypotenuse=$a\n    cathetus1=$b\n\
    \    cathetus2=$c\n  elif [ $b -gt $a ] && [ $b -gt $c ]; then\n    hypotenuse=$b\n\
    \    cathetus1=$a\n    cathetus2=$c\n  else\n    hypotenuse=$c\n    cathetus1=$a\n\
    \    cathetus2=$b\n  fi\n  local sum_of_squares=$(( cathetus1 * cathetus1 + cathetus2\
    \ * cathetus2 ))\n  local square_of_hypotenuse=$(( hypotenuse * hypotenuse ))\n\
    \  if [ $sum_of_squares -eq $square_of_hypotenuse ]; then\n    echo \"true\"\n\
    \  else\n    echo \"false\"\n  fi", "  if [ $# -ne 3 ]; then\n    echo \"Expected\
    \ 3 arguments but got $#\"\n    return 1\n  fi\n  for var in \"$@\"; do\n    if\
    \ ! [[ \"$var\" =~ ^[0-9]+$ ]]; then\n      echo \"Illegal argument: $var\"\n\
    \      return 1\n    fi\n  done\n  if [ $1 -eq $2 ] || [ $1 -eq $3 ] || [ $2 -eq\
    \ $3 ]; then\n    echo \"false\"\n    return 0\n  fi\n  local max\n  max=$(echo\
    \ \"$1 $2 $3\" | tr ' ' '\\n' | sort -nr | head -n 1)\n  if [ $max -eq $1 ]; then\n\
    \    if [ $(($2**2 + $3**2)) -eq $(($1**2)) ]; then\n      echo \"true\"\n   \
    \   return 0\n    fi\n  elif [ $max -eq $2 ]; then\n    if [ $(($1**2 + $3**2))\
    \ -eq $(($2**2)) ]; then\n      echo \"true\"\n      return 0\n    fi\n  elif\
    \ [ $max -eq $3 ]; then\n    if [ $(($1**2 + $2**2)) -eq $(($3**2)) ]; then\n\
    \      echo \"true\"\n      return 0\n    fi\n  fi\n  echo \"false\"\n  return\
    \ 0", "  if [[ -z \"$1\" || -z \"$2\" || -z \"$3\" ]]; then\n    echo \"Invalid\
    \ input. Enter 3 numbers: \"\n    read num1 num2 num3\n    right_angle_triangle\
    \ \"$num1\" \"$num2\" \"$num3\"\n  elif [[ $1 -eq 0 || $2 -eq 0 || $3 -eq 0 ]];\
    \ then\n    echo \"false\"\n  elif [[ $1 -eq $2 && $2 -eq $3 ]]; then\n    echo\
    \ \"false\"\n  elif [[ $1 -eq $2 && $2 -eq $3 ]]; then\n    echo \"false\"\n \
    \ elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n    echo \"false\"\n \
    \ elif [[ $1 -eq $2 || $2 -eq $3 || $1 -eq $3 ]]; then\n    echo \"false\"\n \
    \ elif [[ \"$1^2\" -eq \"$2^2 + $3^2\" || \"$2^2\" -eq \"$1^2 + $3^2\" ||\n  \
    \        \"$3^2\" -eq \"$1^2 + $2^2\" ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi", "    local hypotenuse=$(expr $1 \\* $1 + $2 \\* $2)\n\
    \    local hypotenuse_correct=$(expr $3 \\* $3)\n    if [[ \"$hypotenuse\" ==\
    \ \"$hypotenuse_correct\" ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    if [[ $1 -eq 0 ]] || [[ $2 -eq 0 ]] || [[ $3 -eq 0\
    \ ]]; then\n        echo \"false\"\n        return\n    fi\n    if [[ $(($1*$1\
    \ + $2*$2)) -eq $(($3*$3)) ]] || \\\n       [[ $(($1*$1 + $3*$3)) -eq $(($2*$2))\
    \ ]] || \\\n       [[ $(($2*$2 + $3*$3)) -eq $(($1*$1)) ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "  local a=$1\n  local\
    \ b=$2\n  local c=$3\n  local max=$a\n  local min1=$b\n  local min2=$c\n  if [\
    \ $max -lt $b ]; then\n    max=$b\n    min1=$a\n    min2=$c\n  fi\n  if [ $max\
    \ -lt $c ]; then\n    max=$c\n    min1=$a\n    min2=$b\n  fi\n  if [ $min1 -ge\
    \ $min2 ]; then\n    min1=$c\n    min2=$b\n  fi\n  if [ $(($min1*$min1 + $min2*$min2))\
    \ -eq $(($max*$max)) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n\
    \  fi", "  local a b c\n  a=$1\n  b=$2\n  c=$3\n  if [[ $a -eq 0 || $b -eq 0 ||\
    \ $c -eq 0 ]]; then\n    echo \"false\"\n  else\n    if [[ $a -eq $b && $b -eq\
    \ $c ]]; then\n      echo \"false\"\n    else\n      if [[ $a -gt $b && $a -gt\
    \ $c ]]; then\n        if [[ $((a**2)) -eq $((b**2 + c**2)) ]]; then\n       \
    \   echo \"true\"\n        else\n          echo \"false\"\n        fi\n      elif\
    \ [[ $b -gt $a && $b -gt $c ]]; then\n        if [[ $((b**2)) -eq $((a**2 + c**2))\
    \ ]]; then\n          echo \"true\"\n        else\n          echo \"false\"\n\
    \        fi\n      elif [[ $c -gt $a && $c -gt $b ]]; then\n        if [[ $((c**2))\
    \ -eq $((a**2 + b**2)) ]]; then\n          echo \"true\"\n        else\n     \
    \     echo \"false\"\n        fi\n      fi\n    fi\n  fi", "    local a=$1 b=$2\
    \ c=$3\n    (( $(($a * $a + $b * $b)) == $(($c * $c)) )) && echo true || echo\
    \ false", "  if [ -z \"$1\" ] || [ -z \"$2\" ] || [ -z \"$3\" ]; then\n    echo\
    \ \"false\"\n    return\n  fi\n  sq1=$(($1 * $1))\n  sq2=$(($2 * $2))\n  sq3=$(($3\
    \ * $3))\n  if [ $sq1 -eq $((sq2 + sq3)) ] || [ $sq2 -eq $((sq1 + sq3)) ] || [\
    \ $sq3 -eq $((sq1 + sq2)) ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi", "  # Write your code here\n  #\n  # Hint:\n  # A^2 + B^2 = C^2\n  # Here's\
    \ the code for reference\n  # a=${1}\n  # b=${2}\n  # c=${3}\n  # if [[ $((${a}\
    \ * ${a} + ${b} * ${b})) == $((${c} * ${c})) ]]; then\n  #   echo \"true\"\n \
    \ # else\n  #   echo \"false\"\n  # fi\n  #\n  # Here's the code for practice\n\
    \  # a=${1}\n  # b=${2}\n  # c=${3}\n  # if [[ $((${a} * ${a} + ${b} * ${b}))\
    \ == $((${c} * ${c})) ]]; then\n  #   echo \"true\"\n  # else\n  #   echo \"false\"\
    \n  # fi", "  if [ \"$#\" -ne 3 ]; then\n    echo \"usage: $0 <int> <int> <int>\"\
    \n    return\n  fi\n  # Sample tests\n  # $(right_angle_triangle \"3\" \"4\" \"\
    5\")\n  # $(right_angle_triangle \"1\" \"2\" \"3\")\n  # $(right_angle_triangle\
    \ \"5\" \"4\" \"3\")\n  # $(right_angle_triangle \"4\" \"5\" \"3\")\n  # $(right_angle_triangle\
    \ \"2\" \"2\" \"3\")\n  # $(right_angle_triangle \"3\" \"3\" \"3\")\n  # $(right_angle_triangle\
    \ \"3\" \"0\" \"3\")\n  # $(right_angle_triangle \"2\" \"2\" \"100\")\n  # $(right_angle_triangle\
    \ \"0\" \"0\" \"0\")\n  # $(right_angle_triangle \"100\" \"100\" \"100\")\n  if\
    \ [ \"$1\" -eq 0 ] || [ \"$2\" -eq 0 ] || [ \"$3\" -eq 0 ]; then\n    echo \"\
    false\"\n    return\n  fi\n  if [ \"$1\" -eq \"$2\" ] && [ \"$2\" -eq \"$3\" ];\
    \ then\n    echo \"false\"\n    return\n  fi\n  if [ \"$1\" -gt \"$2\" ] && [\
    \ \"$1\" -gt \"$3\" ]; then\n    if [ \"$1\" -eq \"$(($2 * $2 + $3 * $3))\" ];\
    \ then\n      echo \"true\"\n      return\n    fi\n  fi\n  if [ \"$2\" -gt \"\
    $1\" ] && [ \"$2\" -gt \"$3\" ]; then\n    if [ \"$2\" -eq \"$(($1 * $1 + $3 *\
    \ $3))\" ]; then\n      echo \"true\"\n      return\n    fi\n  fi\n  if [ \"$3\"\
    \ -gt \"$1\" ] && [ \"$3\" -gt \"$2\" ]; then\n    if [ \"$3\" -eq \"$(($1 * $1\
    \ + $2 * $2))\" ]; then\n      echo \"true\"\n      return\n    fi\n  fi\n  echo\
    \ \"false", "  if [ \"$#\" -ne 3 ]; then\n    echo \"Usage: right_angle_triangle\
    \ 3 4 5\"\n    return 1\n  fi\n  local a=$1\n  local b=$2\n  local c=$3\n  local\
    \ c2=$(( c * c ))\n  local sum_sq=$(( a * a + b * b ))\n  if [ \"$c2\" -eq \"\
    $sum_sq\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "  if\
    \ [ $# -ne 3 ]; then\n    echo \"Usage: $0 <num> <num> <num>\"\n    return 1\n\
    \  fi\n  re='^[0-9]+$'\n  if ! [[ $1 =~ $re ]] || ! [[ $2 =~ $re ]] || ! [[ $3\
    \ =~ $re ]]; then\n    echo \"error: $1 or $2 or $3 not integer\" >&2; return\
    \ 1\n  fi\n  if [ $1 -eq 0 ] || [ $2 -eq 0 ] || [ $3 -eq 0 ]; then\n    echo \"\
    false\"\n    return 0\n  fi\n  if [ $1 -eq $2 ] && [ $2 -eq $3 ]; then\n    echo\
    \ \"false\"\n    return 0\n  fi\n  if [ $1 -gt $2 ] && [ $1 -gt $3 ]; then\n \
    \   if [ $1 -eq $(($2*$2 + $3*$3)) ]; then\n      echo \"true\"\n      return\
    \ 0\n    fi\n  fi\n  if [ $2 -gt $1 ] && [ $2 -gt $3 ]; then\n    if [ $2 -eq\
    \ $(($1*$1 + $3*$3)) ]; then\n      echo \"true\"\n      return 0\n    fi\n  fi\n\
    \  if [ $3 -gt $1 ] && [ $3 -gt $2 ]; then\n    if [ $3 -eq $(($1*$1 + $2*$2))\
    \ ]; then\n      echo \"true\"\n      return 0\n    fi\n  fi\n  echo \"false\"",
  "    num1=$1\n    num2=$2\n    num3=$3\n    sqr_num1=$((num1*num1))\n    sqr_num2=$((num2*num2))\n\
    \    sqr_num3=$((num3*num3))\n    if [[ $sqr_num1 -eq $((sqr_num2+sqr_num3)) ]];\
    \ then\n        echo \"true\"\n    elif [[ $sqr_num2 -eq $((sqr_num1+sqr_num3))\
    \ ]]; then\n        echo \"true\"\n    elif [[ $sqr_num3 -eq $((sqr_num1+sqr_num2))\
    \ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "    local a=$1\n    local b=$2\n    local c=$3\n    [ $((a*a+b*b)) -eq $((c*c))\
    \ ] && echo true || echo false", "  if [ \"$#\" -ne 3 ]; then\n    echo \"Usage:\
    \ $0 <int> <int> <int>\"\n    return\n  fi\n  local a=\"$1\"\n  local b=\"$2\"\
    \n  local c=\"$3\"\n  local ab=$(($a * $a + $b * $b))\n  local c2=$(($c * $c))\n\
    \  if [ \"$ab\" -eq \"$c2\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\
    \n  fi"]
stop_tokens:
- "\n}"
