name: HumanEval_71_triangle_area
language: sh
prompt: "#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return\
  \ the area of\n# the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n# than the third side.\n# Example:\n\
  # >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\"\
  \ \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an\
  \ integer\ntriangle_area() {\n"
tests: "}\n\ncandidate() {\n    triangle_area \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"3\" \"4\" \"5\") = \"6.0\" ]]\n    [[ $(candidate \"1\" \"\
  2\" \"10\") = \"-1\" ]]\n    [[ $(candidate \"4\" \"8\" \"5\") = \"8.18\" ]]\n \
  \   [[ $(candidate \"2\" \"2\" \"2\") = \"1.73\" ]]\n    [[ $(candidate \"1\" \"\
  2\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"10\" \"5\" \"7\") = \"16.25\" ]]\n\
  \    [[ $(candidate \"2\" \"6\" \"3\") = \"-1\" ]]\n    [[ $(candidate \"1\" \"\
  1\" \"1\") = \"0.43\" ]]\n    [[ $(candidate \"2\" \"2\" \"10\") = \"-1\" ]]\n}\n\
  \nrun_test"
completions: ["    if [[ ! $1 =~ ^-?[0-9]+$ ]]\n    then\n        echo \"$1 is not\
    \ an integer\" >&2\n        return 1\n    fi\n    if [[ ! $2 =~ ^-?[0-9]+$ ]]\n\
    \    then\n        echo \"$2 is not an integer\" >&2\n        return 1\n    fi\n\
    \    if [[ ! $3 =~ ^-?[0-9]+$ ]]\n    then\n        echo \"$3 is not an integer\"\
    \ >&2\n        return 1\n    fi\n    # We solve this by first calculating the\
    \ semi-perimeter and then the area.\n    local semi_perimeter=$(echo \"scale=2;\
    \ ($1 + $2 + $3) / 2\" | bc)\n    local area=$(echo \"scale=2; sqrt($semi_perimeter\
    \ * ($semi_perimeter - $1) * ($semi_perimeter - $2) * ($semi_perimeter - $3))\"\
    \ | bc)\n    # We use bc to calculate the square root.\n    if [ $(echo \"$1 +\
    \ $2 <= $3\" | bc) -eq 1 ] || \\\n       [ $(echo \"$1 + $3 <= $2\" | bc) -eq\
    \ 1 ] || \\\n       [ $(echo \"$2 + $3 <= $1\" | bc) -eq 1 ]\n    then\n     \
    \   echo \"-1\"\n    else\n        echo \"$area\"\n    fi", "  valid_triangle_area=$(echo\
    \ \"scale=2; sqrt(($1+$2+$3)*($1+$2-$3)*($1-$2+$3)*(-1*$1+$2+$3))/4\" | bc)\n\
    \  # if $valid_triangle_area is less than zero then it's not a valid triangle\n\
    \  if [ $valid_triangle_area -lt 0 ]; then\n    echo \"-1\"\n  else\n    echo\
    \ $valid_triangle_area\n  fi", "\ta=$1\n\tb=$2\n\tc=$3\n\tif (( \"$a\" + \"$b\"\
    \ <= \"$c\" )) || (( \"$a\" + \"$c\" <= \"$b\" )) || (( \"$b\" + \"$c\" <= \"\
    $a\" )); then\n\t\techo -1\n\telse\n\t\tp=$(echo \"scale=2;($a+$b+$c)/2\" | bc)\n\
    \t\tarea=$(echo \"scale=2;sqrt($p*($p-$a)*($p-$b)*($p-$c))\" | bc)\n\t\techo $area\n\
    \tfi", "    local c=$(echo \"$1 + $2 - $3\" | bc)\n    local d=$(echo \"$1 + $3\
    \ - $2\" | bc)\n    local e=$(echo \"$2 + $3 - $1\" | bc)\n    if [[ $c -gt 0\
    \ && $d -gt 0 && $e -gt 0 ]]; then\n        local s=$(echo \"($1 + $2 + $3) /\
    \ 2\" | bc)\n        local f=$(echo \"$s * ($s - $1) * ($s - $2) * ($s - $3)\"\
    \ | bc)\n        echo $(echo \"sqrt($f)\" | bc -l)\n    else\n        echo \"\
    -1\"\n    fi", "    # Check if number of parameters is 3\n    if [ $# -ne 3 ];\
    \ then\n        echo \"-1\"\n        return\n    fi\n\n    # Check if all three\
    \ parameters are integers\n    for var in \"$@\"\n    do\n        # Check if parameter\
    \ is a number\n        if ! [[ \"$var\" =~ ^[0-9]+$ ]]; then\n            echo\
    \ \"-1\"\n            return\n        fi\n    done\n\n    # Sort the parameters\
    \ in descending order\n    sorted=($(echo \"$@\" | tr \" \" \"\\n\" | sort -rn))\n\
    \n    # Check if three parameters form a valid triangle\n    if [ $(echo \"${sorted[0]}\
    \ > (${sorted[1]} + ${sorted[2]})\" | bc) -eq 1 ]; then\n        echo \"-1\"\n\
    \        return\n    fi\n\n    # Heron's formula: Area = (s(s - a)(s - b)(s -\
    \ c))**0.5\n    a=${sorted[0]}\n    b=${sorted[1]}\n    c=${sorted[2]}\n    s=`echo\
    \ \"scale=2; ($a + $b + $c) / 2\" | bc`\n    area=`echo \"scale=2; ( $s * ( $s\
    \ - $a ) * ( $s - $b ) * ( $s - $c ) ) ** 0.5\" | bc`\n    echo \"$area\"", " \
    \ if [ $# -ne 3 ]; then\n    echo \"Usage: $0 <integer> <integer> <integer>\"\n\
    \    return 1\n  fi\n  if [ $(echo $1 $2 $3 | tr \" \" \"\\n\" | sort -nr | head\
    \ -n 1) -eq $1 ]; then\n    # $1 is the max of the three integers\n    if [ $1\
    \ -gt $(($2 + $3)) ]; then\n      echo \"-1\"\n    else\n      echo \"$(echo \"\
    scale=2;$(echo \"$2*$3/2\" | bc -l)\" | bc -l)\"\n    fi\n  elif [ $(echo $1 $2\
    \ $3 | tr \" \" \"\\n\" | sort -nr | head -n 1) -eq $2 ]; then\n    # $2 is the\
    \ max of the three integers\n    if [ $2 -gt $(($1 + $3)) ]; then\n      echo\
    \ \"-1\"\n    else\n      echo \"$(echo \"scale=2;$(echo \"$1*$3/2\" | bc -l)\"\
    \ | bc -l)\"\n    fi\n  else\n    # $3 is the max of the three integers\n    if\
    \ [ $3 -gt $(($1 + $2)) ]; then\n      echo \"-1\"\n    else\n      echo \"$(echo\
    \ \"scale=2;$(echo \"$1*$2/2\" | bc -l)\" | bc -l)\"\n    fi\n  fi", "    # Write\
    \ your code here\n    # area of a triangle $1, $2, $3:\n    # Area = \u221Ap(p\
    \ \u2212 a)(p \u2212 b)(p \u2212 c) where p = (a + b + c)/2\n    #\n    if [[\
    \ $1 -le 0 || $2 -le 0 || $3 -le 0 ]]; then\n        echo \"-1\"\n        return\
    \ 1\n    fi\n    if [[ $(($1 + $2)) -le $3 || $(($1 + $3)) -le $2 || $(($2 + $3))\
    \ -le $1 ]]; then\n        echo \"-1\"\n        return 1\n    fi\n    sqrt=$(python\
    \ -c \"import math;print(math.sqrt($(($1+$2+$3))))\")\n    area=$(python -c \"\
    import math;print(math.sqrt($sqrt*$(($sqrt-$1))*$(($sqrt-$2))*$(($sqrt-$3))))\"\
    )\n    echo \"$(python -c \"print('{:.2f}'.format($area))\")\"", "\tif [[ $1 -eq\
    \ $2 ]] || [[ $2 -eq $3 ]] || [[ $1 -eq $3 ]]; then\n\t\tif [[ $1 -eq $2 ]] &&\
    \ [[ $2 -eq $3 ]]; then\n\t\t\techo \"$(( $1 * $2 ))\"\n\t\t\treturn\n\t\tfi\n\
    \t\techo \"-1\"\n\t\treturn\n\tfi\n\tif [[ $1 -lt $2 ]] && [[ $1 -lt $3 ]]; then\n\
    \t\techo \"$(python -c \"from math import sqrt; print('{0:.2f}'.format(round(sqrt(($2\
    \ + $3 - $1) * ($3 + $1 - $2) * ($1 + $2 - $3) * ($1 + $2 + $3) / 16), 2)))\"\
    )\"\n\t\treturn\n\tfi\n\tif [[ $2 -lt $1 ]] && [[ $2 -lt $3 ]]; then\n\t\techo\
    \ \"$(python -c \"from math import sqrt; print('{0:.2f}'.format(round(sqrt(($1\
    \ + $3 - $2) * ($3 + $2 - $1) * ($1 + $2 - $3) * ($1 + $2 + $3) / 16), 2)))\"\
    )\"\n\t\treturn\n\tfi\n\tif [[ $3 -lt $1 ]] && [[ $3 -lt $2 ]]; then\n\t\techo\
    \ \"$(python -c \"from math import sqrt; print('{0:.2f}'.format(round(sqrt(($1\
    \ + $2 - $3) * ($2 + $3 - $1) * ($1 + $2 - $3) * ($1 + $2 + $3) / 16), 2)))\"\
    )\"\n\t\treturn\n\tfi", "  python -c \"\nfrom sys import argv\ndef triangle_area(a,\
    \ b, c):\n    x = (a + b + c) / 2\n    y = x * (x - a) * (x - b) * (x - c)\n \
    \   if y < 0:\n        return -1\n    return round(y ** .5, 2)\nprint(triangle_area(int(argv[1]),\
    \ int(argv[2]), int(argv[3])))\" \"$1\" \"$2\" \"$3\"", "    if [ $1 -lt $2 ];\
    \ then\n        if [ $1 -lt $3 ]; then\n            if [ $2 -lt $3 ]; then\n \
    \               # 1 is smallest and 3 is biggest\n                side_1=$1\n\
    \                side_2=$2\n                side_3=$3\n            else\n    \
    \            # 1 is smallest and 2 is biggest\n                side_1=$1\n   \
    \             side_2=$3\n                side_3=$2\n            fi\n        else\n\
    \            # 2 is smallest and 3 is biggest\n            side_1=$2\n       \
    \     side_2=$1\n            side_3=$3\n        fi\n    else\n        if [ $2\
    \ -lt $3 ]; then\n            if [ $1 -lt $3 ]; then\n                # 2 is smallest\
    \ and 3 is biggest\n                side_1=$2\n                side_2=$1\n   \
    \             side_3=$3\n            else\n                # 2 is smallest and\
    \ 1 is biggest\n                side_1=$2\n                side_2=$3\n       \
    \         side_3=$1\n            fi\n        else\n            # 3 is smallest\
    \ and 1 is biggest\n            side_1=$3\n            side_2=$2\n           \
    \ side_3=$1\n        fi\n    fi\n    if [ $side_1 -lt $(($side_2 + $side_3)) ];\
    \ then\n        if [ $side_2 -lt $(($side_1 + $side_3)) ]; then\n            if\
    \ [ $side_3 -lt $(($side_1 + $side_2)) ]; then\n                echo $(printf\
    \ \"%.2f\" $(echo \"scale=4;(sqrt($side_1*$side_1 + $side_2*$side_2))*$side_2/2\"\
    \ | bc))\n            else\n                echo \"-1\"\n            fi\n    \
    \    else\n            echo \"-1\"\n        fi\n    else\n        echo \"-1\"\n\
    \    fi", "    local a=\"$1\"\n    local b=\"$2\"\n    local c=\"$3\"\n    local\
    \ s=\"$(echo \"scale=4; ($a + $b + $c) / 2\" | bc -l)\"\n    local result=\"$(echo\
    \ \"scale=4; $s * ($s - $a) * ($s - $b) * ($s - $c)\" | bc -l)\"\n    if [[ \"\
    $result\" == \"-0\" ]]; then\n        result=\"0\"\n    fi\n    echo \"$result\"",
  "  if [ -z $1 ] || [ -z $2 ] || [ -z $3 ]; then\n    echo \"Error: missing arguments\"\
    \n    return\n  fi\n  if [[ $1 =~ ^[0-9]+$ ]] && [[ $2 =~ ^[0-9]+$ ]] && [[ $3\
    \ =~ ^[0-9]+$ ]]; then\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n\
    \      local sum=$(expr $1 + $2 + $3)\n      local area=$(echo \"scale=2; sqrt($sum*($sum-$1)*($sum-$2)*($sum-$3))\"\
    \ | bc)\n      if [[ $area =~ ^[0-9]+\\.[0-9]+$ ]]; then\n        echo $area\n\
    \      else\n        echo \"-1\"\n      fi\n    else\n      echo \"-1\"\n    fi\n\
    \  else\n    echo \"Error: please enter an integer\"\n  fi", "\t# your code here",
  "# Define your code here\n    A=$1\n    B=$2\n    C=$3\n    if [ $(( $A + $B ))\
    \ -gt $C ] && [ $(( $A + $C )) -gt $B ] && [ $(( $B + $C )) -gt $A ]; then\n \
    \       echo -n \"$(echo \"scale=2;sqrt($A*$A + $B*$B - 2*$A*$B*$C)\" | bc)\"\
    ;\n    else\n        echo -n -1;\n    fi", "    echo \"$1 $2 $3\" | awk '{\n \
    \       if ($1+$2>$3 && $1+$3>$2 && $2+$3>$1) {\n            printf \"%.2f\",\
    \ $1*$2/2\n        } else {\n            print \"-1\"\n        }\n    }'", " \
    \   # your code here\n    if [ $1 -gt 0 ] && [ $2 -gt 0 ] && [ $3 -gt 0 ]; then\n\
    \        let a=$1+$2\n        let b=$2+$3\n        let c=$3+$1\n        \n   \
    \     if [ $a -gt $3 ] && [ $b -gt $1 ] && [ $c -gt $2 ]; then\n            echo\
    \ $(($1*$2)) | awk '{ printf \"%.2f\", $1/2 }'\n        else\n            echo\
    \ \"-1\"\n        fi\n    else\n        echo \"-1\"\n    fi", "    # Your code\
    \ here\n    let side_a=$1\n    let side_b=$2\n    let side_c=$3\n    let s=($side_a+$side_b+$side_c)/2\n\
    \    area=$(bc -l <<< \"$s*($s-$side_a)*($s-$side_b)*($s-$side_c)\")\n    echo\
    \ $(bc -l <<< \"scale=2;sqrt($area)\")", "    local a=\"$1\"\n    local b=\"$2\"\
    \n    local c=\"$3\"\n    local p=($a $b $c)\n    local sum=0\n    local sum2=0\n\
    \    p=($(echo ${p[*]} | tr ' ' '\\n' | sort -n))\n    for ((i=0; i<${#p[@]};\
    \ i++)); do\n        if [[ \"${p[$i]}\" =~ ^-?[0-9]+$ ]]; then\n            sum=$((sum+1))\n\
    \        fi\n    done\n    if [[ $sum -ne 3 ]]; then\n        echo -1\n    else\n\
    \        sum2=$((p[0]+p[1]))\n        if [[ $sum2 -gt ${p[2]} ]]; then\n     \
    \       echo $(bc <<< \"scale=2; 0.5*${p[0]}*${p[1]}\")\n        else\n      \
    \      echo -1\n        fi\n    fi", "\tlocal a=$1\n\tlocal b=$2\n\tlocal c=$3\n\
    \tlocal area=0.0\n\tlocal s=0.0\n\tif [[ $(( $a + $b )) -gt $c ]] &&\n\t\t[[ $((\
    \ $a + $c )) -gt $b ]] &&\n\t\t[[ $(( $b + $c )) -gt $a ]]; then\n\t\ts=$(echo\
    \ \"scale=2; ($a + $b + $c) / 2\" | bc)\n\t\tarea=$(echo \"scale=2; sqrt($s *\
    \ ($s - $a) * ($s - $b) * ($s - $c))\" | bc)\n\telse\n\t\tarea=-1\n\tfi\n\techo\
    \ $area", "    # Write your code here\n    sum=$(($1+$2+$3))\n    if [ $1 -lt\
    \ 0 ] || [ $2 -lt 0 ] || [ $3 -lt 0 ]; then\n        echo \"-1\"\n    elif [ $1\
    \ -ge $2 ] && [ $1 -ge $3 ]; then\n        if [ $2 -ge $3 ]; then\n          \
    \  if [ $1 -lt $sum ]; then\n                echo \"scale=2; sqrt(($sum*($sum-$1)*($sum-$2)*($sum-$3))/16)\"\
    \ | bc\n            else\n                echo \"-1\"\n            fi\n      \
    \  else\n            if [ $1 -lt $sum ]; then\n                echo \"scale=2;\
    \ sqrt(($sum*($sum-$1)*($sum-$2)*($sum-$3))/16)\" | bc\n            else\n   \
    \             echo \"-1\"\n            fi\n        fi\n    elif [ $2 -ge $1 ]\
    \ && [ $2 -ge $3 ]; then\n        if [ $1 -ge $3 ]; then\n            if [ $2\
    \ -lt $sum ]; then\n                echo \"scale=2; sqrt(($sum*($sum-$1)*($sum-$2)*($sum-$3))/16)\"\
    \ | bc\n            else\n                echo \"-1\"\n            fi\n      \
    \  else\n            if [ $2 -lt $sum ]; then\n                echo \"scale=2;\
    \ sqrt(($sum*($sum-$1)*($sum-$2)*($sum-$3))/16)\" | bc\n            else\n   \
    \             echo \"-1\"\n            fi\n        fi\n    elif [ $3 -ge $1 ]\
    \ && [ $3 -ge $2 ]; then\n        if [ $1 -ge $2 ]; then\n            if [ $3\
    \ -lt $sum ]; then\n                echo \"scale=2; sqrt(($sum*($sum-$1)*($sum-$2)*($sum-$3))/16)\"\
    \ | bc\n            else\n                echo \"-1\"\n            fi\n      \
    \  else\n            if [ $3 -lt $sum ]; then\n                echo \"scale=2;\
    \ sqrt(($sum*($sum-$1)*($sum-$2)*($sum-$3))/16)\" | bc\n            else\n   \
    \            "]
stop_tokens:
- "\n}"
