name: HumanEval_3_below_zero
language: sh
prompt: "#!/bin/bash\n# You're given a list of deposit and withdrawal operations on\
  \ a bank account that starts with\n# zero balance. Your task is to detect if at\
  \ any point the balance of account fallls below zero, and\n# at that point function\
  \ should return true. Otherwise it should return false.\n# >>> $(below_zero \"1\
  \ 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is\
  \ a space-separated list\nbelow_zero() {\n"
tests: "}\n\ncandidate() {\n    below_zero \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"\") = \"false\" ]]\n    [[ $(candidate \"1 2 -3 1 2 -3\") = \"\
  false\" ]]\n    [[ $(candidate \"1 2 -4 5 6\") = \"true\" ]]\n    [[ $(candidate\
  \ \"1 -1 2 -2 5 -5 4 -4\") = \"false\" ]]\n    [[ $(candidate \"1 -1 2 -2 5 -5 4\
  \ -5\") = \"true\" ]]\n    [[ $(candidate \"1 -2 2 -2 5 -5 4 -4\") = \"true\" ]]\n\
  }\n\nrun_test"
completions: ["  local sum=0\n  for i in $1; do\n    ((sum += i))\n    if ((sum <\
    \ 0)); then\n      echo \"true\"\n      return\n    fi\n  done\n  echo \"false\"",
  "\tlocal balance=0\n\twhile read op\n\tdo\n\t\tbalance=$((balance + op))\n\t\tif\
    \ [ $balance -lt 0 ]\n\t\tthen\n\t\t\techo \"true\"\n\t\t\treturn\n\t\tfi\n\t\
    done <<< \"$1\"\n\techo \"false\"", "  balance=0\n\n  for amount in $1; do\n \
    \   balance=$((balance + amount))\n    if [[ $balance -lt 0 ]]; then\n      echo\
    \ \"true\"\n      return\n    fi\n  done\n\n  echo \"false\"", "    if [ -z \"\
    $1\" ]; then\n        return\n    fi\n    local balance=0\n    local current_deposit\n\
    \    for current_deposit in $@; do\n        ((balance += current_deposit))\n \
    \       if [ $balance -lt 0 ]; then\n            echo \"true\"\n            return\n\
    \        fi\n    done\n    echo \"false\"", "  balance=0\n\n  for i in $1; do\n\
    \    balance=$((balance + i))\n    if [[ $balance -lt 0 ]]; then\n      echo \"\
    true\"\n      exit 0\n    fi\n  done\n\n  echo \"false\"", "    if [ -z \"$1\"\
    \ ]; then\n        echo \"false\"\n        return\n    fi\n    SUM=0\n    for\
    \ i in $@; do\n        SUM=$(($SUM + $i))\n        if [ $SUM -lt 0 ]; then\n \
    \           echo \"true\"\n            return\n        fi\n    done\n    echo\
    \ \"false\"", "  local sum=0\n  for element in $1; do\n    ((sum += element))\n\
    \    if ((sum < 0)); then\n      echo \"true\"\n      return\n    fi\n  done\n\
    \  echo \"false\"", '    echo "$1"', "    s=$1\n    balance=0\n    for value in\
    \ $s; do\n        balance=$((balance + value))\n        if [ $balance -lt 0 ];\
    \ then\n            echo \"true\"\n            return\n        fi\n    done\n\
    \    echo \"false\"", "    echo \"$1\" | tr ' ' '\\n' | awk '{sum+=$1} END {if\
    \ (sum<0) print \"true\"; else print \"false\"}'", "\t# Enter your code here",
  "    if [ -z \"$1\" ]; then\n        # $1 is null, which means that the initial\
    \ balance is zero\n        balance=0\n    else\n        # Calculate the balance\
    \ of account\n        balance=$(echo $1 | awk '{for(i=1;i<=NF;i++)sum+=$i}END{print\
    \ sum}')\n    fi\n    if [ $balance -lt 0 ]; then\n        echo \"true\"\n   \
    \ else\n        echo \"false\"\n    fi", "    balance=0\n    for item in $@; do\n\
    \        ((balance += item))\n        if [[ $balance -lt 0 ]]; then\n        \
    \    echo \"true\"\n            break\n        fi\n    done\n    echo \"false\"",
  "  local sum=0\n  for i in $1; do\n    if [ $i -lt 0 ]; then\n      let sum-=$i\n\
    \    else\n      let sum+=$i\n    fi\n    if [ $sum -lt 0 ]; then\n      return\
    \ 0\n    fi\n  done\n  return 1", "    # TODO: implement me!\n    # Hint: you\
    \ can use `echo` and `awk`", "\tsum=0\n\tfor i in $1\n\tdo\n\t\tsum=$((sum+i))\n\
    \t\tif [ $sum -lt 0 ]\n\t\tthen\n\t\t\techo \"true\"\n\t\t\treturn\n\t\tfi\n\t\
    done\n\techo \"false\"", "  local arr=(\"$@\")\n  local sum=0\n  for i in \"${arr[@]}\"\
    ; do\n    let sum+=$i\n    if [[ $sum -lt 0 ]]; then\n      echo \"true\"\n  \
    \    return\n    fi\n  done\n  echo \"false\"", "\tlocal balance=0\n\tfor x in\
    \ $1; do\n\t\tbalance=$((balance + x))\n\t\tif [[ $balance -lt 0 ]]; then\n\t\t\
    \techo true\n\t\t\treturn\n\t\tfi\n\tdone\n\techo false", "  local balance=0\n\
    \  for num in $1; do\n    balance=$((balance + num))\n    if [ $balance -lt 0\
    \ ]; then\n      echo \"true\"\n      return\n    fi\n  done\n  echo \"false\"",
  "\tlocal bal=0\n\tfor i in $1; do\n\t\tbal=$((bal + i))\n\t\tif [[ $bal -lt 0 ]];\
    \ then\n\t\t\techo true\n\t\t\treturn\n\t\tfi\n\tdone\n\techo false"]
stop_tokens:
- "\n}"
