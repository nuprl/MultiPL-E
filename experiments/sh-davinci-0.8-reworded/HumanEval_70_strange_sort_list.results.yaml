language: sh
name: HumanEval_70_strange_sort_list
results:
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input=$1\n\n  if [ -z \"$input\" ]; then\n    echo -n \"[]\"\n    return\n \
    \ fi\n\n  read -a arr <<< $input\n  local list=\"\"\n  local len=${#arr[@]}\n\
    \  local num=\"\"\n  local i=\"\"\n  local start=\"\"\n  local end=\"\"\n  local\
    \ c=0\n\n  for ((i=0; i<len; i++)); do\n    start=${arr[c]}\n    end=${arr[len-c-1]}\n\
    \    num=$(echo -n \"\\\"$start\\\"\")\n    if [[ \"$i\" != $((len-1)) ]]; then\n\
    \      num+=$(echo -n \", \")\n    fi\n    list+=$num\n    num=$(echo -n \"\\\"\
    $end\\\"\")\n    if [[ \"$i\" != $((len-1)) ]]; then\n      num+=$(echo -n \"\
    , \")\n    fi\n    list+=$num\n    ((c++))\n  done\n\n  echo -n \"[$list]\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a arr=($1)\n  local result=()\n  local dir=\"min\"\n  local -i i=0\n  local\
    \ -i n=${#arr[@]}\n  local -i c=1\n  local -i ce=(n-c)\n  local -i j\n  while\
    \ [ $n -gt 0 ]; do\n    local len=$n\n    if [ $c -gt $ce ]; then\n      dir=\"\
    max\"\n    elif [ $c -eq 1 ]; then\n      dir=\"min\"\n    fi\n    if [ $dir ==\
    \ \"min\" ]; then\n      j=$(echo $@ | tr ' ' '\\n' | sort -n | tail -n+$c | head\
    \ -n1)\n      result[$i]=$j\n      let c++\n    else\n      j=$(echo $@ | tr '\
    \ ' '\\n' | sort -n | tail -n$c | head -n1)\n      result[$i]=$j\n      let c--\n\
    \    fi\n    arr=(${arr[@]/$j})\n    let i++\n    let n--\n  done\n  echo ${result[@]}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    list=(\
    \ $1 )\n    sorted_list=()\n    sorted_list+=(${list[0]})\n    list=( ${list[@]:1}\
    \ )\n    i=0\n    for num in ${list[@]}; do\n        if (( $i % 2 == 0 )); then\n\
    \            sorted_list+=($(echo \"${list[@]}\" | tr ' ' '\\n' | sort -nr | head\
    \ -n 1))\n            list=( $(echo \"${list[@]}\" | tr ' ' '\\n' | sort -nr |\
    \ tail -n +2) )\n        else\n            sorted_list+=($(echo \"${list[@]}\"\
    \ | tr ' ' '\\n' | sort -n | head -n 1))\n            list=( $(echo \"${list[@]}\"\
    \ | tr ' ' '\\n' | sort -n | tail -n +2) )\n        fi\n        i=$(( $i + 1 ))\n\
    \    done\n    echo \"${sorted_list[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ arr=()\n  local i=0\n  for el in $1; do\n    arr[$i]=$el\n    ((i++))\n  done\n\
    \  local len=${#arr[@]}\n  local i=$len\n  local j=$(($len / 2))\n  local k=0\n\
    \  local tmp\n\n  while [ $j -gt 0 ]; do\n    while [ $i -ge $j ]; do\n      k=$i\n\
    \      while [ $k -ge $j ]; do\n        if [ ${arr[$k]} -lt ${arr[$((k - j))]}\
    \ ]; then\n          tmp=${arr[$k]}\n          arr[$k]=${arr[$((k - j))]}\n  \
    \        arr[$((k - j))]=$tmp\n        fi\n        ((k-=j))\n      done\n    \
    \  ((i--))\n    done\n    i=$len\n    ((j /= 2))\n  done\n\n  # convert from arr\
    \ to list\n  local out=()\n  for el in ${arr[@]}; do\n    out+=(\"\\\"$el\\\"\"\
    )\n  done\n  echo \"${out[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8hti5j80.sh: line 31: [: -lt: unary operator expected

    /tmp/tmp8hti5j80.sh: line 31: [: -lt: unary operator expected

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ python_code='\nimport sys\nfrom collections import deque\n\ninteger_list = [int(x)\
    \ for x in sys.argv[1].split()]\ninteger_deque = deque(sorted(integer_list))\n\
    \noutput_list = []\nwhile integer_deque:\n    output_list.append(str(integer_deque.popleft()))\n\
    \    if integer_deque:\n        output_list.append(str(integer_deque.pop()))\n\
    print(output_list)'\n  python3 -c \"$python_code\" \"$1\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    [\
    \ $# -eq 0 ] && echo [] && return\n    local res=\"\"\n    local -a a=($1)\n \
    \   local -a b=($1)\n    local num=${#a[@]}\n    for ((i=0; i<num; i++)); do\n\
    \        local min=${a[0]}\n        local min_ind=0\n        for ((j=1; j<${#a[@]};\
    \ j++)); do\n            if [ ${a[j]} -lt $min ]; then\n                min=${a[j]}\n\
    \                min_ind=$j\n            fi\n        done\n        if [ $((i%2))\
    \ -eq 0 ]; then\n            res+=\"\\\"$min\\\" \"\n        else\n          \
    \  res=\"\\\"$min\\\" $res\"\n        fi\n        unset a[$min_ind]\n    done\n\
    \    echo $res\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpehg0g4gl.sh: line 24: [: 2: unary operator expected

    /tmp/tmpehg0g4gl.sh: line 24: [: 3: unary operator expected

    /tmp/tmpehg0g4gl.sh: line 24: [: 2: unary operator expected

    /tmp/tmpehg0g4gl.sh: line 24: [: 3: unary operator expected

    /tmp/tmpehg0g4gl.sh: line 24: [: 2: unary operator expected

    /tmp/tmpehg0g4gl.sh: line 24: [: 3: unary operator expected

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=(\"$@\")\n    local n=${#list[@]}\n    local tmp=()\n    local result=()\n\
    \    local i=0\n    local step=0\n    # Can't sort empty array, this is for preventing\
    \ infinite loop in the if-statement below\n    if [[ $n -eq 0 ]]; then\n     \
    \   echo \"$result\"\n        return\n    fi\n    sort -n <(printf \"%s\\n\" \"\
    ${list[@]}\") >tmp\n    while [[ $n -gt 0 ]]; do\n        if [[ $step -eq 0 ]];\
    \ then\n            result+=(\"${tmp[$i]}\")\n            tmp=(\"${tmp[@]:0:$i}\"\
    \ \"${tmp[@]:$((i+1))}\")\n            n=$((n-1))\n            step=1\n      \
    \  else\n            local j=$((n-1))\n            result+=(\"${tmp[$j]}\")\n\
    \            tmp=(\"${tmp[@]:0:$j}\" \"${tmp[@]:$((j+1))}\")\n            n=$((n-1))\n\
    \            step=0\n        fi\n    done\n    printf \"[%s]\\n\" \"$(printf '\"\
    %s\", ' \"${result[@]}\")\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=(\"$@\")\n    local list_size=\"${#list[@]}\"\n    local sorted_list=()\n\
    \    local index=0\n    local min=0\n    local max=0\n    local min_index=0\n\
    \    local max_index=0\n    for ((i=0; i<list_size; i++)); do\n        if [[ $((i%2))\
    \ -eq 0 ]]; then\n            for ((j=0; j<list_size; j++)); do\n            \
    \    if [[ ${list[j]} < ${list[min_index]} ]]; then\n                    min_index=$j\n\
    \                fi\n            done\n            min=${list[min_index]}\n  \
    \          list[min_index]=$((min+1))\n            sorted_list[index]=$min\n \
    \           index=$((index+1))\n        else\n            for ((j=0; j<list_size;\
    \ j++)); do\n                if [[ ${list[j]} > ${list[max_index]} ]]; then\n\
    \                    max_index=$j\n                fi\n            done\n    \
    \        max=${list[max_index]}\n            list[max_index]=$((max-1))\n    \
    \        sorted_list[index]=$max\n            index=$((index+1))\n        fi\n\
    \    done\n    for ((i=0; i<list_size; i++)); do\n        if [[ $i -eq 0 ]]; then\n\
    \            printf \"[\\\"%s\\\"\" \"${sorted_list[i]}\"\n        else\n    \
    \        printf \", \\\"%s\\\"\" \"${sorted_list[i]}\"\n        fi\n    done\n\
    \    printf \"]\\n\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq4m3ilqa.sh: line 31: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    input=$1\n\
    \    l=\n    while [ \"$input\" != \"\" ]; do\n        min=`echo \"$input\" |\
    \ cut -d' ' -f1`\n        max=`echo \"$input\" | cut -d' ' -f1`\n        for i\
    \ in $input; do\n            if [ $i -lt $min ]; then\n                min=$i\n\
    \            fi\n            if [ $i -gt $max ]; then\n                max=$i\n\
    \            fi\n        done\n        input=`echo \"$input\" | sed \"s/$min//g\"\
    \ | sed \"s/$max//g\"`\n        l=\"$l $min $max\"\n    done\n    echo $l\n}\n\
    \ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmiy50tpz.sh: line 21: [: 2: unary operator expected

    /tmp/tmpmiy50tpz.sh: line 24: [: 2: unary operator expected

    /tmp/tmpmiy50tpz.sh: line 21: [: 3: unary operator expected

    /tmp/tmpmiy50tpz.sh: line 24: [: 3: unary operator expected

    sed: -e expression #1, char 0: no previous regular expression

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ $# -eq 0 ]; then\n    echo []\n    return\n  fi\n  numbers=$(echo $@ | tr\
    \ ' ' '\\n' | sort -n)\n  result=$(echo $numbers | sed 's/\\([0-9]*\\)/\"\\1\"\
    /g')\n  echo [$result]\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    local sorted=$(echo \"$list\" | xargs -n1 | sort -n)\n    local\
    \ min=$(echo \"$sorted\" | head -n1)\n    local max=$(echo \"$sorted\" | tail\
    \ -n1)\n    local odd_numbers=()\n    local even_numbers=()\n    local odd_index=0\n\
    \    local even_index=0\n    local result=()\n    local counter=0\n    while [[\
    \ ${#sorted} -gt 0 ]]; do\n        if [[ $counter -eq 0 ]]; then\n           \
    \ odd_numbers[$odd_index]=$min\n            sorted=$(echo \"$sorted\" | sed \"\
    s/$min//\")\n            let odd_index+=1\n        else\n            even_numbers[$even_index]=$max\n\
    \            sorted=$(echo \"$sorted\" | sed \"s/$max//\")\n            let even_index+=1\n\
    \        fi\n        let counter+=1\n        if [[ $counter -gt 1 ]]; then\n \
    \           let counter=0\n        fi\n        min=$(echo \"$sorted\" | head -n1)\n\
    \        max=$(echo \"$sorted\" | tail -n1)\n    done\n    for ((i=0; i<${#odd_numbers[@]};\
    \ i++)); do\n        result+=(\"\\\"${odd_numbers[$i]}\\\"\")\n        if [[ $i\
    \ -eq $(( ${#even_numbers[@]} - 1 )) ]]; then\n            result+=(\"\\\"${even_numbers[$i]}\\\
    \"\")\n        elif [[ $i -lt $(( ${#even_numbers[@]} - 1 )) ]]; then\n      \
    \      result+=(\"\\\"${even_numbers[$i]}\\\"\")\n        fi\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sed: -e expression #1, char 0: no previous regular expression

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ \"$#\" -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  local list\n  local\
    \ str=\"[\"\n  list=($@)\n  # sort in decending order\n  list=($(printf \"%s\\\
    n\" \"${list[@]}\" | sort -g -r))\n  while [ \"${#list[@]}\" -gt 0 ]; do\n   \
    \ str=\"$str\\\"${list[0]}\\\"\"\n    list=(${list[@]:1})\n    if [ \"${#list[@]}\"\
    \ -gt 0 ]; then\n      str=\"$str, \"\n    fi\n  done\n  str=\"$str]\"\n  echo\
    \ \"$str\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=()\n    local nums=()\n    local temp=()\n    local result=()\n    local\
    \ is_odd=false\n    local first_idx=0\n    local last_idx=0\n    local mid_idx=0\n\
    \    local curr_idx=0\n    local next_idx=0\n    local num=0\n    local i=0\n\
    \    local j=0\n    list=(\"$@\")\n    # Find the count of elements in the list\n\
    \    last_idx=$((${#list[@]} - 1))\n    # Check if the count is odd or even\n\
    \    if (( $last_idx % 2 == 0 )); then\n        mid_idx=$((last_idx / 2))\n  \
    \  else\n        mid_idx=$(((last_idx + 1) / 2))\n        is_odd=true\n    fi\n\
    \    # If odd, process the mid element first\n    if $is_odd; then\n        result+=(\"\
    ${list[$mid_idx]}\")\n    fi\n    # Process the left part of the list\n    i=$first_idx\n\
    \    while (( i <= mid_idx )); do\n        curr_idx=$((first_idx + i))\n     \
    \   next_idx=$((last_idx - i))\n        result+=(\"${list[$curr_idx]}\")\n   \
    \     result+=(\"${list[$next_idx]}\")\n        ((i++))\n    done\n    # Print\
    \ the array\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=($(echo \"$1\" | tr ' ' '\\n' | sort -g))\n    local count=${#list[@]}\n\
    \    local mid=$((count / 2))\n    local result=()\n    for ((i=0; i<mid; i++));\
    \ do\n        result[$i]=${list[$i]}\n        result[$((i + mid))]=${list[$((count\
    \ - i - 1))]}\n    done\n    if ((count % 2)); then\n        result[$mid]=${list[$mid]}\n\
    \    fi\n    printf \"%s\\n\" \"${result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  list=(\
    \ $1 )\n  for ((i=1;i<=${#list[@]};i++)); do\n    num=$(($i % 2))\n    if [ $num\
    \ -eq 0 ]; then\n      echo -n \"\\\"${list[$((${#list[@]} - $i))]}\\\" \"\n \
    \   else\n      echo -n \"\\\"${list[$i - 1]}\\\" \"\n    fi\n  done\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # a\
    \ function to return an array's length\n  array_length() {\n    # $# returns the\
    \ number of arguments\n    echo \"$#\"\n  }\n  # declaring the array, setting\
    \ element 0 to the first argument\n  # it is important to set element 0, otherwise\
    \ shellcheck will complain\n  list=( \"$1\" )\n  # get the length of the list\n\
    \  length=$(array_length \"${list[@]}\")\n  # declaring the index variable, because\
    \ shellcheck is complaining\n  # again about it being referenced before being\
    \ assigned\n  index=0\n  # for index in the range of the list length\n  for ((index=0;\
    \ index<length; index++)); do\n    # if the index is odd\n    if ((index%2));\
    \ then\n      # set list[index] to the element at the maximum value, then unset\
    \ the maximum\n      list[index]=$(max \"${list[@]}\")\n      unset \"$(max \"\
    ${list[@]}\")\"\n    # if the index is even\n    else\n      # set list[index]\
    \ to the element at the minimum value, then unset the minimum\n      list[index]=$(min\
    \ \"${list[@]}\")\n      unset \"$(min \"${list[@]}\")\"\n    fi\n  done\n  #\
    \ return the list\n  echo \"${list[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyp5e8sad.sh: line 38: min: command not found

    /tmp/tmpyp5e8sad.sh: line 39: min: command not found

    /tmp/tmpyp5e8sad.sh: line 39: unset: `'': not a valid identifier

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n  declare -a num_array=($1)\n\
    \  declare -a strange_array=()\n  while (( ${#num_array[@]} > 0 )); do\n    #\
    \ Find minimum\n    min=$(echo \"${num_array[*]}\" | tr ' ' '\\n' | sort -n |\
    \ head -n 1)\n    min_idx=$(echo \"${num_array[*]}\" | tr ' ' '\\n' | grep -n\
    \ \"^$min$\" | cut -d ':' -f 1)\n    # Remove minimum from array\n    num_array=(${num_array[@]:0:$min_idx-1}\
    \ ${num_array[@]:$min_idx})\n    # Append minimum to strange array\n    strange_array+=($min)\n\
    \    # Exit if num_array is empty\n    if (( ${#num_array[@]} == 0 )); then\n\
    \      break\n    fi\n    # Find maximum\n    max=$(echo \"${num_array[*]}\" |\
    \ tr ' ' '\\n' | sort -n | tail -n 1)\n    max_idx=$(echo \"${num_array[*]}\"\
    \ | tr ' ' '\\n' | grep -n \"^$max$\" | cut -d ':' -f 1)\n    # Remove maximum\
    \ from array\n    num_array=(${num_array[@]:0:$max_idx-1} ${num_array[@]:$max_idx})\n\
    \    # Append maximum to strange array\n    strange_array+=($max)\n  done\n  printf\
    \ \"['\"%s\"'\" \"${strange_array[@]}\"\n  echo \"]\"\n}\n\ncandidate() {\n  \
    \  strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a list=($1)\n  local -a new_list=()\n  local -i i=0 j=0\n  if [ ${#list[@]}\
    \ -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  for ((i=0; i<${#list[@]};\
    \ i++)); do\n    if [ $((i%2)) -eq 0 ]; then\n      # even indices get min\n \
    \     new_list[$i]=$(echo \"${list[@]}\" | tr ' ' '\\n' | sort -g | head -n 1)\n\
    \      list=(${list[@]/${new_list[$i]}/})\n    else\n      # odd indices get max\n\
    \      new_list[$i]=$(echo \"${list[@]}\" | tr ' ' '\\n' | sort -g | tail -n 1)\n\
    \      list=(${list[@]/${new_list[$i]}/})\n    fi\n  done\n  echo \"[$(for ((j=0;\
    \ j<${#new_list[@]}; j++)); do\n          echo -n '\"'${new_list[$j]}'\"'\n  \
    \        if [ $j -lt $((i-1)) ]; then\n            echo -n ', '\n          fi\n\
    \        done)]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Arguments are not empty\n    [ -z \"$1\" ] && return 0\n    local list=\"$1\"\
    \n    local res=\"[]\"\n    while [ \"$list\" != \"\" ]; do\n        local min=\"\
    $(echo \"$list\" | cut -d \" \" -f 1)\"\n        local max=\"$min\"\n        for\
    \ el in $list; do\n            [ \"$el\" -lt \"$min\" ] && min=\"$el\"\n     \
    \       [ \"$el\" -gt \"$max\" ] && max=\"$el\"\n        done\n        if [ \"\
    $res\" == \"[]\" ]; then\n            res=\"[\\\"$min\\\"\"\n        else\n  \
    \          res=\"$res, \\\"$min\\\"\"\n        fi\n        if [ \"$min\" != \"\
    $max\" ]; then\n            res=\"$res, \\\"$max\\\"\"\n        fi\n        list=\"\
    $(echo \"$list\" | tr \" \" \"\\n\" | grep -v \"$min\" | grep -v \"$max\" | tr\
    \ \"\\n\" \" \")\"\n    done\n    echo \"$res]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ sorted=$(sort -n <<< \"$1\")\n  local ret\n  local front=true\n  # TODO: Figure\
    \ out how to use $IFS here.\n  while read -r line; do\n    if $front; then\n \
    \     ret=\"$ret $(head -n 1 <<< \"$sorted\")\"\n      sorted=$(tail -n +2 <<<\
    \ \"$sorted\")\n    else\n      ret=\"$ret $(tail -n 1 <<< \"$sorted\")\"\n  \
    \    sorted=$(head -n -1 <<< \"$sorted\")\n    fi\n    front=!$front\n  done <<<\
    \ \"$1\"\n  # TODO: Figure out how to not include the space in front\n  echo \"\
    [$(tr ' ' ',' <<< \"$ret\")]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -r list=\"$1\"\n  local current_min current_max\n\n  while [ -n \"$list\" ];\
    \ do\n    # Obtain minimum and maximum values\n    current_min=$(echo \"$list\"\
    \ | cut -d \" \" -f 1)\n    current_max=$(echo \"$list\" | cut -d \" \" -f 1)\n\
    \    for num in $list; do\n      if [ \"$num\" -lt \"$current_min\" ]; then\n\
    \        current_min=\"$num\"\n      elif [ \"$num\" -gt \"$current_max\" ]; then\n\
    \        current_max=\"$num\"\n      fi\n    done\n\n    # Add minimum value to\
    \ output\n    echo -n \\\"$current_min\\\"\n    # Remove minimum value from list\n\
    \    list=$(echo \"$list\" | sed \"s/^$current_min //g\")\n\n    # Add maximum\
    \ value to output if there are remaining values\n    if [ -n \"$list\" ]; then\n\
    \      echo -n \" \\\"$current_max\\\"\"\n      # Remove maximum value from list\n\
    \      list=$(echo \"$list\" | sed \"s/^$current_max //g\")\n    fi\n  done\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt4plb6es.sh: line 33: list: readonly variable

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=($1)\n    if [[ ${#list[@]} -eq 0 ]]; then\n        echo \"[]\"\n     \
    \   return\n    fi\n    local index=0\n    local output=\"\"\n    while [[ $index\
    \ -lt ${#list[@]} ]]; do\n        max=$(echo \"${list[@]}\" | tr ' ' '\\n' | sort\
    \ -nr | tail -n +$index | head -n 1)\n        min=$(echo \"${list[@]}\" | tr '\
    \ ' '\\n' | sort -n | tail -n +$index | head -n 1)\n        index=$((index + 1))\n\
    \        output+=\"\\\"$max\\\" \"\n        output+=\"\\\"$min\\\" \"\n    done\n\
    \    echo \"[${output::-1}]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ $# -eq 0 ]; then\n    echo \"[]\"\n    return 0\n  fi\n  sorted_list=()\n\
    \  min=$1\n  max=$1\n  for i in $*; do\n    if [ $i -lt $min ]; then\n      min=$i\n\
    \    fi\n    if [ $i -gt $max ]; then\n      max=$i\n    fi\n  done\n  sorted_list+=($min)\n\
    \  sorted_list+=($max)\n  min=0\n  max=0\n  while [ ${#sorted_list[@]} -lt $#\
    \ ]; do\n    for i in $*; do\n      if [ $i -gt $max ] && [[ ! \" ${sorted_list[@]}\
    \ \" =~ \" ${i} \" ]]; then\n        max=$i\n      fi\n      if [ $i -lt $min\
    \ ] && [[ ! \" ${sorted_list[@]} \" =~ \" ${i} \" ]]; then\n        min=$i\n \
    \     fi\n    done\n    sorted_list+=($min)\n    sorted_list+=($max)\n    min=0\n\
    \    max=0\n  done\n  str=$(printf \"\\\"%s\\\" \" \"${sorted_list[@]}\")\n  echo\
    \ \"[${str% }]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk60auwi2.sh: line 23: [: too many arguments

    /tmp/tmpk60auwi2.sh: line 26: [: too many arguments

    /tmp/tmpk60auwi2.sh: line 23: [: too many arguments

    /tmp/tmpk60auwi2.sh: line 26: [: too many arguments

    /tmp/tmpk60auwi2.sh: line 23: [: too many arguments

    /tmp/tmpk60auwi2.sh: line 26: [: too many arguments

    /tmp/tmpk60auwi2.sh: line 23: [: too many arguments

    /tmp/tmpk60auwi2.sh: line 26: [: too many arguments

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 0
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    integers=$(echo\
    \ $1 | tr \" \" \"\\n\")\n    list_length=$(echo \"$integers\" | wc -l)\n    list=()\n\
    \    while [ $list_length -gt 0 ]; do\n        list+=($(echo \"$integers\" | sort\
    \ -n | head -n 1))\n        integers=$(echo \"$integers\" | sort -n | tail -n\
    \ $((list_length - 1)))\n        list_length=$((list_length - 1))\n        list+=($(echo\
    \ \"$integers\" | sort -nr | head -n 1))\n        integers=$(echo \"$integers\"\
    \ | sort -nr | tail -n $((list_length - 1)))\n        list_length=$((list_length\
    \ - 1))\n    done\n    echo \"${list[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\t# TODO:\
    \ Remove the next line and implement this function.\n\techo \"['Not implemented\
    \ yet']\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Write your code here\n    echo \"$1\" | tr \" \" \"\\n\" | sort -n -r | awk\
    \ '\n            BEGIN {\n                state = 1;\n            }\n        \
    \    {\n                if (state == 1) {\n                    print \"\\\"\"\
    $1\"\\\"\";\n                    state = 0;\n                } else {\n      \
    \              print \"\\\"\"$NF\"\\\"\";\n                    state = 1;\n  \
    \              }\n            }\n            END {\n                if (NR % 2\
    \ == 0) {\n                    print \"\\\"\"$NF\"\\\"\";\n                }\n\
    \            }\n    ' | tr \"\\n\" \" \" | sed -E \"s/^\\[(.*)\\]$/[\\1]/\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=( $1 )\n    local output=[]\n    local i=0\n    for (( i=0; i<${#list[@]};\
    \ i+=2 )); do\n        local min=$(echo \"${list[@]}\" | tr ' ' '\\n' | sort -n\
    \ | head -n 1)\n        local max=$(echo \"${list[@]}\" | tr ' ' '\\n' | sort\
    \ -n | tail -n 1)\n        output+=( \"\\\"$min\\\"\" )\n        if [[ $max ==\
    \ $min ]]; then\n            list=( \"${list[@]/$min}\" )\n        else\n    \
    \        list=( \"${list[@]/$min}\" \"${list[@]/$max}\" )\n        fi\n    done\n\
    \    echo \"${output[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=10 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660025059
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ template\n    local l=()\n    local low=9999999999\n    local res=()\n    local\
    \ high=-9999999999\n    local highi=0\n    local lowi=0\n    local temp=0\n  \
    \  while [ $# -gt 0 ]; do\n        l+=($1)\n        shift\n    done\n    if [\
    \ ${#l[@]} -eq 0 ]; then\n        echo []\n        return\n    fi\n    while [\
    \ ${#l[@]} -gt 0 ]; do\n        for (( i=0; i<${#l[@]}; i++ )); do\n         \
    \   temp=${l[$i]}\n            if [ $temp -lt $low ]; then\n                low=$temp\n\
    \                lowi=$i\n            fi\n            if [ $temp -gt $high ];\
    \ then\n                high=$temp\n                highi=$i\n            fi\n\
    \        done\n        res+=($low)\n        l[$lowi]=9999999999\n        low=9999999999\n\
    \        if [ ${#l[@]} -eq 0 ]; then\n            break\n        fi\n        res+=($high)\n\
    \        l[$highi]=-9999999999\n        high=-9999999999\n    done\n    printf\
    \ '[\"%s\"]\\n' \"${res[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=30 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=13 encoding='utf-8'>
  timestamp: 1660025059
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n    fi\n    local\
    \ arr\n    arr=($1)\n    len=${#arr[@]}\n    # sort the array\n    __sort_in_place\
    \ arr[@]\n    # get the first element\n    local first=${arr[0]}\n    # find out\
    \ if the first and last elements are the same\n    local others=(\"${arr[@]:1:$(($len-2))}\"\
    )\n    local last=${arr[$(($len-1))]}\n    if [ \"$first\" = \"$last\" ]; then\n\
    \        # we have one continuous block\n        echo \"[$(__join_by , \"${arr[@]}\"\
    )]\"\n        return\n    fi\n    local output=($first)\n    len=${#others[@]}\n\
    \    local iter=1\n    # this iterates over every second element in the list\n\
    \    # two iterations per each length\n    while [ $iter -lt $len ]; do\n    \
    \    local next=\"${others[$(($len-1-$iter))]}\"\n        output+=(\"$next\")\n\
    \        iter=$(($iter+1))\n    done\n    # the last element is already in the\
    \ right place\n    echo \"[$(__join_by , \"${output[@]}\")]\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpce5uudtk.sh: line 23: __sort_in_place: command not found

    /tmp/tmpce5uudtk.sh: line 45: __join_by: command not found

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ $# -eq 0 ]; then\n        echo '[]'\n        return 0\n    fi\n    list=\"\
    [$(sort -g <<< \"$*\" | sed 's/[^ ]*\\([^ ]* \\)\\{2\\}/&\" &\", /g;s/\\(^\\|\\\
    s\\)\\([^ ]*\\)\\( \\|$\\)/&\"\\2\"\\3/g')]\"\n    min=$(sort -g <<< \"$*\" |\
    \ head -n 1)\n    max=$(sort -g <<< \"$*\" | tail -n 1)\n    list=$(sed \"s/\\\
    \"$min\\\"/\\\"$max\\\"/;s/\\\"$max\\\"/\\\"$min\\\"/\" <<< \"$list\")\n    echo\
    \ \"$list\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ $# -eq 0 ]; then\n    echo []\n    return\n  fi\n  list=(\"$@\")\n  reverse=0\n\
    \  result=()\n  for ((i=0; i<${#list[@]}; i++)); do\n    if (($reverse == 0));\
    \ then\n      min=0\n      for ((j=1; j<${#list[@]}; j++)); do\n        if ((${list[$j]}\
    \ < ${list[$min]})); then\n          min=$j\n        fi\n      done\n    else\n\
    \      max=0\n      for ((j=1; j<${#list[@]}; j++)); do\n        if ((${list[$j]}\
    \ > ${list[$max]})); then\n          max=$j\n        fi\n      done\n    fi\n\
    \    result+=(${list[$min]})\n    unset list[$min]\n    list=(\"${list[@]}\")\n\
    \    reverse=$((($reverse + 1) % 2))\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 0
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    l=()\n\
    \    for n in $1; do\n        l+=($n)\n    done\n    s=()\n    while [ ${#l[@]}\
    \ -gt 0 ]; do\n        s+=($(echo \"${l[@]}\" | tr ' ' '\\n' | sort -n | head\
    \ -n 1))\n        l=($(echo \"${l[@]}\" | tr ' ' '\\n' | sort -n | sed 1d))\n\
    \        s+=($(echo \"${l[@]}\" | tr ' ' '\\n' | sort -n | tail -n 1))\n     \
    \   l=($(echo \"${l[@]}\" | tr ' ' '\\n' | sort -n | sed '$d'))\n    done\n  \
    \  echo ${s[@]}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \  input=$1\n  local  result=''\n  local  array=()\n  local  length=0\n  local\
    \  min=0\n  local  max=0\n  local  min_index=0\n  local  max_index=0\n  local\
    \  temp=0\n  local  i=0\n  local  j=0\n  IFS=' ' read -ra array <<< \"$input\"\
    \n  length=${#array[@]}\n  min=${array[0]}\n  max=${array[0]}\n  for (( i=0; i<$length;\
    \ i++ )); do\n    for (( j=i; j<$length; j++ )); do\n      if [ ${array[$j]} -lt\
    \ $min ]; then\n        min=${array[$j]}\n        min_index=$j\n      fi\n   \
    \   if [ ${array[$j]} -gt $max ]; then\n        max=${array[$j]}\n        max_index=$j\n\
    \      fi\n    done\n    temp=${array[$i]}\n    array[$i]=$min\n    array[$min_index]=$temp\n\
    \    if [ $i -eq $(( $length - 1 )) ]; then\n      result+='\"'${array[$i]}'\"\
    '\n    else\n      result+='\"'${array[$i]}'\", '\n    fi\n    min=${array[$((\
    \ $i + 1 ))]}\n    min_index=$(( $i + 1 ))\n  done\n  echo \"[$result]\"\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  list=($1)\n\
    \  out=()\n  while [[ ${#list[@]} -gt 0 ]]; do\n    mx=${list[0]}\n    mn=${list[0]}\n\
    \    for n in ${list[@]}; do\n      [[ $n -gt $mx ]] && mx=$n\n      [[ $n -lt\
    \ $mn ]] && mn=$n\n    done\n    out+=(\"$mx\")\n    list=(${list[@]//$mx/})\n\
    \    out+=(\"$mn\")\n    list=(${list[@]//$mn/})\n  done\n  echo ${out[@]}\n}\n\
    \ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    list=$1\n\
    \    ret=()\n    while [[ -n $list ]]; do\n        ret=(\"${ret[@]}\" \"$(echo\
    \ $list | tr ' ' '\\n' | sort -n | head -n 1)\")\n        list=$(echo $list |\
    \ tr ' ' '\\n' | sort -n | tail -n +2)\n        ret=(\"${ret[@]}\" \"$(echo $list\
    \ | tr ' ' '\\n' | sort -n | tail -n 1)\")\n        list=$(echo $list | tr ' '\
    \ '\\n' | sort -n | head -n -1)\n    done\n    echo \"${ret[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    [\
    \ -z \"$1\" ] && echo \"[]\" && return\n    local list=($(echo \"$1\" | tr ' '\
    \ '\\n' | sort -n))\n    local length=${#list[@]}\n    local a b\n    local result=\"\
    \"\n    while [ \"$length\" -gt 0 ]; do\n        ((length > 1)) && {\n       \
    \     a=${list[0]}\n            b=${list[$((length - 1))]}\n            result+=\"\
    $a \"\n            list[0]=$b\n            ((length -= 2))\n        } || {\n \
    \           a=${list[0]}\n            result+=\"$a\"\n            length=0\n \
    \       }\n    done\n    echo \"[$(echo \"$result\" | tr ' ' ',')]\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$1\n    local smallest largest\n    local -a result=()\n    local -a largest_list=()\n\
    \    local -a smallest_list=()\n    local -a rest_list=()\n    local largest_index\n\
    \    local smallest_index\n    local rest_index\n    smallest=$(sort -g <<< \"\
    $list\" | head -n 1)\n    largest=$(sort -gr <<< \"$list\" | head -n 1)\n    largest_index=$(index\
    \ \"$largest\" \"$list\")\n    smallest_index=$(index \"$smallest\" \"$list\"\
    )\n    rest_index=$(( $smallest_index + 1 ))\n    if [ \"${#list[@]}\" -lt 2 ];\
    \ then\n        return 0\n    fi\n    if [ \"${#list[@]}\" -eq 2 ]; then\n   \
    \     result+=(\"$smallest\")\n        result+=(\"$largest\")\n        echo \"\
    ${result[@]}\"\n        return 0\n    fi\n    if [ \"$largest\" -eq \"$smallest\"\
    \ ]; then\n        result+=(\"$smallest\")\n        result+=(\"$largest\")\n \
    \       if [ \"${#list[@]}\" -eq 4 ]; then\n            echo \"${result[@]}\"\n\
    \            return 0\n        fi\n        rest_index=$(( $rest_index + 1 ))\n\
    \    fi\n    list=($list)\n    largest_list=(${list[@]:$largest_index})\n    smallest_list=(${list[@]:$smallest_index:1})\n\
    \    rest_list=(${list[@]:$rest_index})\n    smallest_list=($(strange_sort_list\
    \ \"${smallest_list[@]}\"))\n    largest_list=($(strange_sort_list \"${largest_list[@]}\"\
    ))\n    rest_list=($(strange_sort_list \"${rest_list[@]}\"))\n    result+=(${smallest_list[@]})\n\
    \    result+=(${largest_list[@]})\n    result+=(${rest_list[@]})\n    echo \"\
    ${result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3xawg9b8.sh: line 26: index: command not found

    /tmp/tmp3xawg9b8.sh: line 27: index: command not found

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\t# sed\
    \ removes leading and trailing whitespace\n\tsed -e 's/^[ \\t]*//' -e 's/[ \\\
    t]*$//' <<< $1 |\n\t# awk sorts in descending order\n\tawk '{for(i=1;i<=NF;i++)\
    \ print $i}' | sort -rn |\n\t# awk alternates between printing minimum and maximum\n\
    \tawk 'BEGIN{i=1}\n\t{\n\t    if( i % 2 )\n\t        array[0]=$1\n\t    else\n\
    \t        array[1]=$1\n\t    i++\n\t}\n\tEND{\n\t    for(i=0;i<length(array);i++)\n\
    \t        print \"\\\"\"array[i]\"\\\"\"\n\t}'\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    python3\
    \ -c '\nimport sys\nimport copy\ndef strange_sort(li):\n    i = 1\n    li2 = copy.copy(li)\n\
    \    li2.sort()\n    while len(li2) > 0:\n        if i % 2 == 1:\n           \
    \ li.insert(i, li2.pop(0))\n        else:\n            li.insert(i, li2.pop())\n\
    \        i += 1\n    return li\nprint(strange_sort(list(map(int, sys.argv[1].split()))))\n\
    ' \"$1\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a array=()\n    local -a forward=()\n    local -a backward=()\n    local -a\
    \ sorted=()\n    local word\n\n    while read word; do\n        array+=( \"$word\"\
    \ )\n    done <<< \"$1\"\n\n    # Sort the array\n    IFS=$'\\n' sorted=( $(sort\
    \ <<<\"${array[*]}\") )\n    unset IFS\n\n    # Build the forward array\n    local\
    \ i=0\n    local j=0\n    local k=0\n    local mid=$(( ${#sorted[@]} / 2 ))\n\
    \    for (( i=0; i<${#sorted[@]}; i++ )); do\n        local cur=${sorted[$i]}\n\
    \        if (( i < mid )); then\n            forward[$j]=\"$cur\"\n          \
    \  (( j++ ))\n        else\n            backward[$k]=\"$cur\"\n            ((\
    \ k++ ))\n        fi\n    done\n\n    # Build the output array\n    local forward_i=0\n\
    \    local backward_i=${#backward[@]}\n    local output=()\n    for (( i=0; i<${#sorted[@]};\
    \ i++ )); do\n        if (( i % 2 == 0 )); then\n            output+=( \"${forward[$forward_i]}\"\
    \ )\n            (( forward_i++ ))\n        else\n            output+=( \"${backward[$backward_i]}\"\
    \ )\n            (( backward_i-- ))\n        fi\n    done\n\n    # Output the\
    \ output array\n    for i in \"${output[@]}\"; do\n        echo -n \"\\\"$i\\\"\
    \ \"\n    done\n    echo\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Write your code here\n    local args=$@\n    local res=\"\"\n    local nums=${args[@]}\n\
    \    local numsArr=()\n    local len=0\n    for (( i=0; i<${#nums}; i++ )); do\n\
    \        len=${#numsArr[@]}\n        if [[ \"${nums:$i:1}\" == \" \" ]]; then\n\
    \            numsArr[$len]=${nums:$i-1:1}\n        fi\n    done\n    len=${#numsArr[@]}\n\
    \    numsArr[$len]=${nums:$len:1}\n    for (( i=0; i<${#numsArr[@]}; i++ )); do\n\
    \        local curIndex=$(( $i%2 ))\n        local max=${numsArr[0]}\n       \
    \ local index=0\n        for (( j=0; j<${#numsArr[@]}; j++ )); do\n          \
    \  if [[ $curIndex -eq 0 ]]; then\n                if [[ ${numsArr[$j]} -lt $max\
    \ ]]; then\n                    max=${numsArr[$j]}\n                    index=$j\n\
    \                fi\n            else\n                if [[ ${numsArr[$j]} -gt\
    \ $max ]]; then\n                    max=${numsArr[$j]}\n                    index=$j\n\
    \                fi\n            fi\n        done\n        res=\"$res \\\"$max\\\
    \"\"\n        unset numsArr[$index]\n        numsArr=(\"${numsArr[@]}\")\n   \
    \ done\n    echo -e \"$res\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    list=$(echo\
    \ $1 | tr ' ' '\\n' | sort -n)\n    len=$(echo $list | wc -w)\n    oddlen=$((len\
    \ % 2))\n    firsthalf=$(echo $list | tr ' ' '\\n' | head -n $((len / 2)))\n \
    \   secondhalf=$(echo $list | tr ' ' '\\n' | tail -n $((len / 2)))\n    res=\"\
    \"\n    if [ \"$oddlen\" -eq 1 ]; then\n        res=\"$res $(echo $list | cut\
    \ -d' ' -f1)\"\n        list=$(echo $list | cut -d' ' -f2-)\n    fi\n    while\
    \ [ \"$len\" -gt 0 ]; do\n        len=$((len - 2))\n        res=\"$res $(echo\
    \ $firsthalf | cut -d' ' -f1)\"\n        firsthalf=$(echo $firsthalf | cut -d'\
    \ ' -f2-)\n        res=\"$res $(echo $secondhalf | cut -d' ' -f1)\"\n        secondhalf=$(echo\
    \ $secondhalf | cut -d' ' -f2-)\n    done\n    echo $res\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ in=\"$1\"\n  #\n  # YOUR CODE HERE\n  #\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Your\
    \ solution here\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdem_401v.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpdem_401v.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    echo\
    \ \"Not yet implemented\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Fill\
    \ me in!\n  printf \"[]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=(\"$@\")\n  local count=${#list[@]}\n  local half=$((count / 2))\n  local\
    \ min\n  local max\n  local direction=1\n\n  if [[ ${count} -eq 0 ]]; then\n \
    \   printf '[]'\n    return\n  fi\n\n  for ((i = 0; i < ${half}; i++)); do\n \
    \   if [[ ${direction} -eq 1 ]]; then\n      printf '\"%s\" ' \"${list[${i}]}\"\
    \n      direction=0\n    else\n      printf '\"%s\" ' \"${list[$((count - 1 -\
    \ i))]}\"\n      direction=1\n    fi\n  done\n\n  if [[ $((count % 2)) -eq 1 ]];\
    \ then\n    printf '\"%s\"' \"${list[${half}]}\"\n  fi\n}\n\ncandidate() {\n \
    \   strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a array\n    array=($1)\n    # Check if length of the array is even or odd\n\
    \    if ((${#array[@]} % 2 == 0)); then\n        # even\n        local i=0\n \
    \       while ((i < ${#array[@]})); do\n            echo -n \"\\\"${array[$i]}\\\
    \" \"\n            ((i++))\n            echo -n \"\\\"${array[$((${#array[@]}\
    \ - 1 - $i))]}\\\" \"\n            ((i++))\n        done\n    else\n        #\
    \ odd\n        local i=0\n        while ((i < ${#array[@]})); do\n           \
    \ echo -n \"\\\"${array[$i]}\\\" \"\n            ((i++))\n            echo -n\
    \ \"\\\"${array[$((${#array[@]} - 1 - $i))]}\\\" \"\n            ((i++))\n   \
    \     done\n        echo -n \"\\\"${array[${#array[@]}/2]}\\\"\"\n    fi\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ input_list=()\n    local output_list=()\n    local i=0\n    local input_list_length=0\n\
    \    local min_value=0\n    local max_value=0\n    local min_index=0\n    local\
    \ max_index=0\n    local found_max=0\n    # Convert input string to array\n  \
    \  IFS=\" \" read -a input_list <<< \"$1\"\n    input_list_length=${#input_list[@]}\n\
    \    if [ $input_list_length -lt 1 ]; then\n        echo \"[]\"\n        return\n\
    \    fi\n    min_value=${input_list[0]}\n    max_value=${input_list[0]}\n    #\
    \ Find min and max value in list\n    for i in ${input_list[@]}; do\n        if\
    \ [ $i -lt $min_value ]; then\n            min_value=$i\n        fi\n        if\
    \ [ $i -gt $max_value ]; then\n            max_value=$i\n        fi\n    done\n\
    \    # Loop\n    while [ $input_list_length -gt 0 ]; do\n        # Find min value\
    \ in list\n        for i in ${!input_list[@]}; do\n            if [ \"${input_list[$i]}\"\
    \ -eq \"$min_value\" ]; then\n                min_index=$i\n                break\n\
    \            fi\n        done\n        # Add min value to output list\n      \
    \  output_list[${#output_list[@]}]=${input_list[$min_index]}\n        # Remove\
    \ min value from input list\n        unset input_list[$min_index]\n        input_list=(${input_list[@]})\n\
    \        input_list_length=${#input_list[@]}\n        if [ $input_list_length\
    \ -lt 1 ]; then\n            echo ${output_list[@]} | sed -e 's/\\(.*\\)/\\[\"\
    \\1\"\\]/'\n            return\n        fi\n        # Find max value in list\n\
    \        found_max=0\n        for i in ${!input_list[@]}; do\n            if [\
    \ \"${input_list[$i]}\" -eq \"$max_value\" ]; then\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpqs_fd93r.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpqs_fd93r.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=()\n    for i in $1; do\n        list+=($i)\n    done\n    list_len=${#list[@]}\n\
    \    index=0\n    result=()\n    while ((index < list_len)); do\n        if (($index\
    \ % 2 == 0)); then\n            result+=($(echo ${list[@]} | tr ' ' '\\n' | sort\
    \ -n | head -n 1))\n            list=(\"${list[@]/${result[$index]}/}\")\n   \
    \     else\n            result+=($(echo ${list[@]} | tr ' ' '\\n' | sort -nr |\
    \ head -n 1))\n            list=(\"${list[@]/${result[$index]}/}\")\n        fi\n\
    \        ((index++))\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a array=()\n  local -a sort_array=()\n  for i in $1; do\n    array+=($i)\n\
    \  done\n  local int_count=${#array[@]}\n  if [ \"$int_count\" -le 0 ]; then\n\
    \    echo '[]'\n    return\n  fi\n  local str_count=$((int_count/2))\n  local\
    \ odd=$((int_count%2))\n  local min=${array[0]}\n  local min_index=0\n  local\
    \ max=${array[0]}\n  local max_index=0\n  for ((i=1; i<int_count; i++)); do\n\
    \    if [ \"${array[$i]}\" -lt \"$min\" ]; then\n      min=${array[$i]}\n    \
    \  min_index=$i\n    fi\n    if [ \"${array[$i]}\" -gt \"$max\" ]; then\n    \
    \  max=${array[$i]}\n      max_index=$i\n    fi\n  done\n  unset array[$min_index]\n\
    \  unset array[$max_index]\n  for ((i=0; i<str_count; i++)); do\n    sort_array+=(\"\
    $min\")\n    sort_array+=(\"$max\")\n    if [ \"$odd\" -eq 1 ]; then\n      sort_array+=(\"\
    ${array[0]}\")\n    fi\n  done\n  echo \"[$( IFS=','; echo \"${sort_array[*]}\"\
    \ )]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Write\
    \ your code here\n  echo \"\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a list\n    local i=0\n    read -ra list <<< \"$1\"\n    local -a res\n   \
    \ while (( i < ${#list[@]} )); do\n        if (( $i % 2 == 0 )); then\n      \
    \      res+=(\"$(echo \"${list[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\")\n\
    \            list=(\"$(echo \"${list[@]}\" | tr ' ' '\\n' | grep -v \"^${res[-1]}$\"\
    \ | tr '\\n' ' ')\")\n        else\n            res+=(\"$(echo \"${list[@]}\"\
    \ | tr ' ' '\\n' | sort -nr | head -n 1)\")\n            list=(\"$(echo \"${list[@]}\"\
    \ | tr ' ' '\\n' | grep -v \"^${res[-1]}$\" | tr '\\n' ' ')\")\n        fi\n \
    \       (( i++ ))\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # if\
    \ the list is empty\n  if [[ $1 == \"\" ]]; then\n    echo \"[]\"\n    return\
    \ 0\n  fi\n\n  local sorted_list=()\n  local working_list=()\n  local prev_num=0\n\
    \  # add each element of the list to the working list\n  for num in $1; do\n \
    \   working_list+=($num)\n  done\n\n  # the list is not empty\n  # adding the\
    \ minimum value of the list to the beginning of the new list\n  for num in ${working_list[@]};\
    \ do\n    if (( num < prev_num )); then\n      prev_num=$num\n    fi\n  done\n\
    \  sorted_list+=($prev_num)\n  working_list=(${working_list[@]/$prev_num})\n\n\
    \  # adding the maximum value of the remaining list to the end of the new list\n\
    \  prev_num=0\n  for num in ${working_list[@]}; do\n    if (( num > prev_num ));\
    \ then\n      prev_num=$num\n    fi\n  done\n  sorted_list+=($prev_num)\n  working_list=(${working_list[@]/$prev_num})\n\
    \n  # repeating the process until there are no remaining integers\n  while [ ${#working_list[@]}\
    \ -gt 0 ]; do\n    prev_num=0\n    for num in ${working_list[@]}; do\n      if\
    \ (( num < prev_num )); then\n        prev_num=$num\n      fi\n    done\n    sorted_list=(${sorted_list[@]}\
    \ $prev_num)\n    working_list=(${working_list[@]/$prev_num})\n\n    prev_num=0\n\
    \    for num in ${working_list[@]}; do\n      if (( num > prev_num )); then\n\
    \        prev_num=$num\n      fi\n    done\n    sorted_list=(${sorted_list[@]}\
    \ $prev_num)\n    working_list=(${working_list[@]/$prev_num})\n  done\n\n  # printing\
    \ the sorted list\n  echo \"[\"\n  for num in ${sorted_list[@]}; do\n    echo\
    \ \"\\\"$num\\\",\"\n  done\n\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input=($(echo \"$@\"))\n  local output=()\n  local i=0\n  local ascending_sort=$(echo\
    \ ${input[@]} | tr ' ' '\\n' | sort -n)\n  local descending_sort=$(echo ${input[@]}\
    \ | tr ' ' '\\n' | sort -nr)\n  while [[ $i -lt ${#input[@]} ]]; do\n    [[ $((i\
    \ % 2)) -eq 0 ]] && output+=($(echo ${ascending_sort[@]} | cut -d' ' -f$((i +\
    \ 1))))\n    [[ $((i % 2)) -eq 1 ]] && output+=($(echo ${descending_sort[@]} |\
    \ cut -d' ' -f$((i + 1))))\n    ((i++))\n  done\n  echo ${output[@]}\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ lst=${1:-}\n  local len=${#lst}\n  local i=0\n  local head=0\n  local tail=$((len\
    \ - 1))\n  local str=\"\"\n  while ((i < len)); do\n    str+=\"$(echo \"$lst\"\
    \ | cut -d' ' -f$head)\"\n    ((head++))\n    str+=\"$(echo \"$lst\" | cut -d'\
    \ ' -f$tail)\"\n    ((tail--))\n    ((i += 2))\n  done\n  echo \"$str\"\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'cut: fields are numbered from 1

    Try ''cut --help'' for more information.

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ -a list list_sorted list_reverse nums\n\n\tlist=($1)\n\t[ ${#list[@]} -eq 0\
    \ ] && return\n\n\tlist_sorted=($(printf \"%s\\n\" \"${list[@]}\" | sort -n))\n\
    \tlist_reverse=($(printf \"%s\\n\" \"${list_sorted[@]}\" | tac))\n\n\tfor ((i=0;\
    \ i<${#list[@]}; i++)); do\n\t\t[ $((i%2)) -eq 0 ] && nums+=(${list_sorted[i/2]})\
    \ || nums+=(${list_reverse[i/2]})\n\tdone\n\n\tprintf '\"%s\" ' \"${nums[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    list=$(echo\
    \ $1 | xargs)\n    min=$(echo $list | cut -d' ' -f1)\n    new_list=\"\"\n    while\
    \ [ -n \"$list\" ]; do\n        if [ -z \"$new_list\" ]; then\n            new_list=$(echo\
    \ $list | cut -d' ' -f1)\n        else\n            new_list=$new_list\" \"$(echo\
    \ $list | cut -d' ' -f1)\n        fi\n        echo $list | sed 's/[0-9]*//g'\n\
    \        if [ -z \"$list\" ]; then\n            break\n        fi\n        max=$(echo\
    \ $list | cut -d' ' -f2)\n        echo $list | sed 's/[0-9]* //g'\n        if\
    \ [ -z \"$list\" ]; then\n            break\n        fi\n        min=$(echo $list\
    \ | cut -d' ' -f1)\n        new_list=$new_list\" \"$min\n        list=$(echo $list\
    \ | sed 's/[0-9]* //g')\n    done\n    echo $new_list\n}\n\ncandidate() {\n  \
    \  strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=12 encoding='utf-8'>
  timestamp: 1660025059
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a array\n    IFS=' ' read -r -a array <<< \"$1\"\n    if [ \"${#array[@]}\"\
    \ -eq 0 ]; then\n        echo \"[]\"\n        return\n    fi\n    local -a ret\n\
    \    ret+=(\"$(printf '\"%s\"' \"${array[@]}\" | tr ' ' '\\n' | sort -n | head\
    \ -n 1)\")\n    local -a max_array\n    max_array+=(\"$(printf '\"%s\"' \"${array[@]}\"\
    \ | tr ' ' '\\n' | sort -n | tail -n +2)\")\n    local -a min_array\n    min_array+=(\"\
    $(printf '\"%s\"' \"${array[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\")\n \
    \   for i in \"${!array[@]}\"; do\n        local val=\"${array[$i]}\"\n      \
    \  local min_array_index=\"$(printf '%s\\n' \"${min_array[@]}\" | grep -vxF \"\
    $val\" | wc -l)\"\n        local max_array_index=\"$(printf '%s\\n' \"${max_array[@]}\"\
    \ | grep -vxF \"$val\" | wc -l)\"\n        if [ \"$min_array_index\" -ne \"${#min_array[@]}\"\
    \ ]; then\n            min_array[$min_array_index]=\"$val\"\n        elif [ \"\
    $max_array_index\" -ne \"${#max_array[@]}\" ]; then\n            max_array[$max_array_index]=\"\
    $val\"\n        fi\n    done\n    ret+=(\"$(printf '\"%s\"' \"${max_array[@]}\"\
    \ | tr ' ' '\\n' | sort -rn | head -n 1)\")\n    local -a min_array\n    min_array+=(\"\
    $(printf '\"%s\"' \"${array[@]}\" | tr ' ' '\\n' | sort -n | tail -n +2)\")\n\
    \    local -a max_array\n    max_array+=(\"$(printf '\"%s\"' \"${\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbh07qvaw.sh: line 58: unexpected EOF while looking for matching
    `"''

    /tmp/tmpbh07qvaw.sh: line 62: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025054
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ $# -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  sorted=$(echo \"$1\"\
    \ | tr ' ' '\\n' | sort)\n  res=\"[\"\n  while true; do\n    min=$(echo \"$sorted\"\
    \ | head -n 1)\n    res+=\"\\\"$min\\\"\"\n    sorted=$(echo \"$sorted\" | tail\
    \ -n +2)\n    if [ -z \"$sorted\" ]; then\n      break\n    fi\n    max=$(echo\
    \ \"$sorted\" | tail -n 1)\n    res+=\", \\\"$max\\\"\"\n    sorted=$(echo \"\
    $sorted\" | head -n -1)\n    if [ -z \"$sorted\" ]; then\n      break\n    fi\n\
    \  done\n  res+=\"]\"\n  echo \"$res\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a array=$1\n    # Add your code here\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025054
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ $# -eq 0 ]; then\n    return\n  fi\n  sort_list=$(echo $@ | tr ' ' '\\n' |\
    \ sort -n)\n  list_len=$(echo $sort_list | wc -w)\n  mid=$((list_len / 2))\n \
    \ smaller=$(echo $sort_list | cut -d ' ' -f-$mid)\n  bigger=$(echo $sort_list\
    \ | cut -d ' ' -f-$((list_len - mid))-)\n  if [ $(($list_len % 2)) -eq 0 ]; then\n\
    \    bigger=$(echo $bigger | cut -d ' ' -f-$((list_len - mid - 1)))\n  fi\n  smaller_first=1\n\
    \  while [ $smaller_first -le $list_len ]; do\n    smallest=$(echo $smaller |\
    \ cut -d ' ' -f1)\n    biggest=$(echo $bigger | cut -d ' ' -f1)\n    if [ $smallest\
    \ ]; then\n      printf \"\\\"$smallest\\\" \"\n      smaller=$(echo $smaller\
    \ | cut -d ' ' -f2-)\n    fi\n    if [ $biggest ]; then\n      printf \"\\\"$biggest\\\
    \" \"\n      bigger=$(echo $bigger | cut -d ' ' -f2-)\n    fi\n    small_first=$((small_first\
    \ + 1))\n  done\n  echo\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=41 encoding='utf-8'>
  timestamp: 1660025059
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a input_arr=()\n  local srt_list=\"\"\n  local i\n  input_arr=($1)\n  # If\
    \ input array is empty, just return empty array.\n  if [ ${#input_arr[@]} -eq\
    \ 0 ]; then\n    printf '[]'\n    return\n  fi\n  # Sort array in increasing order\n\
    \  IFS=$'\\n' sorted=($(sort <<<\"${input_arr[*]}\"))\n  unset IFS\n  # Get minimum\
    \ element\n  local min=${sorted[0]}\n  # Remove all instances of min\n  sorted=(${sorted[@]/$min/})\n\
    \  # Add min to output\n  srt_list='[\"'\"$min\"'\",'\n  # Iterate until sorted\
    \ list is empty\n  while [ ${#sorted[@]} -gt 0 ]; do\n    # Get minimum element\n\
    \    min=${sorted[0]}\n    # Remove all instances of min\n    sorted=(${sorted[@]/$min/})\n\
    \    # Add min to output\n    srt_list+='\"'$min'\",'\n    # Get maximum element\n\
    \    local max=${sorted[-1]}\n    # Remove all instances of max\n    sorted=(${sorted[@]/$max/})\n\
    \    # Add max to output\n    srt_list+='\"'$max'\",'\n  done\n  # Remove last\
    \ comma\n  srt_list=${srt_list::-1}\n  # Add square bracket and close array\n\
    \  srt_list+=']'\n  # Return array\n  printf \"$srt_list\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqmwcoe_8.sh: line 42: sorted: bad array subscript

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a array_list=($1)\n  local -a output\n  local -i count=${#array_list[@]}\n\n\
    \  if [ $count -eq 0 ]; then\n    echo '[]'\n    return 0\n  fi\n\n  if [ $count\
    \ -eq 1 ]; then\n    echo \"[\\\"${array_list[0]}\\\"]\"\n    return 0\n  fi\n\
    \n  while [ $count -gt 0 ]; do\n    output+=(\"$(echo \"${array_list[@]}\" | xargs\
    \ -n1 | sort -n | head -n1)\")\n    count=$(($count - 1))\n    output+=(\"$(echo\
    \ \"${array_list[@]}\" | xargs -n1 | sort -n | tail -n1)\")\n    count=$(($count\
    \ - 1))\n  done\n\n  echo \"[\\\"$(echo \"${output[@]}\" | xargs -n1 | sed 's/\
    \ /\", \"/g')\\\"]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    input=$@\n\
    \    min=${input%% *}\n    max=${input##* }\n    input=${input// /}\n    result=${input//[^$min]/}\n\
    \    input=${input//$min/}\n    result=${result//[^$max]/}\n    input=${input//$max/}\n\
    \    IFS=\" \"; for i in $input; do result=${result//[^$i]/}; done\n    IFS=\"\
    \"; echo \"[$(sed -e 's/.*/\"&\"/g' <<< \"$result\")]\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    printf\
    \ \"[\"\n    n=$(printf \"%s\" \"$1\" | wc -w)\n    for (( i=1; i<=n; i++ ));\
    \ do\n        [ $((i%2)) -eq 0 ] && res=$(printf \"%s\" \"$1\" | tr \" \" \"\\\
    n\" | sort -r -n | tail -n 1) || res=$(printf \"%s\" \"$1\" | tr \" \" \"\\n\"\
    \ | sort -n | tail -n 1)\n        printf \"%s%s\" \"$(printf \"%s\" \"$1\" | tr\
    \ \" \" \"\\n\" | grep -v \"$res\")\" \"$res\" | tr \"\\n\" \" \" | sed 's/[[:space:]]*$//'\n\
    \        printf \"\\\"%s\\\"\" \"$res\"\n        [ $i -lt $n ] && printf \", \"\
    \n        1=\"$(printf \"%s\" \"$1\" | tr \" \" \"\\n\" | grep -v \"$res\")\"\n\
    \    done\n    printf \"]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpccurrroz.sh: line 22: $''1=1\n2\n3'': command not found

    /tmp/tmpccurrroz.sh: line 22: $''1=2\n3\n4'': command not found

    /tmp/tmpccurrroz.sh: line 22: $''1=1\n2\n3'': command not found

    /tmp/tmpccurrroz.sh: line 22: $''1=2\n3\n4'': command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    declare\
    \ -a sorted_input\n    IFS=$' ' read -r -a input <<< \"$1\"\n    for (( i=0; i<${#input[@]};\
    \ i++ )); do\n        if [[ $((i%2)) -eq 0 ]]; then\n            sorted_input[$i]=$(printf\
    \ \"%s\\n\" \"${input[@]}\" | sort -n | head -n 1)\n            input=(\"${input[@]/${sorted_input[$i]}/}\"\
    )\n        else\n            sorted_input[$i]=$(printf \"%s\\n\" \"${input[@]}\"\
    \ | sort -nr | head -n 1)\n            input=(\"${input[@]/${sorted_input[$i]}/}\"\
    )\n        fi\n    done\n    echo \"${sorted_input[@]}\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    local min max value\n    local result=()\n    while [[ $list\
    \ ]]; do\n        min=9999999999999\n        max=-9999999999999\n        for value\
    \ in $list; do\n            if [[ $value -gt $max ]]; then\n                max=$value\n\
    \            fi\n            if [[ $value -lt $min ]]; then\n                min=$value\n\
    \            fi\n        done\n        list=$(echo $list | sed -E \"s/$min|$max//g\"\
    )\n        result=(\"${result[@]}\" \"\\\"$min\\\"\" \"\\\"$max\\\"\")\n    done\n\
    \    echo \"[$(IFS=,; echo \"${result[*]}\")]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$1\n    local list_length=0\n    local strange_sorted_list=\"\"\n    local\
    \ start=0\n    local max_index=0\n    local min_index=0\n    local item=\"\"\n\
    \    local min=\"\"\n    local max=\"\"\n    local min_removed=\"\"\n    local\
    \ max_removed=\"\"\n    # First, get the length of the list.\n    # Then, initialize\
    \ max and min to the first item.\n    for item in $list; do\n        if [ $list_length\
    \ -eq 0 ]; then\n            max=$item\n            min=$item\n        fi\n  \
    \      list_length=$((list_length + 1))\n    done\n    # Now we need to build\
    \ a strange sorted list.\n    # We will start with min, then max, then min and\
    \ so on.\n    # Break from loop when list length is 0.\n    while [ $list_length\
    \ -gt 0 ]; do\n        # Find the index of max and min in the list.\n        #\
    \ Only loop over the list starting at start\n        # This is because once we\
    \ find max or min, we can ignore the items\n        # on the left.\n        for\
    \ i in $(seq $start $((list_length - 1))); do\n            # If $item is less\
    \ than min, it is new min.\n            if [ \"$(echo $list | cut -d \" \" -f\
    \ $((i + 1)))\" -lt \"$min\" ]; then\n                min=$(echo $list | cut -d\
    \ \" \" -f $((i + 1)))\n                min_index=$i\n            fi\n       \
    \     # If $item is greater than max, it is new max.\n            if [ \"$(echo\
    \ $list | cut -d \" \" -f $((i + 1)))\" -gt \"$max\" ]; then\n               \
    \ max=$(echo $list | cut -d \" \" -f $((i + 1)))\n                max_index=$i\n\
    \            fi\n        done\n        # Add min and max to strange sorted list.\n\
    \        # Make sure to add quotes.\n        strange_sorted_list=\"$strange_sorted_list\\\
    \"$min\\\" \\\"$max\\\"\"\n        # Now remove min and max from list.\n     \
    \   # Then, update min and max.\n        if [\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpv2hao_gd.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmpv2hao_gd.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list_length\n    local min_value\n    local max_value\n    local result\n  \
    \  local value\n    local list\n\n    if [ $# -eq 0 ]; then\n        echo \"[]\"\
    \n        return\n    fi\n\n    result=\"\"\n    list=\"$@\"\n    list_length=$(echo\
    \ \"$list\" | tr \" \" \"\\n\" | wc -l)\n\n    while [ $list_length -gt 0 ]; do\n\
    \        min_value=$(echo \"$list\" | tr \" \" \"\\n\" | sort -n | head -n 1)\n\
    \        max_value=$(echo \"$list\" | tr \" \" \"\\n\" | sort -n | tail -n 1)\n\
    \n        list=$(echo \"$list\" | tr \" \" \"\\n\" | sed -e \"/^$min_value$/d\"\
    \ -e \"/^$max_value$/d\")\n        list_length=$(echo \"$list\" | tr \" \" \"\\\
    n\" | wc -l)\n\n        if [ $list_length -eq 0 ]; then\n            result=\"\
    $result $min_value\"\n            result=\"$result $max_value\"\n        else\n\
    \            result=\"$result $min_value\"\n            result=\"$result $max_value\"\
    \n            result=\"$result $(strange_sort_list $list)\"\n        fi\n    done\n\
    \n    echo \"$result\" | tr \" \" \"\\n\" | awk '{ printf \"%s\", $0; if (NR ==\
    \ 1) printf \",\"; else if (NR % 2 == 0) printf \",\"; else printf \"\"]\" }'\
    \ | tr -d \"\\n\"\n    echo \"]\"\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=4 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=28 encoding='utf-8'>
  timestamp: 1660025059
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ -z \"$1\" ]; then\n        echo '[]'\n        return\n    fi\n    local -r\
    \ list=\"$1\"\n    declare -a array=()\n    read -ra array <<< \"$list\"\n   \
    \ local -r min=\"$(printf '%s\\n' \"${array[@]}\" | sort -n | head -n 1)\"\n \
    \   local -r max=\"$(printf '%s\\n' \"${array[@]}\" | sort -n | tail -n 1)\"\n\
    \    echo \"[\\\"$min\\\"\"\n    echo \"\\\"$max\\\"\"\n    for ((i=0; i<${#array[@]};\
    \ i++)); do\n        if [ \"${array[$i]}\" != \"$min\" ] && [ \"${array[$i]}\"\
    \ != \"$max\" ]; then\n            echo \"\\\"${array[$i]}\\\"\"\n        fi\n\
    \    done\n    echo ']'\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    python\
    \ -c \"\nfrom sys import argv\ntry:\n    integers = sorted(map(int, argv[1].split()))\n\
    \    if len(integers) == 0:\n        print '[]'\n    elif all(x == integers[0]\
    \ for x in integers):\n        print '[\\\"%s\\\"]' % integers[0]\n    else:\n\
    \        print '[' + ','.join('\\\"%s\\\"' % str(e) for e in integers[::2] + integers[-2::-2])\
    \ + ']'\nexcept ValueError:\n    print 'Invalid input.'\n\" \"$1\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ $# -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  local list=$@\n  local\
    \ min=$(echo \"$list\" | tr ' ' '\\n' | sort -n | head -n 1)\n  local max=$(echo\
    \ \"$list\" | tr ' ' '\\n' | sort -nr | head -n 1)\n  local last_min=$min\n  local\
    \ last_max=$max\n  local result=\"[\\\"$min\\\"\"\n  local last_cmd=\"\"\n  while\
    \ [ \"$list\" != \"\" ]; do\n    if [ \"$last_cmd\" == \"\" ] || [ \"$last_cmd\"\
    \ == \"max\" ]; then\n      min=$(echo \"$list\" | tr ' ' '\\n' | sort -n | head\
    \ -n 1)\n      list=$(echo \"$list\" | tr ' ' '\\n' | sed -e \"/^$min$/d\")\n\
    \      last_cmd=\"min\"\n    else\n      max=$(echo \"$list\" | tr ' ' '\\n' |\
    \ sort -nr | head -n 1)\n      list=$(echo \"$list\" | tr ' ' '\\n' | sed -e \"\
    /^$max$/d\")\n      last_cmd=\"max\"\n    fi\n    if [ \"$last_cmd\" == \"min\"\
    \ ]; then\n      if [ \"$min\" == \"$last_min\" ]; then\n        last_cmd=\"max\"\
    \n        continue\n      fi\n      result=\"$result, \\\"$min\\\"\"\n      last_min=$min\n\
    \    else\n      if [ \"$max\" == \"$last_max\" ]; then\n        last_cmd=\"min\"\
    \n        continue\n      fi\n      result=\"$result, \\\"$max\\\"\"\n      last_max=$max\n\
    \    fi\n  done\n  result=\"$result]\"\n  echo \"$result\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -r in_list=\"$1\"\n  local -r len=$(echo \"$in_list\" | wc -w)\n  if [ \"$len\"\
    \ -lt \"2\" ]; then\n    echo \"$in_list\"\n    return\n  fi\n  local -r min=$(echo\
    \ \"$in_list\" | sort -n | head -n 1)\n  local -r max=$(echo \"$in_list\" | sort\
    \ -n | tail -n 1)\n  local -r mid_sorted_list=$(echo \"$in_list\" | sed \"s/$min//\"\
    \ | sed \"s/$max//\" | sort -n)\n  local -r mid_list=$(echo \"$mid_sorted_list\"\
    \ | sed \"s/^/$max /\" | sed \"s/$/$min/\")\n  # Remove trailing space.\n  local\
    \ -r result=\"$(echo \"$mid_list\" | tr -d '\\n')\"\n  # Remove double spaces.\n\
    \  echo \"$result\" | sed 's/  */ /g'\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Your code here\n\n    return 0\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ LIST=()\n    local even=true\n    while read line; do\n        [ \"$line\" ]\
    \ && LIST+=($line)\n    done <<< \"$1\"\n    local RESULT=()\n    while [ ${#LIST[@]}\
    \ -gt 0 ]; do\n        local cur=$(printf \"%s\\n\" \"${LIST[@]}\" | sort -n |\
    \ (if $even; then head -n 1; else tail -n 1; fi))\n        RESULT+=($cur)\n  \
    \      LIST=(${LIST[@]/$cur/})\n        even=!$even\n    done\n    echo -n '['\n\
    \    for i in \"${RESULT[@]}\"; do\n        echo -n '\"'$i'\", '\n    done\n \
    \   echo -n ']'\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5z3bhb8v.sh: line 22: !true: command not found

    /tmp/tmp5z3bhb8v.sh: line 22: !!true: command not found

    /tmp/tmp5z3bhb8v.sh: line 22: !!!true: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ res\n\tlocal list=$(echo $1 | tr ' ' '\\n' | sort -n)\n\tlocal len=$(echo \"\
    $list\" | wc -l)\n\tlocal i=0\n\twhile [ $i -lt $len ]; do\n\t\tif [ $((i % 2))\
    \ -eq 0 ]; then\n\t\t\tlocal min=$(echo \"$list\" | head -n 1)\n\t\t\tres=\"$res\
    \ $min\"\n\t\t\tlist=$(echo \"$list\" | tail -n $(($len - 1)))\n\t\telse\n\t\t\
    \tlocal max=$(echo \"$list\" | tail -n 1)\n\t\t\tres=\"$res $max\"\n\t\t\tlist=$(echo\
    \ \"$list\" | head -n $(($len - 1)))\n\t\tfi\n\t\ti=$((i + 1))\n\tdone\n\techo\
    \ \"$res\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ implement here\n    nums=($1)\n    count=${#nums[@]}\n    result=()\n    for\
    \ ((i=0; i<count; i+=2)); do\n        result+=(${nums[i]})\n    done\n    for\
    \ ((i=count-1; i>0; i-=2)); do\n        result+=(${nums[i]})\n    done\n    echo\
    \ ${result[@]}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -r arr=\"$1\"\n    local -r arr_length=$(wc -w <<< \"$arr\")\n    if [[ $arr_length\
    \ == 0 ]]; then\n        printf \"%s\" \"[]\"\n        return\n    fi\n    local\
    \ -a result_arr\n    local -i min_val min_index i=0\n    min_val=$(printf \"%s\\\
    n\" \"$arr\" | sort -n | head -n 1)\n    result_arr+=(\"$min_val\")\n    min_index=$(printf\
    \ \"%s\\n\" \"$arr\" | grep -n -w \"$min_val\" | cut -d : -f 1)\n    arr=$(printf\
    \ \"%s\\n\" \"$arr\" | cut -d \" \" -f -$min_index | cut -d \" \" -f 2-)\n   \
    \ while [[ $i -lt $arr_length-1 ]]; do\n        local -i max_val max_index\n \
    \       max_val=$(printf \"%s\\n\" \"$arr\" | sort -n | tail -n 1)\n        result_arr+=(\"\
    $max_val\")\n        max_index=$(printf \"%s\\n\" \"$arr\" | grep -n -w \"$max_val\"\
    \ | cut -d : -f 1)\n        arr=$(printf \"%s\\n\" \"$arr\" | cut -d \" \" -f\
    \ -$max_index | cut -d \" \" -f 2-)\n        local -i min_val min_index\n    \
    \    min_val=$(printf \"%s\\n\" \"$arr\" | sort -n | head -n 1)\n        result_arr+=(\"\
    $min_val\")\n        min_index=$(printf \"%s\\n\" \"$arr\" | grep -n -w \"$min_val\"\
    \ | cut -d : -f 1)\n        arr=$(printf \"%s\\n\" \"$arr\" | cut -d \" \" -f\
    \ -$min_index | cut -d \" \" -f 2-)\n        i+=2\n    done\n    printf \"[\\\"\
    %s\\\"]\" \"${result_arr[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpye0zr3o8.sh: line 23: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    [\
    \ $# -eq 0 ] && return\n    local input=( $@ )\n    local output=()\n    output+=(\
    \ \"${input[0]}\" )\n    input=( \"${input[@]:1}\" )\n    while [ ${#input[@]}\
    \ -gt 0 ]; do\n        local minimum=$(sort_list \"${input[@]}\" | head -n 1)\n\
    \        local maximum=$(sort_list \"${input[@]}\" | tail -n 1)\n        output+=(\
    \ \"${maximum}\" )\n        input=( \"${input[@]/$maximum}\" )\n        output+=(\
    \ \"${minimum}\" )\n        input=( \"${input[@]/$minimum}\" )\n    done\n   \
    \ echo \"${output[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=65 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=58 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ len=$(echo $1 | wc -w)\n  local i=0\n  local x=0\n  local arr=()\n  for x in\
    \ $1; do\n    arr[$i]=$x\n    ((i++))\n  done\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    if [[ $((i%2)) -eq 0 ]]; then\n      echo ${arr[$((i/2))]}\n    else\n\
    \      echo ${arr[$((len-i/2))]}\n    fi\n  done\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  declare\
    \ -a input=($1)\n  declare -a output=()\n  local len=\"${#input[@]}\"\n  for ((i=0;\
    \ i<len; i++)); do\n    if [[ i%2 -eq 0 ]]; then\n      output[$i]=$(echo ${input[@]}\
    \ | tr ' ' '\\n' | sort -n | head -n 1)\n      input=($(echo ${input[@]} | tr\
    \ ' ' '\\n' | grep -v \"${output[$i]}\"))\n    else\n      output[$i]=$(echo ${input[@]}\
    \ | tr ' ' '\\n' | sort -n | tail -n 1)\n      input=($(echo ${input[@]} | tr\
    \ ' ' '\\n' | grep -v \"${output[$i]}\"))\n    fi\n  done\n  echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ numbers=$1\n  local -a list\n  local -a result\n\n  # creating array of integers\n\
    \  IFS=' ' read -a list <<< \"$numbers\"\n\n  for ((j=0; j<${#list[@]}; j++));\
    \ do\n    # taking minimum and maximum values (indexes)\n    min=0\n    max=0\n\
    \    for ((i=0; i<${#list[@]}; i++)); do\n      if [[ \"${list[$i]}\" -gt \"${list[$max]}\"\
    \ ]]; then\n        max=$i\n      fi\n      if [[ \"${list[$i]}\" -lt \"${list[$min]}\"\
    \ ]]; then\n        min=$i\n      fi\n    done\n\n    # adding values to result\n\
    \    result[$j]=\"${list[$min]}\"\n    list[$min]=\"${list[$max]}\"\n    list[$max]=${result[$j]}\n\
    \  done\n\n  # creating final list\n  echo \"[$(IFS=,; echo \"${result[*]}\")]\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ $# -eq 0 ]; then\n    echo \"[]\"\n    return 0\n  fi\n  local _list=\"$*\"\
    \n  _list=$(echo $_list | sed 's/\\ //g')\n  local _max=\"\"\n  local _min=\"\"\
    \n  local _first=\"\"\n  local _new=\"\"\n  local _last=\"\"\n  local _end=\"\"\
    \n  local _first=\"\"\n  local _new=\"\"\n  local _last=\"\"\n  local _end=\"\"\
    \n  local _len=${#_list}\n  local _i=0\n  local _result=\"[\"\n  while [ $_i -lt\
    \ $_len ]; do\n    _first=$(echo \"$_list\" | sed -n 's/\\(.\\).*/\\1/p')\n  \
    \  _new=$(echo \"$_list\" | sed 's/^.//')\n    _max=$(echo \"$_new\" | sed -n\
    \ 's/\\(.\\).*/\\1/p')\n    _min=$(echo \"$_new\" | sed -n 's/.*\\(.\\)/\\1/p')\n\
    \    _last=$(echo \"$_new\" | sed 's/.$//')\n    _end=$(echo \"$_new\" | sed -n\
    \ 's/.*\\(.\\)/\\1/p')\n    if [ \"$_first\" -le \"$_end\" ]; then\n      _result=$_result'\"\
    '$_first'\"'\n      _list=$_new\n    else\n      _result=$_result'\"'$_max'\"\
    '\n      _list=$_last\n    fi\n    _i=$((_i+1))\n    if [ $_i -lt $_len ]; then\n\
    \      _result=$_result\", \"\n    fi\n  done\n  _result=$_result\"]\"\n  echo\
    \ $_result\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_nvfxo5c.sh: line 41: [: : integer expression expected

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ -z \"$1\" ]; then\n        echo '[]'\n        return\n    fi\n    in_ar=(\
    \ $1 )\n    n=$((${#in_ar[@]}))\n    if [ $n -eq 1 ]; then\n        echo '[\"\
    '${in_ar[0]}'\"]'\n        return\n    fi\n    in_ar=(\"${in_ar[@]}\" \"${in_ar[@]}\"\
    \ \"${in_ar[@]}\")\n    out_ar=()\n    while [ ${#out_ar[@]} -lt $n ]; do\n  \
    \      min=$(echo ${in_ar[@]} | tr ' ' '\\n' | sort -n | head -n 1)\n        out_ar=(\"\
    ${out_ar[@]}\" $min)\n        for i in $(seq 0 $n); do\n            if [ \"${in_ar[$i]}\"\
    \ == \"$min\" ]; then\n                in_ar[$i]=\"-1\"\n                break\n\
    \            fi\n        done\n        max=$(echo ${in_ar[@]} | tr ' ' '\\n' |\
    \ sort -n | tail -n 1)\n        out_ar=(\"${out_ar[@]}\" $max)\n        for i\
    \ in $(seq 0 $n); do\n            if [ \"${in_ar[$i]}\" == \"$max\" ]; then\n\
    \                in_ar[$i]=\"-1\"\n                break\n            fi\n   \
    \     done\n    done\n    echo '['$(IFS=,; echo \"${out_ar[*]}\")']'\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  __min_max_list\
    \ $1\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphywkfb6m.sh: line 15: __min_max_list: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=\"$@\"\n  local len=$(echo \"$list\" | wc -w)\n  local -a result\n  for\
    \ ((i=0; i<len; i++)); do\n    local min=$(echo \"$list\" | tr ' ' '\\n' | sort\
    \ -n | head -n 1)\n    local max=$(echo \"$list\" | tr ' ' '\\n' | sort -nr |\
    \ head -n 1)\n    if ((i % 2 == 0)); then\n      list=$(echo \"$list\" | tr '\
    \ ' '\\n' | grep -v \"$min\")\n      result+=(\"$min\")\n    else\n      list=$(echo\
    \ \"$list\" | tr ' ' '\\n' | grep -v \"$max\")\n      result+=(\"$max\")\n   \
    \ fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Get the list as an array and sort it\n    local list=($1)\n    IFS=$'\\n' list=($(sort\
    \ <<<\"${list[*]}\"))\n    IFS=$' '\n\n    # If it's empty, then return an empty\
    \ list\n    if [[ ${#list[@]} -eq 0 ]]; then\n        echo '[]'\n        return\n\
    \    fi\n\n    # If it's a single element, then return the list\n    if [[ ${#list[@]}\
    \ -eq 1 ]]; then\n        echo '[\\'\"'${list[0]}'\"\\']'\n        return\n  \
    \  fi\n\n    # Otherwise, sort it in an interesting way\n    # First, get the\
    \ minimum and maximum\n    local min=${list[0]}\n    local max=${list[${#list[@]}-1]}\n\
    \n    # Initialize an empty list\n    local arr=()\n\n    # Add the minimum to\
    \ the list\n    arr+=(\"$min\")\n\n    # If the minimum is the same as the maximum,\
    \ then\n    # they both have to be added to the list, and that\n    # is the final\
    \ list\n    if [[ $min -eq $max ]]; then\n        arr+=(\"$max\")\n        echo\
    \ -n \"[\"\n        for i in \"${arr[@]}\"; do\n            echo -n \"'\"$i\"\
    '\"\n            if [[ $i -ne $max ]]; then\n                echo -n \", \"\n\
    \            fi\n        done\n        echo \"]\"\n        return\n    fi\n\n\
    \    # Otherwise, remove the minimum and maximum from the list\n    # This is\
    \ done by copying the list to a new array and\n    # removing the minimum and\
    \ maximum, then setting the list\n    # to the new array\n    local new_list=()\n\
    \    for i in \"${list[@]}\"; do\n        if [[ $i -ne $min ]] && [[ $i -ne $max\
    \ ]]; then\n            new_list+=(\"$i\")\n        fi\n    done\n    list=(\"\
    ${new_list[@]}\")\n\n    # If the list is empty after this, then the list\n  \
    \  # consists of only the minimum and maximum, so just\n    # return those two\
    \ elements in an array\n    if [[ ${#\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdfl6jx18.sh: line 50: unexpected EOF while looking for matching
    `''''

    /tmp/tmpdfl6jx18.sh: line 95: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a list=($1)\n  local n=$((${#list[@]} / 2))\n  local -a result=()\n  for ((i=0;\
    \ i<n; i++)); do\n    result[i]=${list[$i]}\n    result[$((i+n))]=${list[$((i+n))]}\n\
    \  done\n  echo ${result[@]}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ write your code here\n    echo $1\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ $# -eq 0 ]]; then\n    echo []\n    return\n  fi\n  local ret\n  local start=0\n\
    \  local end=$#\n  local min\n  local max\n  local nums=($@)\n  local min_pos\n\
    \  local max_pos\n  while (( $start < $end )); do\n    min=${nums[0]}\n    max=${nums[0]}\n\
    \    min_pos=0\n    max_pos=0\n    for (( i=$start; i<$end; i++ )); do\n     \
    \ ((nums[i]<min)) && min=${nums[i]} && min_pos=$i\n      ((nums[i]>max)) && max=${nums[i]}\
    \ && max_pos=$i\n    done\n    if (( $start < $end - 1 )); then\n      ret+=$(printf\
    \ '\"%s\", ' \"$min\")\n      nums[$min_pos]=${nums[$start]}\n      ret+=$(printf\
    \ '\"%s\", ' \"$max\")\n      nums[$max_pos]=${nums[$end-1]}\n    else\n     \
    \ ret+=$(printf '\"%s\", ' \"$min\")\n    fi\n    ((start++))\n    ((end--))\n\
    \  done\n  echo [${ret%, }]\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # The\
    \ idea is to convert the list to a valid json, sort it with jq,\n  # then convert\
    \ the list back to space-separated list, removing the\n  # quotes that were added\
    \ for the json format.\n  local list=\"[$(echo $1 | tr ' ' ',')]\"\n  echo $list\
    \ | jq -s -c 'sort' | sed 's/\\[//;s/\\]//;s/\"//g;s/,/ /g'\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx_evp_32.sh: line 19: jq: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ res=\"\"\n\tlocal min=$(echo \"$1\" | tr \" \" \"\\n\" | sort -n | head -n 1)\n\
    \tlocal max=$(echo \"$1\" | tr \" \" \"\\n\" | sort -n | tail -n 1)\n\tlocal input_list=($(echo\
    \ \"$1\" | tr \" \" \"\\n\"))\n\tlocal input_list_size=${#input_list[@]}\n\tlocal\
    \ i=0\n\tlocal flag=0\n\twhile [ $i -lt $input_list_size ]; do\n\t\tlocal temp=${input_list[$i]}\n\
    \t\tif [ $temp -gt $min ] && [ $temp -lt $max ]; then\n\t\t\tif [ $flag -eq 0\
    \ ]; then\n\t\t\t\tres=\"$res $temp\"\n\t\t\t\tflag=1\n\t\t\telse\n\t\t\t\tres=\"\
    $temp $res\"\n\t\t\t\tflag=0\n\t\t\tfi\n\t\tfi\n\t\ti=$((i+1))\n\tdone\n\techo\
    \ $res\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=()\n    local odd_indices=()\n    local even_indices=()\n    local sorted_list=()\n\
    \    local result=()\n    local i=0\n    for element in $1; do\n        list+=($element)\n\
    \    done\n    for element in ${list[@]}; do\n        sorted_list+=($(echo \"\
    ${list[@]}\" | tr ' ' '\\n' | sort -n))\n    done\n    for element in ${sorted_list[@]};\
    \ do\n        if (( i % 2 == 0 )); then\n            even_indices+=($element)\n\
    \        else\n            odd_indices+=($element)\n        fi\n        i=$((i+1))\n\
    \    done\n    result=(${even_indices[@]} ${odd_indices[@]})\n    echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ input=(\"$@\")\n    local input_len=${#input[@]}\n    local min=1000000000\n\
    \    local max=-1000000000\n    local result=(\"\")\n    local result_len=0\n\
    \    local i=0\n    while [ $i -lt $input_len ]; do\n        if [[ ${input[$i]}\
    \ -lt $min ]]; then\n            min=${input[$i]}\n        fi\n        if [[ ${input[$i]}\
    \ -gt $max ]]; then\n            max=${input[$i]}\n        fi\n        (( i++\
    \ ))\n    done\n    local i=$min\n    local k=0\n    local mod=1\n    while [[\
    \ $i -le $max ]]; do\n        local j=0\n        while [ $j -lt $input_len ];\
    \ do\n            if [[ ${input[$j]} -eq $i ]]; then\n                result[$k]=${input[$j]}\n\
    \                (( k++ ))\n            fi\n            (( j++ ))\n        done\n\
    \        if [[ $mod -eq 1 ]]; then\n            (( i++ ))\n        else\n    \
    \        (( i-- ))\n        fi\n        if [[ $i -eq $max ]]; then\n         \
    \   mod=0\n        fi\n        if [[ $i -eq $min ]]; then\n            mod=1\n\
    \        fi\n    done\n    local json_result=(\"[\")\n    local i=0\n    while\
    \ [ $i -lt $k ]; do\n        if [[ $i -eq 0 ]]; then\n            json_result+=('\"\
    '\"${result[$i]}\"'\"')\n        else\n            json_result+=('\", '\"'\"${result[$i]}\"\
    '\"')\n        fi\n        (( i++ ))\n    done\n    json_result+=(\"]\")\n   \
    \ echo \"${json_result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwuy2fou4.sh: line 61: unexpected EOF while looking for matching
    `''''

    /tmp/tmpwuy2fou4.sh: line 87: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tif\
    \ [[ $# -eq 0 ]]; then\n\t\techo \"[]\"\n\t\treturn\n\tfi\n\tlocal -a arr\n\t\
    local -i i=0\n\tfor elt in \"$@\"; do\n\t\tarr[i]=$elt\n\t\t((i++))\n\tdone\n\t\
    local -i high=$i-1\n\tlocal -i low=0\n\tlocal -i delta=1\n\tlocal -i j\n\tlocal\
    \ -a res\n\tlocal -i r=0\n\twhile [[ $low -le $high ]]; do\n\t\tj=$low\n\t\tres[r]=${arr[j]}\n\
    \t\t((r++))\n\t\tif [[ $low -eq $high ]]; then\n\t\t\techo \"${res[@]}\"\n\t\t\
    \treturn\n\t\tfi\n\t\tj=$high\n\t\tres[r]=${arr[j]}\n\t\t((r++))\n\t\tif [[ $low\
    \ -eq $high ]]; then\n\t\t\techo \"${res[@]}\"\n\t\t\treturn\n\t\tfi\n\t\t((low+=delta))\n\
    \t\t((high-=delta))\n\tdone\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=($1)\n  if [[ ${#list[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  local sorted=()\n  local values=($(printf '%s\\n' \"${list[@]}\" | sort\
    \ -n))\n  local n=${#values[@]}\n  sorted+=(\"${values[0]}\")\n  values=(\"${values[@]:1}\"\
    )\n  for ((i=0; i<n-1; i++)); do\n    if ((i % 2 == 0)); then\n      sorted+=(\"\
    ${values[0]}\")\n      values=(\"${values[@]:1}\")\n    else\n      sorted=(\"\
    ${values[-1]}\" \"${sorted[@]}\")\n      values=(\"${values[@]:0:${#values[@]}-1}\"\
    )\n    fi\n  done\n  echo \"$(join_by , \"${sorted[@]}\")\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6i2zftos.sh: line 34: join_by: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    echo\
    \ $(\n    for i in $1; do\n        echo $(echo $1 | tr ' ' '\\n' | sort -n) |\
    \ cut -d ' ' -f1\n        echo $(echo $1 | tr ' ' '\\n' | sort -n) | cut -d '\
    \ ' -f2- | rev\n    done\n    ) | tr ' ' '\\n' | tr -d '\\n' | sed 's/ //g'\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a a=$1 inout=()\n    local -i i=0 j l=${#a[@]}\n    while (( l-- > 0 )); do\n\
    \        (( j = i%2 ))\n        (( j ? inout+=( \"${a[-i]}\" ) : inout+=( \"${a[i]}\"\
    \ ) ))\n        (( i++ ))\n    done\n    printf '[\"%s\"]' \"${inout[@]}\"\n}\n\
    \ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0x1ekvk_.sh: line 19: ((: j ? inout+=( 1 2 3 4 ) : inout+=( 1 2
    3 4 ) : missing `)'' (error token is "2 3 4 ) : inout+=( 1 2 3 4 ) ")

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list\n    local sorted_list\n    local min\n    local max\n    local -i min_index\n\
    \    local -i max_index\n    local dir=0\n    IFS=' ' read -ra list <<< \"$1\"\
    \n    for ((i=0; i<\"${#list[@]}\"; i++)); do\n        if ((dir%2)); then\n  \
    \          max=-1\n            for ((j=0; j<\"${#list[@]}\"; j++)); do\n     \
    \           if [[ \"${list[j]}\" > \"$max\" ]]; then\n                    max=\"\
    ${list[j]}\"\n                    max_index=$j\n                fi\n         \
    \   done\n            sorted_list+=($max)\n            unset list[$max_index]\n\
    \        else\n            min=1000\n            for ((j=0; j<\"${#list[@]}\"\
    ; j++)); do\n                if [[ \"${list[j]}\" < \"$min\" ]]; then\n      \
    \              min=\"${list[j]}\"\n                    min_index=$j\n        \
    \        fi\n            done\n            sorted_list+=($min)\n            unset\
    \ list[$min_index]\n        fi\n        dir+=1\n    done\n    echo \"${sorted_list[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ my_list=($1)\n\tlocal result=()\n\tlocal odd=1\n\tlocal min=$1\n\n\twhile [\
    \ ${#my_list[@]} -gt 0 ]; do\n\t\tfor num in ${my_list[@]}; do\n\t\t\tif [ $odd\
    \ -eq 1 ]; then\n\t\t\t\tif [ $num -lt $min ]; then\n\t\t\t\t\tmin=$num\n\t\t\t\
    \tfi\n\t\t\telse\n\t\t\t\tif [ $num -gt $min ]; then\n\t\t\t\t\tmin=$num\n\t\t\
    \t\tfi\n\t\t\tfi\n\t\tdone\n\t\tresult+=(\"$min\")\n\t\tmy_list=(${my_list[@]/$min})\n\
    \t\tmin=$1\n\t\todd=$(( 1 - odd ))\n\tdone\n\techo ${result[@]}\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=43 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    sorted=($(sort\
    \ -n <<< $1))\n    max_idx=$((${#sorted[@]} - 1))\n    i=0\n    while (($i <=\
    \ $max_idx)); do\n        min=$i\n        ((i=i+1))\n        if (($i > $max_idx));\
    \ then\n            break\n        fi\n        max=$i\n        ((i=i+1))\n   \
    \     if (($i > $max_idx)); then\n            break\n        fi\n        echo\
    \ -n '\"'${sorted[$min]}'\"'\n        echo -n ','\n        echo -n '\"'${sorted[$max]}'\"\
    '\n        echo -n ','\n    done\n    echo -n '\"'${sorted[$min]}'\"'\n    echo\
    \ -n ','\n    echo -n '\"'${sorted[$max]}'\"'\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Complete this function body\n    local numbers=($1)\n    local odd=\"\"\n  \
    \  local even=\"\"\n    # Insert your code here\n    echo ${numbers[@]}\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ inp=$1\n    echo [$(\n        if [[ -z $inp ]]; then\n            echo ''\n\
    \        else\n            for x in $(echo $inp | tr ' ' '\\n' | sort -n); do\n\
    \                echo $x\n            done | tac | tr '\\n' ' ' | tr -d '\\n'\n\
    \        fi\n    )]\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a l=($1)\n    local idx=0\n    local str\n\n    while (( ${#l[@]} ))\n    do\n\
    \        str+='\"'${l[$idx]}\"'\"\n        unset \"l[$idx]\"\n        (( idx =\
    \ ($idx ?: -1) * -1 ))\n    done\n\n    echo \"[$str]\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=69 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=63 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input=$1\n  local result=()\n  local min=0\n  local max=0\n  local count=0\n\
    \  local next=0\n  local sorted_list=()\n  local sorted_index=0\n  # get list\
    \ of integers, sort and store in an array\n  local numbers=($(echo $input | tr\
    \ \" \" \"\\n\" | sort -nu))\n  count=${#numbers[@]}\n  # if there are no numbers,\
    \ print empty list\n  if [ $count -eq 0 ]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  # get first minimum\n  min=${numbers[0]}\n  result+=(\"\\\"$min\\\"\"\
    )\n  # get maximum\n  max=${numbers[$count-1]}\n  # get next smallest number (larger\
    \ than min)\n  for index in ${!numbers[@]}; do\n    if [ ${numbers[$index]} -gt\
    \ $min ]; then\n      next=${numbers[$index]}\n      break\n    fi\n  done\n \
    \ # if the next number doesn't exist, the list is already sorted\n  if [ -z $next\
    \ ]; then\n    result=()\n    for index in ${!numbers[@]}; do\n      result+=(\"\
    \\\"${numbers[$index]}\\\"\")\n    done\n    echo \"[${result[@]}]\"\n    return\n\
    \  fi\n  # get max, then next smallest number and repeat until done\n  while [\
    \ 1 ]; do\n    # add max to result list\n    result+=(\"\\\"$max\\\"\")\n    #\
    \ check if we're done (only one number left)\n    if [ ${#result[@]} -eq $count\
    \ ]; then\n      echo \"[${result[@]}]\"\n      return\n    fi\n    # get next\
    \ smallest number\n    for index in ${!numbers[@]}; do\n      # check if the number\
    \ is in the result list\n      if ! array_contains result[@] ${numbers[$index]};\
    \ then\n        # if it's not and it's greater than max, it's the next number\n\
    \        if [ ${numbers[$index]} -gt $max ]; then\n          next=${numbers[$index]}\n\
    \          break\n        fi\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvg27yc8f.sh: line 70: syntax error near unexpected token `}''

    /tmp/tmpvg27yc8f.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ str=\"$1\"\n  local size=${#str}\n  local list=($str)\n  local min=${list[0]}\n\
    \  local max=${list[0]}\n  local index=0\n  local temp=0\n  local result=()\n\
    \  local i=0\n  if [[ $size -eq 0 ]]; then\n    echo \"[]\"\n    return 0\n  fi\n\
    \  if [[ $size -eq 1 ]]; then\n    echo \"[\\\"${list[0]}\\\"]\"\n    return 0\n\
    \  fi\n  for ((i=0; i<size; i++)); do\n    if [[ ${list[i]} -lt $min ]]; then\n\
    \      min=${list[i]}\n      index=$i\n    fi\n    if [[ ${list[i]} -gt $max ]];\
    \ then\n      max=${list[i]}\n    fi\n  done\n  unset list[$index]\n  result+=(\"\
    \\\"$min\\\"\")\n  while [[ $size -gt 0 ]]; do\n    min=${list[0]}\n    max=${list[0]}\n\
    \    index=0\n    for ((i=0; i<size; i++)); do\n      if [[ ${list[i]} -lt $min\
    \ ]]; then\n        min=${list[i]}\n        index=$i\n      fi\n      if [[ ${list[i]}\
    \ -gt $max ]]; then\n        max=${list[i]}\n      fi\n    done\n    unset list[$index]\n\
    \    size=$(($size-1))\n    result+=(\"\\\"$max\\\"\")\n    if [[ $size -eq 0\
    \ ]]; then\n      break\n    fi\n    max=${list[0]}\n    min=${list[0]}\n    index=0\n\
    \    for ((i=0; i<size; i++)); do\n      if [[ ${list[i]} -lt $min ]]; then\n\
    \        min=${list[i]}\n        index=$i\n      fi\n      if [[ ${list[i]} -gt\
    \ $max ]]; then\n        max=${list[i]}\n      fi\n    done\n    unset list[$index]\n\
    \    size=$(($size-1))\n    result+=(\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp10clgraw.sh: line 93: unexpected EOF while looking for matching
    `"''

    /tmp/tmp10clgraw.sh: line 97: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  odd=\"\
    \"\n  even=\"\"\n  for i in $1; do\n    if (( $i % 2 )); then\n      even=\"$even\
    \ $i\"\n    else\n      odd=\"$odd $i\"\n    fi\n  done\n  sort -nu <<< \"$odd\
    \ $even\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    old_list=\"\
    $1\"\n    new_list=()\n    for i in $old_list; do\n        if [ \"${#new_list[@]}\"\
    \ -lt 2 ]; then\n            new_list+=($i)\n        else\n            if (( $i\
    \ > ${new_list[-1]} )); then\n                new_list=(${new_list[@]} $i)\n \
    \           else\n                new_list=($i ${new_list[@]})\n            fi\n\
    \        fi\n    done\n    new_list=(\"${new_list[@]:1}\")\n    echo ${new_list[@]}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ n\n  for n in $1\n  do\n    [ -z \"${min}\" ] && min=$n\n    [ -z \"${max}\"\
    \ ] && max=$n\n    (( n < min )) && min=$n\n    (( n > max )) && max=$n\n  done\n\
    \  [ -z \"${min}\" ] && return\n  echo -n '\"'$min'\"'\n  i=$min\n  local n\n\
    \  for n in $1\n  do\n    if [ \"$n\" != \"$i\" ]\n    then\n      i=$n\n    \
    \  echo -n ',\"'$i'\"'\n    fi\n  done\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ min=$(echo \"$1\" | tr ' ' '\\n' | sort -n | head -n 1)\n  local max=$(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  local len=$(echo \"$1\" | wc\
    \ -w)\n  local nums=$(echo \"$1\" | tr ' ' '\\n' | sort -n | sed '1d;$d')\n  local\
    \ left=$(echo \"$nums\" | head -n $(($len/2)) | tr '\\n' ' ')\n  local right=$(echo\
    \ \"$nums\" | tail -n $(($len/2)) | tr '\\n' ' ')\n  if [ \"$len\" -eq 0 ]; then\n\
    \    echo '[]'\n  elif [ \"$len\" -eq 1 ]; then\n    echo \"[\\\"$min\\\"]\"\n\
    \  elif [ \"$(($len%2))\" -eq 0 ]; then\n    echo \"$(strange_sort_list \"$left\"\
    ) $(strange_sort_list \"$right\")\" | tr ' ' '\\n' | sed -e 's/^/\\\"/' -e 's/$/\\\
    \"/' | tr '\\n' ' '\n  else\n    echo \"[\\\"$min\\\"] $(strange_sort_list \"\
    $right\") $(strange_sort_list \"$left\")\" | tr ' ' '\\n' | sed -e 's/^/\\\"/'\
    \ -e 's/$/\\\"/' | tr '\\n' ' '\n  fi\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tsort\
    \ \"$1\" | awk '{ print \"\\\"\"$1\"\\\"\" }'\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: cannot read: ''1 2 3 4'': No such file or directory

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    declare\
    \ -a arr=($1)\n    arr_len=${#arr[@]}\n    declare -a res=()\n    for ((i=0; i<arr_len;\
    \ i++)); do\n        if (($i % 2 == 0)); then\n            res[$i]=$(min \"${arr[@]}\"\
    )\n        else\n            res[$i]=$(max \"${arr[@]}\")\n        fi\n      \
    \  arr=(${arr[@]/${res[$i]}})\n    done\n    echo ${res[@]}\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpogwipaua.sh: line 20: min: command not found

    /tmp/tmpogwipaua.sh: line 22: max: command not found

    /tmp/tmpogwipaua.sh: line 20: min: command not found

    /tmp/tmpogwipaua.sh: line 22: max: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    :\
    \ \"$1\"\n    local ascending\n    local descending\n    ascending=$(printf \"\
    %s\\n\" $1 | sort -n | tr \"\\n\" \" \")\n    descending=$(printf \"%s\\n\" $1\
    \ | sort -nr | tr \"\\n\" \" \")\n    for i in $(seq $(echo $1 | wc -w) 2); do\n\
    \        ascending=\"$ascending $(printf \"%s\\n\" $descending | cut -d' ' -f-$i)\"\
    \n        descending=\"$(printf \"%s\\n\" $descending | cut -d' ' -f$i-)\"\n \
    \   done\n    printf \"%s\\n\" $ascending | tr \" \" \"\\n\" | sed 's/^\\(.*\\\
    )$/\"\\1\"/'\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ ret=()\n\tlocal lst=($( echo \"$1\" | sed 's/ /\\n/g' | sort -n ))\n\tlocal\
    \ max=${#lst[@]}\n\tlocal i=0\n\tlocal j=0\n\t\n\twhile [ $j -lt $max ]; do\n\t\
    \tif [ $((i%2)) -eq 0 ]; then\n\t\t\tret+=(${lst[i]})\n\t\telse\n\t\t\tret+=(${lst[$((max-i-1))]})\n\
    \t\tfi\n\t\ti=$((i+1))\n\t\tj=$((j+1))\n\tdone\n\techo ${ret[@]}\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    declare\
    \ -a numbers=($1)\n    declare -a result=()\n    declare min=${numbers[0]}\n \
    \   declare max=${numbers[0]}\n    while [[ ${#numbers[@]} -gt 0 ]]; do\n    \
    \    for el in ${numbers[@]}; do\n            [[ ${el} -lt ${min} ]] && min=${el}\n\
    \            [[ ${el} -gt ${max} ]] && max=${el}\n        done\n        result+=(\"\
    ${min}\")\n        [[ ${min} != ${max} ]] && result+=(\"${max}\")\n        numbers=(${numbers[@]//${min}/})\n\
    \        numbers=(${numbers[@]//${max}/})\n        min=${numbers[0]}\n       \
    \ max=${numbers[0]}\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ -a list=( $1 )\n\tlocal -a result=()\n\tlocal -i max_index=${#list[@]}\n\tlocal\
    \ -i min\n\tlocal -i max\n\tlocal -i i=0\n\twhile [ ${#result[@]} -lt $max_index\
    \ ]; do\n\t\tmin=$(find_min \"$1\")\n\t\tmax=$(find_max \"$1\")\n\t\tif [ $i -eq\
    \ 0 ] || [ $((i%2)) -eq 0 ]; then\n\t\t\tresult+=( $min )\n\t\telse\n\t\t\tresult+=(\
    \ $max )\n\t\tfi\n\t\ti+=1\n\t\tshift_once \"$1\" \"$min\"\n\t\tshift_once \"\
    $1\" \"$max\"\n\tdone\n\techo \"${result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwe68gtwy.sh: line 22: find_min: command not found

    /tmp/tmpwe68gtwy.sh: line 23: find_max: command not found

    /tmp/tmpwe68gtwy.sh: line 30: shift_once: command not found

    /tmp/tmpwe68gtwy.sh: line 31: shift_once: command not found

    /tmp/tmpwe68gtwy.sh: line 22: find_min: command not found

    /tmp/tmpwe68gtwy.sh: line 23: find_max: command not found

    /tmp/tmpwe68gtwy.sh: line 30: shift_once: command not found

    /tmp/tmpwe68gtwy.sh: line 31: shift_once: command not found

    /tmp/tmpwe68gtwy.sh: line 22: find_min: command not found

    /tmp/tmpwe68gtwy.sh: line 23: find_max: command not found

    /tmp/tmpwe68gtwy.sh: line 30: shift_once: command not found

    /tmp/tmpwe68gtwy.sh: line 31: shift_once: command not found

    /tmp/tmpwe68gtwy.sh: line 22: find_min: command not found

    /tmp/tmpwe68gtwy.sh: line 23: find_max: command not found

    /tmp/tmpwe68gtwy.sh: line 30: shift_once: command not found

    /tmp/tmpwe68gtwy.sh: line 31: shift_once: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo '[]'\n    return\n  fi\n  # Create 2 arrays\
    \ of \"sorted\" arrays, one with minimums as first\n  # elements, other with maximums\n\
    \  local -a mins=()\n  local -a maxs=()\n  local -a remaining=($1)\n  local min\n\
    \  local max\n  local min_index\n  local max_index\n  local cur_index\n  local\
    \ min_remaining_count\n  local max_remaining_count\n  local i\n  local lst\n \
    \ lst=\"[\"\n  while true; do\n    if [[ -z \"${remaining[*]}\" ]]; then\n   \
    \   break\n    fi\n    min=${remaining[0]}\n    max=${remaining[0]}\n    min_index=0\n\
    \    max_index=0\n    cur_index=0\n    for i in ${remaining[*]}; do\n      if\
    \ [[ $i -lt $min ]]; then\n        min=$i\n        min_index=$cur_index\n    \
    \  fi\n      if [[ $i -gt $max ]]; then\n        max=$i\n        max_index=$cur_index\n\
    \      fi\n      cur_index=$((cur_index + 1))\n    done\n    mins+=($min)\n  \
    \  maxs+=($max)\n    min_remaining_count=$((${#remaining[*]} - 1))\n    max_remaining_count=$((${#remaining[*]}\
    \ - 1))\n    unset remaining[$min_index]\n    unset remaining[$max_index]\n  \
    \  remaining=(${remaining[*]})\n  done\n  # Combine arrays into 1\n  local -a\
    \ combined=()\n  local mins_remaining_count=${#mins[*]}\n  local maxs_remaining_count=${#maxs[*]}\n\
    \  local is_mins_true=true\n  local p\n  while true; do\n    if [[ $is_mins_true\
    \ ]]; then\n      if [[ $mins_remaining_count -eq 0 ]]; then\n        break\n\
    \      fi\n      p=${mins[0]}\n      unset mins[\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp991u7me2.sh: line 75: syntax error near unexpected token `}''

    /tmp/tmp991u7me2.sh: line 75: `}''

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=( $1 )\n    local sorted_list=()\n    while [[ ${#list[@]} -gt 0 ]]; do\n\
    \        # Get the min/max values\n        local min_index=0\n        local max_index=0\n\
    \        for index in ${!list[@]}; do\n            if [[ ${list[$index]} -gt ${list[$max_index]}\
    \ ]]; then\n                max_index=$index\n            fi\n            if [[\
    \ ${list[$index]} -lt ${list[$min_index]} ]]; then\n                min_index=$index\n\
    \            fi\n        done\n        sorted_list+=( \"${list[$min_index]}\"\
    \ )\n        if [[ ${#list[@]} -gt 1 ]]; then\n            sorted_list+=( \"${list[$max_index]}\"\
    \ )\n        fi\n        unset list[$min_index]\n        unset list[$max_index]\n\
    \        list=( \"${list[@]}\" )\n    done\n    # Read the sorted list as if it\
    \ were input\n    read -r -a sorted_list <<< \"$(printf \"%s\\n\" \"${sorted_list[@]}\"\
    )\"\n    # Print the list as an array\n    printf '%s\\n' \"${sorted_list[@]/#/\\\
    \"}\"\n    printf '%s\\n' \"${sorted_list[@]/#/\\\"}\" | paste -sd ','\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ \"$1\" == \"\" ]; then\n    echo \"[]\"\n    return\n  fi\n  # Write your\
    \ code here\n  list=($1)\n  order=\"\"\n  if ((${#list[@]}%2==0)); then\n    for\
    \ i in `seq 0 2 $((${#list[@]}-1))`; do\n      order+=\"\\\"${list[$i]}\\\" \"\
    \n    done\n    for i in `seq 1 2 $((${#list[@]}-1))`; do\n      order+=\"\\\"\
    ${list[$i]}\\\" \"\n    done\n  else\n    for i in `seq 0 2 $((${#list[@]}-1))`;\
    \ do\n      order+=\"\\\"${list[$i]}\\\" \"\n    done\n    for i in `seq $((${#list[@]}-2))\
    \ -2 1`; do\n      order+=\"\\\"${list[$i]}\\\" \"\n    done\n  fi\n  echo \"\
    [${order% }]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ min\n    local max\n    local re=\"(.*)\"\n    while [[ $1 =~ $re ]]; do\n \
    \       min=$(printf \"%s\\n\" \"$1\" | sort -n | head -n 1)\n        echo -n\
    \ '\"'$min'\"'\n        printf \"%s\\n\" \"$1\" | sed \"s/$min//\" >/dev/null\n\
    \        max=$(printf \"%s\\n\" \"$1\" | sort -n | tail -n 1)\n        echo -n\
    \ '\"'$max'\"'\n        printf \"%s\\n\" \"$1\" | sed \"s/$max//\" >/dev/null\n\
    \    done\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=45 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input_list=($1)\n  local -a output_list=()\n  for i in {0..$(( ${#input_list[@]}\
    \ - 1 ))}; do\n    if (( i % 2 == 0 )); then\n      input_list=($(echo \"${input_list[@]}\"\
    \ | sort -n))\n    else\n      input_list=($(echo \"${input_list[@]}\" | sort\
    \ -nr))\n    fi\n    output_list+=(${input_list[0]})\n    input_list=(${input_list[@]:1})\n\
    \  done\n  echo \"${output_list[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnj3jf98b.sh: line 18: ((: {0..3}: syntax error: operand expected
    (error token is "{0..3}")

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlist=($(echo\
    \ \"$1\" | sed 's/\\ /\\n/g'))\n\titer=$((${#list[@]} / 2))\n\tif [[ ${#list[@]}\
    \ -lt 2 ]]; then\n\t\techo \"${list[@]}\"\n\telse\n\t\tfor i in $(seq 0 $iter);\
    \ do\n\t\t\tv=${list[$i]}\n\t\t\tmin=$v\n\t\t\tfor j in $(seq 0 $(( ${#list[@]}\
    \ - 1 ))); do\n\t\t\t\tif [[ ${list[$j]} -lt $min ]]; then\n\t\t\t\t\tmin=${list[$j]}\n\
    \t\t\t\t\tmin_index=$j\n\t\t\t\tfi\n\t\t\tdone\n\t\t\tres[$i]=$min\n\t\t\tlist[$min_index]=$v\n\
    \t\t\t\n\t\t\tv=${list[$i]}\n\t\t\tmax=$v\n\t\t\tfor j in $(seq 0 $(( ${#list[@]}\
    \ - 1 ))); do\n\t\t\t\tif [[ ${list[$j]} -gt $max ]]; then\n\t\t\t\t\tmax=${list[$j]}\n\
    \t\t\t\t\tmax_index=$j\n\t\t\t\tfi\n\t\t\tdone\n\t\t\tres[$(( $i + $iter ))]=$max\n\
    \t\t\tlist[$max_index]=$v\n\t\tdone\n\t\tfor i in $(seq 0 $(( ${#res[@]} - 1 )));\
    \ do\n\t\t\tres[$i]=\"\\\"${res[$i]}\\\"\"\n\t\tdone\n\t\techo \"[${res[@]}]\"\
    \n\tfi\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a list\n    local length\n    local min\n    local max\n    local min_idx\n\
    \    local max_idx\n    local idx\n    local result=\"\"\n    local num\n    local\
    \ delim=\"\"\n\n    # TODO\n    if [ -z \"$1\" ]; then\n        echo \"[]\"\n\
    \        return\n    fi\n\n    IFS=' ' read -ra list <<< \"$1\"\n    length=${#list[@]}\n\
    \n    for ((; length > 0; length--)); do\n        min=${list[0]}\n        max=${list[0]}\n\
    \        min_idx=0\n        max_idx=0\n        for ((idx=0; idx < length; idx++));\
    \ do\n            num=${list[$idx]}\n            if ((num < min)); then\n    \
    \            min=$num\n                min_idx=$idx\n            fi\n        \
    \    if ((num > max)); then\n                max=$num\n                max_idx=$idx\n\
    \            fi\n        done\n        result+=\"$delim\\\"$min\\\"\"\n      \
    \  delim=\", \"\n        if ((max_idx == min_idx)); then\n            continue\n\
    \        fi\n        result+=\"$delim\\\"$max\\\"\"\n        list[$min_idx]=$max\n\
    \        list[$max_idx]=$min\n    done\n    echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ LIST=\"$1\"\n    local RET=()\n    local ARR=()\n    local SIZE=0\n    local\
    \ STR=\"\"\n    local IDX=0\n    local I=0\n    local N=0\n    while read -r LINE;\
    \ do\n        ARR+=(\"$LINE\")\n        SIZE=$((SIZE + 1))\n    done <<< \"$LIST\"\
    \n    if [[ $SIZE -eq 0 ]]; then\n        echo \"[]\"\n        return\n    fi\n\
    \    while [[ $SIZE -gt 0 ]]; do\n        N=$((SIZE - 1))\n        IDX=0\n   \
    \     for ((I = 0; I < $SIZE; I++)); do\n            if [[ ${ARR[$I]} -lt ${ARR[$IDX]}\
    \ ]]; then\n                IDX=$I\n            fi\n        done\n        STR=\"\
    ${ARR[$IDX]}\"\n        if [[ $SIZE -eq 1 ]]; then\n            RET+=(\"\\\"$STR\\\
    \"\")\n        else\n            RET+=(\"\\\"$STR\\\"\")\n            ARR[$IDX]=${ARR[$N]}\n\
    \        fi\n        SIZE=$N\n    done\n    RET=${RET[@]}\n    echo \"[$RET]\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5p2q4_04.sh: line 35: [[: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlocal\
    \ arr=($1)\n\tlocal n=${#arr[@]}\n\tlocal res=()\n\tlocal tmp=()\n\tlocal i=0\n\
    \twhile [ $i -lt $n ]; do\n\t\ttmp=(\"${tmp[@]}\" \"${arr[@]}\")\n\t\techo \"\
    $i ${#tmp[@]}\"\n\t\tif [ $((i % 2)) -eq 0 ]; then\n\t\t\tres=(\"${res[@]}\" \"\
    $(echo \"${tmp[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\")\n\t\t\ttmp=($(echo\
    \ \"${tmp[@]}\" | tr ' ' '\\n' | grep -v \"${res[-1]}\"))\n\t\telse\n\t\t\tres=(\"\
    ${res[@]}\" \"$(echo \"${tmp[@]}\" | tr ' ' '\\n' | sort -n | tail -n 1)\")\n\t\
    \t\ttmp=($(echo \"${tmp[@]}\" | tr ' ' '\\n' | grep -v \"${res[-1]}\"))\n\t\t\
    fi\n\t\ti=$((i + 1))\n\tdone\n\techo \"${res[@]}\" | tr ' ' ',' | sed -e 's/^/[/'\
    \ -e 's/$/]/'\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ If an empty list, just return an empty list.\n    if [ \"$1\" = \"\" ]; then\n\
    \        echo '[]'\n        return\n    fi\n\n    # Collect a list of numbers\
    \ in an array.\n    array=()\n    for item in $1; do\n        array+=($item)\n\
    \    done\n\n    # Calculate length.\n    array_length=${#array[@]}\n\n    # Create\
    \ a new array with the strange order.\n    new_array=()\n    for i in $(seq 0\
    \ 2 $((array_length - 1))); do\n        if [ $((i % 2)) -eq 0 ]; then\n      \
    \      new_array+=($(min_of_array array $((i * 2)) $((array_length - 1))))\n \
    \       else\n            new_array+=($(max_of_array array $((i * 2)) $((array_length\
    \ - 1))))\n        fi\n    done\n\n    # Return JSON formatted string.\n    echo\
    \ -n '['\n    for value in ${new_array[@]}; do\n        echo -n \"\\\"$value\\\
    \", \"\n    done\n    echo -n ']'\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa2os1z73.sh: line 34: min_of_array: command not found

    /tmp/tmpa2os1z73.sh: line 34: min_of_array: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ mylist\n  mylist=($1)\n  local left\n  left=\"${#mylist[@]}\"\n  local my_list_sorted\n\
    \  my_list_sorted=()\n  while (($left > 0)); do\n    local mymin\n    mymin=${mylist[0]}\n\
    \    local mymin_index\n    mymin_index=0\n    local mymax\n    mymax=${mylist[0]}\n\
    \    local mymax_index\n    mymax_index=0\n    local i\n    for ((i=0; i < $left;\
    \ i++)); do\n      if [[ \"${mylist[$i]}\" -lt \"$mymin\" ]]; then\n        mymin=${mylist[$i]}\n\
    \        mymin_index=$i\n      fi\n      if [[ \"${mylist[$i]}\" -gt \"$mymax\"\
    \ ]]; then\n        mymax=${mylist[$i]}\n        mymax_index=$i\n      fi\n  \
    \  done\n    my_list_sorted+=(\"$mymin\")\n    my_list_sorted+=(\"$mymax\")\n\
    \    left=$((left - 2))\n    unset mylist[$mymin_index]\n    unset mylist[$mymax_index]\n\
    \    mylist=(${mylist[@]})\n  done\n  echo '[\"'${my_list_sorted[@]}'\"]'\n}\n\
    \ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n    fi\n    nums=(\
    \ $1 )\n    nums_len=${#nums[@]}\n    nums_len_plus_one=$((nums_len + 1))\n  \
    \  [ $((nums_len % 2)) -eq 0 ] && nums_len_plus_one=$((nums_len_plus_one - 1))\n\
    \    nums_indeces=()\n    for (( i=1; i<=$nums_len_plus_one; i=$((i+2)) )); do\n\
    \        nums_indeces+=( $(find_min_index \"${nums[@]}\") )\n        nums_indeces+=(\
    \ $(find_max_index \"${nums[@]}\") )\n    done\n    new_nums=()\n    for (( i=0;\
    \ i<${#nums_indeces[@]}; i++ )); do\n        new_nums+=( \"${nums[${nums_indeces[$i]}]}\"\
    \ )\n    done\n    new_nums_as_string=$(join_by \" \" \"${new_nums[@]}\")\n  \
    \  echo \"[${new_nums_as_string// /, }]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph1cah7j0.sh: line 25: find_min_index: command not found

    /tmp/tmph1cah7j0.sh: line 26: find_max_index: command not found

    /tmp/tmph1cah7j0.sh: line 25: find_min_index: command not found

    /tmp/tmph1cah7j0.sh: line 26: find_max_index: command not found

    /tmp/tmph1cah7j0.sh: line 32: join_by: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    local maxmin_list=()\n    local result=()\n    local min max\
    \ min_idx max_idx i\n\n    # Create list of max-min pairs\n    for i in $list;\
    \ do\n        min=$i\n        max=$i\n        for j in $list; do\n           \
    \ [ $j -lt $min ] && min=$j\n            [ $j -gt $max ] && max=$j\n        done\n\
    \        maxmin_list+=($min)\n        maxmin_list+=($max)\n        # Remove items\
    \ from list\n        list=$(echo \"$list\" | sed \"s/^$min$//;s/^$max$//;s/ $min\
    \ / /;s/ $max / /\")\n    done\n\n    # Sorting\n    for i in $maxmin_list; do\n\
    \        if [ -z $min ]; then\n            min=$i\n            min_idx=0\n   \
    \     elif [ -z $max ]; then\n            max=$i\n            max_idx=0\n    \
    \    else\n            [ $i -lt $min ] && min=$i && min_idx=$max_idx+1\n     \
    \       [ $i -gt $max ] && max=$i && max_idx=$min_idx+1\n        fi\n        result+=($min)\n\
    \        result+=($max)\n        min_idx=$((min_idx+1))\n        max_idx=$((max_idx+1))\n\
    \    done\n\n    # Return\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n   \
    \ strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1\
    \ 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo \"[]\"\n    return\n  fi\n  local nums=\"$1\"\
    \n  local result=\"\"\n  local nums_len=$(echo \"$nums\" | wc -w)\n  # Sort in\
    \ reverse.\n  nums=$(echo \"$nums\" | tr ' ' '\\n' | sort -nr)\n  local i=0\n\
    \  while [[ $i -lt $nums_len ]]; do\n    if [[ $(( $i % 2 )) -eq 0 ]]; then\n\
    \      # even - min\n      result=\"$result $(echo \"$nums\" | head -n 1)\"\n\
    \      nums=$(echo \"$nums\" | tail -n +2)\n    else\n      # odd - max\n    \
    \  result=\"$result $(echo \"$nums\" | tail -n 1)\"\n      nums=$(echo \"$nums\"\
    \ | head -n -1)\n    fi\n    i=$(( $i + 1 ))\n  done\n  # Remove starting space.\n\
    \  result=${result:1}\n  result=\"[\"$(echo \"$result\" | tr ' ' ',' | sed 's/^/\"\
    /g' | sed 's/$/\"/g')\"]\"\n  echo \"$result\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ i=0\n    local -a arr\n    local min\n    local max\n    local min_i\n    local\
    \ max_i\n    local -a res=()\n    while [ $# -gt 0 ]; do\n        arr[$i]=$1\n\
    \        i=$((i+1))\n        shift\n    done\n    i=$((i-1))\n    for (( i; i>=0;\
    \ i=i-2 )); do\n        min=${arr[0]}\n        max=${arr[0]}\n        min_i=0\n\
    \        max_i=0\n        for ((j=0; j<=i; j++)); do\n            if [ \"${arr[$j]}\"\
    \ -lt \"$min\" ]; then\n                min=${arr[$j]}\n                min_i=$j\n\
    \            fi\n            if [ \"${arr[$j]}\" -gt \"$max\" ]; then\n      \
    \          max=${arr[$j]}\"\n                max_i=$j\n            fi\n      \
    \  done\n        arr[$min_i]=$max\n        arr[$max_i]=$min\n        res+=(${arr[$min_i]})\n\
    \        if [ $i -ne 0 ]; then\n            res+=(${arr[$max_i]})\n        fi\n\
    \    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxuj3rf8o.sh: line 67: unexpected EOF while looking for matching
    `"''

    /tmp/tmpxuj3rf8o.sh: line 71: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ $# -eq 0 ]]; then\n    echo '[]'\n    return\n  fi\n  for((n=0; n<$#; n++));\
    \ do\n    eval arr$n=\\$$((n+1))\n  done\n  max=$(for((n=0; n<$#; n++)); do\n\
    \    eval echo \"\\$arr$n\"\n  done | sort -nr | head -n 1)\n  min=$(for((n=0;\
    \ n<$#; n++)); do\n    eval echo \"\\$arr$n\"\n  done | sort -n | head -n 1)\n\
    \  if [[ $max -eq $min ]]; then\n    echo -n \"[\"\n    for((n=0; n<$#; n++));\
    \ do\n      eval echo -n \"\\\"\\$arr$n\\\"\"\n      [[ $n -lt $((n-1)) ]] &&\
    \ echo -n \", \"\n    done\n    echo \"]\"\n    return\n  fi\n  for((n=0; n<$#;\
    \ n++)); do\n    if [[ $(eval echo \"\\$arr$n\") -eq $min ]]; then\n      pos=$n\n\
    \      break\n    fi\n  done\n  for((n=0; n<$#; n++)); do\n    if [[ $(eval echo\
    \ \"\\$arr$n\") -eq $max ]]; then\n      eval arr$pos=\\$arr$n\n      eval arr$n=\\\
    $arr$pos\n      break\n    fi\n  done\n  echo -n \"[\"\n  for((n=0; n<$#; n++));\
    \ do\n    eval echo -n \"\\\"\\$arr$n\\\"\"\n    [[ $n -lt $((n-1)) ]] && echo\
    \ -n \", \"\n  done\n  echo \"]\"\n  args=\"\"\n  for((n=0; n<$#; n++)); do\n\
    \    eval args=\"$args \\$arr$n\"\n  done\n  strange_sort_list $args\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyg4xzymk.sh: line 28: [[: 1 2 3 4: syntax error in expression (error
    token is "2 3 4")

    /tmp/tmpyg4xzymk.sh: line 38: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmpyg4xzymk.sh: line 44: [[: 1 2 3 4: syntax error in expression (error token
    is "2 3 4")

    /tmp/tmpyg4xzymk.sh: line 58: 1: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ list=($(echo \"$1\" | sort -n))\n  local res=[]\n  local i=0\n\n  while [[ \"\
    ${#list[@]}\" -gt 0 ]]; do\n    if [[ $((i % 2)) -eq 0 ]]; then\n      res+=(\"\
    \\\"${list[0]}\\\"\")\n      list=(\"${list[@]:1}\")\n    else\n      res+=(\"\
    \\\"${list[-1]}\\\"\")\n      list=(\"${list[@]:0:${#list[@]}-1}\")\n    fi\n\
    \    ((i++))\n  done\n\n  printf '%s' \"${res[@]}\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo '[]'\n    return\n  fi\n  local input=\"$1\"\n\
    \  local current_start=\"$(echo \"$input\" | tr \" \" \"\\n\" | sort -n | head\
    \ -n 1)\"\n  local current_end=\"$(echo \"$input\" | tr \" \" \"\\n\" | sort -nr\
    \ | head -n 1)\"\n  local next_start=\"$(echo \"$input\" | tr \" \" \"\\n\" |\
    \ sort -n | head -n 2 | tail -n 1)\"\n  local next_end=\"$(echo \"$input\" | tr\
    \ \" \" \"\\n\" | sort -nr | head -n 2 | tail -n 1)\"\n  if [ \"$current_start\"\
    \ == \"$current_end\" ]; then\n    # echo \"[\\\"$current_start\\\"]\"\n    #\
    \ echo \"[\\\"$current_start\\\"]\"\n    echo \"[\\\"$current_start\\\"]\"\n \
    \   return\n  fi\n  # Strange sorting, is when you start with the minimum value,\n\
    \  # then maximum of the remaining integers, then minimum and so on.\n  echo \"\
    [\\\"$current_start\\\", \\\"$current_end\\\"]\"\n  strange_sort_list \"$(echo\
    \ \"$input\" | tr \" \" \"\\n\" | grep -v \"$current_start\" | grep -v \"$current_end\"\
    \ | tr \"\\n\" \" \")\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ \"$#\" -eq 0 ]; then\n        echo \"[]\"\n        return\n    fi\n    local\
    \ data=($1)\n    local flag=1\n    local i=0\n    local n=${#data[@]}\n    while\
    \ [ $flag -eq 1 ]; do\n        if [ $(($i % 2)) -eq 0 ]; then\n            local\
    \ min=$i\n            for j in $(seq $((i + 1)) $((n - 1))); do\n            \
    \    if [ ${data[$j]} -lt ${data[$min]} ]; then\n                    min=$j\n\
    \                fi\n            done\n            flag=0\n            if [ $min\
    \ -ne $i ]; then\n                local temp=${data[$i]}\n                data[$i]=${data[$min]}\n\
    \                data[$min]=$temp\n                flag=1\n            fi\n  \
    \      else\n            local max=$i\n            for j in $(seq $((i + 1)) $((n\
    \ - 1))); do\n                if [ ${data[$j]} -gt ${data[$max]} ]; then\n   \
    \                 max=$j\n                fi\n            done\n            flag=0\n\
    \            if [ $max -ne $i ]; then\n                local temp=${data[$i]}\n\
    \                data[$i]=${data[$max]}\n                data[$max]=$temp\n  \
    \              flag=1\n            fi\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo \"[$(printf '\"%s\", ' \"${data[@]}\")]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a arr=($1)\n  local i=0\n  local j=${#arr[@]}-1\n  local tmp\n  while true;\
    \ do\n    echo -n '\"'${arr[$i]}'\"'\n    ((i++))\n    if ((i>=j)); then\n   \
    \   break\n    fi\n    echo -n \", \"\n    tmp=${arr[$i]}\n    arr[$i]=${arr[$j]}\n\
    \    arr[$j]=$tmp\n    ((j--))\n  done\n  echo\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    list=($1)\n\
    \    if [ ${#list[@]} -eq 0 ]; then\n        echo \"[]\"\n        return\n   \
    \ fi\n    min_val=${list[0]}\n    min_index=0\n    max_val=${list[0]}\n    max_index=0\n\
    \    for (( i=0; i<${#list[@]}; i++ )); do\n        list[$i]=$(echo ${list[$i]}\
    \ | grep -Eo \"[0-9]+\")\n        if [ ${list[$i]} -lt $min_val ]; then\n    \
    \        min_val=${list[$i]}\n            min_index=$i\n        fi\n        if\
    \ [ ${list[$i]} -gt $max_val ]; then\n            max_val=${list[$i]}\n      \
    \      max_index=$i\n        fi\n    done\n    list[$min_index]=\"\"\n    list[$max_index]=\"\
    \"\n    sorted_list=\"$min_val $max_val\"\n    while [ ${#list[@]} -gt 0 ]; do\n\
    \        min_val=${list[0]}\n        min_index=0\n        max_val=${list[0]}\n\
    \        max_index=0\n        for (( i=0; i<${#list[@]}; i++ )); do\n        \
    \    if [ -n \"${list[$i]}\" ]; then\n                if [ ${list[$i]} -lt $min_val\
    \ ]; then\n                    min_val=${list[$i]}\n                    min_index=$i\n\
    \                fi\n                if [ ${list[$i]} -gt $max_val ]; then\n \
    \                   max_val=${list[$i]}\n                    max_index=$i\n  \
    \              fi\n            fi\n        done\n        list[$min_index]=\"\"\
    \n        list[$max_index]=\"\"\n        sorted_list=\"$sorted_list $min_val $max_val\"\
    \n    done\n    echo \"$sorted_list\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=26 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # awk\
    \ script to sort the list\n  # 1. convert the list to array using FS\n  # 2. sort\
    \ the array in descending order\n  # 3. convert the array back to a list\n  #\
    \ 4. print out the list\n  echo \"$1\" | awk '\n    BEGIN { FS=\" \"; OFS=\" \"\
    ; }\n    {\n      # convert list to array\n      i = 1;\n      while (i <= NF)\
    \ {\n        a[i] = $i;\n        i++;\n      }\n      # sort the array\n     \
    \ asort(a, asc, \"@val_num_desc\");\n      # convert the array back to list\n\
    \      i = 1;\n      while (i <= NF) {\n        printf(\"%s \", asc[i]);\n   \
    \     i++;\n      }\n    }'\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$1\"\n    local -a odd_list\n    local -a even_list\n    local -a output\n\
    \    local item\n\n    # Get all the odd and even indexes.\n    # Not there is\
    \ no check that the list is of even size.\n    odd_list=($(echo $list | awk '{\
    \ print $1, $3, $5, $7, $9 }'))\n    even_list=($(echo $list | awk '{ print $2,\
    \ $4, $6, $8, $10 }'))\n\n    # Sort the odd indexes in decending order.\n   \
    \ # Sort the even indexes in ascending order.\n    IFS=$'\\n'\n    odd_list=($(sort\
    \ -g -r <<<\"${odd_list[*]}\"))\n    even_list=($(sort -g <<<\"${even_list[*]}\"\
    ))\n\n    # Prepare the output in the required format.\n    # Note the use of\
    \ '-e' to add the quotes.\n    for item in ${odd_list[@]}; do\n        output=(\"\
    ${output[@]}\" -e \"$item\")\n    done\n    for item in ${even_list[@]}; do\n\
    \        output=(\"${output[@]}\" -e \"$item\")\n    done\n\n    echo ${output[@]}\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  declare\
    \ -a sorted=()\n  declare -a rest=()\n  declare -a tmp=()\n  declare -a list=()\n\
    \  list=(\"$@\")\n  declare    len=${#list[@]}\n  declare -i i=0\n  declare -i\
    \ min=0\n  declare -i max=0\n  declare -i idx=0\n  declare -i mid=0\n  declare\
    \ -i first=0\n  declare -i last=0\n  # sanity check\n  if [ $len -lt 1 ]; then\n\
    \    echo \"[]\"\n    return 0\n  fi\n  # if len is odd, get mid value\n  if [\
    \ $((len % 2)) -eq 1 ]; then\n    mid=$(( (len - 1) / 2 ))\n    sorted+=(\"${list[$mid]}\"\
    )\n    rest+=(\"${list[@]:0:$mid}\")\n    rest+=(\"${list[@]:$((mid + 1))}\")\n\
    \  else\n    rest+=(\"${list[@]}\")\n  fi\n  # sort the rest\n  len=${#rest[@]}\n\
    \  first=0\n  last=$((len - 1))\n  for (( i = 0; i < len; i++ )); do\n    min=0\n\
    \    max=0\n    for (( idx = first; idx <= last; idx++ )); do\n      if [ ${rest[$idx]}\
    \ -lt ${rest[$min]} ]; then\n        min=$idx\n      fi\n      if [ ${rest[$idx]}\
    \ -gt ${rest[$max]} ]; then\n        max=$idx\n      fi\n    done\n    if [ $((i\
    \ % 2)) -eq 0 ]; then\n      sorted+=(\"${rest[$min]}\")\n      if [ $min -lt\
    \ $max ]; then\n        tmp=(\"${rest[@]:$((min + 1)):$((max - min - 1))}\")\n\
    \        rest=(\"${rest[@]:0:$min}\" \"${rest[@]:$((max + 1))}\")\n        rest=(\"\
    ${rest[@]}\" \"${tmp[@]}\")\n      else\n        rest=(\"${rest[@]:0:$min}\" \"\
    ${rest[\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphg281uqe.sh: line 81: unexpected EOF while looking for matching
    `"''

    /tmp/tmphg281uqe.sh: line 85: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input=\"$*\"\n  local min\n  local max\n  local result=\"\"\n  while [ ! -z\
    \ \"$input\" ]; do\n    min=$(echo \"$input\" | awk '{print $1}')\n    max=$(echo\
    \ \"$input\" | awk '{print $NF}')\n    input=$(echo \"$input\" | awk '{$1 = \"\
    \"; $NF = \"\"; sub(/^ +/, \"\"); gsub(/ +/, \" \"); print}')\n    result+=\"\
    \ \\\"$min\\\" \\\"$max\\\"\"\n  done\n  echo \"[$result]\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ curr_max_min\n    local remains\n    local result=()\n    local number\n\n \
    \   if [[ -z \"$1\" ]]; then\n        # $1 was empty\n        return 0\n    fi\n\
    \n    # NOTE: echo will print number as text!\n    #       for example:\n    #\
    \       $ echo 1\n    #       1\n    #       $ echo 1+1\n    #       1+1\n   \
    \ # We should never get an empty string here, because\n    # if our input was\
    \ empty string, we'd return 0.\n    curr_max_min=$(echo \"$1\" | awk 'BEGIN {ORS\
    \ = \" \"; min = +1000000000; max = -1000000000} {if ($1 > max) max = $1; if ($1\
    \ < min) min = $1} END {print min, max}')\n    # The format of the output is:\n\
    \    # [minimum value] [maximum value]\n    # For example:\n    # $ curr_max_min=$(echo\
    \ \"1 2 3 4\" | awk 'BEGIN {ORS = \" \"; min = +1000000000; max = -1000000000}\
    \ {if ($1 > max) max = $1; if ($1 < min) min = $1} END {print min, max}')\n  \
    \  # $ echo $curr_max_min\n    # 1 4\n    result+=(\"$(echo $curr_max_min | awk\
    \ '{print $1}')\")\n    result+=(\"$(echo $curr_max_min | awk '{print $2}')\"\
    )\n\n    remains=$(echo \"$1\" | tr \" \" \"\\n\" | grep -v \"$(echo $curr_max_min\
    \ | awk '{print $1}')\" | grep -v \"$(echo $curr_max_min | awk '{print $2}')\"\
    )\n    # NOTE: In Bash, the following works:\n    #       $ remains=\"1 2 3 4\"\
    \n    #       $ echo $remains | tr \" \" \"\\n\" | grep -v \"1\" | grep -v \"\
    4\"\n    #       2\n    #       3\n    #\n    #       But the following doesn't:\n\
    \   \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ args=\"$@\"\n  local sorted_list=()\n  local reversed_list=()\n  local part_list=()\n\
    \  local res=()\n  for arg in $args; do\n    sorted_list+=($arg)\n  done\n  sorted_list=($(echo\
    \ \"${sorted_list[@]}\" | tr ' ' '\\n' | sort -g | tr '\\n' ' '))\n  #echo ${sorted_list[@]}\n\
    \  for arg in ${sorted_list[@]}; do\n    reversed_list=($arg ${reversed_list[@]})\n\
    \  done\n  #echo ${reversed_list[@]}\n  for (( i=0; i<${#sorted_list[@]}; i++\
    \ )); do\n    local part_list=()\n    if [ $((i%2)) -eq 0 ]; then\n      for ((\
    \ j=0; j<=$i; j++ )); do\n        part_list+=(${sorted_list[$j]})\n      done\n\
    \    else\n      for (( j=0; j<=$i; j++ )); do\n        part_list+=(${reversed_list[$j]})\n\
    \      done\n    fi\n    #echo ${part_list[@]}\n    res+=(${part_list[@]})\n \
    \ done\n  echo \"${res[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ $# -eq 0 ]; then\n    echo \"[]\"\n    return 0\n  fi\n  arr=(\"$@\")\n  len=${#arr[@]}\n\
    \  if [ $len -eq 1 ]; then\n    echo \"[\\\"${arr[0]}\\\"]\"\n    return 0\n \
    \ fi\n  res=()\n  for ((i=0; i<len; i++)); do\n    if [ $((i%2)) -eq 0 ]; then\n\
    \      res+=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | head -n 1))\n   \
    \   arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -v \"${res[-1]}\"))\n    else\n\
    \      res+=($(echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n | tail -n 1))\n   \
    \   arr=($(echo \"${arr[@]}\" | tr ' ' '\\n' | grep -v \"${res[-1]}\"))\n    fi\n\
    \  done\n  echo \"[${res[@]/#/\\\"}]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    sort\
    \ <(echo \"$1\") | sed -E 's/ /\\n/g'\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ integers=($1)\n    local result=()\n    local flag=0\n\n    if [ ${#integers[@]}\
    \ -eq 0 ]; then\n        echo \"[]\"\n        return 0\n    fi\n\n    while [\
    \ ${#integers[@]} -gt 0 ]; do\n        local min_value=${integers[0]}\n      \
    \  local max_value=${integers[0]}\n        local min_idx=0\n        local max_idx=0\n\
    \n        for i in ${!integers[@]}; do\n            if [ ${integers[$i]} -lt $min_value\
    \ ]; then\n                min_value=${integers[$i]}\n                min_idx=$i\n\
    \            fi\n\n            if [ ${integers[$i]} -gt $max_value ]; then\n \
    \               max_value=${integers[$i]}\n                max_idx=$i\n      \
    \      fi\n        done\n\n        if [ $flag -eq 0 ]; then\n            unset\
    \ 'integers[$min_idx]'\n            result+=(\"$min_value\")\n            flag=1\n\
    \        else\n            unset 'integers[$max_idx]'\n            result+=(\"\
    $max_value\")\n            flag=0\n        fi\n    done\n\n    echo \"[\"\n  \
    \  for i in ${!result[@]}; do\n        if [ $i -eq 0 ]; then\n            echo\
    \ '\"'\"${result[$i]}\"'\"'\n        else\n            echo ',\"'\"${result[$i]}\"\
    '\"'\n        fi\n    done\n    echo \"]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=16 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ n new n2 n2_first n2_last n_min n_max n_min_index n_max_index\n    new=()\n\
    \    while [[ -n \"$1\" ]]; do\n        n2=()\n        # Remove the minimum value,\
    \ put it in new\n        # and put the rest of the list in n2\n        n_min=$1\n\
    \        n_min_index=0\n        n_max=$1\n        n_max_index=0\n        n2_first=1\n\
    \        n2_last=1\n        for ((i=0; i<$#; i++)); do\n            n=${!i}\n\
    \            if [[ \"$n\" -lt \"$n_min\" ]]; then\n                n_min=$n\n\
    \                n_min_index=$i\n            fi\n            if [[ \"$n\" -gt\
    \ \"$n_max\" ]]; then\n                n_max=$n\n                n_max_index=$i\n\
    \            fi\n            if [[ $i -eq $n_min_index ]]; then\n            \
    \    continue\n            fi\n            if [[ $n2_first -eq 1 ]]; then\n  \
    \              n2_first=0\n            else\n                n2+=(\"$n\")\n  \
    \          fi\n        done\n        new+=(\"$n_min\")\n        set -- \"${n2[@]}\"\
    \n        if [[ -z \"$1\" ]]; then\n            break\n        fi\n        # Remove\
    \ the maximum value, put it in new\n        # and put the rest of the list in\
    \ n2\n        n_min=$1\n        n_min_index=0\n        n_max=$1\n        n_max_index=0\n\
    \        n2_first=1\n        n2_last=1\n        for ((i=0; i<$#; i++)); do\n \
    \           n=${!i}\n            if [[ \"$n\" -lt \"$n_min\" ]]; then\n      \
    \          n_min=$n\n                n_min_index=$i\n            fi\n        \
    \    if [[ \"$n\" -gt \"$n_max\" ]]; then\n                n_max=$n\n        \
    \        n_max_index=$i\n            fi\n            if [[ $i -eq $n_max_index\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9skd5e3v.sh: line 69: syntax error in conditional expression

    /tmp/tmp9skd5e3v.sh: line 70: syntax error near `}''

    /tmp/tmp9skd5e3v.sh: line 70: `}''

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ -t is required to avoid adding single quotes for the lines,\n    # and the following\
    \ line is required to keep the quotes\n    # (to form a list of strings instead\
    \ of integers).\n    local l\n    local -a nums\n    while read -r -t 1 l; do\n\
    \        nums+=($l)\n    done < <(printf \"%s\\n\" $1 | sort -n)\n    local -a\
    \ res\n    local incr=1\n    while ((${#nums[@]} > 0)); do\n        # Since this\
    \ is a sample, the result is not very important, so\n        # instead of dealing\
    \ with indexes that overflow, we just take the\n        # last element of the\
    \ list.\n        res+=(${nums[-1]})\n        unset nums[-1]\n        nums=(${nums[@]})\n\
    \        ((incr = !incr))\n    done\n    echo ${res[@]}\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a list=($(echo \"$1\" | sort -n))\n  local -a result=()\n  local i=0\n  local\
    \ length=${#list[@]}\n  local max=$((length - 1))\n  while [[ $length -gt 0 ]];\
    \ do\n    if [[ $i -eq 0 ]]; then\n      result+=(\"${list[$i]}\")\n      unset\
    \ \"list[$i]\"\n    else\n      if [[ $i -gt $max ]]; then\n        i=0\n    \
    \  fi\n      result+=(\"${list[$i]}\")\n      unset \"list[$i]\"\n    fi\n   \
    \ ((length--))\n    ((i++))\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a list\n  read -ra list <<< \"$1\"\n  local length=${#list[@]}\n  local min=\n\
    \  local max=\n  local middle=\n  local output=()\n  for ((i=0; i<length; i++));\
    \ do\n    min=${list[0]}\n    max=${list[0]}\n    for num in \"${list[@]}\"; do\n\
    \      if [[ $num -lt $min ]]; then\n        min=$num\n      fi\n      if [[ $num\
    \ -gt $max ]]; then\n        max=$num\n      fi\n    done\n    output+=(\"$min\"\
    )\n    list=(${list[@]//$min/})\n    output+=(\"$max\")\n    list=(${list[@]//$max/})\n\
    \  done\n  echo \"${output[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    input=\"\
    $1\"\n    tmpfile=$(mktemp)\n    echo \"$input\" | sed 's/^ *//g' | sed 's/ *$//g'\
    \ | sed 's/  */ /g' > \"$tmpfile\"\n    while read -r line\n    do\n        #\
    \ Put first line into var\n        if [ -z \"$first_var\" ]\n        then\n  \
    \          first_var=\"$line\"\n        else\n            # Compare the rest of\
    \ the lines with the first one\n            echo \"$line\" | sed \"s/^/$first_var\
    \ /g\" >> \"$tmpfile\"\n        fi\n    done < \"$tmpfile\"\n    if [ -z \"$first_var\"\
    \ ]\n    then\n        echo \"[]\"\n    else\n        # Sort file in reverse order\
    \ and reverse each line\n        sort -nr \"$tmpfile\" | sed 's/^[0-9]* //g' |\
    \ sed 's/ /,/g' | sed 's/^/[/g' | sed 's/$/]/g'\n    fi\n    rm \"$tmpfile\"\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [[ -z \"$1\" ]]; then\n        echo '[]'\n        return\n    fi\n    local\
    \ IFS=$' '\n    local -n lst=$1\n    local num_arr\n    local -a min_val\n   \
    \ local -a max_val\n    local -a odd_idx\n    local -a even_idx\n    local idx=0\n\
    \    local -a tmp_arr\n    for val in \"${lst[@]}\"; do\n        if [[ -z \"${num_arr[$val]}\"\
    \ ]]; then\n            num_arr[$val]=1\n        else\n            num_arr[$val]=$((++num_arr[$val]))\n\
    \        fi\n    done\n    for val in \"${!num_arr[@]}\"; do\n        if [[ ${num_arr[$val]}\
    \ -gt 1 ]]; then\n            min_val+=(\"$val\")\n            max_val+=(\"$val\"\
    )\n        else\n            if [[ $((idx % 2)) -eq 0 ]]; then\n             \
    \   min_val+=(\"$val\")\n            else\n                max_val+=(\"$val\"\
    )\n            fi\n            idx=$((++idx))\n        fi\n    done\n    idx=0\n\
    \    for val in \"${min_val[@]}\"; do\n        if [[ $((idx % 2)) -eq 0 ]]; then\n\
    \            odd_idx+=(\"$val\")\n        else\n            even_idx+=(\"$val\"\
    )\n        fi\n        idx=$((++idx))\n    done\n    idx=0\n    for val in \"\
    ${max_val[@]}\"; do\n        if [[ $((idx % 2)) -eq 0 ]]; then\n            even_idx+=(\"\
    $val\")\n        else\n            odd_idx+=(\"$val\")\n        fi\n        idx=$((++idx))\n\
    \    done\n    tmp_arr+=(\"${odd_idx[@]}\")\n    tmp_arr+=(\"${even_idx[@]}\"\
    )\n    local -a sort_arr\n    for val in \"${tmp_arr[@]}\"; do\n        if [[\
    \ ${num_arr[$val]} -gt 1\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpxwn2cg9_.sh: line 70: syntax error in conditional expression

    /tmp/tmpxwn2cg9_.sh: line 71: syntax error near `}''

    /tmp/tmpxwn2cg9_.sh: line 71: `}''

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tif\
    \ [ -z \"$1\" ]; then\n\t\techo \"[]\"\n\t\treturn\n\tfi\n\tlocal list=$(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -n | tr '\\n' ' ')\n\tlocal i=0\n\tlocal res=''\n\
    \tlocal len=$(echo \"$list\" | wc -w)\n\twhile [ $i -lt $len ]; do\n\t\tif [ $((i%2))\
    \ -eq 0 ]; then\n\t\t\tres=\"$res $(echo \"$list\" | cut -d' ' -f$((i+1)))\"\n\
    \t\telse\n\t\t\tres=\"$res $(echo \"$list\" | cut -d' ' -f$((len-i+1)))\"\n\t\t\
    fi\n\t\ti=$((i+1))\n\tdone\n\techo \"$res\" | tr ' ' '\\n' | awk '{printf \"\\\
    \"%s\\\"\\n\", $0}' | tr '\\n' ',' | sed 's/,$//'\n\techo \"]\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\"$*\"\n    local result=()\n    if [ -z \"$list\" ]; then\n        echo\
    \ \"$result\"\n        return\n    fi\n    while true; do\n        local min=$(echo\
    \ \"$list\" | head -n 1)\n        local max=$(echo \"$list\" | tail -n 1)\n  \
    \      if [ -z \"$list\" ]; then\n            break\n        fi\n        if [\
    \ -z \"$min\" ]; then\n            break\n        fi\n        if [ -z \"$max\"\
    \ ]; then\n            break\n        fi\n        local min_count=$(echo \"$list\"\
    \ | grep -c \"\\<$min\\>\")\n        local max_count=$(echo \"$list\" | grep -c\
    \ \"\\<$max\\>\")\n        if [ \"$min_count\" -gt \"1\" ]; then\n           \
    \ local min_list=$(echo \"$list\" | grep -o \"\\<$min\\>\")\n            for i\
    \ in $min_list; do\n                list=$(echo \"$list\" | sed \"s/\\<$i\\>//g\"\
    )\n                result+=($i)\n            done\n        else\n            list=$(echo\
    \ \"$list\" | sed \"s/\\<$min\\>//g\")\n            result+=($min)\n        fi\n\
    \        if [ \"$max_count\" -gt \"1\" ]; then\n            local max_list=$(echo\
    \ \"$list\" | grep -o \"\\<$max\\>\")\n            for i in $max_list; do\n  \
    \              list=$(echo \"$list\" | sed \"s/\\<$i\\>//g\")\n              \
    \  result+=($i)\n            done\n        else\n            list=$(echo \"$list\"\
    \ | sed \"s/\\<$max\\>//g\")\n            result+=($max)\n        fi\n    done\n\
    \    echo \"${result[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ sorted\n    local -a array=($1)\n    local max=${#array[@]}\n    local min\n\
    \    local -i index\n    # Sort the array\n    for ((i=0; i<${#array[@]}; i++));\
    \ do\n        min=${array[$i]}\n        index=$i\n        for ((j=i+1; j<${#array[@]};\
    \ j++)); do\n            if [[ ${array[$j]} -lt $min ]]; then\n              \
    \  min=${array[$j]}\n                index=$j\n            fi\n        done\n\
    \        array[$index]=${array[$i]}\n        array[$i]=$min\n    done\n    # Construct\
    \ the new array\n    index=0\n    while [[ $index -lt $max ]]; do\n        if\
    \ [[ $((index % 2)) -eq 0 ]]; then\n            sorted+=('\"'${array[$index]}'\"\
    ')\n        else\n            sorted=('\"'${array[$index]}'\"' \"${sorted[@]}\"\
    )\n        fi\n        ((++index))\n    done\n    echo \"${sorted[@]}\"\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ input=$1\n  local output=$(echo $input | tr \" \" \"\\n\" | sort -n)\n  local\
    \ length=$(echo $output | wc -w)\n  local middle=$(($length / 2))\n  local odd=$(($length\
    \ % 2))\n  local first=1\n  local second=$(($length - 1))\n  local result=\"\"\
    \n  for ((i=0; i<$middle; i++)); do\n    [[ $first -eq $middle && $odd -eq 1 ]]\
    \ && break\n    result=\"$result $first $second\"\n    first=$(($first + 1))\n\
    \    second=$(($second - 1))\n  done\n  if [[ $odd -eq 1 ]]; then\n    result=\"\
    $result $middle\"\n  fi\n  echo $result | tr \" \" \"\\n\" | xargs -I % echo '\"\
    %\"' | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n   \
    \ [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3\
    \ 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6\
    \ 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    list=$1\n\
    \    sort -n <<< $list | awk '{print \"\\\"\"$1\"\\\"\"}'\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ input=\"$1\"\n    # your code here\n    input=`echo \"$input\" | sed 's/[0-9]/\\\
    n&/g' | sort | sed 's/\\n/ /g'`\n    rez=\"\"\n    for (( i=0; i<${#input}; i++\
    \ )); do\n        if (( i%2==0 )); then\n            rez=`echo $rez ${input:$i:1}`\n\
    \        else\n            rez=`echo ${input:$i:1} $rez`\n        fi\n    done\n\
    \    echo $rez\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo '[]'\n    return\n  fi\n  local -a list=()\n\
    \  for value in $1; do\n    list+=(\"$value\")\n  done\n  local -a res=()\n  while\
    \ true; do\n    # append minimum value\n    local min=\"${list[0]}\"\n    local\
    \ index=0\n    for ((i = 1; i < ${#list[@]}; i++)); do\n      if [[ \"${list[i]}\"\
    \ -lt \"$min\" ]]; then\n        min=\"${list[i]}\"\n        index=$i\n      fi\n\
    \    done\n    res+=(\"$min\")\n    unset \"list[$index]\"\n    # break if list\
    \ is empty\n    if [[ ${#list[@]} -eq 0 ]]; then\n      break\n    fi\n    # append\
    \ maximum value\n    local max=\"${list[0]}\"\n    index=0\n    for ((i = 1; i\
    \ < ${#list[@]}; i++)); do\n      if [[ \"${list[i]}\" -gt \"$max\" ]]; then\n\
    \        max=\"${list[i]}\"\n        index=$i\n      fi\n    done\n    res+=(\"\
    $max\")\n    unset \"list[$index]\"\n    # break if list is empty\n    if [[ ${#list[@]}\
    \ -eq 0 ]]; then\n      break\n    fi\n  done\n  local output=\"\"\n  for value\
    \ in \"${res[@]}\"; do\n    output+=\"\\\"$value\\\", \"\n  done\n  echo \"[${output%?}]\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=52 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=31 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ str=\"$1\"\n  local min=$(echo \"$str\" | tr ' ' '\\n' | sort -n | head -n 1)\n\
    \  local max=$(echo \"$str\" | tr ' ' '\\n' | sort -n | tail -n 1)\n  local middle_list=$(echo\
    \ \"$str\" | tr ' ' '\\n' | sort -n | sed '1d;$d')\n  local middle_length=$(echo\
    \ \"$middle_list\" | wc -l)\n  local middle_half=$((middle_length / 2))\n  local\
    \ middle_odd=$((middle_length % 2))\n  local middle_left=$(echo \"$middle_list\"\
    \ | head -n $middle_half)\n  local middle_right=$(echo \"$middle_list\" | tail\
    \ -n $middle_half)\n  echo \"$min $(echo \"$middle_right\" | tr '\\n' ' ') $max\
    \ $(echo \"$middle_left\" | tr '\\n' ' ') $middle_odd\"\n}\n\ncandidate() {\n\
    \    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n    fi\n    local\
    \ l=${1// /}\n    local len=$(echo \"$l\" | wc -w)\n    if [ \"$len\" -eq 1 ];\
    \ then\n        echo \"['\\\"$l\\\"']\"\n        return\n    fi\n    local str=''\n\
    \    for ((i=0; i<len; i++)); do\n        local idx=$((i % 2))\n        if [ \"\
    $idx\" -eq 0 ]; then\n            local min=$(echo \"$l\" | tr ' ' '\\n' | sort\
    \ -n | head -n 1)\n            str+=\"'\\\"$min\\\"'\"\n            l=$(echo \"\
    $l\" | tr ' ' '\\n' | sed \"/^$min$/d\")\n        else\n            local max=$(echo\
    \ \"$l\" | tr ' ' '\\n' | sort -n | tail -n 1)\n            str+=\"'\\\"$max\\\
    \"'\"\n            l=$(echo \"$l\" | tr ' ' '\\n' | sed \"/^$max$/d\")\n     \
    \   fi\n    done\n    echo \"[$str]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a array=()\n    local min= min_index= max= max_index=\n\n    # Split string\
    \ into array.\n    while IFS=' ' read -r number; do\n        array+=( \"$number\"\
    \ )\n    done <<< \"$1\"\n\n    # If there's only 1 value, return it.\n    if\
    \ (( \"${#array[@]}\" == 1 )); then\n        echo \"${array[0]}\"\n        return\n\
    \    fi\n\n    # The first element is always the minimum.\n    min=${array[0]}\n\
    \    min_index=0\n\n    # Iterate over the array to find max value.\n    for i\
    \ in \"${!array[@]}\"; do\n        if (( array[i] > max )); then\n           \
    \ max=${array[i]}\n            max_index=$i\n        fi\n    done\n\n    # Since\
    \ the first element is always the minimum, we simply ignore it.\n    array[0]=\n\
    \n    # Iterate over the array to find the next minimum.\n    for i in \"${!array[@]}\"\
    ; do\n        if (( array[i] < min )); then\n            min=${array[i]}\n   \
    \         min_index=$i\n        fi\n    done\n\n    echo \"$min\"\n    array[min_index]=\n\
    \n    # Exclude the max value from the array, then recursively call the function.\n\
    \    array[max_index]=\n    strange_sort_list \"${array[*]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ res=[]\n    local input=${1//[^0-9 ]/}\n    local -a list=($input)\n    local\
    \ max=${#list[@]}\n    local i=0\n\n    while [ $i -lt $max ]; do\n        min_max\
    \ min ${list[@]}\n        res+=(\"\\\"$min\\\"\")\n        max_min max ${list[@]}\n\
    \        res+=(\"\\\"$max\\\"\")\n        i=$((i+2))\n    done\n\n    echo \"\
    ${res[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe5yhlx_h.sh: line 22: min_max: command not found

    /tmp/tmpe5yhlx_h.sh: line 24: max_min: command not found

    /tmp/tmpe5yhlx_h.sh: line 22: min_max: command not found

    /tmp/tmpe5yhlx_h.sh: line 24: max_min: command not found

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    input=$1\n\
    \    # sorting input by number\n    input=$(echo $input | tr ' ' '\\n' | sort\
    \ -n | tr '\\n' ' ')\n    # create array from input\n    input=($input)\n    #\
    \ start with smallest value\n    res=${input[0]}\n    max=${#input[@]}\n    #\
    \ max-1 represents index of last element in array\n    while [[ $max -gt 1 ]];\
    \ do\n        # append max value to result\n        res+=\" ${input[max-1]}\"\n\
    \        # delete max element from array\n        unset input[max-1]\n       \
    \ # move to next value\n        max=$max-1\n        # append min value to result\n\
    \        res+=\" ${input[0]}\"\n        # delete min element from array\n    \
    \    unset input[0]\n        # move to next value\n        max=$max-1\n    done\n\
    \    # create array from result\n    res=($res)\n    # print result in expected\
    \ format\n    echo -n \"[\"\n    for value in ${res[@]}; do\n        echo -n \"\
    \\\"$value\\\", \"\n    done\n    echo -n \"]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Your\
    \ code here.\n  list=(\"$@\")\n  unset sorted_list\n  while [ ${#list[@]} -gt\
    \ 0 ]; do\n    min=$(array_min \"${list[@]}\")\n    unset min_pos\n    for i in\
    \ \"${!list[@]}\"; do\n      if [ \"${list[$i]}\" == \"$min\" ]; then\n      \
    \  min_pos=$i\n        break\n      fi\n    done\n    unset \"list[$min_pos]\"\
    \n    if [ -z ${sorted_list+x} ]; then\n      sorted_list=\"$min\"\n    else\n\
    \      sorted_list=\"$sorted_list $min\"\n    fi\n    if [ ${#list[@]} -gt 0 ];\
    \ then\n      max=$(array_max \"${list[@]}\")\n      unset max_pos\n      for\
    \ i in \"${!list[@]}\"; do\n        if [ \"${list[$i]}\" == \"$max\" ]; then\n\
    \          max_pos=$i\n          break\n        fi\n      done\n      unset \"\
    list[$max_pos]\"\n      sorted_list=\"$sorted_list $max\"\n    fi\n  done\n  echo\
    \ $(echo $sorted_list | sed 's/ /\",\"/g')\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=42 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ input=($1)\n    local min_num=$(echo ${input[@]} | tr ' ' '\\n' | sort -n |\
    \ head -n 1)\n    local min_num_index=$(echo ${input[@]} | tr ' ' '\\n' | grep\
    \ -bn ${min_num} | grep -oP \"\\d+\" | head -n 1)\n    local max_num=$(echo ${input[@]}\
    \ | tr ' ' '\\n' | sort -n | tac | head -n 1)\n    local max_num_index=$(echo\
    \ ${input[@]} | tr ' ' '\\n' | grep -bn ${max_num} | grep -oP \"\\d+\" | head\
    \ -n 1)\n    local input_len=${#input[@]}\n    local output=()\n    local current_min_num=${min_num}\n\
    \    local current_max_num=${max_num}\n    local i\n    local j\n\n    while [\
    \ ${#output[@]} -lt ${input_len} ]; do\n        output+=(\"\\\"${current_min_num}\\\
    \"\")\n        unset input[${min_num_index}]\n        input=(${input[@]})\n  \
    \      current_min_num=$(echo ${input[@]} | tr ' ' '\\n' | sort -n | head -n 1)\n\
    \        min_num_index=$(echo ${input[@]} | tr ' ' '\\n' | grep -bn ${current_min_num}\
    \ | grep -oP \"\\d+\" | head -n 1)\n        if [ ${#output[@]} -lt ${input_len}\
    \ ]; then\n            output+=(\"\\\"${current_max_num}\\\"\")\n            unset\
    \ input[${max_num_index}]\n            input=(${input[@]})\n            current_max_num=$(echo\
    \ ${input[@]} | tr ' ' '\\n' | sort -n | tac | head -n 1)\n            max_num_index=$(echo\
    \ ${input[@]} | tr ' ' '\\n' | grep -bn ${current_max_num} | grep -oP \"\\d+\"\
    \ | head -n 1)\n        fi\n   \n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr64sx0vy.sh: line 41: syntax error near unexpected token `}''

    /tmp/tmpr64sx0vy.sh: line 41: `}''

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$1\n    local len=0\n    local odd_list=\"\"\n    local even_list=\"\"\n\
    \    local odd_idx=0\n    local even_idx=0\n    local num=\"\"\n    local max_idx=0\n\
    \    local odd_max_idx=0\n    local even_max_idx=0\n    local idx=0\n    local\
    \ sorted_list=\"\"\n    local odd_max_num=0\n    local even_max_num=0\n    local\
    \ str=${list// /}\n    len=${#str}\n    len=$(( len - 1 ))\n    if [ $len -eq\
    \ -1 ]; then\n        echo \"[]\"\n        return\n    fi\n    # String -> Array\n\
    \    list=( $list )\n    idx=0\n    while [ $idx -le $len ]; do\n        num=${list[$idx]}\n\
    \        if [ $(( idx % 2 )) -eq 0 ]; then\n            even_list=\"$even_list\
    \ $num\"\n        else\n            odd_list=\"$odd_list $num\"\n        fi\n\
    \        idx=$(( idx + 1 ))\n    done\n    # Delete leading space\n    even_list=\"\
    ${even_list:1}\"\n    odd_list=\"${odd_list:1}\"\n    # Odds\n    idx=0\n    even_max_idx=0\n\
    \    even_max_num=${even_list[0]}\n    while [ $idx -le $len ]; do\n        num=${even_list[$idx]}\n\
    \        if [ $num -gt $even_max_num ]; then\n            even_max_num=$num\n\
    \            even_max_idx=$idx\n        fi\n        idx=$(( idx + 1 ))\n    done\n\
    \    # Evens\n    idx=0\n    odd_max_idx=0\n    odd_max_num=${odd_list[0]}\n \
    \   while [ $idx -le $len ]; do\n        num=${odd_list[$idx]}\n        if [ $num\
    \ -gt $odd_max_num ]; then\n            odd_max_num=$num\n            odd_max_idx=$\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzoj_c_iy.sh: line 72: syntax error near unexpected token `}''

    /tmp/tmpzoj_c_iy.sh: line 72: `}''

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ \"$#\" -eq 0 ]; then echo \"[]\"; return; fi\n  _min=$(sort -n <<< \"$1\"\
    \ | head -n 1)\n  if [ \"$_min\" -eq \"$1\" ]; then echo \"[\\\"$_min\\\"]\";\
    \ return; fi\n  _max=$(sort -n <<< \"$1\" | tail -n 1)\n  if [ \"$_max\" -eq \"\
    $1\" ]; then echo \"[\\\"$_max\\\"]\"; return; fi\n  _mid=$(cut -d \" \" -f 2-\
    \ <<< \"$1\")\n  echo \"[\\\"$_min\\\", \\\"$_max\\\"]\"$(strange_sort_list \"\
    $_mid\")\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmphlarlct6.sh: line 17: [: 1 2 3 4: integer expression expected

    /tmp/tmphlarlct6.sh: line 19: [: 1 2 3 4: integer expression expected

    /tmp/tmphlarlct6.sh: line 17: [: 2 3 4: integer expression expected

    /tmp/tmphlarlct6.sh: line 19: [: 2 3 4: integer expression expected

    /tmp/tmphlarlct6.sh: line 17: [: 3 4: integer expression expected

    /tmp/tmphlarlct6.sh: line 19: [: 3 4: integer expression expected

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo []\n    return\n  fi\n  res=()\n  while [ -n\
    \ \"$1\" ]; do\n    res+=(\"$(echo \"$1\" | tr ' ' '\\n' | sort -n | head -n 1)\"\
    )\n    res+=(\"$(echo \"$1\" | tr ' ' '\\n' | sort -n | tail -n 1)\")\n    [ -n\
    \ \"$(echo \"$1\" | tr ' ' '\\n' | sort -n | head -n 2 | tail -n 1)\" ] && res+=(\"\
    $(echo \"$1\" | tr ' ' '\\n' | sort -n | head -n 2 | tail -n 1)\")\n    [ -n \"\
    $(echo \"$1\" | tr ' ' '\\n' | sort -n | tail -n 2 | head -n 1)\" ] && res+=(\"\
    $(echo \"$1\" | tr ' ' '\\n' | sort -n | tail -n 2 | head -n 1)\")\n    shift;\
    \ shift; shift; shift\n  done\n  echo \"${res[@]}\" | tr ' ' ',' | sed 's/^/[/;s/,$/]/'\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -a arr=()\n    for i in $1; do\n        arr[${#arr[@]}]=$i\n    done\n    local\
    \ -a sorted_arr=()\n    local arr_len=${#arr[@]}\n    while (( arr_len )); do\n\
    \        local min=${arr[0]}\n        local max=${arr[0]}\n        local min_index=0\n\
    \        local max_index=0\n        for (( i=0; i<${#arr[@]}; i++ )); do\n   \
    \         if (( arr[i] < min )); then\n                min=${arr[i]}\n       \
    \         min_index=$i\n            fi\n            if (( arr[i] > max )); then\n\
    \                max=${arr[i]}\n                max_index=$i\n            fi\n\
    \        done\n        sorted_arr[${#sorted_arr[@]}]=$min\n        unset arr[$min_index]\n\
    \        if (( arr_len % 2 )); then\n            sorted_arr[${#sorted_arr[@]}]=$max\n\
    \            unset arr[$max_index]\n        fi\n        arr_len=$(($arr_len -\
    \ 1))\n    done\n    local -a ret=()\n    for i in ${sorted_arr[@]}; do\n    \
    \    ret[${#ret[@]}]=\"\\\"$i\\\"\"\n    done\n    echo \"[\"$(echo ${ret[@]}\
    \ | tr ' ' ',')\"]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    input=$1\n\
    \   \n    # Task 1: convert input string to array\n    # Task 2: sort array\n\
    \    # Task 3: do the strange sort\n    # Task 4: convert array to json list\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list; list=\"$(sort -n <<< \"$1\")\"\n    local output=(); local tmp=()\n  \
    \  for ((i=0; i<${#list[@]}; i++)); do\n        if ((i%2==0)); then\n        \
    \    output+=(\"${list[i]}\")\n        else\n            tmp+=(\"${list[i]}\"\
    )\n        fi\n    done\n    output+=(\"${tmp[@]}\" | rev)\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwqcspoxl.sh: line 24: syntax error near unexpected token `|''

    /tmp/tmpwqcspoxl.sh: line 24: `    output+=("${tmp[@]}" | rev)''

    /tmp/tmpwqcspoxl.sh: line 26: syntax error near unexpected token `}''

    /tmp/tmpwqcspoxl.sh: line 26: `}''

    '
  stdout: '

    '
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=$1\n    local res=\n    if [ -z \"$list\" ]; then\n        res=[]\n   \
    \ else\n        local min=$(echo \"$list\" | tr ' ' '\\n' | sort -n | head -n\
    \ 1)\n        local max=$(echo \"$list\" | tr ' ' '\\n' | sort -n | tail -n 1)\n\
    \        local min_to_max=$(echo \"$list\" | tr ' ' '\\n' | sort -n | sed \"s/^$min//;s/$max$//\"\
    )\n        local count=$(echo \"$list\" | wc -w)\n        local new_min=\n   \
    \     local new_max=\n        for (( i=0; i<count; i++ )); do\n            if\
    \ (( i % 2 == 0 )); then\n                if [ -z \"$new_min\" ]; then\n     \
    \               res=\"${res}\\\"$min\\\"\"\n                    new_min=$min\n\
    \                else\n                    res=\"${res}\\\"$new_min\\\"\"\n  \
    \              fi\n            else\n                if [ -z \"$new_max\" ]; then\n\
    \                    res=\"${res}\\\"$max\\\"\"\n                    new_max=$max\n\
    \                else\n                    res=\"${res}\\\"$new_max\\\"\"\n  \
    \              fi\n            fi\n            if [ -n \"$min_to_max\" ]; then\n\
    \                new_min=$(echo \"$min_to_max\" | head -n 1)\n               \
    \ new_max=$(echo \"$min_to_max\" | tail -n 1)\n                min_to_max=$(echo\
    \ \"$min_to_max\" | sed \"s/^$new_min//;s/$new_max$//\")\n            fi\n   \
    \     done\n    fi\n    echo $res\n}\n\ncandidate() {\n    strange_sort_list \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a list=($1)\n  local list_len=${#list[@]}\n  local -a result=()\n  local min=0\n\
    \  local max=$((list_len - 1))\n  local mid=$((max / 2))\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  for ((i=0; i < list_len; i++)); do\n    if ((i % 2\
    \ == 0)); then\n      result[j++]=${list[min++]}\n    else\n      result[j++]=${list[max--]}\n\
    \    fi\n  done\n  echo -n \"[\"\n  for ((k=0; k < j; k++)); do\n    if ((k ==\
    \ 0)); then\n      echo -n \"\\\"${result[k]}\\\"\"\n    else\n      echo -n \"\
    , \\\"${result[k]}\\\"\"\n    fi\n  done\n  echo \"]\"\n}\n\ncandidate() {\n \
    \   strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    list=($1)\n\
    \    if [[ ${#list[@]} -eq 0 ]]; then\n        echo '[]'\n        return\n   \
    \ fi\n    local sort_list=()\n    while [[ ${#list[@]} -gt 0 ]]; do\n        local\
    \ min=${list[0]}\n        local max=${list[0]}\n        for el in ${list[@]};\
    \ do\n            if [[ $el -lt $min ]]; then\n                min=$el\n     \
    \       fi\n            if [[ $el -gt $max ]]; then\n                max=$el\n\
    \            fi\n        done\n        local min_index=-1\n        local max_index=-1\n\
    \        for (( i=0; i<${#list[@]}; i++ )); do\n            if [[ ${list[$i]}\
    \ -eq $min ]]; then\n                min_index=$i\n            fi\n          \
    \  if [[ ${list[$i]} -eq $max ]]; then\n                max_index=$i\n       \
    \     fi\n        done\n        list=(\"${list[@]:0:$min_index}\" \"${list[@]:$((min_index+1))}\"\
    )\n        sort_list+=(\"$min\")\n        if [[ ${#list[@]} -eq 0 ]]; then\n \
    \           echo \"[$(printf \"%s,\" \"${sort_list[@]}\")]\"\n            return\n\
    \        fi\n        list=(\"${list[@]:0:$max_index}\" \"${list[@]:$((max_index+1))}\"\
    )\n        sort_list+=(\"$max\")\n    done\n    echo \"[$(printf \"%s,\" \"${sort_list[@]}\"\
    )]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -n l=$1\n\n    if [ \"${#l[@]}\" -eq 0 ]; then\n        echo \"[]\"\n      \
    \  return\n    fi\n\n    local -a result\n    local -a sorted_list\n    local\
    \ -i length=${#l[@]}\n    local -i half_length=$((length / 2))\n    local -i rem=$((length\
    \ % 2))\n    local -i idx\n    local -i i=0\n    local -i j=$((length - 1))\n\n\
    \    for e in \"${l[@]}\"; do\n        sorted_list[$i]=\"$e\"\n        ((i++))\n\
    \    done\n\n    sorted_list=($(printf \"%s\\n\" \"${sorted_list[@]}\" | sort\
    \ -n))\n\n    i=0\n    while [ $i -lt $half_length ]; do\n        result[$i]=\"\
    ${sorted_list[$i]}\"\n        ((i++))\n    done\n\n    if [ $rem -eq 1 ]; then\n\
    \        result[$i]=\"${sorted_list[$i]}\"\n        ((i++))\n    fi\n\n    while\
    \ [ $i -lt $length ]; do\n        result[$i]=\"${sorted_list[$j]}\"\n        ((i++))\n\
    \        ((j--))\n    done\n\n    printf \"\\\"%s\\\"\" \"${result[@]}\"\n}\n\n\
    candidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\"\
    ) = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n \
    \   [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"\
    5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp2e5i506p.sh: line 15: local: `1 2 3 4'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    read\
    \ -a nums <<< $1\n    len=${#nums[@]}\n    while [ $len -gt 0 ]; do\n        if\
    \ [ $len -lt 2 ]; then\n            echo -n \"\\\"${nums[0]}\\\"\"\n         \
    \   break\n        fi\n        min_i=0\n        max_i=0\n        for ((i=0; i<$len;\
    \ i++)); do\n            if [ ${nums[$i]} -lt ${nums[$min_i]} ]; then\n      \
    \          min_i=$i\n            fi\n            if [ ${nums[$i]} -gt ${nums[$max_i]}\
    \ ]; then\n                max_i=$i\n            fi\n        done\n        echo\
    \ -n \"\\\"${nums[$min_i]}\\\" \"\n        unset nums[$min_i]\n        len=$((len-1))\n\
    \        if [ $len -lt 2 ]; then\n            echo -n \"\\\"${nums[0]}\\\"\"\n\
    \            break\n        fi\n        echo -n \"\\\"${nums[$max_i]}\\\" \"\n\
    \        unset nums[$max_i]\n        len=$((len-1))\n    done\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuz_yq4uw.sh: line 25: [: 2: unary operator expected

    /tmp/tmpuz_yq4uw.sh: line 28: [: 2: unary operator expected

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ arg_list=()\n  for arg in $1; do\n    arg_list+=(\"$arg\")\n  done\n  arg_list=($(echo\
    \ \"${arg_list[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '))\n  local max=${#arg_list[@]}\n\
    \  local result=()\n  local i=0\n  while [ $i -lt $max ]; do\n    if [ $((i %\
    \ 2)) -eq 0 ]; then\n      result+=(\"${arg_list[$i]}\")\n    else\n      result+=(\"\
    ${arg_list[-$((i / 2 + 1))]}\")\n    fi\n    i=$((i + 1))\n  done\n  echo \"${result[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    arg=$(echo\
    \ \"$1\" | tr \" \" \"\\n\")\n    res=\"\"\n    for ((i=0; i<$(echo \"$arg\" |\
    \ wc -l); i++)); do\n        if [ $(($i % 2)) -eq 0 ]; then\n            res=\"\
    $res $(echo \"$arg\" | sort -n | head -1)\"\n            arg=$(echo \"$arg\" |\
    \ sort -n | tail -n +2)\n        else\n            res=\"$res $(echo \"$arg\"\
    \ | sort -nr | head -1)\"\n            arg=$(echo \"$arg\" | sort -nr | tail -n\
    \ +2)\n        fi\n    done\n    echo $(echo $res | tr \" \" \"\\n\")\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=\n    for i in $1; do\n        list+=( \"$i\" )\n    done\n    local sort_list=()\n\
    \    local start=0\n    local end=$(( ${#list[@]} - 1 ))\n    local step=1\n \
    \   while [[ \"$start\" -le \"$end\" ]]; do\n        if (( step > 0 )); then\n\
    \            sort_list+=( \"${list[$start]}\" )\n            start=$(( start +\
    \ 1 ))\n        else\n            sort_list+=( \"${list[$end]}\" )\n         \
    \   end=$(( end - 1 ))\n        fi\n        step=$(( -step ))\n    done\n    echo\
    \ ${sort_list[@]}\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  :\n\
    }\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n    fi\n    local\
    \ list=$1\n    local list_min=$(echo \"$list\" | tr ' ' '\\n' | sort -n | head\
    \ -n 1)\n    local list_max=$(echo \"$list\" | tr ' ' '\\n' | sort -nr | head\
    \ -n 1)\n    local list_without_min_max=$(echo \"$list\" | tr ' ' '\\n' | grep\
    \ -vw \"$list_min\" | grep -vw \"$list_max\")\n    echo \"$list_min $list_max\
    \ $list_without_min_max\" | tr ' ' '\\n' | sort -nr | tr '\\n' ' ' | sed 's/^\\\
    (.*\\) $/\\1/' | sed 's/ /\\],\\[/g' | sed 's/^\\(.*\\)$/[\\1]/'\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 2
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # write\
    \ your code here\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjhkkuylp.sh: line 16: syntax error near unexpected token `}''

    /tmp/tmpjhkkuylp.sh: line 16: `}''

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ list=()\n    local res=()\n    list=($(echo \"$1\" | tr \" \" \"\\n\" | sort\
    \ -n))\n    local len=${#list[@]}\n    if [ $len -eq 0 ]; then\n        echo \"\
    []\"\n        return\n    fi\n    if [ $len -eq 1 ]; then\n        echo \"[\\\"\
    ${list[0]}\\\"]\"\n        return\n    fi\n    local pos=0\n    local neg=0\n\
    \    for ((i=0; i<${#list[@]}; i++)); do\n        if [ $pos -eq $((len/2)) ];\
    \ then\n            neg=1\n        fi\n        if [ $pos -ne $((len/2)) ] && [\
    \ $neg -eq 0 ]; then\n            res[$i]=${list[$pos]}\n            ((pos++))\n\
    \        else\n            ((neg--))\n            res[$i]=${list[$neg]}\n    \
    \    fi\n    done\n    echo \"[\\\"${res[@]}\\\"]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo \"[]\"\n    return\n  fi\n  local -a vals=($1)\n\
    \  local -i len=${#vals[@]}\n  local -i temp_len=len\n  local -i i=0\n  local\
    \ -i j=0\n  local -i k=0\n  local str=\"\"\n  local temp=\"\"\n  local sort_mod=\"\
    \"\n  local -i cur_pos=0\n  local -i next_pos=0\n  local -i mod=\"\"\n  local\
    \ -i sort_mod=\"\"\n  local -i opposite_mod=\"\"\n  while [[ $i -lt $len ]]; do\n\
    \    k=$i\n    cur_pos=$k\n    if [[ $cur_pos -eq $((len - 1)) ]]; then\n    \
    \  next_pos=0\n    else\n      next_pos=$((cur_pos + 1))\n    fi\n    mod=$((len\
    \ % 2))\n    sort_mod=$((cur_pos % 2))\n    opposite_mod=$(((cur_pos + 1) % 2))\n\
    \    if [[ $mod -eq 0 ]]; then\n      if [[ $sort_mod -eq 0 ]]; then\n       \
    \ str+=\"\\\"${vals[cur_pos]}\\\"\"\n      else\n        str+=\"\\\"${vals[next_pos]}\\\
    \"\"\n      fi\n    else\n      if [[ $sort_mod -eq 0 ]]; then\n        str+=\"\
    \\\"${vals[next_pos]}\\\"\"\n      else\n        str+=\"\\\"${vals[cur_pos]}\\\
    \"\"\n      fi\n    fi\n    str+=\", \"\n    i=$((i + 1))\n  done\n  temp=${str:0:${#str}-2}\n\
    \  echo \"[$temp]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  if\
    \ [ -z \"$1\" ]; then\n    echo -n \"[]\"\n    return\n  fi\n  declare -a arr=()\n\
    \  OLDIFS=$IFS\n  IFS=' '\n  for v in $1; do\n    arr+=(\"$v\")\n  done\n  IFS=$OLDIFS\n\
    \  declare -a ret=()\n  while true; do\n    if [ \"${#arr[@]}\" -eq 0 ]; then\n\
    \      break\n    fi\n    ret+=(\"$(echo -n \"${arr[0]}\")\")\n    if [ \"${#arr[@]}\"\
    \ -gt 1 ]; then\n      ret+=(\"$(echo -n \"${arr[-1]}\")\")\n    fi\n    unset\
    \ arr[0]\n    unset arr[-1]\n  done\n  echo -n \"[\"\n  first=1\n  for v in \"\
    ${ret[@]}\"; do\n    if [ \"$first\" -eq 1 ]; then\n      first=0\n    else\n\
    \      echo -n \", \"\n    fi\n    echo -n '\"'\n    echo -n \"$v\"\n    echo\
    \ -n '\"'\n  done\n  echo -n \"]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ inp=\"$@\"\n    # Check if there is any input at all, otherwise return empty\
    \ list.\n    if [ -z \"$inp\" ]; then\n        echo \"[]\"\n        return\n \
    \   fi\n    # First sort it in ascending order, and store it in array.\n    local\
    \ -a arr=($(echo \"$inp\" | sort -n))\n    # Then remove all duplicates, and store\
    \ it in another array.\n    local -a inp_array=($(echo \"$inp\" | tr ' ' '\\n'\
    \ | sort -u))\n    # Create two temporary arrays, to hold the final result.\n\
    \    local -a tmp1\n    local -a tmp2\n    local -a result\n    # Iterate through\
    \ original input array,\n    # and store it in one of the temporary arrays.\n\
    \    for i in \"${!arr[@]}\"; do\n        if (( (i + 1) % 2 == 0 )); then\n  \
    \          tmp1+=(\"${arr[$i]}\")\n        else\n            tmp2+=(\"${arr[$i]}\"\
    )\n        fi\n    done\n    # Append elements of the second temporary array,\
    \ in reverse.\n    for i in \"${!tmp2[@]::${#tmp2[@]}-1}\"; do\n        result+=(\"\
    ${tmp2[$i]}\")\n    done\n    # Append elements of the first temporary array.\n\
    \    for i in \"${!tmp1[@]}\"; do\n        result+=(\"${tmp1[$i]}\")\n    done\n\
    \    # Print the final result.\n    echo \"[\"$(printf '\"%s\", ' \"${result[@]}\"\
    )\"]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5\
    \ 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcm280245.sh: line 39: 1 3: invalid variable name

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -r integers=\"$1\"\n    if [[ -z \"$integers\" ]]; then\n        echo \"[]\"\
    \n        return\n    fi\n    if [[ \"$integers\" =~ ^[0-9]+$ ]]; then\n     \
    \   printf \"[\\\"%s\\\"]\\n\" \"$integers\"\n        return\n    fi\n    local\
    \ array\n    array=()\n    for int in $integers; do\n        array+=(\"$int\"\
    )\n    done\n    local -r array_length=${#array[@]}\n    if [[ \"$array_length\"\
    \ -eq 1 ]]; then\n        printf \"[\\\"%s\\\"]\\n\" \"$integers\"\n        return\n\
    \    fi\n    local first\n    local second\n    local result\n    result=()\n\
    \    while true; do\n        if [[ \"$array_length\" -eq 0 ]]; then\n        \
    \    break\n        fi\n        first=$(printf \"%s\\n\" \"${array[@]}\" | sort\
    \ -n | head -n 1)\n        result+=(\"$first\")\n        unset array[$(printf\
    \ \"%s\\n\" \"${!array[@]}\" | grep -n -m 1 \"$first\" | cut -d: -f1)]\n     \
    \   if [[ \"$array_length\" -eq 1 ]]; then\n            break\n        fi\n  \
    \      second=$(printf \"%s\\n\" \"${array[@]}\" | sort -n | tail -n 1)\n    \
    \    result+=(\"$second\")\n        unset array[$(printf \"%s\\n\" \"${!array[@]}\"\
    \ | grep -n -m 1 \"$second\" | cut -d: -f1)]\n        array_length=$(($array_length\
    \ - 2))\n    done\n    printf \"[%s]\\n\" \"$(printf '\"%s\", ' \"${result[@]}\"\
    \ | sed 's/, $//')\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp3hll6v43.sh: line 50: unset: `array[]'': not a valid identifier

    /tmp/tmp3hll6v43.sh: line 51: array_length: readonly variable

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  # Your\
    \ code here\n  [ $# -eq 0 ] && echo -n \"[]\" && return 0\n  min=`echo $@ | cut\
    \ -d ' ' -f 1`\n  new_list=`echo $@ | sed 's/^[0-9]*//'`\n  # shellcheck disable=SC2034\n\
    \  max=`echo $new_list | cut -d ' ' -f 1`\n  for number in $new_list; do\n   \
    \ if [ \"$number\" -gt \"$max\" ]; then\n      max=$number\n    fi\n  done\n \
    \ echo -n \"$min \"\n  echo -n \"$max \"\n  new_list=`echo $new_list | sed \"\
    s/$max//\"`\n  new_list=`echo $new_list | sed \"s/$min//\"`\n  if [ $new_list\
    \ != '' ]; then\n    strange_sort_list $new_list\n  fi\n}\n\ncandidate() {\n \
    \   strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\"\
    \ ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpzmvsutdg.sh: line 30: [: too many arguments

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ input=($1)\n    local output=()\n    local left=()\n    local right=()\n   \
    \ local current_min=0\n    local current_max=0\n    local sorted=0\n    local\
    \ len=\"${#input[@]}\"\n    local i=0\n    while [ \"${sorted}\" -lt \"${len}\"\
    \ ]; do\n        current_min=9999999999\n        current_max=-9999999999\n   \
    \     left=()\n        right=()\n        for i in \"${input[@]}\"; do\n      \
    \      if [ \"${i}\" -le \"${current_min}\" ]; then\n                current_min=\"\
    ${i}\"\n            fi\n            if [ \"${i}\" -ge \"${current_max}\" ]; then\n\
    \                current_max=\"${i}\"\n            fi\n        done\n        for\
    \ i in \"${input[@]}\"; do\n            if [ \"${i}\" -eq \"${current_min}\" ];\
    \ then\n                left+=(\"${i}\")\n            else\n                right+=(\"\
    ${i}\")\n            fi\n        done\n        if [ \"$((sorted % 2))\" -eq 0\
    \ ]; then\n            output+=(\"${left[@]}\")\n        else\n            output+=(\"\
    ${right[@]}\")\n        fi\n        input=(\"${right[@]}\")\n        sorted=\"\
    $((sorted + left_count))\"\n    done\n    echo \"${output[@]}\"\n}\n\ncandidate()\
    \ {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8\
    \ 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"\
    5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\"\
    ) = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"111111\" ]]\n\
    }\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=39 encoding='utf-8'>
  timestamp: 1660025060
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local\
    \ -a numbers # declare associative array\n  local n\n  for n in $1; do\n    numbers[$n]=$n\n\
    \  done\n  echo -n \"[\"\n  local min\n  local max\n  local min_flag=0\n  for\
    \ ((i=0; i<${#numbers[@]}; i++)); do\n    min=100\n    max=0\n    for n in ${numbers[@]};\
    \ do\n      (( $n < $min )) && min=$n\n      (( $n > $max )) && max=$n\n    done\n\
    \    if (( $min_flag )); then\n      echo -n '\"'$min'\"'\n      min_flag=0\n\
    \    else\n      echo -n '\"'$max'\"'\n      min_flag=1\n    fi\n    numbers[$min]=''\n\
    \    numbers[$max]=''\n    [[ $i -lt $(( ${#numbers[@]} - 1 )) ]] && echo -n \"\
    , \"\n  done\n  echo \"]\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n\tlist=($(sort\
    \ -n <<<\"$1\"))\n\tsorted_list=()\n\twhile [ ${#list[@]} -gt 0 ]; do\n\t\tsorted_list+=(\"\
    ${list[0]}\")\n\t\tlist=(${list[@]:1})\n\t\tif [ ${#list[@]} -gt 0 ]; then\n\t\
    \t\tsorted_list+=(\"${list[-1]}\")\n\t\t\tlist=(${list[@]:0:${#list[@]}-1})\n\t\
    \tfi\n\tdone\n\tprintf \"[%s]\" \"$(printf '\"%s\", ' \"${sorted_list[@]}\" |\
    \ sed 's/, $//')\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ tmpl=\"$(mktemp)\"\n    local l=\"$1\"\n    local res=\"\"\n    local count=$(echo\
    \ \"$l\" | wc -w)\n    local a=\"\"\n    local b=\"\"\n    local x=\"\"\n    if\
    \ [ \"$count\" -eq 0 ]; then\n        echo \"[]\"\n        return\n    fi\n  \
    \  if [ \"$count\" -eq 1 ]; then\n        echo \"[\\\"$l\\\"]\"\n        return\n\
    \    fi\n    echo \"$l\" | sort -n > \"$tmpl\"\n    res=\"[\\\"$(head -n 1 \"\
    $tmpl\")\\\"\"\n    while [ \"$count\" -gt 1 ]; do\n        tail -n +2 \"$tmpl\"\
    \ > \"$tmpl.1\"\n        mv \"$tmpl.1\" \"$tmpl\"\n        count=$(($count - 1))\n\
    \        a=\"$(head -n 1 \"$tmpl\")\"\n        b=\"$(tail -n 1 \"$tmpl\")\"\n\
    \        x=\"$(($count % 2))\"\n        if [ \"$x\" -eq 1 ]; then\n          \
    \  res=\"$res, \\\"$a\\\"\"\n        else\n            res=\"$res, \\\"$b\\\"\"\
    \n        fi\n    done\n    res=\"$res]\"\n    echo \"$res\"\n    rm \"$tmpl\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ input=($1)\n    local output=()\n    local count=${#input[@]}\n    local v\n\
    \    if (( count > 0 )); then\n        for (( i=0; i<count; i++ )); do\n     \
    \       if (( (i+1) % 2 )); then\n                v=$(echo \"${input[@]}\" | tr\
    \ ' ' '\\n' | sort -n | head -n 1)\n                input=($(echo \"${input[@]}\"\
    \ | tr ' ' '\\n' | grep -v \"^$v$\"))\n            else\n                v=$(echo\
    \ \"${input[@]}\" | tr ' ' '\\n' | sort -nr | head -n 1)\n                input=($(echo\
    \ \"${input[@]}\" | tr ' ' '\\n' | grep -v \"^$v$\"))\n            fi\n      \
    \      output=(${output[@]} $v)\n        done\n    fi\n    echo \"${output[@]}\"\
    \n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate \"5 6 7\
    \ 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5 2 4 3\"\
    \ ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[ $(candidate\
    \ \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate \"0 2 2 2\
    \ 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\") = \"\
    111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025056
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ Write your code here\n    # To print results to the standard output you can\
    \ use echo\n    # Example: echo \"Hello world\"\n    arr=($1)\n    result=[]\n\
    \    length=${#arr[@]}\n    while [ $length -gt 0 ]\n    do\n        max=$length\n\
    \        min=0\n        for (( i=0; i<$length; i++ ))\n        do\n          \
    \  if [ ${arr[$i]} -gt ${arr[$max]} ]\n            then\n                max=$i\n\
    \            fi\n            if [ ${arr[$i]} -lt ${arr[$min]} ]\n            then\n\
    \                min=$i\n            fi\n        done\n        echo -n $min\n\
    \        echo -n $max\n        echo\n        result+=${arr[$min]}\n        arr=(\"\
    ${arr[@]:0:$min}\" \"${arr[@]:$((min+1))}\")\n        result+=${arr[$max]}\n \
    \       arr=(\"${arr[@]:0:$max}\" \"${arr[@]:$((max+1))}\")\n        length=$[length-2]\n\
    \    done\n    for i in ${result[@]}\n    do\n        echo -n $i\n        echo\
    \ -n \" \"\n    done\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[\
    \ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4\
    \ 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\"\
    \ ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n\
    \    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[\
    \ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp6md_v137.sh: line 27: [: 1: unary operator expected

    /tmp/tmp6md_v137.sh: line 27: [: 2: unary operator expected

    /tmp/tmp6md_v137.sh: line 27: [: 3: unary operator expected

    /tmp/tmp6md_v137.sh: line 27: [: 4: unary operator expected

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local\
    \ -n list=$1\n    local index=0\n    local -a odd even\n    for i in \"${list[@]}\"\
    ; do\n        if [[ $((++index % 2)) -eq 0 ]]; then\n            even+=(\"$i\"\
    )\n        else\n            odd+=(\"$i\")\n        fi\n    done\n    echo \"\
    ${odd[@]}\" \"${even[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpznwdp40i.sh: line 15: local: `1 2 3 4'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660025055
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    if\
    \ [ $# -eq 0 ]; then\n        echo []\n        return\n    fi\n    python3 -c\
    \ \"from itertools import cycle;\nimport re;\n\nprint('[', end='')\nl = re.split(r'\
    \ ', '$1')\nl.sort()\nfor i in cycle([0, -1]):\n    if len(l) == 0:\n        break\n\
    \    print('\\\"' + l.pop(i) + '\\\"', end='')\n    if len(l) > 0:\n        print(',\
    \ ', end='')\nprint(']')\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n\
    \    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1\
    \ 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5\
    \ 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025056
- exit_code: 1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    #\
    \ your code here\n    local args=\"$1\"\n    local res=[]\n    IFS=' ' read -r\
    \ -a arr <<< \"$args\"\n    echo \"[\"\n\n    for (( i=0; i<${#arr[@]}; i++ ));\
    \ do\n        if [ $((i%2)) -eq 0 ]; then\n            res+=(\"\\\"$(echo \"${arr[@]}\"\
    \ | sort -n | head -n 1)\\\"\")\n            echo \"${res[@]}\"\n            arr=(${arr[@]/$(echo\
    \ \"${arr[@]}\" | sort -n | head -n 1)/})\n        else\n            res+=(\"\\\
    \"$(echo \"${arr[@]}\" | sort -nr | head -n 1)\\\"\")\n            echo \"${res[@]}\"\
    \n            arr=(${arr[@]/$(echo \"${arr[@]}\" | sort -nr | head -n 1)/})\n\
    \        fi\n    done\n    echo \"]\"\n}\n\ncandidate() {\n    strange_sort_list\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2\
    \ 3\" ]]\n    [[ $(candidate \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate\
    \ \"1 2 3 4 5\") = \"1 5 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"\
    1 9 5 8 6 7\" ]]\n    [[ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\"\
    \ ]]\n    [[ $(candidate \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n \
    \   [[ $(candidate \"111111\") = \"111111\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025055
- exit_code: -1
  program: "#!/bin/bash\n# Given list of integers, return list in strange order.\n\
    # Strange sorting, is when you start with the minimum value,\n# then maximum of\
    \ the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list\
    \ \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list\
    \ \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list\
    \ \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    input=($1)\n\
    \    output=()\n    echo \"input: ${input[@]}\"\n    start=0\n    end=$((${#input[@]}\
    \ - 1))\n    direction=1\n    while [ $start -le $end ]; do\n        output+=(${input[$start]})\n\
    \        if [ $direction -eq 1 ]; then\n            start=$(($start + 1))\n  \
    \      else\n            start=$(($start - 1))\n        fi\n        if [ $start\
    \ -eq $end ]; then\n            break\n        fi\n        echo \"output: ${output[@]}\"\
    \n        echo \"start: $start\"\n        echo \"end: $end\"\n        if [ $direction\
    \ -eq 1 ]; then\n            end=$(($end - 1))\n        else\n            end=$(($end\
    \ + 1))\n        fi\n        direction=$(($direction * -1))\n    done\n    echo\
    \ \"${output[@]}\"\n}\n\ncandidate() {\n    strange_sort_list \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"1 2 3 4\") = \"1 4 2 3\" ]]\n    [[ $(candidate\
    \ \"5 6 7 8 9\") = \"5 9 6 8 7\" ]]\n    [[ $(candidate \"1 2 3 4 5\") = \"1 5\
    \ 2 4 3\" ]]\n    [[ $(candidate \"5 6 7 8 9 1\") = \"1 9 5 8 6 7\" ]]\n    [[\
    \ $(candidate \"5 5 5 5\") = \"5 5 5 5\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"1 2 3 4 5 6 7 8\") = \"1 8 2 7 3 6 4 5\" ]]\n    [[ $(candidate\
    \ \"0 2 2 2 5 5 -5 -5\") = \"-5 5 -5 5 0 2 2 2\" ]]\n    [[ $(candidate \"111111\"\
    ) = \"111111\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=47 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=20 encoding='utf-8'>
  timestamp: 1660025061
