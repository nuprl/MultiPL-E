name: HumanEval_93_encode
language: sh
prompt: "#!/bin/bash\n# Write a function that takes a message, and encodes in such\
  \ a \n# way that it swaps case of all letters, replaces all vowels in \n# the message\
  \ with the letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n\
  # >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\n\
  encode() {\n"
tests: "}\n\ncandidate() {\n    encode \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"TEST\") = \"tgst\" ]]\n    [[ $(candidate \"Mudasir\") = \"mWDCSKR\" ]]\n  \
  \  [[ $(candidate \"YES\") = \"ygs\" ]]\n    [[ $(candidate \"This is a message\"\
  ) = \"tHKS KS C MGSSCGG\" ]]\n    [[ $(candidate \"I DoNt KnOw WhAt tO WrItE\")\
  \ = \"k dQnT kNqW wHcT Tq wRkTg\" ]]\n}\n\nrun_test"
completions: ["    INPUT=$1\n    # This is a comment\n    # INPUT=`echo $1 | tr '[a-z][A-Z]'\
    \ '[A-Z][a-z]'`\n    # echo $INPUT | tr '[aeiou]' `echo {a..z} | sed 's/[aeiou]//g'`\n\
    \    # echo $INPUT | tr '[aeiou]' '[bcdfghjklmnpqrstvwxyz]'\n    echo $INPUT |\
    \ tr '[aeiou]' '{cdfghjklmnpqrstvwxyz}'", "  _input=${1,,}\n  _output=\n  for\
    \ (( _i=0; _i<${#_input}; _i++ )); do\n    case ${_input:_i:1} in\n      a)\n\
    \        _output=${_output}c\n        ;;\n      e)\n        _output=${_output}g\n\
    \        ;;\n      i)\n        _output=${_output}k\n        ;;\n      o)\n   \
    \     _output=${_output}q\n        ;;\n      u)\n        _output=${_output}w\n\
    \        ;;\n      *)\n        _output=${_output}${_input:_i:1}\n        ;;\n\
    \    esac\n  done\n  echo ${_output}", "    echo $1 | tr \"aeiouAEIOU\" \"egilopEGILOP\"\
    \ | tr '[:lower:]' '[:upper:]'", "    # Abort if no string was provided\n    if\
    \ [ -z \"$1\" ]; then\n        echo \"encode(): No string provided\" >&2\n   \
    \     return 1\n    fi\n\n    # Declare encoding table\n    declare -A encode=([a]=c\
    \ [e]=g [i]=k [o]=q [u]=s [A]=C [E]=G [I]=K [O]=Q [U]=S)\n\n    # Perform substitution;\
    \ loop over every character in the string\n    for (( i=0; i<${#1}; i++ )); do\n\
    \        # Get character at $i in string\n        local c=${1:$i:1}\n\n      \
    \  # Do substitution if character is a key in encoding table\n        if [ -n\
    \ \"${encode[$c]}\" ]; then\n            echo -n \"${encode[$c]}\"\n        else\n\
    \            echo -n \"$c\"\n        fi\n    done\n\n    # Start a new line\n\
    \    echo", "   # YOUR CODE HERE\n   echo \"\"", "    echo \"$1\" | tr 'A-Za-z'\
    \ 'N-ZA-Mn-za-m' | tr 'AEIOUaeiou' 'CGFILcgfil'", "    declare -r message=\"$1\"\
    \n    #swap case\n    declare -r swapped=$(echo \"$message\" | tr \"[:lower:]\"\
    \ \"[:upper:]\" | tr \"[:upper:]\" \"[:lower:]\")\n    #replace vowels\n    declare\
    \ -r vowels=$(echo \"$swapped\" | tr 'aeiou' 'eioua')\n    #write result\n   \
    \ echo \"$vowels\"", "    # use tr to swap case\n    local upstr=\"$(tr '[:lower:]'\
    \ '[:upper:]' <<<\"$1\")\"\n    local lowstr=\"$(tr '[:upper:]' '[:lower:]' <<<\"\
    $1\")\"\n    # use sed to replace all vowels with letters that appear two places\
    \ ahead\n    # in the alphabet\n    lowstr=\"$(sed 's/[aeiou]/\\(b\\|c\\|d\\|f\\\
    |g\\|h\\|j\\|k\\|l\\|m\\|n\\|p\\|q\\|r\\|s\\|t\\|v\\|w\\|x\\|y\\|z\\)/g' <<<\"\
    $lowstr\")\"\n    upstr=\"$(sed 's/[AEIOU]/\\(B\\|C\\|D\\|F\\|G\\|H\\|J\\|K\\\
    |L\\|M\\|N\\|P\\|Q\\|R\\|S\\|T\\|V\\|W\\|X\\|Y\\|Z\\)/g' <<<\"$upstr\")\"\n  \
    \  echo \"$upstr\"\n    echo \"$lowstr\"", "    local output=\"\"\n    for ((i=0;\
    \ i<${#1}; i++)); do\n        if [[ ${1:$i:1} =~ [aeiouAEIOU] ]]; then\n     \
    \       local ascii=$(printf \"%d\" \"'${1:$i:1}\")\n            if (( $ascii\
    \ >= 97 && $ascii <= 102)); then\n                ascii=$((ascii+20))\n      \
    \      elif (( $ascii >= 65 && $ascii <= 70)); then\n                ascii=$((ascii+20))\n\
    \            else\n                ascii=$((ascii+2))\n            fi\n      \
    \      output+=$(printf \\\\$(printf '%03o' $ascii))\n        else\n         \
    \   output+=$(printf \"%s\" \"${1:$i:1}\")\n        fi\n    done\n    echo $output",
  "  echo $1 | tr '[:lower:]' '[:upper:]' | tr '[A,E,I,O,U]' '[C,G,K,O,S]'", "  echo\
    \ $1 | sed -e 's/\\(.\\)/\\U\\1/g' -e 's/[AEIOU]/\\x/g' -e 's/[^A-Z]//g' -e 's/X\\\
    ([BCDFGHJKLMNPQRSTVWXYZ]\\)/\\x\\1/g' -e 's/Y\\([BCDFGHJKLMNPQRSTVWXYZ]\\)/Z\\\
    1/g'", "    # get number of letters in alphabet\n    ALPHABET_SIZE=$(echo {a..z}\
    \ | wc -w)\n    # loop through each character in message\n    for (( i=0; i<${#1};\
    \ i++ )); do\n        # get character at position i\n        c=${1:$i:1}\n   \
    \     # find it's index in the alphabet\n        c_index=$(printf '%d' \"'$c\"\
    )\n        # if character is a vowel\n        if [[ \"$c\" =~ [aeiou] ]]; then\n\
    \            # shift character two places ahead\n            c_index=$((c_index\
    \ + 2))\n            # if the shifted index is beyond the end of the alphabet\n\
    \            if [[ $c_index -gt $(printf '%d' \"'z\") ]]; then\n             \
    \   # bring it back to the start of the alphabet\n                c_index=$((c_index\
    \ - ALPHABET_SIZE))\n            fi\n        fi\n        # if character is uppercase\n\
    \        if [[ \"$c\" =~ [A-Z] ]]; then\n            # convert character to lowercase\n\
    \            c_index=$((c_index + 32))\n        fi\n        # add character to\
    \ encoded message\n        encoded+=$(printf \"\\x$(printf %x $c_index)\")\n \
    \   done\n    # return the encoded message\n    echo $encoded", "    # echo $1\
    \ | tr '[a-z][A-Z]' '[A-Z][a-z]' | sed 's/[aeiou]/\\x`expr substr [aeiou] 2 5`/g'\n\
    \    echo $1 | tr '[a-z][A-Z]' '[A-Z][a-z]' | sed 's/[aeiou]/\\x`expr substr [aeiou]\
    \ 2 5`/g'\n    # echo $1 | tr '[a-z][A-Z]' '[A-Z][a-z]' | sed 's/[aeiou]/\\x`expr\
    \ substr [aeiou] 2 5`/g'", "    echo $1 | sed -e 's/a/c/g' -e 's/e/g/g' -e 's/i/k/g'\
    \ -e 's/o/q/g' -e 's/u/w/g' -e 's/A/C/g' -e 's/E/G/g' -e 's/I/K/g' -e 's/O/Q/g'\
    \ -e 's/U/W/g' | tr '[:lower:]' '[:upper:]'", "    for word in $@; do\n      \
    \  for((i=0; i<${#word}; i++)); do\n            char=${word:$i:1}\n          \
    \  case $char in\n                [A-Z])\n                    echo -n \"$(printf\
    \ \"%c\" $(( ${char} + 32 )))\"\n                    ;;\n                [a-z])\n\
    \                    echo -n \"$(printf \"%c\" $(( ${char} - 32 )))\"\n      \
    \              ;;\n                [aeiou])\n                    echo -n \"$(printf\
    \ \"%c\" $(( ${char} + 2 )))\"\n                    ;;\n                [AEIOU])\n\
    \                    echo -n \"$(printf \"%c\" $(( ${char} + 30 )))\"\n      \
    \              ;;\n                *)\n                    echo -n \"$char\"\n\
    \                    ;;\n            esac\n        done\n        echo \"\"\n \
    \   done", "\tlocal ret=\"\"\n\tlocal word=$1\n\tlocal numChars=${#word}\n\tfor\
    \ (( i=0; i<$numChars; i++ )); do\n\t\t# get the ascii value of each character\n\
    \t\tc=$( printf \"%d\" \"'${word:$i:1}\" )\n\t\tif [ $c -ge 65 -a $c -le 90 ];\
    \ then\n\t\t\t# Uppercase\n\t\t\tc=$(( 122 - (90 - c) ))\n\t\telif [ $c -ge 97\
    \ -a $c -le 122 ]; then\n\t\t\t# Lowercase\n\t\t\tc=$(( 90 - (122 - c) ))\n\t\t\
    fi\n\t\tcase $c in\n\t\t\t97) c=101 ;;\n\t\t\t101) c=97 ;;\n\t\t\t105) c=111 ;;\n\
    \t\t\t111) c=105 ;;\n\t\t\t117) c=121 ;;\n\t\t\t121) c=117 ;;\n\t\tesac\n\t\t\
    ret+=$( printf \\\\$(printf '%03o' $c) )\n\tdone\n\techo $ret", "   echo \"Your\
    \ input was: $1\"\n   # BEGIN YOUR CODE\n\n   # END YOUR CODE", "        for word\
    \ in $1; do\n                for (( i=0; i<${#word}; i++ )); do\n            \
    \            char=${word:$i:1}\n                        if [[ $char =~ [A-Z] ]];\
    \ then\n                                #echo \"low\"\n                      \
    \          char=${char,,}\n                        elif [[ $char =~ [a-z] ]];\
    \ then\n                                #echo \"upper\"\n                    \
    \            char=${char^^}\n                        fi\n                    \
    \    #echo $char\n                        case $char in\n                    \
    \            [Aa])\n                                        char=c\n         \
    \                               ;;\n                                [Ee])\n  \
    \                                      char=g\n                              \
    \          ;;\n                                [Ii])\n                       \
    \                 char=k\n                                        ;;\n       \
    \                         [Oo])\n                                        char=q\n\
    \                                        ;;\n                                [Uu])\n\
    \                                        char=s\n                            \
    \            ;;\n                        esac\n                        encoded=\"\
    $encoded$char\"\n                done\n                encoded=\"$encoded \"\n\
    \        done\n        echo $encoded", "    echo \"${1}\" | tr \"A-Za-z\" \"N-ZA-Mn-za-m\"\
    \ | sed 's/[aeiou]/\\U&/g'", '  echo "Please complete this exercise"']
stop_tokens:
- "\n}"
