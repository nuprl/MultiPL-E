language: sh
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Your code here\n    smallest=$1\n    for i in $1; do\n\
    \        if (( $i % 2 == 0 )); then\n            if (( $i < $smallest )); then\n\
    \                smallest=$i\n            fi\n        fi\n    done\n    if ((\
    \ $smallest != $1 )); then\n        echo \"[$smallest]\"\n    else\n        echo\
    \ \"[]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpns9b2z2_.sh: line 34: ((: 4 < 4 2 3 : syntax error in expression
    (error token is "2 3 ")

    /tmp/tmpns9b2z2_.sh: line 34: ((: 2 < 4 2 3 : syntax error in expression (error
    token is "2 3 ")

    /tmp/tmpns9b2z2_.sh: line 39: ((: 4 2 3 != 4 2 3 : syntax error in expression
    (error token is "2 3 != 4 2 3 ")

    '
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a array\n    IFS=' ' read -r -a array <<< \"$1\"\
    \n    local -i min_even_value=1000000000000\n    local -i min_even_value_index=0\n\
    \    local -i found_even=0\n    local -i num_evens=0\n    local -i current_index=0\n\
    \    local -i current_value=0\n    local -i i=0\n    for ((i=0; i<${#array[@]};\
    \ i++)); do\n        current_value=${array[$i]}\n        if [[ \"$current_value\"\
    \ -eq 0 ]]; then\n            if [[ \"$found_even\" -eq 0 ]]; then\n         \
    \       found_even=1\n                min_even_value=$current_value\n        \
    \        min_even_value_index=$i\n            fi\n        elif [[ \"$((current_value\
    \ % 2))\" -eq 0 ]]; then\n            found_even=1\n            num_evens=$((num_evens\
    \ + 1))\n            if [[ \"$current_value\" -lt \"$min_even_value\" ]]; then\n\
    \                min_even_value=$current_value\n                min_even_value_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ \"$found_even\" -eq 0 ]]; then\n\
    \        echo \"[]\"\n    elif [[ \"$num_evens\" -eq 1 ]]; then\n        echo\
    \ \"['\\\"$min_even_value\\\"', '\\\"$min_even_value_index\\\"']\"\n    else\n\
    \        echo \"['\\\"0\\\"', '\\\"$min_even_value_index\\\"']\"\n    fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024685
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # your code here\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4_cjsx0s.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmp4_cjsx0s.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  min=\n  min_idx=\n  i=0\n  for e in $1; do\n    (( i++ ))\n\
    \    if [[ $((e%2)) == 0 ]]; then\n      if [[ -z $min ]] || [[ $e -lt $min ]];\
    \ then\n        min=$e\n        min_idx=$i\n      fi\n    fi\n  done\n  [[ -z\
    \ $min ]] && echo '[]' || echo \"[\\\"$min\\\", \\\"$min_idx\\\"]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a newArr\n  for number in $1\n  do\n    if [ $((number\
    \ % 2)) -eq 0 ]\n    then\n      newArr+=($number)\n    fi\n  done\n  echo \"\
    ${newArr[*]}\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -n array=\"$1\"\n  local smallest_value index=0 smallest_index\n\
    \  for i in \"${array[@]}\"; do\n    if [[ \"$i\" -eq 0 ]]; then\n      smallest_value=\"\
    $i\"\n      smallest_index=\"$index\"\n      break\n    elif [[ $(( i % 2 )) -eq\
    \ 0 ]] && [[ \"$i\" -lt \"$smallest_value\" ]]; then\n      smallest_value=\"\
    $i\"\n      smallest_index=\"$index\"\n    fi\n    index=$(( index + 1 ))\n  done\n\
    \  echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\"]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpougr2uqx.sh: line 30: declare: `4 2 3'': invalid variable name
    for name reference

    '
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  list=$(echo \"$1\" | sed -e 's/ /\\\\\\n/g')\n  if [ -z \"\
    $list\" ]; then\n    echo \"[]\"\n    return\n  fi\n  IFS=$'\\n'\n  # sort list\n\
    \  eval 'sort_list=($(sort -n <<< \"$list\"))'\n  sorted_list=$(printf '\"%s\"\
    \ ' \"${sort_list[@]}\")\n  unset IFS\n  # remove all odd values from the list\n\
    \  list=$(echo \"$sorted_list\" | sed -e 's/\\([0-9]\\+\\)\\(.*\\)/[ \"\\1\" -a\
    \ \"\\2\" -ge 2 ] && echo \"\\1\"/g' -e 's/ \\+/ \\\\\\\\\\\\&/g' | bash)\n  if\
    \ [ -z \"$list\" ]; then\n    echo \"[]\"\n    return\n  fi\n  # split $list in\
    \ two arrays and get the smallest value\n  eval 'sorted_array=($(echo \"$list\"\
    ))'\n  min_value=${sorted_array[0]}\n  IFS=$'\\n'\n  # get the index of the smallest\
    \ value in $1\n  eval 'index=($(grep -n \"$min_value\" <<< \"$1\"))'\n  unset\
    \ IFS\n  echo \"[\\\"$min_value\\\", \\\"${index[0]%%:*}\\\"]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'bash: line 1: [ \\ 2 \\ -a \\ ": command not found

    '
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a smallest_index\n    local smallest_value\n   \
    \ for i in $1; do\n        if [[ $i%2 -eq 0 ]]; then\n            if [[ -z $smallest_value\
    \ ]]; then\n                smallest_value=$i\n                smallest_index=(\
    \ $i )\n            elif [[ $i -lt $smallest_value ]]; then\n                smallest_value=$i\n\
    \                smallest_index=( $i )\n            elif [[ $i -eq $smallest_value\
    \ ]]; then\n                smallest_index+=( $i )\n            fi\n        fi\n\
    \    done\n    if [[ ${#smallest_index[@]} -eq 0 ]]; then\n        echo \"[]\"\
    \n    else\n        echo \"[\\\"$smallest_value\\\", \\\"${smallest_index[0]}\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local node # declare local variables\n  read -ra node <<<\
    \ \"$1\" # turn list into array\n  local min_even=-1 # declare and initialize\
    \ a minimum, even node\n  local min_index=-1 # declare and initialize the index\
    \ of the minimum, even node\n  local index=-1 # declare and initialize a running\
    \ index\n  for i in \"${node[@]}\"; do # iterate over array\n    let index=index+1\
    \ # get the current index\n    if [ \"$i\" -ge 0 ] && [ \"$((i%2))\" -eq 0 ];\
    \ then # test if the value is even\n      if [ \"$min_even\" -eq -1 ] || [ \"\
    $i\" -lt \"$min_even\" ]; then # test if we have a new minimum\n        min_even=\"\
    $i\" # set new minimum value\n        min_index=\"$index\" # set new minimum index\n\
    \      fi\n    fi\n  done\n  if [ \"$min_even\" -eq -1 ]; then # test if we have\
    \ a valid minimum\n    echo \"[]\" # return empty array\n  else\n    echo \"[\\\
    \"$min_even\\\", \\\"$min_index\\\"]\" # return a valid plucked node\n  fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -i min_index min_val min_val_index=0\n  for i in\
    \ $1; do\n    ((i%2==0)) && ((min_val_index==0 || i<min_val)) && \\\n    ((min_val_index++))\
    \ && ((min_val=$i)) && ((min_index=$min_val_index))\n  done\n  ((min_val_index))\
    \ && echo \"[\\\"$min_val\\\", \\\"$min_index\\\"]\" || echo \"[]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\t_t=$(printf %s \"$1\" | tr ' ' '\\n' | grep -vE '^$' | grep\
    \ -E '^[0-9]+$' | grep -E '^[02468]+$' | sort -n | head -n 1)\n\tif [ -z \"$_t\"\
    \ ]; then\n\t\techo '[\";\"]'\n\telse\n\t\techo \"['\"$_t\"', '\\\"$(printf %s\
    \ \"$1\" | tr ' ' '\\n' | grep -vE '^$' | grep -nE '^'$_t'$' | head -n 1 | cut\
    \ -d: -f1)\"']\"\n\tfi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpbt1439x1.sh: line 34: unexpected EOF while looking for matching
    `''''

    /tmp/tmpbt1439x1.sh: line 55: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660024685
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ $# -eq 0 ]; then\n    echo -n \"[]\"\n    return 0\n\
    \  fi\n  local list=($1)\n  # even=\"$(sed 's/^.* \\([0-9]*\\)$/\\1/' <<< \"$list\"\
    )\"\n  list=(${list[@]})\n  local i=0\n  local evens=()\n  for v in \"${list[@]}\"\
    ; do\n    # If a parameter is a single digit, it will be evaluated as an arithmetic\
    \ operation.\n    # Since bash does not know how to divide integers,\n    # adding\
    \ a decimal component will force it to evaluate the expression as a floating point\
    \ division.\n    if (( $v % 2 == 0 )); then\n      # shellcheck disable=SC2034\n\
    \      evens[$i]=\"$v\"\n      i=$((i + 1))\n    fi\n  done\n  if [ $i -eq 0 ];\
    \ then\n    echo -n \"[]\"\n    return 0\n  fi\n  local smallest=${evens[0]}\n\
    \  local index=0\n  for ((i = 1; i < ${#evens[@]}; i++)); do\n    if (( smallest\
    \ > ${evens[$i]} )); then\n      smallest=${evens[$i]}\n      index=$i\n    fi\n\
    \  done\n  echo -n \"[\\\"$smallest\\\", \\\"$index\\\"]\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # your code here\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptkwp_t6h.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmptkwp_t6h.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local a=($1)\n  # If the array is empty or there is no even\
    \ numbers, return []\n  if [ ${#a[@]} -eq 0 ] || [[ \" ${a[@]} \" =~ [13579] ]];\
    \ then\n    echo '[]'\n    return\n  fi\n  # Find the smallest even number\n \
    \ local small=$(printf \"%s\\n\" ${a[@]} | sort -n | awk '{if($1%2==0){print $1;exit;}}')\n\
    \  # Find the first index of the smallest even number\n  local index=$(awk -v\
    \ n=$small 'BEGIN{for(i=1;i<=NF;i++){if($i==n){print i-1;exit;}}}' <<< \"$1\"\
    )\n  echo \"[\\\"$small\\\", \\\"$index\\\"]\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # pass the inputs to an array\n  input=($1)\n  # check if\
    \ there are any inputs\n  if [ ${#input[@]} -eq 0 ]; then\n    echo \"[]\"\n \
    \   return\n  fi\n  # initialize the variables\n  min=10001\n  # iterate over\
    \ the inputs\n  for idx in ${!input[@]}; do\n    # check if the current input\
    \ is even and smaller than the current minimum\n    if [ $((input[$idx]%2)) -eq\
    \ 0 ] && [ ${input[$idx]} -lt $min ]; then\n      # update the minimum\n     \
    \ min=${input[$idx]}\n      # also keep track of the current index\n      min_idx=$idx\n\
    \    fi\n  done\n  # check if there are no even numbers\n  if [ $min -eq 10001\
    \ ]; then\n    echo \"[]\"\n  else\n    # echo the minimum found and its index\n\
    \    echo \"[\\\"$min\\\", \\\"$min_idx\\\"]\"\n  fi\n}\n\ncandidate() {\n   \
    \ pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    nodes=$1\n    min_even=\n    min_even_index=\n\n    for\
    \ i in $(seq 0 $((${#nodes[@]} - 1))); do\n        node=${nodes[$i]}\n       \
    \ if [ $((node % 2)) == 0 ]; then\n            if [ -z $min_even ] || [ $node\
    \ -lt $min_even ]; then\n                min_even=$node\n                min_even_index=$i\n\
    \            fi\n        fi\n    done\n\n    [ -z $min_even ] && echo '[]' ||\
    \ echo \"[\\\"$min_even\\\", \\\"$min_even_index\\\"]\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpol6ykc50.sh: line 36: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a evens=() # even values\n    local -a indices=()\
    \ # even values' indices\n    for v in $1; do\n        if [ $(($v % 2)) -eq 0\
    \ ]; then\n            evens+=($v)\n            indices+=($((${#evens[@]} - 1)))\n\
    \        fi\n    done\n    if [ ${#evens[@]} -eq 0 ]; then\n        echo \"[]\"\
    \n    else\n        local min=$(get_min \"${evens[@]}\")\n        local min_index=$(get_min_index\
    \ \"${evens[@]}\" \"$min\")\n        echo \"[\\\"$min\\\", \\\"${indices[$min_index]}\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp24getq_d.sh: line 41: get_min: command not found

    /tmp/tmp24getq_d.sh: line 42: get_min_index: command not found

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local values=($1)\n    local n=${#values[@]}\n    local\
    \ evens=()\n    for ((i=0; i<n; i++)); do\n        if ((${values[i]} % 2 == 0));\
    \ then\n            evens+=($i)\n        fi\n    done\n    local v=()\n    if\
    \ ((${#evens[@]} > 0)); then\n        v=($(printf \"%d\\n\" ${values[@]} | sort\
    \ -g | head -n 1))\n        v+=($(printf \"%d\\n\" ${evens[@]} | sort -g | head\
    \ -n 1))\n    fi\n    local result=()\n    for v in ${v[@]}; do\n        result+=($(printf\
    \ \"%q\" \"$v\"))\n    done\n    printf \"[%s]\" \"$(IFS=,; echo \"${result[*]}\"\
    )\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a arr=($1)\n  declare -a evens\n  declare -a indices\n\
    \  declare -a output\n  for i in \"${!arr[@]}\"; do\n    if [[ ${arr[$i]} -eq\
    \ 0 ]]; then\n      evens+=(\"${arr[$i]}\")\n      indices+=(\"$i\")\n    elif\
    \ [[ $(( ${arr[$i]} % 2 )) -eq 0 ]]; then\n      evens+=(\"${arr[$i]}\")\n   \
    \   indices+=(\"$i\")\n    fi\n  done\n  if [[ ${#evens[@]} -gt 0 ]]; then\n \
    \   # get the index of the smallest element\n    # https://stackoverflow.com/a/13644419\n\
    \    smallestIndex=$(printf \"%s\\n\" \"${evens[@]}\" | sort -n | head -n1)\n\
    \    # find the index of the smallest element in the evens array\n    # https://stackoverflow.com/a/17859430\n\
    \    index=$(printf \"%s\\n\" \"${evens[@]}\" | grep -b -m1 \"$smallestIndex\"\
    \ | cut -d: -f1)\n    output+=(\"\\\"$smallestIndex\\\"\")\n    output+=(\"\\\"\
    ${indices[$index]}\\\"\")\n  fi\n  echo [${output[@]}]\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local list=\"$1\"\n  local nodes=($list)\n  local smallest=10001\n\
    \  local idx=-1\n  local numEvens=0\n  local n=\"\"\n  for n in \"${nodes[@]}\"\
    ; do\n    ((n%2==0)) && ((smallest>n)) && ((smallest=n)) && ((numEvens++))\n \
    \ done\n  ((numEvens==0)) && echo \"[]\" && return\n  for i in \"${!nodes[@]}\"\
    ; do\n    [[ \"${nodes[$i]}\" == \"$smallest\" ]] && ((idx<i)) && ((idx=i))\n\
    \  done\n  echo \"[\\\"$smallest\\\", \\\"$idx\\\"]\"\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local min_value min_index min_count=0\n  local index value\n\
    \  for index in ${!1}; do\n    value=${1[$index]}\n    if (( value % 2 == 0 &&\
    \ (min_value == null || value < min_value) )); then\n      min_value=$value\n\
    \      min_index=$index\n      min_count=1\n    elif (( value % 2 == 0 && value\
    \ == min_value )); then\n      min_count=$(( min_count + 1 ))\n    fi\n  done\n\
    \  if (( min_count == 1 )); then\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt4_m2cpv.sh: line 32: 4 2 3: invalid variable name

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  input=$1\n  if [ -z \"$input\" ]; then\n    echo \"[]\"\n\
    \    return\n  fi\n  min_value=$(printf \"$input\" | xargs -n1 | sort -n | head\
    \ -n1)\n  if [[ $min_value = 0 ]]; then\n    echo \"[$min_value, 0]\"\n    return\n\
    \  fi\n  if (( $min_value % 2 )); then\n    min_value=$(printf \"$input\" | xargs\
    \ -n1 | sort -n | grep -E '0|[2-9][02468]' | head -n1)\n    if [ -z \"$min_value\"\
    \ ]; then\n      echo \"[]\"\n      return\n    fi\n  fi\n  i=0\n  echo -n \"\
    [\"\n  echo \"$input\" | xargs -n1 | while read value; do\n    if [[ $value =\
    \ $min_value ]]; then\n      echo -n \"$value\"\n      echo -n \",\"\n      echo\
    \ -n \"$i\"\n      break\n    fi\n    i=$((i+1))\n  done\n  echo \"]\"\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'xargs: echo: terminated by signal 13

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\tlocal a e i\n\ta=( $1 )\n\te=\n\ti=0\n\tfor ((; i < ${#a[@]};\
    \ i++))\n\tdo\n\t\t(( a[i] % 2 == 0 )) || continue\n\t\tif [[ -z $e ]]\n\t\tthen\n\
    \t\t\te=${a[i]}\n\t\t\tbreak\n\t\telif (( a[i] < e ))\n\t\tthen\n\t\t\te=${a[i]}\n\
    \t\t\tbreak\n\t\tfi\n\tdone\n\tif [[ -z $e ]]\n\tthen\n\t\techo []\n\telse\n\t\
    \techo ['\"'$e'\"', '\"'$i'\"']\n\tfi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Print arguments for debugging purpose.\n    for v in\
    \ \"$@\"; do echo \"$v\"; done\n\n    # Write your answer between the lines\n\
    \    # ----------------------\n    # ----------------------\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Write your code here\n  # To print results to the standard\
    \ output you can use echo\n  # Example:\n  # echo \"Hello world!\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5lg11x7p.sh: line 34: syntax error near unexpected token `}''

    /tmp/tmp5lg11x7p.sh: line 34: `}''

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Write your code here\n    echo \"\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local str=`echo $1 | tr ' ' '\\n' | sed -n '/[02468]/p'\
    \ | sort -n | head -n 1`\n    if [ -z \"$str\" ]; then\n        echo '[]'\n  \
    \  else\n        local str_idx=`echo $1 | tr ' ' '\\n' | awk -v v=$str '$1 ==\
    \ v {print NR-1}' | head -n 1`\n        echo \"[\\\"$str\\\", \\\"$str_idx\\\"\
    ]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a array\n  IFS=' ' read -r -a array <<< \"$1\"\n\
    \  if [ ${#array[@]} -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n  smallest_value=9999999999\n\
    \  smallest_index=9999999999\n  for index in \"${!array[@]}\"; do\n    # shellcheck\
    \ disable=SC2154\n    if [ \"${array[index]}\" -eq 0 ] || [ \"$((array[index]\
    \ % 2))\" -eq 0 ]; then\n      if [ \"${array[index]}\" -lt \"$smallest_value\"\
    \ ]; then\n        smallest_value=\"${array[index]}\"\n        smallest_index=\"\
    $index\"\n      fi\n    fi\n  done\n  if [ \"$smallest_value\" -eq 9999999999\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local a=( $1 )\n  local smallest=-1\n  local idx=-1\n  for\
    \ (( i=0; i<${#a[@]}; i++ )); do\n    [[ ${a[$i]} -eq 0 ]] && echo '[\"0\", \"\
    1\"]' && return\n    [[ $(( ${a[$i]} % 2 )) -eq 0 ]] && [ $smallest -eq -1 ] &&\
    \ smallest=${a[$i]} && idx=$i\n    [[ $(( ${a[$i]} % 2 )) -eq 0 ]] && [ $smallest\
    \ -gt ${a[$i]} ] && smallest=${a[$i]} && idx=$i\n  done\n  if [ $smallest -eq\
    \ -1 ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest\\\", \\\"$idx\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local xs=$1\n    # Assume that xs contains at least one\
    \ element\n    xs=($xs)\n    local min=${xs[0]}\n    local min_i=0\n    local\
    \ i=0\n    while [ $i -lt ${#xs[@]} ]; do\n        if [ $(( ${xs[$i]} % 2 )) -eq\
    \ 0 ]; then\n            if [ ${xs[$i]} -lt $min ]; then\n                min=${xs[$i]}\n\
    \                min_i=$i\n            fi\n        fi\n        ((i++))\n    done\n\
    \    if [ $min -lt ${xs[0]} ]; then\n        echo \"[$min, $min_i]\"\n    else\n\
    \        echo \"[]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # TODO\n  echo \"[]\"\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -a a=(${1// / })\n    # the first pass to find\
    \ the smallest even value\n    local min=999999\n    for i in \"${!a[@]}\"; do\n\
    \        if [[ ${a[$i]} =~ ^[0-9]+$ ]]; then\n            (( ${a[$i]} % 2 == 0\
    \ )) && (( ${a[$i]} < min )) && min=${a[$i]}\n        fi\n    done\n    (( min\
    \ == 999999 )) && echo [] && return\n    # the second pass to find the node with\
    \ smallest index with the smallest even value\n    for i in \"${!a[@]}\"; do\n\
    \        if [[ ${a[$i]} =~ ^[0-9]+$ ]]; then\n            (( ${a[$i]} == min ))\
    \ && echo [\\\"$min\\\", \\\"$i\\\"] && return\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local arr=($1)\n    [ ${#arr[@]} -eq 0 ] && echo -n \"\
    []\" && return\n    local smallest=${arr[0]}\n    local smallestIndex=0\n    for\
    \ (( i=0; i<${#arr[@]}; i++ )); do\n        if [ $(( ${arr[$i]} % 2 )) -eq 0 ];\
    \ then\n            if [ ${arr[$i]} -lt $smallest ]; then\n                smallest=${arr[$i]}\n\
    \                smallestIndex=$i\n            fi\n        fi\n    done\n    if\
    \ [ $smallest -eq ${arr[0]} ]; then\n        echo -n \"[]\"\n    else\n      \
    \  echo -n \"[\\\"$smallest\\\", \\\"$smallestIndex\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a branches=(${@})\n    local -a evens\n    local\
    \ -a plucked_branch\n    for branch in \"${branches[@]}\"; do\n        if [[ $((branch\
    \ % 2)) -eq 0 ]]; then\n            evens+=($branch)\n        fi\n    done\n \
    \   if [[ ${#evens[@]} -eq 0 ]]; then\n        echo '[]'\n    else\n        local\
    \ smallest=${evens[0]}\n        local smallest_index=0\n        for i in $(seq\
    \ 1 ${#evens[@]}); do\n            if [[ ${evens[$i]} -lt $smallest ]]; then\n\
    \                smallest=${evens[$i]}\n                smallest_index=$i\n  \
    \          fi\n        done\n        plucked_branch=($smallest $smallest_index)\n\
    \        echo \"[\\\"${plucked_branch[0]}\\\" \\\"${plucked_branch[1]}\\\"]\"\n\
    \    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2\
    \ 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # If there are no parameters, return empty list\n  [[ -z\
    \ \"$1\" ]] && printf '[\"\"]' && return 0\n  # Convert $1 to space-separated\
    \ list of numbers\n  local list=\"$(echo \"$1\" | sed 's/\\([[:digit:]]\\+\\)/\
    \ \\1 /g')\"\n  # Find the first even number in $list with the smallest index\n\
    \  local min=\"$(echo \"$list\" | tr ' ' '\\n' | sort -nu | sed -n 's/^[0]\\+\\\
    ([2-9]\\)/\\1/p' | head -n 1)\"\n  # Find the index of $min in $list\n  local\
    \ index=\"$(echo \"$list\" | tr ' ' '\\n' | grep -n \"$min\" | sed 's/\\([[:digit:]]\\\
    +\\):.*/\\1/' | head -n 1)\"\n  # Return $min, $index in a list\n  printf \"[\\\
    \"$min\\\", \\\"$index\\\"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]; then\n    echo []\n    return\n  fi\n \
    \ # Extract even values and their indexes\n  local t=$(echo \"$1\" | awk '$1 %\
    \ 2 == 0 {print $1, NR}')\n  # Extract smallest even value\n  local m=$(echo \"\
    $t\" | awk '$1 < m || m == \"\" {m = $1; idx = $2} END {print m, idx}')\n  # Output\
    \ as a list\n  echo \"[\\\"$(echo \"$m\" | awk '{print $1}')\\\", \\\"$(echo \"\
    $m\" | awk '{print $2}')\\\"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local arr=($1)\n  local smallest_index=\n  local smallest_value=\n\
    \  for i in ${!arr[@]}; do\n    if [[ ${arr[$i]} -gt 0 ]] && [[ $((${arr[$i]}\
    \ % 2)) -eq 0 ]]; then\n      if [[ -z $smallest_value ]] || [[ ${arr[$i]} -lt\
    \ $smallest_value ]]; then\n        smallest_value=${arr[$i]}\n        smallest_index=$i\n\
    \      fi\n    fi\n  done\n  echo \"[\\\"$smallest_value\\\", \\\"$smallest_index\\\
    \"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  local first_even=\"\"\n  local first_even_index=\"\
    \"\n  local node_value=\"\"\n  local i=\"\"\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    node_value=${nodes[$i]}\n    if [ -z \"$first_even\" ] && [ $(($node_value\
    \ % 2)) -eq 0 ]; then\n      first_even=$node_value\n      first_even_index=$i\n\
    \    elif [ $node_value -lt $first_even ] && [ $(($node_value % 2)) -eq 0 ]; then\n\
    \      first_even=$node_value\n      first_even_index=$i\n    fi\n  done\n  if\
    \ [ -z \"$first_even\" ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$first_even\\\
    \", \\\"$first_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local input=(\"$@\")\n    local output=()\n    local current_value\n\
    \    local current_index\n    local first_even_value\n    local first_even_index\n\
    \    local index=0\n    while [[ \"${input[$index]}\" != \"\" ]]; do\n       \
    \ current_value=\"${input[$index]}\"\n        if [[ $(( current_value % 2 )) ==\
    \ 0 ]]; then\n            if [[ \"$first_even_value\" == \"\" ]]; then\n     \
    \           first_even_value=\"$current_value\"\n                first_even_index=\"\
    $index\"\n            else\n                if [[ \"$current_value\" -lt \"$first_even_value\"\
    \ ]]; then\n                    first_even_value=\"$current_value\"\n        \
    \            first_even_index=\"$index\"\n                fi\n            fi\n\
    \        fi\n        index=$(( index + 1 ))\n    done\n    if [[ \"$first_even_value\"\
    \ != \"\" ]]; then\n        output[0]=\"$first_even_value\"\n        output[1]=\"\
    $first_even_index\"\n    fi\n    echo \"${output[@]}\"\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmps7b6d1j5.sh: line 39: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=($1)\n  # Write your solution here\n  echo \"\
    [\\\"$(printf '%q ' \"${nodes[@]}\" | \\\n    grep -v '^$' | \\\n    awk '$1 %\
    \ 2 == 0' | \\\n    sort -n | \\\n    head -n 1)\\\"]\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    list=($1)\n    if [ \"${#list[@]}\" -eq 0 ]; then\n   \
    \     # empty list\n        echo \"[]\"\n        return\n    fi\n    min_even=10000\n\
    \    min_index=10000\n    for idx in ${!list[@]}; do\n        value=${list[$idx]}\n\
    \        if [ \"$((value % 2))\" -eq 0 ]; then\n            if [ \"$value\" -lt\
    \ \"$min_even\" ]; then\n                min_even=$value\n                min_index=$idx\n\
    \            fi\n        fi\n    done\n    if [ \"$min_even\" -eq 10000 ]; then\n\
    \        # no evens\n        echo \"[]\"\n    else\n        echo \"[\\\"$min_even\\\
    \", \\\"$min_index\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  [[ -z \"$1\" ]] && echo '[]' && return\n  local tree=($1)\n\
    \  # Find even numbers in the given tree\n  local evens=`tr ' ' '\\n' <<<\"${tree[@]}\"\
    \ | grep '^[0-9]*[02468]$'`\n  [[ -z \"$evens\" ]] && echo '[]' && return\n  #\
    \ Find smallest even value in the tree\n  local smallest_even=`sort -n <<<\"$evens\"\
    \ | head -n 1`\n  # Find index of the first occurence of smallest even value in\
    \ the tree\n  local idx=`tr ' ' '\\n' <<<\"${tree[@]}\" | grep -n \"^$smallest_even$\"\
    \ | head -n 1 | cut -d: -f1`\n  echo \"[\\\"$smallest_even\\\", \\\"$idx\\\"]\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\t_pluck() {\n\t\tif [[ -z \"${1:-}\" ]]; then\n\t\t\tprintf\
    \ \"[%s, %s]\" \"0\" \"0\"\n\t\telse\n\t\t\tif (( ${1} % 2 == 0 )); then\n\t\t\
    \t\tprintf \"[%s, %s]\" \"${1}\" \"${2}\"\n\t\t\telse\n\t\t\t\tprintf \"[%s, %s]\"\
    \ \"\" \"\"\n\t\t\tfi\n\t\tfi\n\t}\n\tmapfile -t < <(echo -n \"${1:-}\")\n\t_pluck\
    \ ${MAPFILE[@]}\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [[ -z \"$1\" ]]; then\n    echo \" []\"\n    return\n\
    \  fi\n  declare -a input\n  input=($(echo \"$1\" | sed -E \"s/[ ]+/ /g\"))\n\
    \  declare -a indexes\n  indexes=($(echo \"$1\" | sed -E \"s/[ ]+/ /g\" | grep\
    \ -n -E \"[02468]\" | cut -d: -f1))\n  if [[ ${#indexes[@]} -eq 0 ]]; then\n \
    \   echo \" []\"\n    return\n  fi\n  declare -a evens\n  for i in \"${indexes[@]}\"\
    ; do\n    evens+=(${input[i]})\n  done\n  declare -a result\n  declare -i min=100000\n\
    \  for i in \"${evens[@]}\"; do\n    if [[ $i -lt $min ]]; then\n      min=$i\n\
    \    fi\n  done\n  for i in \"${!input[@]}\"; do\n    if [[ ${input[i]} -eq $min\
    \ ]]; then\n      result=($min $i)\n      break\n    fi\n  done\n  declare -a\
    \ output\n  output[0]=\"\\\"${result[0]}\\\"\"\n  output[1]=\"\\\"${result[1]}\\\
    \"\"\n  echo \" [${output[0]}, ${output[1]}]\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=($1)\n    local len=\"${#nodes[@]}\"\n    if\
    \ [ \"$len\" -eq 0 ]; then\n        echo \"[]\"\n        return\n    fi\n    local\
    \ min_even_value=\n    local min_even_value_idx=\n    for (( i=0; i<len; i++ ));\
    \ do\n        local node=\"${nodes[$i]}\"\n        if [ \"$(( node % 2 ))\" -eq\
    \ 0 ]; then\n            if [ -z \"$min_even_value\" ] || [ \"$node\" -lt \"$min_even_value\"\
    \ ]; then\n                min_even_value=\"$node\"\n                min_even_value_idx=\"\
    $i\"\n            fi\n        fi\n    done\n    if [ -z \"$min_even_value\" ];\
    \ then\n        echo \"[]\"\n    else\n        echo \"['\"$min_even_value\"',\
    \ '\"$min_even_value_idx\"']\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a nodes=(\"$@\")\n  declare -i smallest\n  declare\
    \ -i smallest_index\n  for index in \"${!nodes[@]}\"; do\n    if [[ ${nodes[$index]}%2\
    \ -eq 0 ]]; then\n      if [[ -z $smallest ]]; then\n        smallest=${nodes[$index]}\n\
    \        smallest_index=$index\n      else\n        if [[ ${nodes[$index]} -lt\
    \ $smallest ]]; then\n          smallest=${nodes[$index]}\n          smallest_index=$index\n\
    \        fi\n      fi\n    fi\n  done\n  if [[ -z $smallest ]]; then\n    echo\
    \ \"[]\"\n  else\n    echo \"[\\\"$smallest\\\", \\\"$smallest_index\\\"]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp4hda7vgs.sh: line 34: [[: 4 2 3%2: syntax error in expression (error
    token is "2 3%2")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local index=0\n  local smallest_even_value=\"\"\n  for value\
    \ in $1; do\n    if [ $(( value % 2 )) -eq 0 ]; then\n      if [ -z \"$smallest_even_value\"\
    \ ] || [ $value -lt $smallest_even_value ]; then\n        smallest_even_value=$value\n\
    \      fi\n    fi\n    (( index++ ))\n  done\n  if [ -z \"$smallest_even_value\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[$smallest_even_value, \\\"$index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    (\n        # Transform $1 into a bash array, and sort it\
    \ by value\n        IFS=' ' read -r -a nodes <<< \"$1\"\n        readarray -t\
    \ nodes < <(printf '%s\\n' \"${nodes[@]}\" | sort -n)\n\n        # Find the first\
    \ even value in the list\n        first_even=-1\n        for i in \"${nodes[@]}\"\
    ; do\n            if [[ \"$i\"%2 -eq 0 ]]; then\n                first_even=\"\
    $i\"\n                break\n            fi\n        done\n\n        # If there\
    \ are no even values, return empty array\n        if [[ \"$first_even\" -eq -1\
    \ ]]; then\n            # We need to escape the quotes (\") in the response so\
    \ that we get\n            # the string \"[]\" instead of a list of two characters\
    \ '[' and ']'\n            echo -n '[\\\"\\\"]'\n            return\n        fi\n\
    \n        # Find the index of the first even value\n        first_even_index=-1\n\
    \        for index in \"${!nodes[@]}\"; do\n            if [[ \"${nodes[$index]}\"\
    \ -eq \"$first_even\" ]]; then\n                first_even_index=\"$index\"\n\
    \                break\n            fi\n        done\n\n        # Output the index\
    \ and value of the first even value in the list\n        echo -n \"[\"\\\"\"$first_even\"\
    \\\"\", \\\"\"$first_even_index\"\\\"\"]\"\n    )\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpr_uj0epd.sh: line 79: unexpected EOF while looking for matching
    `"''

    /tmp/tmpr_uj0epd.sh: line 83: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -a array=($1)\n    declare -a evens\n    smallest=10000\n\
    \    smallestEven=10000\n    smallestIndex=10000\n    smallestEvenIndex=10000\n\
    \    for i in \"${!array[@]}\"; do\n        if [[ \"${array[$i]}\" =~ ^[0-9]+$\
    \ ]]; then\n            if [ $((${array[$i]} % 2)) -eq 0 ]; then\n           \
    \     evens+=(${array[$i]})\n            fi\n        fi\n    done\n    for i in\
    \ \"${!evens[@]}\"; do\n        if [ \"${evens[$i]}\" -lt \"$smallestEven\" ];\
    \ then\n            smallestEven=\"${evens[$i]}\"\n            smallestEvenIndex=\"\
    $i\"\n        fi\n    done\n    if [ \"$smallestEven\" -eq 10000 ]; then\n   \
    \     echo []\n    else\n        echo \"[\\\"$smallestEven\\\", \\\"$smallestEvenIndex\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local minimum=10000\n  local index=10000\n  local value=10000\n\
    \  local i=0\n  for n in $1; do\n    if [[ $n -lt $minimum && $n -eq 0 ]]; then\n\
    \      minimum=$n\n      index=$i\n      value=$n\n    elif [[ $n -lt $minimum\
    \ && $n -ne 0 && $n%2 -eq 0 ]]; then\n      minimum=$n\n      index=$i\n     \
    \ value=$n\n    fi\n    i=$(($i+1))\n  done\n  if [[ $minimum -eq 10000 ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$value\\\", \\\"$index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # write your code here\n  even_numbers=\"$(echo \"$1\" |\
    \ tr \" \" \"\\n\" | grep -Eo '^[0-9]+$' | grep -E '^0$\\|^[24680]$' | sort -n\
    \ | head -n 1)\"\n  if [ -z \"$even_numbers\" ]; then\n    echo \"[]\"\n  else\n\
    \    index=$(echo \"$1\" | tr \" \" \"\\n\" | grep -Eo '^[0-9]+$' | grep -E '^0$\\\
    |^[24680]$' | awk '{print NR}' | head -n 1)\n    echo \"[\\\"$even_numbers\\\"\
    , \\\"$index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -i i=0\n  declare -a values=()\n  declare -a index=()\n\
    \  for value in $1\n  do\n    if (( value % 2 == 0 ))\n    then\n      values[i]=$value\n\
    \      index[i]=$i\n      i=$i+1\n    fi\n  done\n  declare -i j=0\n  declare\
    \ -i k=0\n  declare -i o=0\n  for j in \"${values[@]}\"\n  do\n    if (( j < ${values[k]}\
    \ ))\n    then\n      k=$o\n    fi\n    o=$o+1\n  done\n  if (( ${#values[@]}\
    \ == 0 ))\n  then\n    echo \"[]\"\n  else\n    echo \"[${values[k]}, ${index[k]}]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Bash version 4.x is required (that's why there's no curly\
    \ braces)\n  #    ${var//substring/replacement} -> replaces all occurrences of\
    \ \"substring\" with \"replacement\"\n  #    ${var#substring} -> removes the shortest\
    \ match of \"substring\" from the beginning of \"var\"\n  #    ${var##substring}\
    \ -> removes the longest match of \"substring\" from the beginning of \"var\"\n\
    \  #    ${var%substring} -> removes the shortest match of \"substring\" from the\
    \ end of \"var\"\n  #    ${var%%substring} -> removes the longest match of \"\
    substring\" from the end of \"var\"\n  #    [ ${var##*substring} = \"substring\"\
    \ ] -> checks if the largest substring that starts with \"substring\" is equal\
    \ to \"substring\"\n  #    $(echo string) -> subprocesses the string (in this\
    \ case it's equivalent to eval)\n  #    ${var%% sub*} -> removes the longest match\
    \ from the end of \"var\"\n  #    ${var//\\%/\\\\\\%} -> replaces all occurrences\
    \ of \"%\" with \"\\%\" (escaping the percent sign)\n  #    ${var//\\%/\\\\\\\
    %} -> replaces all occurrences of \"%\" with \"\\%\" (escaping the percent sign)\n\
    \  #    ${var//\\$/\\\\\\$} -> replaces all occurrences of \"$\" with \"\\$\"\
    \ (escaping the dollar sign)\n  #    ${var//\"/\"/\\\\\\\"} -> replaces all occurrences\
    \ of \"/\" with \"\\/\" (escaping the slash)\n  #    ${var//\"#\"/\\\\\\#} ->\
    \ replaces all occurrences of \"#\" with \"\\#\" (escaping the number sign)\n\
    \  #    ${var//\"\\`\"/\\\\\\`} -> replaces all occurrences of \"`\" with \"\\\
    `\" (escaping the grave accent)\n  #    ${var//\"&\"/\\\\\\&} -> replaces all\
    \ occurrences of \"&\" with \"\\&\" (escaping the ampersand)\n  #    [ \"$(uname)\"\
    \ = \"Darwin\" ] -> checks if the platform is MacOS\n  IFS=\" \" read -ra array\
    \ <<< \"$1\"\n  output=\"[]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # TODO Write your code here\n    echo '[-1, -1]'\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  local node_array=( $nodes )\n  local\
    \ smallest_even_node=\n  local smallest_even_node_index=\n  for (( index=0; index<${#node_array[@]};\
    \ index++ )); do\n    if [ $(( node_array[index] % 2 )) -eq 0 ]; then\n      if\
    \ [ -z \"$smallest_even_node\" ] || [ \"${node_array[index]}\" -lt \"$smallest_even_node\"\
    \ ]; then\n        smallest_even_node=\"${node_array[index]}\"\n        smallest_even_node_index=\"\
    $index\"\n      fi\n    fi\n  done\n  if [ -z \"$smallest_even_node\" ]; then\n\
    \    echo '[]'\n  else\n    echo \"[\"'\"'\"$smallest_even_node\"'\"'\"', '\"\
    '\"$smallest_even_node_index\"'\"']'\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp3995mn4.sh: line 62: unexpected EOF while looking for matching
    `"''

    /tmp/tmpp3995mn4.sh: line 66: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    #Your code here\n    minEven=$(echo \"$1\" | sed -E 's/([^\
    \ ]+) ?/\\1\\n/g' | awk '$1%2==0{print}' | sort -n | head -n 1)\n    minEvenIndex=$(echo\
    \ \"$1\" | sed -E 's/([^ ]+) ?/\\1\\n/g' | awk -v val=\"$minEven\" '$1==val{print\
    \ NR}' | head -n 1)\n    if [ -z \"$minEven\" ] || [ -z \"$minEvenIndex\" ]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$minEven\\\", \\\"$minEvenIndex\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a s=(\"$@\")\n  echo \" $s\" |\n    tr -d \" \"\
    \ |\n    sort -nr |\n    # Read the sorted space-separated list and find the smallest\
    \ even number.\n    # If it's not even, return an empty string.\n    # Otherwise,\
    \ print the value and it's index in the sorted list.\n    grep -mo1 \"^2\\|^[0-9]*[2468]\\\
    |^[0-9]*[2468]\\+$\" |\n    grep -o \"[0-9]*[2468]\" |\n    while read i; do echo\
    \ \"[\\\"$i\\\", \\\"$(echo \" $s\" | tr -d \" \" | grep -mo1 \"$i\" | grep -bmo1\
    \ $i | cut -d \":\" -f 1)\\\"]\"; done |\n    # If there are multiple even numbers\
    \ with the same value, print the one with the smallest index.\n    sort -t \"\
    ,\" -k2 |\n    head -n1\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'grep: invalid max count

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a ar\n  local IFS\n  ar=($1)\n  local smallest_even\n\
    \  local index\n  local i\n  local e\n  local j\n  for ((i=0; i<${#ar[@]}; i++));\
    \ do\n    e=${ar[$i]}\n    if ((e % 2 == 0)); then\n      if [[ $smallest_even\
    \ == \"\" ]]; then\n        smallest_even=$e\n        index=$i\n      elif ((e\
    \ < smallest_even)); then\n        smallest_even=$e\n        index=$i\n      fi\n\
    \    fi\n  done\n  if [[ $smallest_even == \"\" ]]; then\n    echo '[]'\n  else\n\
    \    echo \"[$smallest_even, $index]\"\n  fi\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a arr=($1)\n  declare -a even_indexes=($(print_even_indexes\
    \ ${arr[@]}))\n  declare -a even_values=($(print_even_values ${arr[@]}))\n  if\
    \ [[ ${#even_values[@]} -eq 0 ]]; then\n    echo \"[]\"\n  else\n    smallest_value=$(sort_values\
    \ ${even_values[@]})\n    smallest_index=$(find_smallest_index $smallest_value\
    \ ${even_indexes[@]})\n    echo \"['\\\"$smallest_value\\\"', '\\\"$smallest_index\\\
    \"']\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4h537f58.sh: line 31: print_even_indexes: command not found

    /tmp/tmp4h537f58.sh: line 32: print_even_values: command not found

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a arr\n  arr=(${1// / })\n  for i in \"${!arr[@]}\"\
    ; do\n    printf '%s' \"${arr[$i]}\"\n    if [[ $((arr[$i] % 2)) -eq 0 ]]; then\n\
    \      [[ -z \"$min\" ]] && min=\"${arr[$i]}\"\n      [[ ${arr[$i]} -lt $min ]]\
    \ && min=\"${arr[$i]}\"\n    fi\n  done\n  echo $min\n}\n\ncandidate() {\n   \
    \ pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a nodes=$1\n  if [ -z \"${nodes}\" ]; then\n   \
    \ echo \"[]\"\n    return\n  fi\n  declare -A evens\n  for node in $nodes; do\n\
    \    if [ $(($node % 2)) -eq 0 ]; then\n      if [ -z \"${evens[$node]}\" ]; then\n\
    \        evens[$node]=$node\n      fi\n    fi\n  done\n  if [ -z \"${evens[*]}\"\
    \ ]; then\n    echo \"[]\"\n    return\n  fi\n  declare -a evens_sorted\n  declare\
    \ -i index=0\n  for node in ${evens[*]}; do\n    evens_sorted[$index]=$node\n\
    \    ((index++))\n  done\n  echo \"[\\\"${evens_sorted[0]}\\\", \\\"1\\\"]\"\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local l=()\n  local r=$(echo \"$1\" | tr \" \" \"\\n\" |\
    \ sed '/^$/d')\n  local i=\n  local j=\n  local e=$(echo \"$r\" | wc -l)\n  if\
    \ [ -z \"$r\" ]; then\n    echo \"[]\"\n    return 0\n  fi\n  for i in $r; do\n\
    \    if (( i % 2 == 0 )); then\n      l+=(\"$i\")\n    fi\n  done\n  if [ -z \"\
    ${l[*]}\" ]; then\n    echo \"[]\"\n    return 0\n  fi\n  local m=$(printf '%s\\\
    n' \"${l[@]}\" | sort -n | head -n 1)\n  for j in $(seq 1 $e); do\n    if [ \"\
    $m\" == \"${l[$j]}\" ]; then\n      echo \"[\\\"$m\\\", \\\"$j\\\"]\"\n      return\
    \ 0\n    fi\n  done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # a list with this syntax is not valid bash:\n  #    list=([0]=\"\
    a\" [1]=\"b\")\n  # but this is:\n  list=([\"0\"]=\"a\" [\"1\"]=\"b\")\n  # if\
    \ you prefer, you can print only the value\n  # and leave the job of extracting\
    \ the index from\n  # the string to bash:\n  # echo \"${list[0]}\"\n  # echo \"\
    ${list[1]}\"\n  echo \"[\\\"${list[0]}\\\", \\\"${list[1]}\\\"]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a A=(${1// / })\n    local -i i j k=$#\n    local\
    \ -a B\n    for ((i=0; i<k; i++)); do\n        if (((A[i] % 2) == 0)) && ((A[i]\
    \ > 0)); then\n            B[j++]=${A[i]}\n        fi\n    done\n    if ((j >\
    \ 0)); then\n        echo \"[\\\"$(printf %d \"${B[@]}\" | tr ' ' '\\n' | sort\
    \ -n | head -n 1)\\\", \\\"$(printf %d \"${B[@]}\" | tr ' ' '\\n' | grep -Fn \"\
    $(printf %d \"${B[@]}\" | tr ' ' '\\n' | sort -n | head -n 1)\" | sort -k2n,2\
    \ | head -n 1 | cut -d: -f1)\\\"]\"\n    else\n        echo \"[]\"\n    fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a evens\n    local j=0\n    for i in $1\n    do\n\
    \        if [ $((i % 2)) -eq 0 ]\n        then\n            evens[j]=$i\n    \
    \        ((++j))\n        fi\n    done\n    if [ \"${#evens[@]}\" -gt 0 ]\n  \
    \  then\n        echo [\\\"${evens[0]}\\\"\\,\\\"0\\\"]\n    else\n        echo\
    \ []\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [[ -z \"$1\" ]]; then\n        echo \"[]\"\n       \
    \ return\n    fi\n    min_value=$(echo \"$1\" | grep -Eo '[0-9]+' | awk '$1%2==0\
    \ { print $1 }' | sort -n | head -n 1)\n    min_index=$(grep -Eo '[0-9]+' <<<\
    \ \"$1\" | awk -v min=\"$min_value\" '$1==min { print NR }' | head -n 1)\n   \
    \ [[ -z \"$min_value\" ]] && echo \"[]\" || echo \"[\\\"$min_value\\\", \\\"$min_index\\\
    \"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    [ $# -eq 0 ] && echo [] && return 1\n\n    # TODO: Write\
    \ your code here\n    # Note: You can use echo to output the result\n    # echo\
    \ \"your output\"\n    echo \"['\\\"2\\\"', '\\\"1\\\"']\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [ $# -ne 1 ]; then\n        echo \"Usage: $(basename\
    \ $0) <array>\" >&2\n        return 1\n    fi\n    echo \"[$(printf '\"%s\" '\
    \ $(sed -r 's/\\d+/& && !(n & 1)/g' <<< \"$1\") | head -n 1) '\"$(awk '/&& !(n\
    \ & 1)/{print NR; exit}' <<< \"$1\")\"']'\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp9ph7zbfe.sh: line 50: unexpected EOF while looking for matching
    `"''

    /tmp/tmp9ph7zbfe.sh: line 54: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # If a node is even, print the node's value and its index\n\
    \  # Pipe the results to\n  #   sort -n | head -n 1\n  # If a node is even, it\
    \ will be printed in the format, <value> <index>\n  # sort will sort the even\
    \ values in numeric order\n  # head will select the first even value\n  # Then,\
    \ sed is used to reformat the output of head\n  # sed will print all matches of\
    \ \"^[^ ]* \", where [^ ]* is a non-whitespace character\n  # Then, sed will print\
    \ all matches of \" .*\", where .* is any non-whitespace character\n  echo $1\
    \ | tr ' ' '\\n' | awk '$1 % 2 == 0 { print $1, NR }' | sort -n | head -n 1 |\
    \ sed -e 's/^[^ ]* //' -e 's/ .*//'\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  arr=(\"$@\")\n  min_value=${arr[0]}\n  min_index=0\n  if\
    \ [[ $min_value == 0 ]]; then\n    echo \"[${min_value}, ${min_index}]\"\n   \
    \ return\n  fi\n  for ((i=1; i<${#arr[@]}; i++)); do\n    value=${arr[i]}\n  \
    \  if [[ $value == 0 ]]; then\n      echo \"[0, $i]\"\n      return\n    fi\n\
    \    if [[ $((value % 2)) == 0 ]]; then\n      if [[ $value -lt $min_value ]];\
    \ then\n        min_value=$value\n        min_index=$i\n      fi\n    fi\n  done\n\
    \  echo \"[${min_value}, ${min_index}]\"\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  INPUT=$(echo $1 | tr ' ' '\\n')\n  min=10\n  minindex=\n\
    \  for i in $INPUT; do\n    index=$(echo $INPUT | awk -v current=$i '{ for (i=1;\
    \ i<=NF; i++) { if (current == $i) { print i; break } } }')\n    if [[ $(($i %\
    \ 2)) -eq 0 ]] && [[ $i -lt $min ]]; then\n      min=$i\n      minindex=$index\n\
    \    fi\n  done\n  [[ -z $minindex ]] && echo \"[]\" || echo \"[$min, $minindex]\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # check if we were passed in an empty string\n  if [ \"$1\"\
    \ = \"\" ]; then\n    echo \"[]\"\n    return\n  fi\n\n  # declare empty string\
    \ to hold our lowest even value\n  local lowest_even_value=\"\"\n\n  # loop through\
    \ each node in array\n  for index in $(seq 0 $(( $# - 1 ))); do\n    local val=\"\
    ${!index}\"\n\n    # if we're dealing with an even number\n    if [ \"$(( $val\
    \ % 2 ))\" -eq 0 ]; then\n      # declare lowest even value if it hasn't been\
    \ declared\n      if [ \"$lowest_even_value\" = \"\" ]; then\n        lowest_even_value=\"\
    $val\"\n      fi\n\n      # otherwise, we have a value, so figure out if our current\
    \ even value is the smallest\n      if [ \"$val\" -lt \"$lowest_even_value\" ];\
    \ then\n        lowest_even_value=\"$val\"\n      fi\n    fi\n  done\n\n  # if\
    \ we have no even value, return an empty array\n  if [ \"$lowest_even_value\"\
    \ = \"\" ]; then\n    echo \"[]\"\n    return\n  fi\n\n  # loop through the array\
    \ again looking for our lowest even value\n  # this is to find the smallest index\
    \ with our lowest even value\n  local lowest_even_index=\"\"\n  for index in $(seq\
    \ 0 $(( $# - 1 ))); do\n    local val=\"${!index}\"\n\n    # check if we've found\
    \ our lowest even value\n    if [ \"$val\" -eq \"$lowest_even_value\" ]; then\n\
    \      # set it to index if we haven't already declared it\n      if [ \"$lowest_even_index\"\
    \ = \"\" ]; then\n        lowest_even_index=\"$index\"\n      fi\n\n      # otherwise,\
    \ it's a new smallest index, so set it to the lowest even index\n      if [ \"\
    $index\" -lt \"$lowest_even_index\" ]; then\n        lowest_even_index=\"$index\"\
    \n      fi\n    fi\n  done\n\n  # print out our lowest even value and index\n\
    \  echo \"[\\\"$lowest_even_value\\\", \\\"$lowest_even_index\\\"]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgr_56d30.sh: line 44: /tmp/tmpgr_56d30.sh % 2 : syntax error: operand
    expected (error token is "/tmp/tmpgr_56d30.sh % 2 ")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local evens\n  local min_index\n  local min_value\n\n  evens=$(echo\
    \ $1 | tr ' ' '\\n' | awk '{if($1%2==0) print $1}')\n  if [ -z \"$evens\" ]; then\n\
    \    echo \"\"\n    return\n  fi\n\n  min_value=$(echo \"$evens\" | sort -n |\
    \ head -n 1)\n  min_index=$(echo $1 | tr ' ' '\\n' | awk -v min=$min_value '{if($1==min)\
    \ print NR}' | head -n 1)\n\n  echo \"[\\\"${min_value}\\\", \\\"${min_index}\\\
    \"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local vals=\"$(echo \"$*\" | tr ' ' '\\n' | grep -e '^[0-9]*[02468]$'\
    \ | sort -n)\"\n    [ \"$vals\" == \"\" ] && echo \"[]\" && return\n    local\
    \ smallest=\"$(echo \"$vals\" | head -n 1)\"\n    local rv=\"[\\\"$smallest\\\"\
    \"\n    local first_index=\"$(echo \"$*\" | tr ' ' '\\n' | grep -m 1 -e \"^$smallest$\"\
    \ | nl | awk '{print $1}')\"\n    echo \"$rv, \\\"$first_index\\\"]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # your code here\n  echo \"Not implemented\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [[ $# -ne 1 ]]; then\n    echo \"Usage: ${FUNCNAME[0]}\
    \ <space-separated list>\"\n    return\n  fi\n  local -a arr=()\n  IFS=' ' read\
    \ -r -a arr <<< \"${1}\"\n  local -a evns=()\n  local i\n  for ((i=0; i<${#arr[@]};\
    \ i++)); do\n    if [[ $((${arr[$i]} % 2)) -eq 0 ]]; then\n      evns+=(\"${arr[$i]}\"\
    )\n    fi\n  done\n  if [[ ${#evns[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  evns=($(printf '%s\\n' \"${evns[@]}\" | sort -g))\n  local -a res=()\n\
    \  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ \"${arr[$i]}\" -eq \"${evns[0]}\"\
    \ ]]; then\n      res+=(\"${evns[0]}\")\n      res+=(\"$i\")\n      break\n  \
    \  fi\n  done\n  if [[ ${#res[@]} -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  echo \"[\\\"${res[0]}\\\", \\\"${res[1]}\\\"]\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  {\n    nums=$(echo \"$1\" | tr ' ' '\\n' | grep -E -v '^0$')\n\
    \    evens=$(echo \"$nums\" | grep -E '^[02468]$')\n    min_even=$(echo \"$evens\"\
    \ | sort -n | head -n 1)\n    if [ -z \"$min_even\" ]; then\n      echo '[]'\n\
    \    else\n      idx=$(echo \"$1\" | tr ' ' '\\n' | grep -En \"^$min_even$\" |\
    \ sort -t: -k2n | head -n 1 | cut -d: -f1)\n      echo \"[\\\"$min_even\\\", \\\
    \"$idx\\\"]\"\n    fi\n  } | sed 's/ *//g'\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\t# Filter for even numbers\n\t# Sort by value, then by index,\
    \ in case of ties\n\t# Take the first\n\tlocal evens\n\tevens=$(echo \"$1\" |\
    \ awk '$1%2==0 { print }' | sort -n -k1,1 -k2,2n)\n\tif [[ -z \"$evens\" ]]; then\n\
    \t\techo []\n\telse\n\t\techo \"[$(echo \"$evens\" | head -n1 | awk '{ print \"\
    \\\"\"$1\"\\\"\", \"\\\"\"NR\"\\\"\" }')]\"\n\tfi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local min_value min_index\n  for a in $1; do\n    if [[ \"\
    $a\" =~ ^[0-9]+$ ]]; then\n      if [[ \"$a\" -gt 0 ]] && [[ \"$a\"%2 -eq 0 ]];\
    \ then\n        if [[ \"$min_value\" == \"\" ]] || [[ \"$a\" -lt \"$min_value\"\
    \ ]]; then\n          min_value=\"$a\"\n          min_index=\"$((${min_index:-0}+1))\"\
    \n        fi\n      fi\n    fi\n  done\n  if [[ \"$min_value\" == \"\" ]]; then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\", \\\"$min_index\\\"]\"\
    \n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # If the given array is empty return [].\n  if [[ -z \"$1\"\
    \ ]]; then\n    echo \"[]\"\n    return\n  fi\n\n  local index=0\n  local min_even_value\n\
    \  local min_even_index\n  # For each element in the given array, check if it\
    \ is even.\n  # If it is even, check if it is less than the current minimum even\
    \ value.\n  # If so, assign this element as the new minimum even value, and set\
    \ the minimum even index.\n  # If the given array contains no even numbers, return\
    \ [].\n  for value in $1; do\n    if [[ $((value % 2)) -eq 0 ]]; then\n      if\
    \ [[ ! $min_even_value ]] || [[ $value -lt $min_even_value ]]; then\n        min_even_value=$value\n\
    \        min_even_index=$index\n      fi\n    fi\n    index=$((index + 1))\n \
    \ done\n\n  if [[ $min_even_value ]]; then\n    echo \"[\\\"$min_even_value\\\"\
    , \\\"$min_even_index\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local res=\"\"\n  local arr=($1)\n  local i=0\n  local min=0\n\
    \  local minIndex=0\n  for ((i=0; i<${#arr[@]}; i++)); do\n    if [[ ${arr[$i]}%2\
    \ -eq 0 ]]; then\n      if [[ $min -eq 0 ]]; then\n        min=${arr[$i]}\n  \
    \      minIndex=$i\n      elif [[ ${arr[$i]} -lt $min ]]; then\n        min=${arr[$i]}\n\
    \        minIndex=$i\n      fi\n    fi\n  done\n  if [[ $min -gt 0 ]]; then\n\
    \    res=\"\\\"$min\\\"\"\n    res=\"$res \\\"$minIndex\\\"\"\n  fi\n  echo \"\
    [$res]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  [[ -z \"$1\" ]] && echo '[]' && return 0\n  local results=()\n\
    \  local min=\n  local minindex=\n  for index in $(seq 0 $((${#arr[@]} - 1)));\
    \ do\n    val=\"${arr[$index]}\"\n    if [[ $(( val % 2 )) -eq 0 ]]; then\n  \
    \    if [[ -z \"$min\" ]] || [[ \"$val\" -lt \"$min\" ]]; then\n        min=\"\
    $val\"\n        minindex=\"$index\"\n      fi\n    fi\n  done\n  if [[ -z \"$min\"\
    \ ]]; then\n    echo '[]'\n  else\n    echo \"[\\\"$min\\\", \\\"$minindex\\\"\
    ]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # (SOLUTION)\n  # convert the input into an array\n  IFS=\"\
    \ \" read -ra values <<< \"$1\"\n  # if there are no values\n  if [[ \"${#values[@]}\"\
    \ -eq 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n  # find all the even values,\
    \ convert them to array\n  IFS=$'\\n' read -rd '' -a even_values <<< $(echo \"\
    ${values[@]}\" | grep -E \"^0|[2-9][0-9]*$\")\n  # if there are no even values\n\
    \  if [[ \"${#even_values[@]}\" -eq 0 ]]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  # find the smallest even value, convert it to an array\n  IFS=$'\\n'\
    \ read -rd '' -a smallest_even_value <<< $(echo \"${even_values[@]}\" | sort -n\
    \ | head -n 1)\n  # for each even value find its index\n  for i in \"${!values[@]}\"\
    ; do\n    if [[ \"${values[$i]}\" -eq \"${smallest_even_value[0]}\" ]]; then\n\
    \      echo \"[\\\"${smallest_even_value[0]}\\\", \\\"$i\\\"]\"\n      return\n\
    \    fi\n  done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl7w6r9te.sh: line 49: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmpl7w6r9te.sh: line 49: [[: 4 2 3: syntax error in expression (error token
    is "2 3")

    /tmp/tmpl7w6r9te.sh: line 49: [[: 4 2 3: syntax error in expression (error token
    is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  [[ $# -eq 0 ]] && echo '[]' && return\n  local smallest_even=()\n\
    \  for num in $1; do\n    if [[ $(( num % 2 )) -eq 0 ]]; then\n      if [[ ${#smallest_even[@]}\
    \ -eq 0 ]]; then\n        smallest_even=($num)\n      elif [[ $num -lt ${smallest_even[0]}\
    \ ]]; then\n        smallest_even=($num)\n      fi\n    fi\n  done\n  if [[ ${#smallest_even[@]}\
    \ -gt 0 ]]; then\n    echo '[ '\\\"${smallest_even[0]}\\\"', '\\\"$(echo \"$1\"\
    \ | grep -b -o \"${smallest_even[0]}\" | head -n 1 | awk -F: '{print $1}')\\\"\
    ' ]'\n  else\n    echo '[]'\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a plucked\n  local elm=''\n  local -i i=0\n  local\
    \ -i index=0\n  local answer=()\n  local smallest=999999\n  local evens=()\n \
    \ local even_count=0\n  #\n  # collect all even values\n  #\n  for elm in $1\n\
    \  do\n    if [ $((elm % 2)) -eq 0 ]\n    then\n      evens[$even_count]=$elm\n\
    \      even_count=$((even_count + 1))\n    fi\n  done\n  #\n  # find the smallest\
    \ even value\n  #\n  for elm in ${evens[@]}\n  do\n    if [ $elm -lt $smallest\
    \ ]\n    then\n      smallest=$elm\n    fi\n  done\n  #\n  # Find the indexes\
    \ of the smallest even value\n  #\n  for elm in $1\n  do\n    if [ $elm -eq $smallest\
    \ ]\n    then\n      plucked[$index]=$i\n      index=$((index + 1))\n    fi\n\
    \    i=$((i + 1))\n  done\n  #\n  # Choose the smallest among the indexes of the\
    \ smallest value\n  #\n  smallest=999999\n  for elm in ${plucked[@]}\n  do\n \
    \   if [ $elm -lt $smallest ]\n    then\n      smallest=$elm\n    fi\n  done\n\
    \  if [ $smallest -eq 999999 ]\n  then\n    echo \"[]\"\n  else\n    answer[0]=$smallest\n\
    \    answer[1]=$smallest\n    echo [\\\"${answer[0]}\\\"], [\\\"${answer[1]}\\\
    \"]\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n\
    \  declare -a nodes\n  read -ra nodes <<<\"$1\"\n  local minv=9999999999999\n\
    \  local minvi=-1\n  for i in \"${!nodes[@]}\"; do\n    if [ \"${nodes[$i]}\"\
    \ -eq \"0\" ]; then\n      echo -n \"[\\\"0\\\", \\\"${i}\\\"]\"\n      return\n\
    \    fi\n    if [ \"${nodes[$i]}\" -lt \"$minv\" ] && [ \"$((nodes[$i] % 2))\"\
    \ -eq \"0\" ]; then\n      minv=\"${nodes[$i]}\"\n      minvi=\"$i\"\n    fi\n\
    \  done\n  if [ \"$minvi\" -eq \"-1\" ]; then\n    echo \"[]\"\n  else\n    echo\
    \ -n \"[\\\"$minv\\\", \\\"$minvi\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    echo $1\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]; then\n    echo '[]'\n    return\n  fi\n\
    \  # Get the even-valued array\n  local even_values=( $(echo \"$1\" | tr ' ' '\\\
    n' | egrep \"^[0-9]+$\" | sort -n | egrep -v \"^[13579]+$\") )\n  if [ ${#even_values[@]}\
    \ -eq 0 ]; then\n    echo '[]'\n    return\n  fi\n  # Get the smallest even-valued\
    \ element from the array\n  # local min=${even_values[0]}\n  # for i in ${even_values[@]};\
    \ do\n  #   if [ $i -lt $min ]; then\n  #     min=$i\n  #   fi\n  # done\n  local\
    \ min=$(echo \"${even_values[@]}\" | sed 's/ /\\n/g' | sort -n | head -n 1)\n\
    \  # Get the index of the first occurrence of the smallest even-valued element\n\
    \  local -i idx=0\n  local -i counter=0\n  for i in ${1[@]}; do\n    if [ $i -eq\
    \ $min ]; then\n      idx=$counter\n      break\n    fi\n    counter+=1\n  done\n\
    \  # Return the result in the required format\n  echo \"[${min}, ${idx}]\"\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpsq1205fm.sh: line 51: ${1[@]}: bad substitution

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\t# If there are no arguments or if the first argument is empty,\
    \ return immediately.\n\t[[ -z \"$1\" ]] && return\n\tlocal min_index min_value\
    \ min_even\n\t# Iterate over the arguments, assigning them to the parameter x.\n\
    \tfor x; do\n\t\t# If x is an even number and is less than the stored minimum\
    \ even value,\n\t\t# record this value and its index.\n\t\tif ((x % 2 == 0)) &&\
    \ ((min_even == 0 || x < min_even)); then\n\t\t\tmin_even=$x\n\t\t\tmin_index=$(expr\
    \ $min_index + 1)\n\t\tfi\n\tdone\n\t# If an even number was found, print it and\
    \ its index.\n\tif ((min_even > 0)); then\n\t\tprintf '[\"%s\", \"%s\"]' \"$min_even\"\
    \ \"$min_index\"\n\tfi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2s8jabce.sh: line 37: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    echo \"I would pluck $1\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a v=($1)\n  if [[ ${#v[@]} -eq 0 ]]; then\n    echo\
    \ \"[]\"\n    return\n  fi\n  local smallest=$(echo \"${v[@]}\" | tr ' ' '\\n'\
    \ | sort -n | grep -xE \"^[0]?[02468]$\" | head -n 1)\n  if [[ $smallest == \"\
    \" ]]; then\n    echo \"[]\"\n    return\n  fi\n  local smallest_index=$(echo\
    \ \"${v[@]}\" | tr ' ' '\\n' | sort -n | grep -xE \"^[0]?[02468]$\" | grep -xE\
    \ \"^$smallest$\" | head -n 1 | tr '\\n' ' ' | awk '{print $NF}')\n  if [[ $smallest_index\
    \ == \"\" ]]; then\n    echo \"[]\"\n    return\n  fi\n  echo \"[\\\"$smallest\\\
    \", \\\"$smallest_index\\\"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  [ -z \"$1\" ] && echo \"[]\" && return\n  # declare -a arr=(\"\
    $@\")\n  # declare -a arr=$(echo \"$1\" | tr ' ' '\\n')\n  # arr=($(echo \"$1\"\
    \ | tr ' ' '\\n'))\n  # echo \"${arr[@]}\"\n  # for i in \"${arr[@]}\"; do\n \
    \ #   echo \"arr[$i] = $i\"\n  # done\n  # echo \"${arr[@]}\"\n  # declare -a\
    \ arr=($(echo \"$1\" | tr ' ' '\\n'))\n  declare -a arr=($(echo \"$1\" | tr '\
    \ ' '\\n'))\n  if [ \"${#arr[@]}\" -eq 0 ]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  smallest_index=0\n  smallest_value=0\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    if [ \"${arr[$i]}\" -gt 0 ] && \\\n      [ $((${arr[$i]} % 2)) -eq 0\
    \ ] && \\\n      [ \"${arr[$i]}\" -lt \"$smallest_value\" ]; then\n      smallest_value=\"\
    ${arr[$i]}\"\n      smallest_index=$i\n    fi\n  done\n  echo \"[\\\"$smallest_value\\\
    \", \\\"$smallest_index\\\"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  echo $(echo $1 | tr \" \" \"\\n\" | grep -E '^[0-9]+$' |\
    \ sort -n | grep -E '^[02468]{1}$' | head -n 1)\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    [[ \"$1\" == \"\" ]] && echo \"[]\" && return\n    # $1_\
    \ is the list with comma\n    list_=$(echo \"$1\" | sed 's/ /,/g')\n    # $2 is\
    \ the index of the first even number\n    index_=$(python3 -c \"\nimport re\n\
    list_ = [int(i) for i in re.findall(r'\\d+', '$list_')]\nfor i, item in enumerate(list_):\n\
    \    if not item % 2:\n        print(i)\n        break\n\")\n    # $3 is the index\
    \ of the minimum even number\n    if [ \"$index_\" != \"\" ]; then\n        min_=$(python3\
    \ -c \"\nlist_ = [int(i) for i in re.findall(r'\\d+', '$list_')]\nif not $index_\
    \ % 2:\n    min_ = list_[$index_]\n    for i, item in enumerate(list_):\n    \
    \    if not item % 2:\n            if item < min_:\n                print(i)\n\
    \                break\n\")\n    fi\n    if [ \"$min_\" != \"\" ]; then\n    \
    \    echo \"[$(echo \"$1\" | cut -d \" \" -f$((min_+1))), '\\\"$min_\\\"']\"\n\
    \    else\n        echo \"[]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"<string>\", line 2, in <module>\n\
    NameError: name 're' is not defined\n"
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=(\"$@\")\n  local smallest=${nodes[0]}\n  local\
    \ index=0\n  local odd=1\n  for i in \"${!nodes[@]}\"; do\n    (( nodes[i] % 2\
    \ == 0 && nodes[i] < smallest )) && {\n      smallest=${nodes[i]}\n      index=$i\n\
    \      odd=0\n    }\n  done\n  (( odd )) && {\n    echo \"[]\"\n    return\n \
    \ }\n  echo \"[\\\"$smallest\\\", \\\"$index\\\"]\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp6ducmxh4.sh: line 35: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  [[ -z \"$1\" ]] && echo \"[]\" && return\n  [[ \"$1\" ==\
    \ \"\" ]] && echo \"[]\" && return\n  declare -a a=($1)\n  for((i=0;i<${#a[@]};i++));\
    \ do\n    (( a[i] % 2 == 0 )) && echo \"[\\\"${a[i]}\\\", \\\"$i\\\"]\" && return\n\
    \  done\n  echo \"[]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -a A\n    IFS=' ' read -r -a A <<< \"${1}\"\n \
    \   if [[ ${#A[@]} -eq 0 ]]; then\n        echo '[]'\n        return\n    fi\n\
    \    declare -i min_index\n    declare -i min_value\n    local el\n    local -i\
    \ i=0\n    for el in \"${A[@]}\"; do\n        if (( el % 2 == 0 )); then\n   \
    \         if (( min_value == 0 || el < min_value )); then\n                min_value=$el\n\
    \                min_index=$i\n            fi\n        fi\n        (( i++ ))\n\
    \    done\n    if (( min_value == 0 )); then\n        echo '[]'\n    else\n  \
    \      echo \"[\\\"${min_value}\\\", \\\"${min_index}\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Use bash array to store tree.\n    local tree=($1)\n\
    \    local smallest_value\n    local smallest_index\n    local i\n    for ((i=0;\
    \ i<${#tree[@]}; i++)); do\n        if [[ $((tree[i] % 2)) -eq 0 ]]; then\n  \
    \          if [[ -z $smallest_value ]]; then\n                smallest_value=${tree[i]}\n\
    \                smallest_index=$i\n            elif [[ ${tree[i]} -lt $smallest_value\
    \ ]]; then\n                smallest_value=${tree[i]}\n                smallest_index=$i\n\
    \            fi\n        fi\n    done\n    if [[ -z $smallest_value ]]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"$smallest_value\\\", \\\"\
    $smallest_index\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local value\n\n  # Split the list.\n  local -a arr=(${1//\
    \ / })\n\n  # Sort and return the first even element.\n  for value in \"${arr[@]}\"\
    ; do\n    if [[ \"$value\" == 0 ]]; then\n      echo ['\"0\"', '\"1\"']\n    \
    \  return\n    elif [[ \"$value\"%2 -eq 0 ]]; then\n      echo \"[\\\"$value\\\
    \", \\\"1\\\"]\"\n      return\n    fi\n  done\n\n  # If there are no even numbers,\
    \ return an empty list.\n  echo []\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local n=0\n  local n1=0\n  while read n; do\n    if [ \"\
    $((n % 2))\" -eq 0 ] && [ \"$n\" -lt \"$n1\" ]; then\n      n1=\"$n\"\n    fi\n\
    \  done < <(\n    for n in $1; do\n      echo \"$n\"\n    done\n  )\n  if [ \"\
    $n1\" -eq 0 ]; then\n    echo '[]'\n  else\n    echo \"[\\\"$n1\\\", \\\"$(grep\
    \ -Fno -m1 $n1 <<<\"$1\\\" | cut -d: -f1)\\\"]\"\n  fi\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpymc3qz0h.sh: line 44: unexpected EOF while looking for matching
    `)''

    /tmp/tmpymc3qz0h.sh: line 65: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -n arr=$1\n    local min=1000000000000000\n    local\
    \ min_idx=0\n    local i=0\n    for a in $arr\n    do\n        if [[ $(( a % 2\
    \ )) -eq 0 ]] && [[ $a -lt $min ]]\n        then\n            min=$a\n       \
    \     min_idx=$i\n        fi\n        i=$(( i + 1 ))\n    done\n    if [[ $min\
    \ -eq 1000000000000000 ]]\n    then\n        echo []\n    else\n        echo [\\\
    '$min\\', \\'$min_idx\\']\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0h9kf7xg.sh: line 30: local: `4 2 3'': invalid variable name for
    name reference

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [[ $# -lt 1 ]]; then\n    echo '[]'\n    return\n  fi\n\
    \  local a=()\n  IFS=' ' read -ra a <<< \"$1\"\n  local smallest_value=$(sort\
    \ -n -k1 -g -t ' ' <<< \"${a[*]}\" | head -n 1)\n  if [[ $smallest_value -gt 0\
    \ ]] && [[ $(( smallest_value % 2 )) -eq 0 ]]; then\n    local smallest_index=$(cat\
    \ <<< \"${a[*]}\" | grep -b -o $smallest_value | head -n 1 | cut -d':' -f1)\n\
    \    echo '[ \"'$smallest_value'\", \"'$smallest_index'\" ]'\n  else\n    echo\
    \ '[]'\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'sort: options ''-gn'' are incompatible

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    max_index=10000\n    even_nodes=(${1// / })\n    min_even_value=1\n\
    \    min_even_index=${max_index}\n    found_min_even_value=0\n    for node in\
    \ \"${even_nodes[@]}\"; do\n        if [ $(($node % 2)) -eq 0 ]; then\n      \
    \      # this node is even\n            found_min_even_value=1\n            if\
    \ [ $node -lt $min_even_value ]; then\n                min_even_value=$node\n\
    \                min_even_index=${i}\n            fi\n        fi\n    done\n \
    \   if [ $found_min_even_value -eq 0 ]; then\n        echo \"[]\"\n    else\n\
    \        echo \"[\\\"${min_even_value}\\\", \\\"${min_even_index}\\\"]\"\n   \
    \ fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local array=($1)\n    local smallest=${array[0]}\n    local\
    \ smallestindex=0\n    local i=0\n    for element in ${array[@]}; do\n       \
    \ if [[ $((element%2)) -eq 0 ]] && [[ $element -lt $smallest ]]; then\n      \
    \      smallest=$element\n            smallestindex=$i\n        fi\n        i=$((i+1))\n\
    \    done\n    if [[ $smallest -eq ${array[0]} ]]; then\n        echo []\n   \
    \ else\n        echo [\"$smallest\", \"$smallestindex\"]\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\tIFS=\" \" read -r -a arr <<< \"$1\"\n\tmin_even=9999999999999999999999999999999999999\n\
    \tfor n in \"${arr[@]}\"; do\n\t\tif ((n>0)); then\n\t\t\tif ((n%2==0)); then\n\
    \t\t\t\tif ((n<min_even)); then\n\t\t\t\t\tmin_even=$n\n\t\t\t\tfi\n\t\t\tfi\n\
    \t\tfi\n\tdone\n\tmin_even_index=-1\n\tfor n in \"${!arr[@]}\"; do\n\t\tif ((arr[n]==min_even));\
    \ then\n\t\t\tmin_even_index=$n\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif ((min_even_index==-1));\
    \ then\n\t\techo \"[]\"\n\telse\n\t\techo \"[\\\"$min_even\\\", \\\"$min_even_index\\\
    \"]\"\n\tfi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local index=0\n  local smallest_value=0\n  local smallest_value_index=0\n\
    \  local -a in_array=()\n  IFS=' ' read -ra in_array <<< \"${1}\"\n  for current_value\
    \ in \"${in_array[@]}\"; do\n    if [[ \"${current_value}\" -eq 0 ]]; then\n \
    \     smallest_value=\"${current_value}\"\n      smallest_value_index=\"${index}\"\
    \n      break\n    elif [[ \"${current_value}\" -gt 0 ]] && [[ \"${current_value}\"\
    \ -lt \"${smallest_value}\" ]] && [[ $((current_value % 2)) -eq 0 ]]; then\n \
    \     smallest_value=\"${current_value}\"\n      smallest_value_index=\"${index}\"\
    \n    fi\n    ((index++))\n  done\n  if [[ \"${smallest_value}\" -eq 0 ]]; then\n\
    \    echo \"[\\\"${smallest_value}\\\", \\\"${smallest_value_index}\\\"]\"\n \
    \ elif [[ \"${smallest_value}\" -gt 0 ]]; then\n    echo \"[\\\"${smallest_value}\\\
    \", \\\"${smallest_value_index}\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  #\n  # Your solution here\n  #\n  declare -a nodes=($1)\n\
    \  local minVal minValIndex minValIndex2\n  local i=0\n  local ia\n  local -a\
    \ evnNodes\n  local -a evnNodesIndex\n  local -a evnNodesIndex2\n  for ia in \"\
    ${nodes[@]}\"; do\n    if [ $((ia % 2)) -eq 0 ]; then\n      evnNodes[$i]=$ia\n\
    \      evnNodesIndex[$i]=$i\n      evnNodesIndex2[$i]=$((i+1))\n      i=$((i+1))\n\
    \    fi\n  done\n  if [ ${#evnNodes[@]} -eq 0 ]; then\n    echo \"[]\"\n    return\n\
    \  fi\n  minVal=${evnNodes[0]}\n  minValIndex=0\n  minValIndex2=1\n  i=1\n  while\
    \ [ $i -lt ${#evnNodes[@]} ]; do\n    if [ ${evnNodes[$i]} -lt $minVal ]; then\n\
    \      minVal=${evnNodes[$i]}\n      minValIndex=${evnNodesIndex[$i]}\n      minValIndex2=${evnNodesIndex2[$i]}\n\
    \    fi\n    i=$((i+1))\n  done\n  echo \"['\"$minVal\"', '\"$minValIndex2\"']\"\
    \n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nums=()\n  for n in \"$@\"; do\n    if [[ $n -eq 0\
    \ ]]; then\n      nums+=(\"$n\")\n    elif [[ $(( n % 2 )) -eq 0 ]]; then\n  \
    \    nums+=(\"$n\")\n    fi\n  done\n  if [[ ${#nums[@]} -gt 0 ]]; then\n    local\
    \ smallest=${nums[0]}\n    local smallest_idx=0\n    for i in \"${!nums[@]}\"\
    ; do\n      if [[ ${nums[$i]} -lt $smallest ]]; then\n        smallest=${nums[$i]}\n\
    \        smallest_idx=$i\n      fi\n    done\n    echo \"[\\\"$smallest\\\", \\\
    \"$smallest_idx\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n  \
    \  pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq15ls3nj.sh: line 32: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmpq15ls3nj.sh: line 34: 4 2 3: syntax error in expression (error token is
    "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Write your solution in here!\n  # echo \"${1}\"\n  declare\
    \ -a values\n  local -i index=0\n  local -i len=0\n  local -i len2=0\n  local\
    \ -i index2=0\n  local -i num=0\n  # find the smallest even number\n  for i in\
    \ ${1}; do\n    len=$(( ${len} + 1 ))\n    if [[ $((${i} % 2)) -eq 0 ]]; then\n\
    \      values[${index}]=${i}\n      index=$(( ${index} + 1 ))\n    fi\n  done\n\
    \  # find the smallest even number in the values array\n  len2=${#values[@]}\n\
    \  for i in ${values[@]}; do\n    if [[ ${num} -gt ${i} ]]; then\n      num=${i}\n\
    \    fi\n  done\n  # find the index of the smallest even number in the values\
    \ array\n  for (( index2=0; index2<len2; index2++ )); do\n    if [[ ${values[index2]}\
    \ -eq ${num} ]]; then\n      break\n    fi\n  done\n  # find the index of the\
    \ smallest even number in the original array\n  local -i orig_index=0\n  local\
    \ -i count=0\n  for i in ${1}; do\n    if [[ ${count} -eq ${index2} ]]; then\n\
    \      break\n    fi\n    if [[ $((${i} % 2)) -eq 0 ]]; then\n      count=$((\
    \ ${count} + 1 ))\n    fi\n    orig_index=$(( ${orig_index} + 1 ))\n  done\n \
    \ # if the smallest even number is found\n  if [[ ${len} -gt 0 ]]; then\n    echo\
    \ \"[\\\"${num}\\\", \\\"${orig_index}\\\"]\"\n  else\n    echo \"[]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n\n  # remove duplicates\n  nodes=$(echo\
    \ \"$nodes\" | awk '!a[$0]++')\n\n  local evens=\"$(echo \"$nodes\" | grep \"\
    ^[02468]\\+$\")\"\n  if [ -z \"$evens\" ]; then\n    echo \"[]\"\n    return\n\
    \  fi\n\n  # if all numbers are even, choose the smallest one\n  # otherwise,\
    \ choose the smallest even number\n  local smallest=$(echo \"$nodes\" | head -n\
    \ 1)\n  if [ -n \"$(echo \"$nodes\" | grep \"^[13579]\\+$\")\" ]; then\n    smallest=$(echo\
    \ \"$evens\" | head -n 1)\n  fi\n\n  local smallest_idx=$(echo \"$nodes\" | grep\
    \ -n \"$smallest\" | cut -d : -f 1)\n  echo \"[\\\"$smallest\\\", \\\"$smallest_idx\\\
    \"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\tif [[ \"$#\" -ne 1 ]]; then\n\t\techo \"Usage: $0 \\\"space-separated\
    \ list\\\"\"\n\t\treturn 1\n\tfi\n\t# 1. convert space-separated list to a newline-separated\
    \ list\n\t# 2. filter out odd values\n\t# 3. convert to a space-separated list\
    \ (to pass to min-max.sh)\n\t# 4. filter out the index of the minimum value\n\t\
    # 5. convert to a newline-separated list\n\t# 6. convert to an array\n\t# 7. print\
    \ the array as a string\n\tlocal -a arr=($(echo \"$1\" | tr ' ' '\\n' | grep -vE\
    \ '^[0-9]+[13579]$' | tr '\\n' ' ' | min-max.sh | grep -Eo '^[0-9]+' | tr '\\\
    n' ' '))\n\t#echo \"arr is: ${arr[@]}\"\n\tif [[ \"${#arr[@]}\" -gt 0 ]]; then\n\
    \t\techo -n \"[\\\"${arr[0]}\\\"\"\n\t\t# list the positions of the minimum value\n\
    \t\tfor i in $(seq 0 $((${#arr[@]} - 1))); do\n\t\t\tif [[ \"${arr[$i]}\" -eq\
    \ \"${arr[0]}\" ]]; then\n\t\t\t\techo -n \", \\\"$i\\\"\"\n\t\t\tfi\n\t\tdone\n\
    \t\techo -n \"]\"\n\telse\n\t\techo -n \"[]\"\n\tfi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp91lg380b.sh: line 41: min-max.sh: command not found

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a nodes=($1)\n  # Your code here\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local smallest_even_value=''\n    local smallest_even_value_index=''\n\
    \    local i=0\n    for node in $1; do\n        if [[ $node -eq 0 ]]; then\n \
    \           if [[ -z $smallest_even_value_index ]]; then\n                smallest_even_value=$node\n\
    \                smallest_even_value_index=$i\n            fi\n        elif [[\
    \ $((node % 2)) -eq 0 ]]; then\n            if [[ -z $smallest_even_value_index\
    \ ]]; then\n                smallest_even_value=$node\n                smallest_even_value_index=$i\n\
    \            elif [[ $node -lt $smallest_even_value ]]; then\n               \
    \ smallest_even_value=$node\n                smallest_even_value_index=$i\n  \
    \          fi\n        fi\n        ((i++))\n    done\n    if [[ -z $smallest_even_value_index\
    \ ]]; then\n        echo '[]'\n    else\n        echo \"[\\\"$smallest_even_value\\\
    \", \\\"$smallest_even_value_index\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local min_even=\n  local min_index=\n  local i=0\n  local\
    \ arr=($1)\n  local count=${#arr[@]}\n  while [[ i -lt count ]]; do\n    if [[\
    \ -z $min_even ]] && [[ ${arr[i]} -eq 0 ]]; then\n      min_even=0\n      min_index=$i\n\
    \    elif [[ -z $min_even ]] && [[ ${arr[i]} -ne 0 ]] && [[ $((${arr[i]} % 2))\
    \ -eq 0 ]]; then\n      min_even=${arr[i]}\n      min_index=$i\n    elif [[ !\
    \ -z $min_even ]] && [[ ${arr[i]} -eq 0 ]] && [[ $min_even -ne 0 ]]; then\n  \
    \    min_even=0\n      min_index=$i\n    elif [[ ! -z $min_even ]] && [[ ${arr[i]}\
    \ -ne 0 ]] && [[ $((${arr[i]} % 2)) -eq 0 ]] && [[ ${arr[i]} -lt $min_even ]];\
    \ then\n      min_even=${arr[i]}\n      min_index=$i\n    fi\n    (( i += 1 ))\n\
    \  done\n  if [[ ! -z $min_even ]]; then\n    echo \"[\\\"$min_even\\\", \\\"\
    $min_index\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [ $# -eq 0 ]; then\n        echo \"Invalid input\"\n\
    \        return 1\n    fi\n    local arr=($1)\n    local min_even_value=\n   \
    \ local min_even_index=\n    local i=0\n    while [ $i -lt ${#arr[@]} ]; do\n\
    \        if [ $((arr[$i] % 2)) -eq 0 ]; then\n            if [ -z $min_even_value\
    \ ]; then\n                min_even_value=${arr[$i]}\n                min_even_index=$i\n\
    \            else\n                if [ ${arr[$i]} -lt $min_even_value ]; then\n\
    \                    min_even_value=${arr[$i]}\n                    min_even_index=$i\n\
    \                fi\n            fi\n        fi\n        i=$((i + 1))\n    done\n\
    \    if [ -z $min_even_value ]; then\n        echo \"[]\"\n    else\n        echo\
    \ \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [ -z \"$1\" ]; then\n        echo '[]'\n        return\n\
    \    fi\n    # TODO: Consider expanding array\n    # var=$(tr ' ' '\\n' <<<\"\
    $1\" | sort -nu | head -n 1)\n    local smallest=$(\n        for v in $1; do\n\
    \            if ((v % 2 == 0)); then\n                echo \"$v\"\n          \
    \      break\n            fi\n        done\n    )\n    if [ -z \"$smallest\" ];\
    \ then\n        echo '[]'\n        return\n    fi\n    local index=0\n    for\
    \ v in $1; do\n        if ((v == smallest)); then\n            echo \"[\\\"$smallest\\\
    \", \\\"$index\\\"]\"\n            return\n        fi\n        ((index++))\n \
    \   done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [ -z \"$1\" ]; then\n        echo '[]'\n        return\n\
    \    fi\n    local tree=($1)\n    local smallest_idx=0\n    local min_even=0\n\
    \    for idx in \"${!tree[@]}\"; do\n        local val=${tree[$idx]}\n       \
    \ if ((val == 0)); then\n            min_even=0\n            smallest_idx=$idx\n\
    \            break\n        fi\n        if (((val % 2 == 0) && (val < min_even\
    \ || min_even == 0))); then\n            min_even=$val\n            smallest_idx=$idx\n\
    \        fi\n    done\n    if ((min_even == 0)); then\n        echo '[]'\n   \
    \ else\n        echo \"[\\\"$min_even\\\", \\\"$smallest_idx\\\"]\"\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local arr=\"$1\"\n    if [[ -z \"$arr\" ]]; then\n    \
    \    echo \"[]\"\n        return\n    fi\n    local smallest_even_index\n    local\
    \ smallest_even_value=${arr%% *}\n    local arr_idx=0\n    local count=1\n   \
    \ while [[ $count -le ${#arr} ]]; do\n        local value=\"${arr:count-1:1}\"\
    \n        if [[ $value -eq 0 ]]; then\n            echo \"['0', '0']\"\n     \
    \       return\n        fi\n        if [[ $((value % 2)) -eq 0 ]]; then\n    \
    \        if [[ $value -lt $smallest_even_value ]]; then\n                smallest_even_value=$value\n\
    \                smallest_even_index=$arr_idx\n            fi\n        fi\n  \
    \      count=$((count + 1))\n        arr_idx=$((arr_idx + 1))\n    done\n    if\
    \ [[ -z $smallest_even_value ]]; then\n        echo \"[]\"\n    else\n       \
    \ echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\"]\"\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a array\n  local val ind\n  if [[ $# -eq 0 ]]; then\n\
    \    echo \"[]\"\n    return\n  fi\n  IFS=' ' read -r -a array <<< \"$@\"\n  for\
    \ val in \"${array[@]}\"; do\n    if [[ $((val % 2)) -eq 0 ]]; then\n      echo\
    \ \"[\\\"$val\\\", \\\"$ind\\\"]\"\n      return\n    fi\n    ind=$((ind + 1))\n\
    \  done\n  echo \"[]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local smallest_val smallest_val_index=( )\n  local index=0\n\
    \  local node\n  # let's get all the even values with their index:\n  for node\
    \ in $1; do\n    if [ $((node % 2)) -eq 0 ]; then\n      smallest_val_index+=(\
    \ \"$node $index\" )\n    fi\n    ((index++))\n  done\n  if [ ${#smallest_val_index[@]}\
    \ -eq 0 ]; then\n    echo []\n    return\n  fi\n  # let's check which value is\
    \ the smallest:\n  smallest_val=${smallest_val_index[0]%% *}\n  for node in \"\
    ${smallest_val_index[@]}\"; do\n    if [ ${node%% *} -lt $smallest_val ]; then\n\
    \      smallest_val=${node%% *}\n    fi\n  done\n  # let's get all of the nodes\
    \ with the smallest value:\n  smallest_val_index=( )\n  for node in \"${smallest_val_index[@]}\"\
    ; do\n    if [ ${node%% *} -eq $smallest_val ]; then\n      smallest_val_index+=(\
    \ \"$node\" )\n    fi\n  done\n  # let's check which node is the first:\n  smallest_val_index=${smallest_val_index[0]#*\
    \ }\n  for node in \"${smallest_val_index[@]}\"; do\n    if [ ${node#* } -lt $smallest_val_index\
    \ ]; then\n      smallest_val_index=${node#* }\n    fi\n  done\n  echo \"[\\\"\
    $smallest_val\\\", \\\"$smallest_val_index\\\"]\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [[ -z \"$1\" ]]; then\n        echo \"[]\"\n       \
    \ return 0\n    fi\n    smallest_even=2147483647\n    smallest_index=0\n    index=0\n\
    \    for i in $1; do\n        if [[ $((i % 2)) -eq 0 ]] && [[ $i -lt $smallest_even\
    \ ]]; then\n            smallest_even=$i\n            smallest_index=$index\n\
    \        fi\n        index=$((index + 1))\n    done\n    if [[ $smallest_even\
    \ -eq 2147483647 ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"\
    $smallest_even\\\", \\\"$smallest_index\\\"]\"\n    fi\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n\
    \  echo \"$1\" | tr ' ' '\\n' | awk '{ if($1 % 2 == 0) { print $1; exit } }' |\
    \ awk '{ print \"[\\\"\"$1\"\\\", \\\"\"NR\"\\\"]\" }'\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a arr=();\n  index=0;\n  smallest_even_value=999999999;\n\
    \  index_of_smallest_even_value=0;\n  empty_list=1;\n  for i in $1; do\n    arr[$index]=$i;\n\
    \    if [[ $i -lt $smallest_even_value && $i -gt 0 && $i%2 -eq 0 ]]; then\n  \
    \    smallest_even_value=$i;\n      index_of_smallest_even_value=$index;\n   \
    \ fi\n    index=$((index+1));\n    empty_list=0;\n  done\n  if [[ $empty_list\
    \ -eq 1 ]]; then\n    echo \"[]\";\n  else\n    echo \"[\\\"$smallest_even_value\\\
    \", \\\"$index_of_smallest_even_value\\\"]\";\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local num_array=($1)  # convert to array\n  local num_len=${#num_array[@]}\n\
    \  local min_even=\n  local min_even_idx=\n  for (( i=0; i<num_len; i++ )); do\n\
    \    local n=${num_array[$i]}\n    if (( n % 2 == 0 )); then\n      if [[ -z \"\
    $min_even\" ]]; then\n        min_even=$n\n        min_even_idx=$i\n      elif\
    \ (( n < min_even )); then\n        min_even=$n\n        min_even_idx=$i\n   \
    \   fi\n    fi\n  done\n  if [[ -z \"$min_even\" ]]; then\n    echo []\n  else\n\
    \    echo \"[\\\"$min_even\\\", \\\"$min_even_idx\\\"]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local input=$1\n    local out\n    local evens\n    local\
    \ minimum_even\n    local i=0\n    while read -r node; do\n        i=$((i+1))\n\
    \        if (( node % 2 == 0 )); then\n            evens=\"$evens $node\"\n  \
    \          if [[ -z $minimum_even || $node -lt $minimum_even ]]; then\n      \
    \          minimum_even=$node\n            fi\n        fi\n    done <<< \"$input\"\
    \n    for even in $evens; do\n        if [[ $even -eq $minimum_even ]]; then\n\
    \            out=\"$out $even $i\"\n        fi\n    done\n    if [[ -z $out ]];\
    \ then\n        echo \"[]\"\n    else\n        echo \"[\\\"$out\\\"]\"\n    fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpzb22sv6_.sh: line 37: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n\
    \    fi\n    declare -i min=\"999999\"\n    declare -i min_index=\"999999\"\n\
    \    #declare -i i=\"1\"\n    while read -r node; do\n        if ((node % 2 ==\
    \ 0 && node < min)); then\n            min=node\n            min_index=\"${i}\"\
    \n        fi\n        ((i++))\n    done <<< \"$1\"\n    if [ \"$min\" -eq 999999\
    \ ]; then\n        echo \"[]\"\n    else\n        echo \"[\\\"$min\\\", \\\"$min_index\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpng353uk1.sh: line 38: ((: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    pluck2 $1 | grep -E \"^[0-9]*$\" | grep -Ev \"^[0-9]*[13579]$\"\
    \ | sort -n | head -n 1 | awk '{print \"[\\\"\"$1\"\\\", \\\"\"NR\"\\\"]\"}'\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpc1ov_yp2.sh: line 30: pluck2: command not found

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a branch branch_even branch_even_values\n  branch=($1)\n\
    \  if [ \"${#branch[@]}\" -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n \
    \ for node in \"${branch[@]}\"; do\n    if [ $((node % 2)) -eq 0 ]; then\n   \
    \   branch_even+=($node)\n    fi\n  done\n  if [ \"${#branch_even[@]}\" -eq 0\
    \ ]; then\n    echo \"[]\"\n    return\n  fi\n  branch_even_values=($(echo \"\
    ${branch_even[@]}\" | tr ' ' '\\n' | sort -g | uniq))\n  for (( i=0; i<${#branch[@]};\
    \ i++ )); do\n    if [ \"${branch[$i]}\" -eq \"${branch_even_values[0]}\" ]; then\n\
    \      echo \"[\\\"${branch_even_values[0]}\\\", \\\"$i\\\"]\"\n      return\n\
    \    fi\n  done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a array=($1)\n  local even_numbers=()\n  local even_indexes=()\n\
    \  local k=0\n  local n\n  local min=2147483647\n  local index=0\n  local mod=0\n\
    \  for n in \"${array[@]}\"; do\n    mod=$((n % 2))\n    if [ \"$mod\" -eq 0 ];\
    \ then\n      even_numbers[$k]=$n\n      even_indexes[$k]=$index\n      if ((\
    \ $n < $min )); then\n        min=$n\n      fi\n      ((k++))\n    fi\n    ((index++))\n\
    \  done\n  echo \"[\\\"$min\\\", \\\"${even_indexes[${#even_indexes[@]}-1]}\\\"\
    ]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    array=( $1 )\n    lowest=999999\n    lowest_index=999999\n\
    \    for (( i=0; i<${#array[@]}; i++ )); do\n        if (( ${array[$i]} < $lowest\
    \ )) && (( ${array[$i]} % 2 == 0 )); then\n            lowest=${array[$i]}\n \
    \           lowest_index=$i\n        fi\n    done\n    if (( $lowest == 999999\
    \ )); then\n        echo \"[]\"\n    else\n        echo \"[\\\"$lowest\\\", \\\
    \"$lowest_index\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local arr=\"$@\"\n  local len=${#arr[@]}\n  if [[ $len -eq\
    \ 0 ]]; then\n    echo '[]'\n    return\n  fi\n  local min=${arr[0]}\n  local\
    \ imin=0\n  local i=1\n  while [[ $i -lt $len ]]; do\n    # bash is so simple\
    \ that it always evaluates condition as strings\n    if [[ $(( ${arr[$i]} % 2\
    \ )) -eq 0 ]] && [[ ${arr[$i]} -lt $min ]]; then\n      min=${arr[$i]}\n     \
    \ imin=$i\n    fi\n    i=$(( i + 1 ))\n  done\n  if [[ $(( $min % 2 )) -eq 0 ]];\
    \ then\n    echo \"[$min, $imin]\"\n  else\n    echo '[]'\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5bpnojl8.sh: line 47: 4 2 3 % 2 : syntax error in expression (error
    token is "2 3 % 2 ")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # [[ ${1} =~ [0-9] ]] && echo '[\"'\"${1// /\", \"}\"'\"\
    ]' && return 0\n  if [[ -z ${1} ]]; then\n    echo '[]'\n    return\n  fi\n  if\
    \ [[ ${1} =~ [0-9] ]]; then\n    # echo '[\"'\"${1// /\", \"}\"'\"]'\n    echo\
    \ '['$(echo \"${1}\" | sed -r 's/( [0-9])/\\1,/g')']'\n    return\n  fi\n  echo\
    \ '[]'\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # print error message if the given string is empty\n  \
    \  [[ -z \"$1\" ]] && echo -e '[!] Please provide a space-separated list of numbers.'\
    \ && return 1\n    # print error message if the given string contains non-numeric\
    \ values\n    [[ $1 =~ [^0-9 ] ]] && echo -e '[!] Please provide a space-separated\
    \ list of numbers.' && return 1\n    # initialize empty string\n    result=''\n\
    \    # loop through the given string, returning the first even number\n    # that\
    \ has the lowest index\n    for i in $1; do\n        # check if $i is even\n \
    \       if [[ $(($i % 2)) -eq 0 ]]; then\n            # return the first even\
    \ number\n            result=\"$i\"\n            # break out of the loop\n   \
    \         break\n        fi\n    done\n    # check if the result is empty; if\
    \ so, the given string doesn't contain even numbers\n    if [[ -z \"$result\"\
    \ ]]; then\n        # return empty string\n        echo '[]'\n    else\n     \
    \   # otherwise, return a list of the first even number and its index\n      \
    \  # print the index of $result\n        index=$(echo $1 | tr ' ' '\\n' | grep\
    \ -n \"$result\" | awk -F ':' '{print $1}')\n        # return the result and the\
    \ index\n        echo \"[\\\"$result\\\", \\\"$index\\\"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt3xpi9h4.sh: line 33: syntax error in conditional expression

    /tmp/tmpt3xpi9h4.sh: line 33: syntax error near `]''

    /tmp/tmpt3xpi9h4.sh: line 33: `    [[ $1 =~ [^0-9 ] ]] && echo -e ''[!] Please
    provide a space-separated list of numbers.'' && return 1''

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=\"$1\"\n    # Write your solution here\n  \
    \  local node_value\n    local node_index\n    local smallest_even_value=-1\n\
    \    local smallest_even_index=-1\n    IFS=\" \" read -r -a node_values <<< \"\
    $nodes\"\n    for node_index in \"${!node_values[@]}\"; do\n        node_value=\"\
    ${node_values[$node_index]}\"\n        if [[ \"$node_value\" =~ ^[0-9]+$ ]]; then\n\
    \            if [[ \"$node_value\" -eq 0 ]]; then\n                echo \"[\\\"\
    0\\\", \\\"$node_index\\\"]\"\n                return\n            elif [[ \"\
    $node_value\" -gt 0 ]] && [[ \"$node_value\" -le 10000 ]]; then\n            \
    \    if [[ \"$node_value\" -eq 1 ]]; then\n                    if [[ \"$smallest_even_value\"\
    \ -eq -1 ]]; then\n                        smallest_even_value=\"$node_value\"\
    \n                        smallest_even_index=\"$node_index\"\n              \
    \      fi\n                elif [[ \"$node_value\" -gt 1 ]]; then\n          \
    \          if [[ \"$((node_value % 2))\" -eq 0 ]]; then\n                    \
    \    if [[ \"$smallest_even_value\" -eq -1 ]]; then\n                        \
    \    smallest_even_value=\"$node_value\"\n                            smallest_even_index=\"\
    $node_index\"\n                        elif [[ \"$node_value\" -lt \"$smallest_even_value\"\
    \ ]]; then\n                            smallest_even_value=\"$node_value\"\n\
    \                            smallest_even_index=\"$node_index\"\n           \
    \             fi\n                    fi\n                fi\n            fi\n\
    \        fi\n    done\n    if [[ \"$smallest_even_value\" -eq -1 ]]; then\n  \
    \      echo \"[]\"\n    else\n        echo \"[\\\"$smallest_even_value\\\", \\\
    \"$smallest_even_index\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a arr=(\"$@\")\n    local -a smallest_indexes=()\n\
    \    local -i even_count=0\n\n    # find the smallest even number if it exists\n\
    \    local smallest_value\n    smallest_value=$(\n        for node in \"${arr[@]}\"\
    ; do\n            [[ \"$node\" -eq 0 ]] && { echo \"0\"; return; }\n         \
    \   (( node%2 == 0 )) && echo \"$node\"\n        done | sort -n | head -n 1\n\
    \    )\n\n    # if no even found, return empty array\n    [[ -z \"$smallest_value\"\
    \ ]] && echo \"[]\" && return\n\n    # else find all indexes of the smallest even\
    \ number\n    local -i cnt=0\n    for node in \"${arr[@]}\"; do\n        if [[\
    \ \"$node\" -eq \"$smallest_value\" ]]; then\n            smallest_indexes+=(\"\
    $cnt\")\n        fi\n        (( cnt++ ))\n    done\n\n    # choose the smallest\
    \ index and return it\n    echo \"[\\\"$smallest_value\\\", \\\"${smallest_indexes[0]}\\\
    \"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgf0fd4e0.sh: line 43: [[: 4 2 3: syntax error in expression (error
    token is "2 3")

    /tmp/tmpgf0fd4e0.sh: line 44: ((: 4 2 3: syntax error in expression (error token
    is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    evens=()\n    while read -r i; do\n        if [[ $(( i\
    \ % 2 )) -eq 0 ]]; then\n            evens+=(\"$i\")\n        fi\n    done <<<\
    \ \"$1\"\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo -n \"[]\"\n    else\n\
    \        min=${evens[0]}\n        i=0\n        for n in \"${evens[@]}\"; do\n\
    \            if [[ $n -lt $min ]]; then\n                min=$n\n            \
    \    min_i=$i\n            fi\n            i=$(( i + 1 ))\n        done\n    \
    \    echo -n \"[\\\"$min\\\", \\\"$min_i\\\"]\"\n    fi\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp2_228cbx.sh: line 32: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [[ -z \"$1\" ]]; then\n        printf \"[]\"\n     \
    \   return\n    fi\n    # \"The plucked node should be the node with the smallest\
    \ even value.\n    # If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\"\n    # so we're looking for the smallest\
    \ even (p) and the lowest index among the smallest evens (q)\n    local p q\n\
    \    local a i\n    i=0\n    for a in $1; do\n        # is it even?\n        if\
    \ [[ $(( a % 2 )) -eq 0 ]]; then\n            # if we don't have p yet, set it\
    \ to a\n            if [[ -z \"$p\" ]]; then\n                p=$a\n         \
    \       q=$i\n            # or is a smaller than p?\n            elif [[ $a -lt\
    \ $p ]]; then\n                p=$a\n                q=$i\n            fi\n  \
    \      fi\n        i=$(( i + 1 ))\n    done\n    # if we didn't find any evens,\
    \ return []\n    if [[ -z \"$p\" ]]; then\n        printf \"[]\"\n    else\n \
    \       printf \"[\\\"%s\\\", \\\"%s\\\"]\" \"$p\" \"$q\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n\
    \  MIN=$(echo \"$1\" | sed 's/[^0-9]/ 9999999 /g' | tr ' ' '\\n' | awk '$1 % 2\
    \ == 0 {print}' | sort -n | head -n 1)\n  if [ -z \"$MIN\" ]; then\n    echo \"\
    []\"\n    return\n  fi\n  echo \"$1\" | sed \"s/[^0-9]/ $MIN /g\" | tr ' ' '\\\
    n' | awk '$1 == '$MIN' {print NR-1;exit}'\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local result=($1)\n  local min_index=0\n  local min_value=0\n\
    \  local counter=0\n  # Set the first even number as a minimum\n  while (( ${result[min_index]}\
    \ % 2 )); do\n    (( min_index++ ))\n  done\n  min_value=${result[min_index]}\n\
    \  # Go through all numbers until the end of input\n  while (( counter < ${#result[@]}\
    \ )); do\n    # If number is even and less than the minimum, update minimum values\n\
    \    if ! (( ${result[counter]} % 2 )) && (( ${result[counter]} < min_value ));\
    \ then\n      min_value=${result[counter]}\n      min_index=$counter\n    fi\n\
    \    (( counter++ ))\n  done\n  # If no even values in input\n  if (( min_value\
    \ == 0 )); then\n    echo []\n  else\n    echo ['\"'$min_value'\"', '\"'$min_index'\"\
    ]'\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    ret=\"\"\n    min=$((10000+1))\n    index=0\n    i=0\n\
    \    for v in $@; do\n        if [ $((v%2)) == 0 ] && [ $v -lt $min ]; then\n\
    \            min=$v\n            index=$i\n        fi\n        i=$((i+1))\n  \
    \  done\n    if [ $min -le 10000 ]; then\n        ret=\"[\\\"$min\\\", \\\"$index\\\
    \"]\"\n    fi\n    echo $ret\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\t[[ -z \"$1\" ]] && echo \"[]\" && return\n\tmapfile -t arr\
    \ < <(echo \"$1\" | tr ' ' '\\n')\n\tmapfile -t evens < <(printf '%s\\n' \"${arr[@]}\"\
    \ | egrep -n '^[0-9]+$' | grep -P '^[0-9]+:0$' | cut -d: -f1)\n\t[[ -z \"${evens[*]}\"\
    \ ]] && echo \"[]\" && return\n\tmapfile -t out < <(printf '%s\\n' \"${arr[@]}\"\
    \ | awk \"{print \\$0, NR}\" | egrep -n \"^[0-9]+$\" | egrep -n \"${evens[*]}\"\
    \ | sort -n | head -n1 | cut -d: -f2 | tr ' ' '\\n')\n\techo \"[\\\"${out[0]}\\\
    \", \\\"${out[1]}\\\"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local result=()\n  IFS=\" \" read -r -a ary <<< \"${1}\"\n\
    \  # fill the array with even values\n  for (( i=0; i<${#ary[@]}; i++ )); do\n\
    \    (( ary[i] % 2 == 0 )) && result+=(\"${ary[i]} ${i}\")\n  done\n  if [[ -z\
    \ \"${result[@]}\" ]]; then\n    echo \"[]\"\n  else\n    # sort the array and\
    \ choose the smallest element\n    IFS=$'\\n' sorted=($(sort <<<\"${result[*]}\"\
    ))\n    echo \"[\\\"${sorted[0]}\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [[ -z \"$1\" ]]; then\n    echo \"[]\"\n    return\n \
    \ fi\n  index=0\n  first=1\n  smallest=-1\n  smallestIndex=-1\n  for value in\
    \ $1; do\n    ((index++))\n    if ((value % 2 == 0)); then\n      if ((first));\
    \ then\n        smallest=$value\n        smallestIndex=$index\n        first=0\n\
    \      elif ((value < smallest)); then\n        smallest=$value\n        smallestIndex=$index\n\
    \      fi\n    fi\n  done\n  if ((smallest != -1)); then\n    echo \"[\\\"$smallest\\\
    \", \\\"$smallestIndex\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [[ \"$#\" -eq 0 ]]; then\n        echo []\n        return\n\
    \    fi\n    declare -A nums\n    declare -a evens\n    declare -a result\n  \
    \  local -i i=0\n    for num in $@; do\n        if ((num % 2 == 0)); then\n  \
    \          evens[${#evens[@]}]=$num\n            nums[$num]=$i\n        fi\n \
    \       i+=1\n    done\n    if [[ \"${#evens[@]}\" -eq 0 ]]; then\n        echo\
    \ []\n        return\n    fi\n    min=$(echo \"${evens[@]}\" | tr ' ' '\\n' |\
    \ sort -n | head -n 1)\n    echo [\\\"\"$min\"\\\", \\\"$(nums[$min])\\\"]\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpebp87il7.sh: line 50: nums[2]: command not found

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]; then\n    echo '[]'\n    return\n  fi\n\
    \  local -r nodes=($(tr \" \" \"\\n\" <<< \"$1\"))\n  local smallestEven=10000\n\
    \  local smallestEvenIndex=-1\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if\
    \ [ \"${nodes[$i]}\" -eq 0 ]; then\n      smallestEven=0\n      smallestEvenIndex=$i\n\
    \      break\n    fi\n    if [ \"${nodes[$i]}\" -lt \"$smallestEven\" ] && [ \"\
    $((nodes[$i] % 2))\" -eq 0 ]; then\n      smallestEven=${nodes[$i]}\n      smallestEvenIndex=$i\n\
    \    fi\n  done\n  if [ \"$smallestEvenIndex\" -ge 0 ]; then\n    echo \"[\"'\"\
    '\"$smallestEven\"'\"'\", \"'\"'\"$smallestEvenIndex\"'\"'\"]'\n  else\n    echo\
    \ '[]'\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpotq7qqmr.sh: line 68: unexpected EOF while looking for matching
    `"''

    /tmp/tmpotq7qqmr.sh: line 72: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -i\n    local nodes=($1)\n    local -i index=0\n\
    \    local -i smallest=1000000\n\n    for ((i=0; i<${#nodes[@]}; i++)); do\n \
    \       (( nodes[i] % 2 == 0 && nodes[i] < smallest )) && {\n            smallest=nodes[i]\n\
    \            index=$i\n        }\n    done\n\n    if (( smallest < 1000000 ));\
    \ then\n        echo \"[${smallest},${index}]\"\n    else\n        echo '[]'\n\
    \    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2\
    \ 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Get list, remove spaces.\n    arg=$(echo \"$1\" | tr\
    \ ' ' '\\n')\n    # Save first element.\n    min=0\n    # Search for first even\
    \ number.\n    min=$(echo \"$arg\" | grep -E \"^[02468]\")\n    if [ -z \"$min\"\
    \ ]; then\n        # No even value.\n        echo -n \"[]\"\n    else\n      \
    \  # Find all even numbers.\n        list=$(echo \"$arg\" | grep -E \"^[02468]\"\
    )\n        # Get first element from the list.\n        first=$(echo \"$list\"\
    \ | head -n 1)\n        # If the first element is the minimum, it will be the\
    \ only element in the list,\n        # and we do not need to continue.\n     \
    \   if [ -z \"$(echo \"$list\" | tail -n +2)\" ]; then\n            min=$first\n\
    \        else\n            # If the first element is not the minimum, we need\
    \ to search for the minimum.\n            for val in $list; do\n             \
    \   if [ \"$val\" -lt \"$min\" ]; then\n                    min=$val\n       \
    \         fi\n            done\n        fi\n        # Get the index of the minimum\
    \ value and return it.\n        minIndex=$(echo \"$arg\" | grep -En \"^$min$\"\
    \ | head -n 1 | cut -d ':' -f 1)\n        echo -n \"[\\\"$min\\\", \\\"$minIndex\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpt2kjppgl.sh: line 51: [: 4

    2: integer expression expected

    /tmp/tmpt2kjppgl.sh: line 51: [: 4

    2: integer expression expected

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local smallest_even_value smallest_even_value_idx\n   \
    \ smallest_even_value=999999\n    smallest_even_value_idx=999999\n    local idx=-1\n\
    \    for value in $1; do\n        idx=$((idx+1))\n        if ((value == 0)); then\n\
    \            if ((smallest_even_value == 0)); then\n                if ((idx <\
    \ smallest_even_value_idx)); then\n                    smallest_even_value_idx=$idx\n\
    \                fi\n            else\n                smallest_even_value=0\n\
    \                smallest_even_value_idx=$idx\n            fi\n        elif ((value\
    \ % 2 == 0 && value < smallest_even_value)); then\n            smallest_even_value=$value\n\
    \            smallest_even_value_idx=$idx\n        fi\n    done\n    if ((smallest_even_value\
    \ == 999999)); then\n        echo []\n    else\n        echo \"[\\\"$smallest_even_value\\\
    \", \\\"$smallest_even_value_idx\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local vals=\"$(echo \"$1\" | tr \" \" \"\\n\" | grep -E '^[0-9]+$'\
    \ | sort -n)\"\n  local min=\"$(echo \"$vals\" | head -n 1)\"\n  local evens=\"\
    $(echo \"$vals\" | grep -E '^[02468]+$')\"\n  local first_even=\"$(echo \"$evens\"\
    \ | head -n 1)\"\n  if [ -z \"$first_even\" ]; then\n    echo \"\\\"$min\\\"\"\
    \n  else\n    local index=\"$(echo \"$vals\" | grep -n \"$first_even\" | cut -d\
    \ \":\" -f 1)\"\n    echo -n \"[\\\"$first_even\\\", \\\"$index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    [ -z \"$1\" ] && echo '[]' && return\n    min_index=0\n\
    \    min_value=0\n    found=0\n    # shellcheck disable=SC2207\n    values=($1)\n\
    \    for ((i = 0; i < ${#values[@]}; i++)); do\n        if ((${values[i]} % 2\
    \ == 0)); then\n            # shellcheck disable=SC2181\n            if [ $found\
    \ -eq 0 ]; then\n                min_value=${values[i]}\n                min_index=$i\n\
    \                found=1\n            elif [ ${values[i]} -lt $min_value ]; then\n\
    \                min_value=${values[i]}\n                min_index=$i\n      \
    \      fi\n        fi\n    done\n    if [ $found -eq 0 ]; then\n        echo '[]'\n\
    \    else\n        echo \"[$min_value, $min_index]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a nodes=($1)\n    if [ ${#nodes[@]} -eq 0 ]; then\n\
    \        echo \"[]\"\n        return\n    fi\n    local -i value=-1\n    local\
    \ -i index=-1\n    for i in \"${!nodes[@]}\"; do\n        if [ \"${nodes[$i]}\"\
    \ -eq 0 ]; then\n            echo \"[0,$i]\"\n            return\n        fi\n\
    \        if [ \"${nodes[$i]}\" -lt \"${nodes[$i]}\" ]; then\n            value=${nodes[$i]}\n\
    \            index=$i\n        fi\n    done\n    if [ \"$value\" -eq -1 ]; then\n\
    \        echo \"[]\"\n    else\n        echo \"[$value,$index]\"\n    fi\n}\n\n\
    candidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -a input=($1)\n    local i\n    local min=10000\n\
    \    local imin=10000\n    local -i counter=0\n    local -i size=${#input[@]}\n\
    \    for ((i=0; i<size; i++)); do\n        local -i v=${input[$i]}\n        if\
    \ ((v % 2 == 0 && v < min)); then\n            min=$v\n            imin=$i\n \
    \           counter=1\n        elif ((v % 2 == 0 && v == min)); then\n       \
    \     ((++counter))\n        fi\n    done\n    if ((counter == 0)); then\n   \
    \     echo \"[]\"\n    else\n        echo \"[\\\"$min\\\", \\\"$imin\\\"]\"\n\
    \    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2\
    \ 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local result=\"\"\n  local filtered=\"\"\n  local indices=\"\
    \"\n  local i=0\n  for number in $1\n  do\n    if [[ \"$((number % 2))\" == \"\
    0\" ]]\n    then\n      filtered=\"$filtered $number\"\n      indices=\"$indices\
    \ $i\"\n    fi\n    ((i++))\n  done\n  local min=$(echo \"$filtered\" | tr ' '\
    \ '\\n' | sort -n | head -n 1)\n  if [[ -z \"$min\" ]]\n  then\n    echo \"[]\"\
    \n  else\n    i=0\n    for number in $filtered\n    do\n      if [[ \"$number\"\
    \ == \"$min\" ]]\n      then\n        local index=$(echo \"$indices\" | tr ' '\
    \ '\\n' | head -n $((i+1)) | tail -n 1)\n        result=\"$result $min $index\"\
    \n        break\n      fi\n      ((i++))\n    done\n    echo \"[$result]\"\n \
    \ fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local min_even_value=\"\"\n  local min_even_index=\"\"\n\
    \  local count=0\n  local value=\"\"\n  for value in $1; do\n    if [ \"$((value\
    \ % 2))\" -eq 0 ]; then\n      if [ -z \"$min_even_value\" ] || [ \"$value\" -lt\
    \ \"$min_even_value\" ]; then\n        min_even_value=\"$value\"\n        min_even_index=\"\
    $count\"\n      fi\n    fi\n    count=$((count + 1))\n  done\n  if [ -z \"$min_even_value\"\
    \ ]; then\n    echo \"\"\n  else\n    echo \"[\\\"$min_even_value\\\", \\\"$min_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Write your code here\n  string=${1}\n  nums=(${string//\
    \ / })\n  arr=( )\n  #echo \"nums:${nums[@]}\"\n  for i in \"${!nums[@]}\"; do\n\
    \    local value=\"${nums[$i]}\"\n    if (( value % 2 == 0 )); then\n      arr+=(\
    \ \"$value $i\" )\n    fi\n  done\n  if (( ${#arr[@]} > 0 )); then\n    arr=(\
    \ $(printf \"%s\\n\" \"${arr[@]}\" | sort -t ' ' -k 1,1n -k 2,2n) )\n    local\
    \ index=${arr[0]#* }\n    local value=${arr[0]% *}\n    echo \"[\\\"$value\\\"\
    , \\\"$index\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ -z \"$1\" ]; then\n    echo \"[]\"\n    return\n  fi\n\
    \  local smallEvenIndex=-1\n  local smallEvenValue=-1\n  local i=0\n  local array=($1)\n\
    \  for v in \"${array[@]}\"; do\n    if [ $((v % 2)) -eq 0 ]; then\n      if [\
    \ $smallEvenValue -eq -1 ]; then\n        smallEvenValue=$v\n        smallEvenIndex=$i\n\
    \      elif [ $v -lt $smallEvenValue ]; then\n        smallEvenValue=$v\n    \
    \    smallEvenIndex=$i\n      fi\n    fi\n    i=$((i + 1))\n  done\n  if [ $smallEvenIndex\
    \ -eq -1 ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"${smallEvenValue}\\\
    \", \\\"${smallEvenIndex}\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [ -z \"$1\" ]; then\n        echo \"[]\"\n        return\n\
    \    fi\n    # If a number is piped in, then set that number to $1.\n    if [\
    \ -z \"$1\" ]; then\n        read -r var\n        if [ ! -z \"$var\" ]; then\n\
    \            set -- \"$var\"\n        fi\n    fi\n    declare -i arg_min_even_value=4294967296\n\
    \    declare -i arg_min_even_value_index=1\n    declare -i arg_index=1\n    for\
    \ arg in $1; do\n        if [ $((arg%2)) -eq 0 ] && [ $arg -lt $arg_min_even_value\
    \ ]; then\n            arg_min_even_value=$arg\n            arg_min_even_value_index=$arg_index\n\
    \        fi\n        arg_index+=1\n    done\n    if [ $arg_min_even_value -eq\
    \ 4294967296 ]; then\n        echo \"[]\"\n    else\n        echo \"[$arg_min_even_value,\
    \ $arg_min_even_value_index]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  [ -z \"$1\" ] && return\n  local list\n  local min_index=-1\n\
    \  local min_value=-1\n  for list in $(echo \"$1\"); do\n    if [ \"$((list %\
    \ 2))\" -eq 0 ] && ([ \"$list\" -lt \"$min_value\" ] || [ \"$min_value\" -eq -1\
    \ ]); then\n      min_value=\"$list\"\n      min_index=\"$list_index\"\n    fi\n\
    \    list_index=$((list_index + 1))\n  done\n  [ \"$min_index\" -eq -1 ] && return\n\
    \  echo '[\\\"'\"$min_value\"'\\\", \\\"'\"$min_index\"'\\\"]'\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Your code here\n    arr=($1)\n    # write your code here\n\
    \    if [ ${#arr[@]} -eq 0 ]; then\n        echo \"[]\"\n    else\n        min=${arr[0]}\n\
    \        min_ind=0\n        for (( i=0; i<${#arr[@]}; i++ )); do\n           \
    \ if [ $(( ${arr[$i]} % 2 )) -eq 0 ] && [ ${arr[$i]} -lt $min ]; then\n      \
    \          min=${arr[$i]}\n                min_ind=$i\n            fi\n      \
    \  done\n        if [ $min -eq ${arr[0]} ]; then\n            echo \"[]\"\n  \
    \      else\n            echo \"[\\\"$min\\\", \\\"$min_ind\\\"]\"\n        fi\n\
    \    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2\
    \ 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local IFS=\" \"\n    local -a array=( $1 )\n\n    # echo\
    \ \"Value at index 1: $1[1]\"\n\n    local min=999999999\n    local min_i=999999999\n\
    \    for i in \"${!array[@]}\"; do\n        local value=${array[$i]}\n       \
    \ if [[ $((value % 2)) -eq 0 ]]; then\n            if [[ $value -lt $min ]]; then\n\
    \                min=$value\n                min_i=$i\n            elif [[ $value\
    \ -eq $min ]]; then\n                if [[ $i -lt $min_i ]]; then\n          \
    \          min_i=$i\n                fi\n            fi\n        fi\n    done\n\
    \n    if [[ $min -eq 999999 ]]; then\n        echo -n \"[]\"\n    else\n     \
    \   echo -n \"[\\\"$min\\\", \\\"$min_i\\\"]\"\n    fi\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local array=(\"$@\")\n  local min_value=1000000000\n  local\
    \ min_index=-1\n  local index=0\n  for i in \"${array[@]}\"; do\n    local value=$((i%2))\n\
    \    if [ \"$value\" -eq 0 ]; then\n      if [ \"$i\" -lt \"$min_value\" ]; then\n\
    \        min_value=$i\n        min_index=$index\n      fi\n    fi\n    index=$((index+1))\n\
    \  done\n  if [ \"$min_index\" -ne -1 ]; then\n    echo \"[\\\"$min_value\\\"\
    , \\\"$min_index\\\"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n \
    \   pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\"\
    ) = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa_sowrug.sh: line 35: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # Get even numbers from the given list\n    get_even()\
    \ {\n        for n in $@; do\n            if [[ $(( n % 2 )) -eq 0 ]]; then\n\
    \                echo \"$n\"\n            fi\n        done\n    }\n    even_numbers=$(get_even\
    \ $@)\n    # Get the smallest even number and its index\n    # $1 is a space-separated\
    \ list\n    smallest_even() {\n        smallest_even=\n        index=\n      \
    \  for i in $(seq 0 $((${#@} - 1))); do\n            if [[ $(( $1 % 2 )) -eq 0\
    \ ]]; then\n                if [[ -z $smallest_even ]]; then\n               \
    \     smallest_even=$1\n                    index=$i\n                elif [[\
    \ $1 -lt $smallest_even ]]; then\n                    smallest_even=$1\n     \
    \               index=$i\n                fi\n            fi\n            shift\n\
    \        done\n        echo \"[$smallest_even, $index]\"\n    }\n    echo $(smallest_even\
    \ $even_numbers)\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a branch\n  branch=($1)\n\n  if [ ${#branch[@]}\
    \ -eq 0 ]; then\n    echo \"[]\"\n    return\n  fi\n\n  declare -i min_even_index=-1\n\
    \  declare -i min_even_value=1\n  declare -i i\n\n  for i in \"${!branch[@]}\"\
    ; do\n    if [ ${branch[$i]} -eq 0 ]; then\n      min_even_index=$i\n      min_even_value=0\n\
    \      break\n    fi\n\n    if [ $((branch[$i] % 2)) -eq 0 ] && [ ${branch[$i]}\
    \ -lt $min_even_value ]; then\n      min_even_index=$i\n      min_even_value=${branch[$i]}\n\
    \    fi\n  done\n\n  if [ $min_even_index -eq -1 ]; then\n    echo \"[]\"\n  else\n\
    \    echo \"[\\\"${branch[$min_even_index]}\\\", \\\"$min_even_index\\\"]\"\n\
    \  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$*\"\n  local minimum_index=0\n  local minimum=''\n\
    \  local even=''\n  # your solution here\n  minimum_index=1\n  minimum=$(echo\
    \ \"$nodes\" | cut -d ' ' -f $minimum_index)\n  for (( i=2; i<=$(echo \"$nodes\"\
    \ | wc -w); i++ )); do\n    even=$(echo \"$nodes\" | cut -d ' ' -f $i)\n    if\
    \ [[ $even == 0* ]]; then\n      minimum_index=$i\n      minimum=$even\n     \
    \ break\n    fi\n  done\n  for (( i=2; i<=$(echo \"$nodes\" | wc -w); i++ ));\
    \ do\n    even=$(echo \"$nodes\" | cut -d ' ' -f $i)\n    if [[ $even == 0* ]];\
    \ then\n      if [[ $even -lt $minimum ]]; then\n        minimum_index=$i\n  \
    \      minimum=$even\n      fi\n    fi\n  done\n  if [[ $minimum == 0* ]]; then\n\
    \    echo \"[\\\"$minimum\\\", \\\"$minimum_index\\\"]\"\n  else\n    echo \"\
    []\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local nodes=\"$1\"\n  # write your code here\n  local min_index=0\n\
    \  local min_value=''\n  local min_count=0\n  local i=0\n  local node\n  while\
    \ read -r node\n  do\n    if [ $(expr $node % 2) -eq 0 ]\n    then\n      if [\
    \ $min_count -eq 0 ]\n      then\n        min_count=1\n        min_value=$node\n\
    \        min_index=$i\n      elif [ $node -lt $min_value ]\n      then\n     \
    \   min_count=1\n        min_value=$node\n        min_index=$i\n      elif [ $node\
    \ -eq $min_value ]\n      then\n        min_count=$(expr $min_count + 1)\n   \
    \   fi\n    fi\n    i=$(expr $i + 1)\n  done <<< \"$nodes\"\n  if [ $min_count\
    \ -eq 0 ]\n  then\n    echo ''\n  else\n    echo \"['\\\"$min_value\\\"', '\\\"\
    $min_index\\\"']\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpt8wte4e6.sh:\
    \ line 39: [: -eq: unary operator expected\n"
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -a nodes\n    IFS=' ' read -ra nodes <<< \"$1\"\
    \n    length=${#nodes[@]}\n    if [[ length -eq 0 ]]; then\n        echo \"[]\"\
    \n        return\n    fi\n    min=-1\n    min_index=-1\n    for ((i=0; i<length;\
    \ i++)); do\n        if ((nodes[i] % 2 == 0)); then\n            if ((min == -1\
    \ || nodes[i] < min)); then\n                min=${nodes[i]}\n               \
    \ min_index=$i\n            fi\n        fi\n    done\n    if ((min == -1)); then\n\
    \        echo \"[]\"\n    else\n        echo \"[\\\"${min}\\\", \\\"${min_index}\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a a=($1)\n  # get the smallest even value\n  min=100001\n\
    \  for x in \"${a[@]}\"; do\n    if [[ \"$x\" -lt \"$min\" && $(($x % 2)) -eq\
    \ 0 ]]; then\n      min=$x\n    fi\n  done\n  # get the index of the smallest\
    \ even value\n  index=-1\n  for i in \"${!a[@]}\"; do\n    if [[ \"${a[$i]}\"\
    \ -eq \"$min\" ]]; then\n      index=$i\n      break\n    fi\n  done\n  if [[\
    \ \"$index\" -eq -1 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\"\
    , \\\"$index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local index=0\n  local i=0\n  local value=-1\n  if [[ $1\
    \ == \"\" ]]; then\n    echo \"[]\"\n    return\n  fi\n  for node in $1; do\n\
    \    if [[ $node%2 -eq 0 ]]; then\n      if [[ $value -eq -1 ]]; then\n      \
    \  value=$node\n        index=$i\n      elif [[ $node -lt $value ]]; then\n  \
    \      value=$node\n        index=$i\n      fi\n    fi\n    i=$((i+1))\n  done\n\
    \  if [[ $value -eq -1 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$value\\\
    \", \\\"$index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # insert your code here\n  local -a values=($1)\n  local\
    \ -a even\n  for val in \"${values[@]}\"; do\n    if (( $val % 2 == 0 )); then\n\
    \      even+=($val)\n    fi\n  done\n  if (( ${#even[@]} == 0 )); then\n    echo\
    \ []\n  else\n    local min_even=$(echo \"${even[@]}\" | tr ' ' '\\n' | sort -n\
    \ | head -n 1)\n    local i=0\n    for val in \"${values[@]}\"; do\n      if ((\
    \ $val == $min_even )); then\n        echo \"[\\\"$min_even\\\", \\\"$i\\\"]\"\
    \n        return\n      fi\n      i=$((i+1))\n    done\n  fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  list=$@\n  # YOUR CODE HERE\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  nodes=($1)\n  for ((i=0; i<${#nodes[@]}; i++)); do\n    if\
    \ [[ \"${nodes[$i]}\" =~ ^[0-9]+$ ]]; then\n      if (( nodes[$i] % 2 == 0 ));\
    \ then\n        echo \"[${nodes[$i]}, ${i}]\"\n        break\n      fi\n    fi\n\
    \  done\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n   \
    \ [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2\
    \ 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    declare -a nodes=($1)\n    value=\n    index=\n    for\
    \ ((i=0; i<${#nodes[@]}; i++)); do\n        if [ -z \"$value\" ] && [ \"${nodes[$i]}\"\
    \ -gt 0 ] && [ \"${nodes[$i]}\" -eq $((nodes[$i]/2*2)) ]; then\n            value=${nodes[$i]}\n\
    \            index=$i\n        elif [ \"${nodes[$i]}\" -eq \"$value\" ]; then\n\
    \            # if two or more equal evens found, return the first\n          \
    \  index=$i\n            break\n        fi\n    done\n    if [ -z \"$value\" ];\
    \ then\n        echo \"[]\"\n    else\n        echo \"['\\\"$value\\\"', '\\\"\
    $index\\\"']\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # WRITE CODE HERE\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpt8glw1hz.sh: line 31: syntax error near unexpected token `}''

    /tmp/tmpt8glw1hz.sh: line 31: `}''

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local nodes=($1)\n    local evens=()\n    local even_indexes=()\n\
    \    local smallest_even=0\n    local smallest_even_index=0\n    local even_index=0\n\
    \    for ((i=0; i<${#nodes[@]}; i++)); do\n        if [[ $((${nodes[$i]} % 2))\
    \ -eq 0 ]]; then\n            evens+=(\"${nodes[$i]}\")\n            even_indexes+=(\"\
    $i\")\n        fi\n    done\n    if [[ ${#evens[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n    else\n        smallest_even=\"${evens[0]}\"\n        smallest_even_index=\"\
    ${even_indexes[0]}\"\n        for ((i=1; i<${#evens[@]}; i++)); do\n         \
    \   if [[ ${evens[$i]} -lt $smallest_even ]]; then\n                smallest_even=\"\
    ${evens[$i]}\"\n                smallest_even_index=\"${even_indexes[$i]}\"\n\
    \            fi\n        done\n        echo \"[\\\"$smallest_even\\\", \\\"$smallest_even_index\\\
    \"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  arr=($1)\n  len=${#arr[@]}\n  # Use a map of <index, value>\n\
    \  # So we can easily get the index when we find the minimum even value\n  min=()\n\
    \  for ((i=0; i<len; i++)); do\n    val=${arr[$i]}\n    if (( val % 2 == 0 ));\
    \ then\n      if (( ${#min[@]} == 0 )); then\n        min[0]=$val\n        min[1]=$i\n\
    \      elif (( val < ${min[0]} )); then\n        min[0]=$val\n        min[1]=$i\n\
    \      fi\n    fi\n  done\n  # shellcheck disable=SC2068\n  echo \"[\\\"${min[@]}\\\
    \"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  result=\"\"\n  min=\"\"\n  index=\"\"\n  set -f\n  for value\
    \ in $1\n  do\n    if [ -z \"$min\" ]\n    then\n      if [ $(expr $value % 2)\
    \ -eq 0 ]\n      then\n        min=$value\n        index=0\n      fi\n    else\n\
    \      if [ $(expr $value % 2) -eq 0 ]\n      then\n        if [ $value -lt $min\
    \ ]\n        then\n          min=$value\n          index=0\n        fi\n     \
    \ fi\n    fi\n    index=$(expr $index + 1)\n  done\n  if [ -z \"$min\" ]\n  then\n\
    \    echo \"[]\"\n  else\n    echo \"[\\\"$min\\\", \\\"$index\\\"]\"\n  fi\n\
    }\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local array=\"$(echo $1 | tr \" \" \"\\n\")\"\n  local evens=($(echo\
    \ $array | tr \" \" \"\\n\" | grep -E \"^[02468]+$\"))\n  local min\n  if [ -z\
    \ \"$evens\" ]; then\n    echo []\n  else\n    min=$(echo $evens | tr \" \" \"\
    \\n\" | sort -n | head -n 1)\n    echo [$min, $(($(echo $array | tr \" \" \"\\\
    n\" | grep -n \"$min\" | cut -d: -f1) - 1))]\n  fi\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a nodes\n\n  nodes=($1)\n\n  # Check if the number\
    \ of arguments is zero\n  if [ $# -eq 0 ]; then\n    echo []\n    return\n  fi\n\
    \n  # Find the smallest even value in the list\n  for i in \"${nodes[@]}\"; do\n\
    \    if [ $((i % 2)) -eq 0 ]; then\n      if [ -z \"$smallest\" ]; then\n    \
    \    smallest=\"$i\"\n      else\n        if [ \"$i\" -lt \"$smallest\" ]; then\n\
    \          smallest=\"$i\"\n        fi\n      fi\n    fi\n  done\n\n  # If there\
    \ is no even value\n  if [ -z \"$smallest\" ]; then\n    echo []\n    return\n\
    \  fi\n\n  # Return the smalles value and its index\n  for i in \"${!nodes[@]}\"\
    ; do\n    if [ \"${nodes[$i]}\" -eq \"$smallest\" ]; then\n      echo \"[\\\"\
    $smallest\\\", \\\"$i\\\"]\"\n      return\n    fi\n  done\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local index=0\n    local value=0\n    local result=\"\"\
    \n    for i in $@\n    do\n        if (( i % 2 == 0 )) && ( (( i < value )) ||\
    \ (( value == 0 )) )\n        then\n            value=$i\n            result=\"\
    ${value} ${index}\"\n        fi\n        index=$(( index + 1 ))\n    done\n  \
    \  if [[ -z \"${result}\" ]]\n    then\n        echo \"[]\"\n    else\n      \
    \  echo \"[\\\"${result}\\\"]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [ $# -eq 0 ]; then echo \"[]\"; return; fi\n    local\
    \ even_vals=\"$(echo \"$@\" | tr ' ' '\\n' | grep -oE '^[02468]$' | sort -n)\"\
    \n    if [ -z \"$even_vals\" ]; then echo \"[]\"; return; fi\n    local smallest_even=\"\
    $(echo \"$even_vals\" | head -n 1)\"\n    local indexes=\"$(echo \"$@\" | tr '\
    \ ' '\\n' | grep -nE \"^$smallest_even$\" | cut -d: -f1)\"\n    echo \"[\\\"$smallest_even\\\
    \", \\\"$(echo \"$indexes\" | head -n 1)\\\"]\"\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  echo -n '[ '\n  for ((i=0; i<$#; i++)); do\n    v=${@:i+1:1}\n\
    \    if [[ -z \"$min\" && $(( v % 2 )) -eq 0 ]]; then\n      min=$v\n      min_i=$i\n\
    \    elif [[ -n \"$min\" && $(( v % 2 )) -eq 0 && $min -gt $v ]]; then\n     \
    \ min=$v\n      min_i=$i\n    fi\n  done\n  if [[ -n \"$min\" ]]; then\n    echo\
    \ -n '\"'$min'\", \"'$min_i'\"'\n  fi\n  echo ' ]'\n}\n\ncandidate() {\n    pluck\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n\
    \    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n\
    \    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3\
    \ 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpo7i9nvr6.sh: line 33: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  # Let's assume the input list is not empty\n  # The following\
    \ command will output the minimum even number in the list:\n  local minimum=\"\
    $(echo \"$1\" | grep -E \"^[0-9]+$\" | awk '{ if ($1 % 2 == 0) { print $1 } }'\
    \ | sort -n | head -n 1)\"\n  # This command outputs the indices of the minimum\
    \ even number in the list:\n  local min_indices=\"$(echo \"$1\" | grep -n -E \"\
    ^${minimum}$\" | awk -F: '{ print $1 }')\"\n  # This command outputs the minimum\
    \ index:\n  local min_index=\"$(echo \"$min_indices\" | sort -n | head -n 1)\"\
    \n  # Finally, we output our solution in the required format:\n  echo \"['\"${minimum}\"\
    ', '\"${min_index}\"']\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    for n in $1\n    do\n        if [[ \"$n\" -eq 0 ]] || [[\
    \ \"$n\" -gt 0 && \"$n\" -lt 10001 ]]\n        then\n            if [[ $(($n %\
    \ 2)) -eq 0 ]]\n            then\n                echo \"[\\\"$n\\\", \\\"$p\\\
    \"]\"\n                return\n            fi\n        fi\n        ((p++))\n \
    \   done\n    echo \"[]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    case \"$1\" in\n    \"\")\n        echo \"[]\"\n      \
    \  ;;\n    *)\n        local -a a=($1)\n        local -a b=()\n        local found_even=0\n\
    \        local smallest=999999\n        local index=0\n        for ((i=0; i<${#a[@]};\
    \ i++)); do\n            if [[ ${a[$i]} =~ ^[0-9]+$ ]]; then\n               \
    \ if (( ${a[$i]} < smallest )); then\n                    if (( ${a[$i]} % 2 ==\
    \ 0 )); then\n                        smallest=${a[$i]}\n                    \
    \    index=$i\n                        found_even=1\n                    else\n\
    \                        if (( found_even )); then\n                         \
    \   smallest=${a[$i]}\n                            index=$i\n                \
    \        fi\n                    fi\n                fi\n            fi\n    \
    \    done\n        if (( found_even )); then\n            echo \"[\"'\"'\"$smallest\"\
    '\"'\", \"'\"'\"$index\"'\"']\"\n        else\n            echo \"[]\"\n     \
    \   fi\n        ;;\n    esac\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfqm4t8jh.sh: line 78: unexpected EOF while looking for matching
    `"''

    /tmp/tmpfqm4t8jh.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  echo -n \"[\"\n  # echo -n '\"'\n  [ $# -eq 0 ] && echo -n\
    \ '\"' || echo -n \"$(echo \"$@\" | xargs -n1 | sort -g -u | grep -v -e '[^0-9]'\
    \ -e '[2468]')\"\n  # echo -n '\"'\n  echo -n \", \"\n  # echo -n '\"'\n  [ $#\
    \ -eq 0 ] && echo -n '\"' || echo -n \"$(echo \"$@\" | xargs -n1 | grep -n -e\
    \ '[02468]' | head -n1 | sed 's/://')\"\n  # echo -n '\"'\n  echo -n \"]\"\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    node_array=($1)\n    min_value=${node_array[0]}\n    min_index=0\n\
    \    for index in \"${!node_array[@]}\"; do\n        if [[ ${node_array[$index]}\
    \ -lt $min_value ]]; then\n            min_value=${node_array[$index]}\n     \
    \       min_index=$index\n        fi\n    done\n    if (( min_value % 2 == 0 ));\
    \ then\n        echo \"[\\\"${min_value}\\\", \\\"${min_index}\\\"]\"\n    else\n\
    \        echo \"[]\"\n    fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a nodes\n  local i smallest_index smallest_even smallest_odd\n\
    \  local node_value next_node_value\n  nodes=($1)\n  # when we start, no even\
    \ numbers have been seen\n  smallest_even=-1\n  for ((i=0; i<${#nodes[@]}; i++));\
    \ do\n    node_value=${nodes[$i]}\n    if ((node_value%2==0)); then\n      if\
    \ ((smallest_even==-1 || node_value<smallest_even)); then\n        smallest_even=$node_value\n\
    \        smallest_index=$i\n      fi\n    fi\n  done\n  if ((smallest_even>=0));\
    \ then\n    echo \"[\\\"$smallest_even\\\", \\\"$smallest_index\\\"]\"\n  else\n\
    \    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [[ -z \"$1\" ]]; then\n    echo \"[]\"\n    return\n \
    \ fi\n  nodes=($1)\n  smallest_even_value=$((${nodes[0]}+1))\n  smallest_even_index=0\n\
    \  node_index=0\n  for node in \"${nodes[@]}\"; do\n    if ((node % 2 == 0));\
    \ then\n      if ((node < smallest_even_value)); then\n        smallest_even_value=$node\n\
    \        smallest_even_index=$node_index\n      fi\n    fi\n    node_index=$((node_index+1))\n\
    \  done\n  if ((smallest_even_value == $((nodes[0]+1)))); then\n    echo \"[]\"\
    \n  else\n    echo \"[\\\"$smallest_even_value\\\", \\\"$smallest_even_index\\\
    \"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"\
    2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\"\
    ) = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  array=($(printf '%s' \"$1\" | tr ' ' '\\n'))\n  if [[ -z\
    \ \"$array\" ]]; then\n    echo '[]'\n    return\n  fi\n  evens=()\n  lowest_even=99999999\n\
    \  lowest_even_index=999999\n  for i in ${!array[@]}; do\n    (( array[i] % 2\
    \ == 0 )) && {\n      evens+=(\"${array[i]}\")\n      (( array[i] < lowest_even\
    \ )) && {\n        lowest_even=\"${array[i]}\"\n        lowest_even_index=\"$i\"\
    \n      }\n    }\n  done\n  if [[ -z \"$evens\" ]]; then\n    echo '[]'\n    return\n\
    \  fi\n  echo \"[\\\"$lowest_even\\\", \\\"$lowest_even_index\\\"]\"\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n\t[ \"$1\" = \"\" ] && echo [] && return\n\n\t# Set the array\
    \ IFS backslash-whitespace-backslash-space\n\tIFS=$'\\s\\\\'\n\tset -- $1\n\n\t\
    # Sort the array by number\n\tIFS=$'\\n'\n\tarr=($(printf \"%s\\n\" \"${@}\" |\
    \ sort -n))\n\n\t# Find the smallest even element\n\tfor e in \"${arr[@]}\"; do\n\
    \t\t[ $((e % 2)) -eq 0 ] && echo \"[\\\"$e\\\", \\\"$((i + 1))\\\"]\" && return\n\
    \t\ti=$((i + 1))\n\tdone\n\n\t# If there are no even elements, return []\n\techo\
    \ []\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpq0awipsf.sh: line 42: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -a array\n  array=($1)\n\n  if [[ ${#array[@]} -eq\
    \ 0 ]]; then\n    echo \"[]\"\n    return\n  fi\n\n  local min=${array[0]}\n \
    \ local index=0\n  for i in \"${!array[@]}\"; do\n    local curr=${array[$i]}\n\
    \    if [[ $(( curr % 2 )) -eq 0 ]]; then\n      if [[ $(( curr < min )) -eq 1\
    \ ]]; then\n        min=$curr\n        index=$i\n      fi\n    fi\n  done\n\n\
    \  if [[ $(( min % 2 )) -eq 0 ]]; then\n    echo \"[\\\"$min\\\", \\\"$index\\\
    \"]\"\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local smallest_even\n  local smallest_even_index\n  local\
    \ count\n  count=0\n  smallest_even=${1%% *}\n  smallest_even_index=0\n  for n\
    \ in $1; do\n    if (( !n % 2 )) && (( n < smallest_even )); then\n      smallest_even=$n\n\
    \      smallest_even_index=$count\n    fi\n    (( ++count ))\n  done\n  if ((\
    \ smallest_even % 2 )); then\n    echo \"[]\"\n  else\n    echo \"[\\\"$smallest_even\\\
    \", \\\"$smallest_even_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n  \
    \  [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0\
    \ 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[\
    \ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    local -r numbers=\"$1\"\n    min_even=$(echo \"$numbers\"\
    \ | awk '{\n        for (i = 1; i <= NF; i++) {\n            if ($i % 2 == 0)\
    \ {\n                if (min_even == \"\" || $i < min_even) {\n              \
    \      min_even = $i\n                }\n            }\n        }\n        print\
    \ min_even\n    }')\n    # echo \"$numbers\" | awk -v min_even=\"$min_even\" '{\n\
    \    #     for (i = 1; i <= NF; i++) {\n    #         if ($i == min_even) {\n\
    \    #             print \"[\"\"\\\"\"$i\"\\\"\", \"\\\"\"i\"\\\"\"]\"\n    #\
    \             break\n    #         }\n    #     }\n    # }'\n    # TODO\n    echo\
    \ \"[\\\"$min_even\\\", \\\"1\\\"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  evens=()\n  index=0\n  for num in $1; do\n    if (( num %\
    \ 2 == 0 )); then\n      evens[$index]=$num\n      index=$(($index + 1))\n   \
    \ fi\n  done\n  if [ ${#evens[@]} -eq 0 ]; then\n    echo \"[]\"\n  else\n   \
    \ min=${evens[0]}\n    min_index=0\n    for index in ${!evens[@]}; do\n      if\
    \ [ ${evens[$index]} -lt $min ]; then\n        min=${evens[$index]}\n        min_index=$index\n\
    \      fi\n    done\n    echo \"[\\\"$min\\\", \\\"$min_index\\\"]\"\n  fi\n}\n\
    \ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[\
    \ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n\
    \    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8\
    \ 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate\
    \ \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  declare -a nodes=($1)\n  declare -i min_value=10000000\n\
    \  declare -i min_index=10000000\n  declare -i num_evens=0\n  declare -i counter=0\n\
    \  for node in \"${nodes[@]}\"; do\n    if [[ $((node % 2)) -eq 0 ]]; then\n \
    \     ((num_evens++))\n      if [[ $node -lt $min_value ]]; then\n        min_value=$node\n\
    \        min_index=$counter\n      fi\n    fi\n    ((counter++))\n  done\n  if\
    \ [[ $num_evens -eq 0 ]]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 2
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    # your code here\n    # the input parameter is called \"\
    $1\"\n    # you can use this variable and\n    # do not rename it\n    #\n   \
    \ # Feel free to use any other variable\n    # but do not use global variables\n\
    \    #\n    # Do not print anything to stdout\n    #\n    # If there are no even\
    \ values or the given array is empty, return [].\n    # If multiple nodes with\
    \ the same smallest even value are found return the node that has smallest index.\n\
    \    # The plucked node should be returned in a list, [ smalest_value, its index\
    \ ]\n    #\n    # You can use \"rerun-if-changed\" or \"rerun-if-env-changed\"\
    \n    # to make this script auto-run again when any of the environment\n    #\
    \ variables change\n    #\n    # If you want to create additional files you can\
    \ do it here\n    #\n    # For example, you can prepare a log file\n    # by using\
    \ the following commands:\n    #\n    # LOGFILE=`mktemp /tmp/pluck.XXXXXX`\n \
    \   # echo -n > $LOGFILE\n    #\n    # Now you can write to the log file using\n\
    \    #\n    # echo \"<your-text>\" >> $LOGFILE\n    #\n    # When you are done\
    \ with the script, save\n    # the output in a file\n    #\n    # OUTPUT_FILE=`mktemp\
    \ /tmp/pluck.XXXXXX`\n    # echo \"[]\" > $OUTPUT_FILE\n    #\n    # When you\
    \ are done with your script\n    #\n    # exit $?\n    #\n    # If you are returning\
    \ a list \"[ <value>, <index> ]\"\n    # the output should look like\n    #\n\
    \    # echo \"['\"$<value>\"', '\"$<index>\"']\" > $OUTPUT_FILE\n    #\n    #\
    \ If you are returning a list \"[]\"\n    # the output should look like\n    #\n\
    \    # echo \"[]\" > $OUTPUT_FILE\n    #\n    # If you want to debug, use:\n \
    \   #\n    # export DEBUG=1\n    #\n    # and you can print to stdout\n    # if\
    \ [[ \"$DEBUG\" ==\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3\
    \ 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n  \
    \  [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\"\
    ) = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp14yu7pz7.sh: line 86: syntax error near unexpected token `}''

    /tmp/tmp14yu7pz7.sh: line 86: `}''

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n    if [[ $# -eq 0 ]]; then echo []; return 0; fi\n    local\
    \ min_index=0 min_val=$1; shift\n    local index=1\n    while [[ $# -gt 0 ]];\
    \ do\n        local val=$1; shift\n        if [[ $((val % 2)) -eq 0 ]]; then\n\
    \            if [[ $val -lt $min_val ]]; then\n                min_val=$val\n\
    \                min_index=$index\n            fi\n        fi\n        ((index++))\n\
    \    done\n    if [[ $((min_val % 2)) -eq 0 ]]; then\n        echo \"['\\\"$min_val\\\
    \"', '\\\"$min_index\\\"']\"\n    else\n        echo \"[]\"\n    fi\n}\n\ncandidate()\
    \ {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\"\
    ) = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyp7cc75r.sh: line 43: 4 2 3: syntax error in expression (error
    token is "2 3")

    '
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  local -r __doc__='Return the index of the smallest even value,\
    \ if multiple, return the first.\n  >>> $(pluck \"4 2 3\")\n  ['\"2\"', '\"1\"\
    ']\n  >>> $(pluck \"1 2 3\")\n  ['\"2\"', '\"1\"']\n  >>> $(pluck \"\")\n  []\n\
    \  >>> $(pluck \"5 0 3 0 4 2\")\n  ['\"0\"', '\"1\"']\n  '\n  local -r input=\"\
    $1\"\n  local -r values=$(tr ' ' '\\n' <<< \"$input\" | sort -n)\n  local min_index\n\
    \  local min_value\n  local index=0\n  for value in $values; do\n    if [ \"$value\"\
    \ -gt 0 ] && [ $(expr \"$value\" % 2) -eq 0 ]; then\n      min_index=$index\n\
    \      min_value=$value\n      break\n    fi\n    index=$((index + 1))\n  done\n\
    \  if [ -z \"$min_value\" ]; then\n    echo []\n  else\n    echo \"[\\\"$min_value\\\
    \", \\\"$min_index\\\"]\"\n  fi\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate\
    \ \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\"\
    \ ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6\
    \ 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  { local -r array=( $1 ); } 2>/dev/null || {\n    local -r\
    \ array=( );\n  }\n  if [[ \"${#array[@]}\" == 0 ]]; then\n    echo \"[]\"\n \
    \   return\n  fi\n  local smallest_even_value=\n  local smallest_even_value_index=\n\
    \  for (( i = 0; i < ${#array[@]}; i++ )); do\n    if [[ \"${array[$i]}\" == \"\
    \" ]]; then\n      continue\n    fi\n    if [[ \"${array[$i]}\" == *.* ]]; then\n\
    \      continue\n    fi\n    if [[ \"${array[$i]}\" == \"-\"* ]]; then\n     \
    \ continue\n    fi\n    if [[ $(( array[$i] % 2 )) == 0 ]]; then\n      if [[\
    \ \"$smallest_even_value\" == \"\" ]]; then\n        smallest_even_value=\"${array[$i]}\"\
    \n        smallest_even_value_index=\"$i\"\n      else\n        if [[ \"${array[$i]}\"\
    \ -lt \"$smallest_even_value\" ]]; then\n          smallest_even_value=\"${array[$i]}\"\
    \n          smallest_even_value_index=\"$i\"\n        fi\n      fi\n    fi\n \
    \ done\n  if [[ \"$smallest_even_value\" == \"\" ]]; then\n    echo \"[]\"\n \
    \   return\n  fi\n  echo \"[\\\"${smallest_even_value}\\\", \\\"${smallest_even_value_index}\\\
    \"]\"\n}\n\ncandidate() {\n    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"4 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\"\
    \ ]]\n    [[ $(candidate \"\") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\")\
    \ = \"0 1\" ]]\n    [[ $(candidate \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate\
    \ \"5 4 8 4 8\") = \"4 1\" ]]\n    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n\
    \    [[ $(candidate \"7 9 7 1\") = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
- exit_code: 1
  program: "#!/bin/bash\n# \"Given an array representing a branch of a tree that has\
    \ non-negative integer nodes\n# your task is to pluck one of the nodes and return\
    \ it.\n# The plucked node should be the node with the smallest even value.\n#\
    \ If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n# The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n# If there are no even values or the given array\
    \ is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"\
    1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    # Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n# Example 3:\n#\
    \ >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"\
    0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n\
    # so we will choose the first zero, which has the smallest index.\n# Constraints:\n\
    # * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated\
    \ list\npluck() {\n  if [ \"$#\" -eq 0 ]; then echo \"[]\"; exit; fi\n  EVEN_NUMS=$(for\
    \ x in $@; do if [ $(($x % 2)) -eq 0 ]; then echo $x; fi; done | tr '\\n' ' ')\n\
    \  if [ -z \"$EVEN_NUMS\" ]; then echo \"[]\"; exit; fi\n  MIN_VALUE=$(echo $EVEN_NUMS\
    \ | tr ' ' '\\n' | sort -g | head -n 1)\n  INDEX=$(echo $@ | tr ' ' '\\n' | awk\
    \ '{i++; print i, $0}' | grep -iE \"^.*\\s$MIN_VALUE$\" | head -n 1 | awk '{print\
    \ $1}')\n  echo \"[\\\"$MIN_VALUE\\\", \\\"$INDEX\\\"]\"\n}\n\ncandidate() {\n\
    \    pluck \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"4 2 3\") =\
    \ \"2 1\" ]]\n    [[ $(candidate \"1 2 3\") = \"2 1\" ]]\n    [[ $(candidate \"\
    \") = \"\" ]]\n    [[ $(candidate \"5 0 3 0 4 2\") = \"0 1\" ]]\n    [[ $(candidate\
    \ \"1 2 3 0 5 3\") = \"0 3\" ]]\n    [[ $(candidate \"5 4 8 4 8\") = \"4 1\" ]]\n\
    \    [[ $(candidate \"7 6 7 1\") = \"6 1\" ]]\n    [[ $(candidate \"7 9 7 1\"\
    ) = \"\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660024686
