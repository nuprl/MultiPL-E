language: sh
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local factor=2\n    while [ $((n % factor)) -eq 0 ]; do\n        n=$((n\
    \ / factor))\n    done\n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1 i=2 m=0\n    while [[ $n -gt 1 ]]; do\n        if [[ $(( n % i )) -eq 0\
    \ ]]; then\n            n=$(( n / i ))\n            m=$i\n        else\n     \
    \       i=$(( i + 1 ))\n        fi\n    done\n    echo $m\n}\n\ncandidate() {\n\
    \    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  # Convert\
    \ $1 to an integer\n  local n=$((10#$1))\n  # local p=$n-1\n  local p=2\n  # local\
    \ i=2\n  local i=$p\n  while [ $i -le $(( $n / $p )) ]; do\n    while [ $(( $n\
    \ % $i )) -eq 0 ]; do\n      n=$(( $n / $i ))\n      if [ $n -eq 1 ]; then\n \
    \       echo $i\n        return\n      fi\n      p=$i\n    echof \"n=$n, p=$p,\
    \ i=$i\"\n    i=$(( $i + 1 ))\n    done\n  done\n  echo $n\n}\n\ncandidate() {\n\
    \    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=9 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=3 encoding='utf-8'>
  timestamp: 1660020965
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local f=2\n  local lpf=1\n  while (( n > 1 )); do\n    while (( (n %\
    \ f) == 0 )); do\n      lpf=$f\n      n=$(( n / f ))\n    done\n    f=$(( f +\
    \ 1 ))\n  done\n  echo $lpf\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ -i n=$1 factor\n    while ((n%2==0)); do\n        n /= 2\n    done\n    factor=3\n\
    \    while ((n > 1)); do\n        while ((n%factor==0)); do\n            n /=\
    \ factor\n        done\n        ((factor+=2))\n    done\n    echo \"$((factor-2))\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=26 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660020965
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local i=2\n    local largest_prime=1\n    while (( n % i != 0\
    \ )); do\n        (( i++ ))\n    done\n    local largest_prime=$i\n    (( n /=\
    \ i ))\n    for (( ; i*i <= n; i++ )); do\n        if (( n % i == 0 )); then\n\
    \            (( n /= i ))\n            (( largest_prime = i ))\n        fi\n \
    \   done\n    if (( n > largest_prime )); then\n        echo \"$n\"\n    else\n\
    \        echo \"$largest_prime\"\n    fi\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local f=2\n    local i\n\n    while (( f < n )); do\n        if ((\
    \ n % f == 0 )); then\n            n=$(( n / f ))\n            f=2\n        else\n\
    \            f=$(( f + 1 ))\n        fi\n    done\n\n    echo $n\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    if\
    \ [ $1 -eq 1 ]; then\n        echo 1\n        return\n    fi\n\n    # Find the\
    \ smallest factor of $1. The smallest factor of $1 is 1 or prime.\n    local p=2\n\
    \    local n=$1\n    while [[ $(( n % p )) -ne 0 ]]; do\n        (( p += 1 ))\n\
    \    done\n\n    # If p < n, return the largest prime factor of n / p, otherwise\
    \ n is a prime.\n    if [ $p -lt $n ]; then\n        largest_prime_factor $((\
    \ n / p ))\n    else\n        echo $n\n    fi\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local factor=\"2\"\n    local result=\"1\"\n    while [ $n -gt\
    \ 1 ]; do\n        if [ $((n % factor)) -eq 0 ]; then\n            result=\"$factor\"\
    \n            n=$((n / factor))\n        else\n            factor=$((factor +\
    \ 1))\n        fi\n    done\n    echo \"$result\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local -i i=2\n    while (( i < n )); do\n        if (( n % i == 0\
    \ )); then\n            largest_prime_factor $(( n / i ))\n            return\n\
    \        fi\n        (( i += 1 ))\n    done\n    echo $n\n}\n\ncandidate() {\n\
    \    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    for ((i=2; i<=n; i++)); do\n        # Only proceed if i is a factor\
    \ of n.\n        [[ $((n % i)) -eq 0 ]] || continue\n        # Now we know i is\
    \ a factor of n. Check if i is prime\n        local prime=1\n        for ((j=2;\
    \ j<i; j++)); do\n            [[ $((i % j)) -eq 0 ]] && prime=0 && break\n   \
    \     done\n        # i is prime! Now check if it's the largest factor of n.\n\
    \        if [[ $prime -eq 1 ]]; then\n            local largest=$i\n         \
    \   # n might be a large number, so we have to use floating point\n          \
    \  # arithmetic to see if i is the largest factor.\n            local factor=$(bc\
    \ -l <<< \"$n / $i\")\n            [[ $(bc -l <<< \"$factor - ${factor%.*}\")\
    \ != 0 ]] && continue\n            # If the floating point calculation indicates\
    \ i is the largest\n            # factor, then test using integer arithmetic.\n\
    \            [[ $((n % factor)) -eq 0 ]] && local largest=$factor\n        fi\n\
    \    done\n    echo $largest\n}\n\ncandidate() {\n    largest_prime_factor \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[\
    \ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[\
    \ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n\
    }\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpgu0iuvva.sh: line 28: 5.00000000000000000000: syntax error: invalid
    arithmetic operator (error token is ".00000000000000000000")

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    a=$1\n\
    \    local factor=$(smallest_prime_factor $a)\n    echo \"smallest_prime_factor\
    \ $a => $factor\"\n    while [ $factor -lt $a ]; do\n        a=$(($a / $factor))\n\
    \        factor=$(smallest_prime_factor $a)\n        echo \"smallest_prime_factor\
    \ $a => $factor\"\n    done\n    echo $a\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp0o_5sxv_.sh: line 11: smallest_prime_factor: command not found

    /tmp/tmp0o_5sxv_.sh: line 13: [: -lt: unary operator expected

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1 factor_list=$(factor $n) max=$(echo \"$factor_list\" | tail -n 1)\n   \
    \ echo \"$max\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=39 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=7 encoding='utf-8'>
  timestamp: 1660020965
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local divisor=2\n  local largest=1\n  while ((n > 1)); do\n    while\
    \ ((n % divisor == 0)); do\n      largest=$divisor\n      n=$((n / divisor))\n\
    \    done\n    divisor=$((divisor + 1))\n  done\n  echo $largest\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local p=$(is_prime \"$n\")\n    if [ \"$p\" -eq \"1\" ]; then\n  \
    \      echo \"$n\"\n    else\n        local i=$(next_factor \"$n\")\n        largest_prime_factor\
    \ \"$i\"\n    fi\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=31 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=29 encoding='utf-8'>
  timestamp: 1660020965
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local i=2\n  local max_prime=1\n  while ((i*i<=n)); do\n    if ((n%i==0));\
    \ then\n      n=$((n/i))\n      max_prime=$i\n    else\n      ((i++))\n    fi\n\
    \  done\n  if ((n>1)); then\n    max_prime=$n\n  fi\n  echo $max_prime\n}\n\n\
    candidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ i=2 n=$1\n    for (( ; n > i; i++ ))\n    do\n        if (( n % i == 0 ))\n\
    \        then\n            n=$(( n / i ))\n            i=1\n        fi\n    done\n\
    \    echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    echo\
    \ \"$1\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    declare\
    \ -r N=$1\n    declare -r MAX=$(truncate_to_int \"$(sqrt \"$N\")\")\n    local\
    \ -i d\n    for ((d=2; d<=MAX; d++)); do\n        local -i quotient\n        let\
    \ quotient=\"N / d\"\n        local -i remainder\n        let remainder=\"N %\
    \ d\"\n        # TODO: https://github.com/nodiscc/script.bash/issues/27\n    \
    \    if [ \"$remainder\" -eq 0 ]; then\n            if $(is_prime \"$quotient\"\
    ); then\n                echo \"$quotient\"\n                return\n        \
    \    fi\n            if $(is_prime \"$d\"); then\n                echo \"$d\"\n\
    \                return\n            fi\n        fi\n    done\n    echo \"1\"\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5yg3u0wk.sh: line 11: sqrt: command not found

    /tmp/tmp5yg3u0wk.sh: line 11: truncate_to_int: command not found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ factor=\"\"\n  local n=\"$1\"\n  local nn=$(($n / 2))\n  for ((i=2; i<=nn; i++));\
    \ do\n    if (($n % $i == 0)); then\n      factor=$(largest_prime_factor $i)\n\
    \      break\n    fi\n  done\n  if [[ -z \"$factor\" ]]; then\n    factor=\"$n\"\
    \n  fi\n  echo \"$factor\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  n=$1\n\
    \n  # Using the traditional method to calculate the largest prime factor of $n\n\
    \  # and it is not fast.\n  # largest_factor=$(prime_factors \"$n\" | sed 's/$/\\\
    n/g' | sort -g | sed '$d')\n\n  # Using a more efficient way to calculate the\
    \ largest prime factor of $n\n  largest_factor=$(factor $n | awk '{print $NF}')\n\
    \n  echo \"$largest_factor\"\n}\n\ncandidate() {\n    largest_prime_factor \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[\
    \ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[\
    \ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  n=$1\n\
    \  divisor=2\n  while [ $divisor -lt $n ]; do\n    if (( n % divisor == 0 ));\
    \ then\n      n=$(( n / divisor ))\n    else\n      divisor=$(( divisor + 1 ))\n\
    \    fi\n  done\n  echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local i p\n    p=2\n    while (( n > 1 )); do\n        if (( n\
    \ % p == 0 )); then\n            n=$(( n / p ))\n        else\n            ((\
    \ p++ ))\n        fi\n    done\n    echo \"$p\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    if\
    \ (( $1 <= 1 )); then\n        echo \"error: $1 is not a positive integer.\"\n\
    \        return 1\n    fi\n\n    largest_factor=1\n    for ((i=2; i<=$1; i++));\
    \ do\n        if (( $1 % $i == 0 )); then\n            is_prime=1\n          \
    \  for ((j=2; j<=$i; j++)); do\n                if (( $i % $j == 0 && $j != $i\
    \ )); then\n                    is_prime=0\n                    break\n      \
    \          fi\n            done\n            if (( $is_prime == 1 )); then\n \
    \               largest_factor=$i\n            fi\n        fi\n    done\n    echo\
    \ $largest_factor\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  echo\
    \ \"($(gcd \"$1\" \"1\"))\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy65hp1xs.sh: line 10: gcd: command not found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    echo\
    \ \"$1\" | { local read n; while true; do\n        while (( n % 2 == 0 )); do\
    \ n=$(( n / 2 )); done\n        if (( n == 1 )); then echo 2; break; fi\n    \
    \    if (( n % 3 == 0 )); then n=$(( n / 3 )); echo 3; continue; fi\n        if\
    \ (( n % 5 == 0 )); then n=$(( n / 5 )); echo 5; continue; fi\n        for ((\
    \ i=7; (( i*i <= n )); i+=2 )); do\n            if (( n % i == 0 )); then n=$((\
    \ n / i )); echo $i; break; fi\n        done\n    done; }\n}\n\ncandidate() {\n\
    \    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=44 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=42 encoding='utf-8'>
  timestamp: 1660020965
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    if\
    \ (( $1 == 2 )); then\n        echo 2\n        return\n    fi\n    for (( i=2;\
    \ i<=$1; i++ )); do\n        if (( $1 % i == 0 )); then\n            prime=$(largest_prime_factor\
    \ $(( $1 / i )))\n            if (( prime > i )); then\n                echo $prime\n\
    \            else\n                echo $i\n            fi\n            return\n\
    \        fi\n    done\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local factor=2\n  local largest=2\n  while [ $n -gt 1 ]; do\n  \
    \  if (( n % factor == 0 )); then\n      largest=$factor\n      n=$(( n / factor\
    \ ))\n    else\n      (( factor += 1 ))\n    fi\n  done\n  echo \"$largest\"\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  n=$1\n\
    \  if [[ $(is_prime \"$n\") == \"true\" ]]; then\n    echo \"$n\"\n    return\n\
    \  fi\n  d=$(largest_prime_divisor \"$n\")\n  while [[ $(is_prime \"$d\") == \"\
    false\" ]]; do\n    d=$(largest_prime_divisor \"$d\")\n  done\n  echo \"$d\"\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8aqzlxgn.sh: line 11: is_prime: command not found

    /tmp/tmp8aqzlxgn.sh: line 15: largest_prime_divisor: command not found

    /tmp/tmp8aqzlxgn.sh: line 16: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1 # n > 1, n is not a prime\n  local i=2  # Start from 2, the first prime\n\
    \  local largest=2\n\n  # Loop from 2 to sqrt(n)\n  while (( i*i <= n )); do\n\
    \    if [[ $(( n % i )) -eq 0 ]]; then\n      local p=$i # i is a prime factor\
    \ of n\n      while [[ $(( n % p )) -eq 0 ]]; do\n        n=$(( n / p ))\n   \
    \   done\n      largest=$p\n    fi\n    i=$(( i + 1 ))\n  done\n\n  # n is a prime\
    \ factor\n  if [[ $n -gt 1 ]]; then\n    largest=$n\n  fi\n\n  echo $largest\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local -i i=2\n  while [[ i -lt n ]]; do\n    # `$((i % n))` is 0 iff\
    \ i is a factor of n\n    while [[ $((i % n)) -eq 0 ]]; do\n      n=$((n / i))\n\
    \    done\n    i=$((i + 1))\n  done\n  echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    if\
    \ [ $1 -eq 1 ]; then\n        echo $1\n        return\n    fi\n\n    local n=$1\n\
    \n    # find the first prime divisor\n    local divisor=2\n    while [ $((n %\
    \ divisor)) -ne 0 ]; do\n        divisor=$((divisor + 1))\n    done\n\n    if\
    \ [ $divisor -eq $n ]; then\n        echo $n\n        return\n    fi\n\n    local\
    \ lpf=$(largest_prime_factor $((n / divisor)))\n    if [ $lpf -gt $divisor ];\
    \ then\n        echo $lpf\n    else\n        echo $divisor\n    fi\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=${1:-13195}\n    local i=2\n    local s=0\n    local n_div_i=0\n    local\
    \ n_div_i_is_prime=0\n    local max_prime=0\n\n    while [ $i -lt $n ]; do\n \
    \       s=$(expr $n % $i)\n        if [ $s -eq 0 ]; then\n            n_div_i=$(expr\
    \ $n / $i)\n            n_div_i_is_prime=$(check_for_prime $n_div_i)\n       \
    \     if [ $n_div_i_is_prime -eq 1 ]; then\n                max_prime=$n_div_i\n\
    \            fi\n        fi\n        i=$(expr $i + 1)\n    done\n\n    echo $max_prime\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpws8__l62.sh: line 21: check_for_prime: command not found

    /tmp/tmpws8__l62.sh: line 22: [: -eq: unary operator expected

    /tmp/tmpws8__l62.sh: line 21: check_for_prime: command not found

    /tmp/tmpws8__l62.sh: line 22: [: -eq: unary operator expected

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local largest_prime_factor=2\n  local min_divisor=2\n  while [ $((n\
    \ % min_divisor)) -eq 0 ]; do\n    if [ $((min_divisor)) -gt $((largest_prime_factor))\
    \ ]; then\n      largest_prime_factor=$min_divisor\n    fi\n    n=$((n / min_divisor))\n\
    \  done\n  if [ $((n)) -gt $((largest_prime_factor)) ]; then\n    largest_prime_factor=$n\n\
    \  fi\n  echo $largest_prime_factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local p=2\n    local d=0\n    while (( p * p <= n )); do\n       \
    \ if (( n % p == 0 )); then\n            n=$(( n / p ))\n            d=$p\n  \
    \      else\n            (( p++ ))\n        fi\n    done\n    echo $(( n > d ?\
    \ n : d ))\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local i=2\n  while [[ ! $((n % i)) -eq 0 ]]; do\n    ((i++))\n  done\n\
    \  echo \"$i\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=${1}\n  local i=2\n  while [[ $(( n % i )) -eq 0 ]]; do\n    n=$(( n / i ))\n\
    \    while [[ $(( n % i )) -eq 0 ]]; do\n      n=$(( n / i ))\n    done\n    i=$((\
    \ i + 1 ))\n  done\n  echo \"${n}\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ i=$(square_root \"$1\")\n  # See: http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog\n\
    \  local top_factor=$((i - 1))\n  local step=$((top_factor >> 1))\n  local factor=$top_factor\n\
    \  while [[ $factor -gt 0 ]]; do\n    if [[ $((i % factor)) -eq 0 ]]; then\n \
    \     local divisor=$((i / factor))\n      # Let's see if this is prime\n    \
    \  if [[ $divisor -gt $factor ]]; then\n        if [[ $(is_prime \"$divisor\"\
    ) -eq 1 ]]; then\n          echo \"$divisor\"\n          return\n        fi\n\
    \      else\n        if [[ $(is_prime \"$factor\") -eq 1 ]]; then\n          echo\
    \ \"$factor\"\n          return\n        fi\n      fi\n    fi\n    factor=$((factor\
    \ - step))\n  done\n  echo \"$1\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplsq8voqa.sh: line 10: square_root: command not found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local f=\"$n\"\n    local i=2\n    local j=2\n    while [[ $i\
    \ -lt $f ]]; do\n        if [[ $(( n % i )) -eq 0 ]]; then\n            # We have\
    \ a factor\n            f=\"$(( n / i ))\"\n            # Cancel out any remaining\
    \ factors of i in f\n            while [[ $(( f % i )) -eq 0 ]]; do\n        \
    \        f=\"$(( f / i ))\"\n            done\n            # Reset j to 2\n  \
    \          j=2\n        else\n            # Try the next factor\n            i=\"\
    $(( i + 1 ))\"\n        fi\n    done\n    printf \"%s\" \"$f\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=47 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=35 encoding='utf-8'>
  timestamp: 1660020965
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ -r n=$1\n  local -r sqrt_n=$(floor_root \"$n\")\n  local factor\n  local i=2\n\
    \  while [ $i -le $sqrt_n ]; do\n    if (( $n % $i == 0 )); then\n      factor=$i\n\
    \      break\n    fi\n    (( i++ ))\n  done\n  if [ -z \"$factor\" ]; then\n \
    \   echo \"$n\"\n  else\n    factor=$(largest_prime_factor \"$(( n / factor ))\"\
    )\n    if (( $factor > $i )); then\n      factor=$i\n    fi\n    echo \"$factor\"\
    \n  fi\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp04gnrhzw.sh: line 11: floor_root: command not found

    /tmp/tmp04gnrhzw.sh: line 14: [: 2: unary operator expected

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local max=${n}\n    while [ ${n} -gt 1 ]; do\n        while [ $((${n}\
    \ % 2)) -eq 0 ]; do\n            n=$((${n} / 2))\n        done\n        while\
    \ [ $((${n} % 3)) -eq 0 ]; do\n            n=$((${n} / 3))\n        done\n   \
    \     local d=5\n        while [ ${d} -lt $((${n} + 1)) ]; do\n            while\
    \ [ $((${n} % ${d})) -eq 0 ]; do\n                n=$((${n} / ${d}))\n       \
    \     done\n            d=$((${d} + 2))\n        done\n        if [ ${n} -lt ${max}\
    \ ]; then\n            max=${n}\n        fi\n    done\n    echo ${max}\n}\n\n\
    candidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n\n  # lowest prime factor\n  local f=2\n\n  # handle even integers\n \
    \ while [ $(($n % $f)) -eq 0 ]; do\n    n=$(($n / $f))\n  done\n\n  # odd factors,\
    \ with f += 2\n  f=3\n  while [ $f -le $n ]; do\n    while [ $(($n % $f)) -eq\
    \ 0 ]; do\n      n=$(($n / $f))\n    done\n    f=$(($f + 2))\n  done\n\n  echo\
    \ $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  n=\"\
    $1\"\n  i=2\n  factor=2\n  while [ $i -lt $n ]; do\n    if [[ $(( $n % $i )) ==\
    \ 0 ]]; then\n      n=$(( $n / $i ))\n      factor=$i\n    else\n      i=$(( $i\
    \ + 1 ))\n    fi\n  done\n  echo $factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local divisor=$(seq 2 $(int_sqrt $n))\n  local prime_factors=()\n  for\
    \ d in $divisor; do\n    if (( n % d == 0 )); then\n      prime_factors+=($d)\n\
    \      n=$(( n / d ))\n    fi\n  done\n  echo $(max ${prime_factors[@]})\n}\n\n\
    candidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdgfuvshj.sh: line 11: int_sqrt: command not found

    /tmp/tmpdgfuvshj.sh: line 19: max: command not found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local factor=$(lowest_prime_factor \"$n\")\n  if [[ $factor -eq $n ]];\
    \ then\n    echo \"$n\"\n  else\n    largest_prime_factor $(($n / $factor))\n\
    \  fi\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpz3j0joz2.sh: line 11: lowest_prime_factor: command not found

    /tmp/tmpz3j0joz2.sh: line 15: 15 / : syntax error: operand expected (error token
    is "/ ")

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ ! $1 =~ ^[0-9]+$ ]]; then\n    echo \"Usage: $FUNCNAME <integer>\"\n    return\
    \ 1\n  fi\n\n  local PRIME_FACTORS\n  PRIME_FACTORS=$(factor $1 | grep \"^[0-9]\\\
    +:\")\n\n  # Return the last line in the array\n  echo \"$PRIME_FACTORS\" | tail\
    \ -n 1 | cut -d \":\" -f 1\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=${1}\n    local i=2\n    while [[ ${n} -ge ${i} ]]; do\n        if [[ ${n}\
    \ -eq ${i} ]]; then\n            break\n        elif [[ $((${n} % ${i})) -eq 0\
    \ ]]; then\n            n=$((${n} / ${i}))\n        else\n            i=$((${i}\
    \ + 1))\n        fi\n    done\n    echo \"${n}\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ integer=$1\n    local divisor=2\n    while [[ $((\"$integer\" % \"$divisor\"\
    )) -eq 0 ]]; do\n        integer=$((\"$integer\" / \"$divisor\"))\n    done\n\
    \    divisor=3\n    while [[ $((\"$integer\" % \"$divisor\")) -eq 0 ]]; do\n \
    \       integer=$((\"$integer\" / \"$divisor\"))\n    done\n    while [[ $integer\
    \ -gt 2 ]]; do\n        if [[ $((\"$integer\" % \"$divisor\")) -eq 0 ]]; then\n\
    \            integer=$((\"$integer\" / \"$divisor\"))\n        else\n        \
    \    divisor=$((\"$divisor\" + 2))\n        fi\n    done\n    echo \"$divisor\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  for ((i=2;i<n;i++)); do\n    if ((n%i==0)); then\n      n=$((n/i))\n\
    \      i=$((i-1))\n    fi\n  done\n  echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local f=2\n    while (($n > 1)); do\n        if (($n % $f == 0));\
    \ then\n            n=$((n / f))\n        else\n            ((f++))\n        fi\n\
    \    done\n    echo $f\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  for i\
    \ in $(seq 2 $(($1/2))); do\n    if [ $(( $1 % $i )) -eq 0 ]; then\n      # If\
    \ this number is not prime, keep going\n      if ! $(is_prime $i); then\n    \
    \    continue\n      fi\n      # If the divisor is larger than the last one, keep\
    \ it\n      if [ -z \"$largest_prime\" ] || [ $i -gt $largest_prime ]; then\n\
    \        largest_prime=$i\n      fi\n    fi\n  done\n  echo $largest_prime\n}\n\
    \ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpy2sq5t1l.sh: line 13: is_prime: command not found

    /tmp/tmpy2sq5t1l.sh: line 13: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  divisor=2\n\
    \  largest_factor=1\n  n=$1\n  while [ $n -gt 1 ]; do\n    remainder=$(expr $n\
    \ % $divisor)\n    if [ $remainder -eq 0 ]; then\n      largest_factor=$divisor\n\
    \      n=$(expr $n / $divisor)\n    else\n      divisor=$(expr $divisor + 1)\n\
    \    fi\n  done\n  echo $largest_factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    check_arg\
    \ \"$1\" || { printf \"ERROR: first argument must be an integer\\n\"; return 1;\
    \ }\n    if (( $1 < 2 )); then\n        printf \"ERROR: first argument must be\
    \ an integer >= 2\\n\"\n        return 1\n    fi\n    local n=$1\n    local max_factor=1\n\
    \    for (( i=2; i<n; i++ )); do\n        if (( n % i == 0 )); then\n        \
    \    local factor=$(largest_prime_factor $i)\n            if (( $factor > $max_factor\
    \ )); then\n                max_factor=$factor\n            fi\n        fi\n \
    \   done\n    printf $max_factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgjuic7ww.sh: line 10: check_arg: command not found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ ! \"$1\" =~ ^[0-9]+$ ]]; then\n    echo \"Usage: largest_prime_factor <number>\"\
    \ >&2\n    return 1\n  fi\n\n  local number=\"$1\"\n  local factor=\"$number\"\
    \n  local i\n  for ((i=2; i<=factor; i++)); do\n    while (( number % i == 0 ));\
    \ do\n      number=\"$(( number / i ))\"\n      factor=\"$i\"\n    done\n  done\n\
    \  echo \"$factor\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1 lpf=2 d=3\n  while [ $n -ne 1 ]; do\n    if [ $(($n % $d)) -eq 0 ]; then\n\
    \      n=$(($n / $d))\n      lpf=$d\n    fi\n    d=$(($d + 2))\n  done\n  echo\
    \ $lpf\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ -i n=$1\n    local -i factor=2\n    while (( n % factor != 0 )) ; do\n     \
    \   (( factor++ ))\n    done\n    while (( n % factor == 0 )) ; do\n        ((\
    \ n /= factor ))\n    done\n    echo \"$factor\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  declare\
    \ -i n n2 i primes num_primes\n  declare -a primes\n  n=\"$1\"\n  n2=\"$1\"\n\
    \  num_primes=0\n  # Find the smallest prime factor of n.\n  for ((i=2; i*i<=n;\
    \ i++)); do\n    if ((n % i == 0)); then\n      ((n /= i))\n      primes[num_primes++]=$i\n\
    \      break\n    fi\n  done\n  # If n is a prime, then n is also the largest\
    \ prime factor.\n  if ((n2 == n)); then\n    echo \"$n\"\n    return\n  fi\n \
    \ # n is not a prime. n is the product of its prime factors.\n  while ((n2 !=\
    \ 1)); do\n    if ((n2 % n == 0)); then\n      ((n2 /= n))\n      primes[num_primes++]=$n\n\
    \    else\n      ((n -= 1))\n    fi\n  done\n  echo \"${primes[num_primes-1]}\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local factor=\"2\"\n    while [ \"$n\" -gt \"$factor\" ]; do\n\
    \        if [ \"$(($n % $factor))\" == \"0\" ]; then\n            n=\"$(($n /\
    \ $factor))\"\n        else\n            factor=\"$(($factor + 1))\"\n       \
    \ fi\n    done\n    echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  largest_prime_factor_helper\
    \ \"$1\" 2\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp_eh2artw.sh: line 10: largest_prime_factor_helper: command not
    found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ $1 -lt 2 ]]; then\n    return 1\n  fi\n  # Try divisors 2 to sqrt(n).\n  # Yes,\
    \ this could be more efficient, but I'm trying to write code\n  # that is understandable\
    \ and easily modifiable.\n  local n=$1\n  local i=2\n  while [[ $i -lt $n ]];\
    \ do\n    local i_sq=$((i * i))\n    if [[ $i_sq -gt $n ]]; then\n      echo $n\n\
    \      return 0\n    fi\n    local remainder=$((n % i))\n    if [[ $remainder\
    \ -eq 0 ]]; then\n      n=$((n / i))\n    else\n      ((++i))\n    fi\n  done\n\
    \  # Must be prime\n  echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[\
    \ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[\
    \ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=${1?need n}\n    local r=$(factor $n | awk '{print $2}')\n    echo $r\n}\n\
    \ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ largest=2\n    local n=$1\n    while [ $(( n % 2 )) -eq 0 ]; do\n        n=$((\
    \ n / 2 ))\n    done\n    local i=3\n    local sqrt=$(sqrt \"$n\")\n    while\
    \ [ $i -le $sqrt ]; do\n        while [ $(( n % i )) -eq 0 ]; do\n           \
    \ largest=$i\n            n=$(( n / i ))\n        done\n        i=$(( i + 2 ))\n\
    \    done\n    if [ $n -gt $largest ]; then\n        largest=$n\n    fi\n    echo\
    \ \"$largest\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpdwpevkzb.sh: line 16: sqrt: command not found

    /tmp/tmpdwpevkzb.sh: line 17: [: 3: unary operator expected

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [\
    \ $1 -le 1 ]; then\n    echo $1\n    return\n  fi\n\n  i=2\n  while [ $i -lt $1\
    \ ]; do\n    if [ $(($1 % $i)) -eq 0 ]; then\n      # n is divisible by i.\n \
    \     $0 $(($1 / $i))\n      return\n    fi\n    i=$(($i + 1))\n  done\n\n  #\
    \ n is not divisible by any number i between 2 and n - 1, so it must be\n  # prime.\n\
    \  echo $1\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpig0mh_xo.sh: line 19: /tmp/tmpig0mh_xo.sh: Permission denied

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  n=$1\n\
    \  largest=2\n  while [ $n -gt 1 ]; do\n    if [ $((n % largest)) -eq 0 ]; then\n\
    \      n=$((n / largest))\n    else\n      largest=$((largest + 1))\n    fi\n\
    \  done\n  echo $largest\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  declare\
    \ -r n=\"$1\"\n  declare -r i_max=$(($n / 2))\n  declare -r factors=$(factor \"\
    $n\")\n  declare -a factor_array=($factors)\n  declare largest=1\n  for ((i=1;\
    \ i<${#factor_array[@]}; i+=2)); do\n    factor=${factor_array[$i]}\n    if [[\
    \ $factor -gt $largest ]]; then\n      largest=$factor\n    fi\n  done\n  echo\
    \ \"$largest\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n\n    # Try dividing the number by the smallest prime factors.\n    for\
    \ f in 2 3 5 7 11; do\n        while ((n % f == 0)); do\n            n=$((n /\
    \ f))\n        done\n    done\n\n    # If the number is still not 1, try other\
    \ prime factors.\n    # TODO: Implement algorithm to find the next prime.\n  \
    \  if ((n > 1)); then\n        if ((n % 13 == 0)); then\n            n=$((n /\
    \ 13))\n        elif ((n % 17 == 0)); then\n            n=$((n / 17))\n      \
    \  elif ((n % 19 == 0)); then\n            n=$((n / 19))\n        elif ((n % 23\
    \ == 0)); then\n            n=$((n / 23))\n        elif ((n % 29 == 0)); then\n\
    \            n=$((n / 29))\n        elif ((n % 31 == 0)); then\n            n=$((n\
    \ / 31))\n        fi\n    fi\n\n    echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ largest=1\n\n    # All primes are of the form 6k +/- 1, with the exception of\
    \ 2 and 3.\n    # Test all numbers of that form.\n    for (( i=1; 2*i+1<=$1; i++\
    \ )); do\n        while (( $(($1 % (6*i - 1))) == 0 )); do\n            largest=$(($1\
    \ / (6*i - 1)))\n            $1=$largest\n        done\n        while (( $(($1\
    \ % (6*i + 1))) == 0 )); do\n            largest=$(($1 / (6*i + 1)))\n       \
    \     $1=$largest\n        done\n    done\n\n    echo $largest\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=48 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=45 encoding='utf-8'>
  timestamp: 1660020965
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local i=2\n  local result=0\n  while (( $n > 1 ))\n  do\n    while\
    \ (( $n % $i == 0 ))\n    do\n      n=$(( $n / $i ))\n      result=$i\n    done\n\
    \    i=$(( $i + 1 ))\n  done\n  echo $result\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  # Given\
    \ the assumptions, we know n has at least one prime factor.\n  # A number can\
    \ be factorized into powers of its prime factors.\n  # The largest prime factor\
    \ will be the largest factor that is prime.\n  # E.g. 60 = 2^2 * 3 * 5. The largest\
    \ prime factor is 5.\n  # E.g. 12 = 2^2 * 3. The largest prime factor is 3.\n\
    \  # We know 2 is a prime factor, so we can start at 2.\n  # We continue incrementing\
    \ by 1 until we find a factor that is prime.\n  for ((i=2; i<=$1; i++)); do\n\
    \    if (( $1 % $i == 0 )); then\n      factor=$i\n      # If the factor is not\
    \ prime, we divide it into its prime factors.\n      # E.g. 12 = 2^2 * 3.\n  \
    \    # E.g. 60 = 2^2 * 3 * 5.\n      # We keep calling largest_prime_factor until\
    \ we get a prime factor.\n      # The prime factor will be the largest factor\
    \ of the product.\n      factor=$(largest_prime_factor \"$(( $1 / $i ))\")\n \
    \     break\n    fi\n  done\n  echo $factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local divisor=2\n    local largest_factor\n    while ((n > 1)); do\n\
    \        while ((n % divisor == 0)); do\n            largest_factor=$divisor\n\
    \            ((n /= divisor))\n        done\n        ((++divisor))\n    done\n\
    \    echo $largest_factor\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1 divisor=2 largest_prime_factor=1\n    while (( n > 1 )); do\n        while\
    \ (( n % divisor == 0 )); do\n            largest_prime_factor=$divisor\n    \
    \        (( n /= divisor ))\n        done\n        (( divisor++ ))\n    done\n\
    \    echo $largest_prime_factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ factor_candidate=$1\n  local factor=2\n  while [ $factor_candidate -gt 1 ];\
    \ do\n    while (( $factor_candidate % $factor == 0 )); do\n      factor_candidate=$((\
    \ $factor_candidate / $factor ))\n    done\n    factor=$(( $factor + 1 ))\n  done\n\
    \  echo $(( $factor - 1 ))\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local max_p=0\n  local p=2\n  local i=0\n  local f=1\n  local search=1\n\
    \  local max_search=20000\n  local factor_count=0\n  local factors\n  local factors_array\n\
    \  local factor\n  local counter\n\n  # Out of factors?\n  if [[ $n -le 2 ]];\
    \ then\n    echo $n\n    return\n  fi\n\n  # Max prime to search for.\n  max_p=$(sqrt\
    \ $n)\n\n  for (( p=2; p <= max_p; p++ )); do\n    # Is p a factor of n?\n   \
    \ if [[ $((n % p)) -eq 0 ]]; then\n      # Is p prime?\n      if [[ $(is_prime\
    \ $p) == \"1\" ]]; then\n        max_p=$((n / p))\n        max_search=$((sqrt\
    \ $max_p))\n        # echo \"prime: $p\"\n\n        # Are there any other factors\
    \ of p?\n        # Max search is the largest factor that could be a factor of\
    \ p\n        # Max search is also the largest factor that could be a factor of\
    \ n\n        for (( search=2; search <= max_search; search++ )); do\n        \
    \  if [[ $((p % search)) -eq 0 ]]; then\n            # echo \"p: $p, search: $search\"\
    \n            # echo \"p isn't prime, it's $p\"\n            break\n         \
    \ fi\n        done\n\n        # If we reached max_search then p must be prime.\n\
    \        if [[ $search -eq $max_search ]]; then\n          if [[ $p -gt $max_p\
    \ ]]; then\n            # This is a little bit of a hack.\n            # If p\
    \ is bigger than max_p then it's probably a prime\n            # but we may have\
    \ missed one in the search above,\n            # so search again.\n          \
    \  if [[ $(is_prime $p) == \"1\" ]]; then\n              max_p=$p\n          \
    \  fi\n          else\n            max_p=$p\n          fi\n        fi\n      fi\n\
    \    fi\n  done\n\n  echo $max_p\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpauec8vn7.sh: line 30: sqrt: command not found

    '
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local i\n  local f\n  # Remove all 2 factors from n\n  if [[ \"\
    $((n % 2))\" -eq 0 ]]; then\n    f=2\n    n=\"$((n / 2))\"\n    while [[ \"$((n\
    \ % 2))\" -eq 0 ]]; do\n      n=\"$((n / 2))\"\n    done\n  fi\n  i=3\n  while\
    \ [[ \"$((n % i))\" -ne 0 ]]; do\n    i=\"$((i + 2))\"\n  done\n  if [[ \"$((n\
    \ / i))\" -eq 1 ]]; then\n    # n is prime itself\n    echo \"$n\"\n  else\n \
    \   largest_prime_factor \"$((n / i))\"\n  fi\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local p=2\n\n  while ! [[ \"$n\" -eq \"$p\" ]]; do\n    if (( n\
    \ % p == 0 )); then\n      (( n /= p ))\n    else\n      (( p++ ))\n    fi\n \
    \ done\n\n  echo \"$p\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n\n    # Find the largest factor of n.\n    while ((n > 1)); do\n \
    \       if ((n % 2 == 0)); then\n            n=$((n / 2))\n        else\n    \
    \        break\n        fi\n    done\n\n    # n is now a divisor of $1, but not\
    \ necessarily the largest.\n    # Find a prime factor of n.\n    local d=\"3\"\
    \n    local d_sqrt=\"$(sqrt \"$n\")\"\n    while ((d <= d_sqrt)); do\n       \
    \ if ((n % d == 0)); then\n            n=$((n / d))\n            d_sqrt=\"$(sqrt\
    \ \"$n\")\"\n        else\n            d=$((d + 2))\n        fi\n    done\n\n\
    \    # n is now the largest prime factor of $1.\n    echo \"$n\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp02q5l8eo.sh: line 24: sqrt: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local divisor=2\n  while (( $n % $divisor != 0 )); do\n    ((divisor++))\n\
    \  done\n  local quotient=$(( $n / $divisor ))\n  if [[ $quotient -lt $divisor\
    \ ]]; then\n    echo $divisor\n  else\n    echo $(largest_prime_factor $quotient)\n\
    \  fi\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ $1 -lt 1 ]]; then\n    echo \"error\"\n    return 1\n  fi\n  if [[ $1 -eq 1\
    \ ]]; then\n    echo \"1\"\n    return 0\n  fi\n  if [[ $1 -eq 2 ]]; then\n  \
    \  echo \"2\"\n    return 0\n  fi\n  local n=\"$1\"\n  local i=2\n  local j=\"\
    $n\"\n  while [[ $j -gt 1 ]]; do\n    if [[ $((j % i)) -eq 0 ]]; then\n      j=$((j\
    \ / i))\n    else\n      i=$((i + 1))\n    fi\n  done\n  echo \"$i\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    declare\
    \ -a factors\n    declare -i val=$1\n    i=2\n    while (( $val > 1 ))\n    do\n\
    \        if (( $val % $i == 0 ))\n        then\n            factors[${#factors[@]}]=$i\n\
    \            val=$(( $val / $i ))\n        else\n            i=$(( $i + 1 ))\n\
    \        fi\n    done\n    echo ${factors[${#factors[@]}-1]}\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=${1}\n    local f=2\n    while (( n > 1 )); do\n        if (( n % f == 0 ));\
    \ then\n            n=$(( n / f ))\n        else\n            f=$(( f + 1 ))\n\
    \        fi\n    done\n    echo \"${f}\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1  # number to factor\n  local p=2   # smallest possible prime factor\n \
    \ #\n  # The algorithm used here is iterative, which is not exactly efficient.\n\
    \  # For example, it could be more efficient to extract out the 2 factors\n  #\
    \ first before doing the rest. But I wanted to keep the implementation\n  # as\
    \ simple as possible.\n  #\n  # A recursive algorithm is more interesting, but\
    \ it's not obvious to me\n  # how to implement it, since the numbers to pass to\
    \ the recursive calls\n  # can't be constants, like p, since the p might need\
    \ to increase in the\n  # function call.\n  #\n  while [[ 1 -lt $n ]]; do\n  \
    \  while [[ ! $(( n % p )) -eq 0 ]]; do\n      p=$(( p + 1 ))\n    done\n    n=$((\
    \ n / p ))\n  done\n  echo $p\n}\n\ncandidate() {\n    largest_prime_factor \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[\
    \ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[\
    \ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n\
    }\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local largest_factor=2\n  while [ $n -gt $largest_factor ]; do\n   \
    \ if [ $(( n % largest_factor )) -eq 0 ]; then\n      n=$(( n / largest_factor\
    \ ))\n    else\n      largest_factor=$(( largest_factor + 1 ))\n    fi\n  done\n\
    \  echo $largest_factor\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local i=2\n    while [[ $i -lt $n ]]; do\n        while [[ $(( n %\
    \ i )) -eq 0 ]]; do\n            n=$(( n / i ))\n        done\n        i=$(( i\
    \ + 1 ))\n    done\n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    n=$1\n\
    \    x=2\n    while ((x < n))\n    do\n        while (( n % x == 0 ))\n      \
    \  do\n            n=$((n / x))\n        done\n        ((x++))\n    done\n   \
    \ echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local -i k=2 maxk=\n\n  while [[ $n -ne 1 ]]; do\n    # Find the largest\
    \ factor of n.\n    while [[ $((n % k)) -eq 0 ]]; do\n      maxk=$k\n      n=$((n\
    \ / k))\n    done\n    # Increment k by 1 unless it would overflow.\n    (( k\
    \ >= $((2 ** 16)) )) && break\n    (( k++ ))\n  done\n\n  echo $maxk\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local p=2\n  while (( n > 1 )); do\n    while (( n % p == 0 ));\
    \ do\n      n=$(( n / p ))\n    done\n    (( p++ ))\n  done\n  echo \"$(( p -\
    \ 1 ))\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local next_prime=3 # skip 2\n\n  while [ \"$((n % 2))\" -eq 0 ];\
    \ do\n    n=\"$((n / 2))\"\n  done\n\n  # loop until n is <= next_prime^2\n  while\
    \ [ \"$((n))\" -gt \"$((next_prime * next_prime))\" ]; do\n    while [ \"$((n\
    \ % next_prime))\" -eq 0 ]; do\n      n=\"$((n / next_prime))\"\n    done\n  \
    \  next_prime=\"$((next_prime + 2))\"\n  done\n\n  echo \"$n\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    # Check\
    \ if $1 is a prime\n    is_prime \"$1\"\n    if [[ $? -eq 0 ]]; then\n       \
    \ echo \"$1\"\n        return 0\n    fi\n\n    local i=2\n    local half=$(( $1\
    \ / 2 ))\n    local max_factor=$(( $1 / $i ))\n    # Iterate from 2 to half of\
    \ $1\n    while (( $i <= $half )); do\n        # Check if $i is a factor of $1\n\
    \        local factor=$(( $1 % $i ))\n        if [[ $factor -eq 0 ]]; then\n \
    \           # Check if $i is a prime\n            is_prime \"$i\"\n          \
    \  if [[ $? -eq 0 ]]; then\n                # i is the max prime factor if i is\
    \ greater than max_factor\n                if (( $i > $max_factor )); then\n \
    \                   max_factor=$i\n                fi\n            fi\n      \
    \  fi\n        i=$(( $i + 1 ))\n    done\n    echo \"$max_factor\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpjdnkm_yh.sh: line 11: is_prime: command not found

    /tmp/tmpjdnkm_yh.sh: line 26: is_prime: command not found

    /tmp/tmpjdnkm_yh.sh: line 26: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local root=$(sqrt \"$n\")\n    local i=2\n    while ((i <= root));\
    \ do\n        if ((n % i == 0)); then\n            local factor1=$i\n        \
    \    local factor2=$((n / i))\n            local max_factor=\n            if ((factor1\
    \ == factor2)); then\n                max_factor=$factor1\n            else\n\
    \                if is_prime \"$factor1\"; then\n                    max_factor=$factor1\n\
    \                else\n                    local prime1=$(largest_prime_factor\
    \ \"$factor1\")\n                    max_factor=$prime1\n                fi\n\
    \                if is_prime \"$factor2\"; then\n                    ((max_factor\
    \ < factor2)) && max_factor=$factor2\n                else\n                 \
    \   local prime2=$(largest_prime_factor \"$factor2\")\n                    ((max_factor\
    \ < prime2)) && max_factor=$prime2\n                fi\n            fi\n     \
    \       echo \"$max_factor\"\n            return\n        fi\n        ((i++))\n\
    \    done\n    # n is a prime\n    echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5x5cwf89.sh: line 11: sqrt: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local limit=$(($n / 2))\n    local factor=2\n    while [ $factor -lt\
    \ $limit ]; do\n        if [ $(($n % $factor)) -eq 0 ]; then\n            # This\
    \ is a factor.\n            limit=$(($n / $factor))\n            n=$(($n / $factor))\n\
    \        fi\n        factor=$(($factor + 1))\n    done\n    echo $n\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ limit=$1\n    if (( limit <= 1 )); then\n        return 0\n    fi\n    for ((factor=2;\
    \ factor <= limit; factor++)); do\n        if (( limit % factor == 0 )); then\n\
    \            # $factor is a factor of $limit\n            local quotient=$(( limit\
    \ / factor ))\n            if (( quotient == 1 )); then\n                # $limit\
    \ is already prime\n                echo \"$limit\"\n                return 0\n\
    \            fi\n            if (( quotient % factor != 0 )); then\n         \
    \       echo \"$factor\"\n                return 0\n            fi\n        fi\n\
    \    done\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=${1:-0} # Default to 0 if n is not given.\n    local i=2       # Factor to\
    \ test.\n    while [[ $i -lt $n ]]; do\n        # If n is divisible by i, then\
    \ n is not prime.\n        if [[ $((n % i)) -eq 0 ]]; then\n            # The\
    \ largest prime factor of n / i is also a prime factor of n.\n            largest_prime_factor\
    \ $((n / i))\n            return\n        fi\n        i=$((i + 1))\n    done\n\
    \    echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    # TODO:\
    \ add input check\n    # Is it really necessary? It's up to you\n    local n=$1\n\
    \    local next_factor=2\n    # TODO: write down your code here\n    while [[\
    \ $n -gt 1 ]]; do\n        if [[ $(( n % next_factor )) -eq 0 ]]; then\n     \
    \       n=$(( n / next_factor ))\n        else\n            (( next_factor++ ))\n\
    \        fi\n    done\n    echo $next_factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local p=2\n  local q=0\n  local largest=$p\n  while [ $p -lt $n ]; do\n\
    \    if [[ $((n % p)) -eq 0 ]]; then\n      q=$((n / p))\n      largest=$p\n \
    \     n=$q\n    else\n      p=$((p + 1))\n    fi\n  done\n  echo $largest\n}\n\
    \ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n\n    local p\n    local i\n\n    n=$1\n    p=2\n    i=2\n\n    while ((i *\
    \ i <= n)); do\n        while ((n % i == 0)); do\n            p=$i\n         \
    \   n=$((n / i))\n        done\n        i=$((i + 1))\n    done\n\n    if ((n >\
    \ 1)); then\n        p=$n\n    fi\n\n    echo $p\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local i=2\n    while [[ $((n % i)) == 0 ]]; do\n        n=$((n\
    \ / i))\n        i=$((i + 1))\n    done\n    echo \"$n\"\n}\n\ncandidate() {\n\
    \    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ integer=$1\n    if [ $integer -lt 2 ]; then\n        echo 1\n        return\
    \ 0\n    fi\n    if [ $integer -eq 2 ]; then\n        echo 2\n        return 0\n\
    \    fi\n    local i\n    local factor\n    # Try to find the factor.\n    for\
    \ ((i=2;i<$integer;i++)); do\n        if [ $((integer%i)) -eq 0 ]; then\n    \
    \        factor=$i\n            break\n        fi\n    done\n    # We can't find\
    \ the factor.\n    if [ -z \"$factor\" ]; then\n        echo $integer\n      \
    \  return 0\n    fi\n    # Continue to find the greatest prime factor.\n    $(largest_prime_factor\
    \ \"$((integer/factor))\")\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvo3unt5z.sh: line 34: 5: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n\n  local factor=2\n  until [[ $n == 1 ]]; do\n    while [[ $((n % factor))\
    \ == 0 ]]; do\n      n=$((n / factor))\n    done\n    factor=$((factor + 1))\n\
    \  done\n\n  echo $((factor - 1))\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ $1 -lt 1 ]]; then\n    echo -1\n    return\n  fi\n\n  if [[ $1 -eq 1 ]]; then\n\
    \    echo 1\n    return\n  fi\n\n  if [[ $1 -eq 2 ]]; then\n    echo 2\n    return\n\
    \  fi\n\n  i=2\n  while (( i < $1 )); do\n    # Only check prime numbers\n   \
    \ if [[ $(is_prime $i) -eq 1 ]]; then\n      if (( $1 % $i == 0 )); then\n   \
    \     echo $i\n        return\n      fi\n    fi\n    ((i++))\n  done\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    /tmp/tmpuuuq0iwe.sh: line 28: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ int=$1\n    local i=2\n\n    while [[ $int -gt 1 ]]; do\n        if [[ $((int\
    \ % i)) -eq 0 ]]; then\n            int=$((int / i))\n        else\n         \
    \   i=$((i + 1))\n        fi\n    done\n\n    echo $i\n}\n\ncandidate() {\n  \
    \  largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local result=1\n    local i=2\n    while [ $i -lt $n ]; do\n     \
    \   while [ $((n % i)) -eq 0 ]; do\n            result=$i\n            n=$((n\
    \ / i))\n        done\n        i=$((i + 1))\n    done\n    if [ $n -gt $result\
    \ ]; then\n        result=$n\n    fi\n    echo $result\n}\n\ncandidate() {\n \
    \   largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    # TODO:\
    \ make this do something\n    echo \"2\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    [ $#\
    \ -eq 1 ] || { echo \"Missing argument\"; exit 1; }\n    input=$1\n    i=2\n \
    \   while [ $i -lt $input ]; do\n        while [ $(($input % $i)) -eq 0 ]; do\n\
    \            input=$(($input / $i))\n        done\n        i=$(($i + 1))\n   \
    \ done\n    echo $input\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    for (( p=2; p*p<n; p++ )); do\n        if [[ $((n%p)) -eq 0 ]]; then\n\
    \            local n=$((n/p))\n            (( p-- ))\n        fi\n    done\n \
    \   echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    n=\"\
    $1\"\n    divisor=2\n    until (( n == 1 )); do\n        # Test for divisibility\
    \ of the current divisor.\n        if (( n % divisor == 0 )); then\n         \
    \   # Divide it from n.\n            n=$(( n / divisor ))\n            # Keep\
    \ it as the current largest prime factor.\n            largest_prime_factor=\"\
    $divisor\"\n        else\n            # Go to the next divisor.\n            divisor=$((\
    \ divisor + 1 ))\n        fi\n    done\n    echo \"$largest_prime_factor\"\n}\n\
    \ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    # n\
    \ is the number whose largest prime factor is being calculated\n    n=$1\n   \
    \ # d is an integer <= n\n    d=2\n    max_divisor=`expr $n / 2`\n    while [\
    \ $d -le $max_divisor ]; do\n        # If n is divisible by d, then n is not prime,\
    \ and it's largest prime\n        # factor is found by dividing n by d and then\
    \ finding the largest\n        # prime factor of the result.\n        if [ `expr\
    \ $n % $d` -eq 0 ]; then\n            echo `largest_prime_factor `expr $n / $d``\n\
    \            return\n        fi\n        d=`expr $d + 1`\n    done\n    # If we\
    \ get here, then n is a prime. Return n.\n    echo $n\n}\n\ncandidate() {\n  \
    \  largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u20182\u2019\n/tmp/tmpqr77tk9d.sh:\
    \ line 15: [: 2: unary operator expected\n"
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    n=$1\n\
    \n    # Not using \"local\" because n is n+1 for each iteration of the loop.\n\
    \    # TODO(tal): Assert n > 1 is not a prime\n\n    # We only need to check 2\
    \ to sqrt(n).\n    # Note that this is not the same as checking 2 to n/2.\n  \
    \  # TODO(tal): Do we need to check primes < sqrt(n) and then check\n    # n/prime\
    \ to n/2 for primes as well?\n    for ((i=2; i*i<=n; i++)); do\n        while\
    \ [[ $((n % i)) -eq 0 ]]; do\n            n=$((n / i))\n        done\n    done\n\
    \n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local factor=2\n  while (( n > 1 )); do\n    if (( n % factor == 0 ));\
    \ then\n      n=$(( n / factor ))\n    else\n      factor=$(( factor + 1 ))\n\
    \    fi\n  done\n  echo $factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ prime=2\n  local factor=$1\n  while [ \"$factor\" -gt \"$prime\" ]; do\n   \
    \ if [ \"$(($factor % $prime))\" -eq 0 ]; then\n      factor=$(($factor / $prime))\n\
    \    else\n      prime=$(($prime + 1))\n    fi\n  done\n  echo $prime\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ -i num=$1 i=2\n\n    while (( i*i <= num )); do\n        while (( (num % i)\
    \ == 0 )); do\n            num /= i\n        done\n        i+=1\n    done\n\n\
    \    echo \"$num\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=20 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=14 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ number=$1\n    for (( i=2; i <= $number; i++ )); do\n        if [[ $(( number\
    \ % i )) -eq 0 ]]; then\n            local factor=$i\n            local number=$((\
    \ number / i ))\n            i=1\n        fi\n    done\n    echo $factor\n}\n\n\
    candidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    # A\
    \ sieve of Eratosthenes\n\n    # SoE is a 1-based array of booleans: true if the\
    \ index is a prime number\n    local -a soe\n    local n\n    local max\n\n  \
    \  if [[ \"$1\" -le 1 ]]; then\n        echo \"Input must be positive and greater\
    \ than 1\" >&2\n        return 1\n    fi\n\n    max=$(echo \"sqrt($1)\" | bc -l)\n\
    \    n=0\n    while [[ \"$n\" -le \"$max\" ]]; do\n        soe[$n]=true\n    \
    \    ((n++))\n    done\n\n    n=2\n    while [[ \"$n\" -le \"$max\" ]]; do\n \
    \       if [[ \"${soe[$n]}\" = true ]]; then\n            # Found a prime number,\
    \ so mark all multiples as composite\n            m=$((n + n))\n            while\
    \ [[ \"$m\" -le \"$max\" ]]; do\n                soe[$m]=false\n             \
    \   ((m += n))\n            done\n        fi\n        ((n++))\n    done\n\n  \
    \  # Return the largest prime number that divides n.\n    n=$1\n    while [[ \"\
    $n\" -gt 1 ]]; do\n        d=$(echo \"sqrt($n)\" | bc -l)\n        while [[ \"\
    ${soe[$d]}\" = false ]]; do\n            d=$(echo \"$d - 1\" | bc -l)\n      \
    \  done\n        if [[ \"$(echo \"$n % $d\" | bc -l)\" = 0 ]]; then\n        \
    \    echo \"$d\"\n            return 0\n        fi\n        ((n--))\n    done\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8gnx1xwu.sh: line 24: [[: 3.87298334620741688517: syntax error:
    invalid arithmetic operator (error token is ".87298334620741688517")

    /tmp/tmp8gnx1xwu.sh: line 30: [[: 3.87298334620741688517: syntax error: invalid
    arithmetic operator (error token is ".87298334620741688517")

    /tmp/tmp8gnx1xwu.sh: line 46: 3.87298334620741688517: syntax error: invalid arithmetic
    operator (error token is ".87298334620741688517")

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local factor=2\n    while [[ $((n % factor)) -eq 0 ]]; do\n      \
    \  n=$((n / factor))\n    done\n    while [[ $((n % factor)) -ne 0 ]]; do\n  \
    \      factor=$((factor + 1))\n    done\n    echo $factor\n}\n\ncandidate() {\n\
    \    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  # Let's start with 2 and go up to the square root of n.\n  for (( i=2;\
    \ i<n; i++ )); do\n    # If n is divisible by i\n    if [[ $(( n % i )) -eq 0\
    \ ]]; then\n      # n is n divided by i. Try again.\n      n=$(( n / i ))\n  \
    \    # Let's start over again with 2.\n      i=1\n    fi\n  done\n  # The last\
    \ i is a prime factor.\n  echo $i\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ is_prime=true\n    local divisor=2\n    local n=$1\n    local largest_factor=$n\n\
    \    while [[ $n -gt $divisor ]]; do\n        while [[ $((n % divisor)) -eq 0\
    \ ]]; do\n            largest_factor=$divisor\n            is_prime=false\n  \
    \          n=$((n / divisor))\n        done\n        divisor=$((divisor + 1))\n\
    \    done\n    echo $largest_factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    i=2\n\
    \    factor=$1\n    while [ $((factor % i)) -eq 0 ]; do\n        factor=$((factor\
    \ / i))\n        echo \"$i\"\n        i=$((i + 1))\n    done\n    echo \"$factor\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ factor\n  local n=${1}\n  for ((factor=2; factor*factor<=n; factor++)); do\n\
    \    while (( n % factor == 0 )); do\n      n=${n%$factor}\n    done\n  done\n\
    \  echo \"${n}\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ -i n=\"$1\"\n    # Factors of an integer i < sqrt(i) are all prime.\n    # Let\
    \ sqrt(i) = f1 < f2 < ... < fn be all the factors of i.\n    # Since f2 > sqrt(i),\
    \ then f2 = f1 * f3, with f3 > sqrt(i).\n    # Since we know all factors < sqrt(i)\
    \ are prime, f1 is prime,\n    # then f2 is not prime.\n    # Therefore, there\
    \ are no prime factors greater than sqrt(i).\n    local -i sqrt_n=$(printf \"\
    %.0f\" $(bc -l <<< \"sqrt($n)\"))\n    for ((i=2; i<=sqrt_n; i++)); do\n     \
    \   if ((n % i == 0)); then\n            ((n /= i))\n            i=1\n       \
    \ fi\n    done\n    echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    # Start\
    \ with the largest possible prime factor.\n    local largest_factor=$1\n    #\
    \ Reduce down until the factor is prime.\n    while true; do\n        if $(factor\
    \ $largest_factor | grep -q $largest_factor); then\n            break\n      \
    \  fi\n        # Reduce by 1.\n        largest_factor=$((largest_factor - 1))\n\
    \    done\n    echo $largest_factor\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    # Find\
    \ all the factors, then filter out all the non-primes\n    local factors=\"$(factor\
    \ \"$1\")\"\n    local primes=\"$(echo \"$factors\" | grep -oE '^[0-9]+: [0-9]+$'\
    \ | cut -d ' ' -f 2 | tr '\\n' ' ')\"\n    # Return the largest\n    echo \"$primes\"\
    \ | sort -n | tail -n 1\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  # local\
    \ variable for our integer argument\n  local n=\"$1\"\n  # local variable for\
    \ our non-prime argument\n  local nop=\"$1\"\n  # start with a factor of 2, the\
    \ first prime number\n  # (2 being a special case, we will cover this first in\
    \ the while loop)\n  local factor=2\n  # until the non-prime argument is reduced\
    \ to 1,\n  # reduce it by dividing by successive prime factors\n  while [[ $nop\
    \ -gt 1 ]]; do\n    # until the non-prime argument is evenly divisible by the\
    \ factor\n    while [[ $(( nop % factor )) -ne 0 ]]; do\n      # increment factor\
    \ by 1, because we don't want to test factors twice\n      factor=$(( factor +\
    \ 1 ))\n    done\n    # divide the non-prime argument by the factor, because it\
    \ is evenly divisible\n    nop=$(( nop / factor ))\n    # the last factor we found\
    \ evenly divides the non-prime argument,\n    # so this must be the largest prime\
    \ factor of the original argument\n    largest_prime_factor=\"$factor\"\n  done\n\
    \  # return the largest prime factor of our argument\n  echo \"$largest_prime_factor\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local i=2\n    while [ \"$i\" -lt \"$n\" ]; do\n        if [ \"\
    $((n % i))\" -eq 0 ]; then\n            # n is divisible by i. Replace n with\
    \ the quotient.\n            n=\"$((n / i))\"\n        else\n            i=\"\
    $((i + 1))\"\n        fi\n    done\n    echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ number=${1}\n    local root=$(sqrt ${number})\n    local max_prime=2\n    for\
    \ ((i=2; i<=${root}; i++)); do\n        if ((${number} % ${i} == 0)); then\n \
    \           local factors=$(factors ${number})\n            local max_factor=0\n\
    \            for factor in ${factors}; do\n                if [[ ${factor} -gt\
    \ ${max_factor} ]]; then\n                    max_factor=${factor}\n         \
    \       fi\n            done\n            max_prime=${max_factor}\n          \
    \  break\n        fi\n    done\n    echo ${max_prime}\n}\n\ncandidate() {\n  \
    \  largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpnnlsq2f7.sh: line 11: sqrt: command not found

    /tmp/tmpnnlsq2f7.sh: line 13: ((: i<=: syntax error: operand expected (error token
    is "<=")

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local i\n  # We only check odd numbers since all even numbers >\
    \ 2 are not prime.\n  for ((i=3; i<=n; i+=2)); do\n    local n_without_factor=$(echo\
    \ \"$n/$i\" | bc)\n    if (( n_without_factor * i == n )); then\n      # if i\
    \ is a factor of n, largest prime factor of n / i is a factor of i\n      largest_prime_factor\
    \ \"$n_without_factor\"\n      return\n    fi\n  done\n  echo \"$n\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local i=2\n  while [[ $((n % i)) -eq 0 ]]; do\n    local n=$((n\
    \ / i))\n    local i=$((i + 1))\n  done\n  if [[ $n -ne 1 ]]; then\n    echo \"\
    $n\"\n  else\n    echo \"$((i - 1))\"\n  fi\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local div=2\n    while (( $n > 1 )); do\n        (( $n % $div == 0\
    \ )) && n=$(( $n / $div )) || div=$(( $div + 1 ))\n    done\n    echo $div\n}\n\
    \ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    # Create\
    \ an array of prime numbers less than or equal to n\n    declare -a prime_array=()\n\
    \    for ((i=2; i <= $1; i++)); do\n        is_prime=true\n        # If the value\
    \ is not prime, break out of the loop\n        for ((j=2; j < i; j++)); do\n \
    \           if [[ $((i % j)) -eq 0 ]]; then\n                is_prime=false\n\
    \                break\n            fi\n        done\n        # Add the prime\
    \ number to the prime array\n        if [[ \"$is_prime\" == true ]]; then\n  \
    \          prime_array+=(\"$i\")\n        fi\n    done\n\n    # Return the largest\
    \ prime number in the prime array\n    for ((k=${#prime_array[@]}-1; k >= 0; k--));\
    \ do\n        if [[ $((n % ${prime_array[k]})) -eq 0 ]]; then\n            echo\
    \ \"${prime_array[k]}\"\n            break\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local factor=2\n    while [[ $((n % factor)) -eq 0 ]]; do\n      \
    \  n=$((n / factor))\n    done\n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ i=$1\n  local root_i=$(python -c \"import math; print(int(math.sqrt($i)))\"\
    )\n  for ((j=2; j<=root_i; j++)); do\n    if [ $((i % j)) -eq 0 ]; then\n    \
    \  largest_prime_factor $((i / j))\n      return\n    fi\n  done\n  echo $i\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ \"$1\" =~ ^[0-9]+$ ]]; then\n    let x=$1\n    for (( div=2; x!=1; div++ ));\
    \ do\n      while [[ $(( x % div )) == 0 ]]; do\n        x=$(( x / div ))\n  \
    \    done\n    done\n    echo \"$(( div - 1 ))\"\n  else\n    return 1\n  fi\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local max=1\n  for ((i=2; i<=$n; i++)); do\n    if (($n % $i == 0));\
    \ then\n      local divisor=$i\n      local n=$((n / divisor))\n      if ((divisor\
    \ > max)); then\n        local max=$divisor\n      fi\n      if ((n == 1)); then\n\
    \        break\n      fi\n    fi\n  done\n  echo $max\n}\n\ncandidate() {\n  \
    \  largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ $1 -lt 4 ]]; then\n    echo $1\n    return\n  fi\n\n  for (( n=${1}/2; n > 1;\
    \ n-- )); do\n    if [[ $(( $1 % $n )) == 0 ]]; then\n      if [[ $(( $n % 2 ))\
    \ != 0 ]]; then\n        factor=$(largest_prime_factor $n)\n        if [[ $factor\
    \ -eq $n ]]; then\n          echo $n\n          return\n        fi\n      fi\n\
    \    fi\n  done\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local a=()\n    local r=()\n    factor $n | while read a r; do\n \
    \       local i=0\n        local j=${#r[@]}\n        for ((i=0; i<j; i++)); do\n\
    \            echo ${r[$i]}\n        done\n    done | sort -n | tail -n 1\n}\n\n\
    candidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [\
    \ $1 -le 1 ]; then\n    return 1\n  fi\n  local n=$1\n  local max_prime_factor=1\n\
    \  local i=2\n  while [ $n -ne 1 ]; do\n    while [ $((n % i)) -eq 0 ]; do\n \
    \     if [ $i -gt $max_prime_factor ]; then\n        max_prime_factor=$i\n   \
    \   fi\n      n=$((n / i))\n    done\n    i=$((i + 1))\n  done\n  echo $max_prime_factor\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ -i n=$1\n    local -i q\n    local -i i\n    for (( i=2; $i<=$n; ++i )); do\n\
    \        if (( $n % $i == 0 )); then\n            (( n /= i ))\n            i=1\n\
    \        fi\n    done\n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1 prime=2\n    while [[ $(( n % prime )) -eq 0 ]]; do\n        n=$(( n /\
    \ prime ))\n    done\n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  # find the smallest prime factor of n\n  local divisor=2\n  while [\
    \ $((n % divisor)) -ne 0 ]; do\n    divisor=$((divisor + 1))\n  done\n  # return\
    \ the largest prime factor of n\n  while [ $((n % divisor)) -eq 0 ]; do\n    n=$((n\
    \ / divisor))\n  done\n  echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local sqrt_n=`echo \"sqrt($n)\" | bc`\n    local factor=2\n    while\
    \ [ $factor -le $sqrt_n ]; do\n        if [ $(($n % $factor)) -eq 0 ]; then\n\
    \            local new_n=$(($n / $factor))\n            echo \"Found factor $factor\"\
    \ >&2\n            factor=$(largest_prime_factor $new_n)\n            break\n\
    \        fi\n        factor=$(($factor + 1))\n    done\n    echo $factor\n}\n\n\
    candidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'Found factor 3

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  declare\
    \ -i n=$1\n  declare -i i=2\n  while (( i * i <= n )); do\n    if (( n % i ==\
    \ 0 )); then\n      n /= i\n    else\n      (( i += 1 ))\n    fi\n  done\n  echo\
    \ \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=18 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=11 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n\n    if [[ $n == 1 ]]; then\n        echo 1\n        return\n   \
    \ fi\n\n    local p=2\n    while (( n > 1 )); do\n        while (( n % p == 0\
    \ )); do\n            n=$(( n / p ))\n        done\n        p=$(( p + 1 ))\n \
    \   done\n\n    echo $(( p - 1 ))\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local i=1\n    while [ $((i*i)) -le $n ]; do\n        if [ $((n%i))\
    \ -eq 0 ]; then\n            n=$((n/i))\n        else\n            i=$((i+1))\n\
    \        fi\n    done\n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=37 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    echo\
    \ \"$1\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020960
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    let\
    \ n=$1\n    if [[ $n -eq 1 ]]; then\n        echo \"1\"\n        return 0\n  \
    \  fi\n    let m=2\n    while [[ $n -ne 1 ]]; do\n        if [[ $((n % m)) -eq\
    \ 0 ]]; then\n            let n=$((n / m))\n        else\n            let m+=1\n\
    \        fi\n    done\n    echo \"$m\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ number=$1\n    local largest_factor=1\n    local factor=2\n    while [ $number\
    \ -gt 1 ]; do\n        while [ $(( number % factor )) -eq 0 ]; do\n          \
    \  largest_factor=$factor\n            number=$(( number / factor ))\n       \
    \ done\n        factor=$(( factor + 1 ))\n    done\n    echo $largest_factor\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  n=$1\n\
    \  if [[ $n =~ ^[0-9]+$ ]]; then\n    # '2' is the smallest prime.\n    # This\
    \ loop exits when $n is either\n    #   1. a prime number (2 is excluded).\n \
    \   #   2. a composite number whose prime factor is greater than 2.\n    #   \
    \   In this case, this prime factor is guaranteed to be\n    #      the largest\
    \ prime factor.\n    for ((i=2; i<n; i++)); do\n      if [[ $((n % i)) -eq 0 ]];\
    \ then\n        n=$((n / i))\n        break\n      fi\n    done\n    echo $n\n\
    \  else\n    echo \"Not an integer\" >&2\n    return 1\n  fi\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  is_integer\
    \ \"$1\" || return $?\n  [[ \"$1\" -le 1 ]] && return 1\n  [[ \"$1\" -eq 2 ]]\
    \ && echo 2 && return 0\n  [[ \"$1\" -eq 3 ]] && echo 3 && return 0\n  [[ \"$1\"\
    \ -eq 5 ]] && echo 5 && return 0\n  if (( $(is_prime \"$1\") )); then\n    echo\
    \ \"$1\"\n    return 0\n  fi\n  for n in $(seq 6 2 $(sqrt \"$1\")); do\n    #\
    \ This checks for an odd number:\n    (( ! n % 2 )) && continue\n    (( ! n %\
    \ 3 )) && continue\n    (( ! n % 5 )) && continue\n    (( $(is_prime \"$n\") ))\
    \ && (( ! $(($1 % n)) )) && echo \"$n\" && return 0\n  done\n  echo \"$1\"\n \
    \ return 0\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1e6c7rx_.sh: line 10: is_integer: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local factor=\"2\"\n    local max_factor=\"$(sqrt \"$n\")\"\n\
    \    local largest_prime_factor\n\n    if is_prime \"$n\"; then\n        printf\
    \ \"$n\"\n        return\n    fi\n\n    while ! is_prime \"$n\"; do\n        while\
    \ [[ $(( n % factor )) -eq 0 ]]; do\n            n=\"$(( n / factor ))\"\n   \
    \         largest_prime_factor=\"$factor\"\n        done\n        (( factor++\
    \ ))\n        if (( factor > max_factor )); then\n            printf \"$n\"\n\
    \            return\n        fi\n    done\n    printf \"$n\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl6nucu4u.sh: line 12: sqrt: command not found

    /tmp/tmpl6nucu4u.sh: line 15: is_prime: command not found

    /tmp/tmpl6nucu4u.sh: line 20: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if ((\
    \ $1 <= 1 )); then\n    echo \"error: input is $1. It must be > 1 and not prime.\"\
    \n    return 1\n  fi\n\n  # Find the first non-trivial divisor.\n  local num=$1\n\
    \  local div=2\n  while (( num % div != 0 )); do\n    div=$(( div + 1 ))\n  done\n\
    \n  # N is either prime or has a prime divisor.\n  if (( num == div )); then\n\
    \    echo \"$num\"\n  else\n    largest_prime_factor \"$(( num / div ))\"\n  fi\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    declare\
    \ -i x=$1\n    declare -i p\n    if [ $x -eq 1 ]; then\n        echo 1\n     \
    \   return\n    fi\n    p=3\n    while true; do\n        if [ $((x % p)) -eq 0\
    \ ]; then\n            if [ $((x / p)) -gt 1 ]; then\n                x=$((x /\
    \ p))\n            else\n                echo $p\n                return\n   \
    \         fi\n        fi\n        if [ $((p * p)) -gt $x ]; then\n           \
    \ echo $x\n            return\n        fi\n        p=$((p + 2))\n    done\n}\n\
    \ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local i=2\n    local s=1\n    local p=0\n    local f=0\n    local\
    \ t=0\n    for (( i=2; i<=n; i++ )); do\n        f=0\n        for (( t=2; t<=i/2;\
    \ t++ )); do\n            s=$(( i % t ))\n            if [[ $s -eq 0 ]]; then\n\
    \                f=1\n                break\n            fi\n        done\n  \
    \      if [[ $f -eq 0 ]]; then\n            s=$(( n % i ))\n            if [[\
    \ $s -eq 0 ]]; then\n                p=$i\n            fi\n        fi\n    done\n\
    \    echo $p\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=71 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=68 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ $1 -le 1 ]]; then\n    echo \"$1\"\n    return\n  fi\n\n  for (( i = 2; i <=\
    \ $1; i++ )); do\n    if [[ $1%$i -eq 0 ]]; then\n      echo \"$(largest_prime_factor\
    \ $(($1/$i)))\"\n      return\n    fi\n  done\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ largest_prime=2\n    local n=$1\n    local max_test=$(echo \"scale=0; sqrt($n)\"\
    \ | bc)\n    while [ $n -gt 1 ]; do\n        while [ $(($n % $largest_prime))\
    \ -eq 0 ]; do\n            n=$(($n / $largest_prime))\n        done\n        largest_prime=$(($largest_prime\
    \ + 1))\n        while [ $n -gt 1 ] && [ $largest_prime -le $max_test ] && \\\n\
    \            [ $(($n % $largest_prime)) -ne 0 ]; do\n            largest_prime=$(($largest_prime\
    \ + 1))\n        done\n    done\n    echo $largest_prime\n}\n\ncandidate() {\n\
    \    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    echo\
    \ \"${1}\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local n_orig=$n\n    local pf=2\n    local a=2\n    while ((n > 1));\
    \ do\n        while ((n % a == 0)); do\n            if ((pf < a)); then\n    \
    \            pf=$a\n            fi\n            ((n = n / a))\n        done\n\
    \        ((a = a + 1))\n    done\n    echo $pf\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  echo\
    \ \"$(factor \"$1\" | tail -n1 | cut -d: -f2 | tr -d ' ')\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local largest=2\n    for i in $(primes \"$n\"); do\n        if [ \"\
    $(($n % $i))\" -eq 0 ]; then\n            largest=$i\n        fi\n    done\n \
    \   echo \"$largest\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpe_93pjol.sh: line 12: primes: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local i=2\n  local f=0\n  local c=0\n  local p=0\n  local -a primes\n\
    \  (( n <= 1 )) && { echo \"error: n ($n) must be greater than 1\"; return 1;\
    \ }\n  # check if n is a prime\n  for (( i=2; i<n; i++ )); do\n    (( n % i ==\
    \ 0 )) && { c=1; break; }\n  done\n  (( c > 0 )) || { echo \"$n\"; return 0; }\n\
    \  # return the largest prime factor of n\n  (( n % 2 == 0 )) && { n=$(( n/2 ));\
    \ f=2; }\n  (( n % 3 == 0 )) && { n=$(( n/3 )); f=3; }\n  for (( i=5; i<=n; i+=6\
    \ )); do\n    (( n % i == 0 )) && { n=$(( n/i )); f=$i; continue; }\n    (( n\
    \ % (i+2) == 0 )) && { n=$(( n/(i+2) )); f=$(( i+2 )); }\n  done\n  echo \"$f\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    for ((i=2; i<=n; i++)); do\n        if ((n % i == 0)); then\n\
    \            prime_factor=\"$i\"\n            until ((n % i != 0)); do\n     \
    \           n=$((n / i))\n            done\n        fi\n    done\n    echo \"\
    $prime_factor\"\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 2
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ $1 -le 1 ]]; then\n    echo \"Error: expected input to be an integer greater\
    \ than 1\" >&2\n    exit 1\n  fi\n\n  biggest_prime_factor=1\n  for (( i=2; i<=$1;\
    \ i++ )); do\n    if [[ $1 % $i -eq 0 ]]; then\n      is_prime=1\n      for ((\
    \ j=2; j<$i; j++ )); do\n        if [[ $i % $j -eq 0 ]]; then\n          is_prime=0\n\
    \          break\n        fi\n      done\n      if [[ $is_prime -eq 1 ]]; then\n\
    \        biggest_prime_factor=$i\n      fi\n    fi\n  done\n\n  echo $biggest_prime_factor\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphyeahhsg.sh: line 17: conditional binary operator expected

    /tmp/tmphyeahhsg.sh: line 17: syntax error near `%''

    /tmp/tmphyeahhsg.sh: line 17: `    if [[ $1 % $i -eq 0 ]]; then''

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local p=2\n  while [[ $n -gt 1 ]]; do\n    if [[ $((n % p)) -eq 0 ]];\
    \ then\n      n=$((n / p))\n    else\n      p=$((p + 1))\n    fi\n  done\n  echo\
    \ $p\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ max=0\n  for factor in $(prime_factors \"$1\"); do\n    if ((factor > max));\
    \ then\n      max=\"$factor\"\n    fi\n  done\n  echo \"$max\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpie09xb8s.sh: line 11: prime_factors: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local factor=2\n  while [ $(( n % factor )) -eq 0 ]; do\n    n=$((\
    \ n / factor ))\n  done\n  factor=3\n  local max_factor=sqrt $(( n ))\n  while\
    \ [ $factor -le $max_factor ]; do\n    while [ $(( n % factor )) -eq 0 ]; do\n\
    \      n=$(( n / factor ))\n      max_factor=sqrt $(( n ))\n    done\n    factor=$((\
    \ factor + 2 ))\n  done\n  echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfz7rdowc.sh: line 16: local: `15'': not a valid identifier

    /tmp/tmpfz7rdowc.sh: line 17: [: sqrt: integer expression expected

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 2
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    declare\
    \ -i i\n    declare -i n\n    n=$1\n    for ((i=2; i*i<=n; i++)); do\n       \
    \ while [[ n % i -eq 0 ]]; do\n            n /= i\n        done\n    done\n  \
    \  echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpervo7322.sh: line 14: conditional binary operator expected

    /tmp/tmpervo7322.sh: line 14: syntax error near `%''

    /tmp/tmpervo7322.sh: line 14: `        while [[ n % i -eq 0 ]]; do''

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    divisor=2\n\
    \    # while n > 1, increment divisor until n % divisor == 0\n    while [[ $1\
    \ -gt 1 ]]; do\n        # (while n mod divisor is not 0, increment divisor)\n\
    \        while [[ $(( $1 % $divisor )) -ne 0 ]]; do\n            ((divisor++))\n\
    \        done\n        # n /= divisor\n        ((1=$1/$divisor))\n    done\n \
    \   echo $divisor\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=56 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=54 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ i=\"2\"\n  local result=\"$1\"\n  while (( result > i*i )); do\n    if (( result\
    \ % i == 0 )); then\n      result=$(( result / i ))\n    else\n      (( i++ ))\n\
    \    fi\n  done\n  echo \"$result\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if !\
    \ echo \"$1\" | grep -qP '^\\d+$'; then\n    echo \"ERROR: Argument to largest_prime_factor\
    \ should be a positive integer. Got \\\"$1\\\"\" >&2\n    return 1\n  fi\n  local\
    \ n\n  n=\"$1\"\n  local i\n  i=2\n  while [ \"$i\" -lt \"$n\" ]; do\n    # If\
    \ i divides n, reduce n by i as many times as possible and start over.\n    if\
    \ [ \"$((n % i))\" -eq 0 ]; then\n      while [ \"$((n % i))\" -eq 0 ]; do\n \
    \       n=\"$((n / i))\"\n      done\n      i=2\n    else\n      i=\"$((i + 1))\"\
    \n    fi\n  done\n  echo \"$n\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [\
    \ $1 -lt 1 ]; then\n    echo \"Error: 1 or greater\"\n    return 1\n  fi\n  local\
    \ n=$1\n  local x=2\n  while [ $n -gt 1 ]; do\n    while [ $((n % x)) -eq 0 ];\
    \ do\n      n=$((n / x))\n    done\n    if [ $x -eq 2 ]; then\n      x=$((x +\
    \ 1))\n    else\n      x=$((x + 2))\n    fi\n  done\n  echo $x\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    max=1\n\
    \    n=$1\n    # factor small primes\n    while [ \"$((n % 2))\" -eq 0 ]; do\n\
    \        n=$((n / 2))\n        max=2\n    done\n    while [ \"$((n % 3))\" -eq\
    \ 0 ]; do\n        n=$((n / 3))\n        max=3\n    done\n    i=5\n    # factor\
    \ primes > 3\n    while [ \"$i\" -le \"$((n / 3))\" ]; do\n        while [ \"\
    $((n % i))\" -eq 0 ]; do\n            n=$((n / i))\n            max=$i\n     \
    \   done\n        i=$((i + 2))\n        while [ \"$((n % i))\" -eq 0 ]; do\n \
    \           n=$((n / i))\n            max=$i\n        done\n        i=$((i + 4))\n\
    \    done\n    # n must be a prime\n    if [ \"$n\" -gt \"$max\" ]; then\n   \
    \     max=$n\n    fi\n    echo \"$max\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    # Checks if n is a factor of i and i is prime, from 2 to n\n    for\
    \ ((i=2; i < n; i++)); do\n        if [[ $((n % i)) -eq 0 ]] && $(is_prime \"\
    $i\"); then\n            echo \"$i\"\n            return\n        fi\n    done\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpns0a_k1z.sh: line 13: is_prime: command not found

    /tmp/tmpns0a_k1z.sh: line 13: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  is_prime()\
    \ {\n    local n=$1\n    if (( n < 2 )); then\n      echo \"false\"\n    elif\
    \ (( n == 2 )); then\n      echo \"true\"\n    elif (( n % 2 == 0 )); then\n \
    \     echo \"false\"\n    else\n      local i\n      for (( i=3; i<n; i+=2 ));\
    \ do\n        if (( n % i == 0 )); then\n          echo \"false\"\n          return\n\
    \        fi\n      done\n      echo \"true\"\n    fi\n  }\n\n  local n=$1\n  local\
    \ divisor=2\n  while (( divisor * divisor <= n )); do\n    if (( n % divisor ==\
    \ 0 )) && $(is_prime \"$divisor\"); then\n      local largest_prime_factor=$divisor\n\
    \    fi\n    (( divisor++ ))\n  done\n  echo \"$largest_prime_factor\"\n}\n\n\
    candidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ m=$1\n  local f=2\n  while (( $m > 1 )); do\n    while (( $m % $f == 0 )); do\n\
    \      m=$(( m / f ))\n    done\n    f=$(( f + 1 ))\n  done\n  echo $(( f - 1\
    \ ))\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local i=2\n    while [ $((n%i)) -eq 0 ]; do\n        n=$((n/i))\n\
    \    done\n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  echo\
    \ $(factor $1 | cut -d\" \" -f2 | sort -nr | head -n1)\n}\n\ncandidate() {\n \
    \   largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local d=$(floor_sqrt \"$n\")\n    while [[ \"$d\" -gt 1 ]]; do\n\
    \        if [[ $((n % d)) -eq 0 ]]; then\n            if $(is_prime \"$d\"); then\n\
    \                printf '%s' \"$d\"\n                return 0\n            fi\n\
    \        fi\n        d=$((d - 1))\n    done\n    printf '%s' \"$n\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmponliv1si.sh: line 11: floor_sqrt: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local i=2\n  while [[ $((n % i)) -eq 0 ]]; do\n    n=$((n / i))\n  \
    \  i=$((i + 1))\n  done\n  echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  n=$1\n\
    \n  # Handle special cases\n  if [ $n -eq 0 ]; then\n    echo 0\n    return 0\n\
    \  fi\n  if [ $n -eq 1 ]; then\n    echo 1\n    return 0\n  fi\n\n  # Remove all\
    \ factors of 2\n  while [ $(( n % 2 )) -eq 0 ]; do\n    n=$(( n / 2 ))\n  done\n\
    \n  # n is now odd. Compute largest factor.\n  largest=1\n  f=3\n  while [ $f\
    \ -le $(( n ** 0.5 )) ]; do\n    if [ $(( n % f )) -eq 0 ]; then\n      # f is\
    \ a factor of n. Find all other factors.\n      largest=$f\n      while [ $((\
    \ n % f )) -eq 0 ]; do\n        n=$(( n / f ))\n      done\n    fi\n    f=$((\
    \ f + 2 ))\n  done\n\n  # If n is non-1, it's a prime factor.\n  if [ $n -ne 1\
    \ ]; then\n    largest=$n\n  fi\n\n  echo $largest\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8gwyt52t.sh: line 30: n ** 0.5 : syntax error: invalid arithmetic
    operator (error token is ".5 ")

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local i=2\n    while (( $n % $i != 0 )); do\n        (( ++i ))\n \
    \   done\n    if (( $n == $i )); then\n        echo $n\n    else\n        largest_prime_factor\
    \ $(( $n / $i ))\n    fi\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    n=$1\n\
    \    factor=2\n    while [ $factor -lt $n ]; do\n        # echo \"n: $n factor:\
    \ $factor\"\n        if [ $(is_integer \"$n/$factor\") == true ]; then\n     \
    \       n=$(bc <<< \"scale=0; $n/$factor\")\n        else\n            factor=$(($factor\
    \ + 1))\n        fi\n    done\n    echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    /tmp/tmpcqwkrty0.sh: line 14: is_integer: command not found

    /tmp/tmpcqwkrty0.sh: line 14: [: ==: unary operator expected

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ _n=$1\n  local _i=2\n  local _max=$_n\n  local _lpf=$_i\n  local _last_lpf=$_lpf\n\
    \  while [ $_i -lt $_max ]; do\n    while [ $(($_n % $_i)) -eq 0 ]; do\n     \
    \ _last_lpf=$_lpf\n      _lpf=$_i\n      _n=$(($_n / $_i))\n      _max=$_n\n \
    \   done\n    _i=$(($_i + 1))\n  done\n  if [ $_lpf -eq $_last_lpf ]; then\n \
    \   echo $_lpf\n  else\n    echo $_n\n  fi\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    n=\"\
    $1\"\n    # A single number\n    [ \"$#\" -eq 1 ] || return 1\n    # A number\
    \ > 1\n    ! (( \"$n\" < 2 )) || return 1\n    # Not a prime number\n    ! is_prime\
    \ \"$n\" || return 1\n\n    # Start with the smallest prime factor, 2.\n    current_largest_prime_factor=2\n\
    \    # While n is greater than the current prime factor...\n    while (( \"$n\"\
    \ > \"$current_largest_prime_factor\" )); do\n        # If n is divisible by the\
    \ current prime factor...\n        if (( ! (\"$n\" % \"$current_largest_prime_factor\"\
    ) )); then\n            # Divide n by that number.\n            n=$(( \"$n\" /\
    \ \"$current_largest_prime_factor\" ))\n            # If the quotient is a prime,\
    \ update the current largest prime factor.\n            if is_prime \"$n\"; then\n\
    \                current_largest_prime_factor=\"$n\"\n            fi\n       \
    \ else\n            # Increment the current prime factor.\n            (( current_largest_prime_factor++\
    \ ))\n        fi\n    done\n    echo \"$current_largest_prime_factor\"\n}\n\n\
    candidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmpfo4g3c7b.sh: line 16: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 16: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 16: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 16: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 16: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    /tmp/tmpfo4g3c7b.sh: line 27: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local primes=\"2\"\n  local num=3\n  while [ $n -gt 1 ]; do\n    while\
    \ [ $((n % num)) -eq 0 ]; do\n      n=$((n / num))\n      primes=\"$primes $num\"\
    \n    done\n    num=$((num + 2))\n  done\n  echo $primes | tr ' ' '\\n' | sort\
    \ -rn | head -n 1\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=55 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=41 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  n=$1\n\
    \  for i in {2..10}\n  do\n    while [[ $((n % i)) -eq 0 ]]\n    do\n      n=$((n\
    \ / i))\n    done\n  done\n  echo $n\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local factors=\"\"\n    while [[ $n -gt 1 ]]; do\n        let\
    \ prime=0\n        let factor=2\n        while [[ $prime -eq 0 ]]; do\n      \
    \      let \"factors = $n % $factor\"\n            if [[ $factors -eq 0 ]]; then\n\
    \                let \"n = $n / $factor\"\n                let prime=1\n     \
    \       else\n                let \"factor += 1\"\n            fi\n        done\n\
    \    done\n    echo $factor\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1 i=2\n\n  while [ $i -lt $n ]; do\n    while [ $((n % i)) -eq 0 ]; do\n\
    \      n=$((n / i))\n    done\n    i=$((i + 1))\n  done\n\n  echo $n\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  # Build\
    \ a list of primes starting at 2, with head=$2 and tail=$3.\n  # Note: The list\
    \ is also backwards, so head=largest prime and tail=2.\n  build_prime_list() {\n\
    \    if [ $1 -eq 1 ]; then\n      echo $2\n    else\n      if [ $(($1 % $2)) -eq\
    \ 0 ]; then\n        build_prime_list $(($1 / $2)) $2 \"$2 $3\"\n      else\n\
    \        build_prime_list $1 $(($2 + 1)) \"$3\"\n      fi\n    fi\n  }\n\n  #\
    \ Get the last element of a string of values separated by spaces.\n  last_in_list()\
    \ {\n    echo $1 | awk '{print $NF}'\n  }\n\n  # Get the first element of a string\
    \ of values separated by spaces.\n  first_in_list() {\n    echo $1 | awk '{print\
    \ $1}'\n  }\n\n  # Recursively get the largest prime factor.\n  recurse_largest_prime_factor()\
    \ {\n    local p=$(first_in_list $1)\n    local rest=$(last_in_list $1)\n    if\
    \ [ -z \"$rest\" ]; then\n      echo $p\n    else\n      recurse_largest_prime_factor\
    \ $rest\n    fi\n  }\n\n  local primes=$(build_prime_list $1 2)\n  recurse_largest_prime_factor\
    \ $primes\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\"\
    ) = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\"\
    ) = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=69 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=51 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ integer=\"$1\"\n    local i=2\n    local result\n    while [[ \"${integer}\"\
    \ -gt 1 ]]; do\n        if [[ \"${integer}\" -eq \"${i}\" ]]; then\n         \
    \   result=\"${integer}\"\n            break\n        elif [[ \"${integer}\"%\"\
    ${i}\" -eq 0 ]]; then\n            integer=$((integer/i))\n        else\n    \
    \        i=$((i+1))\n        fi\n    done\n    echo \"${result}\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: -1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=\"$1\"\n  local divisor=\"$n\"\n  while ! is_prime \"$divisor\"; do\n    divisor=$(($divisor\
    \ - 1))\n  done\n  echo \"$divisor\"\n}\n\ncandidate() {\n    largest_prime_factor\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n \
    \   [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n\
    \    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\"\
    \ ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=32 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=19 encoding='utf-8'>
  timestamp: 1660020966
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    assert_integer\
    \ $1\n    local n=$1\n    local f=2\n    local largest=2\n    while [ $n -gt 1\
    \ ]; do\n        if [ $((n % f)) -eq 0 ]; then\n            n=$((n / f))\n   \
    \         largest=$f\n        else\n            f=$((f + 1))\n        fi\n   \
    \ done\n    echo $largest\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: '/tmp/tmp040xk7i6.sh: line 10: assert_integer: command not found

    /tmp/tmp040xk7i6.sh: line 10: assert_integer: command not found

    /tmp/tmp040xk7i6.sh: line 10: assert_integer: command not found

    /tmp/tmp040xk7i6.sh: line 10: assert_integer: command not found

    /tmp/tmp040xk7i6.sh: line 10: assert_integer: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    if\
    \ [[ $1 -le 1 ]]; then\n        echo 0\n        return 0\n    fi\n\n    # find\
    \ the largest divisor up to sqrt(n)\n    largest_divisor=$(\n        for i in\
    \ $(seq 2 $(bc <<< \"sqrt($1)\")); do\n            if [[ $(( $1 % $i )) -eq 0\
    \ ]]; then\n                echo $i\n            fi\n        done | sort -nr |\
    \ head -n 1\n    )\n\n    # largest_divisor is the largest prime factor if it\
    \ is prime\n    if [[ $(is_prime \"$largest_divisor\") -eq 1 ]]; then\n      \
    \  echo \"$largest_divisor\"\n        return 0\n    fi\n\n    # otherwise, continue\
    \ with the quotient\n    largest_prime_factor \"$(( $1 / $largest_divisor ))\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe64ntu4o.sh: line 25: is_prime: command not found

    /tmp/tmpe64ntu4o.sh: line 25: is_prime: command not found

    /tmp/tmpe64ntu4o.sh: line 31: 5 /  : syntax error: operand expected (error token
    is "/  ")

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=${1}\n  local p=2\n  while (( p * p <= n )); do\n    while (( n % p == 0 ));\
    \ do\n      n=$(( n / p ))\n    done\n    p=$(( p + 1 ))\n  done\n  echo \"${n}\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    n=\"\
    $1\"\n    # factor out the smallest prime until n is 1\n    until [[ \"$n\" -eq\
    \ 1 ]]; do\n        # find the smallest prime that divides n\n        p=$(smallest_prime_factor\
    \ \"$n\")\n        # factor out p\n        n=$((n / p))\n    done\n    # the last\
    \ prime that divides n is the largest prime factor\n    echo \"$p\"\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1e5bxnav.sh: line 14: smallest_prime_factor: command not found

    /tmp/tmp1e5bxnav.sh: line 16: n / p: division by 0 (error token is "p")

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  if [[ $n -eq 1 ]]; then\n    echo 1\n    return\n  fi\n  local i\n \
    \ for ((i=2; i<=n/2; i++)); do\n    if [[ $(( n % i )) -eq 0 ]]; then\n      echo\
    \ $(largest_prime_factor $(( n / i )))\n      return\n    fi\n  done\n  echo $n\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=${1:?Missing integer}\n  local largest=2\n  # Skip even numbers\n  for ((n=n;\
    \ n>largest; n-=2)); do\n    if ((n % largest == 0)); then\n      # n is composite\
    \ and has a factor less than largest.\n      largest=2\n    else\n      # n is\
    \ prime or has a factor greater than largest.\n      ((largest++))\n    fi\n \
    \ done\n  echo $largest\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=\"$1\"\n    local factor\n    for ((factor=2; factor<n; factor++)); do\n \
    \       if ((n % factor == 0)); then\n            largest_prime_factor \"$((n\
    \ / factor))\"\n            return\n        fi\n    done\n    echo \"$n\"\n}\n\
    \ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    n=$1\n\
    \    while (( ( n % 2 ) == 0 )); do\n        n=$((n/2))\n    done\n    if (( n\
    \ < 2 )); then\n        echo \"2\"\n    else\n        for (( i=3; i*i<=n; i+=2\
    \ )); do\n            while (( ( n % i ) == 0 )); do\n                n=$((n/i))\n\
    \            done\n        done\n        echo \"$n\"\n    fi\n}\n\ncandidate()\
    \ {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n    [[ $(candidate\
    \ \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n    [[ $(candidate\
    \ \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local\
    \ n=$1\n    local i=$((n/2))\n    while [[ $i -gt 1 ]]; do\n        if (( n %\
    \ i == 0 )); then\n            if is_prime $i; then\n                echo $i\n\
    \                return\n            fi\n        fi\n        i=$((i-1))\n    done\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp15jysfu2.sh: line 14: is_prime: command not found

    /tmp/tmp15jysfu2.sh: line 14: is_prime: command not found

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ factor=\"$1\"\n\n  # Test against 2 and odd numbers up to sqrt(factor)\n  for\
    \ (( i=2; i<=factor**0.5; i+=1 )); do\n    # If i is a factor of factor, check\
    \ if it is prime\n    if (( factor % i == 0 )); then\n      local prime=\"$(largest_prime_factor\
    \ \"$i\")\"\n      # If i is prime, update factor\n      if [[ \"$prime\" == \"\
    $i\" ]]; then\n        factor=\"$i\"\n      fi\n    fi\n  done\n\n  echo \"$factor\"\
    \n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp71hkntuw.sh: line 13: ((: i<=factor**0.5: syntax error: invalid
    arithmetic operator (error token is ".5")

    '
  stdout: ''
  timestamp: 1660020961
- exit_code: 1
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  if [[\
    \ $1 -eq 1 ]]; then\n    echo 1\n    return\n  fi\n\n  local -i n=$1\n  local\
    \ -i i=2\n  while [[ $i -lt $n ]]; do\n    while [[ $((n % i)) -eq 0 ]]; do\n\
    \      local -i n=$((n / i))\n    done\n    local -i i=$((i + 1))\n  done\n  echo\
    \ $n\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\"\
    \ ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"\
    11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local\
    \ n=$1\n  local sqrt_n=$(echo \"sqrt($n)\" | bc)\n  local p=2\n  local factors=()\n\
    \  while [ $p -le $sqrt_n ]; do\n    if [ $((n % p)) -eq 0 ]; then\n      factors+=($p)\n\
    \      n=$((n / p))\n      sqrt_n=$(echo \"sqrt($n)\" | bc)\n    else\n      ((p++))\n\
    \    fi\n  done\n  if [ $n -gt 1 ]; then\n    factors+=($n)\n  fi\n  echo ${factors[-1]}\n\
    }\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
    \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
    \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
- exit_code: 0
  program: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
    \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  declare\
    \ -i x=\"$1\"\n  declare -i i=2\n  while [ $i -lt $x ]; do\n    if [ $(($x % $i))\
    \ == 0 ]; then\n      x=$(($x / $i))\n      i=2\n    else\n      i=$(($i + 1))\n\
    \    fi\n  done\n  echo $x\n}\n\ncandidate() {\n    largest_prime_factor \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate\
    \ \"27\") = \"3\" ]]\n    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate\
    \ \"330\") = \"11\" ]]\n    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660020961
