name: HumanEval_92_any_int
language: sh
prompt: "#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if\
  \ one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\
  # Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"\
  7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int\
  \ \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"\
  false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating\
  \ point\nany_int() {\n"
tests: "}\n\ncandidate() {\n    any_int \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"2\" \"3\" \"1\") = \"true\" ]]\n    [[ $(candidate \"2.5\" \"2\"\
  \ \"3\") = \"false\" ]]\n    [[ $(candidate \"1.5\" \"5\" \"3.5\") = \"false\" ]]\n\
  \    [[ $(candidate \"2\" \"6\" \"2\") = \"false\" ]]\n    [[ $(candidate \"4\"\
  \ \"2\" \"2\") = \"true\" ]]\n    [[ $(candidate \"2.2\" \"2.2\" \"2.2\") = \"false\"\
  \ ]]\n    [[ $(candidate \"-4\" \"6\" \"2\") = \"true\" ]]\n    [[ $(candidate \"\
  2\" \"1\" \"1\") = \"true\" ]]\n    [[ $(candidate \"3\" \"4\" \"7\") = \"true\"\
  \ ]]\n    [[ $(candidate \"3.0\" \"4\" \"7\") = \"false\" ]]\n}\n\nrun_test"
completions: ["  local retval=false\n  # one of the numbers is equal to the sum of\
    \ the other two\n  if [[ $(echo \"${1} == ${2} + ${3}\" | bc) -eq 1 ]]; then\n\
    \    retval=true\n  elif [[ $(echo \"${2} == ${1} + ${3}\" | bc) -eq 1 ]]; then\n\
    \    retval=true\n  elif [[ $(echo \"${3} == ${1} + ${2}\" | bc) -eq 1 ]]; then\n\
    \    retval=true\n  fi\n  # all numbers are integers\n  if [[ ${retval} == true\
    \ ]]; then\n    if [[ \"${1}\" == *.* ]]; then\n      retval=false\n    elif [[\
    \ \"${2}\" == *.* ]]; then\n      retval=false\n    elif [[ \"${3}\" == *.* ]];\
    \ then\n      retval=false\n    fi\n  fi\n  echo \"${retval}\"", "    # Check\
    \ if all arguments are integers.\n    if ! [[ \"$1\" =~ ^-?[0-9]+$ ]] || ! [[\
    \ \"$2\" =~ ^-?[0-9]+$ ]] || ! [[ \"$3\" =~ ^-?[0-9]+$ ]]; then\n        echo\
    \ \"false\"\n        return 1\n    fi\n\n    # Check if any of the arguments equals\
    \ the sum of the other two arguments.\n    if [[ $1 -eq $2 + $3 ]] || [[ $2 -eq\
    \ $1 + $3 ]] || [[ $3 -eq $1 + $2 ]]; then\n        echo \"true\"\n        return\
    \ 0\n    fi\n\n    echo \"false\"\n    return 1", "  # Hint: You may use the command\
    \ expr\n  if [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[ \"$3\"\
    \ =~ ^[0-9]+$ ]]; then\n    # Put your code below\n    if [ $(( $1 + $2 )) -eq\
    \ $3 ] || [ $(( $1 + $3 )) -eq $2 ] || [ $(( $2 + $3 )) -eq $1 ]; then\n     \
    \ echo \"true\"\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\
    \n  fi", "  if [[ ! $1 =~ ^-?[0-9]+$ ]]; then return 1; fi\n  if [[ ! $2 =~ ^-?[0-9]+$\
    \ ]]; then return 1; fi\n  if [[ ! $3 =~ ^-?[0-9]+$ ]]; then return 1; fi\n  if\
    \ [[ $1 -eq $2 + $3 ]]; then return 0; fi\n  if [[ $2 -eq $1 + $3 ]]; then return\
    \ 0; fi\n  if [[ $3 -eq $1 + $2 ]]; then return 0; fi\n  return 1", "  if ! [[\
    \ \"$1\" =~ ^-?[0-9]+$ ]]; then\n    echo \"false\"\n    return 0\n  fi\n  if\
    \ ! [[ \"$2\" =~ ^-?[0-9]+$ ]]; then\n    echo \"false\"\n    return 0\n  fi\n\
    \  if ! [[ \"$3\" =~ ^-?[0-9]+$ ]]; then\n    echo \"false\"\n    return 0\n \
    \ fi\n  if [ \"$1\" -eq \"$(($2 + $3))\" ]; then\n    echo \"true\"\n    return\
    \ 0\n  fi\n  if [ \"$2\" -eq \"$(($1 + $3))\" ]; then\n    echo \"true\"\n   \
    \ return 0\n  fi\n  if [ \"$3\" -eq \"$(($1 + $2))\" ]; then\n    echo \"true\"\
    \n    return 0\n  fi\n  echo \"false\"", "    # Write your solution here\n   \
    \ return 0", "    if [[ $(bc <<< \"$1==$2+$3\" | tr -d '\\n') == \"1\" ]]; then\n\
    \        echo true\n    elif [[ $(bc <<< \"$2==$1+$3\" | tr -d '\\n') == \"1\"\
    \ ]]; then\n        echo true\n    elif [[ $(bc <<< \"$3==$1+$2\" | tr -d '\\\
    n') == \"1\" ]]; then\n        echo true\n    else\n        echo false\n    fi",
  "  expr \"$1\" : '.*[.]' > /dev/null\n  if [ $? == 0 ]; then\n    echo \"false\"\
    \n    return\n  fi\n  expr \"$2\" : '.*[.]' > /dev/null\n  if [ $? == 0 ]; then\n\
    \    echo \"false\"\n    return\n  fi\n  expr \"$3\" : '.*[.]' > /dev/null\n \
    \ if [ $? == 0 ]; then\n    echo \"false\"\n    return\n  fi\n  if [ $(($1 + $2))\
    \ == $3 ]; then\n    echo \"true\"\n    return\n  fi\n  if [ $(($1 + $3)) == $2\
    \ ]; then\n    echo \"true\"\n    return\n  fi\n  if [ $(($2 + $3)) == $1 ]; then\n\
    \    echo \"true\"\n    return\n  fi\n  echo \"false\"", "  if ! is_number \"\
    $1\" || ! is_number \"$2\" || ! is_number \"$3\"; then\n    echo \"false\"\n \
    \   return\n  fi\n  # If all values are integers, use the integer comparison operators\n\
    \  if [[ \"$1\" == *.* ]] || [[ \"$2\" == *.* ]] || [[ \"$3\" == *.* ]]; then\n\
    \    sum=$(bc <<< \"$2 + $3\")\n    if (( $(bc <<< \"$1 == $sum\") )); then\n\
    \      echo \"true\"\n      return\n    fi\n    sum=$(bc <<< \"$1 + $3\")\n  \
    \  if (( $(bc <<< \"$2 == $sum\") )); then\n      echo \"true\"\n      return\n\
    \    fi\n    sum=$(bc <<< \"$1 + $2\")\n    if (( $(bc <<< \"$3 == $sum\") ));\
    \ then\n      echo \"true\"\n      return\n    fi\n  else\n    if [[ \"$1\" -eq\
    \ $(($2 + $3)) ]]; then\n      echo \"true\"\n      return\n    fi\n    if [[\
    \ \"$2\" -eq $(($1 + $3)) ]]; then\n      echo \"true\"\n      return\n    fi\n\
    \    if [[ \"$3\" -eq $(($1 + $2)) ]]; then\n      echo \"true\"\n      return\n\
    \    fi\n  fi\n  echo \"false\"", "  if [ $# -ne 3 ]; then\n    return 1\n  fi\n\
    \  for i in \"$@\"; do\n    if ! [[ $i =~ ^-?[0-9]+$ ]]; then\n      echo \"false\"\
    \n      return 0\n    fi\n  done\n  if [ \"$1\" -eq \"$(($2 + $3))\" ] || [ \"\
    $2\" -eq \"$(($1 + $3))\" ] || [ \"$3\" -eq \"$(($1 + $2))\" ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "  # Verifies if the numbers are\
    \ integers or not\n  [[ \"$1\" =~ ^[0-9]+$ ]] && [[ \"$2\" =~ ^[0-9]+$ ]] && [[\
    \ \"$3\" =~ ^[0-9]+$ ]] && [[ $(($1 + $2)) == $3 ]] && echo \"true\" || echo \"\
    false\"", "    if (($(echo \"$1\" | grep -q \"^[0-9]*\\.?[0-9]*$\" && echo $?)\
    \ && $(echo \"$2\" | grep -q \"^[0-9]*\\.?[0-9]*$\" && echo $?) && $(echo \"$3\"\
    \ | grep -q \"^[0-9]*\\.?[0-9]*$\" && echo $?))); then\n        if (($(echo \"\
    $1\" | grep -q \"^[0-9]*$\" && echo $?) && $(echo \"$2\" | grep -q \"^[0-9]*$\"\
    \ && echo $?) && $(echo \"$3\" | grep -q \"^[0-9]*$\" && echo $?))); then\n  \
    \          echo \"true\"\n        else\n            echo \"false\"\n        fi\n\
    \    else\n        echo \"false\"\n    fi", "    a=$1\n    b=$2\n    c=$3\n  \
    \  # check if all arguments are integers\n    for var in a b c\n    do\n     \
    \   # a variable is an integer if:\n        # 1. string length of variable is\
    \ same as string length of variable without floating point\n        # 2. variable\
    \ without floating point is not null\n        if [ ${#var} != ${#var%.*} ] ||\
    \ [ \"${var%.*}\" != \"\" ]\n        then\n            echo \"false\"\n      \
    \      return\n        fi\n    done\n    # if a + b = c, or b + c = a, or a +\
    \ c = b, return true\n    if [ $(($a + $b)) == $c ] || [ $(($b + $c)) == $a ]\
    \ || [ $(($a + $c)) == $b ]\n    then\n        echo \"true\"\n    else\n     \
    \   echo \"false\"\n    fi", "  if [[ $1 -eq $(($2 + $3)) ]] || [[ $2 -eq $(($1\
    \ + $3)) ]] || [[ $3 -eq $(($1 + $2)) ]]; then\n    echo \"true\"\n  else\n  \
    \  echo \"false\"\n  fi", "\t# test the input data\n\tif [[ $(echo \"$1 $2 $3\"\
    \ | awk '{print (($1 == $2 + $3) || ($2 == $1 + $3) || ($3 == $1 + $2))}') ==\
    \ \"1\" ]]; then\n\t\t# test if they are integers\n\t\tif [[ $(echo \"$1 $2 $3\"\
    \ | awk '{print (($1 == int($1)) && ($2 == int($2)) && ($3 == int($3)))}') ==\
    \ \"1\" ]]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\
    \telse\n\t\techo \"false\"\n\tfi", "    local isint='^[0-9]+$'\n    if [[ $1 =~\
    \ $isint && $2 =~ $isint && $3 =~ $isint ]]; then\n        if [ $1 -eq $(($2 +\
    \ $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n       \
    \     echo \"true\"\n        else\n            echo \"false\"\n        fi\n  \
    \  else\n        echo \"false\"\n    fi", "  # The if statements inside of this\
    \ function are incorrect and do not work.\n  # Can you fix them to make this function\
    \ behave as described above?\n  if [ -z \"$1\" ] || [ -z \"$2\" ] || [ -z \"$3\"\
    \ ]; then\n    echo \"false\"\n  elif [ $1 -eq $2 ] || [ $1 -eq $3 ] || [ $2 -eq\
    \ $3 ]; then\n    echo \"false\"\n  elif [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1\
    \ + $3)) ] || [ $3 -eq $(($1 + $2)) ]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    if [[ ! $1 =~ ^-?[0-9]+$ ]]; then\n        return \"\
    false\"\n    fi\n    if [[ ! $2 =~ ^-?[0-9]+$ ]]; then\n        return \"false\"\
    \n    fi\n    if [[ ! $3 =~ ^-?[0-9]+$ ]]; then\n        return \"false\"\n  \
    \  fi\n    if [ $1 -eq $(($2 + $3)) ] || [ $2 -eq $(($1 + $3)) ] || [ $3 -eq $(($1\
    \ + $2)) ]; then\n        return \"true\"\n    else\n        return \"false\"\n\
    \    fi", "  # Check if any of the parameters are floating point\n  if [ -z \"\
    $(echo \"$1\" | awk '{if($1~/^[0-9]+\\.[0-9]+$/) print $1}')\" ]; then\n    if\
    \ [ -z \"$(echo \"$2\" | awk '{if($1~/^[0-9]+\\.[0-9]+$/) print $1}')\" ]; then\n\
    \      if [ -z \"$(echo \"$3\" | awk '{if($1~/^[0-9]+\\.[0-9]+$/) print $1}')\"\
    \ ]; then\n        # Check if any of the parameters are not integers\n       \
    \ if [ -z \"$(echo \"$1\" | awk '{if($1~/^[0-9]+$/) print $1}')\" ]; then\n  \
    \        if [ -z \"$(echo \"$2\" | awk '{if($1~/^[0-9]+$/) print $1}')\" ]; then\n\
    \            if [ -z \"$(echo \"$3\" | awk '{if($1~/^[0-9]+$/) print $1}')\" ];\
    \ then\n              # Check if the first parameter is equal to the sum of the\
    \ other two\n              if [ $1 -eq $(($2 + $3)) ]; then\n                echo\
    \ \"true\"\n              # Check if the second parameter is equal to the sum\
    \ of the other two\n              elif [ $2 -eq $(($1 + $3)) ]; then\n       \
    \         echo \"true\"\n              # Check if the third parameter is equal\
    \ to the sum of the other two\n              elif [ $3 -eq $(($1 + $2)) ]; then\n\
    \                echo \"true\"\n              else\n                echo \"false\"\
    \n              fi\n            else\n              echo \"false\"\n         \
    \   fi\n          else\n            echo \"false\"\n          fi\n        else\n\
    \          echo \"false\"\n        fi\n      else\n        echo \"false\"\n  \
    \    fi\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n\
    \  fi", "  # is_a_integer()  can be used to check if the argument is an integer\n\
    \  is_a_integer() {\n    if [ \"$1\" -eq \"$1\" ] 2>/dev/null; then\n      # it's\
    \ an integer\n      true\n    else\n      # not an integer\n      false\n    fi\n\
    \  }\n  if is_a_integer \"$1\" && is_a_integer \"$2\" && is_a_integer \"$3\";\
    \ then\n    # Check if one of the numbers is equal to the sum of the other two\n\
    \    if [ \"$1\" -eq \"$(($2 + $3))\" ] ||\n       [ \"$2\" -eq \"$(($1 + $3))\"\
    \ ] ||\n       [ \"$3\" -eq \"$(($1 + $2))\" ]; then\n      echo true\n    else\n\
    \      echo false\n    fi\n  else\n    echo false\n  fi"]
stop_tokens:
- "\n}"
