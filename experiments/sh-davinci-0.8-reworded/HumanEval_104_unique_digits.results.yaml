language: sh
name: HumanEval_104_unique_digits
results:
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ nums=\"$1\"\n  local result=\"\"\n  local good_nums=\"\"\n  local good_num=\"\
    \"\n  local num=\"\"\n  local digit=\"\"\n  local digits=\"\"\n  local digit_sum=\"\
    \"\n  local max_digit=\"\"\n  local unique=\"\"\n  local digits_array=\"\"\n \
    \ local digit_set=\"\"\n  local array_index=\"\"\n  local n=0\n  for num in $nums;\
    \ do\n    digits=\"\"\n    # get an array of digits\n    while [ $num -gt 0 ];\
    \ do\n      digit=$((num % 10))\n      digits=\"$digit $digits\"\n      num=$((num\
    \ / 10))\n    done\n    digits_array=($digits)\n    digits_set=()\n    for ((\
    \ i=0; i<${#digits_array[@]}; i++ )); do\n      array_index=$((digits_array[$i]))\n\
    \      if [ -z \"${digits_set[$array_index]}\" ]; then\n        digits_set[$array_index]=1\n\
    \      else\n        digits_set[$array_index]=$(( digits_set[$array_index] + 1\
    \ ))\n      fi\n    done\n    # get digits with duplicates\n    # if no duplicate\
    \ digits then add to nums\n    # that can be returned\n    max_digit=$(( ${#digits_set[@]}\
    \ - 1 ))\n    unique=1\n    for (( i=0; i<=max_digit; i++ )); do\n      if [ !\
    \ -z \"${digits_set[$i]}\" ] && [ ${digits_set[$i]} -gt 1 ]; then\n        unique=0\n\
    \        break\n      fi\n    done\n    if [ $unique -eq 1 ]; then\n      good_nums=\"\
    $good_nums $num\"\n    fi\n  done\n  # sort good_nums and return as JSON array\n\
    \  good_nums=$(echo $good_nums | tr \" \" \"\\n\" | sort -n)\n  result=\"[\"\n\
    \  for good_num in $good_nums; do\n    result=\"$result\\\"$good_num\\\",\"\n\
    \  done\n  if [ ! -z \"$result\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx9bs_a6y.sh: line 78: unexpected EOF while looking for matching
    `"''

    /tmp/tmpx9bs_a6y.sh: line 82: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ -a arr=(\"$@\")\n  local -a result=()\n  for i in \"${arr[@]}\"; do\n    local\
    \ -a digits=()\n    while [ $i -gt 0 ]; do\n      local mod=$((i % 10))\n    \
    \  digits+=($mod)\n      i=$((i / 10))\n    done\n    local len=${#digits[@]}\n\
    \    local is_unique=1\n    for ((j=0; j<len; j++)); do\n      for ((k=j+1; k<len;\
    \ k++)); do\n        if [[ ${digits[j]} -eq ${digits[k]} ]]; then\n          is_unique=0\n\
    \          break\n        fi\n      done\n    done\n    if [[ $is_unique -eq 1\
    \ ]]; then\n      result+=($i)\n    fi\n  done\n  echo ${result[@]} | tr ' ' '\\\
    n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpq7w0vcct.sh: line 17: [: too many arguments

    '
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo \"$1\" | grep -E '^[^02468]+$' | sort -n\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local num_list=$(echo \"$1\" | tr \" \" \"\\n\")\n    local result=()\n    local\
    \ evens=(\"2\" \"4\" \"6\" \"8\" \"0\")\n    local num\n\n    for num in $num_list;\
    \ do\n        local valid=true\n        for even in \"${evens[@]}\"; do\n    \
    \        if [[ $num == *\"$even\"* ]]; then\n                valid=false\n   \
    \             break\n            fi\n        done\n        if $valid; then\n \
    \           result+=(\"$num\")\n        fi\n    done\n\n    echo ${result[@]}\
    \ | sort -g | sed 's/ /, /g'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ x in $(echo $1); do\n    if [[ ! $x =~ [24680] ]]; then\n      printf '\"%s\"\
    ' $x\n    fi\n  done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  #\
    \ this is just a test. Replace this with a solution\n  echo \"[\\\"${1}\\\"]\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo \"Not implemented\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ input=\"$1\"\n\tlocal ret=()\n\tfor n in ${input[@]}; do\n\t\tif echo \"$n\"\
    \ | grep -qE '[^24680]'; then\n\t\t\tret+=($n)\n\t\tfi\n\tdone\n\t# Don't forget\
    \ the quotes in the array\n\techo \"${ret[@]}\" | jq -R 'split(\" \")'\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp329uq0ry.sh: line 21: jq: command not found

    '
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ #use an array to save the result\n    local result=()\n    for element in $1;\
    \ do\n        flag=true\n        for digit in $(seq 0 9); do\n            if [[\
    \ $element =~ [$digit] ]]; then\n                flag=false\n                break\n\
    \            fi\n        done\n        if $flag; then\n            result+=($element)\n\
    \        fi\n    done\n    IFS=$'\\n'\n    echo ${result[*]} | sed -E 's/ /\"\
    , \"/g'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local result=()\n    for i in $1; do\n        if [[ \"$i\" =~ [02468] ]]; then\n\
    \            continue\n        fi\n        result+=($i)\n    done\n    IFS=$'\\\
    n'\n    echo \"${result[*]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ val in $1; do\n    if [[ $(digits $val) == $(unique_chars $(digits $val)) ]];\
    \ then\n      echo -n $val\n    fi\n  done\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmph4jvbr60.sh: line 14: digits: command not found

    /tmp/tmph4jvbr60.sh: line 14: digits: command not found

    /tmp/tmph4jvbr60.sh: line 14: unique_chars: command not found

    /tmp/tmph4jvbr60.sh: line 14: digits: command not found

    /tmp/tmph4jvbr60.sh: line 14: digits: command not found

    /tmp/tmph4jvbr60.sh: line 14: unique_chars: command not found

    /tmp/tmph4jvbr60.sh: line 14: digits: command not found

    /tmp/tmph4jvbr60.sh: line 14: digits: command not found

    /tmp/tmph4jvbr60.sh: line 14: unique_chars: command not found

    /tmp/tmph4jvbr60.sh: line 14: digits: command not found

    /tmp/tmph4jvbr60.sh: line 14: digits: command not found

    /tmp/tmph4jvbr60.sh: line 14: unique_chars: command not found

    '
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local nums=($1)\n    local res=\"\"\n    for num in ${nums[@]}; do\n       \
    \ if [[ $num =~ ^[1-9][0-9]*$ ]]; then\n            if [[ $num =~ [13579] ]];\
    \ then\n                res+=\"$num \"\n            fi\n        fi\n    done\n\
    \    echo ${res[@]}\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local result=()\n    for x in ${1// / }; do\n        local y=$(echo $x | sed\
    \ 's/[02468]//g')\n        if [ $x -eq $y ]; then\n            result+=(\"$x\"\
    )\n        fi\n    done\n    echo ${result[@]} | tr ' ' ','\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ [[ $# -lt 1 ]] && {\n        echo '[]'\n        return\n    }\n    local nums=\"\
    $1\"\n    local unq_nums=()\n    for num in ${nums[@]}; do\n        local has_even=false\n\
    \        for ((i=0; i<${#num}; i++)); do\n            local cur_d=${num:$i:1}\n\
    \            [[ $((cur_d % 2)) -eq 0 ]] && {\n                has_even=true\n\
    \                break\n            }\n        done\n        $has_even || unq_nums+=(\"\
    $num\")\n    done\n    echo ${unq_nums[@]} | tr ' ' ',' | sed 's/^/[/;s/,/\",\
    \ \"/g;s/$/\"]/'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # TODO\n    # 1. Read the input, remove all even digits, sort the remaining\
    \ and print\n    #    the result.\n    # 2. Usage: $(unique_digits \"15 33 1422\
    \ 1\")\n    # 3. For example:\n    #    $ unique_digits \"15 33 1422 1\"\n   \
    \ #    [\"1\" \"15\" \"33\"]\n    #\n    echo TODO\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ array=($1)\n    echo -n \"[\"\n    for element in ${array[@]}; do\n        if\
    \ [[ \"$element\" =~ [02468] ]]; then\n            continue\n        fi\n    \
    \    echo -n \"\\\"$element\\\"\"\n        echo -n \",\"\n    done\n    echo -n\
    \ \"]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # TODO: Implement this function\n    local out=\"[\"\n    local input=($1)\n\
    \    let no=\"${#input[@]}\"\n    for(( i=0; i<$no; i++ ))\n    do\n        local\
    \ temp=\"${input[$i]}\"\n        local count=0\n        local digit\n        local\
    \ len=${#temp}\n        for(( j=0; j<$len; j++ ))\n        do\n            digit=${temp:$j:1}\n\
    \            if [ $((digit%2)) -eq 0 ]\n            then\n                let\
    \ count++\n            fi\n        done\n        if [ $count -eq 0 ]\n       \
    \ then\n            out+='\"'${input[$i]}'\"'\n            if [ $i -lt $((no-1))\
    \ ]\n            then\n                out+=', '\n            fi\n        fi\n\
    \    done\n    out+=\"]\"\n    echo $out\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo \"TODO\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\t[\
    \ $# -eq 0 ] && {\n\t\techo \"Argument required\"\n\t\treturn\n\t}\n\t[ $# -gt\
    \ 1 ] && {\n\t\techo \"Too many arguments\"\n\t\treturn\n\t}\n\tlocal x\n\tlocal\
    \ y\n\tlocal z\n\n\tread -a x <<< \"${1}\"\n\ty=\"${x[@]}\"\n\tfor i in ${y[@]};\
    \ do\n\t\t[[ ${i} =~ [0-9]*[02468][0-9]* ]] && continue\n\t\tz+=${i}\n\t\tz+=\"\
    \ \"\n\tdone\n\techo \"[\\\"${z}\\\"]\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo -n '['\n    for i in ${1}; do\n        [[ ${i} =~ ^([[:digit:]]*)$ ]] ||\
    \ continue\n        if [[ ${i} =~ ^[^0-9]*[1-9][^02468]*$ ]]; then\n         \
    \   echo -n \"\\\"${i}\\\",\"\n        fi\n    done\n    echo -n ']'\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  declare\
    \ -a array\n  local list x i\n  list=$1\n  # Split the list in an array. IFS must\
    \ have space, tab, newline\n  IFS=' ' read -a array <<< \"$list\"\n  # Iterate\
    \ over the array, filtering elements that have no even digit\n  for x in \"${array[@]}\"\
    ; do\n    # If the number contains any even digit, skip it\n    # If it doesn't,\
    \ print it\n    if ! (($x % 2)) &> /dev/null; then\n      echo -n '\"'$x'\"'\n\
    \      echo -n ' '\n    fi\n  done\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local string=$@\n    local digits=$(grep -o . <<< \"$string\")\n    local evens=$(grep\
    \ [02468] <<< \"$digits\")\n    local odds=$(grep [13579] <<< \"$digits\")\n \
    \   # Odds are 1, 3, 5, 7, 9\n    # Evens are 0, 2, 4, 6, 8\n    if [ -z \"$evens\"\
    \ ]; then\n        # All odd\n        echo \"$digits\"\n    else\n        # If\
    \ not all odd, then none\n        echo \"\"\n    fi\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local res=()\n    local -a arr=($1)\n    local digit\n    for number in \"${arr[@]}\"\
    ; do\n        # add the number to the list only if it has no even digit.\n   \
    \     res+=($number)\n    done\n    # print the array with the escape character\
    \ \\\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tif\
    \ [[ $# -eq 0 ]]; then\n\t\techo \"[]\"\n\t\treturn\n\tfi\n\tlocal -a arr=($(grep\
    \ -o '[0-9]' <<< \"$1\"))\n\tlocal -a evens=($(grep -o '[2468]' <<< \"$1\"))\n\
    \t\n\t# Print the even digits\n\techo '\"['\n\techo \"${evens[@]}\" | sort -n\
    \ | uniq\n\techo ']\"'\n\t\n\t# Print the odd digits\n\techo '\"['\n\techo \"\
    ${arr[@]}\" | sort -n | uniq\n\techo ']\"'\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ digits=(\"$@\")\n    evens=(\"$(printf \"%s\" \"${digits[@]}\" | grep -Eo \"\
    [02468]\")\")\n    uniques=(\"$(printf \"%s\" \"${evens[@]}\" | grep -v \"\")\"\
    )\n    for ((i=0; i<${#uniques[@]}; i++)); do\n        for ((j=0; j<${#digits[@]};\
    \ j++)); do\n            if [[ \"${uniques[$i]}\" == \"${digits[$j]}\" ]]; then\n\
    \                unset digits[$j]\n            fi\n        done\n    done\n  \
    \  digits=(\"${digits[@]}\")\n    printf \"%s\" \"${digits[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -a ret\n    let i=0\n    for v in $(echo $1); do\n        declare -i\
    \ v=$v\n        let even=0\n        while [[ v -gt 0 ]]; do\n            if [[\
    \ $(($v % 2)) -eq 0 ]]; then\n                let even=1\n                break\n\
    \            fi\n            let v=v/10\n        done\n        if [[ $even -eq\
    \ 0 ]]; then\n            ret[$i]=$v\n            let i=$i+1\n        fi\n   \
    \ done\n    echo ${ret[@]} | tr \" \" \",\" | sed -e 's/,/\", \"/g' -e 's/^/\"\
    /' -e 's/$/\"/'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ out_list=$(echo $@ | tr ' ' '\\n' | grep -v '[02468]')\n  if [ -z \"$out_list\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo -n \"[\"\n    while read line; do\n\
    \      echo -n \"\\\"$line\\\" \"\n    done <<< $out_list\n    echo -n \"]\"\n\
    \  fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ for x in $@; do\n        echo $x | grep -e '[02468]'\n    done\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023448
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # For each given number, check if it has at least one even digit.\n    # If\
    \ not, add it to the output list.\n    IFS=\" \" read -ra ARR <<< $1\n    echo\
    \ '['\n    for i in \"${ARR[@]}\"; do\n        IFS='' read -ra DIGITS <<< $i\n\
    \        unique=true\n        for j in \"${DIGITS[@]}\"; do\n            if [[\
    \ $(( j % 2 )) -eq 0 ]]; then\n                unique=false\n                break\n\
    \            fi\n        done\n        if $unique; then\n            echo -n '\"\
    '$i'\", '\n        fi\n    done\n    echo -n '\"'0'\"]'\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo $1 | xargs -n1 | egrep '^[^0-9]*[13579][^0-9]*$' | sort -nu | xargs\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ awk '{\n        nums = split($0, arr, \" \")\n        for (i=1; i<=nums; i++)\
    \ {\n            str = arr[i]\n            asort(str, sorted)\n            delete\
    \ sort_count\n            while (length(sorted) > 0) {\n                sort_count[sorted]++\n\
    \                sorted = sorted\"\";\n            }\n            if (length(str)\
    \ == length(sort_count)) {\n                print str;\n            }\n      \
    \  }\n    }'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=42 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=38 encoding='utf-8'>
  timestamp: 1660023453
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local -a uniq=()\n    local -a res=()\n    local x\n    local flag=1\n    for\
    \ x in $1; do\n        for ((i=0; i<${#x}; i++)); do\n            [[ ${x:$i:1}\
    \ -eq 0 || ${x:$i:1} -eq 2 || ${x:$i:1} -eq 4 || ${x:$i:1} -eq 6 || ${x:$i:1}\
    \ -eq 8 ]] && flag=0\n        done\n        [[ $flag -eq 1 ]] && uniq+=($x)\n\
    \        flag=1\n    done\n    # echo \"${uniq[@]}\"\n    if [[ ${#uniq[@]} -eq\
    \ 0 ]]; then\n        echo \"[]\"\n    else\n        res=($(printf \"%s\\n\" \"\
    ${uniq[@]}\" | sort -n))\n        echo \"[\"\\\"${res[0]}\\\"\n        for ((i=1;\
    \ i<${#res[@]}; i++)); do\n            echo \"\\\"${res[$i]}\\\"\"\n        done\n\
    \        echo \"]\"\n    fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo $1 | tr ' ' '\\n' | sort -n | grep -E '^[[:digit:]]*[13579]$'\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local a\n    local x\n    local y\n    local z\n    a=()\n    for x in $1\n\
    \    do\n        z=1\n        while [[ $x -gt 0 ]]\n        do\n            y=$(($x\
    \ % 10))\n            x=$(($x / 10))\n            if [[ $(($y % 2)) -eq 0 ]]\n\
    \            then\n                z=0\n                break\n            fi\n\
    \        done\n        if [[ $z -eq 1 ]]\n        then\n            a+=(\"$x\"\
    )\n        fi\n    done\n    echo ${a[@]} | sort -g | tr ' ' '\\n' | sed -e 's/^/\\\
    \"/' -e 's/$/\\\"/'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ function=\"unique_digits\"\n\tlocal list=\"$1\"\n\tlocal output=\"\"\n\tlocal\
    \ digits=\"\"\n\tlocal digit=\"\"\n\tlocal c=\"\"\n\tlocal output_array=()\n\t\
    local num_array=()\n\tlocal counter=0\n\tlocal even_flag=0\n\t\n\tif [[ $# -ne\
    \ 1 ]]; then\n\t\techo \"usage: $function [list]\"\n\t\texit 1\n\tfi\n\t\n\tfor\
    \ num in ${list}; do\n\t\tdigits=${num//-/}\n\t\tdigits=$(echo \"${digits}\" |\
    \ sed -e 's/^0*//') # remove the leading zeros\n\t\t\n\t\teven_flag=0\n\t\tfor\
    \ ((i=0; i<${#digits}; i++)); do\n\t\t\tdigit=${digits:$i:1}\n\t\t\t\n\t\t\tif\
    \ [[ ${digit} -ge 0 && ${digit} -le 9 ]]; then\n\t\t\t\tif [[ ${digit} -eq 0 ||\
    \ ${digit} -eq 2 || ${digit} -eq 4 || ${digit} -eq 6 || ${digit} -eq 8 ]]; then\n\
    \t\t\t\t\teven_flag=1\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\techo \"\
    $function: error: invalid digit \\\"${digit}\\\" found in number \\\"${num}\\\"\
    \" >&2\n\t\t\t\texit 1\n\t\t\tfi\n\t\tdone\n\t\t\n\t\tif [[ ${even_flag} -eq 0\
    \ ]]; then\n\t\t\tnum_array[$counter]=${num}\n\t\t\tcounter=$((counter+1))\n\t\
    \tfi\n\tdone\n\t\n\tIFS=$'\\n' sorted_array=($(sort <<<\"${num_array[*]}\"))\n\
    \tunset IFS\n\t\n\tif [[ ${#sorted_array[@]} -eq 0 ]]; then\n\t\toutput=\"[]\"\
    \n\telse\n\t\toutput=\"[\\\"${sorted_array[0]}\\\"\"\n\t\tfor ((i=1; i<${#sorted_array[@]};\
    \ i++)); do\n\t\t\toutput\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmptwd02oog.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmptwd02oog.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  declare\
    \ -i arr=()\n  for i in $1; do\n    if [[ \"$i\" =~ [24680] ]]; then continue;\
    \ fi\n    arr+=($i)\n  done\n  echo \"${arr[@]}\" | tr ' ' '\\n' | sort -n\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        # $1 is empty\n        return\n    fi\n  \
    \  # initialize an empty array\n    declare -a array\n    # read each element\
    \ from $1 and append it to array\n    IFS=\" \" read -a array <<< \"$1\"\n   \
    \ # initialize an empty string to hold the result\n    result=\"\"\n    # iterate\
    \ over array\n    for (( i=0; i<${#array[@]}; i++ )); do\n        # initialize\
    \ an empty string to hold the digits of $array[$i]\n        digits=\"\"\n    \
    \    # initialize an empty string to hold the even digits of $array[$i]\n    \
    \    even=\"\"\n        # convert $array[$i] to a string\n        current=\"${array[$i]}\"\
    \n        # iterate over $current\n        for (( j=0; j<${#current}; j++ ));\
    \ do\n            # convert a digit at $j index of $current to an integer\n  \
    \          digit=$(( 10#${current:$j:1} ))\n            # append $digit to $digits\n\
    \            digits+=\"$digit\"\n            # check if $digit is even\n     \
    \       if [[ $(( digit % 2 )) -eq 0 ]]; then\n                # append $digit\
    \ to $even\n                even+=\"$digit\"\n            fi\n        done\n \
    \       # check if $even is empty\n        if [[ -z \"$even\" ]]; then\n     \
    \       # append $digits to $result\n            result+=\"$digits \"\n      \
    \  fi\n    done\n    # remove the space at the end of $result\n    result=\"${result%\
    \ }\"\n    # convert $result to an array\n    IFS=\" \" read -a result <<< \"\
    $result\"\n    # sort $result\n    result=$(printf '%s\\n' \"${result[@]}\" |\
    \ sort -n)\n    # convert $result to a string\n    result=$(printf '\"%s\" ' \"\
    ${result[@]}\")\n    # remove the space at the end of $result\n    result=\"${result%\
    \ }\"\n    # remove the quotes from $result\n    result=\"${result%\\\"}\"\n \
    \   result=\"${result#\\\"}\"\n    # print $result\n    echo \"$result\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ result=()\n  for i in $1; do\n    if [[ \"$i\" =~ ^[1-9]+$ ]]; then\n      result+=($i)\n\
    \    fi\n  done\n  echo \"${result[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local result=()\n    for i in ${@// / }; do\n        [[ $i =~ [24680] ]] &&\
    \ continue\n        result+=(\"$i\")\n    done\n    echo -n \"[\"\n    printf\
    \ '\"%s\", ' \"${result[@]}\"\n    echo -n \"]\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local l=$1\n    # Put your solution here.\n    echo 'Not implemented.'\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ EVEN_DIGITS='2 4 6 8 0'\n\tlocal len=${#1}\n\tlocal s=''\n\tlocal c\n\tlocal\
    \ i\n\tlocal p=0\n\t\n\tfor ((i=0; i<len; i++)); do\n\t\tc=${1:i:1}\n\t\tif [\
    \ $c = ' ' ]; then\n\t\t\tif ! $(echo $s | grep -wq '[0-9]*['$EVEN_DIGITS']');\
    \ then\n\t\t\t\techo -n '\"'$s'\"'\n\t\t\t\t[ $i -lt $((len-1)) ] && echo -n '\
    \ '\n\t\t\tfi\n\t\t\ts=''\n\t\telse\n\t\t\ts+=$c\n\t\tfi\n\tdone\n\t\n\tif ! $(echo\
    \ $s | grep -wq '[0-9]*['$EVEN_DIGITS']'); then\n\t\techo -n '\"'$s'\"'\n\tfi\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpvv11_gf5.sh: line 22: [: =: unary operator expected

    /tmp/tmpvv11_gf5.sh: line 22: [: =: unary operator expected

    /tmp/tmpvv11_gf5.sh: line 22: [: =: unary operator expected

    grep: Unmatched [, [^, [:, [., or [=

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo \"$1\" | xargs -n1 | awk '{for(i=1;i<=length($1);i++) { if (substr($1,i,1)\
    \ % 2 == 0) {exit 0} } print $1}' | sort -n | awk '{print \"\\\"\"$1\"\\\"\"}'\
    \ | tr '\\n' ','\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: 'xargs: echo: terminated by signal 13

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local l\n    local m\n    local f\n    local r\n    local n\n    for n in $1;\
    \ do\n        l=\n        for ((f=1; f<=10; f++)); do\n            m=$(expr \"\
    $n\" : \".*$f\")\n            if [ -z \"$m\" ]; then\n                l=\"$l$f\"\
    \n            fi\n        done\n        if [ \"$l\" == \"123456789\" ]; then\n\
    \            r=\"$r $n\"\n        fi\n    done\n    echo \"[$(sed -e 's/ /, /g'\
    \ <<< $r)]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo $1 | tr ' ' '\\n' | while read x; do\n        even_digit=0\n        while\
    \ [ $x -gt 0 ]; do\n            digit=$((x % 10))\n            if [ $((digit %\
    \ 2)) -eq 0 ]; then\n                even_digit=1\n                break\n   \
    \         fi\n            x=$((x / 10))\n        done\n        if [ $even_digit\
    \ -eq 0 ]; then\n            echo $x\n        fi\n    done | sort -n | while read\
    \ x; do\n        echo -n '\"'\n        echo -n $x\n        echo -n '\" '\n   \
    \ done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local _numbers=\"$1\" _number\n    local -a _even _odd\n    while read -r _number;\
    \ do\n        if is_even \"$_number\"; then\n            _even+=(\"$_number\"\
    )\n        else\n            _odd+=(\"$_number\")\n        fi\n    done <<< \"\
    $_numbers\"\n    printf '[\"%s\"]\\n' \"${_odd[@]}\"\n}\n\ncandidate() {\n   \
    \ unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpf_olnz1g.sh: line 16: is_even: command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=(\"$@\")  # bash arrays are not space-separated\n\n    # set is the\
    \ easiest way to have uniq values\n    local uniq_digits=($(echo ${list[@]} |\
    \ tr ' ' '\\n' |\n                        grep -o . | sort | uniq))\n\n    local\
    \ even_digits=(2 4 6 8 0)\n    for digit in ${even_digits[@]}; do\n        uniq_digits=(${uniq_digits[@]/$digit})\n\
    \    done\n\n    echo ${uniq_digits[@]}\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  unique_digits=$(echo\
    \ \"$1\" | tr \" \" \"\\n\" | grep -E '[^02468]+$' | sort -n)\n  if [ -z \"$unique_digits\"\
    \ ]; then\n    echo \"[]\"\n  else\n    echo \"[\\\"$(echo \"$unique_digits\"\
    \ | tr \"\\n\" \"\\\", \\\"\")\\\"]\"\n  fi\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ input=\"$@\"\n    output=\"\"\n    if [[ $input =~ [0-9] ]]; then\n        #\
    \ For each input value, check the value doesn't contain any even digit\n     \
    \   IFS=' ' read -r -a array <<< \"$input\"\n        for i in \"${array[@]}\"\
    ; do\n            if [[ $i =~ [0-9] && ! $i =~ [24680] ]]; then\n            \
    \    output=\"$output $i\"\n            fi\n        done\n    fi\n    # Output\
    \ the sorted result\n    if [[ $output ]]; then\n        IFS=' ' read -r -a array\
    \ <<< \"$output\"\n        sorted=($(for a in \"${array[@]}\"; do echo \"$a\"\
    ; done | sort -n))\n        echo \"[\"\n        for i in \"${sorted[@]}\"; do\n\
    \            echo '\"'$i'\"'\n        done\n        echo \"]\"\n    else\n   \
    \     echo \"[]\"\n    fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local result=\"[]\"\n    local contains_even_digit=0\n    for i in $1; do\n\
    \        contains_even_digit=0\n        for j in $(echo $i | grep -o .); do\n\
    \            if [ $((j % 2)) -eq 0 ]; then\n                contains_even_digit=1\n\
    \                break\n            fi\n        done\n        if [ $contains_even_digit\
    \ -eq 0 ]; then\n            result=\"$result \\\"$i\\\"\"\n        fi\n    done\n\
    \    echo $result\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # declare -i i\n    for i in $1; do\n        if [[ $i =~ (0|2|4|6|8) ]]; then\n\
    \            echo \"0\"\n        else\n            echo $i\n        fi\n    done\
    \ | sort -n | uniq\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  if\
    \ [ $# -lt 1 ]; then\n    echo \"Nothing to do\"\n    return 1\n  fi\n  local\
    \ res=()\n  for i in $1; do\n    flag=1\n    for ((j=0; j<${#i}; j++)); do\n \
    \     if [[ \"${i:$j:1}\" == [02468] ]]; then\n        flag=0\n        break\n\
    \      fi\n    done\n    if [ $flag -eq 1 ]; then\n      res+=($i)\n    fi\n \
    \ done\n  if [ ${#res[@]} -gt 0 ]; then\n    echo ${res[@]} | xargs -n1 | sort\
    \ -n\n  fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ x in $1; do\n    for ((i=0; i<${#x}; i++)); do\n      if [[ $((10#${x:$i:1}\
    \ % 2)) == 0 ]]; then\n        break;\n      fi\n    done\n    if (( i == ${#x}\
    \ )); then\n      echo $x;\n    fi\n  done | sort -n | tr '\\n' ' ' | sed 's/^\\\
    (.*\\)$/\\[\"\\1\"\\]/g'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ printf '%s\\n' $1 | awk '\n        BEGIN {\n            RS=\" \";\n        \
    \    FS=\"\";\n            process = 0;\n        }\n        {\n            process\
    \ = 1;\n            for (i = 1; i <= NF; i++) {\n                num = $i;\n \
    \               if (num % 2 == 0) {\n                    process = 0;\n      \
    \              break;\n                }\n            }\n            if (process\
    \ == 1) {\n                print $0;\n            }\n        }\n        END {\n\
    \            if (process == 0) {\n                print \"\";\n            }\n\
    \        }\n    ' | sort -g\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ num in $1; do\n    # check if any digit is even\n    if [[ $num =~ [24680] ]];\
    \ then\n      continue\n    fi\n    # else, we add it to the array\n    res+=\"\
    \ $num\"\n  done\n  # print the result in correct format\n  echo [${res// /, }]\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local numbers=($(echo $1 | tr ' ' '\\n'))\n    local valid_numbers=()\n    for\
    \ i in ${numbers[@]}; do\n        if [[ $(echo $i | sed -e 's/[^[:digit:]]//g'\
    \ | tr -d '0' | uniq -c | wc -l) -eq 1 ]]; then\n            valid_numbers+=($i)\n\
    \        fi\n    done\n    if [[ ${#valid_numbers[@]} -eq 0 ]]; then\n       \
    \ echo \"[]\"\n    else\n        echo '['${valid_numbers[@]/#/\\\\\\\"}']' | tr\
    \ ' ' ','\n    fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # Collect the digits of each element in x\n    local digits=()\n    for x in\
    \ $1; do\n        while [ $x -gt 0 ]; do\n            # last digit is given by\
    \ a modulo 10 operation\n            local d=$((x % 10))\n            digits+=($d)\n\
    \            # drop the last digit from x\n            x=$((x / 10))\n       \
    \ done\n    done\n    # Sort the digits\n    IFS=$'\\n'\n    digits=($(sort <<<\"\
    ${digits[*]}\"))\n    # Remove duplicate values\n    digits=($(uniq <<<\"${digits[*]}\"\
    ))\n    # Check if the array contains any even value\n    local has_even=0\n \
    \   for d in ${digits[@]}; do\n        if [ $((d % 2)) -eq 0 ]; then\n       \
    \     has_even=1\n            break\n        fi\n    done\n    # Print unique\
    \ digits if no even digit was found\n    if [ $has_even -eq 0 ]; then\n      \
    \  echo ${digits[@]}\n    fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ space_to_cote $1 | \\\n    awk '{\n            if ($1 % 2 == 0) {\n        \
    \        printf \"\\\"%s\\\"\\n\", $1\n            }\n        }'\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpk1d8iaph.sh: line 13: space_to_cote: command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ for x in $1\n    do\n        if [[ \"${x//[0-9]/}\" ]]\n        then\n     \
    \       echo -n '\"'\"$x\"'\"'\n        fi\n    done\n}\n\ncandidate() {\n   \
    \ unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ result=\"\"\n\tlocal str=\"\"\n\tfor str in $1; do\n\t\t# For each digit: Check\
    \ if it is even\n\t\tlocal is_even=0\n\t\tlocal digit=\"\"\n\t\tfor digit in $(echo\
    \ $str | sed -e 's/./& /g'); do\n\t\t\tif [[ $(($digit % 2)) -eq 0 ]]; then\n\t\
    \t\t\tis_even=1\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\t# Add to result if str\
    \ doesn't contain any even digit\n\t\tif [[ $is_even -eq 0 ]]; then\n\t\t\tif\
    \ [[ -z $result ]]; then\n\t\t\t\tresult='\"'$str'\"'\n\t\t\telse\n\t\t\t\tresult=$result,\
    \ '\"'$str'\"'\n\t\t\tfi\n\t\tfi\n\tdone\n\t# Output\n\techo '['$result']'\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx4qnkrtb.sh: line 30: "33": command not found

    /tmp/tmpx4qnkrtb.sh: line 30: "1": command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local output\n    local input=$@\n    local count=0\n    for i in $input; do\n\
    \        local valid=1\n        for j in $(seq 1 ${#i}); do\n            local\
    \ digit=$(echo $i | cut -c $j)\n            if [ $(($digit % 2)) -eq 0 ]; then\n\
    \                valid=0\n                break\n            fi\n        done\n\
    \        if [ $valid -eq 1 ]; then\n            output[$count]=$i\n          \
    \  count=$(($count + 1))\n        fi\n    done\n    if [ ${#output[@]} -eq 0 ];\
    \ then\n        echo \"[]\"\n    else\n        for i in $(seq 0 $((${#output[@]}\
    \ - 1))); do\n            output[$i]=\"\\\"${output[$i]}\\\"\"\n        done\n\
    \        echo \"[${output[@]}]\"\n    fi\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local test_digits=${1//[[:space:]]/}\n    for (( i=0; i<${#test_digits}; i++\
    \ )); do\n        if [ $((test_digits%2)) -eq 0 ]; then\n            echo 0\n\
    \            return\n        fi\n    done\n    echo 1\n}\n\ncandidate() {\n  \
    \  unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ input=($1)\n  local result=()\n  for i in ${input[@]}; do\n    if echo $i |\
    \ grep '[24680]' > /dev/null; then\n      result+=(\\\"$i\\\")\n    fi\n  done\n\
    \  printf %s \"${result[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local f=\"$(mktemp)\"\n    for i in $1; do\n        if ((i < 0)); then\n   \
    \         echo \"Error: $i is negative.\" >&2\n            return 1\n        fi\n\
    \        if ((i==0)); then\n            echo \"Error: $i is zero.\" >&2\n    \
    \        return 1\n        fi\n        local out=$(is_unique $i)\n        if ((out==0));\
    \ then\n            echo \"Error: $(dec2bin $i) is not a binary number.\" >&2\n\
    \            return 1\n        fi\n        if ((out==1)); then\n            echo\
    \ $i >> $f\n        fi\n    done\n    # sort and store in array\n    local -a\
    \ a\n    while read i; do\n        a=(\"${a[@]}\" $i)\n    done < <(sort -n $f)\n\
    \    echo ${a[@]}\n    rm $f\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpleki4lc7.sh: line 23: is_unique: command not found

    /tmp/tmpleki4lc7.sh: line 25: dec2bin: command not found

    Error:  is not a binary number.

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ list=$1\n  local line\n  local num\n  local res=()\n  for line in $list; do\n\
    \    if [[ $line =~ ^([13579]+[0-9]*|0)$ ]]; then\n      res+=($line)\n    fi\n\
    \  done\n  echo \"${res[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits=($1)\n    local even_digits=(0 2 4 6 8)\n    local ret=()\n   \
    \ for x in ${digits[@]}; do\n        local x_digits=($(echo $x | grep -o .))\n\
    \        local odd=1\n        for d in ${x_digits[@]}; do\n            for e in\
    \ ${even_digits[@]}; do\n                if [ $d == $e ]; then\n             \
    \       odd=0\n                    break\n                fi\n            done\n\
    \            if [ $odd == 0 ]; then\n                break\n            fi\n \
    \       done\n        if [ $odd == 1 ]; then\n            ret+=($x)\n        fi\n\
    \    done\n    printf %s \"${ret[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local -n arr=$1\n    local max=\"${arr[0]}\"\n    local max_length=\"${#max}\"\
    \n    local max_length_plus_one=\"$((max_length + 1))\"\n    local modulo=\"10\"\
    \n    local modulo_power=\"1\"\n    local modulo_power_plus_one=\"2\"\n    local\
    \ -a results\n\n    for num in \"${arr[@]}\"; do\n        # Find max_length\n\
    \        if [[ \"${#num}\" -gt \"$max_length\" ]]; then\n            max_length=\"\
    ${#num}\"\n            max_length_plus_one=\"$((max_length + 1))\"\n        fi\n\
    \    done\n\n    # Loop over string length\n    for ((i = 1; i < max_length_plus_one;\
    \ i++)); do\n        modulo_power=\"$((modulo_power * 10))\"\n        modulo_power_plus_one=\"\
    $((modulo_power_plus_one * 10))\"\n        modulo=\"$((modulo * 10))\"\n\n   \
    \     # Loop over values\n        for num in \"${arr[@]}\"; do\n            if\
    \ ((num % modulo_power_plus_one == modulo)); then\n                # Append to\
    \ results if not present\n                if [[ ! \"${results[*]}\" =~ \"$num\"\
    \ ]]; then\n                    results+=(\"$num\")\n                fi\n    \
    \        fi\n        done\n    done\n\n    # Sort\n    IFS=$'\\n' sorted=($(sort\
    \ <<<\"${results[*]}\"))\n    unset IFS\n\n    # Format\n    output=\"[\"\n  \
    \  for result in \"${sorted[@]}\"; do\n        if [[ \"$result\" != \"${sorted[0]}\"\
    \ ]]; then\n            output=\"$output, \"\n        fi\n        output=\"$output'\"\
    $result\"'\"\n    done\n    output=\"$output]\"\n\n    echo \"$output\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpkrhbz7si.sh: line 13: local: `15 33 1422 1'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  words=(\"\
    $@\")\n  for word in \"${words[@]}\"; do\n    contains_odd=1\n    for (( i=0;\
    \ i<${#word}; i++ )); do\n      digit=${word:$i:1}\n      if (( digit % 2 == 0\
    \ )); then\n        contains_odd=0\n        break\n      fi\n    done\n    if\
    \ (( contains_odd )); then\n      echo -n \"\\\"$word\\\" \"\n    fi\n  done\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  echo\
    \ \"$@\" | tr ' ' '\\n' | grep -E '^[13579]+$' | sort -n | tr '\\n' ' ' | sed\
    \ -e 's/^/\\[/' -e 's/$/\\]/'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ numbers=(${1})\n\tlocal result=()\n\tlocal num\n\tfor num in ${numbers[@]};\
    \ do\n\t\tlocal digits=($(echo ${num} | grep -o \"[[:digit:]]\"))\n\t\tlocal has_even_digit=false\n\
    \t\tfor digit in ${digits[@]}; do\n\t\t\tif [[ $((digit % 2)) -eq 0 ]]; then\n\
    \t\t\t\thas_even_digit=true\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\t\tif ! ${has_even_digit};\
    \ then\n\t\t\tresult+=(\"${num}\")\n\t\tfi\n\tdone\n\techo \"${result[@]}\"\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local unique_digits=()\n    for i in $1; do\n        if [[ $i =~ ^[13579]+$\
    \ ]]; then\n            unique_digits+=(\"$i\")\n        fi\n    done\n    echo\
    \ \"[$(IFS=,; echo \"${unique_digits[*]}\")]\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local string_array=()\n    local int_array=()\n    local unique_digits=()\n\
    \    # Convert string to array of integer\n    read -a string_array <<< \"$1\"\
    \n    for element in \"${string_array[@]}\"; do\n        if [[ $element =~ ^[0-9]+$\
    \ ]]; then\n            int_array+=($element)\n        fi\n    done\n    # Compute\
    \ the result.\n    for element in \"${int_array[@]}\"; do\n        local even_found=\"\
    false\"\n        for (( i=0; i<${#element}; i++ )); do\n            local digit=\"\
    ${element:$i:1}\"\n            if [[ $digit =~ ^[02468]$ ]]; then\n          \
    \      even_found=\"true\"\n                break\n            fi\n        done\n\
    \        if [[ $even_found = \"false\" ]]; then\n            unique_digits+=($element)\n\
    \        fi\n    done\n    # Convert to string\n    local result=\"[\"\n    for\
    \ element in \"${unique_digits[@]}\"; do\n        result=\"$result\\\"$element\\\
    \",\"\n    done\n    result=${result%?}\n    result=\"$result]\"\n    echo $result\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ numbers=$(echo \"$1\" | sed 's/ //g')\n  for n in $numbers; do\n    for d in\
    \ $(seq 0 9); do\n      [[ $n =~ $d ]] && break\n    done\n    [ \"$d\" -eq 9\
    \ ] && echo -n '\"'\"$n\"'\"'\n  done\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local input=$1\n    local digits=`echo $input | tr ' ' '\\n'`\n    local even_digits=`echo\
    \ \"$digits\" | egrep -o \"[24680]\"`\n    local odd_digits=`echo \"$digits\"\
    \ | egrep -o \"[13579]\"`\n    local res=\"[]\"\n    if [ -z \"$even_digits\"\
    \ ]; then\n        res=`echo $odd_digits | tr '\\n' ' ' | sed 's/^/\\[/;s/$/\\\
    ]/;s/ /\", \"/g'`\n    fi\n    echo $res\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ input=$1\n    # $(echo $input | tr \" \" \"\\n\") convert the input string to\
    \ list\n    for x in $(echo $input | tr \" \" \"\\n\"); do\n        # check if\
    \ the x has even digits\n        if [ $(echo $x | grep -o \"[02468]\" | wc -l)\
    \ -eq 0 ]; then\n            # append the x to the output list\n            output+=(\"\
    $x\")\n        fi\n    done\n    # sort the list and output\n    echo $(IFS=$'\\\
    n'; echo \"${output[*]}\" | sort)\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ i in $1; do\n    # Check if $i has any even digit\n    if ! [[ $i =~ [02468]\
    \ ]]; then\n      echo -n \"\\\"$i\\\" \"\n    fi\n  done\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=($1)\n    local res=()\n    for num in ${list[@]}; do\n        if\
    \ [ $(( num % 2 )) -ne 0 ]; then\n            res+=($num)\n        fi\n    done\n\
    \    echo \"${res[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ result=()\n\tlocal i\n\tfor i in $1; do\n\t\tif [ $(grep -Eo '[2468]' <<<\"\
    $i\" | wc -l) -eq 0 ]; then\n\t\t\tresult+=(\"$i\")\n\t\tfi\n\tdone\n\techo $(echo\
    \ \"${result[@]}\" | sort -n)\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local xs=\"$1\"\n    echo \"$xs\" | awk '\n    BEGIN {\n        FS=\" \"\n \
    \   }\n    function has_even_digit(x) {\n        if (x < 10) {\n            return\
    \ 0\n        } else {\n            return (x % 2 == 0) || has_even_digit(int(x\
    \ / 10))\n        }\n    }\n    {\n        for (i = 1; i <= NF; i++) {\n     \
    \       if (!has_even_digit($i)) {\n                print $i\n            }\n\
    \        }\n    }' | sort -n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ digits=$1\n\n  local even_digits=$(echo $digits | tr \" \" \"\\n\" | grep '[02468]')\n\
    \  if [ -z \"$even_digits\" ]; then\n    echo $digits | tr \" \" \"\\n\" | sort\
    \ -n\n  else\n    echo \"[]\"\n  fi\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # Split the list of numbers into an array of strings\n    local numbers=($(echo\
    \ $1))\n    # Create an empty list to fill with numbers\n    local digits=()\n\
    \    # Print out each number in the list\n    for number in ${numbers[@]}; do\n\
    \        # Get the digits of the number\n        local num_digits=($(echo $number\
    \ | grep -o .))\n        # Test each digit in the number\n        for digit in\
    \ ${num_digits[@]}; do\n            # Test for even digit\n            if [[ $(($digit\
    \ % 2)) -eq 0 ]]; then\n                break\n            else\n            \
    \    if [[ ${#num_digits[@]} -eq $(( $digit + 1 )) ]]; then\n                \
    \    digits+=($number)\n                fi\n            fi\n        done\n   \
    \ done\n    # Print the sorted array of unique digits\n    echo ${digits[@]} |\
    \ tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ list=($1)\n    for number in \"${list[@]}\"; do\n        for digit in $(echo\
    \ \"$number\" | sed -E \"s/([0-9])/\\1 /g\"); do\n            if [[ $digit%2 -eq\
    \ 0 ]]; then\n                echo $(\n                    for i in \"${!list[@]}\"\
    ; do\n                        if [[ ${list[$i]} -eq $number ]]; then\n       \
    \                     unset \"list[$i]\"\n                        fi\n       \
    \             done)\n                break\n            fi\n        done\n   \
    \ done\n    echo \"${list[@]}\" | sort -n\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  echo\
    \ '[]'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ sed 's/ //g' | grep -o '[^2-4-6-8]' | sort -n | uniq\n}\n\ncandidate() {\n \
    \   unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=43 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660023454
- exit_code: 0
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ x=\"$1\"\n  local solution=\"\"\n  for i in $x; do\n    if [ \"$(echo $i | grep\
    \ -e '[0-9]*[02468]')\" == \"\" ]; then\n      solution+=\" $i\"\n    fi\n  done\n\
    \  echo $(echo $solution | sed -e 's/^ *//g' | sed -e 's/ /\\n/g' | sort -g)\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ x in \"$@\"; do\n    if [[ \"$x\" == *[24680]* ]]; then\n      continue\n  \
    \  fi\n    echo -n '\"'$x'\"'\n    echo -n \" \"\n  done\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ -a arr\n  IFS=\" \" read -a arr <<< \"$@\"\n\n  for ((i=0; i<${#arr[@]}; i++));\
    \ do\n    local num=${arr[$i]}\n    local even=0\n    while [[ $num -gt 0 ]];\
    \ do\n      if [[ $((num % 10)) -eq 0 ]]; then\n        even=1\n        break\n\
    \      fi\n      num=$((num / 10))\n    done\n    if [[ $even -eq 1 ]]; then\n\
    \      unset arr[$i]\n    fi\n  done\n\n  # sort in increasing order\n  echo ${arr[@]}\
    \ | tr \" \" \"\\n\" | sort -n | tr \"\\n\" \" \"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local in=\"$1\"\n    local x\n    local list=()\n    for x in $in; do\n    \
    \    local y\n        for (( y=0; y<${#x}; y++ )); do\n            [[ \"${x:$y:1}\"\
    \ =~ ^[24680]$ ]] && break\n        done\n        (( y == ${#x} )) && list+=(\
    \ \"$x\" )\n    done\n    echo \"${list[@]}\" | tr ' ' '\\n' | sort -n | tr '\\\
    n' ' '\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local -a nums=( $1 )\n    local result=()\n    for ((i=0; i<${#nums[@]}; i++));\
    \ do\n        local num=${nums[$i]}\n        local even=$(echo \"$num\" | sed\
    \ 's/[13579]//g')\n        if [ -z \"$even\" ]; then\n            result+=(\"\
    $num\")\n        fi\n    done\n    if [ ${#result[@]} -eq 0 ]; then\n        echo\
    \ \"[]\"\n    else\n        echo \"[${result[@]/%//}]\"\n    fi\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tvals=()\n\
    \todd_vals=()\n\tfor val in $(echo $1); do\n\t\tvals+=(\"$val\")\n\t\tfor digit\
    \ in $(echo \"$val\" | grep -o .); do\n\t\t\tif (( digit % 2 == 0 )); then\n\t\
    \t\t\t# breaks loops\n\t\t\t\t# continue\n\t\t\t\tvals=()\n\t\t\t\tbreak\n\t\t\
    \tfi\n\t\tdone\n\t\t#if (( ${#vals[@]} > 0 )); then\n\t\tif [ ${#vals[@]} -gt\
    \ 0 ]; then\n\t\t\todd_vals+=(\"${vals[@]}\")\n\t\tfi\n\tdone\n\t# Python script\
    \ to sort the odd_vals\n\techo ${odd_vals[@]} | xargs -n1 | sort -n\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlist=$1\n\
    \n\tfor i in $list; do\n\t\tif [ $i -lt 0 ]; then\n\t\t\tcontinue\n\t\tfi\n\n\t\
    \t# If the number is divisible by an even number,\n\t\t# this will fail, which\
    \ is good\n\t\tif ! $(echo \"$i % 2\" | bc &> /dev/null); then\n\t\t\tcontinue\n\
    \t\tfi\n\n\t\t# If the number contains an even digit, this will fail\n\t\tif !\
    \ $(echo \"$i\" | grep -q \"[24680]\"); then\n\t\t\toutput+=($i)\n\t\tfi\n\tdone\n\
    \n\tif [ ${#output[@]} -gt 0 ]; then\n\t\tsort=`echo \"${output[@]}\" | tr \"\
    \ \" \"\\n\" | sort -n`\n\t\tprintf \"[%s]\" \"${sort[@]}\"\n\tfi\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo $(echo $1 | sed -r \"s/[0-9]+/\\0 $(has_even_digit $0)/g\" | \n       \
    \       grep \"^[0-9]+ 1$\" | sed -r \"s/[0-9]+ 1/\\0/g\" | \n              sort\
    \ -n)\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpyukkqyhv.sh: line 15: has_even_digit: command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\t[[\
    \ -z $1 ]] && echo '[]' && return\n\techo -n \"[\"\n\tfor n in $@; do\n\t\td=${n//[0-9]/}\n\
    \t\t[[ -z $d ]] && [[ ${#n} -eq ${#d} ]] && echo -n '\"'$n'\",'\n\tdone\n\techo\
    \ -n \"]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo -n '['\n    for i in $1; do\n        if $(echo \"$i\" | grep -q -v '[24680]');\
    \ then\n            printf '\"%s\", ' \"$i\"\n        fi\n    done | sed 's/,\
    \ $//'\n    echo ']'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=( $1 )\n    local res=()\n    local odd_count=0\n    for n in ${list[@]};\
    \ do\n        if [[ $n =~ [24680] ]]; then\n            continue\n        fi\n\
    \        res+=( $n )\n    done\n    if [[ ${#res[@]} -gt 0 ]]; then\n        echo\
    \ ${res[@]}\n    fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  if\
    \ [[ -z \"$1\" ]]; then\n    echo '[]'\n    return 0\n  fi\n  local res x\n  for\
    \ x in \"$@\"; do\n    if [[ $x =~ ^[0-9]+$ ]]; then\n      res+=($x)\n    fi\n\
    \  done\n  if [[ -z \"$res\" ]]; then\n    echo '[]'\n    return 0\n  fi\n  echo\
    \ \"[\"\n  for ((i=0; i<${#res[@]}; i++)); do\n    if grep -q '[24680]' <<< ${res[$i]};\
    \ then\n      continue\n    fi\n    if (( i == ${#res[@]} - 1 )); then\n     \
    \ echo \"  \\\"${res[$i]}\\\"\"\n    else\n      echo \"  \\\"${res[$i]}\\\",\"\
    \n    fi\n  done\n  echo \"]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ python -c \"print [x for x in '$1'.split() if not any(y in str(x) for y in ('0',\
    \ '2', '4', '6', '8'))]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=$@\n    local digits=$(echo $list | sed 's/\\s/\\n/g' | sort -r)\n\
    \    local oifs=$IFS\n    IFS=''\n    local result=()\n    for n in $digits; do\n\
    \        IFS=$oifs\n        even=$(echo $n | grep -E \"[24680]\")\n        if\
    \ [ -z \"$even\" ]; then\n            # even number of digits\n            result+=($n)\n\
    \        fi\n    done\n    echo ${result[@]}\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ arg=$1\n  local arg_arr=( $arg )\n  local digits_arr=()\n  local numbers=( $(printf\
    \ \"%s\\n\" \"${arg_arr[@]}\" | sort -n) )\n  local num=''\n  local i=0\n  local\
    \ length=0\n  local digit=''\n  local even=''\n  local digits_hash=()\n  local\
    \ unique_digits_arr=()\n  local unique_digits_arr_len=0\n  local even_arr=()\n\
    \  local even_arr_len=0\n  local digits_arr_len=0\n  local digits_hash_len=0\n\
    \  local index=0\n  local remove_index=0\n  for num in \"${numbers[@]}\"; do\n\
    \    length=${#num}\n    i=0\n    digits_arr=()\n    even_arr=()\n    while [\
    \ $i -lt $length ]; do\n      digit=${num:$i:1}\n      digits_arr+=($digit)\n\
    \      if [ $(($digit % 2)) -eq 0 ]; then\n        even_arr+=($digit)\n      fi\n\
    \      ((i++))\n    done\n    even_arr_len=${#even_arr[@]}\n    if [ $even_arr_len\
    \ -eq 0 ]; then\n      digits_arr_len=${#digits_arr[@]}\n      index=0\n     \
    \ while [ $index -lt $digits_arr_len ]; do\n        digits_hash[\"${digits_arr[$index]}\"\
    ]=1\n        ((index++))\n      done\n    fi\n  done\n  for digit in \"${!digits_hash[@]}\"\
    ; do\n    unique_digits_arr+=($digit)\n  done\n  if [ ${#unique_digits_arr[@]}\
    \ -gt 0 ]; then\n    unique_digits_arr_len=${#unique_digits_arr[@]}\n    digits_hash_len=${#digits_hash[@]}\n\
    \    i=0\n    index=0\n    remove_index=0\n    while [ $i -lt $unique_digits_arr_len\
    \ ]; do\n      remove_\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpdpqcjpt2.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpdpqcjpt2.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local ret=()\n    for n in $1; do\n        n_digits=$(echo $n | grep -o .)\n\
    \        even_count=0\n        for d in $n_digits; do\n            if [[ $((d\
    \ % 2)) -eq 0 ]]; then\n                even_count=$((even_count + 1))\n     \
    \       fi\n        done\n        if [[ $even_count -eq 0 ]]; then\n         \
    \   ret+=(\"$n\")\n        fi\n    done\n    echo $(printf \"[%s]\" \"$(printf\
    \ '\"%s\" ' \"${ret[@]}\")\")\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ s=\"(\"\n    for i in $1; do\n        if [[ $i =~ [13579] ]]; then\n       \
    \     s+=\"\\\"$i\\\" \"\n        fi\n    done\n    echo $s\")\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local input_list=($1)\n    local unique_numbers=()\n    for i in ${input_list[@]};\
    \ do\n        if [[ \"$i\" =~ ^[0-9]+$ ]]; then\n            local number_of_even_digits=0\n\
    \            for (( j=0; j<${#i}; j++ )); do\n                if [[ \"${i:$j:1}\"\
    \ =~ ^[24680]$ ]]; then\n                    (( number_of_even_digits++ ))\n \
    \               fi\n            done\n            if [[ $number_of_even_digits\
    \ -eq 0 ]]; then\n                unique_numbers+=($i)\n            fi\n     \
    \   fi\n    done\n    if [[ ${#unique_numbers[@]} -eq 0 ]]; then\n        echo\
    \ \"[]\"\n    else\n        echo -n \"[\"\n        for (( i=0; i<${#unique_numbers[@]};\
    \ i++ )); do\n            echo -n '\"'${unique_numbers[$i]}'\"'\n            if\
    \ [[ $i -lt $((${#unique_numbers[@]}-1)) ]]; then\n                echo -n \"\
    , \"\n            fi\n        done\n        echo \"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ input_lst=$(echo $1 | tr \" \" \"\\n\")\n    output_lst=\"\"\n    for n in $input_lst;\
    \ do\n        echo $n | grep -Eq \"^[1-9][0-9]*$\" &&\n        if [[ $n -eq $(echo\
    \ $n | tr -d 0 | sed 's/\\(.\\)/\\1\\n/g' | sort -u | tr -d '\\n') ]]; then\n\
    \            output_lst=\"$output_lst $n\"\n        fi\n    done\n    echo $output_lst\
    \ | tr \" \" \"\\n\" | sort -n | awk '{printf(\"\\\"%s\\\" \", $0)}'\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\t#\
    \ loop through input list\n\tfor num in $1; do\n\t\t# is it even?\n\t\tif [ $((num\
    \ % 2)) -eq 0 ]; then\n\t\t\techo '\"'\"$num\"'\"'\n\t\tfi\n\tdone\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -a numbers=${1}\n    declare -a result=()\n    for n in ${numbers[@]};\
    \ do\n        if [[ $n =~ ^[1-9][0-9]*$ ]]; then\n            result=(\"${result[@]}\"\
    \ \"$n\")\n        fi\n    done\n    echo ${result[@]} | tr \" \" \"\\n\" | sort\
    \ | uniq\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local _ret\n    for i in $(echo $1); do\n        if [[ $(echo $i | sed 's/.*[2-4]//g')\
    \ == $i ]]; then\n            _ret=\"$_ret $i\"\n        fi\n    done\n    echo\
    \ $_ret\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlist=$(echo\
    \ \"$1\" | tr \" \" \"\\n\")\n\tresult=()\n\tfor x in $list; do\n\t\tfound=$(echo\
    \ $x | grep -q [24680] && echo \"yes\" || echo \"no\")\n\t\tif [ \"$found\" =\
    \ \"no\" ]; then\n\t\t\tresult+=($x)\n\t\tfi\n\tdone\n\tif [ ${#result[@]} -eq\
    \ 0 ]; then\n\t\techo \"[]\"\n\telse\n\t\techo $(printf '[%s]\\n' \"${result[@]}\"\
    \ | sed 's/ /\", \"/g')\n\tfi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  result=\"\
    []\"\n  unset unique_list\n  IFS=\" \" read -r -a unique_list <<< \"$1\"\n  for\
    \ i in \"${unique_list[@]}\"; do\n    # Check if $i contains even digits:\n  \
    \  test $(( ${i//[^0246]/} )) == \"\" && continue\n    if [[ \"$result\" == \"\
    []\" ]]; then\n      result=\"['\\\"$i\\\"']\"\n    else\n      result=\"$result,'\\\
    \"$i\\\"'\"\n    fi\n  done\n  echo $result\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ lst=\"$@\"\n  lst=($lst)\n  unique_digits_helper \"${lst[@]}\"\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmppyd5wztw.sh: line 15: unique_digits_helper: command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ arr=$(echo $@ | tr ' ' '\\n' | sort -n)\n    even_digits=$(echo $@ | tr ' '\
    \ '\\n' | sed 's/[0-9]/&\\n/g' | grep -v '[02468]' | sort -nu | tr '\\n' ' ')\n\
    \    echo \"[\"$(echo \"$arr\" | tr '\\n' ' ' | grep -v -w \"$even_digits\" |\
    \ tr ' ' ',')\"]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # Write your code here\n    even_digits=$(grep -o '[13579]' <<< $1 | wc -w)\n\
    \    num_digits=$(wc -w <<< $1)\n    if [ $even_digits -ne $num_digits ]; then\n\
    \        echo -n \"[]\"\n    else\n        arr=($1)\n        arr=(\"${arr[@]}\"\
    \ \"${arr[@]}\" \"${arr[@]}\")\n        echo -n \"[\"\n        for (( i=0; i<${#arr[@]};\
    \ i++ )); do\n            for (( j=i+1; j<${#arr[@]}; j++ )); do\n           \
    \     if [ ${arr[i]} -gt ${arr[j]} ]; then\n                    temp=${arr[i]}\n\
    \                    arr[i]=${arr[j]}\n                    arr[j]=$temp\n    \
    \            fi\n            done\n        done\n        echo -n \"\\\"${arr[0]}\\\
    \"\"\n        for (( i=1; i<${#arr[@]}; i++ )); do\n            if [ ${arr[i]}\
    \ -ne ${arr[i-1]} ]; then\n                echo -n \", \\\"${arr[i]}\\\"\"\n \
    \           fi\n        done\n        echo -n \"]\"\n    fi\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ -a l\n  local l_sorted l_filtered\n  read -a l <<< \"$1\"\n  # Filter the odd\
    \ digits:\n  for i in \"${l[@]}\"; do\n    echo \"$i\" | grep -qE '[24680]' &&\
    \ continue\n    l_filtered+=( \"$i\" )\n  done\n  # Sort the filtered array:\n\
    \  IFS=$'\\n'\n  l_sorted=( $(sort <<< \"${l_filtered[*]}\") )\n  echo -n \"[${l_sorted[*]//\
    \ /, }]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local even_digits=$(echo \"$1\" | sed 's/\\([0-9]*[02468]\\)/\\1 /g')\n    if\
    \ [ -z \"$even_digits\" ]; then\n        echo \"$1\"\n    else\n        echo $(echo\
    \ \"$1\" | tr ' ' '\\n' | sort -g | grep -vx \"$even_digits\")\n    fi\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local xs=$1\n    local has_even_digit=\"no\"\n    local i\n    local res=[]\n\
    \    for i in $xs; do\n        if [[ $i =~ [02468] ]]; then\n            has_even_digit=\"\
    yes\"\n        else\n            res+=($i)\n        fi\n    done\n    if [[ \"\
    $has_even_digit\" == \"no\" ]]; then\n        res+=($xs)\n    fi\n    echo $(printf\
    \ '%s\\n' \"${res[@]}\" | sort -n | tr '\\n' ' ')\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local mylist=$@\n    local res=()\n    for i in $mylist; do\n        if ! [[\
    \ $i =~ [02468] ]]; then\n            res+=($i)\n        fi\n    done\n    echo\
    \ ${res[@]} | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=\"$@\"\n    local results=\"\"\n    local digits=\"\"\n    local\
    \ is_even=\"\"\n    # Remove the even digits\n    for integer in ${list}; do\n\
    \        is_even=false\n        for digit in $(echo \"${integer}\" | grep -o .);\
    \ do\n            if [[ $((digit % 2)) -eq 0 ]]; then\n                is_even=true\n\
    \                break\n            fi\n        done\n        if [[ ${is_even}\
    \ = false ]]; then\n            results=\"${results} ${integer}\"\n        fi\n\
    \    done\n    # Sort list and filter duplicates\n    for value in $(echo \"${results}\"\
    \ | tr ' ' '\\n' | sort -n | uniq); do\n        digits=\"${digits} ${value}\"\n\
    \    done\n    echo \"${digits}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # check for even numbers using modulo and append to an array\n    local evenNums=($(echo\
    \ $@ | tr \" \" \"\\n\" | grep -E \"[0-9]*[02468]$\"))\n    echo \"${evenNums[@]}\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ OLDIFS=$IFS\n    IFS=' '\n    declare -a list=($1)\n    IFS=$OLDIFS\n    declare\
    \ -a ret=()\n    ret_idx=0\n    for i in \"${list[@]}\"; do\n        has_even=0\n\
    \        for (( j=0; j<${#i}; j++ )); do\n            if [ $((i:$j:1)) -eq 0 ]\
    \ || [ $((i:$j:1)) -eq 2 ] || \\\n               [ $((i:$j:1)) -eq 4 ] || [ $((i:$j:1))\
    \ -eq 6 ] || \\\n               [ $((i:$j:1)) -eq 8 ]; then\n                has_even=1\n\
    \                break\n            fi\n        done\n        if [ $has_even -eq\
    \ 0 ]; then\n            ret[ret_idx]=$i\n            ret_idx=$((ret_idx+1))\n\
    \        fi\n    done\n    echo \"${ret[@]}\" | tr ' ' '\\n' | sort -n\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpai2ddll1.sh: line 22: i:0:1: syntax error in expression (error
    token is ":0:1")

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  echo\
    \ \"$@\" | tr ' ' '\\n' | grep -v '[02468]' | uniq | sort -n | tr '\\n' ' '\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  #\
    \ your code here\n  echo \"[]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local -a nums=(${1// / })\n    local -a result=()\n    for n in \"${nums[@]}\"\
    ; do\n        # Exclude even digits\n        [[ $n =~ [24680] ]] && continue\n\
    \        result+=($n)\n    done\n    # Sort the result\n    printf '%s\\n' \"\
    ${result[@]}\" | sort -n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ x in $1; do\n    for ((i=0; i<${#x}; i++)); do\n      [[ ${x:$i:1} =~ ^[02468]$\
    \ ]] && continue 2\n    done\n    echo -n '\"'$x'\" '\n  done\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local even=\"\"\n    local odd=\"1 3 5 7 9\"\n    local nums=$(echo \"$@\" |\
    \ xargs -n1 | sort -n)\n    local nums_sorted\n    # get even numbers\n    for\
    \ num in $nums; do\n        local digits=$(echo \"$num\" | sed 's/./& /g')\n \
    \       local digits_sorted=$(echo \"$digits\" | sort -n)\n        for digit in\
    \ $digits_sorted; do\n            if [[ \"$odd\" =~ \"$digit\" ]]; then\n    \
    \            continue\n            else\n                even+=\" $num\"\n   \
    \             break\n            fi\n        done\n    done\n    for num in $nums;\
    \ do\n        if [[ \"$even\" =~ \"$num\" ]]; then\n            continue\n   \
    \     else\n            nums_sorted+=\" $num\"\n        fi\n    done\n    echo\
    \ \"[$(printf '\"%s\" ' $nums_sorted)]\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ ( IFS=' ';\n    for x in $1; do\n        if [[ $x =~ ^[0-9]+$ ]]; then \n  \
    \          if [[ $x =~ ^[13579]+$ ]]; then\n                echo -n \"\\\"$x\\\
    \" \"\n            fi\n        fi\n    done\n    )\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tresult=()\n\
    \tfor i in $1; do\n\t\t# an empty string can be casted to 0, so we check the length\n\
    \t\tif [[ \"${#i}\" == 0 ]]; then\n\t\t\tcontinue\n\t\tfi\n\t\t# traverse all\
    \ digits, a digit is a char between 0 and 9\n\t\t# a digit is even if its remainder\
    \ when divided by 2 is 0\n\t\t# so we use the modulus operator\n\t\t# if we find\
    \ an even digit we continue\n\t\tfor (( j=0; j<${#i}; j++ )); do\n\t\t\tdigit=\"\
    ${i:$j:1}\"\n\t\t\tif [[ \"$(( digit % 2 ))\" == 0 ]]; then\n\t\t\t\tbreak\n\t\
    \t\tfi\n\t\tdone\n\t\t# if we haven't found an even digit we add the number to\
    \ the list\n\t\tif [[ \"$j\" == \"${#i}\" ]]; then\n\t\t\tresult+=(\"$i\")\n\t\
    \tfi\n\tdone\n\t# sort numbers\n\tfor (( i=0; i<${#result[@]}; i++ )); do\n\t\t\
    for (( j=i+1; j<${#result[@]}; j++ )); do\n\t\t\tif [[ \"${result[$i]}\" -gt \"\
    ${result[$j]}\" ]]; then\n\t\t\t\ttmp=\"${result[$i]}\"\n\t\t\t\tresult[$i]=\"\
    ${result[$j]}\"\n\t\t\t\tresult[$j]=\"$tmp\"\n\t\t\tfi\n\t\tdone\n\tdone\n\t#\
    \ format the output\n\techo -n \"[\"\n\tfor (( i=0; i<${#result[@]}; i++ )); do\n\
    \t\techo -n '\"'\n\t\techo -n \"${result[$i]}\"\n\t\techo -n '\"'\n\t\tif [[ \"\
    $i\" != \"$(( ${#result[@]} - 1 ))\" ]]; then\n\t\t\techo -n \", \"\n\t\tfi\n\t\
    done\n\techo \"]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlist=$(echo\
    \ $1 | tr \" \" \"\\n\")\n\todd_list=\"\"\n\tfor n in $list; do\n\t\todd=true\n\
    \t\twhile [ $n -gt 0 ]; do\n\t\t\tdigit=$((n % 10))\n\t\t\tif [ $((digit % 2))\
    \ -eq 0 ]; then\n\t\t\t\todd=false\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\tn=$((n / 10))\n\
    \t\tdone\n\t\tif [ $odd = true ]; then\n\t\t\todd_list=\"$odd_list $n\"\n\t\t\
    fi\n\tdone\n\tsorted_list=$(echo $odd_list | tr \" \" \"\\n\" | sort -g)\n\toutput=$(echo\
    \ $sorted_list | tr \" \" \",\")\n\techo \"[$output]\"\n}\n\ncandidate() {\n \
    \   unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ -a y\n  local -a x\n\n  IFS=' ' read -r -a x <<< \"$1\"\n  for i in \"${x[@]}\"\
    ; do\n    if [[ \"$i\" =~ ^[13579]+$ ]]; then\n      y+=(\"$i\")\n    fi\n  done\n\
    \  declare -p y\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ nums=( $1 )\n  local result=()\n  for (( i=0; i<${#nums[@]}; i++ )); do\n  \
    \  local digits=( $(echo \"${nums[$i]}\" | grep -o .) )\n    local is_all_odd=true\n\
    \    for (( j=0; j<${#digits[@]}; j++ )); do\n      if (( \"${digits[$j]}\" %\
    \ 2 == 0 )); then\n        is_all_odd=false\n        break\n      fi\n    done\n\
    \    if [[ \"$is_all_odd\" == true ]]; then\n      result+=(\"${nums[$i]}\")\n\
    \    fi\n  done\n  IFS=$'\\n' sorted=($(sort <<<\"${result[*]}\"))\n  unset IFS\n\
    \  echo ${sorted[@]}\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ a=($1)\n    res=()\n    for x in ${a[@]}; do\n        if $(echo \"$x\" | grep\
    \ -E \"[0-9]*[13579][0-9]*\" &> /dev/null); then\n            res+=(\"$x\")\n\
    \        fi\n    done\n    echo \"${res[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -a arr=($1)\n    declare -a result=()\n    for i in \"${arr[@]}\"; do\n\
    \        if [[ $i =~ [24680] ]]; then\n            continue\n        fi\n    \
    \    result+=(\"$i\")\n    done\n    echo \"${result[@]}\"\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: -1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # Inefficient way:\n    # echo $1 | tr ' ' '\\n' | grep -P '^(?=.*[1-9])(?=.*[0-9])[1-9][0-9]*$'\
    \ | tr '\\n' ' '\n\n    # Much faster:\n    awk '$1 !~ /[02468]/ {print $1}'\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=33 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=37 encoding='utf-8'>
  timestamp: 1660023454
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ numbers=$1\n    sorted_numbers=$(echo $numbers | sed 's/ /\\n/g' | sort -n)\n\
    \    echo -n \"[\"\n    for number in $sorted_numbers; do\n        if [[ $number\
    \ =~ ^[1-9][1-9]*$ ]]; then\n            echo -n \"\\\"$number\\\",\"\n      \
    \  fi\n    done\n    echo -n \"]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local lst=()\n    local rst=()\n    read -ra lst <<< \"$1\"\n    for item in\
    \ \"${lst[@]}\"; do\n        local has_even=0\n        for ((i=0; i<${#item};\
    \ i++)); do\n            if [[ \"${item:$i:1}\" =~ [24680] ]]; then\n        \
    \        has_even=1\n                break\n            fi\n        done\n   \
    \     if [ $has_even -eq 0 ]; then\n            rst+=($item)\n        fi\n   \
    \ done\n    echo \"${rst[@]}\" | tr ' ' '\\n' | sort -n\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=(\"$@\")\n    local i=0\n    local candidates\n    local out\n  \
    \  while [[ $i -lt ${#list[@]} ]]; do\n        # echo \"i:$i\" >&2\n        #\
    \ echo \"list[i]:${list[i]}\" >&2\n        if [[ \"${list[i]}\" =~ ^[1-9]+$ ]];\
    \ then\n            # echo \"candidates+=(${list[i]})\" >&2\n            candidates+=(${list[i]})\n\
    \        fi\n        ((i++))\n    done\n    i=0\n    local number\n    local j\n\
    \    while [[ $i -lt ${#candidates[@]} ]]; do\n        number=${candidates[i]}\n\
    \        j=0\n        while [[ $j -lt ${#number} ]]; do\n            if [[ \"\
    ${number:$j:1}\" =~ [02468] ]]; then\n                break\n            fi\n\
    \            ((j++))\n        done\n        if [[ $j -eq ${#number} ]]; then\n\
    \            out+=($number)\n        fi\n        ((i++))\n    done\n    if [[\
    \ ${#out[@]} -eq 0 ]]; then\n        echo \"[]\"\n    else\n        echo \"[\\\
    \"${out[*]}\\\"]\"\n    fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # write your code here\n    local sorted_list=\"\"\n    local ans_list=\"\"\n\
    \    for i in $1; do\n        if [[ $i =~ ^[1-9]+$ ]]; then\n            sorted_list=\"\
    $sorted_list $i\"\n        fi\n    done\n    sorted_list=$(echo $sorted_list |\
    \ tr \" \" \"\\n\" | sort -n)\n    for i in $sorted_list; do\n        if [[ $i\
    \ =~ ^[1-9]+$ ]]; then\n            ans_list=\"$ans_list $i\"\n        fi\n  \
    \  done\n    ans_list=$(echo $ans_list | tr \" \" \"\\n\" | sort -n)\n    if [[\
    \ -z $ans_list ]]; then\n        echo \"[]\"\n    else\n        echo \"[$(echo\
    \ $ans_list | tr \" \" \"\\\",\\\"\")]\"\n    fi\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tsorted=()\n\
    \tfor number in $@; do\n\t\tif [[ $number =~ [0-9]*[13579][0-9]* ]]; then\n\t\t\
    \tsorted+=($number)\n\t\tfi\n\tdone\n\tif [ ${#sorted[@]} -eq 0 ]; then\n\t\t\
    echo \"[]\"\n\telse\n\t\techo $(echo \"[${sorted[@]}]\" | sed -e 's/\\s/\", \"\
    /g')\n\tfi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ i in ${1}; do\n    number=${i}\n    while [ ${number} -gt 0 ]; do\n      digit=$((\
    \ ${number} % 10 ))\n      if [ $(( ${digit} % 2 )) -eq 0 ]; then\n        break\n\
    \      fi\n      number=$(( ${number} / 10 ))\n    done\n    [ ${number} -eq 0\
    \ ] && echo -n '\"'${i}'\" '\n  done\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ new_list=\"\"\n  for int in $(echo $1); do\n    for digit in $(echo $int | fold\
    \ -w1); do\n      if (( $(($digit % 2)) == 0 )); then\n        # Skip this number\n\
    \        continue 2\n      fi\n    done\n    new_list=\"$new_list $int\"\n  done\n\
    \  echo -n $new_list | sed -e 's/^[[:space:]]*//' | sort -n\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ list=\"$(echo $@ | tr \" \" \"\\n\")\"\n    # echo \"list=$list\"\n    for x\
    \ in $list; do\n        echo \"x=$x\"\n        ret=\"$(echo $x | tr -d [0-9] |\
    \ wc -c)\"\n        echo \"ret=$ret\"\n        if [ \"$ret\" -eq \"1\" ]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  #\
    \ TODO\n  res=[]\n  echo $1 | tr \" \" \"\\n\" | while read number; do\n    if\
    \ [[ $number == *[13579]* ]]; then\n      if [[ $number == *[2468]* ]]; then\n\
    \        continue\n      else\n        echo $number\n      fi\n    fi\n  done\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local str\n    local arr\n\n    str=\"$(unique_digits_helper $@)\"\n    echo\
    \ \"[$str]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpl_080ycq.sh: line 16: unique_digits_helper: command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local list=$1\n    for number in $list; do\n        local nb=${number#0}\n \
    \       if [[ $nb == +([1-9]) ]]; then\n            echo \"\\\"$number\\\"\"\n\
    \        fi\n    done | sort -n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -A digits\n    # remove all items which contain an even digit\n    for\
    \ number in $1\n    do\n        # loop over all digits in $number and count occurrences\n\
    \        for digit in $(sed -E 's/(.)/\\1 /g' <<< $number)\n        do\n     \
    \       (( digits[$digit]++ ))\n        done\n        # for all digits, if even\
    \ then remove number\n        for digit in ${!digits[@]}\n        do\n       \
    \     if [ $(( digit % 2 )) -eq 0 ]\n            then\n                unset number\n\
    \                break\n            fi\n        done\n        # all digits odd\
    \ then add number to list\n        if [ -n \"$number\" ]\n        then\n     \
    \       numbers+=\"$number \"\n        fi\n        # clear digit count\n     \
    \   unset digits\n    done\n    # sort list\n    numbers=$(tr ' ' '\\n' <<< $numbers\
    \ | sort -n)\n    # convert to array\n    numbers=($numbers)\n    # output\n \
    \   for number in ${numbers[@]}\n    do\n        echo '\"'$number'\"'\n    done\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo \"$1\" | grep -E '^[[:digit:]]*$' | sort -n | uniq -d\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  echo\
    \ $1 | tr \" \" \"\\n\" | grep -v \".*[02468].*\" | xargs echo\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local -a nums=(\"$@\")\n    local -a unique_nums\n    local n\n    for n in\
    \ \"${nums[@]}\"; do\n        if [[ \"$n\" =~ [0-9]*[02468][0-9]* ]]; then\n \
    \           continue\n        fi\n        unique_nums+=(\"$n\")\n    done\n  \
    \  echo \"${unique_nums[@]}\" | tr ' ' '\\n' | sort -n | xargs echo -n\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ array=($1)\n\tlocal i=0\n\tlocal len=${#array[@]}\n\tlocal output=\"[\"\n\t\
    for((i=0; i<len; i++)); do\n\t\tif [[ ${array[$i]} -lt 10 ]]; then\n\t\t\toutput+='\"\
    '${array[$i]}'\"'\n\t\t\tif [[ $i -lt $(($len-1)) ]]; then\n\t\t\t\toutput+=\"\
    , \"\n\t\t\tfi\n\t\t\tcontinue\n\t\tfi\n\t\twhile [[ ${array[$i]} -gt 0 ]]; do\n\
    \t\t\tif [[ $((${array[$i]}%2)) -eq 0 ]]; then\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\t\
    array[$i]=$((${array[$i]}/10))\n\t\tdone\n\t\tif [[ ${array[$i]} -gt 0 ]]; then\n\
    \t\t\tcontinue\n\t\tfi\n\t\toutput+='\"'${array[$i]}'\"'\n\t\tif [[ $i -lt $(($len-1))\
    \ ]]; then\n\t\t\toutput+=\", \"\n\t\tfi\n\tdone\n\toutput+=\"]\"\n\techo $output\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # TODO:\n    # 1. Map all integers with unique digits to a list.\n    # 2. Return\
    \ the list in increasing order.\n    echo \"[]\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  declare\
    \ -a result\n  local -r gt_0_regex=\"^([1-9][0-9]*|0)$\"\n  local -r even_digit_regex=\"\
    [02468]\"\n  local -a params\n\n  read -ra params <<< \"$1\"\n  for p in \"${params[@]}\"\
    ; do\n    if [[ $p =~ $gt_0_regex ]]; then\n      if ! [[ $p =~ $even_digit_regex\
    \ ]]; then\n        result+=(\"$p\")\n      fi\n    fi\n  done\n\n  if [ \"${#result[@]}\"\
    \ -gt 0 ]; then\n    echo \"$(IFS=$'\\n'; echo \"${result[*]}\")\"\n  else\n \
    \   echo '[]'\n  fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # write your code here\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpfhq10hlo.sh: line 14: syntax error near unexpected token `}''

    /tmp/tmpfhq10hlo.sh: line 14: `}''

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  declare\
    \ -a res=()\n  for num in $1; do\n    echo $num | grep -P '\\d*[13579]\\d*' &>\
    \ /dev/null\n    if [ $? -eq 0 ]; then\n      res+=($num)\n    fi\n  done\n  echo\
    \ \"${res[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -a result=()\n    for i in $1; do\n        even_digit=false\n      \
    \  digits=$(echo $i | grep -o .)\n        for j in $digits; do\n            if\
    \ [ $(($j % 2)) -eq 0 ]; then\n                even_digit=true\n             \
    \   break\n            fi\n        done\n        if [ $even_digit = false ]; then\n\
    \            result+=($i)\n        fi\n    done\n    echo ${result[@]} | sed 's/\
    \ /, /g'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  echo\
    \ \"[$(echo $1 | sed 's/\\([0-9]*[13579]\\)/\"\\1\"/g' | tr ' ' ',')]\"\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ [ $# -eq 0 ] && return 0\n    all_odd=1\n    for num in $1; do\n        while\
    \ [ $num -gt 0 ]; do\n            if [ $((num % 2)) -eq 0 ]; then\n          \
    \      all_odd=0\n                break\n            fi\n            num=$((num\
    \ / 10))\n        done\n        if [ $all_odd -eq 1 ]; then\n            echo\
    \ -n \"$num \"\n        fi\n        all_odd=1\n    done\n}\n\ncandidate() {\n\
    \    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15\
    \ 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\"\
    \ ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  declare\
    \ -a xs=($1)\n  declare -a ys=()\n  for x in ${xs[@]}; do\n    if echo \"$x\"\
    \ | grep -Eq \"\\b[13579]+\\b\"; then\n      ys+=($x)\n    fi\n  done\n  echo\
    \ \"${ys[@]}\" | tr ' ' '\\n' | sort -n | tr '\\n' ' '\n}\n\ncandidate() {\n \
    \   unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33\
    \ 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n\
    \    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ RESULT=()\n  local ARRAY=(${1// / })\n\n  for x in \"${ARRAY[@]}\"; do\n   \
    \ if [[ $x =~ ^[13579]+$ ]]; then\n      RESULT+=(\"$x\")\n    fi\n  done\n\n\
    \  IFS=$'\\n'\n  if [ ${#RESULT[@]} -eq 0 ]; then\n    echo \"[]\"\n  else\n \
    \   echo \"['\"$(printf \"%s', '\" \"${RESULT[@]}\")\"']\"\n  fi\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  #\
    \ TODO: insert your solution here\n  # print all the numbers with unique digits\n\
    \  echo \"${@}\" | awk 'BEGIN {\n        print \"[\";\n      } \n      {\n   \
    \     for (i = 1; i <= NF; i++) {\n          if (match($i, /([0-9]+)/)) {\n  \
    \          for (j = 1; j <= length($i); j++) {\n              if (match(substr($i,j,1),\
    \ /([0-9])/)) {\n                if (count[$i] == 0) {\n                  count[$i]\
    \ = 1;\n                } else {\n                  count[$i]++;\n           \
    \     }\n              }\n            }\n          }\n        }\n      } \n  \
    \    END {\n        for (k in count) {\n          if (count[k] == 1) {\n     \
    \       printf(\"\\\"%s\\\"\\n\", k);\n          }\n        }\n        print \"\
    ]\";\n      }'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local sum=0\n    for x in $1; do\n        [[ \"${x}\" =~ ^[0-9]+$ ]] || continue\n\
    \        sum=0\n        for (( j=${#x}-1; j>=0; j-- )); do\n            n=${x:$j:1}\n\
    \            ((sum+=n))\n        done\n        [[ $((sum%2)) == 0 ]] && echo \"\
    ${x}\"\n    done | sort -n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local digits=$(echo \"$1\" | tr ' ' '\\n' | sort -n)\n    local result=\"\"\n\
    \    for i in $digits; do\n        local even=$(echo $i | grep -o '[24680]' |\
    \ sort -u)\n        [ -z \"$even\" ] && result=\"$result $i\"\n    done\n    echo\
    \ \"\\\"$result\\\"\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ nums=$@\n  local num_arr=($nums)\n  local len=${#num_arr[@]}\n  local result=()\n\
    \  for (( i=0; i<$len; i++ ))\n  do\n    if [[ ${num_arr[$i]} -lt 10 ]]; then\n\
    \      # this is a single digit number, so it's all good\n      result+=(${num_arr[$i]})\n\
    \    else\n      # this is a multi-digit number, so we need to check each digit\n\
    \      local num=${num_arr[$i]}\n      local all_odd=1\n      while [[ $num -gt\
    \ 0 ]]; do\n        local last_digit=$(( $num % 10 ))\n        if [[ $(( $last_digit\
    \ % 2 )) -eq 0 ]]; then\n          # this is an even digit, so we need to skip\
    \ this number\n          all_odd=0\n          break\n        fi\n        num=$((\
    \ $num / 10 ))\n      done\n      if [[ $all_odd -eq 1 ]]; then\n        result+=(${num_arr[$i]})\n\
    \      fi\n    fi\n  done\n  printf '%s\\n' \"${result[@]}\" | sort -n\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ num in $1; do\n    if [[ ! \"$num\" =~ [24680] ]]; then\n      echo -n \"$num\"\
    \n    fi\n  done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ -n vars=$1\n  local result=\"\"\n  for i in $vars; do\n    even=\"\"\n    if\
    \ [[ $i =~ [02468] ]]; then\n      even=\"TRUE\"\n    fi\n    if [[ $even != \"\
    TRUE\" ]]; then\n      result=\"$result $i\"\n    fi\n  done\n  echo \"$result\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpipix4pb2.sh: line 13: local: `15 33 1422 1'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # Write your code here\n    if [ \"$#\" -eq 0 ]; then\n        return\n    fi\n\
    \    local res=\"\"\n    for x in \"$@\"; do\n        if echo \"$x\" | grep -q\
    \ \"[[:digit:]]*[02468]\"; then\n            continue\n        fi\n        res+=\"\
    $x \"\n    done\n    echo \"$res\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  #\
    \ all even digits\n  even_digits=( $(echo {0..9} | tr \" \" \"\\n\" | grep -E\
    \ \"[02468]\") )\n  # each digit of each number in the input list\n  digits=(\
    \ $(echo $1 | tr \" \" \"\\n\" | tr -d \"^0-9\") )\n  # iterate over the digits\
    \ and remove the even ones\n  for digit in ${even_digits[@]}; do\n    digits=(\
    \ ${digits[@]/$digit} )\n  done\n  # loop over the input list and filter out the\
    \ numbers\n  # with even digits\n  output=()\n  for number in $1; do\n    # count\
    \ the number of digits in the number\n    num_digits=$(echo $number | tr -d \"\
    ^0-9\" | wc -c)\n    # keep even numbers\n    if [ $num_digits == $(echo \"${digits[@]}\"\
    \ | tr \" \" \"\\n\" | grep -c \"$number\") ]; then\n      output+=($number)\n\
    \    fi\n  done\n  # sort and print the output\n  sorted_output=( $(echo ${output[@]}\
    \ | tr \" \" \"\\n\" | sort -n) )\n  echo -n \"[\"\n  for (( i=0; i<${#sorted_output[@]};\
    \ i++ )); do\n    number=${sorted_output[$i]}\n    if [ $i -ne 0 ]; then\n   \
    \   echo -n \", \"\n    fi\n    echo -n \"\\\"$number\\\"\"\n  done\n  echo -n\
    \ \"]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # TODO: Write your code here\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphtqq7w6i.sh: line 14: syntax error near unexpected token `}''

    /tmp/tmphtqq7w6i.sh: line 14: `}''

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ set -f\n    local -n nums=$1\n    local unique_digits_regex=\"^[123456789]+$\"\
    \n    local unique_digits_result\n    for i in ${nums[@]}; do\n        [[ $i =~\
    \ $unique_digits_regex ]] && unique_digits_result+=\"$i \"\n    done\n    echo\
    \ $unique_digits_result\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpx2o2g02k.sh: line 14: local: `15 33 1422 1'': invalid variable
    name for name reference

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ digits=\"$1\"\n\tlocal array=($digits)\n\tlocal res=\"\"\n\tfor d in ${array[@]};\
    \ do\n\t\tif [[ $d =~ ^[13579]+$ ]]; then\n\t\t\tres=\"$res $d\"\n\t\tfi\n\tdone\n\
    \tlocal new_array=($res)\n\tfor ((i=0; i<${#new_array[@]}; i++)); do\n\t\tfor\
    \ ((j=i+1; j<${#new_array[@]}; j++)); do\n\t\t\tif [[ ${new_array[$i]} -gt ${new_array[$j]}\
    \ ]]; then\n\t\t\t\tlocal tmp=${new_array[$i]}\n\t\t\t\tnew_array[$i]=${new_array[$j]}\n\
    \t\t\t\tnew_array[$j]=$tmp\n\t\t\tfi\n\t\tdone\n\tdone\n\tfor d in ${new_array[@]};\
    \ do\n\t\techo \"\\\"$d\\\"\"\n\tdone\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ -a res=()\n  local x\n  for x in $@; do\n    if echo \"$x\" | grep -q \"[02468]\"\
    ; then\n      continue\n    fi\n    res+=($x)\n  done\n  IFS=$'\\n'\n  sort <<<\
    \ \"${res[*]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ input=$1\n  local numbers=( $input )\n  local uniq_digits=\"\"\n  for number\
    \ in ${numbers[@]}; do\n    local has_even_digit=0\n    for (( i=0; i<${#number};\
    \ i++ )); do\n      local digit=${number:$i:1}\n      if [ $(($digit % 2)) -eq\
    \ 0 ]; then\n        has_even_digit=1\n        break\n      fi\n    done\n   \
    \ if [ $has_even_digit -eq 0 ]; then\n      if [ -z \"$uniq_digits\" ]; then\n\
    \        uniq_digits=\"$number\"\n      else\n        uniq_digits=\"$uniq_digits\
    \ $number\"\n      fi\n    fi\n  done\n  echo $uniq_digits | xargs -n1 | sort\
    \ -n | xargs -I{} echo '\"{}\"'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ evens=0\n\tlocal nums=()\n\tlocal i=0\n\tfor num in ${@}; do\n\t\tlocal s=${num}\n\
    \t\twhile [[ ${s} != 0 ]]; do\n\t\t\tlocal d=$(( s % 10 ))\n\t\t\tif [[ $(( d\
    \ % 2 )) -eq 0 ]]; then\n\t\t\t\tevens=1\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\ts=$((\
    \ s / 10 ))\n\t\tdone\n\t\tif [[ $evens -eq 0 ]]; then\n\t\t\tnums[$i]=${num}\n\
    \t\t\t(( i++ ))\n\t\tfi\n\t\tevens=0\n\tdone\n\tif [[ ${#nums[@]} -eq 0 ]]; then\n\
    \t\techo \"[]\"\n\telse\n\t\tnums=( $(echo ${nums[@]} | tr ' ' '\\n' | sort -n)\
    \ )\n\t\tfor ((i=0; i<${#nums[@]}; i++)); do\n\t\t\tnums[$i]=\"\\\"${nums[$i]}\\\
    \"\"\n\t\tdone\n\t\techo \"[${nums[@]}]\"\n\tfi\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ digits=()\n  while IFS= read -r -d ''; do\n    digits+=(\"$REPLY\")\n  done\
    \ < <(\n    # read the list\n    tr ' ' '\\n' <<< \"$1\" | sort -nr |\n    # filter\
    \ out the even digits\n    grep -v '[24680]' |\n    # sort again and print them\n\
    \    sort -n | tr '\\n' '\\0'\n  )\n  # escape the strings\n  local escaped_digits=()\n\
    \  for digit in \"${digits[@]}\"; do\n    escaped_digits+=(\"$(jq -n \"$digit\"\
    )\")\n  done\n  echo -n \"${escaped_digits[@]}\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpwv_08pq8.sh: line 27: jq: command not found

    /tmp/tmpwv_08pq8.sh: line 27: jq: command not found

    /tmp/tmpwv_08pq8.sh: line 27: jq: command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # Write your code here.\n    # \n    # Please note that \"echo\" doesn't work\
    \ as expected.\n    # Please use the command to return a result instead.\n   \
    \ # Example:\n    # local result=\"$(example-command)\"\n    # echo \"$result\"\
    \n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152\
    \ 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111\
    \ 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp636rqf0v.sh: line 20: syntax error near unexpected token `}''

    /tmp/tmp636rqf0v.sh: line 20: `}''

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local sorted_list\n    local is_all_odd\n    local digit\n    local -i i\n \
    \   local length\n    local -i number\n    local -i remainder\n    local -i even_counter\n\
    \    local -i odd_counter\n    sorted_list=()\n    length=0\n    for number in\
    \ $1; do\n        is_all_odd=1\n        even_counter=0\n        odd_counter=0\n\
    \        for ((i=0; i<${#number}; i++)); do\n            digit=${number:$i:1}\n\
    \            if [[ $digit == 0 || $digit == 2 || $digit == 4 || \\\n         \
    \         $digit == 6 || $digit == 8 ]]; then\n                even_counter+=1\n\
    \            else\n                odd_counter+=1\n            fi\n        done\n\
    \        if [ $even_counter -eq 0 ]; then\n            sorted_list+=($number)\n\
    \        fi\n    done\n    echo \"${sorted_list[@]}\" | tr ' ' '\\n' | sort -n\
    \ | tr '\\n' ' '\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ for i in $@; do\n        # Convert integers to strings\n        number=$(echo\
    \ \"$i\" | sed -e 's/./& /g')\n        has_even=0\n        for j in $number; do\n\
    \            # Check if the string contains an even digit\n            if [ $((j\
    \ % 2)) -eq 0 ]; then\n                has_even=1\n                break\n   \
    \         fi\n        done\n        if [ $has_even -eq 0 ]; then\n           \
    \ echo $i\n        fi\n    done | sort -n | xargs -I {} echo '\"{}\"'\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local set\n    local res=()\n    local -A unique_digits_seen\n    local -A unique_digits_not_seen\n\
    \    local odd_count\n    local even_count\n    local unique\n    local x\n  \
    \  local i\n    if [ -z \"$1\" ]; then\n        echo \"Call with arguments\" >&2\n\
    \        return 1\n    fi\n    set=\"$(echo \"$1\" | sed 's/  */ /g')\"\n    for\
    \ x in $set; do\n        odd_count=0\n        even_count=0\n        for i in $(seq\
    \ 1 9); do\n            if [ \"$((x % 2))\" -eq 0 ]; then\n                even_count=$((even_count\
    \ + 1))\n            else\n                odd_count=$((odd_count + 1))\n    \
    \        fi\n            x=$((x / 10))\n        done\n        if [ \"$odd_count\"\
    \ -gt 0 ] && [ \"$even_count\" -eq 0 ]; then\n            res+=(\"$i\")\n    \
    \    fi\n    done\n    if [ \"${#res[@]}\" -gt 0 ]; then\n        printf \"[\"\
    \n        for i in \"${res[@]}\"; do\n            printf '\"%s\" ' \"$i\"\n  \
    \      done\n        printf \"]\\n\"\n    else\n        printf \"[]\\n\"\n   \
    \ fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ list=$1\n  for x in $list; do\n    if [[ $x =~ ^[13579]+$ ]]; then\n      echo\
    \ -n \"[\\\"$x\\\"]\"\n    fi\n  done\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local\
    \ integers=\"$1\"\n  local list=\"\"\n  for integer in $integers; do\n    if [[\
    \ $integer =~ ^[1-9]+$ ]]; then\n      list+=$integer\" \"\n    fi\n  done\n \
    \ echo ${list% }\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ numbers=($1)\n    res=()\n    for i in ${numbers[@]}; do\n        if (( i >\
    \ 0 )); then\n            has_even=0\n            while (( i > 0 )); do\n    \
    \            digit=$(( i % 10 ))\n                if (( digit % 2 == 0 )); then\n\
    \                    has_even=1\n                    break\n                fi\n\
    \                i=$(( i / 10 ))\n            done\n            if (( has_even\
    \ == 0 )); then\n                res+=($i)\n            fi\n        fi\n    done\n\
    \    for i in ${res[@]}; do\n        echo -n \\\"$i\\\"\n        echo -n \", \"\
    \n    done\n    echo -n ']'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\techo\
    \ \"$1\" | tr ' ' '\\n' | grep \"^[13579]+$\" | sort -n | tr '\\n' ' ' | sed 's/^\
    \ //'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tdigits=`echo\
    \ $1 | sed -e 's/ /|/g'`\n\tdigits=`echo $digits | sed -e 's/[2468]//g'`\n\tif\
    \ [ $digits != \"\" ]; then\n\t\techo $digits | sed -e 's/|/\", \"/g' | sed -e\
    \ 's/^/\"/' | sed -e 's/$/\"/'\n\telse\n\t\techo \"[]\"\n\tfi\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # Write your solution below\n    # Do not echo or printf anything\n    # Do\
    \ not use external commands like awk, sed, etc\n    echo $1 | tr \" \" \"\\n\"\
    \ | grep \"^[1-9]*[^24680]$\" | sort -n\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 2
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local -a arr=()\n    for x in $1; do\n        if [[ $x =~ ^[13579]+$ ]]; then\n\
    \            arr+=($x)\n        fi\n    done\n    if [[ ${#arr[@]} -eq 0 ]]; then\n\
    \        echo \"[]\"\n    else\n        arr=(\"${arr[@]}\" | sort -g)\n      \
    \  echo \"${arr[@]}\"\n    fi\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpwi3to18t.sh: line 22: syntax error near unexpected token `|''

    /tmp/tmpwi3to18t.sh: line 22: `        arr=("${arr[@]}" | sort -g)''

    /tmp/tmpwi3to18t.sh: line 24: syntax error near unexpected token `fi''

    /tmp/tmpwi3to18t.sh: line 24: `    fi''

    '
  stdout: '

    '
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ IFS=\",\" nums array_nums\n\tnums=$(echo \"$@\" | tr ' ' ',')\n\tarray_nums=($nums)\n\
    \tlocal array_len=$(echo ${#array_nums[@]})\n\tlocal i=0\n\tlocal num\n\twhile\
    \ [ $i -lt $array_len ]; do\n\t\tnum=${array_nums[$i]}\n\t\tif echo \"$num\" |\
    \ grep -Eq '[02468]'; then\n\t\t\tunset 'array_nums[$i]'\n\t\t\t(( array_len--\
    \ ))\n\t\telse\n\t\t\t(( i++ ))\n\t\tfi\n\tdone\n\techo ${array_nums[@]}\n}\n\n\
    candidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ declare -a digits\n    digits=(\"$@\")\n    [[ -z \"${digits[@]}\" ]] && printf\
    \ '%s\\n' 'No array given' && return\n    for ((i=0; i<${#digits[@]}; i++)); do\n\
    \        if [[ \"${digits[$i]}\" =~ ^[0-9]+$ ]]; then\n            num=\"${digits[$i]}\"\
    \n            even=0\n            until [[ \"$num\" -eq 0 ]]; do\n           \
    \     digit=\"$((num % 10))\"\n                [[ \"$((digit % 2))\" -eq 0 ]]\
    \ && even=1 && break\n                num=\"$((num / 10))\"\n            done\n\
    \            ((even)) && digits[$i]=\"\" || digits[$i]=\"\\\"${digits[$i]}\\\"\
    \"\n        else\n            digits[$i]=\"\"\n        fi\n    done\n    printf\
    \ '%s\\n' \"${digits[@]}\" | awk NF | sort\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  echo\
    \ $1 | tr \" \" \"\\n\" | grep '^[^24680]+$' | sort -n | \\\n    tr '\\n' ' '\
    \ | sed 's/ $//g' | sed 's/^\\[\"/[\"/g' | \\\n    sed 's/\\ /\", \"/g' | sed\
    \ 's/\\([^ ]\\)$/\\1\"]/g'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\t#\
    \ Iterate over each number in $1.\n\t# $var is local to each iteration.\n\tfor\
    \ var in $1\n\tdo\n\t\t# Only keep numbers without even digits.\n\t\t# egrep -o\
    \ [13579] returns a list of the odd digits in $var\n\t\t# The length of this list\
    \ is equal to the length of $var if all digits are odd.\n\t\t# We use -ge instead\
    \ of == to allow for leading zeros.\n\t\t# sed removes leading zeros because we\
    \ want to order numbers by their magnitude, not by string comparison.\n\t\tif\
    \ [ ${#(egrep -o [13579] <<< $var)} -ge ${#var} ]\n\t\tthen\n\t\t\t# Quote to\
    \ preserve leading zeros and append result to the end of a list.\n\t\t\tRESULT=\"\
    $RESULT '\\\"$(sed 's/^0*//' <<< $var)\\\"'\"\n\t\tfi\n\tdone\n\t# Return the\
    \ sorted list.\n\techo \"[$(sort -n <<< $RESULT)]\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpg6qj5o3k.sh: line 22: ${#(egrep -o [13579] <<< $var)}: bad substitution

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo \"$1\" | awk '{\n        for (x = 1; x <= NF; x++) {\n            if ($x\
    \ !~ /2|4|6|8|0/) {\n                printf \"\\\"%s\\\"%s\", $x, (x == NF ? \"\
    \" : \", \")\n            }\n        }\n    }'\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ numbers=($1)\n    for ((i=0; i<${#numbers[@]}; i++)); do\n        for ((j=0;\
    \ j<${#numbers[$i]}; j++)); do\n            if [ $((${numbers[$i]:$j:1} % 2))\
    \ -eq 0 ]; then\n                numbers[$i]=\"null\"\n                break\n\
    \            fi\n        done\n    done\n    echo \"${numbers[@]}\" | sort -n\
    \ | grep -v null\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  for\
    \ i in $1; do\n    if [[ $(odd_digits \"$i\") == $i ]]; then\n      echo -n \"\
    \\\"$i\\\" \"\n    fi\n  done\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp5azxh97l.sh: line 14: odd_digits: command not found

    /tmp/tmp5azxh97l.sh: line 14: odd_digits: command not found

    /tmp/tmp5azxh97l.sh: line 14: odd_digits: command not found

    /tmp/tmp5azxh97l.sh: line 14: odd_digits: command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ res=$(echo \"$1\" | tr ' ' '\\n' | grep -E '^[13579]+$' | sort -n)\n    echo\
    \ \"[$(echo \"$res\" | sed 's/\\n/\", \"/g')]\"\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  array=($1)\n\
    \  ret=()\n  for x in ${array[@]}; do\n    is_odd=true\n    while [ $x -gt 0 ];\
    \ do\n      digit=$(( $x % 10 ))\n      if [ $(( $digit % 2 )) -eq 0 ]; then\n\
    \        is_odd=false\n        break\n      fi\n      x=$(( $x / 10 ))\n    done\n\
    \    if [ $is_odd = true ]; then\n      ret+=($x)\n    fi\n  done\n  echo ${ret[@]}\
    \ | tr ' ' '\\n' | sort -n\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n\
    \    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345\
    \ 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31\
    \ 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # TODO\n    #\n    # Write your solution here.\n    OLD_IFS=$IFS\n    IFS='\
    \ '\n    res=()\n    for arg in $1\n    do\n        # check if each digit is unique\n\
    \        IFS=$OLD_IFS\n        for (( i=0; i<${#arg}; i++ ))\n        do\n   \
    \         for (( j=i+1; j<${#arg}; j++ ))\n            do\n                if\
    \ [ ${arg:$i:1} == ${arg:$j:1} ]\n                then\n                    IFS='\
    \ '\n                    break 2\n                fi\n            done\n     \
    \   done\n        IFS=' '\n        res+=( $arg )\n    done\n    # echo ${res[@]}\n\
    \    # echo '[ '${res[@]}' ]'\n    echo '[ '$(printf '\"%s\" ' \"${res[@]}\")'\
    \ ]'\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"\
    152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"\
    111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ if [[ -z \"$1\" ]]; then\n        return\n    fi\n    declare -a results=()\n\
    \    for x in $@; do\n        declare -a digits=()\n        for digit in $(echo\
    \ $x | sed -e 's/\\(.\\)/\\1 /g'); do\n            if [[ \"$digit\" -ne \"0\"\
    \ ]] && [[ $(($digit % 2)) -ne 0 ]]; then\n                digits+=($digit)\n\
    \            fi\n        done\n        if [[ ${#digits[@]} -eq ${#x} ]]; then\n\
    \            results+=($x)\n        fi\n    done\n    if [[ ${#results[@]} -eq\
    \ 0 ]]; then\n        echo \"[]\"\n    else\n        echo \"[$(echo \"${results[@]}\"\
    \ | sed -e 's/ /\", \"/g')]\"\n    fi\n}\n\ncandidate() {\n    unique_digits \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15\
    \ 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tarray=($1)\n\
    \tfor i in \"${array[@]}\"; do\n\t\tif [[ $i =~ ^[0-9]+$ ]]; then\n\t\t\t# check\
    \ if the number has any even digits\n\t\t\tdeclare -i num=\"$i\"\n\t\t\twhile\
    \ [[ $num -gt 0 ]]; do\n\t\t\t\tdigit=$((num % 10))\n\t\t\t\tif [[ $digit%2 -eq\
    \ 0 ]]; then\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\t\tnum=$((num / 10))\n\t\t\tdone\n\
    \t\t\tif [[ $num -eq 0 ]]; then\n\t\t\t\techo -n '\"'$i'\"'\n\t\t\t\techo -n '\
    \ '\n\t\t\tfi\n\t\tfi\n\tdone\n}\n\ncandidate() {\n    unique_digits \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\"\
    \ ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"\
    12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"\
    31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\t#\
    \ TODO\n\tlist=$(for num in $1; do\n\t\t#echo $num\n\t\tif [ $(echo $num | grep\
    \ -o '0\\|2\\|4\\|6\\|8' | wc -w) -eq 0 ]; then\n\t\t\techo -n $num\n\t\tfi\n\t\
    done)\n\techo -n $list\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ x=(\"$@\")\n    n=$#\n    i=0\n    while [ $i -lt $n ]; do\n        j=0\n  \
    \      while [ $j -lt `echo ${#x[$i]}` ]; do\n            if [ `echo ${x[$i]:$j:1}`\
    \ == 0 -o `echo ${x[$i]:$j:1}` == 2 -o `echo ${x[$i]:$j:1}` == 4 -o `echo ${x[$i]:$j:1}`\
    \ == 6 -o `echo ${x[$i]:$j:1}` == 8 ]; then\n                x=(\"${x[@]:0:$i}\"\
    \ \"${x[@]:$(($i + 1))}\")\n                ((n--))\n                break\n \
    \           fi\n            ((j++))\n        done\n        ((i++))\n    done\n\
    \    IFS=$'\\n'\n    x=($(sort <<<\"${x[*]}\"))\n    x=`printf '%s\\n' \"${x[@]}\"\
    \ | sed 's/^/'\"\\\"\"'/g' | sed 's/$/'\"\\\"\"'/g' | sed ':a;N;$!ba;s/\\n/, /g'`\n\
    \    echo \"[\"$x\"]\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n  \
    \  [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033\
    \ 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\"\
    \ ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpqu49555w.sh: line 19: [: too many arguments

    /tmp/tmpqu49555w.sh: line 19: [: too many arguments

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ # the range [0-9] is only used to select numbers with even digits.\n    # the\
    \ range [0-9]* is used to select numbers with only odd digits.\n    # sort the\
    \ results.\n    # convert the numbers to strings.\n    echo $1 | tr \" \" \"\\\
    n\" | grep -E \"[0-9]*\" | sort | xargs printf %s\n}\n\ncandidate() {\n    unique_digits\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"\
    1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate\
    \ \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate \"135 103 31\"\
    ) = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local array;\n    array=(${@// / })\n    for (( i=0; i<${#array[@]}; i++ ));\
    \ do\n        if [[ ${array[$i]} =~ ^[0-9]+$ ]]; then\n            if [ \"$(printf\
    \ %s ${array[$i]} | sed 's/[02468]//g')\" == \"${array[$i]}\" ]; then\n      \
    \          echo ${array[$i]}\n            fi\n        fi\n    done\n}\n\ncandidate()\
    \ {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"\
    15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\") = \"\
    \" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n    [[ $(candidate\
    \ \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n\tlocal\
    \ numbers=($1)\n\tlocal output=()\n\tfor n in ${numbers[@]}; do\n\t\tif [[ $n\
    \ =~ ^[1-9]+$ ]]; then\n\t\t\toutput+=($n)\n\t\tfi\n\tdone\n\tprintf '[\"%s\"\
    ]' \"${output[@]}\"\n}\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate\
    \ \"152 323 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") =\
    \ \"111 151\" ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ local result=\"[]\"\n    for num in $1; do\n        local digits=$(echo $num\
    \ | tr -dC '[:digit:]')\n        local evens=$(echo $digits | tr -dC '[02468]')\n\
    \        if [ \"$evens\" == \"\" ]; then\n            local result=$(echo $result\
    \ | jq \". + [\\\"$num\\\"]\")\n        fi\n    done\n    echo $result | jq 'sort'\n\
    }\n\ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323\
    \ 1422 10\") = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\"\
    \ ]]\n    [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp93swje6x.sh: line 18: jq: command not found

    /tmp/tmp93swje6x.sh: line 18: jq: command not found

    /tmp/tmp93swje6x.sh: line 18: jq: command not found

    /tmp/tmp93swje6x.sh: line 21: jq: command not found

    '
  stdout: ''
  timestamp: 1660023449
- exit_code: 1
  program: "#!/bin/bash\n# Given a list of positive integers x. return a sorted list\
    \ of all \n# elements that hasn't any even digit.\n# Note: Returned list should\
    \ be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33\
    \ 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323\
    \ 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n   \
    \ echo '[' $(tr \" \" \"\\n\" <<< $1 | sort -n | sed -n '/[02468]/ !p' | \\\n\
    \        sed 's/^/\\\"/;s/$/\\\"/' | tr \"\\n\" \",\" | sed 's/,$//') ']'\n}\n\
    \ncandidate() {\n    unique_digits \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"15 33 1422 1\") = \"1 15 33\" ]]\n    [[ $(candidate \"152 323 1422 10\")\
    \ = \"\" ]]\n    [[ $(candidate \"12345 2033 111 151\") = \"111 151\" ]]\n   \
    \ [[ $(candidate \"135 103 31\") = \"31 135\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660023449
