name: HumanEval_59_largest_prime_factor
language: sh
prompt: "#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is\
  \ not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor\
  \ \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n"
tests: "}\n\ncandidate() {\n    largest_prime_factor \"$@\"\n}\n\nset -e\nrun_test()\
  \ {\n    [[ $(candidate \"15\") = \"5\" ]]\n    [[ $(candidate \"27\") = \"3\" ]]\n\
  \    [[ $(candidate \"63\") = \"7\" ]]\n    [[ $(candidate \"330\") = \"11\" ]]\n\
  \    [[ $(candidate \"13195\") = \"29\" ]]\n}\n\nrun_test"
completions: ["    local n=$1\n    local factor=2\n    while [ $((n % factor)) -eq\
    \ 0 ]; do\n        n=$((n / factor))\n    done\n    echo $n", "    local n=$1\
    \ i=2 m=0\n    while [[ $n -gt 1 ]]; do\n        if [[ $(( n % i )) -eq 0 ]];\
    \ then\n            n=$(( n / i ))\n            m=$i\n        else\n         \
    \   i=$(( i + 1 ))\n        fi\n    done\n    echo $m", "  # Convert $1 to an\
    \ integer\n  local n=$((10#$1))\n  # local p=$n-1\n  local p=2\n  # local i=2\n\
    \  local i=$p\n  while [ $i -le $(( $n / $p )) ]; do\n    while [ $(( $n % $i\
    \ )) -eq 0 ]; do\n      n=$(( $n / $i ))\n      if [ $n -eq 1 ]; then\n      \
    \  echo $i\n        return\n      fi\n      p=$i\n    echof \"n=$n, p=$p, i=$i\"\
    \n    i=$(( $i + 1 ))\n    done\n  done\n  echo $n", "  local n=$1\n  local f=2\n\
    \  local lpf=1\n  while (( n > 1 )); do\n    while (( (n % f) == 0 )); do\n  \
    \    lpf=$f\n      n=$(( n / f ))\n    done\n    f=$(( f + 1 ))\n  done\n  echo\
    \ $lpf", "    local -i n=$1 factor\n    while ((n%2==0)); do\n        n /= 2\n\
    \    done\n    factor=3\n    while ((n > 1)); do\n        while ((n%factor==0));\
    \ do\n            n /= factor\n        done\n        ((factor+=2))\n    done\n\
    \    echo \"$((factor-2))\"", "    local n=\"$1\"\n    local i=2\n    local largest_prime=1\n\
    \    while (( n % i != 0 )); do\n        (( i++ ))\n    done\n    local largest_prime=$i\n\
    \    (( n /= i ))\n    for (( ; i*i <= n; i++ )); do\n        if (( n % i == 0\
    \ )); then\n            (( n /= i ))\n            (( largest_prime = i ))\n  \
    \      fi\n    done\n    if (( n > largest_prime )); then\n        echo \"$n\"\
    \n    else\n        echo \"$largest_prime\"\n    fi", "    local n=$1\n    local\
    \ f=2\n    local i\n\n    while (( f < n )); do\n        if (( n % f == 0 ));\
    \ then\n            n=$(( n / f ))\n            f=2\n        else\n          \
    \  f=$(( f + 1 ))\n        fi\n    done\n\n    echo $n", "    if [ $1 -eq 1 ];\
    \ then\n        echo 1\n        return\n    fi\n\n    # Find the smallest factor\
    \ of $1. The smallest factor of $1 is 1 or prime.\n    local p=2\n    local n=$1\n\
    \    while [[ $(( n % p )) -ne 0 ]]; do\n        (( p += 1 ))\n    done\n\n  \
    \  # If p < n, return the largest prime factor of n / p, otherwise n is a prime.\n\
    \    if [ $p -lt $n ]; then\n        largest_prime_factor $(( n / p ))\n    else\n\
    \        echo $n\n    fi", "    local n=\"$1\"\n    local factor=\"2\"\n    local\
    \ result=\"1\"\n    while [ $n -gt 1 ]; do\n        if [ $((n % factor)) -eq 0\
    \ ]; then\n            result=\"$factor\"\n            n=$((n / factor))\n   \
    \     else\n            factor=$((factor + 1))\n        fi\n    done\n    echo\
    \ \"$result\"", "    local n=$1\n    local -i i=2\n    while (( i < n )); do\n\
    \        if (( n % i == 0 )); then\n            largest_prime_factor $(( n / i\
    \ ))\n            return\n        fi\n        (( i += 1 ))\n    done\n    echo\
    \ $n", "    local n=$1\n    for ((i=2; i<=n; i++)); do\n        # Only proceed\
    \ if i is a factor of n.\n        [[ $((n % i)) -eq 0 ]] || continue\n       \
    \ # Now we know i is a factor of n. Check if i is prime\n        local prime=1\n\
    \        for ((j=2; j<i; j++)); do\n            [[ $((i % j)) -eq 0 ]] && prime=0\
    \ && break\n        done\n        # i is prime! Now check if it's the largest\
    \ factor of n.\n        if [[ $prime -eq 1 ]]; then\n            local largest=$i\n\
    \            # n might be a large number, so we have to use floating point\n \
    \           # arithmetic to see if i is the largest factor.\n            local\
    \ factor=$(bc -l <<< \"$n / $i\")\n            [[ $(bc -l <<< \"$factor - ${factor%.*}\"\
    ) != 0 ]] && continue\n            # If the floating point calculation indicates\
    \ i is the largest\n            # factor, then test using integer arithmetic.\n\
    \            [[ $((n % factor)) -eq 0 ]] && local largest=$factor\n        fi\n\
    \    done\n    echo $largest", "    a=$1\n    local factor=$(smallest_prime_factor\
    \ $a)\n    echo \"smallest_prime_factor $a => $factor\"\n    while [ $factor -lt\
    \ $a ]; do\n        a=$(($a / $factor))\n        factor=$(smallest_prime_factor\
    \ $a)\n        echo \"smallest_prime_factor $a => $factor\"\n    done\n    echo\
    \ $a", "    local n=$1 factor_list=$(factor $n) max=$(echo \"$factor_list\" |\
    \ tail -n 1)\n    echo \"$max\"", "  local n=$1\n  local divisor=2\n  local largest=1\n\
    \  while ((n > 1)); do\n    while ((n % divisor == 0)); do\n      largest=$divisor\n\
    \      n=$((n / divisor))\n    done\n    divisor=$((divisor + 1))\n  done\n  echo\
    \ $largest", "    local n=$1\n    local p=$(is_prime \"$n\")\n    if [ \"$p\"\
    \ -eq \"1\" ]; then\n        echo \"$n\"\n    else\n        local i=$(next_factor\
    \ \"$n\")\n        largest_prime_factor \"$i\"\n    fi", "  local n=$1\n  local\
    \ i=2\n  local max_prime=1\n  while ((i*i<=n)); do\n    if ((n%i==0)); then\n\
    \      n=$((n/i))\n      max_prime=$i\n    else\n      ((i++))\n    fi\n  done\n\
    \  if ((n>1)); then\n    max_prime=$n\n  fi\n  echo $max_prime", "    local i=2\
    \ n=$1\n    for (( ; n > i; i++ ))\n    do\n        if (( n % i == 0 ))\n    \
    \    then\n            n=$(( n / i ))\n            i=1\n        fi\n    done\n\
    \    echo $n", '    echo "$1"', "    declare -r N=$1\n    declare -r MAX=$(truncate_to_int\
    \ \"$(sqrt \"$N\")\")\n    local -i d\n    for ((d=2; d<=MAX; d++)); do\n    \
    \    local -i quotient\n        let quotient=\"N / d\"\n        local -i remainder\n\
    \        let remainder=\"N % d\"\n        # TODO: https://github.com/nodiscc/script.bash/issues/27\n\
    \        if [ \"$remainder\" -eq 0 ]; then\n            if $(is_prime \"$quotient\"\
    ); then\n                echo \"$quotient\"\n                return\n        \
    \    fi\n            if $(is_prime \"$d\"); then\n                echo \"$d\"\n\
    \                return\n            fi\n        fi\n    done\n    echo \"1\"",
  "  local factor=\"\"\n  local n=\"$1\"\n  local nn=$(($n / 2))\n  for ((i=2; i<=nn;\
    \ i++)); do\n    if (($n % $i == 0)); then\n      factor=$(largest_prime_factor\
    \ $i)\n      break\n    fi\n  done\n  if [[ -z \"$factor\" ]]; then\n    factor=\"\
    $n\"\n  fi\n  echo \"$factor\""]
stop_tokens:
- "\n}"
