name: HumanEval_155_even_odd_count
language: sh
prompt: "#!/bin/bash\n# Given an integer. return a list that has the number of even\
  \ and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"\
  1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is\
  \ an integer\neven_odd_count() {\n"
tests: "}\n\ncandidate() {\n    even_odd_count \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"7\") = \"0 1\" ]]\n    [[ $(candidate \"-78\") = \"1 1\" ]]\n\
  \    [[ $(candidate \"3452\") = \"2 2\" ]]\n    [[ $(candidate \"346211\") = \"\
  3 3\" ]]\n    [[ $(candidate \"-345821\") = \"3 3\" ]]\n    [[ $(candidate \"-2\"\
  ) = \"1 0\" ]]\n    [[ $(candidate \"-45347\") = \"2 3\" ]]\n    [[ $(candidate\
  \ \"0\") = \"1 0\" ]]\n}\n\nrun_test"
completions: ["  local even_count=0\n  local odd_count=0\n  local digit\n\n  for digit\
    \ in $(digits $1); do\n    if [[ $((digit % 2)) -eq 0 ]]; then\n      ((even_count++))\n\
    \    else\n      ((odd_count++))\n    fi\n  done\n\n  printf \"[%s, %s]\" \"$even_count\"\
    \ \"$odd_count\"", "    # Extract the digits of the input\n    local digits=$(echo\
    \ \"$1\" | grep -o '.')\n    # Count the odd digits\n    local odd_digits=$(echo\
    \ \"$digits\" | grep -v '[0-9][02468]')\n    local odd_count=$(echo -n \"$odd_digits\"\
    \ | wc -m)\n    # Count the even digits\n    local even_digits=$(echo \"$digits\"\
    \ | grep -v '[0-9][13579]')\n    local even_count=$(echo -n \"$even_digits\" |\
    \ wc -m)\n    # Return the two values\n    echo \"[\\\"$even_count\\\", \\\"$odd_count\\\
    \"]\"", "    local i j\n    j=\"$1\"\n    if [ $j -lt 0 ]; then\n        j=\"\
    ${j:1}\"\n    fi\n    i=0\n    while [ $j -gt 0 ]; do\n        if [ $((j % 10))\
    \ -gt 0 ] && [ $((j % 10)) -lt 9 ]; then\n            i=$((i + 1))\n        fi\n\
    \        j=$((j / 10))\n    done\n    echo $i", "  if (( $1 > 0 )); then\n   \
    \ eval \"echo \\\"[\\\"\\\"$(($1 % 2))\\\"\\\", \\\"\\\"$(($1 / 2))\\\"\\\"]\\\
    \"\"\n  elif (( $1 < 0 )); then\n    eval \"echo \\\"[\\\"\\\"$((-$1 % 2))\\\"\
    \\\", \\\"\\\"$((-$1 / 2))\\\"\\\"]\\\"\"\n  else\n    echo \"[\\\"0\\\", \\\"\
    0\\\"]\"\n  fi", "    local num=\"$1\"\n    num=\"${num//[!0-9]/}\"\n    local\
    \ even_cnt=0\n    local odd_cnt=0\n    for (( i=0; i<${#num}; i++ )); do\n   \
    \     if (( ${num:$i:1} % 2 == 0 )); then\n            (( even_cnt++ ))\n    \
    \    else\n            (( odd_cnt++ ))\n        fi\n    done\n    echo \"[\\\"\
    $even_cnt\\\", \\\"$odd_cnt\\\"]\"", "  python <<EOF\nnumber = int($1)\ncount_even\
    \ = 0\ncount_odd = 0\n\nwhile number > 0:\n  number, remainder = divmod(number,\
    \ 10)\n  if remainder % 2 == 0:\n    count_even += 1\n  else:\n    count_odd +=\
    \ 1\n\nprint \"[\"'\"%d\"'\", '\"%d\"'\"]\" % (count_even, count_odd)\nEOF", " \
    \   local number=\"$1\"\n    local odd=0\n    local even=0\n    local digit\n\
    \    local result\n    if [[ \"$number\" == \"\" ]]; then\n        echo \"[]\"\
    \n        return\n    fi\n    for (( i=0; i<${#number}; i++ )); do\n        digit=\"\
    ${number:$i:1}\"\n        if [[ \"$digit\" == \"-\" ]]; then\n            continue\n\
    \        fi\n        if (( digit % 2 == 0 )); then\n            even=$(( even\
    \ + 1 ))\n        else\n            odd=$(( odd + 1 ))\n        fi\n    done\n\
    \    result=\"[\\\"$even\\\", \\\"$odd\\\"]\"\n    echo \"$result\"", "  local\
    \ num=$1\n  local len=${#num}\n  local even_cnt=0\n  local odd_cnt=0\n  local\
    \ i\n  for ((i=0; i<len; i++)); do\n    local digit=$(expr substr \"$num\" $((i+1))\
    \ 1)\n    if [[ $((digit % 2)) -eq 0 ]]; then\n      even_cnt=$((even_cnt + 1))\n\
    \    else\n      odd_cnt=$((odd_cnt + 1))\n    fi\n  done\n  echo \"[\\\"$even_cnt\\\
    \", \\\"$odd_cnt\\\"]\"", "    local number=$1\n    if [ $number -lt 0 ]; then\n\
    \        number=$((number * -1))\n    fi\n    local even_count=0\n    local odd_count=0\n\
    \    local digit\n    while [ $number -gt 0 ]; do\n        digit=$((number % 10))\n\
    \        if [ $((digit % 2)) -eq 0 ]; then\n            even_count=$((even_count\
    \ + 1))\n        else\n            odd_count=$((odd_count + 1))\n        fi\n\
    \        number=$((number / 10))\n    done\n    printf \"['\"%s\"', '\"%s\"']\"\
    \ \"$even_count\" \"$odd_count\"", "  if [[ ! $1 =~ ^-?[0-9]+$ ]]; then\n    echo\
    \ -e \"\\nError: '$1' is not an integer.\\n\" >&2\n    exit 1\n  fi\n  local i\
    \ odd=0 even=0\n  while ((i++<${#1})); do\n    ((${1:i-1:1}%2)) && ((odd++)) ||\
    \ ((even++))\n  done\n  echo \"[\\\"$even\\\", \\\"$odd\\\"]\"", "  echo \"$1\"\
    \ | awk '{\n    sum_odd=0;\n    sum_even=0;\n    for (i=1; i<=length($1); i++)\
    \ {\n      digit=substr($1, i, 1);\n      if (digit % 2 == 0) {\n        sum_even+=1;\n\
    \      } else {\n        sum_odd+=1;\n      }\n    }\n    print(\"[\\\"\" sum_even\
    \ \"\\\", \\\"\" sum_odd \"\\\"]\");\n  }'", "  local num=$1\n  local even_count=0\n\
    \  local odd_count=0\n  while [ $num -ne 0 ]; do\n    digit=$((num % 10))\n  \
    \  num=$((num / 10))\n    if [ $((digit % 2)) -eq 0 ]; then\n      even_count=$((even_count\
    \ + 1))\n    else\n      odd_count=$((odd_count + 1))\n    fi\n  done\n  echo\
    \ \"[\\\"$even_count\\\", \\\"$odd_count\\\"]\"", "  local even_count=0\n  local\
    \ odd_count=0\n  local char\n  for ((i=0; i<${#1}; i++)); do\n    char=${1:$i:1}\n\
    \    if (($char % 2 == 0)); then\n      even_count=$((even_count + 1))\n    else\n\
    \      odd_count=$((odd_count + 1))\n    fi\n  done\n  echo \"[\\\"$even_count\\\
    \", \\\"$odd_count\\\"]\"", "  python -c \"\neven_count = 0\nodd_count = 0\nfor\
    \ c in '$1':\n  if c.isdigit():\n    if int(c) % 2 == 0:\n      even_count +=\
    \ 1\n    else:\n      odd_count += 1\nprint(even_count, odd_count)\"", "  even_count=0\n\
    \  odd_count=0\n  # BEGIN SOLUTION #\n  # END SOLUTION #\n  echo \"[\\\"$even_count\\\
    \", \\\"$odd_count\\\"]\"", "  local integer=$1\n  if [[ $integer == \"-\"* ]];\
    \ then\n    integer=${integer:1}\n  fi\n  local integer_length=${#integer}\n \
    \ local even_count=0\n  local odd_count=0\n  for ((i=0; i<integer_length; i++));\
    \ do\n    digit=${integer:i:1}\n    if [[ $((digit % 2)) == 0 ]]; then\n     \
    \ even_count=$((even_count + 1))\n    else\n      odd_count=$((odd_count + 1))\n\
    \    fi\n  done\n  echo \"[\\\"$even_count\\\", \\\"$odd_count\\\"]\"", "  local\
    \ num=\"$1\"\n  local even_num=0\n  local odd_num=0\n  for digit in $(echo $num\
    \ | sed 's/-//g'); do\n    if [ $(($digit % 2)) == 0 ]; then\n      ((even_num++))\n\
    \    else\n      ((odd_num++))\n    fi\n  done\n  echo \"[\\\"$even_num\\\", \\\
    \"$odd_num\\\"]\"", "  if [ $# -ne 1 ]; then\n    echo \"Usage: $(basename \"\
    $0\") num\" >&2\n    return 1\n  fi\n\n  local number\n  number=\"$1\"\n\n  #\
    \ Check if number is negative, then change it to positive\n  if [ ${number:0:1}\
    \ == \"-\" ]; then\n    number=\"${number:1}\"\n  fi\n\n  local odd=0\n  local\
    \ even=0\n  for ((i=0; i<${#number}; i++)); do\n    if (($((10#${number:$i:1}))\
    \ % 2 == 0)); then\n      even=$((even + 1))\n    else\n      odd=$((odd + 1))\n\
    \    fi\n  done\n\n  echo \"[\\\"$even\\\", \\\"$odd\\\"]\"", "  local integer=\"\
    $1\"\n  local even=0\n  local odd=0\n  if [[ $integer =~ ^-[0-9]+$ ]]; then\n\
    \    integer=${integer:1}\n  fi\n  for ((index=0; index<${#integer}; index++));\
    \ do\n    if ((integer[index] % 2 == 0)); then\n      ((even++))\n    else\n \
    \     ((odd++))\n    fi\n  done\n  echo \"[\\\"$even\\\", \\\"$odd\\\"]\"", " \
    \   local n=$1\n    local even_count=0\n    local odd_count=0\n    while [ $n\
    \ -ne 0 ]; do\n        local remainder=$((n % 10))\n        if [ $((remainder\
    \ % 2)) -eq 0 ]; then\n            ((even_count++))\n        else\n          \
    \  ((odd_count++))\n        fi\n        n=$((n / 10))\n    done\n    echo \"[\\\
    \"${even_count}\\\", \\\"${odd_count}\\\"]\""]
stop_tokens:
- "\n}"
