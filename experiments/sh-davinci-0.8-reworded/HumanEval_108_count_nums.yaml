name: HumanEval_108_count_nums
language: sh
prompt: "#!/bin/bash\n# Write a function count_nums which takes an array of integers\
  \ and returns\n# the number of elements which has a sum of digits > 0.\n# If a number\
  \ is negative, then its first signed digit will be negative:\n# e.g. -123 has signed\
  \ digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"\
  -1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated\
  \ list\ncount_nums() {\n"
tests: "}\n\ncandidate() {\n    count_nums \"$@\"\n}\n\nset -e\nrun_test() {\n   \
  \ [[ $(candidate \"\") = \"0\" ]]\n    [[ $(candidate \"-1 -2 0\") = \"0\" ]]\n\
  \    [[ $(candidate \"1 1 2 -2 3 4 5\") = \"6\" ]]\n    [[ $(candidate \"1 6 9 -6\
  \ 0 1 5\") = \"5\" ]]\n    [[ $(candidate \"1 100 98 -7 1 -1\") = \"4\" ]]\n   \
  \ [[ $(candidate \"12 23 34 -45 -56 0\") = \"5\" ]]\n    [[ $(candidate \"0 1\"\
  ) = \"1\" ]]\n    [[ $(candidate \"1\") = \"1\" ]]\n}\n\nrun_test"
completions: ["    sum=0\n    for n in $1; do\n        sum=0\n        if [ $n -lt\
    \ 0 ]; then\n            n=$((n*-1))\n        fi\n        while [ $n -gt 0 ];\
    \ do\n            sum=$((sum+n%10))\n            n=$((n/10))\n        done\n \
    \       if [ $sum -gt 0 ]; then\n            echo -n \"1 \"\n        else\n  \
    \          echo -n \"0 \"\n        fi\n    done", "    local n=0\n    for x in\
    \ $@\n    do\n        if [[ $x == -* ]]\n        then\n            local a=$(($x\
    \ * -1))\n        else\n            local a=$x\n        fi\n        local sum=0\n\
    \        while [ $a -gt 0 ]\n        do\n            ((sum+=a%10))\n         \
    \   ((a/=10))\n        done\n        if [[ $sum > 0 ]]\n        then\n       \
    \     ((n+=1))\n        fi\n    done\n    echo $n", "    count=0\n    for num\
    \ in $1; do\n        if [[ \"$num\" -lt 0 ]]; then\n            num=$(( -1 * num\
    \ ))\n        fi\n        while [[ \"$num\" -ne 0 ]]; do\n            num=$((\
    \ num / 10 ))\n            count=$(( count + 1 ))\n        done\n    done\n  \
    \  echo \"$count\"", "\techo \"$1\" | \\\n\t\tawk 'BEGIN { FS = \" \" }\n\t\t\t\
    {\n\t\t\t\tcnt = 0\n\t\t\t\tfor (i = 1; i <= NF; i++) {\n\t\t\t\t\ta = $i\n\t\t\
    \t\t\tif (a < 0) {\n\t\t\t\t\t\t# take the first signed digit\n\t\t\t\t\t\ta =\
    \ substr(a, 2, 1)\n\t\t\t\t\t}\n\t\t\t\t\twhile (a > 0) {\n\t\t\t\t\t\tcnt +=\
    \ a % 10\n\t\t\t\t\t\ta = int(a / 10)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tprint cnt\n\
    \t\t\t}'", "    local -i cnt=0\n    for num in $1\n    do\n        local -i sum=0\n\
    \        local -i pos_num=${num#-}\n        while (( pos_num > 0 ))\n        do\n\
    \            sum=$(( sum + pos_num % 10 ))\n            pos_num=$(( pos_num /\
    \ 10 ))\n        done\n        if (( num < 0 ))\n        then\n            ((\
    \ --sum ))\n        fi\n        if (( sum != 0 ))\n        then\n            ((\
    \ ++cnt ))\n        fi\n    done\n    echo $cnt", "    elements=(\"$@\")\n   \
    \ sum=0\n    for i in ${elements[@]}; do\n        temp=${i//-/}\n        for ((j=0;\
    \ j<${#temp}; j++)); do\n            sum=$((sum + ${temp:$j:1}))\n        done\n\
    \        if [[ $sum -gt 0 ]]; then\n            count=$((count + 1))\n       \
    \ fi\n        sum=0\n    done\n    echo $count", "    local sum=0\n    for x in\
    \ \"${@:1}\"; do\n        if (( x < 0 )); then\n            x=${x#-}\n       \
    \ fi\n        sum=0\n        while (( x > 0 )); do\n            (( sum += x %\
    \ 10 ))\n            (( x /= 10 ))\n        done\n        (( sum > 0 )) && ((\
    \ count++ ))\n    done\n    echo \"$count\"", "    local x\n    local count=0\n\
    \    for x in $1; do\n        if [ ${x:0:1} = '-' ]; then\n            x=${x:1}\n\
    \        fi\n        local sum=0\n        local d\n        for d in $(echo $x\
    \ | sed 's/./& /g'); do\n            sum=$((sum + d))\n        done\n        if\
    \ [ $sum -gt 0 ]; then\n            count=$((count + 1))\n        fi\n    done\n\
    \    echo $count", "    local sum=0 i ans=0\n    for i in $@; do\n        if [\
    \ $i -lt 0 ]; then\n            sum=$((-i))\n        else\n            sum=$i\n\
    \        fi\n        while [ $sum -gt 0 ]; do\n            i=$((sum % 10))\n \
    \           sum=$((sum / 10))\n            ans=$((ans + i))\n        done\n  \
    \      [ $ans -gt 0 ] && ((count++))\n        ans=0\n    done\n    echo $count",
  "  nums=($1)\n  count=0\n  for num in ${nums[@]}; do\n    if [[ $num -gt 0 ]]; then\n\
    \      ((count++))\n    elif [[ $num -lt 0 ]]; then\n      ((count++))\n    fi\n\
    \  done\n  echo \"$count\"", "    # This is extremely ugly for the sake of portability\
    \ (hello, Windows!)\n    # but the code is pretty simple to follow.\n    # You\
    \ can write this in a much simpler way in a POSIX compliant shell\n    declare\
    \ -i n=0\n    for num in $1; do\n        declare -i s=0\n        for digit in\
    \ $(tr -d '-' <<< \"$num\"); do\n            s=\"$((s + digit))\"\n        done\n\
    \        if [[ \"${num}\" == \"-\"* ]]; then\n            s=\"$((-s))\"\n    \
    \    fi\n        if [[ \"$s\" != \"0\" ]]; then\n            n=\"$((n + 1))\"\n\
    \        fi\n    done\n    echo \"$n\"", "    local num count\n    for num in\
    \ $@; do\n        if [ $num -lt 0 ]; then\n            num=$((-$num))\n      \
    \  fi\n        count=0\n        while [ $num -gt 0 ]; do\n            count=$((count\
    \ + (num % 10)))\n            num=$((num / 10))\n        done\n        if [ $count\
    \ -gt 0 ]; then\n            echo 1\n        else\n            echo 0\n      \
    \  fi\n    done | awk '{c+=$1} END {print c}'", "    # YOUR CODE HERE\n    # This\
    \ is a stub, replace this line with your answer\n    echo \"\"", "  declare -a\
    \ numbers=($1)\n  count=0\n  for num in \"${numbers[@]}\"; do\n    value=0\n \
    \   for ((i=0; i<${#num}; i++)); do\n      value=$((value + ${num:$i:1}))\n  \
    \  done\n    if [[ $value -gt 0 ]]; then\n      count=$((count + 1))\n    fi\n\
    \  done\n  echo $count", "    if [ -z \"$1\" ]; then\n        echo 0\n       \
    \ return\n    fi\n    s=$(echo \"$1\" | sed -e 's/^-//' -e 's/ / + /g')\n    echo\
    \ $(echo $s | bc)", "  local nums\n  local count=0\n  local sum\n  local i\n\n\
    \  nums=($1)\n  for i in \"${nums[@]}\"; do\n    sum=0\n    while [[ $i -ne 0\
    \ ]]; do\n      sum=$((sum + (i % 10)))\n      i=$((i / 10))\n    done\n    [[\
    \ $sum -gt 0 ]] && count=$((count + 1))\n  done\n  echo \"$count\"", "  local\
    \ nums\n  local sum\n  nums=($1)\n  for num in \"${nums[@]}\"; do\n    for ((\
    \ i=${#num}-1; i>=0; i-- )); do\n      (( sum+=${num:$i:1} ))\n    done\n    [[\
    \ $sum -eq 0 ]] && sum=0 || sum=1\n    echo -n \"$sum \"\n    sum=0\n  done",
  "  local digits sum x\n  digits=($(echo \"$1\" | sed 's/[^-0-9]/ /g'))\n  for x\
    \ in \"${digits[@]}\"; do\n    sum=0\n    while [[ $x -ne 0 ]]; do\n      sum=$((sum\
    \ + (x % 10)))\n      x=$((x / 10))\n    done\n    if [[ $sum -gt 0 ]]; then\n\
    \      echo -n \"$x \"\n    fi\n  done", "    # count=0\n    # for el in $1; do\n\
    \    #     sum=0\n    #     for (( i=0; i<${#el}; i++ )); do\n    #         if\
    \ [[ ${el:$i:1} =~ ^-?[0-9]+$ ]]; then\n    #             sum=$((sum + ${el:$i:1}))\n\
    \    #         fi\n    #     done\n    #     if (( sum > 0 )); then\n    #   \
    \      count=$((count + 1))\n    #     fi\n    # done\n    # echo $count\n\n \
    \   # Alternative solution\n    local count=0\n    for el in $1; do\n        sum=0\n\
    \        for (( i=0; i<${#el}; i++ )); do\n            if [[ ${el:$i:1} =~ ^-?[0-9]+$\
    \ ]]; then\n                sum=$((sum + ${el:$i:1}))\n            fi\n      \
    \  done\n        if (( sum > 0 )); then\n            count=$((count + 1))\n  \
    \      fi\n    done\n    echo $count", "  # Do not change the following line\n\
    \  local nums=($1)\n  # Your code goes below\n  local num count\n  count=0\n \
    \ for num in ${nums[@]}; do\n    sum=0\n    while [ $num -ne 0 ]; do\n      sum=$((\
    \ $sum + $num % 10 ))\n      num=$(( $num / 10 ))\n    done\n    if [ $sum -gt\
    \ 0 ]; then\n      (( count++ ))\n    fi\n  done\n  echo $count"]
stop_tokens:
- "\n}"
