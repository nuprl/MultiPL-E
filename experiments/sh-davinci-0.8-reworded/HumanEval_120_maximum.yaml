name: HumanEval_120_maximum
language: sh
prompt: "#!/bin/bash\n# Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n\
  # >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n\
  # >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum\
  \ \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array\
  \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated\
  \ list\n# $2 is an integer\nmaximum() {\n"
tests: "}\n\ncandidate() {\n    maximum \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
  \ $(candidate \"-3 -4 5\" \"3\") = \"-4 -3 5\" ]]\n    [[ $(candidate \"4 -4 4\"\
  \ \"2\") = \"4 4\" ]]\n    [[ $(candidate \"-3 2 1 2 -1 -2 1\" \"1\") = \"2\" ]]\n\
  \    [[ $(candidate \"123 -123 20 0 1 2 -3\" \"3\") = \"2 20 123\" ]]\n    [[ $(candidate\
  \ \"-123 20 0 1 2 -3\" \"4\") = \"0 1 2 20\" ]]\n    [[ $(candidate \"5 15 0 3 -13\
  \ -8 0\" \"7\") = \"-13 -8 0 0 3 5 15\" ]]\n    [[ $(candidate \"-1 0 2 5 3 -10\"\
  \ \"2\") = \"3 5\" ]]\n    [[ $(candidate \"1 0 5 -7\" \"1\") = \"5\" ]]\n    [[\
  \ $(candidate \"4 -4\" \"2\") = \"-4 4\" ]]\n    [[ $(candidate \"-10 10\" \"2\"\
  ) = \"-10 10\" ]]\n    [[ $(candidate \"1 2 3 -23 243 -400 0\" \"0\") = \"\" ]]\n\
  }\n\nrun_test"
completions: ["    local IFS=\" \"\n    local arr=($1)\n    local k=$2\n    local\
    \ i j\n    for ((i=0; i<k; i++)); do\n        for ((j=i+1; j<${#arr[@]}; j++));\
    \ do\n            if [[ ${arr[$i]} -lt ${arr[$j]} ]]; then\n                #\
    \ swap arr[i] and arr[j]\n                local tmp=${arr[$i]}\n             \
    \   arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n            fi\n       \
    \ done\n    done\n    printf '\"%s\" ' \"${arr[@]:0:$k}\"", '    echo "[$(printf
    "\"%s\" " $(printf "%s\n" $1 | sort -n | tail -n $2))]"', "    local -n _arr=$1\n\
    \    local -n _k=$2\n    echo \"${_arr[@]}\" | tr \" \" \"\\n\" | sort -nr | head\
    \ -n $_k", "  input=$1\n  len=$2\n  output=\"\"\n  for i in ${input// /\\\\n};\
    \ do\n    if [ -z $output ]; then\n      output=$i\n    else\n      case $i in\n\
    \        $(printf \"$output\" | sort -r | head -1) ) output=\"$output $i\";;\n\
    \        $(printf \"$output\" | sort -r | head -2 | tail -1) ) output=\"$output\
    \ $i\";;\n        $(printf \"$output\" | sort -r | head -3 | tail -1) ) output=\"\
    $output $i\";;\n        $(printf \"$output\" | sort -r | head -4 | tail -1) )\
    \ output=\"$output $i\";;\n        $(printf \"$output\" | sort -r | head -5 |\
    \ tail -1) ) output=\"$output $i\";;\n        * ) output=\"$output $i\";;\n  \
    \    esac\n    fi\n  done\n  echo \"[$(echo $output | sed -e 's/\\s\\+/, /g')]\"",
  "    _arr=()\n    for _i in $1; do\n        _arr=(\"${_arr[@]}\" $_i)\n    done\n\
    \    python -c \"\nimport sys\nfor i in sorted(sys.argv[1:], reverse=True)[:int(sys.argv[1])]:\n\
    \    print(i, end=' ')\n\" \"${_arr[@]}\"", "    read -r -a arr <<< \"$1\"\n\n\
    \    k=$2\n    len=${#arr[@]}\n    if [ $k -gt $len ]; then\n        k=$len\n\
    \    fi\n\n    printf '%s\\n' \"${arr[@]}\" | sort -nr | head -n $k | tr -d \"\
    \\n\"", "    local arr=(\"$@\")\n    local k=\"${arr[-1]}\"\n    arr=(\"${arr[@]:0:${#arr[@]}-1}\"\
    )\n    local len=${#arr[@]}\n    local i\n    local j\n    local tmp\n    for\
    \ ((i=0; i<k; i++)); do\n        for ((j=i+1; j<len; j++)); do\n            if\
    \ [[ ${arr[$i]} -lt ${arr[$j]} ]]; then\n                tmp=${arr[$i]}\n    \
    \            arr[$i]=${arr[$j]}\n                arr[$j]=$tmp\n            fi\n\
    \        done\n    done\n    echo \"${arr[@]:0:$k}\"", "  local -n array=\"($(echo\
    \ $1 | tr \" \" \"\\n\"))\"\n  local k=$2\n  if [ $k -gt ${#array[@]} ]; then\n\
    \    echo \"k must be less than or equal to the number of elements in arr\"\n\
    \    exit 1\n  fi\n  if [ $k -lt 1 ]; then\n    echo \"k must be at least 1\"\n\
    \    exit 1\n  fi\n  local sorted\n  for e in \"${array[@]}\"; do\n    sorted+=($(echo\
    \ -e \"$e\\n${sorted[@]}\" | sort -rn | head -n1))\n  done\n  echo \"[$(printf\
    \ '\"%s\" ' \"${sorted[@]:0:$k}\")]\"", "  arr=($1)\n  k=$2\n  for ((i=0; i<k;\
    \ i++)); do\n    min=${arr[0]}\n    min_index=0\n    for ((j=0; j<${#arr[@]};\
    \ j++)); do\n      if (($(printf '%s\\n' \"${arr[j]}\" \"$min\" | sort -n | head\
    \ -n 1)==\"${arr[j]}\")); then\n        min=${arr[j]}\n        min_index=$j\n\
    \      fi\n    done\n    arr[$min_index]=2147483647\n    new_arr[$i]=$min\n  done\n\
    \  echo \"${new_arr[@]}\"", "    IFS=' ' read -ra ADDR <<< \"$1\"\n    len=${#ADDR[@]}\n\
    \    for ((i=0; i<len; i++)); do\n        for ((j=i+1; j<len; j++)); do\n    \
    \        (( ${ADDR[i]} < ${ADDR[j]} )) && t=${ADDR[i]} && ADDR[i]=${ADDR[j]} &&\
    \ ADDR[j]=$t\n        done\n    done\n    printf '[\"%s\"' \"${ADDR[@]:0:$2}\"\
    \n    printf ']\\n'", "    list=(\"$@\")\n    nums=${list[0]}\n    k=${list[1]}\n\
    \    echo \"[$(echo $nums | xargs -n1 | sort -nr | head -n $k | sed -r 's/(.*)/\"\
    \\1\"/g' | xargs | sed -r 's/\\s/\\,/g')]\"", "    list=$1\n    k=$2\n    for\
    \ x in $list; do\n        echo $x\n    done | sort -nr | head -n $k", "    : \"\
    \n    (a)slc/seq -s' ' l/order/rep -n0 -v -g\" | bc |\n    sed \"\n        s/;/',\
    \ '/g\n        s/^/$(echo \"'\")/\n        s/$/$(echo \"'\")/\n    \"", "    local\
    \ array=(${1// / })\n    local k=${2}\n    local start\n    local end\n    local\
    \ pivot\n    local i\n    local j\n    local temp\n    for (( ; ; ))\n    do\n\
    \        start=0\n        end=$(( ${#array[@]} - 1 ))\n        if [[ ${end} -le\
    \ ${start} ]]; then\n            break\n        fi\n        pivot=${array[${end}]}\n\
    \        i=${start}\n        for (( j=${start}; j<${end}; j++ ))\n        do\n\
    \            if [[ ${array[${j}]} -gt ${pivot} ]]; then\n                temp=${array[${i}]}\n\
    \                array[${i}]=${array[${j}]}\n                array[${j}]=${temp}\n\
    \                (( i++ ))\n            fi\n        done\n        temp=${array[${i}]}\n\
    \        array[${i}]=${array[${end}]}\n        array[${end}]=${temp}\n       \
    \ if [[ ${i} -eq $(( ${k} - 1 )) ]]; then\n            break\n        elif [[\
    \ ${i} -gt $(( ${k} - 1 )) ]]; then\n            end=$(( ${i} - 1 ))\n       \
    \ else\n            start=$(( ${i} + 1 ))\n        fi\n    done\n    for (( i=0;\
    \ i<${k}; i++ ))\n    do\n        echo -n '\"'${array[${i}]}'\"'\n        if [[\
    \ $(( ${i} + 1 )) -lt ${k} ]]; then\n            echo -n ','\n        fi\n   \
    \ done\n    echo", "    echo $1 | tr \" \" \"\\n\" | sort -nr | head -$2 | tr\
    \ \"\\n\" \" \" | sed 's/\\(.*\\)/\\[\"\\1\"\\]/'", "    arr=($1)\n    k=$2\n\
    \    len=${#arr[@]}\n    for i in `seq 0 $((len-1))`; do\n        for j in `seq\
    \ $((i+1)) $((len-1))`; do\n            if [ ${arr[$i]} -lt ${arr[$j]} ]; then\n\
    \                t=${arr[$i]}\n                arr[$i]=${arr[$j]}\n          \
    \      arr[$j]=$t\n            fi\n        done\n    done\n    result=\"\"\n \
    \   for i in `seq 0 $((k-1))`; do\n        result=$result${arr[$i]}' '\n    done\n\
    \    echo \"[$result]\"", "    tmp=\"$1\"\n    k=\"$2\"\n    arr=(${tmp// / })\n\
    \    IFS=$'\\n'\n    arr=($(sort -n <<<\"${arr[*]}\"))\n    unset IFS\n    total=${#arr[@]}\n\
    \    if [[ \"$k\" -gt \"$total\" ]]; then\n        k=\"$total\"\n    fi\n    echo\
    \ \"${arr[@]: -$k}\"", "    # do nothing if $2 <= 0\n    [ \"$2\" -le 0 ] && exit\n\
    \    # if $2 > number of elements, set to number of elements\n    [ \"$2\" -gt\
    \ \"$(tr ' ' '\\n' <<< \"$1\" | wc -l)\" ] && \\\n        set -- \"$1\" \"$(tr\
    \ ' ' '\\n' <<< \"$1\" | wc -l)\"\n    # sort the list in descending order\n \
    \   sorted=($(tr ' ' '\\n' <<< \"$1\" | sort -nr))\n    # extract the first $2\
    \ elements\n    printf '[%s]\\n' \"${sorted[@]:0:$2}\"", "  local list=\"$1\"\n\
    \  local length=\"$2\"\n  local sorted=\"$(echo \"$list\" | tr ' ' '\\n' | sort\
    \ -r)\"\n  local -a array=($sorted)\n  local len=\"${#array[@]}\"\n  if [ \"$len\"\
    \ -lt \"$length\" ]; then\n    echo \"[]\"\n  else\n    output=\"[\"\n    for\
    \ ((i=0; i<length; i++)); do\n      output+=\"\\\"${array[$i]}\\\"\"\n      if\
    \ [ \"$i\" -lt \"$((length-1))\" ]; then\n        output+=\", \"\n      fi\n \
    \   done\n    output+=\"]\"\n    echo \"$output\"\n  fi", "    python -c \"\n\
    import sys\nprint([max(map(int, sys.argv[1].split(' ')))] + sorted(map(int, sys.argv[1].split('\
    \ ')), reverse=True)[:int(sys.argv[2])-1])\n\" \"$1\" \"$2\" | sed 's/ /, /g'\
    \ | sed 's/^/\"/' | sed 's/$/\"/'"]
stop_tokens:
- "\n}"
