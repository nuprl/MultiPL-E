name: HumanEval_77_iscube
language: sh
prompt: "#!/bin/bash\n# Write a function that takes an integer a and returns true\
  \ \n# if this ingeger is a cube of some integer number.\n# Note: you may assume\
  \ the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n#\
  \ >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube\
  \ \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\"\
  )\n# \"false\"\n#\n# $1 is an integer\niscube() {\n"
tests: "}\n\ncandidate() {\n    iscube \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
  \ \"1\") = \"true\" ]]\n    [[ $(candidate \"2\") = \"false\" ]]\n    [[ $(candidate\
  \ \"-1\") = \"true\" ]]\n    [[ $(candidate \"64\") = \"true\" ]]\n    [[ $(candidate\
  \ \"180\") = \"false\" ]]\n    [[ $(candidate \"1000\") = \"true\" ]]\n    [[ $(candidate\
  \ \"0\") = \"true\" ]]\n    [[ $(candidate \"1729\") = \"false\" ]]\n}\n\nrun_test"
completions: ["\ta=$1\n\tif [ $a -le 0 ]; then\n\t\techo \"true\"\n\telse\n\t\tt=$(echo\
    \ \"scale=2;sqrt($a)\" | bc)\n\t\tt1=$(echo \"$t*$t*$t\" | bc)\n\t\tif [ $t1 ==\
    \ $a ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\t\
    fi", "    local integer=$1\n    if [[ $integer -eq 0 ]]; then\n        echo \"\
    true\"\n    elif [[ $integer -lt 0 ]]; then\n        # Cube of an integer can't\
    \ be negative.\n        echo \"false\"\n    else\n        # Check if cube root\
    \ of the integer is a whole number.\n        local root=$(bc <<< \"scale=0; ($integer)^(1/3)\"\
    )\n        local cube=$(bc <<< \"$root*$root*$root\")\n        [[ $cube -eq $integer\
    \ ]] && echo \"true\" || echo \"false\"\n    fi", "    num=$1\n    if [ $num -eq\
    \ 0 ]; then\n        echo \"true\"\n    else\n        if [ $num -gt 0 ]; then\n\
    \            (( num = sqrt(num) ))\n            (( num = num * num * num ))\n\
    \            if [ $num -eq $1 ]; then\n                echo \"true\"\n       \
    \     else\n                echo \"false\"\n            fi\n        else\n   \
    \         (( num = sqrt(-num) ))\n            (( num = num * num * num ))\n  \
    \          if [ $num -eq $1 ]; then\n                echo \"true\"\n         \
    \   else\n                echo \"false\"\n            fi\n        fi\n    fi",
  "    # Write your solution here\n    number=$1\n    if [ $number -le 0 ]; then\n\
    \        echo true\n    else\n        if [[ $number -eq $(echo \"scale=10; $number\
    \ ^ (1/3)\" | bc) ]]; then\n            echo true\n        else\n            echo\
    \ false\n        fi\n    fi", "\tif (( (($1 ** (1 / 3)) * ($1 ** (1 / 3)) * ($1\
    \ ** (1 / 3))) == $1 )); then\n\t\techo true\n\telse\n\t\techo false\n\tfi", " \
    \ # Write your script here\n  local i\n  local m=1\n  for ((i=1; i<$1; i++));\
    \ do\n    m=$(($m+1))\n    if [[ $((i*i*i)) -eq $1 ]]; then\n      echo \"true\"\
    \n      break\n    elif [[ $((i*i*i)) -gt $1 ]]; then\n      echo \"false\"\n\
    \      break\n    fi\n  done", "    local x=$1\n    if [[ $x -eq 0 ]]; then\n\
    \        echo \"true\"\n    else\n        local y=$((x ** (1 / 3)))\n        if\
    \ [[ $((y * y * y)) -eq $x ]]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    fi", "    local input=$1\n    local\
    \ x=0\n    local result=0\n    local ret=\"false\"\n    while [[ $result -le $input\
    \ ]]; do\n        (( result = x*x*x ))\n        if [[ $result -eq $input ]]; then\n\
    \            ret=\"true\"\n            break\n        fi\n        (( x++ ))\n\
    \    done\n    echo $ret", "\tif [[ $1 -eq 0 ]]; then\n\t\techo \"true\"\n\t\t\
    return\n\tfi\n\tif (( $1 < 0 )); then\n\t\ta=$((-$1))\n\telse\n\t\ta=$1\n\tfi\n\
    \ti=0\n\twhile (( $((i*i*i)) < $a )); do\n\t\t((i++))\n\tdone\n\tif (( $((i*i*i))\
    \ == $a )); then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi", "    #\
    \ Write your code here\n    result=$(echo \" scale=3; $1 == 0\" | bc)\n    if\
    \ [[ $result -eq 1 ]]; then\n        echo \"true\"\n    else\n        result=$(echo\
    \ \" scale=3; $1 < 0\" | bc)\n        if [[ $result -eq 1 ]]; then\n         \
    \   #echo \"true\"\n            integer_square=$(echo \"scale=2; sqrt(($1 * -1))\"\
    \ | bc)\n            float_square=$(echo \"scale=2; sqrt(($1 * -1))\" | bc -l)\n\
    \            result=$(echo \" scale=3; $integer_square != $float_square\" | bc)\n\
    \            if [[ $result -eq 1 ]]; then\n                echo \"false\"\n  \
    \          else\n                echo \"true\"\n            fi\n        else\n\
    \            integer_square=$(echo \"scale=2; sqrt($1)\" | bc)\n            float_square=$(echo\
    \ \"scale=2; sqrt($1)\" | bc -l)\n            result=$(echo \" scale=3; $integer_square\
    \ != $float_square\" | bc)\n            if [[ $result -eq 1 ]]; then\n       \
    \         echo \"false\"\n            else\n                echo \"true\"\n  \
    \          fi\n        fi\n    fi", "\t# TODO: complete this function\n\tif [\
    \ \"$1\" -lt \"0\" ]; then\n\t\techo \"true\"\n\telif [ \"$1\" -eq \"0\" ]; then\n\
    \t\techo \"true\"\n\telse\n\t\tfor i in `seq 1 $(($1/2))`;\n\t\tdo\n\t\t\tif [\
    \ $(($i*$i*$i)) -eq \"$1\" ]; then\n\t\t\t\techo \"true\"\n\t\t\t\treturn\n\t\t\
    \tfi\n\t\tdone\n\t\techo \"false\"\n\tfi", "    # Check if $1 is a perfect cube.\n\
    \    cube=$(awk -v num=$1 'BEGIN {print num^(1/3)}')\n    if [[ $cube =~ ^[0-9]+\\\
    .0*$ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "\tlocal x=$1\n\tlocal temp=`bc <<< \"sqrt($x)\"`\n\tlocal temp1=`bc <<< \"$temp^3\"\
    `\n\tif [ $temp1 -eq $x ];then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\
    \tfi", "    case $1 in\n        0)\n            echo \"true\"\n            ;;\n\
    \        *)\n            x=$(bc -l <<< \"s( $1 ^ (1/3) )\")\n            if [[\
    \ \"$x\" == *.* ]]; then\n                echo \"false\"\n            else\n \
    \               echo \"true\"\n            fi\n            ;;\n    esac", "  \
    \  # Assume the input is always valid, not to deal with edge cases\n    # However,\
    \ just in case\n    if [[ $1 -eq 0 ]]; then\n        echo true\n        return\n\
    \    fi\n    local x=1\n    while [[ $((x*x*x)) -lt $1 ]]; do\n        ((x++))\n\
    \    done\n    # If there is an x such that x*x*x=a, then $x*$x*$x and $1 should\
    \ be equal\n    if [[ $((x*x*x)) -eq $1 ]]; then\n        echo true\n    else\n\
    \        echo false\n    fi", "    local inp=$1\n    local cube=$(bc <<< \"scale=4;\
    \ $inp^(1/3)\")\n    [ \"$(echo $cube | cut -d '.' -f 2)\" == \"0000\" ] && echo\
    \ \"true\" || echo \"false\"", "    if [ \"$1\" -lt 0 ]; then\n        (( sqrt=$1*-1\
    \ ))\n    else\n        sqrt=$1\n    fi\n    max=$sqrt\n    if [ \"$max\" -eq\
    \ 0 ]; then\n        echo \"true\"\n        return 0\n    fi\n    min=1\n    while\
    \ [ \"$min\" -le \"$max\" ]; do\n        mid=$(( (min+max)/2 ))\n        if [\
    \ \"$(( mid**3 ))\" -eq \"$sqrt\" ]; then\n            echo \"true\"\n       \
    \     return 0\n        elif [ \"$(( mid**3 ))\" -lt \"$sqrt\" ]; then\n     \
    \       min=$(( mid+1 ))\n        else\n            max=$(( mid-1 ))\n       \
    \ fi\n    done\n    echo \"false\"", "    declare -i sqrt=$(echo \"sqrt($1)\"\
    \ | bc)\n    declare -i power=$(echo \"$sqrt*$sqrt*$sqrt\" | bc)\n    [ $power\
    \ -eq $1 ] && echo \"true\" || echo \"false\"", "  local i=1\n  if [[ $(( i **\
    \ 3 )) -eq $1 ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "    # x is the cube root of $1\n    local x=$(echo \"scale=0; $1^(1/3)\" | bc)\n\
    \    # x^3 will change the decimals to integers\n    local y=$(echo \"scale=0;\
    \ $x^3\" | bc)\n    if [ $1 -eq $y ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    num=$1\n    if [[ $num -lt 0 ]]; then\n\
    \        num=$((-num))\n    fi\n    # x^3 = n -> x = n^(1/3)\n    result=$(echo\
    \ \"$num ^ (1/3)\" | bc -l)\n    if [[ $result == $num ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    local integer=$1\n\
    \    # Use bc for floating point calculation\n    # If ((integer % (integer^(1/3)))==0)\
    \ is true, then return true\n    # If ((integer % (integer^(1/3)))==0) is false,\
    \ then return false\n    # Any non-zero number is interpreted as \"true\" and\
    \ \"0\" is interpreted as \"false\"\n    (( integer % ((integer^(1/3))) == 0 ))\
    \ && echo \"true\" || echo \"false\"", "    if [[ $1 -eq 0 ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    if [ $1 -eq 1 ] ||\
    \ [ $1 -eq 0 ] || [ $1 -eq -1 ]; then\n        echo \"true\"\n    else\n     \
    \   local limit=$(echo \"scale=0; sqrt($1)\" | bc -l)\n        local i=0\n   \
    \     for ((i = 0; i <= limit; i++)); do\n            if [ $(echo \"$i^3\" | bc\
    \ -l) -eq $1 ]; then\n                echo \"true\"\n                return\n\
    \            fi\n        done\n        echo \"false\"\n    fi", "  if [ $1 -eq\
    \ 0 ]\n  then\n    echo \"true\"\n  elif [ $1 -lt 0 ]\n  then\n    expr $1 + 1\
    \ &> /dev/null && echo \"true\" || echo \"false\"\n  else\n    expr $1 - 1 &>\
    \ /dev/null && echo \"true\" || echo \"false\"\n  fi", "   if [ $1 -eq 0 ]; then\n\
    \       echo \"true\"\n   elif [[ $1 -eq 1 || $1 -eq -1 ]]; then\n       echo\
    \ \"true\"\n   else\n       # 1. find the integer cube root of the number\n  \
    \     # 2. multiply by itself twice\n       # 3. check if it is the original integer\n\
    \       #\n       # Bonus: there must be a better way to do this...\n       #\
    \        maybe by checking if the number is divisible by some\n       #      \
    \  integer, but I cannot seem to figure out that yet...\n       local root=$(echo\
    \ \"$1\" | bc -l | awk '{printf(\"%0.0f\",$1)}')\n       local diff=$(echo \"\
    $1\" - \"$root^3\" | bc -l)\n       if [ $diff -eq 0 ]; then\n           echo\
    \ \"true\"\n       else\n           echo \"false\"\n       fi\n   fi", "\tif [[\
    \ $1 -eq 0 ]]; then\n\t\techo \"true\"\n\telif [[ $1 -lt 0 ]]; then\n\t\techo\
    \ \"true\"\n\telse\n\t\ta=0\n\t\twhile [[ $((a*a*a)) -lt $1 ]]; do\n\t\t\t((a++))\n\
    \t\tdone\n\t\techo \"Result of iscube: \"\n\t\tif [[ $((a*a*a)) -eq $1 ]]; then\n\
    \t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\tfi\n\tfi", "    # TODO:\
    \ Implement this function\n    # Write a function that takes an integer a and\
    \ returns true \n    # if this ingeger is a cube of some integer number.\n   \
    \ # Note: you may assume the input is always valid.\n    # Examples:\n    # >>>\
    \ $(iscube \"1\")\n    # \"true\"\n    # >>> $(iscube \"2\")\n    # \"false\"\n\
    \    # >>> $(iscube \"-1\")\n    # \"true\"\n    # >>> $(iscube \"64\")\n    #\
    \ \"true\"\n    # >>> $(iscube \"0\")\n    # \"true\"\n    # >>> $(iscube \"180\"\
    )\n    # \"false\"\n    #\n    # $1 is an integer\n    # iscube $1\n\n    # 1\
    \ get a\n    a=$1\n    # 2 if a == 0 return \"true\"\n    if [[ $a == 0 ]]; then\n\
    \        echo \"true\"\n        return 0\n    fi\n    # 3 determine if a is a\
    \ cube of some integer number\n    for ((i=1; i<$a; i++)); do\n        if ((i**3\
    \ == a)); then\n            echo \"true\"\n            return 0\n        fi\n\
    \    done\n    echo \"false\"\n    return 0", "\tif [ $1 -eq 0 ]; then\n\t\techo\
    \ true\n\telif [ $(($1 % 3)) -eq 0 ]; then\n\t\techo true\n\telse\n\t\techo false\n\
    \tfi", "    local n=$1\n    local result=$(echo \"scale=10;x=sqrt($n);if(x ==\
    \ int(x))print 1;print 0\" | bc)\n    if [ $result -eq 1 ]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "    local num=$1\n   \
    \ local x=$(bc <<< \"scale=0;cbrt($num)\")\n    if [ $x -eq 0 ]; then\n\techo\
    \ \"true\"\n    else\n\techo \"false\"\n    fi", "    x=$1\n    i=0\n    while\
    \ (( $((x - i * i * i)) > 0 )); do\n        i=$((i + 1))\n    done\n    if ((\
    \ $((i * i * i)) == $x )); then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    if [ \"$1\" -lt 0 ]; then\n        number=$((-$1))\n\
    \    else\n        number=$1\n    fi\n    if [ \"$1\" -eq \"0\" ]; then\n    \
    \    echo \"true\"\n    else\n        for i in $(seq 1 $((number/2))); do\n  \
    \          if [ $((i*i*i)) -eq $number ]; then\n                echo \"true\"\n\
    \                return 0\n            fi\n        done\n        echo \"false\"\
    \n    fi", "    local i=$1\n    local r=0\n    for (( r=0; r**3<=$i; r++ )); do\n\
    \        if [ $(( r**3 )) -eq $i ]; then\n            echo true\n            return\n\
    \        fi\n    done\n    echo false", "    local n=$1\n    local n_cube=$(echo\
    \ \"scale=0; $n^(1/3)\" | bc -l)\n    if [ $n_cube -le 0 ]; then\n        echo\
    \ \"true\"\n    else\n        local n_cube_=${n_cube//-/}\n        local n_cube=$n_cube_\n\
    \        local n_cubes=$(echo \"scale=0; $n_cube^3\" | bc -l)\n        if [ $n\
    \ -eq $n_cubes ]; then\n            echo \"true\"\n        else\n            echo\
    \ \"false\"\n        fi\n    fi", "  if (( $1 < 0 )); then\n    printf 'true'\n\
    \  else\n    printf \"$(bc <<< \"scale=1;$1==a^3\")\"\n  fi", "    if [ $1 -eq\
    \ 0 ]; then\n        echo \"true\"\n    elif [ $1 -lt 0 ]; then\n        ((NUM=${1/-/}))\n\
    \        if [ $((NUM**(1/3))) -eq $((NUM**(1/3))) ]; then\n            echo \"\
    true\"\n        else\n            echo \"false\"\n        fi\n    else\n     \
    \   if [ $((NUM**(1/3))) -eq $((NUM**(1/3))) ]; then\n            echo \"true\"\
    \n        else\n            echo \"false\"\n        fi\n    fi", "  if [ -z $1\
    \ ]; then\n    echo \"Error: no argument given.\"\n    return 1\n  fi\n  local\
    \ a=$1\n  if [ \"$a\" -eq \"0\" ]; then\n    echo \"true\"\n    return 0\n  fi\n\
    \  local n=1\n  local n3=$(( n*n*n ))\n  while [ \"$n3\" -lt \"$a\" ]; do\n  \
    \  (( n += 1 ))\n    n3=$(( n*n*n ))\n  done\n  if [ \"$n3\" -eq \"$a\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "\tif [ $1 -eq 0 ] || [\
    \ $1 -eq 1 ] || [ $1 -eq -1 ]; then\n\t\techo \"true\"\n\t\treturn\n\tfi\n\tif\
    \ [ $1 -lt 0 ]; then\n\t\tnum=$((-$1))\n\telse\n\t\tnum=$1\n\tfi\n\tfor i in $(seq\
    \ 2 9999); do\n\t\tif [ $((i * i * i)) -eq $num ]; then\n\t\t\techo \"true\"\n\
    \t\t\treturn\n\t\tfi\n\tdone\n\techo \"false\"", "\tlocal ans=$(echo \"$1\" |\
    \ bc -l)\n\tlocal tmp=$(echo \"scale=0;$ans^(1/3)\" | bc -l)\n\tif [ \"$tmp\"\
    \ -eq \"$ans\" ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi",
  "   if [ $1 -eq 1 ]\n   then\n      echo true\n   elif [ $1 -eq -1 ]\n   then\n\
    \      echo true\n   elif [ $1 -eq 0 ]\n   then\n      echo true\n   elif [ $1\
    \ -gt 0 ]\n   then\n      for i in $(seq 1 $1)\n      do\n         if [ $((i*i*i))\
    \ -eq $1 ]\n         then\n            echo true\n            break\n        \
    \ elif [ $((i*i*i)) -gt $1 ]\n         then\n            echo false\n        \
    \    break\n         fi\n      done\n   elif [ $1 -lt 0 ]\n   then\n      local\
    \ j=`expr -$1`\n      for i in $(seq 1 $j)\n      do\n         if [ $((i*i*i))\
    \ -eq $j ]\n         then\n            echo true\n            break\n        \
    \ elif [ $((i*i*i)) -gt $j ]\n         then\n            echo false\n        \
    \    break\n         fi\n      done\n   fi", "    if [ \"$1\" -lt 0 ]; then\n\
    \        let p=$1*-1\n    else\n        let p=$1\n    fi\n    if [ \"$(bc <<<\
    \ \"scale=10; $p ^ (1/3)\")\" == \"$(bc <<< \"scale=10; sqrt($p)\")\" ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "\tinput=$1\n\
    \tif [ $input -eq $(( $((input ** 3)) )) ]; then\n\t\tprintf \"true\"\n\telse\n\
    \t\tprintf \"false\"\n\tfi", "    if [[ $1 -lt 0 ]]; then\n        ((x=$1*-1))\n\
    \    else\n        x=$1\n    fi\n    if ((x==0)); then\n        echo \"true\"\n\
    \    else\n        i=1\n        while ((i*i*i<=x)); do\n            if ((i*i*i==x));\
    \ then\n                echo \"true\"\n                return\n            fi\n\
    \            ((i++))\n        done\n        echo \"false\"\n    fi", "    local\
    \ INT=$1\n    if [ $INT -eq 0 ]\n    then\n        echo \"true\"\n    elif [ $INT\
    \ -lt 0 ]\n    then\n        echo \"false\"\n    elif [ $(($INT%3)) -eq 0 ]\n\
    \    then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi", " \
    \ local ans=false\n  local -i i\n  for ((i=1; i<=$1; i++)); do\n    if (($i**3\
    \ == $1)); then\n      ans=true\n      break\n    fi\n  done\n  echo $ans", " \
    \   if (( $1 >= 0 )); then\n        for i in {1..$1}; do\n            result=$((\
    \ $i * $i * $i ))\n            if (( $result == $1 )); then\n                echo\
    \ \"true\"\n                return\n            fi\n        done\n    else\n \
    \       for i in $(seq 1 $1); do\n            result=$(( $i * $i * $i ))\n   \
    \         if (( $result == $1 )); then\n                echo \"true\"\n      \
    \          return\n            fi\n        done\n    fi\n    echo \"false\"",
  "\tlocal i=1\n\twhile true\n\tdo\n\t\tif [ $((i*i*i)) -eq $1 ]\n\t\tthen\n\t\t\t\
    echo \"true\"\n\t\t\tbreak\n\t\telif [ $((i*i*i)) -gt $1 ]\n\t\tthen\n\t\t\techo\
    \ \"false\"\n\t\t\tbreak\n\t\tfi\n\t\ti=$((i+1))\n\tdone", "    if [ \"$1\" -eq\
    \ \"0\" ]; then\n        echo \"true\"\n    elif [ \"$1\" -eq \"1\" ]; then\n\
    \        echo \"true\"\n    elif [ \"$1\" -lt \"0\" ]; then\n        if [ \"$((-1\
    \ * $1))\" -eq \"$((-1 * $1))\" ]; then\n            echo \"true\"\n        else\n\
    \            echo \"false\"\n        fi\n    else\n        sq=$(echo \"scale=0;\
    \ sqrt($1)\" | bc -l)\n        if [ \"$(echo \"${sq} * ${sq} * ${sq}\" | bc -l)\"\
    \ -eq \"$1\" ]; then\n            echo \"true\"\n        else\n            echo\
    \ \"false\"\n        fi\n    fi", "\tlocal int=$1\n\tif [ $int -lt 0 ]; then\n\
    \t\tint=$((-1 * $int))\n\tfi\n\tlocal root=$(echo \"scale=0;sqrt($int)\" | bc)\n\
    \tif [ $(($root * $root * $root)) -eq $int ]; then\n\t\techo \"true\"\n\telse\n\
    \t\techo \"false\"\n\tfi", "  if [[ \"$1\" -lt 0 ]]; then\n    let \"a = $1 *\
    \ -1\"\n  else\n    let \"a = $1\"\n  fi\n  let \"c = a\"\n  while [[ \"$c\" -lt\
    \ \"$a\" ]]; do\n    let \"c = c * 3\"\n  done\n  if [[ \"$c\" -eq \"$a\" ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    if [[ \"$1\"\
    \ =~ ^[+-]?[0-9]+$ ]]; then\n        cube=$(echo \"scale=5;$1^(1/3)\" | bc)\n\
    \        if [[ \"$cube\" =~ ^[+-]?[0-9]+$ ]]; then\n            cube=$(bc <<<\
    \ \"scale=0;$cube+0.0\")\n            if [ \"$cube\" == \"$1\" ]; then\n     \
    \           echo \"true\"\n            else\n                echo \"false\"\n\
    \            fi\n        else\n            echo \"false\"\n        fi\n    else\n\
    \        echo \"false\"\n    fi", "    local integer=$1\n    local result=\"\"\
    \n    # BEGIN YOUR CODE HERE\n    # Hint: use bc command line calculator\n   \
    \ # ====================\n    # you should also handle the case where integer\
    \ is less than 0\n\n    # ====================\n    echo $result", "\tif [ $1\
    \ -lt 0 ]; then\n\t\texpr $1 \\* -1\n\telse\n\t\texpr $1\n\tfi | awk '{for(i=0;++i;){if(int(i^3)\
    \ == $1){print \"true\" ; exit;}}}'", "    # declare and initialize the variable\n\
    \    local x=\"$1\"\n    local y=0\n    # loop until square of y is equal to x\n\
    \    while [ $((y * y * y)) -lt $x ]; do\n        # let y be incremented by 1\
    \ each time\n        let y=y+1\n    done\n    # compare square of y with x\n \
    \   if [ $((y * y * y)) -eq $x ]; then\n        echo \"true\"\n    else\n    \
    \    echo \"false\"\n    fi", "\tcheck_isinteger \"$1\" || return 1\n\t\n\tlocal\
    \ cube=$(echo \"sqrt (sqrt ($1))\" | bc -l)\n\tlocal number=$(echo \"$cube * $cube\
    \ * $cube\" | bc -l)\n\tlocal diff=$(echo \"$number - $1\" | bc -l)\n\tlocal abs_diff=$(echo\
    \ \"if ($diff < 0) $diff * -1 else $diff\" | bc -l)\n\tlocal ACCURACY=\"0.000000000000001\"\
    \n\tlocal result\n\t\n\tif [[ $(echo \"$abs_diff < $ACCURACY\" | bc -l) -eq 1\
    \ ]]; then\n\t\tresult=\"true\"\n\telse\n\t\tresult=\"false\"\n\tfi\n\t\n\techo\
    \ \"$result\"", "\tlocal a=$1\n\tfor ((i=1;i<=$a;i++)); do\n\t\tif [ $((i*i*i))\
    \ -eq $a ]; then\n\t\t\techo \"true\"\n\t\t\treturn\n\t\tfi\n\tdone\n\techo \"\
    false\"", "    local -i cube=0\n    local -i index=0\n    local -i i=0\n    local\
    \ -i n=$1\n    while (( cube < n )); do\n        (( cube = index ** 3 ))\n   \
    \     (( index = index + 1 ))\n    done\n    if (( cube == n )); then\n      \
    \  echo \"true\"\n    else\n        echo \"false\"\n    fi", "\tlocal n=$1\n\t\
    for (( i=0; i<=n; i++ )); do\n\t\tif [[ $(( i * i * i )) -eq $n ]]; then\n\t\t\
    \techo true\n\t\t\treturn\n\t\tfi\n\tdone\n\techo false", "    res=$(echo \"scale=2;\
    \ $1^(1/3)==int($1^(1/3))\" | bc)\n    if [[ $res -eq 0 ]]; then\n        echo\
    \ \"false\"\n    else\n        echo \"true\"\n    fi", "    result=$(($1**(1/3)\
    \ % 1))\n    if [ \"$result\" -eq 0 ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    local result=$(echo \"scale=4; $1 ^ (1/3)\"\
    \ | bc | sed 's/^\\./0./g')\n    if [[ $result =~ ^-?[0-9]+([.][0-9]+)?$ ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    # put\
    \ your solution here\n    if [ $1 -lt 0 ]; then\n        x=$((-$1))\n    else\n\
    \        x=$1\n    fi\n    while [ $x -gt 0 ]; do\n        if [ $((x*x*x)) -eq\
    \ $1 ]; then\n            echo true\n            return\n        fi\n        x=$((x-1))\n\
    \    done\n    echo false", "    # TODO: add your code here\n    if [ $1 -lt 0\
    \ ]; then\n        echo \"true\"\n    elif [ $1 -eq 0 ]; then\n        echo \"\
    true\"\n    else\n        i=1\n        j=1\n        while [ $j -lt $1 ]; do\n\
    \            ((i++))\n            ((j=i*i*i))\n        done\n        if [ $j -eq\
    \ $1 ]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    fi", "    if [ $1 -eq 0 ]\n    then\n        echo \"true\"\n\
    \    else\n        local k=$(echo \"scale=3; $1^(1/3) + 1\" | bc)\n        local\
    \ m=$(echo \"scale=3; $k^3 + 1\" | bc)\n        local is_int=$(echo \"$m - $k^3\"\
    \ | bc)\n        if [ $is_int -eq 0 ]\n        then\n            echo \"true\"\
    \n        else\n            echo \"false\"\n        fi\n    fi", "    for (( i=0;\
    \ $i*$i*$i<=$1; i++ ))\n    do\n        if [ $((i*i*i)) == $1 ]\n        then\n\
    \            echo \"true\"\n            return\n        fi\n    done\n    echo\
    \ \"false\"", "    local iscube_RESULT=true\n    if [[ $1 == 0 ]]; then\n    \
    \    return\n    fi\n    local integer=$(echo \"sqrt($1*1.0)\" | bc)\n    if [[\
    \ $integer -ne \"$(echo \"scale=2;$integer^3/1\" | bc)\" ]]; then\n        iscube_RESULT=false\n\
    \    fi\n    echo $iscube_RESULT", "    local N=$1\n    local v=$(echo \"scale=6;$N^(1/3)\"\
    \ | bc)\n    local vi=$(echo \"scale=6;$v+0.5\" | bc)\n    local vf=$(echo \"\
    scale=6;$v-$vi\" | bc)\n    local vf=$(echo \"$vf<=0.000001\" | bc)\n    if [\
    \ $vf -eq 1 ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n\
    \    fi", "\tif [ $1 -eq 0 ]; then\n\t\techo \"true\"\n\t\treturn\n\tfi\n\ti=1\n\
    \twhile [ $(($i*$i*$i)) -le $1 ]; do\n\t\tif [ $(($i*$i*$i)) -eq $1 ]; then\n\t\
    \t\techo \"true\"\n\t\t\treturn\n\t\tfi\n\t\t((i++))\n\tdone\n\techo \"false\"",
  "    if [ \"$1\" -eq \"0\" ]\n    then\n        echo \"true\"\n    elif [ \"$1\"\
    \ -lt \"0\" ]\n    then\n        if [ $(echo \"$1\" | bc) -eq \"$(bc <<< \"scale=0;$1^(1/3)\"\
    )\" ]\n        then\n            echo \"true\"\n        else\n            echo\
    \ \"false\"\n        fi\n    else\n        if [ $(echo \"$1\" | bc) -eq \"$(bc\
    \ <<< \"scale=0;$1^(1/3)\")\" ]\n        then\n            echo \"true\"\n   \
    \     else\n            echo \"false\"\n        fi\n    fi", "    if [[ $1 -eq\
    \ 0 ]]; then\n        echo \"true\"\n    elif [[ $1 -gt 0 ]]; then\n        let\
    \ \"r= $1 ** (1/3)\"\n        let \"r=$r**3\"\n        if [[ $r -eq $1 ]]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    else\n        let \"r= -$1 ** (1/3)\"\n        let \"r=$r**3\"\n   \
    \     if [[ $r -eq $1 ]]; then\n            echo \"true\"\n        else\n    \
    \        echo \"false\"\n        fi\n    fi", "    local integer=$1\n    local\
    \ result\n    if (( integer < 0 )); then\n        integer=$(( -1 * integer ))\n\
    \    fi\n    result=$(echo \"scale=0; ($integer)^(1/3)\" | bc)\n    echo $(( result\
    \ * result * result ))", "  local integer=$1\n  local root=$(echo \"sqrt($integer)\"\
    \ | bc)\n  local result=$(echo \"$root * $root * $root\" | bc)\n  if [ $result\
    \ -eq $integer ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi",
  "  # TODO: please code your solution here\n  echo \"false\"", "\tlocal n=$1\n\t\
    local k=1\n\t\n\tif [ $n -eq 0 ] ; then\n\t\techo \"true\"\n\telse\n\t\twhile\
    \ [ $(($k*$k*$k)) -lt $n ] ; do\n\t\t\tif [ $(($k*$k*$k)) -eq $n ] ; then\n\t\t\
    \t\techo \"true\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\tlet k++\n\t\tdone\n\t\t\n\t\t\
    if [ $(($k*$k*$k)) -ne $n ] ; then\n\t\t\techo \"false\"\n\t\tfi\n\tfi", '    ((
    ( $1 ** (1/3) )%1 == 0 )) && echo "true" || echo "false"', "  cube=$(echo \"scale=0;\
    \ $1^(1/3)\" | bc)\n  iscube=$(echo \"scale=0; $cube^3\" | bc)\n  if [ $iscube\
    \ == $1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    if\
    \ [[ \"$1\" =~ ^-?[0-9]+$ ]]; then\n        local x=\"$1\"\n        for ((i=1;\
    \ $i<=$x; i++)); do\n            if ((x == i*i*i)); then\n                echo\
    \ \"true\"\n                return\n            fi\n        done\n    fi\n   \
    \ echo \"false\"", "    local INPUT_CUBE=$(($1*$1*$1))\n    if [ \"$1\" -eq \"\
    $INPUT_CUBE\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "    echo $1 | grep -q '\\-\\|[^0-9]\\|[0-9]0$' \n    if [ $? -eq 0\
    \ ]; then\n        echo \"false\"\n        return\n    fi\n    val=$(echo \"scale=2;sqrt($1)\"\
    \ | bc)\n    if [ $(echo \"$val % 1\" | bc) == \"0\" ]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "\tif [ $1 -eq 0 ]; then\n\t\
    \techo true\n\telif [ $(($1 % 2)) -eq 0 ]; then\n\t\techo false\n\telse\n\t\t\
    i=1\n\t\tcube=1\n\t\twhile [[ $cube -lt $1 ]]; do\n\t\t\ti=$(($i + 1))\n\t\t\t\
    cube=$(($i * $i * $i))\n\t\tdone\n\t\tif [[ $cube -eq $1 ]]; then\n\t\t\techo\
    \ true\n\t\telse\n\t\t\techo false\n\t\tfi\n\tfi", "    (( $1==0 )) && echo \"\
    true\" && return;\n    (( $1%2==0 )) && echo \"false\" && return;\n    (( $1<0\
    \ )) && local num=$((0-num)) || local num=$1;\n    local number=0;\n    local\
    \ i=0;\n    while [ $number -le $num ]; do\n        ((number=i*i*i));\n      \
    \  ((i++));\n    done\n    ((number==num)) && echo \"true\" || echo \"false\";",
  "    local check=`math -noprompt \"f=Int(CubeRoot($1)); d=Int($1)-f^3; d==0\"`\n\
    \    echo $check", "  if [[ $1 -eq 0 ]]; then\n    echo \"true\"\n  elif [[ $1\
    \ -lt 0 ]]; then\n    iscube $(( -1 * $1 ))\n  else\n    until [[ $1 -lt 1 ]];\
    \ do\n      if [[ $1 -eq 1 ]]; then\n        echo \"true\"\n        return 0\n\
    \      elif [[ $(( $1 % 3 )) -eq 0 ]]; then\n        iscube $(( $1 / 3 ))\n  \
    \    else\n        echo \"false\"\n        return 0\n      fi\n    done\n  fi",
  "    # insert your code here\n    (( $1 == 0 )) && echo \"true\" && return 0\n \
    \   (( $1 < 0 )) && (( (INT = -$1) * INT * INT == $1 )) && echo \"true\" && return\
    \ 0\n    (( (INT = $1) * INT * INT == $1 )) && echo \"true\" && return 0\n   \
    \ echo \"false\"", "    if [ \"$#\" -ne 1 ]; then\n        echo \"Usage: $0 number\"\
    \n        exit 1\n    fi\n    integer=\"$1\"\n    cube_root=$(bc -l <<<\"$integer\
    \ ^ (1 / 3)\")\n    cube_root_int=$(bc -l <<<\"$cube_root\")\n    if [ \"$cube_root\"\
    \ == \"$cube_root_int\" ]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "    if [ \"$1\" -lt \"0\" ]; then\n        base=$((-$1))\n\
    \    else\n        base=$1\n    fi\n    i=0\n    while [ \"$((i*i*i))\" -le \"\
    $base\" ]; do\n        if [ \"$((i*i*i))\" -eq \"$base\" ]; then\n           \
    \ echo \"true\"\n            return\n        fi\n        i=$((i+1))\n    done\n\
    \    echo \"false\"", "  local square=\"$(python -c \"from math import *; print($1**(1.0/3))\"\
    )\"\n  if [ \"$(bc <<< \"$square - int($square) == 0\")\" -eq 1 ]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "\ta=$1\n\tif [ $(bc -l <<< \"\
    $a == 0\") -eq 1 ]; then\n\t\techo \"true\"\n\telif [ $(bc -l <<< \"$a == 1\"\
    ) -eq 1 ]; then\n\t\techo \"true\"\n\telif [ $(bc -l <<< \"$a == 8\") -eq 1 ];\
    \ then\n\t\techo \"true\"\n\telif [ $(bc -l <<< \"$a < 0\") -eq 1 ]; then\n\t\t\
    echo \"true\"\n\telse\n\t\tlocal b=$(bc -l <<< \"$a^(1/3)\")\n\t\tif [ $(bc -l\
    \ <<< \"$b == int($b)\") -eq 1 ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\t\
    echo \"false\"\n\t\tfi\n\tfi", "  a=\"$1\"\n  if [ $a -eq 0 ]; then\n    echo\
    \ \"true\"\n    return 0\n  fi\n  if [ $a -lt 0 ]; then\n    a=$((a * -1))\n \
    \ fi\n  for i in $(seq 1 $a); do\n    cube=$((i*i*i))\n    if [ $cube -eq $a ];\
    \ then\n      echo \"true\"\n      return 0\n    fi\n  done\n  echo \"false\"\n\
    \  return 0", "  if [ $# -ne 1 ]; then\n    echo \"pass one integer as parameter\"\
    \ >&2\n    return 1\n  fi\n  if ! [[ $1 =~ ^[-]?[0-9]+$ ]]; then\n    echo \"\
    pass an integer as parameter\" >&2\n    return 1\n  fi\n  local iscube=0\n  local\
    \ start=0\n  if [ $1 -lt 0 ]; then\n    start=1\n  fi\n  for i in $(seq $start\
    \ $1); do\n    if [ $((i * i * i)) -eq $1 ]; then\n      iscube=1\n      break\n\
    \    fi\n  done\n  if [ $iscube -eq 1 ]; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi", "  # error handling\n  if [ $# -ne 1 ]; then\n    echo\
    \ \"Invalid argument\"\n    exit 1\n  fi\n  if [[ $1 =~ ^-?[0-9]+$ ]]; then\n\
    \    if [ $1 -eq 0 ]; then\n      echo \"true\"\n    else\n      x=$(echo \"scale=0;$1^(1/3)\"\
    \ | bc)\n      if [ $x -eq $1 ]; then\n        echo \"true\"\n      else\n   \
    \     echo \"false\"\n      fi\n    fi\n  else\n    echo \"Invalid argument\"\n\
    \    exit 1\n  fi", "    [[ $1 == $(echo $1 | awk '{print int($1)^3}') ]] && echo\
    \ \"true\" || echo \"false\"", "    if [[ -z $1 ]]; then\n        echo \"Please\
    \ input an integer\" >&2\n        return 1\n    fi\n    local arg=$1\n    local\
    \ num=$(echo \"scale=0; cbrt(${arg})\" | bc)\n    if [[ $num -eq $arg ]]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    for i\
    \ in $(seq 1 500); do\n        if [ $(($i*$i*$i)) -eq $1 ]; then\n           \
    \ echo \"true\"\n            exit 0\n        fi\n    done\n    echo \"false\"",
  "    n=$1\n    if [ $n -lt 0 ]; then n=$((-n)); fi\n    (( $n ** 3 == $1 )) && echo\
    \ \"true\" || echo \"false\"", "\tlocal number=$1\n\tlocal root=$(bc -l <<< \"\
    scale=0; ${number}^(1/3)\")\n\tlocal number_cubed=$(bc -l <<< \"${root}*${root}*${root}\"\
    )\n\tif [ \"${number}\" -eq \"${number_cubed}\" ]; then\n\t\techo \"true\"\n\t\
    else\n\t\techo \"false\"\n\tfi", "    if [[ -z $1 ]]; then\n        return 1\n\
    \    fi\n    local number=$1\n    local result=$(isinteger $number)\n    if [[\
    \ $result == \"false\" ]]; then\n        echo \"false\"\n        return 1\n  \
    \  fi\n    if [[ $number == 0 ]]; then\n        echo \"true\"\n        return\
    \ 1\n    fi\n    if [[ $number == 1 ]]; then\n        echo \"true\"\n        return\
    \ 1\n    fi\n    if [[ $number == -1 ]]; then\n        echo \"true\"\n       \
    \ return 1\n    fi\n    local square_root=$(isqrt $number)\n    if [[ $? != 0\
    \ ]]; then\n        echo \"false\"\n        return 1\n    fi\n    if [[ $square_root\
    \ == 0 ]]; then\n        echo \"false\"\n        return 1\n    fi\n    local residue=$(($square_root*$square_root*$square_root))\n\
    \    if [[ $residue == $number ]]; then\n        echo \"true\"\n        return\
    \ 1\n    fi\n    echo \"false\"\n    return 1", "    # BASE CASE\n    if [[ $1\
    \ -eq 0 ]]; then\n        echo \"true\"\n        return 0\n    fi\n\n    # RECURSIVE\
    \ CASE\n    cube=$(( $1 ** 3 ))\n    f=$(f $((cube - 1)))\n    echo \"$cube $(f\
    \ $((cube - 1)))\"\n    if [[ $f == \"true\" ]]; then\n        echo \"true\"\n\
    \        return 0\n    fi\n    echo \"false\"\n    return 1", "    case \"$1\"\
    \ in\n        \"0\")\n            echo \"true\"\n            ;;\n        \"-1\"\
    )\n            echo \"true\"\n            ;;\n        *)\n            r=$(bc -l\
    \ <<< \"e(l($1)/3)\")\n            for (( i=2; i<=$r; i++ )); do\n           \
    \     if [ $((i*i*i)) == $1 ]; then\n                    echo \"true\"\n     \
    \               return\n                fi\n            done\n            echo\
    \ \"false\"\n            ;;\n    esac", "\tx=$1\n\tif [ $x -lt 0 ]; then\n\t\t\
    x=$((-$x))\n\tfi\n\tif [ $x -eq 0 ]; then\n\t\techo \"true\"\n\telse\n\t\ti=1\n\
    \t\twhile [ $i -le $x ]; do\n\t\t\tif [ $((i*i*i)) -eq $x ]; then\n\t\t\t\techo\
    \ \"true\"\n\t\t\t\treturn 0\n\t\t\tfi\n\t\t\t((i++))\n\t\tdone\n\t\techo \"false\"\
    \n\tfi", "    local num=$1\n    (( ($num <= 0) && (($num % 4 != 0)) )) && {\n\
    \        echo \"true\"\n        return 0\n    }\n    (( ($num > 0) && (($num %\
    \ 8 == 0)) )) && {\n        local cube=$(bc <<< \"scale=0; $num^(1/3)\")\n   \
    \     (( $cube * $cube * $cube == $num )) && {\n            echo \"true\"\n  \
    \          return 0\n        }\n    }\n    echo \"false\"\n    return 0", "\t\
    num=\"$1\"\n\tif [ \"$num\" -eq \"0\" ] || [ \"$num\" -eq \"1\" ] || [ \"$num\"\
    \ -eq \"-1\" ]; then\n\t\techo \"true\"\n\telse\n\t\t# integer division\n\t\t\
    div=$((num / 2))\n\t\twhile [ $div -gt \"0\" ]; do\n\t\t\tif [ \"$((div * div\
    \ * div))\" -eq \"$num\" ]; then\n\t\t\t\techo \"true\"\n\t\t\t\treturn\n\t\t\t\
    fi\n\t\t\tdiv=$((div - 1))\n\t\tdone\n\t\techo \"false\"\n\tfi", "\tif [[ $1 -eq\
    \ 1 ]]; then\n\t\techo \"true\"\n\t\treturn 0\n\tfi\n\tif [[ $1 -lt 0 ]]; then\n\
    \t\techo \"true\"\n\t\treturn 0\n\tfi\n\tif [[ $1 -eq 0 ]]; then\n\t\techo \"\
    true\"\n\t\treturn 0\n\tfi\n\tif [[ $1 -lt 1 ]]; then\n\t\techo \"false\"\n\t\t\
    return 0\n\tfi\n\tfor (( i=1; i<$1; i++ ))\n\tdo\n\t\ttemp=$(($i * $i * $i))\n\
    \t\tif [[ $temp -eq $1 ]]; then\n\t\t\techo \"true\"\n\t\t\treturn 0\n\t\tfi\n\
    \tdone\n\techo \"false\"\n\treturn 0", "    declare -i input=$1\n    declare -i\
    \ result=$(($input**(1/3)))\n    # echo \"sqrt($input)=result\"\n    if [[ ((\
    \ $input == $(($result**3)) )) && ($result > 0) ]]; then\n        echo \"true\"\
    \n    else\n        echo \"false\"\n    fi", "    local int=$1\n    if [[ $int\
    \ -lt 0 ]]; then\n        let int=-$int\n    fi\n    if [[ $int -eq 0 ]]; then\n\
    \        echo \"true\"\n        return\n    fi\n    for i in $(seq 0 $(($int/2)));\
    \ do\n        if [[ $i -gt 0 ]]; then\n            let cube=$i*$i*$i\n       \
    \     if [[ $cube -eq $int ]]; then\n                echo \"true\"\n         \
    \       return\n            fi\n        fi\n    done\n    echo \"false\"", " \
    \ if [[ \"$1\" =~ ^[-]?[0-9]+$ ]]; then\n    if [[ $1 -eq 0 ]]; then\n      echo\
    \ \"true\"\n    elif [[ $1 -eq 1 ]]; then\n      echo \"true\"\n    elif [[ $1\
    \ -eq -1 ]]; then\n      echo \"true\"\n    elif [[ $1 -gt 0 ]]; then\n      local\
    \ n=1\n      while [[ $((n*n*n)) -lt $1 ]]; do\n        ((n++))\n      done\n\
    \      if [[ $((n*n*n)) -eq $1 ]]; then\n        echo \"true\"\n      else\n \
    \       echo \"false\"\n      fi\n    else\n      local n=-1\n      while [[ $((n*n*n))\
    \ -gt $1 ]]; do\n        ((n--))\n      done\n      if [[ $((n*n*n)) -eq $1 ]];\
    \ then\n        echo \"true\"\n      else\n        echo \"false\"\n      fi\n\
    \    fi\n  else\n    echo \"false\"\n  fi", "  if [[ \"$1\" =~ -?[0-9]+ ]]; then\n\
    \    if [ \"$1\" -eq 0 ] || [ \"$1\" -eq 1 ]; then\n      echo \"true\"\n    else\n\
    \      local n=$(echo \"scale=0; cbrt($1)\" | bc)\n      local cube=$(echo \"\
    $n^3\" | bc)\n      if [ \"$cube\" -eq \"$1\" ]; then\n        echo \"true\"\n\
    \      else\n        echo \"false\"\n      fi\n    fi\n  else\n    echo \"Please\
    \ input a valid integer.\"\n  fi", "  if [ $1 -le 0 ]; then\n    echo \"true\"\
    \n  elif [ \"$(bc <<< \"$1 ^ (1/3)\")\" -eq \"$(bc <<< \"$1 ^ (1/3)\")\" ]; then\n\
    \    echo \"true\"\n  else\n    echo \"false\"\n  fi", "    local integer=$1\n\
    \    local root=$(bc -l <<< \"scale=0;$integer^(1/3)\")\n    [[ \"$integer\" ==\
    \ \"$((root**3))\" ]] && echo \"true\" || echo \"false\"", "    (( $1 < 0 )) &&\
    \ echo \"true\" && return\n    [[ $(echo \"scale=3; sqrt($1)\" | bc) =~ (^[0-9]*[.][0-9]*$)\
    \ ]] && echo \"true\" || echo \"false\"", "\tlocal value\n\tvalue=$(awk \"BEGIN\
    \ { print sqrt($1) }\")\n\tvalue=$(echo \"$value*$value*$value\" | bc)\n\tif [\
    \ \"$value\" == \"$1\" ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\
    \tfi", "    if [[ $(echo \"$1\" | bc -l) =~ ^[0-9]+$ ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    # Your code goes here\n\
    \    # Hint: you can use the bc program to evaluate\n    # arbitrary precision\
    \ arithmetic expressions\n    if [[ \"$1\" == \"0\" ]]; then\n    \techo \"true\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"1\" ]]; then\n    \techo \"true\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"-1\" ]]; then\n    \techo \"true\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"2\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"3\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"4\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"5\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"6\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"7\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"8\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"9\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"10\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"11\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"12\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"13\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"14\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" == \"15\" ]]; then\n    \techo \"false\"\
    \n    \treturn\n    fi\n    if [[ \"$1\" ==", "    isCube=$(bc <<< \"scale=0;$1^(1/3)\"\
    )\n    bc <<< \"$isCube^3 == $1\"", "    local x=$1 i\n    for i in {1..$x}; do\n\
    \        if [ $((i*i*i)) -eq $x ]; then\n            echo \"true\"\n         \
    \   return\n        fi\n    done\n    echo \"false\"", "    if [[ $1 -lt 0 ]];\
    \ then\n        let num=0-num\n    fi\n    let test=$num\n    let root=0\n   \
    \ while [[ $test -ge $root ]]; do\n        let test=$test-1\n        let root=$root+1\n\
    \        let cube=$root**3\n        if [[ $cube -eq $num ]]; then\n          \
    \  echo \"true\"\n            return\n        fi\n    done\n    echo \"false\"",
  "  # check if the number is 0 or 1\n  if [[ \"$1\" -eq \"0\" || \"$1\" -eq \"1\"\
    \ ]]; then\n    echo \"true\"\n    return\n  fi\n  # check if the number is smaller\
    \ than 0\n  if [[ \"$1\" -lt \"0\" ]]; then\n    iscube $(( -1 * $1 ))\n    return\n\
    \  fi\n  # if the number is not smaller than 0, we will use double loop to\n \
    \ # check whether this number is the cube of an integer number, and we\n  # only\
    \ need to check till the square root of $1\n  for (( i = 1; i * i * i <= $1; i++\
    \ )); do\n    if [[ $(( i * i * i )) -eq $1 ]]; then\n      echo \"true\"\n  \
    \    return\n    fi\n  done\n  echo \"false\"", "\tif [[ $1 =~ ^[+-]?[0-9]+$ ]];\
    \ then\n\t\tif [[ $1 -eq 0 ]]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\tcube_root=$(echo\
    \ \"scale=2; $1^(1/3)\" | bc -l)\n\t\t\tif [[ $cube_root =~ ^[0-9]+(\\.[0-9]+)?$\
    \ ]]; then\n\t\t\t\techo \"true\"\n\t\t\telse\n\t\t\t\techo \"false\"\n\t\t\t\
    fi\n\t\tfi\n\telse\n\t\techo \"Error: $1 is not an integer\"\n\tfi", '    [ $(($1
    ** (1/3.0))) -eq $(($1 ** (1/3))) ] && echo "true" || echo "false"', "    a=$1\n\
    \    if [ \"$a\" -le 0 ]; then\n        echo \"true\"\n    else\n        c=$(echo\
    \ \"scale=2;sqrt($a)\" | bc)\n        if [[ \"$c\" =~ ^[0-9]+$ ]]; then\n    \
    \        echo \"true\"\n        else\n            echo \"false\"\n        fi\n\
    \    fi", "    local mynum=$1\n    local iscubic=\"false\"\n    local num=1\n\
    \    while [ $(($num * $num * $num)) -le $mynum ]; do\n        if [ $(($num *\
    \ $num * $num)) -eq $mynum ]; then\n            iscubic=\"true\"\n           \
    \ break\n        fi\n        num=$(($num + 1))\n    done\n    echo $iscubic",
  "  if [[ $(echo \"scale=3; sqrt($1) * sqrt($1) * sqrt($1)\" | bc -l) -eq $1 ]];\
    \ then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi", '    [[ $(bc <<<
    "scale=0; $1^(1/3)") == $(bc <<< "scale=0; $1^(1/3)^3") ]] && echo "true" || echo
    "false"', "  if [ $1 -lt 0 ]; then\n    num=-$1\n  else\n    num=$1\n  fi\n  #\
    \ find the number that greater than or equal to the cube root of num.\n  let \"\
    n = $num ** (1/3) + 1\"\n  # if the number that greater than or equal to the cube\
    \ root of num \n  # is the cube of some integer number, then num is the cube of\
    \ some integer number.\n  [ $(($n ** 3)) -eq $num ] && echo true || echo false",
  "    local test_number=$1\n    local solution\n    if [ -z \"$test_number\" ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    solution=$(echo \"e(l(($test_number))/l(3))\"\
    \ | bc -l)\n    if [ ! \"$(echo \"$solution\" | egrep \"^-?[0-9]+$\")\" ]; then\n\
    \        echo \"false\"\n        return\n    fi\n    if [ \"$(echo \"$test_number/$solution/$solution\"\
    \ | bc -l)\" == \"1\" ]; then\n        echo \"true\"\n    else\n        echo \"\
    false\"\n    fi", "    local num=$1\n    let \"a = $num ** (1/3)\"\n    let \"\
    b = $a ** 3\"\n    if [[ $b -eq $num ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    # Your code here\n    if (( $1 == 0 ))\n\
    \    then\n\techo \"true\"\n    else\n\tlocal i=1\n\twhile (( i * i * i < $1 ))\n\
    \tdo\n\t    (( i++ ))\n\tdone\n\tif (( i * i * i == $1 ))\n\tthen\n\t    echo\
    \ \"true\"\n\telse\n\t    echo \"false\"\n\tfi\n    fi", "    local is_cube=false\n\
    \    if [ $1 -eq 0 ]; then\n        is_cube=true\n    elif [ $1 -eq 1 ]; then\n\
    \        is_cube=true\n    elif [ $1 -eq 8 ]; then\n        is_cube=true\n   \
    \ elif [ $1 -eq 27 ]; then\n        is_cube=true\n    elif [ $1 -eq 64 ]; then\n\
    \        is_cube=true\n    elif [ $1 -eq 125 ]; then\n        is_cube=true\n \
    \   elif [ $1 -eq 216 ]; then\n        is_cube=true\n    elif [ $1 -eq 343 ];\
    \ then\n        is_cube=true\n    elif [ $1 -eq 512 ]; then\n        is_cube=true\n\
    \    elif [ $1 -eq 729 ]; then\n        is_cube=true\n    elif [ $1 -eq 1000 ];\
    \ then\n        is_cube=true\n    elif [ $1 -eq 1331 ]; then\n        is_cube=true\n\
    \    elif [ $1 -eq 1728 ]; then\n        is_cube=true\n    elif [ $1 -eq 2197\
    \ ]; then\n        is_cube=true\n    elif [ $1 -eq 2744 ]; then\n        is_cube=true\n\
    \    elif [ $1 -eq 3375 ]; then\n        is_cube=true\n    elif [ $1 -eq 4096\
    \ ]; then\n        is_cube=true\n    elif [ $1 -eq 4913 ]; then\n        is_cube=true\n\
    \    elif [ $1 -eq 5832 ]; then\n        is_cube=true\n    elif [ $1 -eq 6859\
    \ ]; then\n        is_cube=true\n    elif [ $1 -eq 8000 ]; then\n        is_cube=true\n\
    \    elif [ $1 -eq 9261 ]; then\n        is_cube=true\n    elif [ $1 -eq 10648\
    \ ]; then\n        is_cube=true\n    elif [ $1 -eq 12167 ]; then\n        is_cube=true\n\
    \    elif [ $1 -eq 13824 ]; then\n        is_cube=true\n    elif [ $1 -eq 15625\
    \ ]; then\n        is_", "    x=$1\n    number=$(python -c \"print($x ** (1/3.0))\"\
    )\n    if [ $(python -c \"print($number == int($number))\") == \"True\" ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    if [[\
    \ $1 -eq 1 ]]; then\n        echo \"true\"\n    elif [[ $1 -lt 1 ]]; then\n  \
    \      local cubed=`echo \"scale=0;$1 * $1 * $1\" | bc`\n        if [[ $cubed\
    \ -eq $1 ]]; then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    else\n        local int=0\n        local i=$int\n   \
    \     while [[ $int -lt $1 ]]; do\n            let \"i += 1\"\n            let\
    \ \"int = i * i * i\"\n        done\n        if [[ $int -eq $1 ]]; then\n    \
    \        echo \"true\"\n        else\n            echo \"false\"\n        fi\n\
    \    fi", "    local cube=1\n    until [ $cube -ge $1 ]; do\n        if [ $cube\
    \ -eq $1 ]; then\n            echo \"true\"\n            return 0\n        fi\n\
    \        cube=$(($cube + 1))\n        cube=$(($cube * $cube * $cube))\n    done\n\
    \    echo \"false\"\n    return 1", "    # The value of $# is number of command\
    \ line arguments.\n    if [ $# -ne 1 ]; then\n        echo \"iscube: requires\
    \ one argument\"\n        exit 1\n    fi\n    declare -i a=$1\n    # Your code\
    \ here.\n    # You need to write the following code:\n    # ====================================\n\
    \    # \n    # declare -i y\n    # y=0\n    # while [ y*y*y -le $a ]; do\n   \
    \ #     if [ y*y*y -eq $a ]; then\n    #         echo \"true\"\n    #        \
    \ return 0\n    #     fi\n    #     y=$((y+1))\n    # done\n    # echo \"false\"\
    \n    #\n    # ====================================\n    #\n    # ... or do it\
    \ in one line.\n    #\n    # declare -i y\n    # y=0\n    # while [ y*y*y -le\
    \ $a ]; do [ y*y*y -eq $a ] && { echo \"true\"; return 0; }; y=$((y+1)); done;\
    \ echo \"false\"\n    #\n    # ====================================\n    #\n \
    \   # ... or use bc.\n    #\n    # y=$(echo \"scale=0; ${a}^(1/3)\" | bc)\n  \
    \  # [ $a -eq $((y*y*y)) ] && echo \"true\" || echo \"false\"\n    #\n    # ====================================\n\
    \    #\n    # ... or use awk.\n    #\n    # awk -v a=\"$a\" 'BEGIN { y=0; while\
    \ (y*y*y <= a) { if (y*y*y == a) { print \"true\"; exit; } y++; } print \"false\"\
    ; }'\n    #\n    # ====================================\n    #\n    # ... or use\
    \ python.\n    #\n    # python -c \"import math; print(math.pow($a, 1/3).is_integer())\"\
    \n    #\n    # ====================================\n    # You can write your\
    \ code in any of the above ways.\n    # A good solution is one that is small,\
    \ readable, and has no small errors.\n    # Try not to copy and paste existing\
    \ solutions", "    local number=$1\n    if [[ -z \"$number\" ]]; then\n      \
    \  echo \"false\"\n        return\n    fi\n    if [[ $number -eq 0 ]]; then\n\
    \        echo \"true\"\n        return\n    fi\n    if [[ $number -gt 0 ]]; then\n\
    \        local start=1\n        local end=$number\n    else\n        local start=$number\n\
    \        local end=1\n    fi\n    local i=$start\n    while [[ $i -le $end ]];\
    \ do\n        local result=$((i**3))\n        if [[ $result -eq $number ]]; then\n\
    \            echo \"true\"\n            return\n        fi\n        ((i++))\n\
    \    done\n    echo \"false\"", "    if [[ $1 -eq 1 ]]; then\n        echo \"\
    true\"\n    elif [[ $1 -eq 0 ]]; then\n        echo \"true\"\n    elif [[ $1 -eq\
    \ -1 ]]; then\n        echo \"true\"\n    elif [[ $1 -gt 0 ]]; then\n        number=$(expr\
    \ $1 '^' 1/3)\n        num3=$(expr $number '^' 3)\n        if [[ $num3 -eq $1\
    \ ]]; then\n            echo \"true\"\n        else\n            echo \"false\"\
    \n        fi\n    elif [[ $1 -lt 0 ]]; then\n        number=$(expr $1 '^' 1/3)\n\
    \        num3=$(expr $number '^' 3)\n        num3_1=$(expr $num3 '+' 1)\n    \
    \    num3_2=$(expr $num3 '-' 1)\n        if [[ $num3_1 -eq $1 ]] || [[ $num3_2\
    \ -eq $1 ]]; then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    fi", "    # Note: We use `bc` to calculate the cube root\n\
    \    #\n    # bc is a command line calculator. See man bc for more details.\n\
    \    # The flag -l makes bc use math libraries.\n    # Example:\n    # $ echo\
    \ \"scale=10; sqrt(100)\" | bc -l\n    # 10.0000000000\n    #\n    # We use `awk`\
    \ to round a floating point number to the nearest integer.\n    # See man awk\
    \ for more details.\n    # Example:\n    # $ echo \"10.1\" | awk '{printf(\"%d\\\
    n\",$1 + 0.5)}'\n    # 10\n    local cube_root=$(echo \"scale=10; n=${1}; sqrt(n*n*n)\"\
    \ | bc -l | awk '{printf(\"%d\\n\",$1 + 0.5)}')\n    if [ \"$cube_root\" == \"\
    $1\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi",
  "\tlocal cube1\n\tlocal cube2\n\t\n\t# find the cube root of the integer\n\tcube1=$(($1\
    \ ** (1/3)))\n\t\n\t# find the cube of the integer\n\tcube2=$(($cube1 * $cube1\
    \ * $cube1))\n\t\n\t# compare the square of the integer and cube of the root\n\
    \tif [ $cube2 -eq $1 ]\n\tthen\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\
    \tfi", "  local num=\"$1\"\n  local result=$(bc -l <<< \"scale=0;sqrt($num)^3\"\
    )\n  if [[ \"$result\" -eq \"$num\" ]]; then\n    echo \"true\"\n  else\n    echo\
    \ \"false\"\n  fi", "    # set res to false by default\n    local res=\"false\"\
    \n    local i=0\n    # use a while loop to iterate \n    while ((i**3 <= $1))\n\
    \    do\n        # check if $1 is the cube of i,\n        # if yes, set res to\
    \ true\n        if ((i**3 == $1))\n        then\n            res=\"true\"\n  \
    \      fi\n        # increase i by 1\n        ((i++))\n    done\n    # return\
    \ res\n    echo $res", "  if [ $1 -eq 1 ] || [ $1 -eq 0 ] || [ $1 -eq -1 ]; then\n\
    \    echo \"true\"\n  else\n    cube_root=$(echo \"scale=5;($1)^(1/3)\" | bc)\n\
    \    cube_root=$(printf %.0f \"$cube_root\")\n    cube=$(echo \"$cube_root^3\"\
    \ | bc)\n    if [ $cube -eq $1 ]; then\n      echo \"true\"\n    else\n      echo\
    \ \"false\"\n    fi\n  fi", "\tlocal value=$1\n\tlocal x=1\n\twhile [[ $((x*x*x))\
    \ -lt $value ]]; do\n\t\tx=$((x+1))\n\tdone\n\tif [[ $((x*x*x)) -eq $value ]];\
    \ then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi", "  local i\n\n \
    \ for ((i=1; i<$1; i++)); do\n    if (( $1 == i*i*i )); then\n      echo true\n\
    \      return\n    fi\n  done\n\n  echo false", "    if [[ $(( $1 ** (1/3) ))\
    \ -eq $(( $1 ** (1/3) )) ]]; then\n\techo \"true\"\n    else\n\techo \"false\"\
    \n    fi", "    echo $1 | grep -E -q '^[-]?[0-9]+$' || return\n    tst=$(echo\
    \ \"sqrt($1)\" | bc)\n    tst=$(echo \"scale=0; $tst * $tst * $tst\" | bc)\n \
    \   if [[ $tst -eq $1 ]]; then\n        echo \"true\"\n    else\n        echo\
    \ \"false\"\n    fi", "  local decimal=0\n  local string_val=$1\n  local length=${#string_val}\n\
    \  local scale=1\n  local addend=0\n  local num=0\n  local num_sq=0\n  local num_cu=0\n\
    \  local is_negative=false\n  local result=false\n  local var=0\n  # determine\
    \ if $1 is negative\n  if [[ \"${string_val:0:1}\" == \"-\" ]]; then\n    string_val=${string_val:1}\n\
    \    is_negative=true\n  fi\n  # convert string to decimal\n  for ((i=1; i<=length;\
    \ i++)); do\n    scale=$(( scale * 10 ))\n    decimal=$(( decimal + (${string_val:$((i-1)):1}\
    \ * (scale / 10)) ))\n  done\n  # reset scale to 1 and determine if $1 is a cube\n\
    \  scale=1\n  if [[ \"$is_negative\" == \"true\" ]]; then\n    for ((i=0; i<=decimal;\
    \ i++)); do\n      num=$(( addend + scale ))\n      num_sq=$(( num * num ))\n\
    \      num_cu=$(( num_sq * num ))\n      if [[ \"$num_cu\" == \"$decimal\" ]];\
    \ then\n        result=true\n        break\n      fi\n      scale=$(( scale +\
    \ 2 ))\n      addend=$(( addend + 1 ))\n    done\n  else\n    for ((i=0; i<=decimal;\
    \ i++)); do\n      num=$(( addend + scale ))\n      num_sq=$(( num * num ))\n\
    \      num_cu=$(( num_sq * num ))\n      if [[ \"$num_cu\" == \"$decimal\" ]];\
    \ then\n        result=true\n        break\n      fi\n      scale=$(( scale +\
    \ 2 ))\n    done\n  fi\n  echo \"$result\"", "    local var=$1\n    local sq=`echo\
    \ \"scale=0; sqrt($var)\" | bc`\n    local cube=`echo \"scale=0; $sq*$sq*$sq\"\
    \ | bc`\n    # echo $cube\n    if [[ $cube -eq $var ]]; then\n        echo \"\
    true\"\n    else\n        echo \"false\"\n    fi", "    # get the integer value\n\
    \    local int=$1\n    local test=0\n\n    # conditions:\n    # cbrt(int) must\
    \ be an integer (== cbrt(int))\n    # if positive: int must be cbrt(int)^3\n \
    \   # if negative: int must be -cbrt(int)^3\n    test=$(echo \"${int} == $(bc\
    \ <<< \"scale=0; cbrt(${int})\")^3\" | bc)\n    if [[ ${int} -lt 0 ]]; then\n\
    \        test=$(echo \"${int} == -$(bc <<< \"scale=0; cbrt(-${int})\")^3\" | bc)\n\
    \    fi\n\n    if [[ ${test} -eq 1 ]]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "    if [ -z \"$1\" ]; then\n        echo \"\
    Error: missing argument\"\n        return 1\n    fi\n    if ! [[ \"$1\" =~ ^-?[0-9]+$\
    \ ]]; then\n        echo \"Error: '$1' is not an integer\"\n        return 1\n\
    \    fi\n    local res=\"$(echo \"$1^(1/3)\" | bc -l)\"\n    if [[ \"$res\" =~\
    \ ^-?[0-9]+$ ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\
    \n    fi", "    # check if $1 is an integer\n    if [[ $1 =~ ^-?[0-9]+$ ]]; then\n\
    \        # check if $1 is a cube of some integer\n        cnt=0\n        tmp=$(echo\
    \ \"$1\" | sed 's/-//g')\n        while [ $tmp -gt 0 ]; do\n            let \"\
    cnt++\"\n            let \"tmp-=cnt*cnt*cnt\"\n        done\n        if [ $tmp\
    \ -eq 0 ]; then\n            echo \"true\"\n        else\n            echo \"\
    false\"\n        fi\n    else\n        echo \"false\"\n    fi", "    # return\
    \ false if $1 is not an integer\n    if [[ ! $1 =~ ^[-+]?[0-9]+$ ]]; then\n  \
    \      echo \"false\"\n        return\n    fi\n\n    # return true if $1 is 0\n\
    \    if [[ $1 -eq 0 ]]; then\n        echo \"true\"\n        return\n    fi\n\n\
    \    # return true if $1 is a perfect cube\n    for ((i=0;i<=$1;i++)); do\n  \
    \      if [[ $((i*i*i)) -eq $1 ]]; then\n            echo \"true\"\n         \
    \   return\n        fi\n    done\n\n    # return false if $1 is not a perfect\
    \ cube\n    echo \"false\"", "\tif [[ $1 =~ ^[-+]?[0-9]+$ ]]; then\n\t\tif [[\
    \ $1 == 0 ]]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\tx=$(echo \"scale=0;$1^(1/3)\"\
    \ | bc -l)\n\t\t\tif [[ $x*$x*$x == $1 ]]; then\n\t\t\t\techo \"true\"\n\t\t\t\
    else\n\t\t\t\techo \"false\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo \"Bad Input\"\
    \n\tfi", "    local x=$1\n    local r\n    r=$(echo \"scale=5; ${x}^(1/3)\" |\
    \ bc | sed 's/\\..*//')\n    if [[ $r -eq $r ]]; then\n        echo \"true\"\n\
    \    else\n        echo \"false\"\n    fi", "\tif [ $1 -ge 0 ]; then\n\t\tcubed_root=$(echo\
    \ \"scale=0; $1^(1/3)\" | bc)\n\t\tif [ $(echo \"$cubed_root * $cubed_root * $cubed_root\"\
    \ | bc) -eq $1 ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\
    \tfi\n\telse\n\t\tif [ $1 -eq -1 ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\t\
    echo \"false\"\n\t\tfi\n\tfi", "    local a=$1\n    local i=0\n    if [ \"$a\"\
    \ -lt 0 ]; then\n        a=$((-a))\n    fi\n    while [ $((i*i*i)) -le \"$a\"\
    \ ]; do\n        if [ $((i*i*i)) -eq \"$a\" ]; then\n            echo \"true\"\
    \n            return\n        fi\n        i=$((i+1))\n    done\n    echo \"false\"",
  "    if [[ $1 =~ ^-?[[:digit:]]+$ ]]; then\n        for ((i=1; i<=$1; i++)); do\n\
    \            if (( i**3 == $1 )); then\n                echo \"true\"\n      \
    \          return\n            fi\n        done\n    fi\n    echo \"false\"",
  "\tif [ $1 -le 0 ]; then \n\t\techo \"true\"\n\t\treturn \n\tfi\n\n\ti=0\n\twhile\
    \ [ $(($i * $i * $i)) -lt $1 ]; do\n\t\tlet i++\n\tdone\n\n\tif [ $(($i * $i *\
    \ $i)) -eq $1 ]; then\n\t\techo \"true\"\n\telse\n\t\techo \"false\"\n\tfi", " \
    \   if [ $1 -ge 0 ]; then\n        t=$(echo \"$1 0.5\" | awk '{print $1^$2}')\n\
    \        [ $t -eq $1 ] && echo \"true\" || echo \"false\"\n    else\n        t=$(echo\
    \ \"$1 -0.5\" | awk '{print $1^$2}')\n        [ $t -eq $1 ] && echo \"true\" ||\
    \ echo \"false\"\n    fi", "    local x=$1\n    for ((i=1; i<=$x; i++)); do\n\
    \        local cubed=$((i*i*i))\n        if [ $cubed -eq $x ]; then\n        \
    \    echo \"true\"\n            return\n        fi\n    done\n    echo \"false\"",
  "    num=$1\n    if [[ $num -lt 0 ]]; then\n        num=$((-num))\n    fi\n    if\
    \ [[ $num -eq 0 ]]; then\n        echo true\n        return\n    fi\n    n=1\n\
    \    while [[ $((n*n*n)) -le $num ]]; do\n        if [[ $((n*n*n)) -eq $num ]];\
    \ then\n            echo true\n            return\n        fi\n        n=$((n+1))\n\
    \    done\n    echo false", "\t\tif [ $1 -ge 0 ]; then\n\t\t\t\tlet \"d = $1**(1/3)\"\
    \n\t\t\t\tlet \"d2 = $d*$d*$d\"\n\t\t\t\tif [ $d2 -eq $1 ]; then\n\t\t\t\t\t\t\
    echo \"true\"\n\t\t\t\telse\n\t\t\t\t\t\techo \"false\"\n\t\t\t\tfi\n\t\telse\n\
    \t\t\t\tlet \"d = $1**(1/3)\"\n\t\t\t\tlet \"d2 = $d*$d*$d\"\n\t\t\t\tif [ $d2\
    \ -eq $1 ]; then\n\t\t\t\t\t\techo \"true\"\n\t\t\t\telse\n\t\t\t\t\t\techo \"\
    false\"\n\t\t\t\tfi\n\t\tfi", "    # If a is 0, it is a cube of 0.\n    if [ $1\
    \ -eq 0 ]; then\n        return 0\n    fi\n    # If a is an odd number and is\
    \ not 1, it cannot be a cube of an integer.\n    if [ $(( $1 % 2 )) -ne 0 ] &&\
    \ [ $1 -ne 1 ]; then\n        return 1\n    fi\n    # If a is a negative number,\
    \ we should take its absolute value.\n    if [ $1 -lt 0 ]; then\n        a=`expr\
    \ -$1`\n    else\n        a=$1\n    fi\n    # Take the odd root of a and use bc\
    \ to calculate the cube.\n    # If the cube is equal to a, then a is a cube of\
    \ an integer.\n    r=$(echo \"scale=0; $a ^ (1/3)\" | bc)\n    if [ $(( r * r\
    \ * r )) -eq $a ]; then\n        return 0\n    else\n        return 1\n    fi",
  "    if [[ ! $1 =~ ^[+-]?[0-9]+$ ]]; then\n        echo \"false\"\n        return\n\
    \    fi\n    local root=$(echo \"scale=10; sqrt(abs($1))\" | bc)\n    local root_int=$(echo\
    \ \"$root\" | awk '{printf \"%d\", $0}')\n    local cube=$(echo \"$root_int^3\"\
    \ | bc)\n    if [ \"$cube\" -eq \"$1\" ]; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "  if [ -z \"$1\" ]; then\n    echo \"0\"\n\
    \    return 0\n  fi\n  if [ $1 -lt 0 ]; then\n    echo \"$((-1 * $1))\"\n    return\
    \ 0\n  fi\n  local num=\"$1\"\n  for i in {1..10}; do\n    if [ $((i * i * i))\
    \ -eq $num ]; then\n      echo \"true\"\n      return 0\n    fi\n  done\n  echo\
    \ \"false\"", "    if (( $1 % 2 == 0 )); then\n        return 1\n    fi\n    local\
    \ num=`echo \"scale=0; cbrt($1)+1\" | bc`\n    local result=`echo \"scale=0; ${num}*${num}*${num}\"\
    \ | bc`\n    if (( $result == $1 )); then\n        echo \"true\"\n    else\n \
    \       echo \"false\"\n    fi", "\t\tif [[ $1 == 0 ]]; then\n\t\t\t\techo \"\
    true\"\n\t\t\t\treturn\n\t\tfi\n\t\tc=1\n\t\twhile [[ $c -lt $1 ]]; do\n\t\t\t\
    \tc=$(($c**3))\n\t\tdone\n\t\tif [[ $c == $1 ]]; then\n\t\t\t\techo \"true\"\n\
    \t\telse\n\t\t\t\techo \"false\"\n\t\tfi", "  if [ \"$1\" -eq \"-1\" ]\n  then\n\
    \    echo \"true\"\n  else\n    for ((i=1;i<=64;i++))\n    do\n      result=$(bc\
    \ -l <<< \"scale=0;$i*$i*$i\")\n      if [ \"$result\" -eq \"$1\" ]\n      then\n\
    \        echo \"true\"\n        return\n      fi\n    done\n    echo \"false\"\
    \n  fi", "\tlocal a=$1;\n\tlocal n=${a%%[^0-9]*};\n\tlocal ncube=$((n*n*n));\n\
    \tif [ $a -eq $ncube ]; then\n\t\techo true;\n\telse\n\t\techo false;\n\tfi",
  "    local num=$1\n    local root=$(bc <<< \"scale=0; sqrt($num)\")\n    if [ $num\
    \ -eq $(($root * $root * $root)) ]; then\n        echo \"true\"\n    else\n  \
    \      echo \"false\"\n    fi", "\tif [[ -z \"$1\" ]]; then\n\t\texit 1\n\tfi\n\
    \tint=$1\n\tlow=0\n\thigh=$int\n\tmid=0\n\twhile [[ $low -le $high ]]; do\n\t\t\
    mid=$((low + (high - low) / 2))\n\t\tif [[ $((mid * mid * mid)) -eq $int ]]; then\n\
    \t\t\techo \"true\"\n\t\t\treturn\n\t\telif [[ $((mid * mid * mid)) -lt $int ]];\
    \ then\n\t\t\tlow=$((mid + 1))\n\t\telse\n\t\t\thigh=$((mid - 1))\n\t\tfi\n\t\
    done\n\techo \"false\"", "    [ $1 -lt 0 ] && a=$((0 - $1)) || a=$1\n    [ \"\
    $(echo \"scale=3; $a ^ (1/3)\" | bc)\" = \"$(echo \"scale=3; $a ^ (1/3)\" | bc\
    \ -l)\" ] && echo \"true\" || echo \"false\"", "  for i in $(seq 1 $(echo \"$1\"\
    \ | bc) ); do\n    if [ $(echo \"$i^3\" | bc) -eq \"$1\" ]; then\n      echo \"\
    true\"\n      exit 0\n    fi\n  done\n  echo \"false\"", "    # Returns 1 if input\
    \ is a valid cube, 0 otherwise\n    local rval\n    if [ $1 -lt 0 ]; then\n  \
    \      # Negative values are invalid, rval=0\n        rval=0\n    else\n     \
    \   # Add - to turn on strict mode\n        local res=$(echo \"scale=10; x = sqrt($1);\
    \ x == int(x)\" | bc -l)\n        if [ $res == 1 ]; then\n            rval=1\n\
    \        else\n            rval=0\n        fi\n    fi\n    echo $rval", "    if\
    \ [ $1 -le 0 ]; then\n        echo \"true\"\n    else\n        local tmp=$(bc\
    \ <<< \"scale=0; $1 ^ (1/3)\")\n        local tmp_cubed=$(bc <<< \"$tmp ^ 3\"\
    )\n        if [ $tmp_cubed -eq $1 ]; then\n            echo \"true\"\n       \
    \ else\n            echo \"false\"\n        fi\n    fi", "    i=$1\n    if [ $i\
    \ -eq 0 ]; then\n        printf \"true\"\n    elif [ $i -lt 0 ]; then\n      \
    \  i=$((-i))\n    fi\n    # find the cube root\n    r=0\n    while [ $((r*r*r))\
    \ -le $i ]; do\n        r=$((r+1))\n    done\n    r=$((r-1))\n    if [ $((r*r*r))\
    \ -eq $i ]; then\n        printf \"true\"\n    else\n        printf \"false\"\n\
    \    fi", "    local number=$1\n    local divider=1\n    local result\n    if\
    \ [[ $number -eq 0 ]]; then\n        echo \"true\"\n        return 0\n    fi\n\
    \    while [[ $divider -lt $(($number+1)) ]]; do\n        let result=$divider*$divider*$divider\n\
    \        if [[ $result -eq $number ]]; then\n            echo \"true\"\n     \
    \       return 0\n        fi\n        let divider+=1\n    done\n    echo \"false\"\
    \n    return 0", "    if [ $1 -le 0 ]; then\n        echo \"true\"\n    else\n\
    \        local x=$(($1**(1/3)))\n        if [ $(($x**3)) -eq $1 ]; then\n    \
    \        echo \"true\"\n        else\n            echo \"false\"\n        fi\n\
    \    fi", "    declare -i r\n    declare -i a=$1\n    if [ $a -lt 0 ]; then\n\
    \        a=-a\n    fi\n    r=$(bc <<< \"c=(sqrt($a)+1);c/=1;c^3==$a\")\n    if\
    \ [ $r -eq 1 ]; then\n        echo true\n    else\n        echo false\n    fi",
  "  if [ $1 -lt 0 ]; then\n    ((sqrt = -1 * sqrt))\n  fi\n  sqrt=$(echo \"scale=0;\
    \ sqrt($1)\" | bc)\n  if [ $(($sqrt*$sqrt*$sqrt)) -eq $1 ]; then\n    echo \"\
    true\"\n  else\n    echo \"false\"\n  fi", "\tlet x=$1\n\tlet n=0\n\tlet n=x-1\n\
    \twhile [ $n -gt 1 ]\n\tdo\n\t\tif [[ $((n*n*n)) -eq $x ]]\n\t\tthen\n\t\t\techo\
    \ \"true\"\n\t\t\treturn\n\t\tfi\n\t\tlet n=n-1\n\tdone\n\techo \"false\"", " \
    \   number=$1\n    sign=\"\"\n    # if the input number is negative\n    if [[\
    \ \"$number\" -lt 0 ]]; then\n        sign=\"-\"\n        number=$((number * -1))\n\
    \    fi\n    cube=1\n    while [[ \"$cube\" -lt \"$number\" ]]; do\n        cube=$((cube\
    \ * 3))\n    done\n    if [[ \"$number\" -eq \"$cube\" ]]; then\n        echo\
    \ \"true\"\n    else\n        echo \"false\"\n    fi", "  local result;\n  local\
    \ i;\n  local is_negative;\n  local is_zero;\n  let is_negative=$1<0;\n  let is_zero=$1==0;\n\
    \  for ((i=0; i<=$(($1/2)); i++)); do\n    if [ $((i*i*i)) -eq $1 ]; then\n  \
    \    let result=1;\n      break;\n    fi\n  done\n  # result is 0 if false\n \
    \ if [ $result -eq 0 ]; then\n    result=\"false\";\n  else\n    if [ $is_negative\
    \ -eq 1 ]; then\n      result=\"true\";\n    else\n      result=\"true\";\n  \
    \  fi\n  fi\n  echo $result;", "    if [ $1 == 0 ]\n    then\n        echo true\n\
    \    else\n        echo $1 | bc > /dev/null 2>&1\n        if [ $? -eq 0 ]\n  \
    \      then\n            a=$(echo \"scale=0; $1 ^ (1/3)\" | bc)\n            b=$(echo\
    \ \"$a^3\" | bc)\n            if [ $b == $1 ]\n            then\n            \
    \    echo true\n            else\n                echo false\n            fi\n\
    \        else\n            echo false\n        fi\n    fi", "  local number=$1\n\
    \  local res=$(bc -l <<< \"s($number)\")\n  res=$(bc -l <<< \"($res)^3\")\n  res=$(bc\
    \ -l <<< \"scale=3;$res\")\n  if [[ \"$res\" == \"1\" ]]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "    local s = $(bc <<< \"scale=0; a=$1/1;\
    \ sqrt(a) ^ 3 == a\")\n    echo $s", "\t! (( $1 % 1 )) || return 1\n\tlocal n=$1\n\
    \tlocal i=1\n\twhile (( i*i*i < n )); do\n\t\t(( i++ ))\n\tdone\n\t(( i*i*i ==\
    \ n ))", "\tif [ \"$1\" == \"0\" ]; then\n\t\techo \"true\"\n\telif [ $1 -lt 0\
    \ ]; then\n\t\tint=-$1\n\t\tint=$(echo \"scale=20; sqrt($int)\" | bc)\n\t\tint=$(echo\
    \ \"scale=20; $int * $int * $int\" | bc)\n\t\tint=${int:0:1}\n\t\tif [ \"$int\"\
    \ == \"-\" ]; then\n\t\t\techo \"true\"\n\t\telse\n\t\t\techo \"false\"\n\t\t\
    fi\n\telse\n\t\tint=$(echo \"scale=20; sqrt($1)\" | bc)\n\t\tint=$(echo \"scale=20;\
    \ $int * $int * $int\" | bc)\n\t\tint=${int:0:1}\n\t\tif [ \"$int\" == \"-\" ];\
    \ then\n\t\t\techo \"false\"\n\t\telse\n\t\t\techo \"true\"\n\t\tfi\n\tfi", " \
    \   if (( $(echo \"scale=1; ${1}^(1/3)\" | bc) -eq ${1}**(1/3) )); then\n    \
    \    echo \"true\"\n    else\n        echo \"false\"\n    fi", "\tlocal x=${1:-0}\n\
    \tif [ $x -eq 0 ] || [ $x -eq 1 ] || [ $x -eq -1 ]; then\n\t\techo \"true\"\n\t\
    else\n\t\t# abs\n\t\tlocal y=${x#-}\n\t\t# perfect cube\n\t\tlocal z=$(echo \"\
    $y\" | awk '{for(i=0; i<10; i++) {if (i*i*i == $1) print i;}}')\n\t\t# check that\
    \ z is not null\n\t\tif [ -z \"$z\" ]; then\n\t\t\techo \"false\"\n\t\telse\n\t\
    \t\techo \"true\"\n\t\tfi\n\tfi", "    # Get the cube root of the integer $1\n\
    \    result=$(bc -l <<< \"scale=20;${1}^(1/3)\")\n    # If the result is a whole\
    \ number then it is a perfect cube\n    # (since division by zero would only happen\
    \ if the input was zero)\n    if [ $(bc -l <<< \"${result}%1\") == \"0\" ]; then\n\
    \        echo \"true\"\n    else\n        echo \"false\"\n    fi", "    local\
    \ a=$1\n    # FIXME\n    # Write your code here\n    # Remember to assign a return\
    \ value (true/false) to the function\n    # Hint: you can use bc to compute square\
    \ root of a number", "\t[ $1 -eq 0 ] && echo \"true\" && return\n\tx=$(echo \"\
    scale=0;sqrt($1)\" | bc -l)\n\t[ $(echo \"$x*$x*$x\" | bc -l) -eq $1 ] && echo\
    \ \"true\" || echo \"false\"", "    if [ -z \"$1\" ]; then\n        echo \"false\"\
    \n        return\n    fi\n    # if -n is not empty, it will only return 0 (true)\
    \ or 1 (false)\n    local ints=\"\"\n    for (( i = 0; i*i*i < $1; i++ )); do\n\
    \        # echo \"i = $i\"\n        ints=\"$ints$i \"\n    done\n    if echo \"\
    $ints\" | grep -w \"$1\" > /dev/null; then\n        echo \"true\"\n    else\n\
    \        echo \"false\"\n    fi", "\tlocal iscub=false\n\tlocal val=$1\n\t# Take\
    \ absolute value\n\t[[ \"${val:0:1}\" == \"-\" ]] && val=\"${val:1}\"\n\t# Cube\
    \ root = exponent of 1/3\n\tfor ((cbrt=0;cbrt<=\"$val\";cbrt++)); do\n\t\tlet\
    \ \"test = $cbrt*$cbrt*$cbrt\"\n\t\t[[ \"$test\" == \"$val\" ]] && iscub=true\n\
    \tdone\n\t# Return boolean result\n\techo \"$iscub\"", '    (( $(bc <<< "scale=0;
    $1^(1/3)") ** 3 == $1 ))', "  if [[ $(($1 ** (1 / 3) )) == 1 ]]; then\n    echo\
    \ \"true\"\n  else\n    echo \"false\"\n  fi", "    local x=$1\n    local root\n\
    \    if ((x==0)) ; then\n        echo true\n        return\n    fi\n    root=$(echo\
    \ \"scale=0;sqrt($x)\" | bc)\n    if [[ $root*$root*$root -eq $x ]] ; then\n \
    \       echo true\n    else\n        echo false\n    fi", '    echo "($1%$(echo
    "$1*$1" | bc -l))==0" | bc -l', "  cube=$(echo \"$1^(1/3)\" | bc -l)\n  cube=$(printf\
    \ \"%.f\" $cube)\n  if [ $cube -eq $1 ]; then\n    echo \"true\"\n  else\n   \
    \ echo \"false\"\n  fi", "  a=\"$1\"\n  b=\"$(echo \"scale=2; sqrt($a)\" | bc\
    \ -l)\"\n  if [ \"$(echo \"$b % 1\" | bc -l)\" = \"0\" ]; then\n    echo \"true\"\
    \n  else\n    echo \"false\"\n  fi", "    integer=$1\n    if [[ $integer -eq 0\
    \ ]]; then\n        echo \"true\"\n    elif [[ $integer -lt 0 ]]; then\n     \
    \   cube=`echo $integer | bc`\n        if [[ \"$cube\" =~ \"-0.00\" ]]; then\n\
    \            echo \"true\"\n        else\n            echo \"false\"\n       \
    \ fi\n    else\n        n=`echo \"scale=10; $integer ^ (1/3)\" | bc`\n       \
    \ cube=`echo \"scale=10; $n ^ 3\" | bc`\n        if [[ \"$cube\" =~ \"0.00\" ]];\
    \ then\n            echo \"true\"\n        else\n            echo \"false\"\n\
    \        fi\n    fi"]
stop_tokens:
- "\n}"
