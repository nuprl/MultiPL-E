language: sh
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # re is a string of\
    \ lowercase alphabet\n    local re=\"abcdefghijklmnopqrstuvwxyz\"\n    # RE is\
    \ a string of uppercase alphabet\n    local RE=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\
    \    local num='2'\n    local result=\"\"\n    local i=\"\"\n    local a=\"\"\n\
    \    local c=\"\"\n    local l=\"\"\n    local s=\"\"\n    local r=\"\"\n    local\
    \ R=\"\"\n    local ch=\"\"\n    local rotate='2'\n    local ndex=0\n    local\
    \ ndex_RE=0\n    local ndex_re=0\n    for(( i=0; i<${#1}; i++)); do\n        ch=${1:$i:1}\n\
    \        ndex=$(echo \"$re\" | awk -v ch=$ch '{ print index($0, ch) }')\n    \
    \    if [ $ndex -gt 0 ]; then\n            let \"ndex_re=ndex-1\"\n          \
    \  let \"ndex_re=ndex_re%${#re}\"\n            let \"ndex_re=ndex_re+rotate\"\n\
    \            a=$(echo \"$re\" | cut -c $ndex_re)\n            result=$result$a\n\
    \        else\n            ndex=$(echo \"$RE\" | awk -v ch=$ch '{ print index($0,\
    \ ch) }')\n            if [ $ndex -gt 0 ]; then\n                let \"ndex_RE=ndex-1\"\
    \n                let \"ndex_RE=ndex_RE%${#RE}\"\n                let \"ndex_RE=ndex_RE+rotate\"\
    \n                A=$(echo \"$RE\" | cut -c $ndex_RE)\n                result=$result$A\n\
    \            else\n                result=$result$ch\n            fi\n       \
    \ fi\n    done\n    echo $result\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local IFS=\"\"\n  \
    \  local -a string_array\n    local -a alpha_array\n    local -a encrypted_array\n\
    \    local encrypted_string=\"\"\n    local position=0\n    local counter=0\n\
    \    local char\n    local temp\n    declare -A encrypted_hash\n\n    string_array=($1)\n\
    \    alpha_array=(a b c d e f g h i j k l m n o p q r s t u v w x y z)\n\n   \
    \ for i in \"${string_array[@]}\"; do\n        temp=$(echo \"$i\" | tr [:upper:]\
    \ [:lower:])\n        for ((j=0; j<${#alpha_array[@]}; j++)); do\n           \
    \ if [[ ${alpha_array[$j]} == $temp ]]; then\n                position=$j\n  \
    \              encrypted_array[$counter]=${alpha_array[$(($position+$((2*2))))]}\n\
    \                break\n            fi\n        done\n        counter=$(($counter+1))\n\
    \    done\n\n    for k in \"${encrypted_array[@]}\"; do\n        encrypted_string=$encrypted_string$k\n\
    \    done\n\n    echo $encrypted_string\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    encrypted=\"\"\n  \
    \  for (( i=0; i<${#1}; i++ )); do\n        ascii_code=$(printf \"%d\" \"'${1:$i:1}\"\
    )\n        encryption=$(( $ascii_code + $(( 2 * 2 )) ))\n        encrypted+=$(printf\
    \ \"\\x$(printf %x $encryption)\")\n    done\n    echo $encrypted\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Create an array using\
    \ the string passed to the function\n    # Split each character into a new array\
    \ index\n    array=($(echo $1 | grep -o .))\n    # Create a new array to hold\
    \ the encrypted characters\n    encrypted=()\n    # Step through each character\
    \ in the array and encrypt it\n    for ((i=0; i<${#array[@]}; i++)); do\n    \
    \    # Convert the character to its ASCII value\n        ascii=$(printf \"%d\"\
    \ \"'${array[$i]}\")\n        # Ensure the character is a letter\n        if [[\
    \ $ascii -ge 65 && $ascii -le 90 ]]; then\n            # Convert the letter to\
    \ lowercase\n            ascii=$((ascii + 32))\n        fi\n        # The case\
    \ the character is lowercase\n        if [[ $ascii -ge 97 && $ascii -le 122 ]];\
    \ then\n            # Shift the character two places\n            ascii=$((ascii\
    \ + 2))\n            # Check if the character is now past the alphabet\n     \
    \       if [[ $ascii -gt 122 ]]; then\n                # Subtract the length of\
    \ the alphabet from the ASCII value\n                ascii=$((ascii - 26))\n \
    \           fi\n        fi\n        # Convert the ASCII value back to its character\n\
    \        encrypted[$i]=$(printf \"\\x$(printf %x $ascii)\")\n    done\n    # Merge\
    \ the array and print\n    echo ${encrypted[@]}\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # alphabet\n    alph=\"\
    abcdefghijklmnopqrstuvwxyz\"\n    cipher=\"\"\n    for (( i=0; i<${#1}; i++ ));\
    \ do\n        # get the current char\n        char=${1:$i:1}\n        # find where\
    \ the char is in the alphabet\n        pos=$(echo $alph | grep -Fbo \"$char\"\
    \ | cut -d: -f1)\n        # if position is greater than 25, loop the array\n \
    \       if [ $pos -gt 25 ]; then\n            pos=$((pos % 26))\n        fi\n\
    \        # move the position up by two * two (8)\n        # if position is greater\
    \ than 25, loop the array\n        pos=$((pos + 8))\n        if [ $pos -gt 25\
    \ ]; then\n            pos=$((pos % 26))\n        fi\n        # find the current\
    \ char in the alphabet\n        cipher=\"$cipher${alph:$pos:1}\"\n    done\n \
    \   echo $cipher\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"$1\" | tr a-z\
    \ \"c-za-b\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: Your code here\n\
    \    printf \"This is a test\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"$1\" | tr '[a-z]'\
    \ '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # $2 is the alphabet\n\
    \    # $3 is an empty string\n    # $4 is a counter\n    # $5 is the index in\
    \ string $1\n    # $6 is a letter in string $1\n    # $7 is the letter in string\
    \ $2\n    # $8 is the index in string $2\n    # $9 is how many shifts the letters\
    \ should be shifted\n    # ${10} is the new index of a letter in string $2\n \
    \   # ${11} is the new letter to be added to string $3\n    # $# is the number\
    \ of parameters\n    # $* is all the parameters\n    # $0 is the function name\
    \ \n    # $? is the success or failure of the last command\n    # $$ is the PID\n\
    \    # $! is the PID of the last command in the background\n    # $_ is the last\
    \ parameter of the last command\n    # Shift will remove the first argument from\
    \ the list of arguments\n    # Create the alphabet\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\
    \n    emptystring=\"\"\n    counter=0\n    # Loop through the letters in $1\n\
    \    for letter in $(echo $1 | fold -w1); do\n        # Loop through the alphabet\
    \ and find the letter $6 in the alphabet\n        for letter2 in $(echo $alphabet\
    \ | fold -w1); do\n            if [ \"$letter\" = \"$letter2\" ]; then\n     \
    \           # This will find the index of the letter\n                index=\"\
    $counter\"\n                break\n            fi\n            counter=$((counter+1))\n\
    \        done\n        # Reset the counter\n        counter=0\n        # Find\
    \ how many shifts the letters should be shifted\n        shifts=$(((index*2)%26))\n\
    \        # Take the new index of the letter\n        newindex=$((index+shifts))\n\
    \        # Find the new letter\n        newletter=$(echo $alphabet | cut -c$((newindex+1))-$((newindex+1)))\n\
    \        # Add the new letter to the empty string\n        emptystring=\"$emptystring$newletter\"\
    \n    done\n    # Return the new string\n    echo $emptystring\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: Implement this\
    \ function.\n  return\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo \"$1\" | tr '[a-z]'\
    \ '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo $1 | tr [a-z] [c-za-b]\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tlocal -i i=0\n\tfor ((\
    \ i=0; i<${#1}; i++ )); do\n\t\tlocal letter=${1:$i:1}\n\t\tlocal -i letter_ord=$(printf\
    \ '%d' \"'$letter\")\n\t\tlocal -i new_letter_ord=$((letter_ord + 2 * 2))\n\t\t\
    # printf supports decimal, octal, hexadecimal and character conversions\n\t\t\
    printf \\\\$(printf '%03o' $new_letter_ord)\n\tdone\n\techo\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  str=$1\n  echo $str |\
    \ tr \"a-z\" \"c-za-b\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\talphabet=$(echo {a..z}\
    \ | sed -E 's/ //g')\n\tencrypt_alphabet=$(echo {c..z} {a..b} | sed -E 's/ //g')\n\
    \tstring=$1\n\techo \"$string\" | sed -E \"y/$alphabet/$encrypt_alphabet/\"\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # we need to use process\
    \ substitution, since we will use\n    # STDIN to send the input string\n    local\
    \ output=$(< <(\n        local input=$1\n        # create an alphabet that is\
    \ array\n        local alphabet=(a b c d e f g h i j k l m n o p q r s t u v w\
    \ x y z)\n        local output=\"\"\n        # we will loop through every character\
    \ in the input string\n        for ((i=0; i<${#input}; i++)); do\n           \
    \ # $cur is the current character we are processing\n            local cur=${input:$i:1}\n\
    \            # we will search the alphabet array to find out the index\n     \
    \       # of the current character in the array\n            for ((j=0; j<${#alphabet[@]};\
    \ j++)); do\n                if [[ \"${alphabet[$j]}\" == \"$cur\" ]]; then\n\
    \                    # we found the index of the current character, so\n     \
    \               # we will shift the index and append the character\n         \
    \           # in the output\n                    output+=\"${alphabet[$((($j+2)*2))]}\"\
    \n                    break\n                fi\n            done\n        done\n\
    \        # echo the output to STDOUT\n        echo \"$output\"\n    ))\n    #\
    \ return the result in STDOUT\n    echo \"$output\"\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # replace each character\
    \ in the string\n    # with the character corresponding\n    # to the next two\
    \ letters in the alphabet\n    echo \"$1\" | tr \"a-y\" \"c-zab\"\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Write your code here\n\
    \techo $1 | tr 'abcdefghijklmnopqrstuvwxyz' 'cdefghijklmnopqrstuvwxyzab'\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Place your code here\n\
    \techo \"\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n   # TODO: Implement the\
    \ encryption algorithm\n   # The user should be able to call this function by\
    \ using\n   # $(encrypt \"hello world\")\n   ###\n   ### Write your code here\n\
    \   ###\n\t#local vars\n\tlocal str=\"$1\"\n\tnewChar=\"\"\n\tlenStr=${#str}\n\
    \t\n\t#loop through string and convert to new string\n\tfor((i=0; i<lenStr; i++));\
    \ do\n\t\toldChar=\"${str:$i:1}\"\n\t\tcase \"$oldChar\" in\n\t\t\t\"a\") newChar=\"\
    C\";;\n\t\t\t\"b\") newChar=\"D\";;\n\t\t\t\"c\") newChar=\"E\";;\n\t\t\t\"d\"\
    ) newChar=\"F\";;\n\t\t\t\"e\") newChar=\"G\";;\n\t\t\t\"f\") newChar=\"H\";;\n\
    \t\t\t\"g\") newChar=\"I\";;\n\t\t\t\"h\") newChar=\"J\";;\n\t\t\t\"i\") newChar=\"\
    K\";;\n\t\t\t\"j\") newChar=\"L\";;\n\t\t\t\"k\") newChar=\"M\";;\n\t\t\t\"l\"\
    ) newChar=\"N\";;\n\t\t\t\"m\") newChar=\"O\";;\n\t\t\t\"n\") newChar=\"P\";;\n\
    \t\t\t\"o\") newChar=\"Q\";;\n\t\t\t\"p\") newChar=\"R\";;\n\t\t\t\"q\") newChar=\"\
    S\";;\n\t\t\t\"r\") newChar=\"T\";;\n\t\t\t\"s\") newChar=\"U\";;\n\t\t\t\"t\"\
    ) newChar=\"V\";;\n\t\t\t\"u\") newChar=\"W\";;\n\t\t\t\"v\") newChar=\"X\";;\n\
    \t\t\t\"w\") newChar=\"Y\";;\n\t\t\t\"x\") newChar=\"Z\";;\n\t\t\t\"y\") newChar=\"\
    A\";;\n\t\t\t\"z\") newChar=\"B\";;\n\t\t\t\"A\") newChar=\"C\";;\n\t\t\t\"B\"\
    ) newChar=\"D\";;\n\t\t\t\"C\") newChar=\"E\";;\n\t\t\t\"D\")\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl_6iiw8c.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmpl_6iiw8c.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo $1 | tr  'abcdefghijklmnopqrstuvwxyz'\
    \ 'cdefghijklmnopqrstuvwxyzab'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t#TODO\n\techo \"\"\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # replace these lines\
    \ with code\n  echo \"\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # In bash use the ${#var}\
    \ syntax to get the length of a variable\n    echo $1 | tr 'qrstuvwxyzabcdefghijklmnop'\
    \ 'abcdefghijklmnopqrstuvwxyz'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    string=$1\n    # Do\
    \ stuff.\n\n    # first, get the size of the string using \"expr\"\n    # second,\
    \ use the for loop to get the individual character\n    # for each character,\
    \ get the its ASCII value using the \"ord\" command\n    # then shift it down\
    \ by two characters\n    # and then get the ASCII character by using the \"chr\"\
    \ command\n    # and finally print out the resulting string\n    result=''\n \
    \   size=`expr length $string`\n    for ((i=0; i<size; i++)); do\n        current=`echo\
    \ $string | cut -c $((i+1))`\n        new_value=`ord $current`\n        new_value=$((new_value-2))\n\
    \        char=`chr $new_value`\n        result=\"$result$char\"\n    done\n  \
    \  echo $result\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpgmvuarhi.sh: line 31: ord: command not found

    /tmp/tmpgmvuarhi.sh: line 33: chr: command not found

    /tmp/tmpgmvuarhi.sh: line 31: ord: command not found

    /tmp/tmpgmvuarhi.sh: line 33: chr: command not found

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # convert the string\
    \ to lowercase\n  # tr = translate\n  # -d = delete\n  # [:space:] = whitespace\n\
    \  # tr -d ' ' is a shortcut for tr -d '[:space:]'\n  # sed 's/^[ \\t]*//;s/[\
    \ \\t]*$//' is a shortcut for sed 's/^[[:space:]]*//;s/[[:space:]]*$//'\n  # removing\
    \ whitespace is the same as trimming whitespace\n  # $(encrypt \"hi\")\n  # $(encrypt\
    \ \" h i \")\n  # $(encrypt \"  h  i  \")\n  # $(encrypt \"       h        i \
    \       \")\n  # all equivalent\n  local str=$(echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ | tr -d ' ')\n  # declare a dictionary array\n  declare -A dict\n  # for the\
    \ letters a-z\n  for i in {a..z}; do\n    # the letter after i is the equivalent\
    \ of i+2 multiplied by 2\n    # $(letterafter z) is a\n    # $(letterafter z)\
    \ is b\n    # $(letterafter a) is c\n    # $(letterafter a) is d\n    # $(letterafter\
    \ b) is e\n    # $(letterafter b) is f\n    # $(letterafter c) is g\n    # $(letterafter\
    \ c) is h\n    # $(letterafter d) is i\n    # $(letterafter d) is j\n    # $(letterafter\
    \ e) is k\n    # $(letterafter e) is l\n    # $(letterafter f) is m\n    # $(letterafter\
    \ f) is n\n    # $(letterafter g) is o\n    # $(letterafter g) is p\n    # $(letterafter\
    \ h) is q\n    # $(letterafter h) is r\n    # $(letterafter i) is s\n    # $(letterafter\
    \ i) is t\n    # $(letterafter j) is u\n    # $(letterafter j) is v\n    # $(letterafter\
    \ k) is w\n    # $(letterafter k) is x\n    # $(letterafter l) is y\n    # $(letterafter\
    \ l) is z\n\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_psz2kz2.sh: line 63: syntax error near unexpected token `}''

    /tmp/tmp_psz2kz2.sh: line 63: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tstr=$1\n\tlen=${#str}\n\
    \n\techo $str | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Your code here\n\
    \    # Use the global variables $firstChars, $lastChars\n    # and $otherChars\
    \ that are initialized at the beginning\n    # of the script.\n    cryptMsg=\"\
    \"\n    for((i=0;i<${#1};i++)); do\n        currentChar=${1:$i:1}\n        if\
    \ [[ $firstChars =~ (^|[^[:alpha:]])$currentChar([^[:alpha:]]|$) ]]; then\n  \
    \          cryptMsg=$cryptMsg$currentChar\n        elif [[ $lastChars =~ (^|[^[:alpha:]])$currentChar([^[:alpha:]]|$)\
    \ ]]; then\n            cryptMsg=$cryptMsg$currentChar\n        else\n       \
    \     cryptMsg=$cryptMsg$otherChars\n        fi\n    done\n    echo $cryptMsg\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: Complete\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpl03zw2tm.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpl03zw2tm.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"$1\" | tr '[a-z]'\
    \ '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  echo \"$1\" | tr '[a-z][A-Z]'\
    \ '[c-za-b][C-ZA-B]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your function\
    \ here.\n    echo \"Write your function here.\"\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # create a variable\
    \ to store the string argument\n    local str=\"$1\"\n    # create an empty array\
    \ where we will place each letter of the string\n    local array=()\n    # create\
    \ an empty string where we will place each letter of the string\n    local new_string=\"\
    \"\n    # loop through the array and add each letter to the array\n    for((i=0;\
    \ i<${#str}; i++)); do\n        # add each letter to the array\n        array+=(${str:$i:1})\n\
    \    done\n    # loop through the array and if any letter is a z or a y, wrap\
    \ it to the other end\n    for i in \"${!array[@]}\"; do\n        if [[ ${array[$i]}\
    \ == z ]]; then\n            array[$i]=a\n        elif [[ ${array[$i]} == y ]];\
    \ then\n            array[$i]=b\n        elif [[ ${array[$i]} == x ]]; then\n\
    \            array[$i]=c\n        elif [[ ${array[$i]} == w ]]; then\n       \
    \     array[$i]=d\n        elif [[ ${array[$i]} == v ]]; then\n            array[$i]=e\n\
    \        elif [[ ${array[$i]} == u ]]; then\n            array[$i]=f\n       \
    \ elif [[ ${array[$i]} == t ]]; then\n            array[$i]=g\n        elif [[\
    \ ${array[$i]} == s ]]; then\n            array[$i]=h\n        elif [[ ${array[$i]}\
    \ == r ]]; then\n            array[$i]=i\n        elif [[ ${array[$i]} == q ]];\
    \ then\n            array[$i]=j\n        elif [[ ${array[$i]} == p ]]; then\n\
    \            array[$i]=k\n        elif [[ ${array[$i]} == o ]]; then\n       \
    \     array[$i]=l\n        elif [[ ${array[$i]} == n ]]; then\n            array[$i]=m\n\
    \        elif [[ ${array[$i]} == m ]]; then\n            array[$i]=n\n       \
    \ elif [[ ${array[$i]} == l ]]; then\n           \n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpe3tjiquk.sh: line 61: syntax error near unexpected token `}''

    /tmp/tmpe3tjiquk.sh: line 61: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tstring=$1\n\n\t# Encrypt\
    \ the string by rotating each letter two places down the alphabet.\n\t# Use the\
    \ tr command to accomplish this task.\n\t# For example:\n\t# >>> $(echo \"hi\"\
    \ | tr \"abcdefghijklmnopqrstuvwxyz\" \"cdefghijklmnopqrstuvwxyzab\")\n\t# \"\
    lm\"\n\t#\n\t# Rotate the letters with the tr command below.\n\tencrypted_string=`echo\
    \ $string | tr \"abcdefghijklmnopqrstuvwxyz\" \"cdefghijklmnopqrstuvwxyzab\"`\n\
    \n\t# Print the encrypted string.\n\techo $encrypted_string\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo $1 | tr \"abcdefghijklmnopqrstuvwxyz\"\
    \ \"cdefghijklmnopqrstuvwxyzab\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: fill out this\
    \ function\n\t# This is a demo that will not work.\n\tlocal str=$1\n\tlocal len=${#str}\n\
    \tlocal ret=\"\"\n\tfor (( i=0; i<len; i++ )); do\n\t\t# determine the ASCII code\n\
    \t\tlocal char=$(echo $str | cut -c $((i+1)))\n\t\tlocal ascii=$(printf \"%d\"\
    \ \"'$char\")\n\t\t# shift the ASCII code\n\t\tascii=$((ascii + 4))\n\t\t# convert\
    \ back to a character\n\t\tchar=$(printf \\\\$(printf '%03o' $ascii))\n\t\tret=$ret$char\n\
    \tdone\n\techo $ret\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # $1 is a string\n\
    \    local -a encrypted_string\n    for i in $(echo $1 | sed 's/./& /g'); do\n\
    \        # Takes the ASCII code of each character \n        # in the string, shifts\
    \ it by two and \n        # multiplies by two and then prints it's \n        #\
    \ character representation.\n        # Note: This works because charset is ASCII\n\
    \        encrypted_string+=($(printf \\\\$(printf %o $(($(printf %d \\'$i) + 4)))))\n\
    \    done\n    echo ${encrypted_string[@]}\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # Put your code here\n\
    \  PASSWORD=$1\n  echo \"$PASSWORD\" | tr \"a-z\" \"c-za-b\"\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  echo \"$1\" | tr 'abcdefghijklmnopqrstuvwxyz'\
    \ 'cdefghijklmnopqrstuvwxyzab'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  local key=\"$1\"\n  local\
    \ encryptedKey=\"\"\n  local num=\"abcdefghijklmnopqrstuvwxyz\"\n  local x\n \
    \ local i\n  local n\n  local c\n  local j\n  local k\n  local w\n  local m\n\
    \  local o\n  local p\n  for ((i=0; i<${#key}; i++)); do\n    c=${key:$i:1}\n\
    \    if [ \"$c\" == \" \" ]; then\n      encryptedKey+=\" \"\n    else\n     \
    \ for ((j=0; j<${#num}; j++)); do\n        if [ \"$c\" == \"${num:$j:1}\" ]; then\n\
    \          x=$j\n          break\n        fi\n      done\n      if [ \"$x\" -gt\
    \ 0 ]; then\n        n=$(((x+1)*2))\n        if [ \"$n\" -gt \"${#num}\" ]; then\n\
    \          n=$((n - ${#num}))\n        fi\n        encryptedKey+=\"${num:$n:1}\"\
    \n      else\n        x=$((x*(-1)))\n        n=$(((x+1)*2))\n        if [ \"$n\"\
    \ -gt \"${#num}\" ]; then\n          n=$((n - ${#num}))\n        fi\n        encryptedKey+=\"\
    ${num:$n:1}\"\n      fi\n    fi\n  done\n  echo \"$encryptedKey\"\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    if [[ -z $1 ]]; then\n\
    \        echo \"\"\n        return 0\n    fi\n    input=$1\n    len=${#input}\n\
    \    result=\"\"\n    for ((i=0; i<len; i++)); do\n        char=${input:$i:1}\n\
    \        num=$(printf '%d' \"'$char\")\n        if [[ $num -gt 97 && $num -lt\
    \ 122 ]]; then\n            num=$((num + 4))\n            if [[ $num -gt 122 ]];\
    \ then\n                num=$((num - 26))\n            fi\n        elif [[ $num\
    \ -gt 65 && $num -lt 90 ]]; then\n            num=$((num + 4))\n            if\
    \ [[ $num -gt 90 ]]; then\n                num=$((num - 26))\n            fi\n\
    \        fi\n        char=$(printf \\\\$(printf '%03o' $num))\n        result+=$char\n\
    \    done\n    echo $result\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 0
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Get the string\n\t\
    input=$1\n\t# Iterate through each character\n\t# of input and get its ASCII value\n\
    \tfor(( i=0; i<${#input}; i++ ))\n\tdo\n\t\t# Get the ASCII value of the\n\t\t\
    # character and store it in a\n\t\t# variable char\n\t\tchar=$(printf \"%d\" \"\
    '${input:$i:1}\")\n\t\t# In the next step, we will use\n\t\t# an algorithm to\
    \ calculate the\n\t\t# new ASCII value for the character\n\t\t# and store it in\
    \ the variable new_char\n\t\t# if the character is in uppercase\n\t\tif [ $char\
    \ -ge 65 -a $char -le 90 ]\n\t\tthen\n\t\t\t# rotate the ASCII value\n\t\t\t#\
    \ of the character by\n\t\t\t# 2*2 places\n\t\t\tnew_char=$(( ( (char - 65 + 2*2)\
    \ % 26) + 65 ))\n\t\t\t# printf \"%c\" \"$new_char\"\n\t\tfi\n\t\t# if the character\
    \ is in lowercase\n\t\tif [ $char -ge 97 -a $char -le 122 ]\n\t\tthen\n\t\t\t\
    # rotate the ASCII value\n\t\t\t# of the character by\n\t\t\t# 2*2 places\n\t\t\
    \tnew_char=$(( ( (char - 97 + 2*2) % 26) + 97 ))\n\t\t\t# printf \"%c\" \"$new_char\"\
    \n\t\tfi\n\t\t# append the character (new_char)\n\t\t# with the previous characters\n\
    \t\tencrypted_string+=$(printf \"\\x$(printf %x $new_char)\")\n\tdone\n\t# return\
    \ the encrypted string\n\techo \"$encrypted_string\"\n}\n\ncandidate() {\n   \
    \ encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\"\
    \ ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # Return a string encrypted\
    \ with the alphabet being rotated. \n  # The alphabet should be rotated in a manner\
    \ such that the letters \n  # shift down by two multiplied to two places.\n  #\
    \ For example:\n  # >>> $(encrypt \"hi\")\n  # \"lm\"\n  # >>> $(encrypt \"asdfghjkl\"\
    )\n  # \"ewhjklnop\"\n  # >>> $(encrypt \"gf\")\n  # \"kj\"\n  # >>> $(encrypt\
    \ \"et\")\n  # \"ix\"\n  #\n  # $1 is a string\n  #\n  # Define our alphabet array\n\
    \  alphabet=({a..z})\n  # Define our encrypted array\n  encrypted=()\n  # Loop\
    \ through our input string\n  for (( j=0; j<${#1}; j++ )); do\n    # Loop through\
    \ our alphabet array\n    for (( i=0; i<${#alphabet[@]}; i++ )); do\n      # If\
    \ our input string equals the current index in our alphabet array\n      if [[\
    \ ${1:$j:1} == ${alphabet[$i]} ]]; then\n        # If $i is less than two\n  \
    \      if [[ $i -lt 2 ]]; then\n          # Remove the first two elements from\
    \ our alphabet array\n          alphabet=(${alphabet[@]:2})\n          # Add them\
    \ to the end of our alphabet array\n          alphabet=(${alphabet[@]} ${alphabet[@]:0:2})\n\
    \          # Push the new element to our encrypted array\n          encrypted+=(${alphabet[$i]})\n\
    \        # Else (if $i is greater than two)\n        else\n          # Push the\
    \ current element of our alphabet array to our encrypted array\n          encrypted+=(${alphabet[$((i-2))]})\n\
    \        fi\n      fi\n    done\n  done\n  # Echo our encrypted array\n  echo\
    \ ${encrypted[@]}\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO: Fill in this\
    \ function\n  local -l str=$1\n  local -l result=\"\"\n  local index=0\n  while\
    \ [ $index -lt ${#str} ]; do\n    local curr_char=\"${str:$index:1}\"\n    result=\"\
    $result\"$(shift_char $curr_char)\n    index=$(($index+1))\n  done\n  echo $result\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp1a2k5jb3.sh: line 24: shift_char: command not found

    /tmp/tmp1a2k5jb3.sh: line 24: shift_char: command not found

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    str=$1\n    encryptedStr=\"\
    \"\n    for (( i=0; i<${#str}; i++ ))\n    do\n        if [[ ${str:$i:1} =~ [a-c]\
    \ ]]\n        then\n            encryptedStr=$encryptedStr\"f\"\n        elif\
    \ [[ ${str:$i:1} =~ [d-f] ]]\n        then\n            encryptedStr=$encryptedStr\"\
    h\"\n        elif [[ ${str:$i:1} =~ [g-i] ]]\n        then\n            encryptedStr=$encryptedStr\"\
    j\"\n        elif [[ ${str:$i:1} =~ [j-l] ]]\n        then\n            encryptedStr=$encryptedStr\"\
    l\"\n        elif [[ ${str:$i:1} =~ [m-o] ]]\n        then\n            encryptedStr=$encryptedStr\"\
    n\"\n        elif [[ ${str:$i:1} =~ [p-r] ]]\n        then\n            encryptedStr=$encryptedStr\"\
    p\"\n        elif [[ ${str:$i:1} =~ [s-u] ]]\n        then\n            encryptedStr=$encryptedStr\"\
    r\"\n        elif [[ ${str:$i:1} =~ [v-x] ]]\n        then\n            encryptedStr=$encryptedStr\"\
    t\"\n        elif [[ ${str:$i:1} =~ [y-z] ]]\n        then\n            encryptedStr=$encryptedStr\"\
    v\"\n        else\n            encryptedStr=$encryptedStr${str:$i:1}\n       \
    \ fi\n    done\n    echo $encryptedStr\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]' | tr \"abcdefghijklmnopqrstuvwxyz\" \"cdefghijklmnopqrstuvwxyzab\"\
    \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # echo your result\
    \ here\n\techo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tif [[ -z $1 ]]; then\n\
    \t\techo \"No string to encrypt given.\"\n\t\treturn 1\n\tfi\n\techo $1 | tr [a-zA-Z]\
    \ [c-za-bC-ZA-B]\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# declare an array variable\n\
    \tlocal alphabet=({a..z})\n\t# $1 is the string\n\tlocal str=$1\n\t# remove all\
    \ spaces\n\tlocal str=${str//[[:space:]]/}\n\tlocal str=$(tr 'A-Z' 'a-z' <<< \"\
    $str\")\n\t\n\tfor (( i=0; i<${#str}; i++ )); do\n\t\tlocal curr=${str:$i:1}\n\
    \t\tlocal index=`expr index \"${alphabet[*]}\" $curr`\n\t\t#echo ${alphabet[$index]}\n\
    \t\tlocal temp=${alphabet[$index+2]}\n\t\techo -n $temp\n\tdone\n\techo\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    if [ $# -eq 0 ]; then\n\
    \        echo \"Usage: echo 'string' | $(basename $0)\"\n        exit 1\n    fi\n\
    \    echo \"$@\" | tr '[a-z]' '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # echo $1 | tr 'a-z'\
    \ 'c-za-b'\n    out=\"\"\n    for((i=0;i<${#1};i++)); do\n        out+=${1:$i:1}\n\
    \        [ ${1:$i:1} == \"z\" ] && out=\"${out}a\"\n        [ ${1:$i:1} == \"\
    y\" ] && out=\"${out}b\"\n    done\n    echo \"$out\"\n}\n\ncandidate() {\n  \
    \  encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    #this function takes\
    \ a string as an argument\n    #the string should be shifted down by 2*2\n   \
    \ #the encrypted string should be returned\n    #the loop needs to rotate each\
    \ index of the string\n    #$i++ is a post increment which is the character after\
    \ whatever is returned\n    #ex: if $i = a, then $i++ is b\n    #\n    #The string\
    \ should be in the form of an array to access individual characters\n    #This\
    \ means that we should be able to manipulate the array with a for loop\n    #\n\
    \    #we need to test for uppercase and lowercase\n    #and shift them appropriately\n\
    \    #\n    #We need to test for the alphabet and see if we can use case or and\
    \ if-then to shift the string\n    #either we can shift and use the case, or use\
    \ it with the if-then\n    #I'll try the case method first and if that doesn't\
    \ work, I'll try the if-then method\n    #\n\n    string=$1\n    encrypted=\"\"\
    \n\n    for ((i=0; i<${#string}; i++)); do\n        #read -r -n 1\n        #text=${var,,}\n\
    \        #echo \"${string:$i:1}\"\n        case ${string:$i:1} in\n          \
    \  \"a\") encrypted+=\"c\";;\n            \"b\") encrypted+=\"d\";;\n        \
    \    \"c\") encrypted+=\"e\";;\n            \"d\") encrypted+=\"f\";;\n      \
    \      \"e\") encrypted+=\"g\";;\n            \"f\") encrypted+=\"h\";;\n    \
    \        \"g\") encrypted+=\"i\";;\n            \"h\") encrypted+=\"j\";;\n  \
    \          \"i\") encrypted+=\"k\";;\n            \"j\") encrypted+=\"l\";;\n\
    \            \"k\") encrypted+=\"m\";;\n            \"l\") encrypted+=\"n\";;\n\
    \            \"m\") encrypted+=\"o\";;\n            \"n\") encrypted+=\"p\";;\n\
    \            \"o\") encrypted+=\"q\";;\n            \"p\") encrypted+=\"r\";;\n\
    \            \"q\") encrypted+=\"s\";;\n            \"r\") encrypted+=\"t\";;\n\
    \            \"s\") encrypted+=\"u\";;\n            \"t\") encrypted+=\"v\";;\n\
    \           \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpvymrvqmq.sh: line 65: syntax error near unexpected token `}''

    /tmp/tmpvymrvqmq.sh: line 65: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO\n\t# your code\
    \ here\n    echo \"$1\" | tr a-z 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # first use tr to remove\
    \ case sensitivity (treat everything as uppercase)\n    # then using tr again\
    \ to convert to num, then add four, and convert back\n    echo \"$1\" | tr '[:lower:]'\
    \ '[:upper:]' | tr 'A-Z' 'A-P'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tif [ -z \"$1\" ]; then\n\
    \t\techo \"Error: No args passed\" >&2\n\t\treturn 1\n\tfi\n\t\n\t#echo $1 | tr\
    \ 'A-Za-z' 'N-ZA-Mn-za-m'\n\techo $1 | tr 'A-Za-z' 'C-ZA-Bc-za-b'\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    string=$1\n    charlist=`echo\
    \ $string | fold -w1`\n    result=\"\"\n    for char in $charlist; do\n      \
    \  current_ascii=`echo -n $char | od -An -tuC`\n        current_ascii=$((current_ascii\
    \ + 4))\n        result=$result`echo -n $char | tr \"[:upper:]\" \"[:lower:]\"\
    \ | tr \"a-z\" \"c-za-b\"`\n    done\n    echo $result\n}\n\ncandidate() {\n \
    \   encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# YOUR CODE HERE\n\t\
    echo $1 | tr [:lower:] [:upper:] | tr 'A-Z' 'C-ZA-B' | tr [:upper:] [:lower:]\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # your code here\n  local\
    \ encrypted=$(echo \"$1\" | tr [a-z] [c-za-b])\n  echo \"$encrypted\"\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    string=\"$1\"\n   \
    \ alpha=\"abcdefghijklmnopqrstuvwxyz\"\n    encrypted=''\n    for (( i=0; i<${#string};\
    \ i++ )); do\n        char=\"${string:$i:1}\"\n        char_pos=${alpha%%$char*}\n\
    \        encrypted=\"$encrypted${alpha:$((${#char_pos}+$(($i*2))+2)):1}\"\n  \
    \  done\n    echo \"$encrypted\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp54vcyq_z.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp54vcyq_z.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Create an array of\
    \ letters\n    letter_array=(a b c d e f g h i j k l m n o p q r s t u v w x y\
    \ z)\n    # Create a new array that has been rotated by two\n    new_array=(${letter_array[@]:2}\
    \ ${letter_array[@]:0:2})\n    # Create an array to hold the result\n    result_array=()\n\
    \    # Rotate the letters that are passed in\n    for ((i=0; i<${#1}; i++)); do\n\
    \        # Get the current letter\n        current_letter=${1:$i:1}\n        #\
    \ If the current letter is a space, don't rotate it\n        if [[ $current_letter\
    \ = ' ' ]]; then\n            result_array+=$current_letter\n        else\n  \
    \          # Find the letter in the original array, save the index\n         \
    \   current_index=$(indexof \"$current_letter\" \"${letter_array[@]}\")\n    \
    \        # Use the index of the rotated array to get the letter\n            rotated_letter=${new_array[$current_index]}\n\
    \            # Add the letter to the result\n            result_array+=$rotated_letter\n\
    \        fi\n    done\n    # Echo the result\n    echo \"${result_array[@]}\"\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmplpjqmo08.sh: line 33: indexof: command not found

    /tmp/tmplpjqmo08.sh: line 33: indexof: command not found

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # Variables\n  declare\
    \ -r ALPHABET=\"abcdefghijklmnopqrstuvwxyz\"\n  declare -i MOD_AMOUNT=$((2*2))\n\
    \  declare -r UPPER_ALPHABET=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  declare -i I=0\n\
    \  declare CHARACTER=''\n  declare ENCRYPTED_CHARACTER=''\n  declare ENCRYPTED_STRING=''\n\
    \n  # Rotate the characters\n  for (( I=0; I<${#1}; I++ )); do\n    CHARACTER=\"\
    ${1:$I:1}\"\n    # Check for lowercase\n    if [[ $ALPHABET =~ $CHARACTER ]];\
    \ then\n      ENCRYPTED_CHARACTER=$(printf \"$ALPHABET\" | awk -v c=\"$CHARACTER\"\
    \ -v mod=\"$MOD_AMOUNT\" '{ print substr($0,index($0,c)+mod%26,1) }')\n    # Check\
    \ for uppercase\n    elif [[ $UPPER_ALPHABET =~ $CHARACTER ]]; then\n      ENCRYPTED_CHARACTER=$(printf\
    \ \"$UPPER_ALPHABET\" | awk -v c=\"$CHARACTER\" -v mod=\"$MOD_AMOUNT\" '{ print\
    \ substr($0,index($0,c)+mod%26,1) }')\n    else\n      ENCRYPTED_CHARACTER=\"\
    $CHARACTER\"\n    fi\n    ENCRYPTED_STRING=\"$ENCRYPTED_STRING$ENCRYPTED_CHARACTER\"\
    \n  done\n\n  echo \"$ENCRYPTED_STRING\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n \n  \n  # local is a reserved\
    \ word that designates a variable to be local to the function. \n  # The local\
    \ variable command can only be used inside functions. It is a builtin command.\n\
    \  # The scope of a variable is the region of the code where it is accessible.\n\
    \  # Variables declared with the local command are only accessible within the\
    \ current scope.\n  # When a new scope is created, all variables that are not\
    \ marked local are inherited, \n  # i.e. they are accessible in the new scope\
    \ as well.\n  # The word \"local\" is also a reserved word in some other programming\
    \ languages.\n  # For example, C++, PHP and JavaScript all have reserved words\
    \ named \"local\".\n  # This means that if you want to use the word \"local\"\
    \ as a variable in those languages,\n  # you won't be able to, because it's a\
    \ reserved word.\n  # Local variables are not permanent, they only exist until\
    \ the script finishes running.\n  # If you have a bash script, e.g. test.sh, then\
    \ the local variables will cease to exist as soon as test.sh finishes running.\n\
    \  # Variables defined with \"local\" can only be accessed inside the function\n\
    \  # in which they are defined.\n  # It's possible to have variable names that\
    \ are the same outside and inside the function,\n  # but the variable inside the\
    \ function is completely separate from the variable outside the function.\n  #\
    \ If the variable inside the function is changed, the variable outside the function\
    \ is unaffected.\n  # If both variables have the same name and you change the\
    \ variable inside the function,\n  # that change won't be reflected outside the\
    \ function.\n  # The variable outside the function will remain unchanged.\n  #\
    \ This is also true if both variables have the same name and they are changed\
    \ outside the function.\n  # The change made outside the function will not be\
    \ reflected inside the function.\n  # You can't see the value of a local variable\
    \ outside the function in which it is defined.\n  # This is because the local\
    \ variable has a different scope than the variable outside the function.\n  #\
    \ The local variable is only accessible inside the function, \n  # so you can't\
    \ access it outside the function.\n  # We will review scopes in more detail later.\n\
    \n  # Get the first argument from the\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpa9s5in6k.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmpa9s5in6k.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    arr=(\"$@\")\n    l=${#arr[@]}\n    for((i=0;i<l;i++))\n    do\n        char=${arr[$i]}\n\
    \        num=$(printf \"%d\" \"'$char\")\n        if [ $num -ge 97 -a $num -le\
    \ 109 ]\n        then\n            num=$((num+2))\n        elif [ $num -ge 110\
    \ -a $num -le 122 ]\n        then\n            num=$((num-24))\n        elif [\
    \ $num -ge 65 -a $num -le 77 ]\n        then\n            num=$((num+2))\n   \
    \     elif [ $num -ge 78 -a $num -le 90 ]\n        then\n            num=$((num-24))\n\
    \        fi\n        num=$(printf \"\\x$(printf %x $num)\")\n        arr[$i]=$num\n\
    \    done\n    echo \"${arr[@]}\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo $1 | tr '[a-z]'\
    \ '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# your code goes here\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpuy2p9y8t.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpuy2p9y8t.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo $1 | tr \"a-z\"\
    \ \"c-za-b\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    if [ \"$#\" -ne 1 ];\
    \ then\n        echo \"Please pass exactly one string to encrypt.\"\n        return\
    \ 1\n    fi\n    # declare a local variable \"i\" (this variable only exists in\
    \ this function)\n    local i\n    # declare a local variable \"output\" (this\
    \ variable only exists in this function)\n    local output\n    # for each character\
    \ in the argument $1 (which is the string being passed)\n    for i in $(seq 0\
    \ $((${#1} - 1))); do\n        # add the numeric value of the character to the\
    \ variable \"output\"\n        output+=$(printf \"%d\" \"'${1:$i:1}\")\n    done\n\
    \    # subtract 97 from each number and divide by 2 and subtract 4 from that\n\
    \    output=$(echo \"$output\" | awk '{gsub(/97/, \"91\"); print}' | awk '{gsub(/98/,\
    \ \"92\"); print}' | awk '{gsub(/99/, \"93\"); print}' | awk '{gsub(/100/, \"\
    94\"); print}' | awk '{gsub(/101/, \"95\"); print}' | awk '{gsub(/102/, \"96\"\
    ); print}' | awk '{gsub(/103/, \"97\"); print}' | awk '{gsub(/104/, \"98\"); print}'\
    \ | awk '{gsub(/105/, \"99\"); print}' | awk '{gsub(/106/, \"100\"); print}' |\
    \ awk '{gsub(/107/, \"101\"); print}' | awk '{gsub(/108/, \"102\"); print}' |\
    \ awk '{gsub(/109/, \"103\"); print}' | awk '{gsub(/110/, \"104\"); print}' |\
    \ awk '{gsub(/111/, \"105\"); print}' | awk '{gsub(/112/, \"106\"); print}' |\
    \ awk '{gsub(/113/, \"107\"); print}' | awk '{gsub(/114/, \"108\"); print}' |\
    \ awk '{gsub(/115/, \"109\"); print}' | awk '{gsub(/\n}\n\ncandidate() {\n   \
    \ encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\"\
    \ ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpw2tho4bm.sh: line 32: unexpected EOF while looking for matching
    `''''

    /tmp/tmpw2tho4bm.sh: line 52: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: -1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  tr 'a-z' 'c-za-b'\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=41 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=10 encoding='utf-8'>
  timestamp: 1660025024
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # convert all input to\
    \ lowercase\n  local str=$(echo $1 | tr '[:upper:]' '[:lower:]')\n  # Loop through\
    \ the string, converting each character to the \n  # ASCII representation and\
    \ adding 2, then printing the\n  # character using the converted ASCII value.\n\
    \  for((i=0; i<${#str}; i++)); do\n    # print character\n    printf \\\\$(printf\
    \ '%03o' $(( ${str:$i:1} + 2 )))\n  done\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    printf %s \"$1\" |\
    \ tr \"a-z\" \"c-za-b\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # store the first character\
    \ of the string as the\n    # beginning point for the new string\n    encrypt=$(echo\
    \ $1 | cut -c 1)\n    # build a new string with all the characters\n    # of the\
    \ original string in reverse order\n    for (( i = 1; i < ${#1}; i++ )); do\n\
    \        # each new character is the original\n        # character at the index\
    \ of the string\n        # minus two times the index plus one\n        char=$(echo\
    \ $1 | cut -c $(( i + 1 )))\n        new_char=$(echo $1 | cut -c $(( (i * 2) +\
    \ 1 )))\n        encrypt=$encrypt$new_char\n    done\n    # print the new string\n\
    \    echo $encrypt\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  echo \"joe\"\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # ENCRYPTION_KEY is\
    \ a variable that defines the index to which \n    # you want to shift the alphabet\
    \ by. \n    # For example, to shift the first letter, a, to b, the ENCRYPTION_KEY\
    \ would be 1\n    # To shift the first letter, a, to g, the ENCRYPTION_KEY would\
    \ be 6\n    # To shift the first letter, a, to q, the ENCRYPTION_KEY would be\
    \ 17\n    ENCRYPTION_KEY=$((2 * 2))\n    # ABC is the alphabet\n    ABC=\"abcdefghijklmnopqrstuvwxyz\"\
    \n    # TODO: Write the function that will encrypt the string\n    # and return\
    \ the result.\n    # Hint: Use the letter index and the encryption key to get\
    \ the \n    #       corresponding letter in the encrypted string\n    #\n    #\
    \ Hint: You can get the index of a character in a string using the \n    #   \
    \    following command:\n    #       $ echo -n $c | grep -o -n $i | cut -d: -f1\n\
    \    #       where $c is the character in the string and $i is the letter in the\
    \ alphabet\n    #       For example, to get the index of the letter \"a\" in the\
    \ string \"abc\":\n    #       $ echo -n \"abc\" | grep -o -n \"a\" | cut -d:\
    \ -f1\n    #       where the result is 1\n\n    # TODO: Replace the empty string\
    \ with the encrypted string\n    encrypted_string=\"\"\n    return encrypted_string\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp4rj0jnub.sh: line 41: return: encrypted_string: numeric argument
    required

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # initialize an array\
    \ to hold the alphabet\n    alphabet=( \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"\
    g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"\
    t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" )\n    # loop through each letter in the\
    \ string\n    for (( i=0; i<${#1}; i++ )); do\n        # set a variable to the\
    \ current character\n        currentChar=${1:$i:1}\n        # set a variable to\
    \ the index of the current character\n        currentIndex=$(indexOf \"$currentChar\"\
    \ \"${alphabet[@]}\")\n        # set a variable to the index of the shifted character\n\
    \        shiftIndex=$(( ($currentIndex + ($currentIndex % 2)) + ($currentIndex\
    \ % 2) ))\n        # store the shifted character into the output string\n    \
    \    output=\"$output${alphabet[$shiftIndex]}\"\n    done\n    # return the output\
    \ string\n    echo \"$output\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8ka6w5q0.sh: line 25: indexOf: command not found

    /tmp/tmp8ka6w5q0.sh: line 27: ( + ( % 2)) + ( % 2) : syntax error: operand expected
    (error token is "% 2)) + ( % 2) ")

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tletters=\"abcdefghijklmnopqrstuvwxyz\"\
    \n\toutput=\"\"\n\tfor (( i=0; i<${#1}; i++ )); do\n\t\tfor (( j=0; j<${#letters};\
    \ j++ )); do\n\t\t\tif [ \"${1:$i:1}\" == \"${letters:$j:1}\" ]; then\n\t\t\t\t\
    if [ $j -gt 21 ]; then\n\t\t\t\t\toutput+=\"${letters:$(( j-20 )):1}\"\n\t\t\t\
    \telse\n\t\t\t\t\toutput+=\"${letters:$(( j+4 )):1}\"\n\t\t\t\tfi\n\t\t\tfi\n\t\
    \tdone\n\tdone\n\techo $output\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Check if the string\
    \ is empty\n    if [ -z \"$1\" ]; then\n        return\n    fi\n\n    # Create\
    \ an empty string\n    local encryptString=\"\"\n\n    # Create an empty array,\
    \ then set it to the arguments passed\n    local letters=()\n    letters=($1)\n\
    \n    # Iterate through the letters array\n    for letter in \"${letters[@]}\"\
    ; do\n        # Change the letter to lowercase\n        letter=$(echo $letter\
    \ | tr '[:upper:]' '[:lower:]')\n\n        # Iterate through the alphabet array\n\
    \        for (( i=0; i<${#alphabet[@]}; i++ )); do\n            # Check if the\
    \ current letter is equal to one of the alphabet\n            if [ \"$letter\"\
    \ == \"${alphabet[$i]}\" ]; then\n                # Encrypt the letter by moving\
    \ down 2 indexes\n                # The % operator handles the situation when\
    \ the letter is at \n                # the end of the alphabet\n             \
    \   letter=${alphabet[$(( ($i + 2) % 26 ))]}\n                break\n        \
    \    fi\n        done\n\n        # Append the letter to the encrypted string\n\
    \        encryptString+=$letter\n    done\n\n    # Output the encrypted string\n\
    \    echo $encryptString\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# not really sure if\
    \ this is a generalizable solution\n\t# I'm sure there is a way to use the ascii\
    \ code of the char\n\t# and do some kind of math to get the outputed value, but\
    \ \n\t# I do not know what that math is\n\tstr=$1\n\tstr=${str,,}\n\tstr2=\"\"\
    \n\tfor (( i=0; i<${#str}; i++ )); do\n\t\tif [[ ${str:$i:1} == \"z\" ]]; then\n\
    \t\t\tstr2+=\"b\"\n\t\telif [[ ${str:$i:1} == \"y\" ]]; then\n\t\t\tstr2+=\"a\"\
    \n\t\telse\n\t\t\tstr2+=${str:$i:1}\n\t\t\tstr2+=${str:$i:1}\n\t\tfi\n\tdone\n\
    \techo $str2\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Make sure that $1\
    \ is a string. \n    [[ \"$1\" =~ ^[a-zA-Z]+$ ]] || { echo \"Please enter a string\"\
    \ && return 1; }\n    # Lowercase the string.\n    string=\"$( echo \"$1\" | tr\
    \ '[:upper:]' '[:lower:]' )\"\n    # This variable contains the alphabet.\n  \
    \  alph=\"abcdefghijklmnopqrstuvwxyz\"\n    # This variable contains the modified\
    \ alphabet.\n    newalph=\"cdefghijklmnopqrstuvwxyzab\"\n    # This variable contains\
    \ the string after rotating the alphabet.\n    newstring=\"\"\n    # Loop through\
    \ the characters in the string.\n    for (( i=0; i<${#string}; i++ )); do\n  \
    \      # This variable contains the character at the index in $string.\n     \
    \   letter=\"${string:$i:1}\"\n        # This variable contains the index of the\
    \ character in $alph.\n        alphidx=\"$( echo \"$alph\" | awk -v letter=\"\
    $letter\" '{ for (i=1; i<27; i++) { if ( substr($0, i, 1) == letter ) { print\
    \ i; } } }' )\"\n        # Add the character at $alphidx of $newalph to $newstring.\n\
    \        newstring=\"$newstring${newalph:$alphidx:1}\"\n    done\n    # Print\
    \ the new string.\n    echo \"$newstring\"\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local str=$1\n    local\
    \ new_str\n    for ((i=0; i<${#str}; i++)); do\n        local ch=${str:$i:1}\n\
    \        local new_ch=$(echo $(($(($(printf \"%d\" \"'$ch\") - 97)) * 2)) | awk\
    \ '{print strtonum(\"0x\" $1)}')\n        new_str=$new_str$(printf \"\\x$(printf\
    \ %x $new_ch)\")\n    done\n    echo $new_str\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"$1\" | tr \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\" \"CDEFGHIJKLMNOPQRSTUVWXYZABcdefghijklmnopqrstuvwxyzab\"\
    \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Put your solution\
    \ here.\n    echo \"$@\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  out=\"\"\n  for (( i=0;\
    \ i<${#1}; i++ )); do\n    c=${1:$i:1}\n    [ \"$c\" == \"z\" ] && c=\"b\"\n \
    \   [ \"$c\" == \"y\" ] && c=\"a\"\n    out+=$(printf \"%s\" $(echo $(printf \"\
    %d\" \"'$c\")+2 | bc))\n  done\n  echo $out\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tif [ $# -ne 1 ]; then\n\
    \t\techo \"Usage: $0 <string>\"\n\t\texit 1\n\tfi\n\tvar=\"$1\"\n\tresult=\"\"\
    \n\tfor((i=0;i<${#var};i++)); do\n\t\tresult+=$(echo ${var:$i:1} | tr 'a-xya-xz'\
    \ 'c-zab-y')\n\tdone\n\techo $result\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    for (( i=0; i<${#1};\
    \ i++ ))\n    do\n        c=${1:$i:1}\n        c=$(printf '%d' \"'$c\")\n    \
    \    c=$((($c - 97) * 2 + 97))\n        c=$(printf '%b' \"'$c\")\n        if [\
    \ \"$i\" -eq 0 ]\n        then\n            output=$c\n        else\n        \
    \    output=$output$c\n        fi\n    done\n    echo $output\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  echo $1 | tr '[a-z]'\
    \ '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Checks if the string\
    \ is empty\n    if [ \"$1\" = \"\" ]; then\n        echo \"Please provide a string.\"\
    \n        return 1\n    fi\n\n    # The regex checks whether the string is alphanumeric,\
    \ or\n    # has a special character. If it has a special character,\n    # it\
    \ will return 1.\n    if ! [[ $1 =~ ^[a-zA-Z0-9]*$ ]]; then\n        echo \"Please\
    \ provide an alphanumeric string.\"\n        return 1\n    fi\n\n    # Keeps track\
    \ of whether the string contains\n    # an upper case letter or not.\n    contains_upper_case=0\n\
    \n    # Checks if the string contains an upper case\n    # letter. If it does,\
    \ it changes the contains_upper_case\n    # variable to 1.\n    for (( i=0; i<${#1};\
    \ i++ )); do\n        char=${1:$i:1}\n        if [[ $char =~ ^[A-Z]$ ]]; then\n\
    \            contains_upper_case=1\n            break\n        fi\n    done\n\n\
    \    # If the string contains an upper case letter,\n    # it will convert it\
    \ to lower case.\n    if [ $contains_upper_case -eq 1 ]; then\n        string=${1,,}\n\
    \    else\n        string=$1\n    fi\n\n    # The string is then encrypted using\
    \ the rules that were\n    # given.\n    encrypt_string=\"\"\n    for (( i=0;\
    \ i<${#string}; i++ )); do\n        char=${string:$i:1}\n        if [ $char =\
    \ \"z\" ]; then\n            encrypt_string+=\"b\"\n        elif [ $char = \"\
    y\" ]; then\n            encrypt_string+=\"a\"\n        else\n            char_num=$(printf\
    \ \"%d\" \"'$char\")\n            char_num=$((char_num + 2))\n            char=$(printf\
    \ \"\\x$(printf %x $char_num)\")\n            encrypt_string+=$char\n        fi\n\
    \    done\n\n    # If the string originally contained an upper case letter,\n\
    \    # it will convert the encrypted string back to upper case.\n    if [ $contains_upper_case\
    \ -eq 1 ]; then\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpkpwdneiv.sh: line 75: syntax error near unexpected token `}''

    /tmp/tmpkpwdneiv.sh: line 75: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here.\n\
    \    # Your code should print to stdout.\n    # Example: echo \"hello\"\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp8z38cdh1.sh: line 21: syntax error near unexpected token `}''

    /tmp/tmp8z38cdh1.sh: line 21: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"$1\" | tr 'abcdefghijklmnopqrstuvwxyz'\
    \ 'cdefghijklmnopqrstuvwxyzab'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  value=\"$1\"\n  encrypted=\"\
    \"\n  echo \"Before $value\"\n  for (( i=0; i<${#value}; i++ )); do\n    \n  \
    \  val=${value:$i:1}\n    asciiVal=$(LC_CTYPE=C printf '%d' \"'$val\")\n    #\
    \ echo \"Val $val\"\n    # echo \"AsciiVal $asciiVal\"\n    newVal=$(($asciiVal\
    \ + 2))\n    # echo \"NewVal $newVal\"\n    newVal=$(printf \\\\$(printf '%03o'\
    \ $newVal))\n    # echo \"NewVal2 $newVal\"\n    encrypted=\"$encrypted$newVal\"\
    \n  done\n  echo \"After $encrypted\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tstring=\"$1\"\n\tcipher_text=\"\
    \"\n\t# ASCII values of letters (lower and upper case)\n\talpha_lower_min=97\n\
    \talpha_lower_max=122\n\talpha_upper_min=65\n\talpha_upper_max=90\n\tfor (( i=0;\
    \ i<${#string}; i++ )); do\n\t\tascii_val=`printf \"%d\" \"'${string:$i:1}\"`\n\
    \t\tif [ $ascii_val -ge $alpha_lower_min ] && [ $ascii_val -le $alpha_lower_max\
    \ ]; then\n\t\t\tif [ $ascii_val -gt $(($alpha_lower_max - 2)) ]; then\n\t\t\t\
    \tascii_val=$(($ascii_val - $alpha_lower_max + $alpha_lower_min + 1))\n\t\t\t\
    fi\n\t\t\tascii_val=$(($ascii_val + 2))\n\t\telif [ $ascii_val -ge $alpha_upper_min\
    \ ] && [ $ascii_val -le $alpha_upper_max ]; then\n\t\t\tif [ $ascii_val -gt $(($alpha_upper_max\
    \ - 2)) ]; then\n\t\t\t\tascii_val=$(($ascii_val - $alpha_upper_max + $alpha_upper_min\
    \ + 1))\n\t\t\tfi\n\t\t\tascii_val=$(($ascii_val + 2))\n\t\tfi\n\t\tcipher_text+=$(printf\
    \ \\\\$(printf '%03o' $ascii_val))\n\tdone\n\techo $cipher_text\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\
    \n    newString=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        newString+=\"\
    ${alphabet:$((((${1:$i:1} - 97) + (${#1} * 2)) % 26)):1}\"\n    done\n    echo\
    \ \"$newString\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Capture the string\
    \ and convert it to lowercase\n\tlocal string=\"$(echo \"$1\" | tr '[:upper:]'\
    \ '[:lower:]')\"\n\tlocal newString=\"\"\n\t# Loop through every character\n\t\
    for((i=0; i<${#string}; i++)); do\n\t\tlocal char=${string:$i:1}\n\t\tlocal newChar=$char\n\
    \t\t# Checks if the character is a letter\n\t\tif [[ $char =~ [a-z] ]]; then\n\
    \t\t\t# Checks if the new character is a letter\n\t\t\tif [[ $(echo \"$newChar\"\
    \ | tr '[:upper:]' '[:lower:]') =~ [a-z] ]]; then\n\t\t\t\tnewString=\"$newString$newChar\"\
    \n\t\t\t# If the character rotates past the end of the alphabet, it goes to the\
    \ beginning\n\t\t\telse\n\t\t\t\tnewChar=$(echo $newChar | tr '[:upper:]' '[:lower:]')\n\
    \t\t\t\tnewString=\"$newString$newChar\"\n\t\t\tfi\n\t\t# If the character is\
    \ not a letter, it returns the character\n\t\telse\n\t\t\tnewString=\"$newString$char\"\
    \n\t\tfi\n\tdone\n\techo \"$newString\"\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tstring=$1\n\tstring_length=${#string}\n\
    \tencrypt_string=\"\"\n\tfor (( i=0; i<$string_length; i++ ))\n\tdo\n\t\tcurrent_char=${string:$i:1}\n\
    \t\tnew_char_num=$(( $(($(expr \"$current_char\" : \".*\") + 2)) * 2 ))\n\t\t\
    new_char=$(echo \"$(printf \\\\$(printf '%03o' $new_char_num))\")\n\t\tencrypt_string=$encrypt_string$new_char\n\
    \tdone\n\techo $encrypt_string\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Create a variable to\
    \ store the result\n\tlocal encrypted=\"\"\n\t# echo ${#1}\n\t# Loop through the\
    \ string\n\tfor i in $(seq 0 $((${#1} - 1)) ); do\n\t\t# echo \"${1:$i:1}\"\n\t\
    \t# Check if the character is an alphabet\n\t\tif [[ \"${1:$i:1}\" =~ [a-zA-Z]\
    \ ]]; then\n\t\t\t# Obtain the alphabet index\n\t\t\tlocal index=$(echo ${1:$i:1}\
    \ | tr '[:upper:]' '[:lower:]' | ord -a)\n\t\t\t# echo $index\n\t\t\t# Check if\
    \ the alphabet is uppercase or lowercase\n\t\t\tif [[ \"${1:$i:1}\" =~ [A-Z] ]];\
    \ then\n\t\t\t\t# echo \"Upper Case\"\n\t\t\t\t# Check if the index is an alphabet\n\
    \t\t\t\tif ((index + 4 > 122)); then\n\t\t\t\t\t# echo \"dif\"\n\t\t\t\t\t# echo\
    \ \"$((122 - index))\"\n\t\t\t\t\tlocal diff=$((4 - (122 - index)))\n\t\t\t\t\t\
    # echo \"$diff\"\n\t\t\t\t\tlocal temp=$((65 + diff))\n\t\t\t\t\t# echo \"$temp\"\
    \n\t\t\t\t\tlocal encrypted=\"$encrypted\"$(printf '%b' \"$temp\")\n\t\t\t\telse\n\
    \t\t\t\t\t# echo \"add\"\n\t\t\t\t\tlocal temp=$((index + 4))\n\t\t\t\t\t# echo\
    \ \"$temp\"\n\t\t\t\t\tlocal encrypted=\"$encrypted\"$(printf '%b' \"$temp\")\n\
    \t\t\t\tfi\n\t\t\telse\n\t\t\t\t# echo \"Lower Case\"\n\t\t\t\t# Check if the\
    \ index is an alphabet\n\t\t\t\tif ((index + 4 > 122)); then\n\t\t\t\t\t# echo\
    \ \"dif\"\n\t\t\t\t\t# echo \"$((122 - index))\"\n\t\t\t\t\tlocal diff=$((4 -\
    \ (122 - index)))\n\t\t\t\t\t# echo \"$diff\"\n\t\t\t\t\tlocal temp=$\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmphe0fm3gx.sh: line 56: syntax error near unexpected token `}''

    /tmp/tmphe0fm3gx.sh: line 56: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo -n \"$1\" | tr\
    \ 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # write your solution\
    \ here\n  #local encriptedString=\"\"\n  local string=$1\n  local output=\"\"\n\
    \  #echo $string\n  #echo ${#string}\n  for (( i=0; i<${#string}; i++ )); do\n\
    \      #echo \"${string:$i:1}\"\n      output+=`echo \"${string:$i:1}\" | tr 'a-z'\
    \ 'c-za-b'`\n  done\n  echo $output\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # check if any arguments\
    \ passed\n  if [ $# -eq 0 ]; then\n    echo \"No arguments passed!\"\n    exit\
    \ 1\n  fi\n\n  # put each character of the string into an array\n  stringArray=($(echo\
    \ $1 | grep -o .))\n\n  # encrypt array\n  for i in ${!stringArray[@]}; do\n \
    \   char=${stringArray[$i]}\n    newChar=$(printf '%d' \"'$char\")\n    newChar=$((newChar\
    \ + 4))\n    newChar=$(printf \\\\$(printf '%03o' $newChar))\n    stringArray[$i]=$newChar\n\
    \  done\n\n  # print encrypted string\n  echo ${stringArray[@]}\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Enter your code here\n\
    \    echo 'em'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"${1}\" | tr\
    \ '[a-z]' '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  echo \"$@\" | awk '{for(i=1;i<=length($0);i++)printf(\"\
    %c\",(int(substr($0,i,1))+2*2))}'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Write your code here\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpx3ysdqpw.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpx3ysdqpw.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo \"$1\" | tr 'abcdefghijklmnopqrstuvwxyz'\
    \ 'cdefghijklmnopqrstuvwxyzab'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: -1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n# write your code here\n\
    #\n\n# Do this until the length of the string is 0\nwhile [[ $1 != \"\" ]]; do\n\
    \t\n\t# Get the first letter of the string using string indexing\n\t# and remove\
    \ it from the string\n\tletter=${1:0:1}\n\tremainder=${1:1}\n\t\n\t# Print the\
    \ encrypted character\n\techo -n \"$(encryptChar $letter)\"\n\t\n\t# Set the string\
    \ to the remaining part of the string\n\t1=$remainder\n\ndone\n\n# End the line\n\
    echo \n\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n \
    \   [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=25 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=24 encoding='utf-8'>
  timestamp: 1660025024
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # your code here\n\
    \    return 1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    encrypt_var=$1\n  \
    \  echo \"test\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo \"${1}\" | tr 'a-z'\
    \ 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  echo \"$1\" | sed 'y/abcdefghijklmnopqrstuvwxyz/cdefghijklmnopqrstuvwxyzab/'\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: create function\
    \ that takes a string as input and outputs an encrypted string\n\t# with the alphabet\
    \ being rotated.\n\techo \"$1\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # exit early if there\
    \ is no input\n    if [ -z \"$1\" ]; then\n        echo \"Please provide a string!\"\
    \n        exit 1\n    fi\n\n    # grab the first letter and the rest of the string\n\
    \    # the leading space is to avoid double negation of the first letter,\n  \
    \  # which is the only letter to check for upper or lowercase\n    local firstLetter=\"\
    ${1:0:1}\"\n    local remainingString=\"${1:1}\"\n\n    # check if the first letter\
    \ is uppercase, then rotate it and\n    # remove the uppercase flag\n    if [[\
    \ \"$firstLetter\" =~ [A-Z] ]]; then\n        rotatedLetter=$(rotateLetter \"\
    $firstLetter\" | tr '[:upper:]' '[:lower:]')\n    # check if the first letter\
    \ is lowercase, then rotate it\n    elif [[ \"$firstLetter\" =~ [a-z] ]]; then\n\
    \        rotatedLetter=$(rotateLetter \"$firstLetter\")\n    # if the letter is\
    \ not alphabetical, simply echo it\n    else\n        rotatedLetter=\"$firstLetter\"\
    \n    fi\n\n    # if there are more letters in the string, run the function on\
    \ the remaining letters\n    if [ -n \"$remainingString\" ]; then\n        remaining=$(encrypt\
    \ \"$remainingString\")\n        # echo the rotatated first letter and the remainder\
    \ of the string\n        echo \"$rotatedLetter$remaining\"\n    # otherwise just\
    \ echo the first letter\n    else\n        echo \"$rotatedLetter\"\n    fi\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpmjp_1svo.sh: line 36: rotateLetter: command not found

    /tmp/tmpmjp_1svo.sh: line 36: rotateLetter: command not found

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    #Write your function\
    \ here\n    # I have given you a template below\n    # A string with lowercase\
    \ alphabets\n    alphabets=\"abcdefghijklmnopqrstuvwxyz\"\n    encrypted_string=\"\
    \"\n    # Traverse each character of input string\n    # If a letter of 'alphabets'\
    \ is found in the input string,\n    # find the index of the alphabet in the string\n\
    \    # Add the index with 2 and then multiply with 2\n    # and add the resultant\
    \ letter with 'encrypted_string'\n    for i in $(seq 0 $((${#1}-1)))\n    do\n\
    \        char=\"${1:$i:1}\"\n        if [[ $alphabets =~ $char ]]\n        then\n\
    \            index=$(expr index \"$alphabets\" \"$char\")\n            index=$(expr\
    \ $index + 2)\n            index=$(expr $index \\* 2)\n            char=$(expr\
    \ substr \"$alphabets\" $index 1)\n        fi\n        encrypted_string=\"$encrypted_string$char\"\
    \n    done\n    echo \"$encrypted_string\"\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n   echo $1 | tr e-za-d\
    \ c-za-b\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 0
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # initialize a string\
    \ and iniate it with the alphabet lowercase characters\n  local alphabet=\"abcdefghijklmnopqrstuvwxyz\"\
    \n  # Get the length of the input string\n  local length=${#1}\n  # Initialize\
    \ a string and iniate it with empty characters\n  local encrypted=\"\"\n  # Iterate\
    \ over each character in the input string\n  for ((i=0; i<length; i++)); do\n\
    \    # Get the current character\n    local char=${1:i:1}\n    # Find the index\
    \ of the character in the alphabet\n    local index=$(echo $alphabet | awk -v\
    \ char=$char '{ for (i=1; i<=length($alphabet); i++) { if (char == substr($alphabet,\
    \ i, 1)) { print i; break; } } }')\n    # Shift the character by two multiplied\
    \ to two places\n    local shifted=$((index+4))\n    # If the shifted index is\
    \ larger than 26, substract 26\n    if [[ $shifted -gt 26 ]]; then\n      shifted=$((shifted-26))\n\
    \    fi\n    # Add the shifted character to the encrypted string\n    encrypted+=$(echo\
    \ $alphabet | awk -v shifted=$shifted '{ print substr($alphabet, shifted, 1);\
    \ }')\n  done\n  # Print the encrypted string\n  echo $encrypted\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # TODO: your code here!\n\
    \    echo $1 | tr '[A-Za-z]' '[C-ZA-Bc-za-b]'\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: -1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\ttr 'a-z' 'c-za-b'\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=3 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=18 encoding='utf-8'>
  timestamp: 1660025024
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Create an empty string\n\
    \tencryptedString=\"\"\n\t# Create an array\n\tarr=()\n\t\n\t# Load the array\
    \ with ASCII values of each character in $1\n\tfor (( i=0; i<${#1}; i++ )); do\n\
    \t\tarr+=($(printf '%d' \"'${1:$i:1}\"))\n\tdone\n\t\n\t# Shifts the ASCII values\n\
    \tfor (( j=0; j<${#arr[@]}; j++ )); do\n\t\t((arr[j] +=  ${#1} * 2))\n\tdone\n\
    \t\n\t# Convert the ASCII values to characters and load the string\n\tfor (( k=0;\
    \ k<${#arr[@]}; k++ )); do\n\t\tencryptedString+=$(printf \\\\$(printf '%03o'\
    \ ${arr[k]}))\n\tdone\n\t\n\t# Print the string\n\techo $encryptedString\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    alphabet=abcdefghijklmnopqrstuvwxyz\n\
    \    # Fill the above alphabet into an array\n    alpha_arr=($alphabet)\n    #\
    \ Get the length of the alphabet\n    alpha_len=${#alpha_arr[@]}\n    # Iterate\
    \ over the input string to encrypt it\n    output=\"\"\n    for (( i=0; i<${#1};\
    \ i++ )); do\n        # Get the index of the letter being shifted by 2\n     \
    \   char_index=$(printf '%d' \"'${1:$i:1}\")\n        char_index=$((char_index-97))\n\
    \        # Check if the character is a space\n        if [ $char_index -eq -65\
    \ ]; then\n            output=\"$output \"\n        # Check if the character is\
    \ the letter 'z'\n        elif [ $char_index -eq 25 ]; then\n            output=\"\
    $output\"${alpha_arr[1]}\n        # Check if the character is the letter 'y'\n\
    \        elif [ $char_index -eq 24 ]; then\n            output=\"$output\"${alpha_arr[0]}\n\
    \        # Otherwise shift the character by 2\n        else\n            output=\"\
    $output\"${alpha_arr[$((char_index+2))]}\n        fi\n    done\n    echo $output\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  if [ $# -eq 0 ]; then\n\
    \    exit 1\n  fi\n  current_word=$1\n\n  # the word from 0 till the last second\
    \ word\n  first_word=${current_word:0:$((${#current_word}-1))}\n  # the last word\
    \ of the given word\n  last_word=${current_word:$((${#current_word}-1)):$((${#current_word}))}\n\
    \n  # the letter after a\n  letter_after_a=`echo $((${#current_word}+1)) | bc`\n\
    \  # the letter after z\n  letter_after_z=`echo $((${#current_word}+2)) | bc`\n\
    \n  # if the last word is equal to the letter after a,\n  # replace it with c\n\
    \  if [ $last_word = $letter_after_a ]; then\n    last_word=\"c\"\n  # if the\
    \ last word is equal to the letter after z,\n  # replace it with b\n  elif [ $last_word\
    \ = $letter_after_z ]; then\n    last_word=\"b\"\n  # else, shift two places to\
    \ the right\n  else\n    last_word=`echo $((${last_word}+2)) | bc`\n  fi\n\n \
    \ # combine the two words\n  encrypted_word=\"$first_word$last_word\"\n  echo\
    \ $encrypted_word\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # your code goes here\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp372g0_vj.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp372g0_vj.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # use the translate\
    \ utility to do the heavy lifting\n    string=$(echo $1 | tr '[a-z]' '[c-za-b]')\n\
    \    echo $string\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\ta=$(echo \"$1\" | tr\
    \ '[a-z]' '[c-za-b]')\n\techo $a\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # The alphabet, in\
    \ order, is:\n    # a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t,\
    \ u, v, w, x, y, z\n    # The value that must be subtracted from the ASCII value\
    \ of a character\n    # to arrive at the ASCII value of its alphabetical index,\
    \ is:\n    # 97\n    # The equation is:\n    # index = ( ( ( (ASCII character\
    \ value) - 97 ) + (shift value) ) % 26 ) + 97\n    #\n    # The value that should\
    \ be subtracted from the ASCII value of a character\n    # to arrive at the ASCII\
    \ value of its alphabetical index, is:\n    # 97\n    # The shift value is:\n\
    \    # 2*2=4\n    # The equation is:\n    # index = ( ( ( (ASCII character value)\
    \ - 97 ) + 4 ) % 26 ) + 97\n    #\n    # Then, we can use a substitution command,\
    \ to substitute all letters\n    # with their shifted values, and leave other\
    \ characters alone.\n    #echo \"$1\" | tr \"[a-z]\" \"[efghijklmnopqrstuvwxyzabcd]\"\
    \n    echo \"$1\" | tr '[a-z]' '[\\x61-\\x7a]'\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Create an alphabet\
    \ list\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    # Convert the alphabet\
    \ list to an array\n    alphabet_array=($alphabet)\n    # Create an empty array\
    \ to later hold the encrypted message\n    encrypted_array=()\n    # Loop through\
    \ each letter of the passed in string, $1, and encrypt it.\n    for (( i=0; i<${#1};\
    \ i++ )); do\n        # Get the alphabet index of the current letter of the string\
    \ $1\n        alphabet_index=`expr index \"$alphabet\" ${1:$i:1}`\n        # Add\
    \ 2 to the alphabet index. This will be our new index.\n        alphabet_index=`expr\
    \ $alphabet_index + 2`\n        # Get the alphabet letter of the new index\n \
    \       encrypted_letter=${alphabet_array[$alphabet_index]}\n        # Add the\
    \ encrypted letter to the encrypted_array\n        encrypted_array+=($encrypted_letter)\n\
    \    done\n    # Join the encrypted array and print it out\n    echo \"${encrypted_array[@]}\"\
    \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # use $1. The string\
    \ you're inputting. \n    echo $1 | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n  \
    \  encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # your code here\n\
    \    echo \"hi\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tif [ $# -lt 1 ]; then\n\
    \t\techo 'no string provided'\n\t\treturn 1\n\tfi\n\tif [ $# -gt 1 ]; then\n\t\
    \techo 'Too many arguments provided'\n\t\treturn 1\n\tfi\n\t\n\tchar_list=\"abcdefghijklmnopqrstuvwxyz\"\
    \n\tnew_string=\"\"\n\t\n\tstring=$1\n\tstring=$(echo $string | tr [A-Z] [a-z])\n\
    \t\n\tfor (( i=0; i<${#string}; i++ )); do\n\t\tnew_string+=${char_list:$(( (${char_list%%${string:$i:1}*}+2)*2\
    \ )):1}\n\tdone\n\t\n\techo $new_string\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"$1\" |\n   \
    \ sed -e 's/\\(.\\)/\\1 /g' |\n    tr 'a-z' 'c-za-b' |\n    tr 'A-Z' 'C-ZA-B'\
    \ |\n    tr -d ' '\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # first we create a\
    \ variable that holds the alphabet\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\
    \n    # we then create a variable to store the encrypted string\n    encrypted=\"\
    \"\n    # we then loop through every character in the string\n    for ((i=0; i<${#1};\
    \ i++)); do\n        # for each character in the string we create a temporary\
    \ \n        # variable that holds the index of the current character\n       \
    \ index=`expr index \"$alphabet\" ${1:$i:1}`\n        # we then add the index\
    \ of the current character to the\n        # current value of 'i' and multiply\
    \ the result by 2\n        # we then store the result of the above expression\
    \ in a new\n        # variable.\n        offset=`expr $i \\* 2`\n        # we\
    \ then add the 'offset' to the index and store the result\n        # in a new\
    \ variable\n        newIndex=`expr $index + $offset`\n        # we then encrypt\
    \ the character at the new index in the \n        # alphabet. The encrypted character\
    \ is added to the string\n        # in the 'encrypted' variable\n        encrypted=\"\
    $encrypted${alphabet:$newIndex:1}\"\n    done\n    # finally we return the encrypted\
    \ string\n    echo $encrypted\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n   \n    local string=$1\n\
    \    local temp\n    local i\n    local count=1\n    local char\n\n    # get char\
    \ length of input string\n    local len=${#string}\n\n    # loop over char length\
    \ of string\n    for (( i=0; i<len; i++ )); do\n        # convert to uppercase\n\
    \        char=${string:$i:1}\n        char=$(echo \"$char\" | tr [a-z] [A-Z])\n\
    \        temp=$(ord \"$char\")\n\n        # convert to number\n        char=$((\
    \ char + (2*count) ))\n\n        # convert back to character\n        temp=$(chr\
    \ \"$char\")\n        echo -n \"$temp\"\n        count=$(( count + 1 ))\n    done\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpa64e1o83.sh: line 33: ord: command not found

    /tmp/tmpa64e1o83.sh: line 39: chr: command not found

    /tmp/tmpa64e1o83.sh: line 33: ord: command not found

    /tmp/tmpa64e1o83.sh: line 39: chr: command not found

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # The alphabet we will\
    \ be using for encryption\n    alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n    #\
    \ Variable that will store our encrypted message\n    encrypted=\"\"\n    # Loop\
    \ through the message\n    for ((i=0; i<${#1}; i++)); do\n        # The first\
    \ letter of the message\n        char=${1:$i:1}\n        # Check if the character\
    \ is a lowercase letter\n        if [[ \"$char\" =~ [a-z] ]]; then\n         \
    \   # Rotate the alphabet\n            alphabet=\"${alphabet:2}${alphabet:0:2}\"\
    \n            # Find the position of the letter in the alphabet\n            pos=`expr\
    \ index \"$alphabet\" \"$char\"`\n            # The letter after rotation\n  \
    \          char=${alphabet:$pos-1:1}\n        fi\n        # Append the char to\
    \ the end of the encrypted message\n        encrypted+=$char\n    done\n    #\
    \ Return the encrypted message\n    echo $encrypted\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tlocal string=$1\n\tfor\
    \ i in $(seq 0 $((${#string} - 1))); do\n\t\tlocal add=$(($i * 2))\n\t\tlocal\
    \ char=${string:$i:1}\n\t\tlocal ord=$(ord $char)\n\t\tlocal new_ord=$(($ord +\
    \ $add))\n\t\tif [ $new_ord -gt 122 ]; then\n\t\t\tnew_ord=$(($new_ord - 26))\n\
    \t\tfi\n\t\techo -n $(chr $new_ord)\n\tdone\n\techo\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpj8kmsn99.sh: line 22: ord: command not found

    /tmp/tmpj8kmsn99.sh: line 27: chr: command not found

    /tmp/tmpj8kmsn99.sh: line 22: ord: command not found

    /tmp/tmpj8kmsn99.sh: line 27: chr: command not found

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    if [ -z \"$1\" ]; then\n\
    \        return 0\n    fi\n    ENCRYPTED_TEXT=$(echo \"$1\" | tr 'a-z' 'c-za-b')\n\
    \    echo \"$ENCRYPTED_TEXT\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # $string is the argument\n\
    \    string=$1\n    new_string=\"\"\n    # Iterate through the letters in $string.\n\
    \    for (( i=0; i<${#string}; i++ )); do\n        # $char is the current letter\n\
    \        char=${string:$i:1}\n        # ASCII value for letter is found with 'expr\
    \ ord $char'\n        if [[ $char =~ [a-z] ]]; then\n            ascii=$(expr\
    \ ord $char)\n            # 104 is the ASCII value for 'h'\n            if [[\
    \ $ascii -lt 104 ]]; then\n                char=$(expr 104 - $ascii)\n       \
    \         new_char=$(expr 26 - $char)\n                new_string=$new_string$(chr\
    \ $new_char)\n            else\n                # 2 places down shifted 2 times\
    \ means 4\n                ascii=$(expr $ascii - 4)\n                new_string=$new_string$(chr\
    \ $ascii)\n            fi\n        else\n            new_string=$new_string$char\n\
    \        fi\n    done\n    echo $new_string\n}\n\ncandidate() {\n    encrypt \"\
    $@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[\
    \ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") =\
    \ \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: unexpected argument \u2018h\u2019\nexpr: syntax error:\
    \ missing argument after \u2018-\u2019\nexpr: syntax error: missing argument after\
    \ \u2018-\u2019\n/tmp/tmp7snaq044.sh: line 32: chr: command not found\nexpr: syntax\
    \ error: unexpected argument \u2018i\u2019\nexpr: syntax error: missing argument\
    \ after \u2018-\u2019\nexpr: syntax error: missing argument after \u2018-\u2019\
    \n/tmp/tmp7snaq044.sh: line 32: chr: command not found\n"
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # replace this\n  \
    \  echo $1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    declare -i i=0\n  \
    \  declare -i len=$(expr length \"$1\")\n    local result=''\n    local c=''\n\
    \    local asc=0\n    local asc_offset=0\n    local asc_result=0\n    while [\
    \ $i -lt $len ]; do\n        c=${1:$i:1}\n        asc=$(printf \"%d\" \"'$c\"\
    )\n        asc_offset=$(expr $asc - 97)\n        if [ $asc_offset -ge 0 -a $asc_offset\
    \ -le 25 ]; then\n            asc_result=$(expr $asc + \\( $asc_offset \\* 2 \\\
    ) + 2)\n            if [ $asc_result -gt 122 ]; then\n                asc_result=$(expr\
    \ $asc_result - 26)\n            fi\n            result+=$(printf \"\\\\$(printf\
    \ '%03o' $asc_result)\")\n        else\n            result+=$c\n        fi\n \
    \       i=$(expr $i + 1)\n    done\n    echo $result\n}\n\ncandidate() {\n   \
    \ encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\"\
    \ ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# TODO: Place code here\n\
    \techo \"$1\" | tr \"a-z\" \"c-za-b\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tlocal -n encrypt_mappings=$(mappings\
    \ encrypt)\n\techo $1 | tr $(echo ${!encrypt_mappings[@]}) $(echo ${encrypt_mappings[@]})\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpv6ze73qa.sh: line 18: mappings: command not found

    /tmp/tmpv6ze73qa.sh: line 18: local: `'': not a valid identifier

    tr: missing operand

    Try ''tr --help'' for more information.

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    if [[ -z $1 ]]; then\n\
    \        echo \"Please input a string\"\n        return 1\n    fi\n    echo \"\
    $1\" | tr 'a-z' 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Save the encrypted\
    \ string in encrypted_string\n\tencrypted_string=\"\"\n\t# loop through each character\
    \ of the string\n\tfor ((i=0; i<${#1}; i++)); do\n\t\t# Save each character\n\t\
    \tchar=${1:$i:1}\n\t\t# Append each character to the encrypted string\n\t\tencrypted_string+=$(rotate\
    \ $char)\n\tdone\n\t# Show the encrypted string\n\techo $encrypted_string\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbq7exkad.sh: line 25: rotate: command not found

    /tmp/tmpbq7exkad.sh: line 25: rotate: command not found

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\nlocal value=\"${1}\"\n\
    local alpha=\"abcdefghijklmnopqrstuvwxyz\"\n#local alpha=\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\
    \n\necho $value | fold -w1 |\nwhile read i\ndo\n  #echo $i\n  for(( j=0; j<${#alpha};\
    \ j++ ))\n  do\n    if [ \"$i\" == \"${alpha:$j:1}\" ]\n    then\n      echo -n\
    \ \"${alpha:$j+4:1}\"\n    fi\n  done\ndone\necho \"\"\n\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # INSERT CODE HERE\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpry1hdnl2.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpry1hdnl2.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    res=''\n    for ((\
    \ i=0; i<${#1}; i++ )); do\n        char=\"${1:$i:1}\"\n        newChar=\"$(findNextChar\
    \ $char)\"\n        res+=$newChar\n    done\n    echo $res\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp38_4qokq.sh: line 21: findNextChar: command not found

    /tmp/tmp38_4qokq.sh: line 21: findNextChar: command not found

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    encrypt_string=\"\"\
    \n    for (( i=0; i<${#1}; i++ )); do\n        encrypt_string+=$(printf \"%c\"\
    \ \"$(( ${1:$i:1} + $(( $i+1 )) * 2 ))\")\n    done\n    echo $encrypt_string\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tchar=(a b c d e f g h\
    \ i j k l m n o p q r s t u v w x y z)\n\tlet M=${#char[@]}\n\tlet m=0\n\tlet\
    \ tmp=0\n\tlet tmp1=0\n\tlet tmp2=0\n\t#rotate 1\n\tfor ((i=0; i<M; i++)); do\n\
    \t\tlet m=i+2\n\t\tif [ $m -ge $M ]; then\n\t\t\tlet m=m-M\n\t\tfi\n\t\ttmp=${char[$i]}\n\
    \t\tchar[$i]=${char[$m]}\n\t\tchar[$m]=$tmp\n\tdone\n\t#rotate 2\n\tfor ((i=0;\
    \ i<M; i++)); do\n\t\tlet m=i+4\n\t\tif [ $m -ge $M ]; then\n\t\t\tlet m=m-M\n\
    \t\tfi\n\t\ttmp=${char[$i]}\n\t\tchar[$i]=${char[$m]}\n\t\tchar[$m]=$tmp\n\tdone\n\
    \t#main\n\tfor ((i=0; i<${#1}; i++)); do\n\t\tfor ((j=0; j<M; j++)); do\n\t\t\t\
    if [ ${1:$i:1} = ${char[$j]} ]; then\n\t\t\t\tlet tmp1=j+2\n\t\t\t\tif [ $tmp1\
    \ -ge $M ]; then\n\t\t\t\t\tlet tmp1=tmp1-M\n\t\t\t\tfi\n\t\t\t\techo -n ${char[$tmp1]}\n\
    \t\t\tfi\n\t\tdone\n\tdone\n\techo\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\
    \nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tprintf \"%s\" \"$1\"\
    \ | tr \"abcdefghijklmnopqrstuvwxyz\" \"cdefghijklmnopqrstuvwxyzab\"\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    if [[ $# -eq 0 ]];\
    \ then\n        echo \"Please pass in a string as the first argument of this function\"\
    \n        return 1\n    fi\n    echo $1 | tr $(printf {a..z} | tr -d \"acdegilmnoprstuw\"\
    ) $(printf {c..z}abc | tr -d \"acdegilmnoprstuw\")\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: missing operand after \u2018b\u2019\nTwo strings must be given when\
    \ translating.\nTry 'tr --help' for more information.\n"
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    rot=$1\n    shifted=$(\n\
    \        echo \"${rot//[a-z]/ }\" |\n        tr ' ' '\\n' |\n        awk '{print\
    \ $1!=l?a++:a;print;l=$1}' |\n        tr '\\n' ' ' |\n        awk '{print $1+2}'\
    \ |\n        tr '\\n' ' '\n    )\n    shift=1\n    input=$1\n    while [ $shift\
    \ -le ${#shifted} ]; do\n        input=${input//${shifted:$shift-1:1}/${shifted:$shift:1}}\n\
    \        shift=$((shift+2))\n    done\n    echo $input\n}\n\ncandidate() {\n \
    \   encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tmsg=\"$1\"\n\ttranslated_msg=\"\
    \"\n\tfor (( i=0; i<${#msg}; i++ )); do\n\t\tchar=\"${msg:$i:1}\"\n\t\trotated=$(echo\
    \ $(( 97 + (($(printf \"%d\" \"'$char\") - 97 + 2*$i) % 26) )))\n\t\ttranslated_msg=\"\
    $translated_msg\"$(printf \\\\$(printf '%03o' $rotated))\n\tdone\n\techo \"$translated_msg\"\
    \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\n# First, create an array\
    \ of numbers that match up with the positions of letters in the alphabet.\n# Numbers\
    \ in this array will be used to rotate the alphabet.\nnums=( 0 1 2 3 4 5 6 7 8\
    \ 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 )\n\n# Next, create an array\
    \ of letters in the alphabet.\nletters=( a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z )\n\n# Next, create a for loop to iterate through each character\
    \ in the string\nfor (( i=0; i<${#1}; i++ )); do\n\n# Create a variable to hold\
    \ the letter that is currently being iterated over\nletter=${1:$i:1}\n\n# Create\
    \ a variable to hold the position of the letter in the alphabet\nindex=`expr ${#letters[@]}\
    \ - 1`\n\n# Create a while loop to find the position of the letter in the alphabet\n\
    while [[ ${nums[$index]} -ne ${letter} ]]; do\n  index=`expr $index - 1`\ndone\n\
    \n# Create a new variable to hold the position of the letter in the alphabet after\
    \ it is shifted\nnew_letter=`expr ${index} - $2`\n\n# If the position of the letter\
    \ is out of bounds, loop back around to the beginning\nif [[ ${new_letter} -lt\
    \ 0 ]]; then\n  new_letter=`expr ${new_letter} + ${#letters[@]}`\nfi\n\n# Concatenate\
    \ the encrypted string with the shifted letter\nenc_string+=\"${letters[$new_letter]}\"\
    \n\ndone\n\n# Return the encrypted string\necho \"${enc_string}\"\n\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: "expr: syntax error: missing argument after \u2018-\u2019\nexpr: syntax\
    \ error: missing argument after \u2018-\u2019\n"
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Don't touch this\
    \ stuff\n    local input_string=\"$1\"\n    local -i offset=\"$2\"\n    local\
    \ -i i\n    local -i input_length\n    local output_string=\"\"\n    # End of\
    \ non-editable code\n    input_length=\"${#input_string}\"\n    offset=$((offset\
    \ % 26))\n    if [ $offset -lt 0 ]; then\n        offset=$((offset + 26))\n  \
    \  fi\n    for ((i=0; i<input_length; i++)); do\n        input_char=\"${input_string:$i:1}\"\
    \n        input_char_ascii=$(printf \"%d\" \"'$input_char\")\n        output_char_ascii=$((input_char_ascii\
    \ + offset))\n        if [ $output_char_ascii -gt 122 ]; then\n            output_char_ascii=$((output_char_ascii\
    \ - 26))\n        fi\n        output_char=$(printf \\\\$(printf \"%o\" \"$output_char_ascii\"\
    ))\n        output_string=\"$output_string$output_char\"\n    done\n    echo \"\
    $output_string\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Your code here\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpp4c_rig9.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpp4c_rig9.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    declare -a alphabet=(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z)\n    declare -a crypted\n\
    \    declare -a encrypted\n    unset crypted\n    unset encrypted\n    if [ $#\
    \ -eq 0 ]; then\n        echo \"Please enter a string to encrypt.\"\n        exit\
    \ 0\n    else\n        i=0\n        while [ $i -lt ${#1} ]; do\n            letter=$(echo\
    \ \"${1:$i:1}\")\n            found=0\n            num=0\n            while [\
    \ $found -eq 0 ]; do\n                if [ \"$letter\" == \"${alphabet[$num]}\"\
    \ ]; then\n                    crypted[$i]=$(echo \"${alphabet[$num + 2]}\")\n\
    \                    found=1\n                fi\n                num=$(($num\
    \ + 1))\n            done\n            i=$(($i + 1))\n        done\n        echo\
    \ \"${crypted[@]}\"\n    fi\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  abc=\"abcdefghijklmnopqrstuvwxyz\"\
    \n  new=$(echo \"$abc\" | tail -c +3)\n  new=\"$new\"\"$abc\"\n  new=$(echo \"\
    $new\" | tail -c +27)\n  new=$(echo \"$new\" | head -c 26)\n  echo \"$1\" | tr\
    \ \"$abc\" \"$new\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t#Get length of string\n\
    \tlocal stringLength=$((${#1}-1))\n\t#convert string to array\n\tlocal index=-1\n\
    \tlocal stringArray=\n\twhile read -N 1 -d '' letter; do\n\t\tstringArray[$index]=$letter\n\
    \t\tindex=$(($index+1))\n\tdone < <(printf '%s\\0' \"$1\")\n\t#iterate through\
    \ array and get char code\n\tfor (( i=0; i<=stringLength; i++ )); do\n\t\tletter=${stringArray[$i]}\n\
    \t\tletter=$(printf '%d' \"'$letter\")\n\t\t#if char is uppercase shift two places\
    \ left\n\t\tif [ $letter -gt 64 ] && [ $letter -lt 91 ]; then\n\t\t\tletter=$(($letter-2))\n\
    \t\t\tif [ $letter -lt 65 ]; then\n\t\t\t\tletter=$(($letter+26))\n\t\t\tfi\n\t\
    \t#if char is lowercase shift two places right\n\t\telif [ $letter -gt 96 ] &&\
    \ [ $letter -lt 123 ]; then\n\t\t\tletter=$(($letter+2))\n\t\t\tif [ $letter -gt\
    \ 122 ]; then\n\t\t\t\tletter=$(($letter-26))\n\t\t\tfi\n\t\tfi\n\t\t#convert\
    \ char code back to letter\n\t\tstringArray[$i]=$(printf \\\\$(printf '%03o' $letter))\n\
    \tdone\n\t#convert array back to string\n\techo -n \"${stringArray[@]}\"\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmp8sgcg9q6.sh: line 45: warning: command substitution: ignored null
    byte in input

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tif [ $# -ne 1 ]; then\n\
    \t\techo \"Function encrypt takes exactly one argument.\"\n\t\treturn 1\n\tfi\n\
    \t\n\tstring=$1\n\t\n\tstring=$(echo \"$string\" | tr \"abcdefghijklmnopqrstuvwxyz\"\
    \ \"cdefghijklmnopqrstuvwxyzab\")\n\tstring=$(echo \"$string\" | tr \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \ \"CDEFGHIJKLMNOPQRSTUVWXYZAB\")\n\t\n\techo \"$string\"\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tstring=$1\n\tIFS=\n\t\
    for char in $string\n\tdo\n\t\tcase $char in\n\t\t\ta) echo -n \"c\";;\n\t\t\t\
    b) echo -n \"d\";;\n\t\t\tc) echo -n \"e\";;\n\t\t\td) echo -n \"f\";;\n\t\t\t\
    e) echo -n \"g\";;\n\t\t\tf) echo -n \"h\";;\n\t\t\tg) echo -n \"i\";;\n\t\t\t\
    h) echo -n \"j\";;\n\t\t\ti) echo -n \"k\";;\n\t\t\tj) echo -n \"l\";;\n\t\t\t\
    k) echo -n \"m\";;\n\t\t\tl) echo -n \"n\";;\n\t\t\tm) echo -n \"o\";;\n\t\t\t\
    n) echo -n \"p\";;\n\t\t\to) echo -n \"q\";;\n\t\t\tp) echo -n \"r\";;\n\t\t\t\
    q) echo -n \"s\";;\n\t\t\tr) echo -n \"t\";;\n\t\t\ts) echo -n \"u\";;\n\t\t\t\
    t) echo -n \"v\";;\n\t\t\tu) echo -n \"w\";;\n\t\t\tv) echo -n \"x\";;\n\t\t\t\
    w) echo -n \"y\";;\n\t\t\tx) echo -n \"z\";;\n\t\t\ty) echo -n \"a\";;\n\t\t\t\
    z) echo -n \"b\";;\n\t\t\t*) echo -n \"$char\";;\n\t\tesac\n\tdone\n\techo\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"$1\" | tr '[a-z]'\
    \ '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    str=$1\n    # Encrypt/Decrypt\
    \ the string\n    rot=$(echo -e $str | tr '[:upper:]' '[:lower:]' | tr '[a-z]'\
    \ '[c-za-b]')\n    echo $rot\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset\
    \ -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # your code here\n}\n\
    \ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpula4ryrj.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpula4ryrj.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: -1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  alph=abcdefghijklmnopqrstuvwxyz\n\
    \  new_alph=${alph:2}${alph:0:2}\n  tr \"$alph\" \"$new_alph\"\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=49 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=34 encoding='utf-8'>
  timestamp: 1660025025
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tstring=\"$1\"\n\tfor\
    \ i in $(seq 1 ${#string}); do\n\t\tc=${string:$i-1:1}\n\t\tc=`printf '%d' \"\
    '$c\"`\n\t\tc=$((c-97))\n\t\tc=$(((c+2)%26))\n\t\tc=$((c+97))\n\t\tc=`printf \"\
    \\\\$(printf '%03o' \"$c\")\"`\n\t\tstring=\"${string:0:$i-1}$c${string:$i}\"\n\
    \tdone\n\techo \"$string\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t#echo $1\n\tcharArray=$(echo\
    \ $1 | fold -w1)\n\t#echo $charArray\n\tfor i in $charArray; do\n\t\t#echo $i\n\
    \t\tint=$(printf '%d' \"'$i\")\n\t\t#echo $int\n\t\tnewint=$((int+4))\n\t\tnewchar=$(printf\
    \ '\\\\\\x%x' $newint)\n\t\t#echo $newchar\n\t\tnewchar=$(echo -en $newchar)\n\
    \t\t#echo $newchar\n\t\tencodedStr=$encodedStr$newchar\n\tdone\n\techo $encodedStr\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpd_nlkcus.sh: line 26: printf: missing hex digit for \x

    /tmp/tmpd_nlkcus.sh: line 26: printf: missing hex digit for \x

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  str_length=${#1}\n  alpha=\"\
    abcdefghijklmnopqrstuvwxyz\"\n  echo \"$1\" | tr \"${alpha:0:26}\" \"${alpha:2:26}${alpha:0:2}\"\
    \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # Implement this function\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpoj32e1qh.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpoj32e1qh.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    if [[ -z $1 ]]; then\n\
    \        return 1\n    fi\n    local str=$1\n    local res=''\n    local len=${#str}\n\
    \    for (( i=0; i<$len; i++ )); do\n        res=$res$(alphabet_2 $1)\n    done\n\
    \    echo $res\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpbbtp5bwb.sh: line 25: alphabet_2: command not found

    /tmp/tmpbbtp5bwb.sh: line 25: alphabet_2: command not found

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Append the alphabet\
    \ to itself so that we can index from\n    # the last letter of the alphabet and\
    \ still get a valid letter\n    # The following command concatenates the alphabet\
    \ to itself\n    alphabet2=$(echo $alphabet$alphabet)\n    # Convert the string\
    \ argument to lowercase\n    # The following command converts the input to lowercase\n\
    \    # 'tr' is short for translate\n    # The first argument is the set of characters\
    \ to translate from\n    # The second argument is the set of characters to translate\
    \ to\n    # The following command translates all characters in the input to lowercase\n\
    \    $1 = $(echo $1 | tr [:upper:] [:lower:])\n    # Go through each character\
    \ in the argument\n    # The following command goes through each character in\
    \ $1\n    # 'xargs' takes the output of the command before it, and feeds it to\
    \ the command after it\n    # The following command executes the lambda function\
    \ for each character in $1\n    echo $1 | xargs -n1 -I{} sh -c '\n        # The\
    \ following command calculates the index of the character in the alphabet\n  \
    \      char_index=$(expr index $alphabet {})\n        # Calculate the corresponding\
    \ index for the encrypted character\n        # The following command adds the\
    \ appropriate offset to the character index\n        # 'expr' is a command that\
    \ calculates the following expression\n        # 'expr ${char_index} + $char_index\
    \ * 2' adds the appropriate offset\n        # 'expr $char_index * 2' adds the\
    \ offset\n        # 'expr $char_index +' adds the offset to the index\n      \
    \  # 'expr ${char_index} + $char_index * 2' adds the appropriate offset\n    \
    \    encrypted_char_index=$(expr ${char_index} + $char_index * 2)\n        # Get\
    \ the encrypted character from the alphabet\n        # The following command gets\
    \ the encrypted character from the alphabet2\n        # 'cut' takes in the output\
    \ of the command before it and cuts it up based on the second argument\n     \
    \   # The second argument of 'cut' says to cut up the string on the character\
    \ specified by the third argument\n        # The third argument is the index of\
    \ the character to get\n        # 'cut' outputs a string with the character at\
    \ that index\n        encrypted_char=$(echo $\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp73fme22y.sh: line 49: unexpected EOF while looking for matching
    `''''

    /tmp/tmp73fme22y.sh: line 70: syntax error: unexpected end of file

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tstring=$1\n\tnew_string=\"\
    \"\n\tlen=${#string}\n\tfor ((i=0; i<$len; i++)); do\n\t\tchar=${string:$i:1}\n\
    \t\tascii_code=$(printf '%d' \\'$char)\n\t\tnew_ascii_code=$((ascii_code+2*2))\n\
    \t\tnew_char=$(printf \\\\$(printf '%03o' $new_ascii_code))\n\t\tnew_string=$new_string$new_char\n\
    \tdone\n\techo $new_string\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo $1 | tr '[a-z]'\
    \ '[c-za-b]'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025019
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    declare -i i\n    new_message=\"\
    \"\n    for i in $(seq 0 $((${#1} - 1))); do\n        code=$(printf \"%d\" \"\
    '${1:$i:1}\")\n        if [[ $code -ge 97 && $code -le 122 ]]; then\n        \
    \    new_code=$((($code - 97 + 2) % 26 + 97))\n        elif [[ $code -ge 65 &&\
    \ $code -le 90 ]]; then\n            new_code=$((($code - 65 + 2) % 26 + 65))\n\
    \        else\n            new_code=$code\n        fi\n        new_message=\"\
    $new_message$(printf \"\\x$(printf %x $new_code)\")\"\n    done\n    echo \"$new_message\"\
    \n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n   echo \"$1\" | tr 'A-Za-z'\
    \ 'C-ZA-Bc-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # TODO YOUR CODE HERE\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjgfibmtm.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpjgfibmtm.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo $1 | tr 'a-z'\
    \ 'c-za-b'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: -1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# takes the first character\
    \ off $1 and stores in $first_char\n\tfirst_char=${1:0:1}\n\t\n\t# takes $1 and\
    \ removes the first character and stores in $rest_of_string\n\trest_of_string=${1:1}\n\
    \t\n\t# calls encrypt on $rest_of_string, storing the output in $concat\n\tconcat=$(encrypt\
    \ $rest_of_string)\n\t\n\t# concatenates the output of encrypting $first_char\
    \ with $concat and stores in $return_string\n\treturn_string=\"$(encode $first_char)$concat\"\
    \n\t\n\t# returns the value of $return_string\n\techo $return_string\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Timeout
  stderr: <_io.TextIOWrapper name=23 encoding='utf-8'>
  stdout: <_io.TextIOWrapper name=8 encoding='utf-8'>
  timestamp: 1660025025
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\techo \"encrypting $1\"\
    \n\t\n\t# create a local array\n\ta=()\n\t\n\t# create a length variable\n\tlength=${#1}\n\
    \t\n\t# loop through length and add each letter to the array\n\tfor (( i=0; i<$length;\
    \ i++ )); do\n\t\tletter=${1:$i:1}\n\t\ta+=($letter)\n\tdone\n\t\n\tfor i in ${a[@]};\
    \ do\n\t\t# get the position of the letter in the alphabet\n\t\tposition=`printf\
    \ %d \\'$i`\n\t\t# rotate the alphabet by 2\n\t\trotated=`expr $position + 2`\n\
    \t\t# convert the position back to a character\n\t\trotated=`printf \\\\$(printf\
    \ '%03o' $rotated)`\n\t\t# add the rotated letter to the output\n\t\toutput=\"\
    $output$rotated\"\n\tdone\n\t\n\techo \"$output\"\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp16l8cdg_.sh: command substitution: line 38: syntax error near unexpected
    token `(''

    /tmp/tmp16l8cdg_.sh: command substitution: line 38: `printf \$(printf ''%03o''
    $rotated)''

    /tmp/tmp16l8cdg_.sh: command substitution: line 38: syntax error near unexpected
    token `(''

    /tmp/tmp16l8cdg_.sh: command substitution: line 38: `printf \$(printf ''%03o''
    $rotated)''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo \"trying to encrypt\
    \ $1\"\n    # Insert code here\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\n\
    set -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# declare local variables\n\
    \tlocal string=\"$1\"\n\tlocal result=\"\"\n\t# loop through each character in\
    \ the string\n\tfor (( i=0; i<${#string}; i++ )); do\n\t\t# get current character\
    \ and the rest of the string\n\t\tlocal current=\"${string:$i:1}\"\n\t\tlocal\
    \ rest=\"${string:$((i+1))}\"\n\t\t# check if current is lowercase or uppercase\n\
    \t\tcase \"$current\" in\n\t\t\t[[:lower:]])\n\t\t\t\t# check if current needs\
    \ to be rotated past 'z'\n\t\t\t\tif [[ \"$current\" -ge \"x\" ]]; then\n\t\t\t\
    \t\tcurrent=\"$(($current-24))\"\n\t\t\t\telif [[ \"$current\" -ge \"v\" ]]; then\n\
    \t\t\t\t\tcurrent=\"$(($current-26))\"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\t\t[[:upper:]])\n\
    \t\t\t\t# check if current needs to be rotated past 'Z'\n\t\t\t\tif [[ \"$current\"\
    \ -ge \"X\" ]]; then\n\t\t\t\t\tcurrent=\"$(($current-24))\"\n\t\t\t\telif [[\
    \ \"$current\" -ge \"V\" ]]; then\n\t\t\t\t\tcurrent=\"$(($current-26))\"\n\t\t\
    \t\tfi\n\t\t\t\t;;\n\t\tesac\n\t\t# add result and rotate character again\n\t\t\
    result=\"$result$(printf \"%c\" $(($current+2)))\"\n\tdone\n\t# return result\n\
    \techo \"$result\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\n}\n\ncandidate() {\n\
    \    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"\
    lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp54vcyq_z.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp54vcyq_z.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025019
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # todo\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp_4cz8bhs.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmp_4cz8bhs.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    for ((i=0; i<${#1};\
    \ i++)); do\n        char=${1:$i:1}\n\n        char_num=$(printf \"%d\" \"'$char\"\
    )\n        new_char_num=$((char_num+4))\n        new_char=$(printf \"\\x$(printf\
    \ %x $new_char_num)\")\n\n        echo -n \"$new_char\"\n    done\n    echo\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# alphabet is a variable\
    \ that stores the string \"abcdefghijklmnopqrstuvwxyz\"\n\talphabet=\"abcdefghijklmnopqrstuvwxyz\"\
    \n\t# newAlphabet is a variable that stores the string \"cdefghijklmnopqrstuvwxyzab\"\
    \n\tnewAlphabet=\"cdefghijklmnopqrstuvwxyzab\"\n\t# newString is a variable that\
    \ holds the empty string\n\tnewString=\"\"\n\t# newChar is a variable that holds\
    \ the empty string\n\tnewChar=\"\"\n\t# This for loop goes through the first parameter\
    \ passed to this function\n\tfor ((i=0; i<${#1}; i++)); do\n\t\t# newChar is equal\
    \ to the character of the first parameter at the index i\n\t\tnewChar=${1:$i:1}\n\
    \t\t# This if statement checks if the character is an uppercase letter\n\t\tif\
    \ [[ \"$newChar\" =~ [A-Z] ]]; then\n\t\t\t# newChar is equal to the character\
    \ of the first parameter at the index i\n\t\t\tnewChar=${1:$i:1}\n\t\t\t# newChar\
    \ is made lowercase\n\t\t\tnewChar=${newChar,,}\n\t\t\t# newChar is equal to the\
    \ character of newAlphabet at the index of the alphabet string\n\t\t\tnewChar=${newAlphabet:$(($(expr\
    \ index \"$alphabet\" \"$newChar\")-1)):1}\n\t\t\t# newChar is made uppercase\n\
    \t\t\tnewChar=${newChar^^}\n\t\t\t# newString is equal to newString plus newChar\n\
    \t\t\tnewString+=$newChar\n\t\t# This else statement checks if the character is\
    \ a lowercase letter\n\t\telse\n\t\t\t# newChar is equal to the character of the\
    \ first parameter at the index i\n\t\t\tnewChar=${1:$i:1}\n\t\t\t# newChar is\
    \ equal to the character of newAlphabet at the index of the alphabet string\n\t\
    \t\tnewChar=${newAlphabet:$(($(expr index \"$alphabet\" \"$newChar\")-1)):1}\n\
    \t\t\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\"\
    \ ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"\
    ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[\
    \ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmp5ycj_cnf.sh: line 49: syntax error near unexpected token `}''

    /tmp/tmp5ycj_cnf.sh: line 49: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t#\n\t# YOUR CODE HERE\n\
    \t#\n\techo $1\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Create an array of\
    \ the alphabet\n    alphabet=({a..z})\n    # Make an empty array for the encrypted\
    \ string\n    encrypted_string=()\n    # Make an empty array for the indexes of\
    \ the letters to replace\n    indexes=()\n    # Iterate through the argument,\
    \ character by character\n    for (( i=0; i<${#1}; i++ )); do\n        # Get the\
    \ character to be replaced\n        char=\"${1:$i:1}\"\n        # Find the index\
    \ of that character in the alphabet\n        index=\"$( echo ${alphabet[@]} |\
    \ tr \" \" \"\\n\" | grep -n $char | cut -d \":\" -f 1 )\"\n        # Double the\
    \ index, add two, and find the character at that index in the alphabet\n     \
    \   encrypted_string+=\"${alphabet[ $(( $(( $index * 2 )) + 2 )) ]}\"\n    done\n\
    \    # Join the array of encrypted characters and echo the string\n    echo \"\
    ${encrypted_string[@]}\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    echo $1 | tr \"a-z\"\
    \ \"c-za-b\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # do not change the\
    \ next line\n    local s=\"$1\"\n\n    # Write your solution here\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # YOUR CODE HERE\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpjj4n586r.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpjj4n586r.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  ####\n  ## Do not modify\
    \ this code here.\n  ####\n  echo -n $1\n}\n\ncandidate() {\n    encrypt \"$@\"\
    \n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local -a alphabet=(a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z)\n    local -a shifted=(c\
    \ d e f g h i j k l m n o p q r s t u v w x y z a b)\n    local str=$1\n    local\
    \ let\n    local idx\n    local ret\n    for ((i=0; i<${#str}; i++)); do\n   \
    \     let=${str:$i:1}\n        idx=`echo ${alphabet[@]} | grep -bo $let | cut\
    \ -d: -f1`\n        ret+=\"${shifted[$idx]}\"\n    done\n    echo $ret\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  if [ ! -z \"$1\" ]; then\n\
    \    echo \"$1\" | tr '[a-z]' '[c-za-b]'\n  fi\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\tstring=\"$1\"\n\tnewstring=\"\
    \"\n\tfor (( i=0; i<${#string}; i++ )); do\n\t\tc=\"${string:$i:1}\"\n\t\tascii=`printf\
    \ \"%d\" \"'$c\"`\n\t\tencrypt=`echo \"$((ascii + 10))\"`\n\t\tif [ $encrypt -gt\
    \ 122 ]; then\n\t\t\tencrypt=`echo \"$((encrypt - 26))\"`\n\t\tfi\n\t\tnewstring+=\"\
    `printf \\\\$(printf '%03o' $encrypt)`\"\n\tdone\n\techo \"$newstring\"\n}\n\n\
    candidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpd52v8o9i.sh: command substitution: line 27: syntax error near unexpected
    token `(''

    /tmp/tmpd52v8o9i.sh: command substitution: line 27: `printf \$(printf ''%03o''
    $encrypt)''

    /tmp/tmpd52v8o9i.sh: command substitution: line 27: syntax error near unexpected
    token `(''

    /tmp/tmpd52v8o9i.sh: command substitution: line 27: `printf \$(printf ''%03o''
    $encrypt)''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Write your code here.\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpcbf00cip.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpcbf00cip.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 0
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Check if string is\
    \ empty\n    if [ -z \"$1\" ]; then\n        return;\n    fi\n\n    # Convert\
    \ string to lowercase\n    lowerString=$( echo \"$1\" | tr '[:upper:]' '[:lower:]'\
    \ )\n\n    # Iterate through lowerString\n    for (( i=0; i<${#lowerString}; i++\
    \ )); do\n        # Get the character at position i in lowerString\n        c=${lowerString:$i:1}\n\
    \n        # Convert to ASCII value\n        asciiValue=$( printf \"%d\" \"'$c\"\
    \ )\n\n        # Check if c is not a letter\n        if [ $asciiValue -lt 97 ]\
    \ || [ $asciiValue -gt 122 ]; then\n            # echo c\n            echo -n\
    \ \"$c\"\n        else\n            # shift c down by two multiplied to two places\n\
    \            newASCII=$(( $asciiValue + 4 ))\n\n            # If ASCII value exceeds\
    \ z, then loop back to a\n            if [ $newASCII -gt 122 ]; then\n       \
    \         newASCII=$(( $newASCII - 26 ))\n            fi\n\n            # Convert\
    \ ASCII value to character\n            newChar=$( printf \\\\$(printf '%03o'\
    \ $newASCII) )\n\n            # echo newChar\n            echo -n \"$newChar\"\
    \n        fi\n    done\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\n\
    run_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n\t# Transliterate the string\
    \ to the rotated alphabet\n\t# -t tells tr to delete specified characters\n\t\
    # -d deletes the characters from the first list\n\t# -s squeezes repeated occurences\
    \ of characters in the first list\n\t# [0-9] finds characters between 0 and 9\n\
    \t# [a-z] finds characters between a and z\n\techo \"$1\" | tr -d -s [0-9][a-z]\
    \ '[xyz][mn]bcdefghijklopqrstuvwxyz' '[mn]bcdefghijklopqrstuvwxyz'\n}\n\ncandidate()\
    \ {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\"\
    ) = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate\
    \ \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate\
    \ \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\"\
    ) = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: "tr: extra operand \u2018[mn]bcdefghijklopqrstuvwxyz\u2019\nTry 'tr --help'\
    \ for more information.\n"
  stdout: ''
  timestamp: 1660025020
- exit_code: 2
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n   # encrypt your answer\
    \ here\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n  \
    \  [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: SyntaxError
  stderr: '/tmp/tmpyvv55eoa.sh: line 19: syntax error near unexpected token `}''

    /tmp/tmpyvv55eoa.sh: line 19: `}''

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    base_string=\"abcdefghijklmnopqrstuvwxyz\"\
    \n    encrypted_string=\"\"\n    for (( i=0; i<${#1}; i++ )); do\n        char_to_encrypt=${1:$i:1}\n\
    \        char_index=$(($(printf \"%d\" \"'$char_to_encrypt\")-$(printf \"%d\"\
    \ \"'a\")))\n        encrypted_char_index=$((($char_index*2+2)%26))\n        encrypted_char=$(printf\
    \ \\\\$(printf \"%o\" $(($(printf \"%d\" \"'a\")+$encrypted_char_index))))\n \
    \       encrypted_string+=$encrypted_char\n    done\n    echo $encrypted_string\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Write your code here\n\
    \    length=${#1}\n    for (( i=0; i<length; i++ ))\n    do\n        char=${1:$i:1}\n\
    \        ord=$(printf \"%d\" \"'$char\")\n        neword=$((ord + 4))\n      \
    \  newchar=$(printf \"\\\\x%x\" $neword)\n        printf \"$newchar\"\n    done\n\
    \    echo\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n\
    \    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"\
    ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"\
    et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n\
    \    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: '/tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    /tmp/tmpfnjn1p84.sh: line 25: printf: missing hex digit for \x

    '
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # get length of string\n\
    \    LEN=$(echo $1 | wc -c)\n    # echo that many times\n    for (( i=1; i<=$LEN;\
    \ i++ ))\n    do\n        # get each letter from the string\n        CHAR=$(echo\
    \ $1 | cut -c $i)\n        # change letter to ascii\n        ASCII=$(printf \"\
    %d\" \"'$CHAR\")\n        # change ascii to alphabet position\n        POS=$((\
    \ $ASCII - 97 ))\n        # rotate alphabet position\n        POS=$(( ( $POS +\
    \ 4 ) % 26 ))\n        # change alphabte position to ascii\n        POS=$(( $POS\
    \ + 97 ))\n        # change ascii to char\n        NEW_CHAR=$(printf \"\\x$(printf\
    \ %x $POS)\")\n        # replace old char with new char\n        NEW_STRING=$(echo\
    \ $NEW_STRING$NEW_CHAR)\n    done\n    # return new string\n    echo $NEW_STRING\n\
    }\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate\
    \ \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n\
    \    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n\
    \    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[ $(candidate\
    \ \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # declare local variables\n\
    \    str=$1\n    convert_str=\"\"\n    new_str=\"\"\n    # for loop to convert\
    \ the string to ascii code\n    for((i=0; i<${#str}; i++)); do\n      convert_str+=$(printf\
    \ \"%d\" \"'${str:$i:1}\")\n    done\n    # for loop to make shift and add the\
    \ shift in ascii code\n    for((i=0; i<${#convert_str}; i++)); do\n      new_str+=$(printf\
    \ \"\\x$(printf %x $(( ${convert_str:$i:3}+4 )))\")\n    done\n    # print the\
    \ encrypted string\n    echo $new_str\n}\n\ncandidate() {\n    encrypt \"$@\"\n\
    }\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate\
    \ \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n\
    \    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  # sed -e 's/\\(.*\\)/\\\
    L\\1/' -e 's/\\(.*\\)/\\U\\1/'\n  echo $1 | sed -e 's/\\(.*\\)/\\L\\1/' -e 's/\\\
    (.*\\)/\\U\\1/'\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test()\
    \ {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\"\
    ) = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate\
    \ \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\"\
    \ ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    for i in $(seq 1 $#);\
    \ do\n        # $i is a letter\n        # We need to rotate the letters by two\
    \ multiplied to two places\n        # down. The ascii code for a-z is 97-122 and\
    \ for A-Z is 65-90\n        # by changing them to ascii code and incrementing\
    \ the codes by \n        # two multiplied to two, we can then change them back\
    \ to letters.\n        # First we need to check if the letter is uppercase or\
    \ lowercase\n        # because their ascii code is different and we will have\
    \ different\n        # outputs after changing their ascii code.\n        ascii=$(printf\
    \ '%d' \"'${!i}\")\n        if [[ ascii -ge 97 && ascii -le 122 ]]; then\n   \
    \         ascii=$((ascii + 2*2))\n            if [[ ascii -gt 122 ]]; then\n \
    \               ascii=$((ascii - 26))\n            fi\n        elif [[ ascii -ge\
    \ 65 && ascii -le 90 ]]; then\n            ascii=$((ascii + 2*2))\n          \
    \  if [[ ascii -gt 90 ]]; then\n                ascii=$((ascii - 26))\n      \
    \      fi\n        fi\n        # Now we print the letters according to their ascii\
    \ code\n        printf \\\\$(printf '%03o' $ascii)\n    done\n    printf \"\\\
    n\"\n}\n\ncandidate() {\n    encrypt \"$@\"\n}\n\nset -e\nrun_test() {\n    [[\
    \ $(candidate \"hi\") = \"lm\" ]]\n    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\"\
    \ ]]\n    [[ $(candidate \"gf\") = \"kj\" ]]\n    [[ $(candidate \"et\") = \"\
    ix\" ]]\n    [[ $(candidate \"faewfawefaewg\") = \"jeiajeaijeiak\" ]]\n    [[\
    \ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\" ]]\n    [[ $(candidate \"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") = \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ ]]\n    [[ $(candidate \"a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
- exit_code: 1
  program: "#!/bin/bash\n# Create a function encrypt that takes a string as an argument\
    \ and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet\
    \ should be rotated in a manner such that the letters \n# shift down by two multiplied\
    \ to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt\
    \ \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt\
    \ \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # local variable is\
    \ valid only inside the function\n    local str=\"$1\"\n    local new_str=\"\"\
    \n    # loop through each letter of the string\n    for (( i=0; i<${#str}; i++\
    \ ))\n    do\n        # store new character in a variable\n        new_char=$(printf\
    \ '%d' \"'${str:$i:1}\")\n        # 'printf' convert a number to ascii char\n\
    \        # '%d' is for decimal\n        # ${str:$i:1} is for getting the character\
    \ at position $i of the $str variable\n        # '%d' is for decimal\n       \
    \ # \"'\" is for converting it to ascii value\n        new_char=$((new_char +\
    \ 2))\n        # add two to the ascii value\n        new_char=$(printf \\\\$(printf\
    \ '%03o' $new_char))\n        # 'printf' convert a number to ascii char\n    \
    \    # '%03o' is for decimal (octal) with three digits\n        # '\\\\' is the\
    \ escape character\n        new_str+=$new_char\n        # add the new character\
    \ to the new string\n    done\n    echo $new_str\n}\n\ncandidate() {\n    encrypt\
    \ \"$@\"\n}\n\nset -e\nrun_test() {\n    [[ $(candidate \"hi\") = \"lm\" ]]\n\
    \    [[ $(candidate \"asdfghjkl\") = \"ewhjklnop\" ]]\n    [[ $(candidate \"gf\"\
    ) = \"kj\" ]]\n    [[ $(candidate \"et\") = \"ix\" ]]\n    [[ $(candidate \"faewfawefaewg\"\
    ) = \"jeiajeaijeiak\" ]]\n    [[ $(candidate \"hellomyfriend\") = \"lippsqcjvmirh\"\
    \ ]]\n    [[ $(candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") =\
    \ \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" ]]\n    [[ $(candidate \"\
    a\") = \"e\" ]]\n}\n\nrun_test"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660025020
