name: HumanEval_141_file_name_check
language: sh
prompt: "#!/bin/bash\n# Create a function which takes a string representing a file's\
  \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\"\
  )\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a\
  \ string\nfile_name_check() {\n"
tests: "}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
  ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
  \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
  \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
  ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
  \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
  ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate\
  \ \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
  ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
  \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
  all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n \
  \   [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
  ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
  \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n\
  \    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
  ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\"\
  ) = \"No\" ]]\n}\n\nrun_test"
completions: ["\t# TODO\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#", "    # Write your code here.\n    if [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,2}(\\\
    .[tT][xX][tT]|\\.[eE][xX][eE]|\\.[dD][lL][lL])$ ]]; then\n        echo \"Yes\"\
    \n    else\n        echo \"No\"\n    fi\n    # Do not change the following line.\n\
    \    return 0", "    local name=$1\n    local ext=\"${name##*.}\"\n    #echo \"\
    $ext\"\n    # Check for exactly one dot in the file name\n    # local dots=$(grep\
    \ -o \"\\.\" <<< \"$name\" | wc -l)\n    local dots=$(grep -o \"\\.\" <<< \"$name\"\
    \ | wc -l)\n    if [[ $dots -ne 1 ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    # Check if the file name has more than three digits\n    local digits=$(grep\
    \ -o \"[0-9]\" <<< \"$name\" | wc -l)\n    if [[ $digits -gt 3 ]]; then\n    \
    \    echo \"No\"\n        return\n    fi\n    # Check if the extension is valid\n\
    \    local valid_exts=(txt exe dll)\n    if [[ ! \" ${valid_exts[@]} \" =~ \"\
    \ ${ext} \" ]]; then\n        echo \"No\"\n        return\n    fi\n    # Check\
    \ if the file name starts with a letter\n    local before_dot=${name%%.*}\n  \
    \  local start=$(head -c 1 <<< \"$before_dot\")\n    if [[ ! \"$start\" =~ [a-zA-Z]\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"", " \
    \ local str=$1\n  [[ ${str:0:1} =~ [a-zA-Z] ]] && [[ $(echo ${str} | tr -cd 0-9\
    \ | wc -c) -le 3 ]] && \\\n  [[ $(echo $str | tr -cd . | wc -c) -eq 1 ]] && [[\
    \ $str =~ [a-zA-Z]+.txt$|[a-zA-Z]+.exe$|[a-zA-Z]+.dll$ ]] && \\\n  echo Yes ||\
    \ echo No", "    # Write your code here\n    # $1 is a string\n    local str=$1\n\
    \    if [[ $str =~ ^[a-zA-Z]+([0-9]{1,3})\\.[txt|exe|dll]$ ]]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi", "\tif [[ \"$1\" =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,}[0-9]{0,3}\\\
    .[a-zA-Z]{3}$ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "  \
    \  # Write your code here\n    local file_name=`echo $1 | cut -d \".\" -f 1`\n\
    \    local file_extension=`echo $1 | cut -d \".\" -f 2`\n    echo $file_name\n\
    \    echo $file_extension\n    local dot_count=`echo $1 | grep -o \"\\.\" | wc\
    \ -l`\n    local number_count=`echo $file_name | grep -o \"[0-9]\" | wc -l`\n\
    \    local length=`echo ${#file_name}`\n    # echo $length\n    # echo $dot_count\n\
    \    # echo $number_count\n    local correct_extension=false\n    for var in `echo\
    \ \"txt exe dll\"`\n    do\n        if [ $var = $file_extension ]\n        then\n\
    \            correct_extension=true\n        fi\n    done\n    if [ $correct_extension\
    \ = true ] && [ $dot_count = 1 ] && [ $number_count -le 3 ] && [ $length -gt 0\
    \ ] && [[ $file_name =~ ^[a-zA-Z]+$ ]]\n    then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi", "    # write your code here\n    # use the `grep`\
    \ and `sed` command in your solution.\n    # and try to solve this problem with\
    \ only one `grep` command.\n    # You can add other commands, if you need to.\n\
    \    # The following command is only an example.\n    echo $(echo \"$1\" | grep\
    \ -E '^[a-zA-Z]+[[:digit:]]{0,3}\\.txt$|^[a-zA-Z]+[[:digit:]]{0,3}\\.exe$|^[a-zA-Z]+[[:digit:]]{0,3}\\\
    .dll$')\n    if [ $(echo \"$1\" | grep -E '^[a-zA-Z]+[[:digit:]]{0,3}\\.txt$|^[a-zA-Z]+[[:digit:]]{0,3}\\\
    .exe$|^[a-zA-Z]+[[:digit:]]{0,3}\\.dll$' | wc -l) -eq 1 ]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi", "    FILE_NAME=$1\n    # Split\
    \ file name by dot into two parts: NAME and EXTENSION\n    NAME=${FILE_NAME%.*}\n\
    \    EXTENSION=${FILE_NAME##*.}\n    # If $FILE_NAME is empty or has more than\
    \ one dot, return \"No\"\n    if [[ $FILE_NAME =~ (^$|\\.) ]]; then\n        echo\
    \ \"No\"\n        return\n    fi\n    # If the substring before the dot is empty\
    \ or does not start with a latin letter, return \"No\"\n    if [[ $NAME =~ (^$|^[^[:alpha:]])\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n    # If extension is\
    \ not one of the allowed: ['txt', 'exe', 'dll'], return \"No\"\n    if [[ $EXTENSION\
    \ != \"txt\" && $EXTENSION != \"exe\" && $EXTENSION != \"dll\" ]]; then\n    \
    \    echo \"No\"\n        return\n    fi\n    # If there are more than three digits\
    \ in the file's name, return \"No\"\n    if [[ $FILE_NAME =~ ([0-9][0-9][0-9])\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n    # If the file's name\
    \ is valid, return \"Yes\"\n    echo \"Yes\"", "\t# Cheking if the substring after\
    \ the '.' is valid, or not.\n\t# The substring after the '.' should be one of\
    \ these: ['txt', 'exe', 'dll']\n\tif [[ \"$1\" == *\".txt\" || \"$1\" == *\".exe\"\
    \ || \"$1\" == *\".dll\" ]]; then\n\t\t# Cheking if the file's name contains exactly\
    \ one dot '.'\n\t\tif [[ \"$1\" == *\".\"* ]]; then\n\t\t\tlocal count=$(grep\
    \ -o '.' <<< \"$1\" | wc -l)\n\t\t\tif [ $count == 1 ]; then\n\t\t\t\t# Here,\
    \ we have a valid file's name, so return 'Yes'\n\t\t\t\techo \"Yes\"\n\t\t\telse\n\
    \t\t\t\t# Here, we don't have a valid file's name, so return 'No'\n\t\t\t\techo\
    \ \"No\"\n\t\t\tfi\n\t\telse\n\t\t\t# Here, we don't have a valid file's name,\
    \ so return 'No'\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\t\t# Here, we don't have\
    \ a valid file's name, so return 'No'\n\t\techo \"No\"\n\tfi", "  if [[ $1 =~\
    \ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]$ ]]; then\n    echo \"Yes\"\n  else\n\
    \    echo \"No\"\n  fi", "    file_name=\"$1\"\n    first_check=\"$(echo \"$file_name\"\
    \ | grep -E '[0-9]{4}' | wc -l)\"\n    second_check=\"$(echo \"$file_name\" |\
    \ grep -E '^[a-zA-Z]+(\\.[txt|exe|dll])$' | wc -l)\"\n    if [[ \"$first_check\"\
    \ -eq 0 && \"$second_check\" -eq 1 ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi", "    set -f\n    # $1 is a string, so remove quotes\n\
    \    file_name=$1\n    num_of_digits=$(echo $file_name | tr -d -c \"0-9\")\n \
    \   num_of_dots=$(echo $file_name | tr -d -c \".\")\n    first_part=$(echo $file_name\
    \ | cut -d'.' -f1)\n    last_part=$(echo $file_name | cut -d'.' -f2)\n    first_letter=$(echo\
    \ $first_part | cut -c1)\n    if [ ${#num_of_digits} -le 3 ] && [ ${#num_of_dots}\
    \ -eq 1 ] && \\\n    [[ $first_letter =~ [a-zA-Z] ]] && [[ $last_part =~ \"txt\"\
    \ || $last_part =~ \"exe\" || $last_part =~ \"dll\" ]]; then\n        echo \"\
    Yes\"\n    else\n        echo \"No\"\n    fi", "    # You are given $1\n    #\
    \ Write your code here\n\n\n    ######## I found the solution on stackoverflow\
    \ which is kind of cheating, but I am\n    # short on time.\n    # https://stackoverflow.com/questions/19085807/bash-regex-with-numbers-and-dots-allowed-before-extension\n\
    \    # I didn't fully understand it though.. I'll try to find a simpler solution\
    \ later.\n    ########\n\n    if [[ \"$1\" =~ ^[a-zA-Z]{1}[0-9]{1,3}[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "\t\
    before_dot=${1%.*}\n\tafter_dot=${1##*.}\n\tif [[ $before_dot =~ [^a-zA-Z] ]];\
    \ then\n\t\techo \"No\"\n\telif [[ $before_dot =~ ^[[:digit:]]{4}$ ]]; then\n\t\
    \techo \"No\"\n\telif [[ ${#after_dot} != 3 ]]; then\n\t\techo \"No\"\n\telif\
    \ [[ $after_dot != \"txt\" && $after_dot != \"exe\" && $after_dot != \"dll\" ]];\
    \ then\n\t\techo \"No\"\n\telse\n\t\techo \"Yes\"\n\tfi", "\techo \"Check $1\"\
    \n\tfile_name=$1\n\tfile_name_len=${#file_name}\n\tdot_pos=0\n\n\t# find . position\n\
    \tfor ((i=0; i<$file_name_len; i++)) do\n\t\tchar=${file_name:$i:1}\n\t\tif [\
    \ \"$char\" == \".\" ]; then\n\t\t\tdot_pos=$i\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\
    \t# check if there is one and only one .\n\tif [ $dot_pos -eq 0 ]; then\n\t\t\
    echo \"No\"\n\t\treturn\n\tfi\n\n\t# check if there are more than 3 digits\n\t\
    if [[ \"$file_name\" =~ [0-9]{4} ]]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\
    \n\t# cut substring before and after .\n\tsub_before=${file_name:0:$dot_pos}\n\
    \tsub_after=${file_name:$dot_pos+1:$file_name_len}\n\n\t# check if the substring\
    \ before . is empty or doesn't start with a letter\n\tif [ -z \"$sub_before\"\
    \ ] || [[ ! \"$sub_before\" =~ ^[a-zA-Z] ]]; then\n\t\techo \"No\"\n\t\treturn\n\
    \tfi\n\n\t# check if the substring after . is one of [txt, exe, dll]\n\tif [ \"\
    $sub_after\" != \"txt\" ] && [ \"$sub_after\" != \"exe\" ] && [ \"$sub_after\"\
    \ != \"dll\" ]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\techo \"Yes\"", " \
    \ if [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,3}(\\.[A-Za-z0-9]{2,3})?$ ]]; then\n\
    \    if [[ \"$1\" =~ \\.[A-Za-z0-9]{2,3}$ ]]; then\n      if [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,3}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n      elif [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n      elif [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n      else\n        echo \"No\"\n      fi\n\
    \    else\n      echo \"No\"\n    fi\n  else\n    echo \"No\"\n  fi", "    echo\
    \ \": name: $1\"\n    name=$1\n    if [[ $name =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$\
    \ ]]; then\n        echo \"Yes\"\n    elif [[ $name =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $name =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "    is_valid=true\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*[.](txt|exe|dll)$ ]]; then\n\
    \        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    local file_name=$1\n\
    \    local name_len=${#file_name}\n    local first_dot_index=0\n    local last_dot_index=0\n\
    \    local dot_count=0\n    local digit_count=0\n    local file_type\n    local\
    \ file_name_type\n\n    for (( i=0; i<name_len; i++ )); do\n        if [[ \"${file_name:$i:1}\"\
    \ == \".\" ]]; then\n            if [[ $dot_count -eq 0 ]]; then\n           \
    \     first_dot_index=$i\n            fi\n            last_dot_index=$i\n    \
    \        ((dot_count++))\n        elif [[ \"${file_name:$i:1}\" =~ [0-9] ]]; then\n\
    \            ((digit_count++))\n        fi\n    done\n\n    if [[ $dot_count -ne\
    \ 1 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    if [[ $digit_count\
    \ -gt 3 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    if [[ $last_dot_index\
    \ -eq 0 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    file_type=${file_name:$last_dot_index+1}\n\
    \    if [[ \"$file_type\" != \"txt\" && \"$file_type\" != \"exe\" && \"$file_type\"\
    \ != \"dll\" ]]; then\n        echo \"No\"\n        return\n    fi\n\n    file_name_type=${file_name:0:$first_dot_index}\n\
    \    if [[ ! \"$file_name_type\" =~ ^[a-zA-Z]+$ ]]; then\n        echo \"No\"\n\
    \        return\n    fi\n\n    echo \"Yes\""]
stop_tokens:
- "\n}"
