name: HumanEval_141_file_name_check
language: sh
prompt: "#!/bin/bash\n# Create a function which takes a string representing a file's\
  \ name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  # A file's name is considered to be valid if and only if all the following conditions\
  \ \n# are met:\n# - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n# the latin\
  \ alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one\
  \ of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\"\
  )\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a\
  \ string\nfile_name_check() {\n"
tests: "}\n\ncandidate() {\n    file_name_check \"$@\"\n}\n\nset -e\nrun_test() {\n\
  \    [[ $(candidate \"example.txt\") = \"Yes\" ]]\n    [[ $(candidate \"1example.dll\"\
  ) = \"No\" ]]\n    [[ $(candidate \"s1sdf3.asd\") = \"No\" ]]\n    [[ $(candidate\
  \ \"K.dll\") = \"Yes\" ]]\n    [[ $(candidate \"MY16FILE3.exe\") = \"Yes\" ]]\n\
  \    [[ $(candidate \"His12FILE94.exe\") = \"No\" ]]\n    [[ $(candidate \"_Y.txt\"\
  ) = \"No\" ]]\n    [[ $(candidate \"?aREYA.exe\") = \"No\" ]]\n    [[ $(candidate\
  \ \"/this_is_valid.dll\") = \"No\" ]]\n    [[ $(candidate \"this_is_valid.wow\"\
  ) = \"No\" ]]\n    [[ $(candidate \"this_is_valid.txt\") = \"Yes\" ]]\n    [[ $(candidate\
  \ \"this_is_valid.txtexe\") = \"No\" ]]\n    [[ $(candidate \"#this2_i4s_5valid.ten\"\
  ) = \"No\" ]]\n    [[ $(candidate \"@this1_is6_valid.exe\") = \"No\" ]]\n    [[\
  \ $(candidate \"this_is_12valid.6exe4.txt\") = \"No\" ]]\n    [[ $(candidate \"\
  all.exe.txt\") = \"No\" ]]\n    [[ $(candidate \"I563_No.exe\") = \"Yes\" ]]\n \
  \   [[ $(candidate \"Is3youfault.txt\") = \"Yes\" ]]\n    [[ $(candidate \"no_one#knows.dll\"\
  ) = \"Yes\" ]]\n    [[ $(candidate \"1I563_Yes3.exe\") = \"No\" ]]\n    [[ $(candidate\
  \ \"I563_Yes3.txtt\") = \"No\" ]]\n    [[ $(candidate \"final..txt\") = \"No\" ]]\n\
  \    [[ $(candidate \"final132\") = \"No\" ]]\n    [[ $(candidate \"_f4indsartal132.\"\
  ) = \"No\" ]]\n    [[ $(candidate \".txt\") = \"No\" ]]\n    [[ $(candidate \"s.\"\
  ) = \"No\" ]]\n}\n\nrun_test"
completions: ["\t# TODO\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\
    \t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t#\n\t\
    #\n\t#\n\t#", "    # Write your code here.\n    if [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,2}(\\\
    .[tT][xX][tT]|\\.[eE][xX][eE]|\\.[dD][lL][lL])$ ]]; then\n        echo \"Yes\"\
    \n    else\n        echo \"No\"\n    fi\n    # Do not change the following line.\n\
    \    return 0", "    local name=$1\n    local ext=\"${name##*.}\"\n    #echo \"\
    $ext\"\n    # Check for exactly one dot in the file name\n    # local dots=$(grep\
    \ -o \"\\.\" <<< \"$name\" | wc -l)\n    local dots=$(grep -o \"\\.\" <<< \"$name\"\
    \ | wc -l)\n    if [[ $dots -ne 1 ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    # Check if the file name has more than three digits\n    local digits=$(grep\
    \ -o \"[0-9]\" <<< \"$name\" | wc -l)\n    if [[ $digits -gt 3 ]]; then\n    \
    \    echo \"No\"\n        return\n    fi\n    # Check if the extension is valid\n\
    \    local valid_exts=(txt exe dll)\n    if [[ ! \" ${valid_exts[@]} \" =~ \"\
    \ ${ext} \" ]]; then\n        echo \"No\"\n        return\n    fi\n    # Check\
    \ if the file name starts with a letter\n    local before_dot=${name%%.*}\n  \
    \  local start=$(head -c 1 <<< \"$before_dot\")\n    if [[ ! \"$start\" =~ [a-zA-Z]\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"", " \
    \ local str=$1\n  [[ ${str:0:1} =~ [a-zA-Z] ]] && [[ $(echo ${str} | tr -cd 0-9\
    \ | wc -c) -le 3 ]] && \\\n  [[ $(echo $str | tr -cd . | wc -c) -eq 1 ]] && [[\
    \ $str =~ [a-zA-Z]+.txt$|[a-zA-Z]+.exe$|[a-zA-Z]+.dll$ ]] && \\\n  echo Yes ||\
    \ echo No", "    # Write your code here\n    # $1 is a string\n    local str=$1\n\
    \    if [[ $str =~ ^[a-zA-Z]+([0-9]{1,3})\\.[txt|exe|dll]$ ]]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi", "\tif [[ \"$1\" =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,}[0-9]{0,3}\\\
    .[a-zA-Z]{3}$ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "  \
    \  # Write your code here\n    local file_name=`echo $1 | cut -d \".\" -f 1`\n\
    \    local file_extension=`echo $1 | cut -d \".\" -f 2`\n    echo $file_name\n\
    \    echo $file_extension\n    local dot_count=`echo $1 | grep -o \"\\.\" | wc\
    \ -l`\n    local number_count=`echo $file_name | grep -o \"[0-9]\" | wc -l`\n\
    \    local length=`echo ${#file_name}`\n    # echo $length\n    # echo $dot_count\n\
    \    # echo $number_count\n    local correct_extension=false\n    for var in `echo\
    \ \"txt exe dll\"`\n    do\n        if [ $var = $file_extension ]\n        then\n\
    \            correct_extension=true\n        fi\n    done\n    if [ $correct_extension\
    \ = true ] && [ $dot_count = 1 ] && [ $number_count -le 3 ] && [ $length -gt 0\
    \ ] && [[ $file_name =~ ^[a-zA-Z]+$ ]]\n    then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi", "    # write your code here\n    # use the `grep`\
    \ and `sed` command in your solution.\n    # and try to solve this problem with\
    \ only one `grep` command.\n    # You can add other commands, if you need to.\n\
    \    # The following command is only an example.\n    echo $(echo \"$1\" | grep\
    \ -E '^[a-zA-Z]+[[:digit:]]{0,3}\\.txt$|^[a-zA-Z]+[[:digit:]]{0,3}\\.exe$|^[a-zA-Z]+[[:digit:]]{0,3}\\\
    .dll$')\n    if [ $(echo \"$1\" | grep -E '^[a-zA-Z]+[[:digit:]]{0,3}\\.txt$|^[a-zA-Z]+[[:digit:]]{0,3}\\\
    .exe$|^[a-zA-Z]+[[:digit:]]{0,3}\\.dll$' | wc -l) -eq 1 ]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi", "    FILE_NAME=$1\n    # Split\
    \ file name by dot into two parts: NAME and EXTENSION\n    NAME=${FILE_NAME%.*}\n\
    \    EXTENSION=${FILE_NAME##*.}\n    # If $FILE_NAME is empty or has more than\
    \ one dot, return \"No\"\n    if [[ $FILE_NAME =~ (^$|\\.) ]]; then\n        echo\
    \ \"No\"\n        return\n    fi\n    # If the substring before the dot is empty\
    \ or does not start with a latin letter, return \"No\"\n    if [[ $NAME =~ (^$|^[^[:alpha:]])\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n    # If extension is\
    \ not one of the allowed: ['txt', 'exe', 'dll'], return \"No\"\n    if [[ $EXTENSION\
    \ != \"txt\" && $EXTENSION != \"exe\" && $EXTENSION != \"dll\" ]]; then\n    \
    \    echo \"No\"\n        return\n    fi\n    # If there are more than three digits\
    \ in the file's name, return \"No\"\n    if [[ $FILE_NAME =~ ([0-9][0-9][0-9])\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n    # If the file's name\
    \ is valid, return \"Yes\"\n    echo \"Yes\"", "\t# Cheking if the substring after\
    \ the '.' is valid, or not.\n\t# The substring after the '.' should be one of\
    \ these: ['txt', 'exe', 'dll']\n\tif [[ \"$1\" == *\".txt\" || \"$1\" == *\".exe\"\
    \ || \"$1\" == *\".dll\" ]]; then\n\t\t# Cheking if the file's name contains exactly\
    \ one dot '.'\n\t\tif [[ \"$1\" == *\".\"* ]]; then\n\t\t\tlocal count=$(grep\
    \ -o '.' <<< \"$1\" | wc -l)\n\t\t\tif [ $count == 1 ]; then\n\t\t\t\t# Here,\
    \ we have a valid file's name, so return 'Yes'\n\t\t\t\techo \"Yes\"\n\t\t\telse\n\
    \t\t\t\t# Here, we don't have a valid file's name, so return 'No'\n\t\t\t\techo\
    \ \"No\"\n\t\t\tfi\n\t\telse\n\t\t\t# Here, we don't have a valid file's name,\
    \ so return 'No'\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\t\t# Here, we don't have\
    \ a valid file's name, so return 'No'\n\t\techo \"No\"\n\tfi", "  if [[ $1 =~\
    \ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]$ ]]; then\n    echo \"Yes\"\n  else\n\
    \    echo \"No\"\n  fi", "    file_name=\"$1\"\n    first_check=\"$(echo \"$file_name\"\
    \ | grep -E '[0-9]{4}' | wc -l)\"\n    second_check=\"$(echo \"$file_name\" |\
    \ grep -E '^[a-zA-Z]+(\\.[txt|exe|dll])$' | wc -l)\"\n    if [[ \"$first_check\"\
    \ -eq 0 && \"$second_check\" -eq 1 ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi", "    set -f\n    # $1 is a string, so remove quotes\n\
    \    file_name=$1\n    num_of_digits=$(echo $file_name | tr -d -c \"0-9\")\n \
    \   num_of_dots=$(echo $file_name | tr -d -c \".\")\n    first_part=$(echo $file_name\
    \ | cut -d'.' -f1)\n    last_part=$(echo $file_name | cut -d'.' -f2)\n    first_letter=$(echo\
    \ $first_part | cut -c1)\n    if [ ${#num_of_digits} -le 3 ] && [ ${#num_of_dots}\
    \ -eq 1 ] && \\\n    [[ $first_letter =~ [a-zA-Z] ]] && [[ $last_part =~ \"txt\"\
    \ || $last_part =~ \"exe\" || $last_part =~ \"dll\" ]]; then\n        echo \"\
    Yes\"\n    else\n        echo \"No\"\n    fi", "    # You are given $1\n    #\
    \ Write your code here\n\n\n    ######## I found the solution on stackoverflow\
    \ which is kind of cheating, but I am\n    # short on time.\n    # https://stackoverflow.com/questions/19085807/bash-regex-with-numbers-and-dots-allowed-before-extension\n\
    \    # I didn't fully understand it though.. I'll try to find a simpler solution\
    \ later.\n    ########\n\n    if [[ \"$1\" =~ ^[a-zA-Z]{1}[0-9]{1,3}[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "\t\
    before_dot=${1%.*}\n\tafter_dot=${1##*.}\n\tif [[ $before_dot =~ [^a-zA-Z] ]];\
    \ then\n\t\techo \"No\"\n\telif [[ $before_dot =~ ^[[:digit:]]{4}$ ]]; then\n\t\
    \techo \"No\"\n\telif [[ ${#after_dot} != 3 ]]; then\n\t\techo \"No\"\n\telif\
    \ [[ $after_dot != \"txt\" && $after_dot != \"exe\" && $after_dot != \"dll\" ]];\
    \ then\n\t\techo \"No\"\n\telse\n\t\techo \"Yes\"\n\tfi", "\techo \"Check $1\"\
    \n\tfile_name=$1\n\tfile_name_len=${#file_name}\n\tdot_pos=0\n\n\t# find . position\n\
    \tfor ((i=0; i<$file_name_len; i++)) do\n\t\tchar=${file_name:$i:1}\n\t\tif [\
    \ \"$char\" == \".\" ]; then\n\t\t\tdot_pos=$i\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\
    \t# check if there is one and only one .\n\tif [ $dot_pos -eq 0 ]; then\n\t\t\
    echo \"No\"\n\t\treturn\n\tfi\n\n\t# check if there are more than 3 digits\n\t\
    if [[ \"$file_name\" =~ [0-9]{4} ]]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\
    \n\t# cut substring before and after .\n\tsub_before=${file_name:0:$dot_pos}\n\
    \tsub_after=${file_name:$dot_pos+1:$file_name_len}\n\n\t# check if the substring\
    \ before . is empty or doesn't start with a letter\n\tif [ -z \"$sub_before\"\
    \ ] || [[ ! \"$sub_before\" =~ ^[a-zA-Z] ]]; then\n\t\techo \"No\"\n\t\treturn\n\
    \tfi\n\n\t# check if the substring after . is one of [txt, exe, dll]\n\tif [ \"\
    $sub_after\" != \"txt\" ] && [ \"$sub_after\" != \"exe\" ] && [ \"$sub_after\"\
    \ != \"dll\" ]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\techo \"Yes\"", " \
    \ if [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,3}(\\.[A-Za-z0-9]{2,3})?$ ]]; then\n\
    \    if [[ \"$1\" =~ \\.[A-Za-z0-9]{2,3}$ ]]; then\n      if [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,3}\\\
    .txt$ ]]; then\n        echo \"Yes\"\n      elif [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n      elif [[ \"$1\" =~ ^[A-Za-z]{1}[A-Za-z0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n      else\n        echo \"No\"\n      fi\n\
    \    else\n      echo \"No\"\n    fi\n  else\n    echo \"No\"\n  fi", "    echo\
    \ \": name: $1\"\n    name=$1\n    if [[ $name =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$\
    \ ]]; then\n        echo \"Yes\"\n    elif [[ $name =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ ]]; then\n        echo \"Yes\"\n    elif [[ $name =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "    is_valid=true\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*[.](txt|exe|dll)$ ]]; then\n\
    \        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    local file_name=$1\n\
    \    local name_len=${#file_name}\n    local first_dot_index=0\n    local last_dot_index=0\n\
    \    local dot_count=0\n    local digit_count=0\n    local file_type\n    local\
    \ file_name_type\n\n    for (( i=0; i<name_len; i++ )); do\n        if [[ \"${file_name:$i:1}\"\
    \ == \".\" ]]; then\n            if [[ $dot_count -eq 0 ]]; then\n           \
    \     first_dot_index=$i\n            fi\n            last_dot_index=$i\n    \
    \        ((dot_count++))\n        elif [[ \"${file_name:$i:1}\" =~ [0-9] ]]; then\n\
    \            ((digit_count++))\n        fi\n    done\n\n    if [[ $dot_count -ne\
    \ 1 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    if [[ $digit_count\
    \ -gt 3 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    if [[ $last_dot_index\
    \ -eq 0 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    file_type=${file_name:$last_dot_index+1}\n\
    \    if [[ \"$file_type\" != \"txt\" && \"$file_type\" != \"exe\" && \"$file_type\"\
    \ != \"dll\" ]]; then\n        echo \"No\"\n        return\n    fi\n\n    file_name_type=${file_name:0:$first_dot_index}\n\
    \    if [[ ! \"$file_name_type\" =~ ^[a-zA-Z]+$ ]]; then\n        echo \"No\"\n\
    \        return\n    fi\n\n    echo \"Yes\"", "  # Check for 3 digits\n  if [[\
    \ $1 =~ [0-9]{4} ]]; then\n    echo \"No\"\n    return\n  fi\n\n  # Check for\
    \ '.'\n  if [[ $1 =~ [^\\.]*\\.[^\\.]* ]]; then\n    # Check for first letter\n\
    \    if [[ $1 =~ ^[a-zA-Z] ]]; then\n      # Check for type\n      if [[ $1 =~\
    \ [^\\.]*\\.(txt|exe|dll) ]]; then\n        echo \"Yes\"\n        return\n   \
    \   fi\n    fi\n  fi\n\n  echo \"No\"", "\t# Put your code below this line\n\t\
    if [[ $1 =~ ^([a-zA-Z])(.*[.][t|e|d])$ ]];\n\tthen\n\t\techo \"Yes\"\n\telse\n\
    \t\techo \"No\"\n\tfi\n\t# Put your code above this line", "    # your code here\n\
    \    # use the following test command to check whether the file name is valid\n\
    \    # test \"${1//[0-9]/}\" == \"$1\" && test \"${1%.*}\" == \"${1#*.}\" && test\
    \ \"${1%%.*}\" == \"${1#*.}\"\n    #echo \"your code here\"\n    if [ $# -ne 1\
    \ ]; then\n        echo \"Error: Wrong number of arguments!\"\n        return\
    \ 1\n    fi\n    if [[ $1 == *[!a-zA-Z0-9.]* ]]; then\n        echo \"No\"\n \
    \       return 1\n    fi\n    if [[ $1 == *[0-9][0-9][0-9]* ]]; then\n       \
    \ echo \"No\"\n        return 1\n    fi\n    if [[ $1 != *\".\"* ]]; then\n  \
    \      echo \"No\"\n        return 1\n    fi\n    if [[ $1 == *. ]]; then\n  \
    \      echo \"No\"\n        return 1\n    fi\n    if [[ $1 == *..* ]]; then\n\
    \        echo \"No\"\n        return 1\n    fi\n    if [[ $1 == *\"txt\"* ]];\
    \ then\n        echo \"Yes\"\n        return 0\n    fi\n    if [[ $1 == *\"exe\"\
    * ]]; then\n        echo \"Yes\"\n        return 0\n    fi\n    if [[ $1 == *\"\
    dll\"* ]]; then\n        echo \"Yes\"\n        return 0\n    fi\n    echo \"No\"\
    \n    return 1", "\tif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[t][x][t]$ || $1 =~\
    \ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[e][x][e]$ || $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[d][l][l]$ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "    COUNTER=0\n\
    \    has_dot=0\n    has_num=0\n    has_alpha=0\n    while read -n1 c; do\n\tif\
    \ [[ $c =~ [A-Za-z] ]]; then\n\t    has_alpha=1\n\tfi\n\tif [[ $c =~ [0-9] ]];\
    \ then\n\t    COUNTER=$(($COUNTER+1))\n\t    has_num=1\n\tfi\n\tif [[ $c =~ [.]\
    \ ]]; then\n\t    has_dot=1\n\tfi\n    done <<< \"$1\"\n    if [[ $COUNTER -gt\
    \ 3 ]]; then\n\techo \"No\"\n\treturn\n    fi\n    if [[ $has_alpha -eq 0 ]];\
    \ then\n\techo \"No\"\n\treturn\n    fi\n    if [[ $has_dot -eq 0 ]]; then\n\t\
    echo \"No\"\n\treturn\n    fi\n    if [[ $has_num -eq 1 ]]; then\n\techo \"No\"\
    \n\treturn\n    fi\n    if [[ $1 =~ [.]txt$ ]]; then\n\techo \"Yes\"\n\treturn\n\
    \    fi\n    if [[ $1 =~ [.]exe$ ]]; then\n\techo \"Yes\"\n\treturn\n    fi\n\
    \    if [[ $1 =~ [.]dll$ ]]; then\n\techo \"Yes\"\n\treturn\n    fi\n    echo\
    \ \"No\"", "    local filename=$1\n    local number=`echo $filename | grep -o\
    \ '[0-9]' | wc -l`\n    local dot_count=`echo $filename | grep -o '\\.' | wc -l`\n\
    \    local first_letter=`echo $filename | grep -o '^[a-zA-Z]'`\n    local extension=`echo\
    \ $filename | grep -o '[a-zA-Z0-9]*\\.[a-zA-Z]*' | grep -o '[a-zA-Z]*$'`\n   \
    \ if [[ \"$number\" -gt 3 ]]; then\n        echo \"No\"\n    elif [[ \"$dot_count\"\
    \ -ne 1 ]]; then\n        echo \"No\"\n    elif [[ \"$first_letter\" == \"\" ]];\
    \ then\n        echo \"No\"\n    elif [[ \"$extension\" != \"txt\" && \"$extension\"\
    \ != \"exe\" && \"$extension\" != \"dll\" ]]; then\n        echo \"No\"\n    else\n\
    \        echo \"Yes\"\n    fi", "    local file_name=$1;\n    if [[ $(echo $file_name\
    \ | awk '{print length($0)}') -lt 5 ]]; then\n        echo \"No\";\n        return;\n\
    \    fi\n    if [[ $(echo $file_name | awk -F \".\" '{print $1}' | awk '{print\
    \ length($0)}') -lt 2 ]]; then\n        echo \"No\";\n        return;\n    fi\n\
    \    if [[ $(echo $file_name | awk -F \".\" '{print $1}' | grep -o [0-9] | wc\
    \ -l) -gt 3 ]]; then\n        echo \"No\";\n        return;\n    fi\n    if [[\
    \ $(echo $file_name | grep \"^[a-zA-Z]\" | wc -l) -ne 1 ]]; then\n        echo\
    \ \"No\";\n        return;\n    fi\n    if [[ $(echo $file_name | grep \"[a-zA-Z]\\\
    {1,\\}\\.txt$\" | wc -l) -ne 1 ]]; then\n        echo \"No\";\n        return;\n\
    \    fi\n    if [[ $(echo $file_name | grep \"[a-zA-Z]\\{1,\\}\\.exe$\" | wc -l)\
    \ -ne 1 ]]; then\n        echo \"No\";\n        return;\n    fi\n    if [[ $(echo\
    \ $file_name | grep \"[a-zA-Z]\\{1,\\}\\.dll$\" | wc -l) -ne 1 ]]; then\n    \
    \    echo \"No\";\n        return;\n    fi\n    echo \"Yes\";", "    # return\
    \ the result\n    echo $(result)", "    if [ ${#1} -le 1 ]; then\n        echo\
    \ \"No\"\n        return\n    fi\n    file_name=${1%.*}\n    file_ext=${1##*.}\n\
    \    if [[ ${file_name} =~ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    if [[ ${file_name} =~ ^[a-zA-Z].* ]]; then\n        if [[ ${file_ext}\
    \ =~ ^[a-zA-Z]+$ ]]; then\n            if [[ ${file_ext} =~ ^txt$|^exe$|^dll$\
    \ ]]; then\n                echo \"Yes\"\n                return\n           \
    \ fi\n        fi\n    fi\n    echo \"No\"", "\t# replace the following line with\
    \ your code\n\techo \"Yes\"", "\tif [[ \"$1\" =~ ^[a-zA-Z]+([0-9]{1,3})?\\.(txt|exe|dll)$\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "  local len=$((${#1}\
    \ - 1))\n  local ret=\"No\"\n  local c\n  local cnt=0\n  local is=0\n  local txt=0\n\
    \  local exe=0\n  local dll=0\n  for i in $(seq 0 $len); do\n    c=${1:$i:1}\n\
    \    if [[ $c == [[:digit:]] ]]; then\n      ((cnt++))\n    elif [[ $c == . ]];\
    \ then\n      ((is++))\n    elif [[ $c == txt ]]; then\n      ((txt++))\n    elif\
    \ [[ $c == exe ]]; then\n      ((exe++))\n    elif [[ $c == dll ]]; then\n   \
    \   ((dll++))\n    fi\n  done\n  if ((cnt <= 3)) && ((is == 1)) && [[ \"${1:0:1}\"\
    \ =~ [[:alpha:]] ]] && \\\n     ((txt == 1 || exe == 1 || dll == 1)); then\n \
    \   ret=\"Yes\"\n  fi\n  echo $ret", "    if [[ ! $1 =~ ^[a-zA-Z][0-9]{0,3}[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"No\"\n    else\n        echo \"Yes\"\n    fi", "  \
    \  filename=$1\n    # the substring before the dot should not be empty\n    #\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    [[ $filename =~ ^[a-zA-Z]+(\\.[txt|exe|dll]{3})?$ ]] || return 1\n    # There\
    \ should not be more than three digits ('0'-'9') in the file's name.\n    [[ $filename\
    \ =~ [0-9]{4} ]] && return 1\n    return 0", "\tvalid_count=0\n\tfor i in {0..9}\n\
    \tdo\n\t\tcount=$(echo \"$1\" | grep -o \"$i\" | wc -l)\n\t\t((valid_count=$valid_count+$count))\n\
    \tdone\n\tcount=$(echo \"$1\" | grep -o '.' | wc -l)\n\tif [ $valid_count -le\
    \ 3 ] && [ $count -eq 1 ]\n\tthen\n\t\tfilename=$(echo \"$1\" | cut -d '.' -f\
    \ 1)\n\t\textension=$(echo \"$1\" | cut -d '.' -f 2)\n\t\tif [[ -n $filename ]]\
    \ && [[ \"$filename\" =~ ^[a-zA-Z]+$ ]] && [[ \"$extension\" =~ ^(txt|exe|dll)$\
    \ ]]\n\t\tthen\n\t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\
    \t\techo \"No\"\n\tfi", "    if [[ -z $1 ]]; then\n        echo \"No\"\n     \
    \   return\n    fi\n    if [[ ${#1} -gt 8 ]]; then\n        echo \"No\"\n    \
    \    return\n    fi\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*(\\.[a-zA-Z][a-zA-Z0-9]*)?$\
    \ ]]; then\n        local ext=$(echo $1 | grep -oE '\\.[a-zA-Z]+$')\n        if\
    \ [[ $ext == \".txt\" || $ext == \".exe\" || $ext == \".dll\" ]]; then\n     \
    \       echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n\
    \        echo \"No\"\n    fi", "    if [[ $1 =~ ^[a-zA-Z]\\w*\\.(txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  declare -i count=0\n    for (( i=0; i<${#1}; i++ )); do\n        if [[ ${1:$i:1}\
    \ =~ [0-9] ]]; then\n            (( count++ ))\n        fi\n    done\n    [[ ${1##*.}\
    \ =~ ^(txt|exe|dll)$ ]] && [[ ${count} -le 3 ]] && [[ ${1%%.*} =~ ^[a-zA-Z] ]]\
    \ && [[ $(grep -o \".\" <<< $1) == \".\" ]] && echo \"Yes\" || echo \"No\"", '    #
    Enter your code here', "\t# Variables\n\tlocal file_name=$1\n\tlocal file_count=$(echo\
    \ $file_name | grep -oE \"[0-9]\" | wc -l)\n\tlocal file_extension=$(echo $file_name\
    \ | cut -d \".\" -f 2)\n\tlocal file_prefix=$(echo $file_name | cut -d \".\" -f\
    \ 1)\n\tlocal file_length=$(echo $file_name | wc -c)\n\tlocal exten_count=$(echo\
    \ $file_name | grep -oE \"\\.\" | wc -l)\n\t# Checks\n\tif [ $file_count -gt 3\
    \ ]; then\n\t\techo \"No\"\n\telif [ $exten_count -ne 1 ]; then\n\t\techo \"No\"\
    \n\telif [ -z $file_prefix ]; then\n\t\techo \"No\"\n\telif [ -z $(echo $file_prefix\
    \ | grep -E \"[a-zA-Z]\") ]; then\n\t\techo \"No\"\n\telif [[ $file_length -le\
    \ 4 ]]; then\n\t\techo \"No\"\n\telif [[ $file_extension != \"txt\" && $file_extension\
    \ != \"exe\" && $file_extension != \"dll\" ]]; then\n\t\techo \"No\"\n\telse\n\
    \t\techo \"Yes\"\n\tfi", "    local FILE_NAME=$1\n    # Check the number of digits\
    \ in the file's name:\n    local N_DIGITS=$(echo \"$FILE_NAME\" | sed 's/[^0-9]//g'\
    \ | tr -d ' ' | wc -c)\n    if [[ \"$N_DIGITS\" -gt 3 ]]; then\n        echo \"\
    No\"\n        return\n    fi\n    # Check if the file's name contains exactly\
    \ one dot '.'\n    local N_DOTS=$(echo \"$FILE_NAME\" | tr -d ' ' | grep -o \"\
    .\" | wc -l)\n    if [[ \"$N_DOTS\" -ne 1 ]]; then\n        echo \"No\"\n    \
    \    return\n    fi\n    # Check if the substring before the dot is not empty,\
    \ and starts with a letter from \n    # the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    local SUBSTRING_BEFORE_DOT=$(echo \"$FILE_NAME\" | cut -d'.' -f1)\n    local\
    \ FIRST_CHAR=$(echo \"$SUBSTRING_BEFORE_DOT\" | cut -c1)\n    if [[ -z \"$SUBSTRING_BEFORE_DOT\"\
    \ ]] || \\\n       [[ \"$FIRST_CHAR\" =~ ^[a-zA-Z] ]]; then\n        echo \"No\"\
    \n        return\n    fi\n    # Check if the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n    local SUBSTRING_AFTER_DOT=$(echo \"$FILE_NAME\"\
    \ | cut -d'.' -f2)\n    if [[ \"$SUBSTRING_AFTER_DOT\" = \"txt\" ]] || \\\n  \
    \     [[ \"$SUBSTRING_AFTER_DOT\" = \"exe\" ]] || \\\n       [[ \"$SUBSTRING_AFTER_DOT\"\
    \ = \"dll\" ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n  \
    \  fi", "\tlocal file_name=\"$1\"\n\tlocal extension=\"${file_name##*.}\"\n\t\
    local name=\"${file_name%.*}\"\n\tlocal valid_extension_regex=\"^(txt|exe|dll)$\"\
    \n\tlocal valid_name_regex=\"^[a-zA-Z]{1}[a-zA-Z0-9]*$\"\n\tlocal valid_file_name_regex=\"\
    $valid_name_regex\\.$valid_extension_regex\"\n\tif [[ \"$file_name\" =~ $valid_file_name_regex\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", '  [[ $1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{1,2}[.](txt|exe|dll)$
    ]] && echo "Yes" || echo "No"', "    local filename=\"$1\"\n    # Your code goes\
    \ here\n    local name=${filename%%.*}\n    local extension=${filename#*.}\n \
    \   if [[ $filename =~ ^[a-zA-Z]+[0-9]{0,3}\\.?(txt|exe|dll)$ ]]; then\n     \
    \   echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    # The number of\
    \ digits in the file's name\n    DIGITS=$(echo \"$1\" | tr -d -c 0-9 | wc -c)\n\
    \    if [[ $DIGITS -gt 3 ]]; then\n        echo \"No\"\n        return\n    fi\n\
    \n    # The number of dots in the file's name\n    DOTS=$(echo \"$1\" | tr -d\
    \ -c . | wc -c)\n    if [[ $DOTS -ne 1 ]]; then\n        echo \"No\"\n       \
    \ return\n    fi\n\n    # The substring before the dot\n    before=$(echo \"$1\"\
    \ | cut -d \".\" -f 1)\n    if [[ -z $before ]]; then\n        echo \"No\"\n \
    \       return\n    fi\n    if [[ ! $before =~ ^[a-zA-Z] ]]; then\n        echo\
    \ \"No\"\n        return\n    fi\n\n    # The substring after the dot\n    after=$(echo\
    \ \"$1\" | cut -d \".\" -f 2)\n    if [[ $after != \"txt\" ]] && [[ $after !=\
    \ \"exe\" ]] && [[ $after != \"dll\" ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    echo \"Yes\"", "    # Check if the file contains 3 digits\n   \
    \ if [[ $1 =~ [0-9]{3} ]]; then\n        echo \"No\"\n        return\n    fi\n\
    \n    # Check if the file has exactly one dot\n    if [[ $1 =~ \\.[^\\.]+$ ]];\
    \ then\n        if [[ ! $1 =~ ^[a-zA-Z]+\\. ]]; then\n            echo \"No\"\n\
    \            return\n        fi\n    else\n        echo \"No\"\n        return\n\
    \    fi\n\n    # Check if the file contains [txt, exe, dll]\n    if [[ $1 =~ txt$\
    \ ]]; then\n        echo \"Yes\"\n        return\n    elif [[ $1 =~ exe$ ]]; then\n\
    \        echo \"Yes\"\n        return\n    elif [[ $1 =~ dll$ ]]; then\n     \
    \   echo \"Yes\"\n        return\n    else\n        echo \"No\"\n        return\n\
    \    fi", "    # The regex for the file name is:\n    # [a-zA-Z][a-zA-Z0-9]*(\\\
    .[a-zA-Z0-9]{0,3})?\\.(txt|exe|dll)\n    # It matches a string that starts with\
    \ a letter (a-z, A-Z) \n    # and followed by any number of letters and digits\
    \ (a-z, A-Z, 0-9).\n    # Then it matches the first dot if it exists followed\
    \ by 0 to 3 digits or letters\n    # then the second dot followed by 'txt', 'exe'\
    \ or 'dll'.\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]*(\\.[a-zA-Z0-9]{0,3})?\\.(txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  if ! [[ $1 =~ [a-zA-Z] ]]; then\n        echo \"No\"\n        return\n    fi\n\
    \    if ! [[ $1 =~ \\. ]]; then\n        echo \"No\"\n        return\n    fi\n\
    \    if [[ $1 =~ [[:digit:]]{4} ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    if ! [[ $1 =~ (\\.txt$)|(\\.exe$)|(\\.dll$) ]]; then\n        echo\
    \ \"No\"\n        return\n    fi\n    echo \"Yes\"", "\tlocal file_name=$1\n\t\
    local file_name_prefix\n\tlocal file_name_suffix\n\tlocal true=0\n\tlocal false=1\n\
    \tlocal is_dot_seen=$false\n\tlocal is_first_char_of_file_name_prefix_valid=$false\n\
    \tlocal is_file_name_suffix_valid=$false\n\tlocal is_digits_more_than_three=$false\n\
    \tlocal file_name_prefix_length\n\tlocal i\n\t\n\tif [[ $file_name == *.txt ]]\
    \ || [[ $file_name == *.exe ]] || [[ $file_name == *.dll ]]; then\n\t\tfile_name_prefix=${file_name%.*}\n\
    \t\tfile_name_suffix=${file_name##*.}\n\t\t\n\t\tif [[ -n $file_name_prefix ]];\
    \ then\n\t\t\tfile_name_prefix_length=${#file_name_prefix}\n\t\t\tfor (( i=0;\
    \ i<$file_name_prefix_length; i++ )); do\n\t\t\t\tif [[ ${file_name_prefix:$i:1}\
    \ == [0-9] ]]; then\n\t\t\t\t\tif [[ $i -eq 3 ]]; then\n\t\t\t\t\t\tis_digits_more_than_three=$true\n\
    \t\t\t\t\t\tbreak\n\t\t\t\t\tfi\n\t\t\t\telif [[ ${file_name_prefix:$i:1} == .\
    \ ]]; then\n\t\t\t\t\tis_dot_seen=$true\n\t\t\t\telif [[ ${file_name_prefix:$i:1}\
    \ == [a-zA-Z] ]]; then\n\t\t\t\t\tis_first_char_of_file_name_prefix_valid=$true\n\
    \t\t\t\tfi\n\t\t\tdone\n\t\t\t\n\t\t\tif [[ $is_first_char_of_file_name_prefix_valid\
    \ -eq $true ]] && [[ $is_dot_seen -eq $true ]] && [[ $is_digits_more_than_three\
    \ -eq $false ]]; then\n\t\t\t\tif [[ $file_name_suffix == txt ]", "\tstring=\"\
    $1\"\n\tif [[ $(echo \"$string\" | grep '\\d\\{4\\}') ]]; then\n\t\techo \"No\"\
    \n\t\treturn\n\tfi\n\tif [[ $(echo \"$string\" | grep -E '[a-zA-Z]{1}') ]]; then\n\
    \t\tif [[ $(echo \"$string\" | grep '\\.') ]]; then\n\t\t\tif [[ $(echo \"$string\"\
    \ | grep -E '[a-zA-Z]{1}\\.') ]]; then\n\t\t\t\tif [[ $(echo \"$string\" | grep\
    \ -E '[a-zA-Z]{1}\\.(txt|exe|dll)') ]]; then\n\t\t\t\t\techo \"Yes\"\n\t\t\t\t\
    \treturn\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n\techo \"No\"", "    if [[ \"$1\"\
    \ =~ ^[a-zA-Z][0-9]{0,3}\\.{1}(txt|exe|dll)$ ]]; then\n        echo \"Yes\"\n\
    \    else\n        echo \"No\"\n    fi", "  local file_name=$1\n  if [ ${#file_name}\
    \ -gt 3 ]; then\n    echo 'No'\n    return 0\n  fi\n  local num_of_dots=0\n  local\
    \ num_of_digits=0\n  for (( i=0; i<${#file_name}; i++ )); do\n    if [[ ${file_name:$i:1}\
    \ == '.' ]]; then\n      (( num_of_dots++ ))\n    elif [[ ${file_name:$i:1} =~\
    \ [0-9] ]]; then\n      (( num_of_digits++ ))\n    fi\n  done\n  if [[ $num_of_dots\
    \ != 1 || $num_of_digits -gt 3 ]]; then\n    echo 'No'\n    return 0\n  fi\n \
    \ local substring_before_dot=${file_name%%.*}\n  local substring_after_dot=${file_name#*.}\n\
    \  if [[ ${#substring_before_dot} == 0 || $substring_before_dot =~ [0-9] ]]; then\n\
    \    echo 'No'\n    return 0\n  fi\n  if [[ $substring_after_dot != 'txt' && $substring_after_dot\
    \ != 'exe' && $substring_after_dot != 'dll' ]]; then\n    echo 'No'\n    return\
    \ 0\n  fi\n  echo 'Yes'", "    local filename=$1\n    # check if there are 3 digits\n\
    \    if [[ \"$filename\" =~ ^[^0-9]*[0-9]{3}[^0-9]*$ ]]; then\n        echo \"\
    No\"\n        return\n    fi\n    # check if there is exactly one dot\n    if\
    \ [[ \"$filename\" =~ ^[^.]*[.]{2}[^.]*$ ]]; then\n        echo \"No\"\n     \
    \   return\n    fi\n    # check if the substring before the dot is not empty and\
    \ starts with [a-zA-Z]\n    local substring=$(echo \"$filename\" | cut -d'.' -f1)\n\
    \    if [[ -z \"$substring\" ]] || [[ ! \"$substring\" =~ ^[a-zA-Z] ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n    # check if the substring after\
    \ the dot is txt/exe/dll\n    substring=$(echo \"$filename\" | cut -d'.' -f2)\n\
    \    if [[ \"$substring\" != 'txt' ]] && [[ \"$substring\" != 'exe' ]] && \\\n\
    \       [[ \"$substring\" != 'dll' ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    echo \"Yes\"", "  # delete all digits\n  no_digits=${1//[0-9]/}\n\
    \  num_digits=$(( ${#1} - ${#no_digits} ))\n  if [[ $num_digits -gt 3 ]]; then\n\
    \    echo \"No\"\n    return 0\n  fi\n  # delete all letters\n  no_letters=${no_digits//[a-zA-Z]/}\n\
    \  num_letters=$(( ${#no_digits} - ${#no_letters} ))\n  if [[ $num_letters -eq\
    \ 0 ]]; then\n    echo \"No\"\n    return 0\n  fi\n  if [[ $no_letters != \".txt\"\
    \ && $no_letters != \".exe\" && $no_letters != \".dll\" ]]; then\n    echo \"\
    No\"\n    return 0\n  fi\n  echo \"Yes\"", "    local name=$1\n    local name_no_ext=${name%.*}\n\
    \    local ext=${name##*.}\n    local first_char=${name_no_ext:0:1}\n    local\
    \ digits=${name//[^0-9]}\n    if [[ ${#digits} -gt 3 ]]; then\n        echo 'No'\n\
    \    elif [[ $name != *\".\"* ]]; then\n        echo 'No'\n    elif [[ $first_char\
    \ != [a-zA-Z] ]]; then\n        echo 'No'\n    elif [[ $ext != 'txt' && $ext !=\
    \ 'exe' && $ext != 'dll' ]]; then\n        echo 'No'\n    else\n        echo 'Yes'\n\
    \    fi", "    local substring_after_dot;\n    local substring_before_dot;\n \
    \   local number_of_dots=$(echo \"$1\" | grep -oP \"\\.\" | wc -l);\n    local\
    \ number_of_digits=$(echo \"$1\" | grep -oP \"\\d\" | wc -l);\n    local dot_index=$(echo\
    \ \"$1\" | grep -oP \"\\.\" | head -n 1 | awk -F '.' '{print NF-1}');\n    substring_after_dot=$(echo\
    \ \"$1\" | awk -F \".\" '{print $NF}');\n    substring_before_dot=$(echo \"$1\"\
    \ | awk -F \".\" '{print $1}');\n    if [[ \"$number_of_dots\" -ne 1 ]] || [[\
    \ \"$number_of_digits\" -gt 3 ]] || \\\n    [[ \"${substring_before_dot:0:1}\"\
    \ =~ [a-zA-Z] ]] || \\\n    [[ \"$substring_after_dot\" != \"txt\" ]] && [[ \"\
    $substring_after_dot\" != \"exe\" ]] && \\\n    [[ \"$substring_after_dot\" !=\
    \ \"dll\" ]]; then\n        echo \"No\";\n    else\n        echo \"Yes\";\n  \
    \  fi", "\tif [[ ! -z $1 ]]; then\n\t\tregex=\"([a-z]|[A-Z])([a-z]|[A-Z]|[0-9])*\\\
    .[(txt)|(exe)|(dll)]$\"\n\t\tif [[ $1 =~ $regex ]]; then\n\t\t\techo \"Yes\"\n\
    \t\telse\n\t\t\techo \"No\"\n\t\tfi\n\tfi", "  local fileName=$1\n  local isValid=false\n\
    \  # Check if digits count is <= 3\n  local digitsCount=$(echo $fileName | grep\
    \ -o [0-9] | wc -l)\n  # Check if dots count is == 1\n  local dotsCount=$(echo\
    \ $fileName | grep -o '\\.' | wc -l)\n  if [ $digitsCount -gt 3 ]; then\n    echo\
    \ \"No\"\n    return 0\n  fi\n  if [ $dotsCount -ne 1 ]; then\n    echo \"No\"\
    \n    return 0\n  fi\n  # Get string before dot\n  local stringBeforeDot=${fileName%%.[a-zA-Z]*}\n\
    \  if [ -z $stringBeforeDot ]; then\n    echo \"No\"\n    return 0\n  fi\n  #\
    \ Get string after dot\n  local stringAfterDot=${fileName##*\\.}\n  if [ $stringAfterDot\
    \ != \"txt\" ] && [ $stringAfterDot != \"exe\" ] && [ $stringAfterDot != \"dll\"\
    \ ]; then\n    echo \"No\"\n    return 0\n  fi\n  # All checks passed, file is\
    \ valid\n  echo \"Yes\"", "  # Check if the string is empty or not\n  if [ -z\
    \ \"$1\" ]; then\n    echo \"No\"\n    return\n  fi\n\n  # Determine if the file's\
    \ name is valid or not\n  if [[ $1 =~ ([a-zA-Z]{1}[a-zA-Z0-9]{1,9}){1}\\.(txt|exe|dll)\
    \ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi", "    # Add your\
    \ code here.\n    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]+$ ]]; then\n\
    \        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    # Check if\
    \ the number of digits in the file's name is not more than 3\n    if [[ ${1} =~\
    \ [0-9]{4} ]]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check\
    \ if the file's name contains exactly one dot\n    if [[ !(${1} =~ \\.) || (${1}\
    \ =~ \\..*) ]]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check\
    \ if the file's name ends with one of the acceptable endings\n    ACCEPTABLE_ENDINGS=(\"\
    txt\" \"exe\" \"dll\")\n    for ending in ${ACCEPTABLE_ENDINGS[@]}; do\n     \
    \   if [[ ${1} =~ \\.\"${ending}\"$ ]]; then\n            echo \"Yes\"\n     \
    \       return\n        fi\n    done\n    echo \"No\"", "    filename=$1\n   \
    \ if [[ $(echo $filename | grep -E \"\\..*\") = '' ]]; then\n        echo \"No\"\
    \n        return\n    fi\n    if [[ $(echo $filename | grep -E \"^[a-zA-Z][^\\\
    .]*\\.[a-zA-Z]{3}$\") = '' ]]; then\n        echo \"No\"\n        return\n   \
    \ fi\n    if [[ $(echo $filename | grep -E \".*[^a-zA-Z0-9]{2,}.*\") != '' ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n    if [[ $(echo $filename\
    \ | grep -E \".*[0-9]{4,}.*\") != '' ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    if [[ $(echo $filename | grep -E \".*[a-zA-Z]{4,}.*\") != '' ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"", "\tif\
    \ [[ \"$1\" =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$ ]]; then\n\t\techo \"Yes\"\n\telif\
    \ [[ \"$1\" =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$ ]]; then\n\t\techo \"Yes\"\n\telif\
    \ [[ \"$1\" =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]]; then\n\t\techo \"Yes\"\n\telse\n\
    \t\techo \"No\"\n\tfi", "\tregex='^[a-zA-Z][0-9]{0,3}\\.txt$|^[a-zA-Z][0-9]{0,3}\\\
    .exe$|^[a-zA-Z][0-9]{0,3}\\.dll$'\n\tif [[ $1 =~ $regex ]]; then\n\t\techo 'Yes'\n\
    \telse\n\t\techo 'No'\n\tfi", "    # write your code here\n    # read(stdin) saves\
    \ \"1example.dll\" to a variable, not to a file\n    # so it is not possible to\
    \ compare a string with a file, \n    # and the following code is invalid\n  \
    \  #\n    #read file_name\n    #file_name=\"1example.dll\"\n    #\n    # if $(($(echo\
    \ $file_name | tr -d -c '0-9') | wc -c)) -gt 3; then\n    #     echo \"No\"\n\
    \    # fi\n    #\n    # if $(echo $file_name | grep -o \".\" | wc -l) -ne 1; then\n\
    \    #     echo \"No\"\n    # fi\n    #\n    # if $(echo $file_name | grep -o\
    \ \".\" | grep -o \"^[a-zA-Z]\"); then\n    #     echo \"No\"\n    # fi\n    #\n\
    \    # echo \"Yes\"\n    \n    # counter\n    count=0\n    # convert \"1example.dll\"\
    \ to \"1234example.dll\"\n    # the length of the file_name changes\n    file_name=$(echo\
    \ $1 | sed 's/[^0-9]/1/g')\n    # \"1example.dll\" to \"1111example.dll\"\n  \
    \  # len_1 is the original length of the string\n    len_1=${#file_name}\n   \
    \ # \"1111example.dll\" to \"1234example.dll\"\n    # len_2 is the final length\
    \ of the string\n    len_2=$(echo $file_name | tr -d -c '0-9' | wc -c)\n    #\
    \ if the string contains more than 3 digits,\n    # then the difference of the\
    \ two lengths is larger than 3\n    if [[ $(($len_1 - $len_2)) -gt 3 ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n    # \"1example.dll\" to \"example.dll\"\
    \n    file_name=$(echo $1 | sed 's/[0-9]//g')\n    # only if the file_name contains\
    \ only one dot,\n    # the length of the file_", "    # get the file name\n  \
    \  file_name=$1\n    # check number of digits in file name\n    re='[0-9]{4}'\n\
    \    if [[ $file_name =~ $re ]] ; then\n        echo \"No\"\n        return\n\
    \    fi\n    # check the file name contains only one '.'\n    num_dots=$(grep\
    \ -o \"\\.\" <<< $file_name | wc -l)\n    if [ $num_dots -ne 1 ] ; then\n    \
    \    echo \"No\"\n        return\n    fi\n    # check the substring before '.'\
    \ is not empty and starts with letter from latin alphabet\n    prefix=$(cut -d\
    \ '.' -f 1 <<< $file_name)\n    re='^[a-zA-Z]+$'\n    if [[ ! $prefix =~ $re ]]\
    \ ; then\n        echo \"No\"\n        return\n    fi\n    # check the substring\
    \ after '.' is one of these: ['txt', 'exe', 'dll']\n    suffix=$(cut -d '.' -f\
    \ 2 <<< $file_name)\n    if [[ $suffix != \"txt\" && $suffix != \"exe\" && $suffix\
    \ != \"dll\" ]] ; then\n        echo \"No\"\n        return\n    fi\n    echo\
    \ \"Yes\"", "    file_name=$1\n    if [[ $file_name =~ ^[a-zA-Z][0-9]{0,3}\\.txt$\
    \ || $file_name =~ ^[a-zA-Z][0-9]{0,3}\\.exe$ || $file_name =~ ^[a-zA-Z][0-9]{0,3}\\\
    .dll$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  '  # Implement your code here', "    valid_extensions=(txt exe dll)\n    if [[ $1\
    \ =~ ^[a-zA-Z]{1}[a-zA-Z0-9]*(\\.[a-zA-Z]{1,3}){1}$ ]]; then\n        name=${1%.*}\n\
    \        extension=${1##*.}\n        if [[ ${#name} -lt 10 ]] && [[ ${#name} -gt\
    \ 2 ]] && [[ ${#name} -ne ${#name//[0-9]/} ]]; then\n            for i in ${valid_extensions[@]};\
    \ do\n                if [[ $i == $extension ]]; then\n                    echo\
    \ \"Yes\"\n                    return\n                fi\n            done\n\
    \        fi\n    fi\n    echo \"No\"", "\techo -n $1 | grep -E '^[a-zA-Z]+[^\\\
    .]{0,3}[a-zA-Z]{3}[\\.]{1}(txt|exe|dll)$' | sed 's/^/No/' | sed 's/[a-zA-Z\\.]/Yes/g'",
  "\t[[ $1 =~ ^[a-zA-Z]*[0-9]{1,3}[a-zA-Z]*\\.(txt|exe|dll)$ ]] && echo Yes || echo\
    \ No", "\tif [[ $1 =~ ^[a-zA-Z]+[0-9]{1,3}?\\.txt$ || $1 =~ ^[a-zA-Z]+[0-9]{1,3}?\\\
    .exe$ || $1 =~ ^[a-zA-Z]+[0-9]{1,3}?\\.dll$ ]]; then\n\t\techo \"Yes\"\n\telse\n\
    \t\techo \"No\"\n\tfi", "\t# return \"No\" if number of digits in the file's name\
    \ is more than 3\n\t# use 'grep' and return value is greater than zero\n\tif [[\
    \ $(echo $1 | grep -o \"[0-9]\" | wc -l) -gt 3 ]]; then\n\t\techo \"No\"\n\t\t\
    return\n\tfi\n\n\t# return \"No\" if number of dot in the file's name is more\
    \ than one\n\t# use 'grep' and return value is greater than zero\n\tif [[ $(echo\
    \ $1 | grep -o \"\\.\" | wc -l) -gt 1 ]]; then\n\t\techo \"No\"\n\t\treturn\n\t\
    fi\n\n\t# use 'cut' to get substring before dot '.'\n\t# return \"No\" if substring\
    \ before dot has length is zero or it starts with a letter\n\t# use 'grep' and\
    \ return value is greater than zero\n\tif [[ $(echo $1 | cut -d '.' -f 1 | wc\
    \ -c) -eq 1 ]] || [[ $(echo $1 | cut -d '.' -f 1 | grep -o \"[a-zA-Z]\") -eq 0\
    \ ]]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\t# use 'cut' to get substring\
    \ after dot '.'\n\t# return \"No\" if substring after dot is not one of these:\
    \ ['txt', 'exe', 'dll']\n\t# use 'grep' and return value is zero\n\tif [[ $(echo\
    \ $1 | cut -d '.' -f 2 | grep -o \"txt\\|exe\\|dll\") -eq 0 ]]; then\n\t\techo\
    \ \"No\"\n\t\treturn\n\tfi\n\n\t# return \"Yes\" if above conditions are met\n\
    \techo \"Yes\"", "\tif [[ $1 =~ [0-9]{4} ]]; then\n\t\techo \"No\"\n\telif [[\
    \ ! ($1 =~ [a-zA-Z]+) ]]; then\n\t\techo \"No\"\n\telif [[ ! ($1 =~ [a-zA-Z]+[.][a-zA-Z]+)\
    \ ]]; then\n\t\techo \"No\"\n\telif [[ ! ($1 =~ [a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+)\
    \ ]]; then\n\t\techo \"No\"\n\telif [[ $1 =~ [a-zA-Z]+[.][a-zA-Z]+[.][a-zA-Z]+\
    \ ]]; then\n\t\techo \"No\"\n\telif [[ $1 =~ [a-zA-Z]+[.][a-zA-Z]+[.][t][x][t]\
    \ ]]; then\n\t\techo \"Yes\"\n\telif [[ $1 =~ [a-zA-Z]+[.][a-zA-Z]+[.][e][x][e]\
    \ ]]; then\n\t\techo \"Yes\"\n\telif [[ $1 =~ [a-zA-Z]+[.][a-zA-Z]+[.][d][l][l]\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "  local FILE=$1\n\
    \  local LETTER_SUBSTRING=\"$(echo \"$FILE\" | cut -d '.' -f 1)\"\n  local EXTENSION=\"\
    $(echo \"$FILE\" | cut -d '.' -f 2)\"\n  local NUMBER_OF_DIGITS=\"$(echo \"$LETTER_SUBSTRING\"\
    \ | grep -o '[0-9]' | wc -l)\"\n  local PATTERN=\"^[a-zA-Z]\\+.*$\"\n  if [ \"\
    $NUMBER_OF_DIGITS\" -gt 3 ]; then\n    echo \"No\"\n  elif [ \"$(echo \"$FILE\"\
    \ | grep -o '\\.' | wc -l)\" -ne 1 ]; then\n    echo \"No\"\n  elif [ -z \"$LETTER_SUBSTRING\"\
    \ ] || ! [[ \"$LETTER_SUBSTRING\" =~ $PATTERN ]]; then\n    echo \"No\"\n  elif\
    \ [ \"$EXTENSION\" != \"txt\" ] && [ \"$EXTENSION\" != \"exe\" ] && \\\n     \
    \  [ \"$EXTENSION\" != \"dll\" ]; then\n    echo \"No\"\n  else\n    echo \"Yes\"\
    \n  fi", "    if [[ \"$1\" =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[a-zA-Z]{3}$ ]]; then\n\
    \        if [[ \"$1\" =~ \\.txt$ ]] || [[ \"$1\" =~ \\.exe$ ]] || [[ \"$1\" =~\
    \ \\.dll$ ]]; then\n            echo \"Yes\"\n        else\n            echo \"\
    No\"\n        fi\n    else\n        echo \"No\"\n    fi", '    # Write your code
    here', "  # Remove all characters except letters, digits and the dot character\n\
    \  # and then delete the first character if it is a number\n  new_string=$(echo\
    \ $1 | tr -cd \"[a-zA-Z.0-9]\" | sed 's/^[0-9]//')\n  # Count the number of digits\
    \ in the string\n  digit_count=$(echo $new_string | grep -o \"[0-9]\" | wc -l)\n\
    \  if [ ${#new_string} -lt 5 ]\n  then\n    echo \"No\"\n  elif [ $digit_count\
    \ -gt 3 ]\n  then\n    echo \"No\"\n  elif [ $(echo $new_string | grep -o \".\"\
    \ | wc -l) -ne 1 ]\n  then\n    echo \"No\"\n  elif [ $(echo $new_string | grep\
    \ -o -E \"[a-zA-Z]+\\.\" | wc -l) -ne 1 ]\n  then\n    echo \"No\"\n  elif [ $(echo\
    \ $new_string | grep -o \"\\..*\" | wc -l) -ne 1 ]\n  then\n    echo \"No\"\n\
    \  elif [ $(echo $new_string | grep -o -E \"\\.(txt|exe|dll)$\" | wc -l) -ne 1\
    \ ]\n  then\n    echo \"No\"\n  else\n    echo \"Yes\"\n  fi", '    printf "No"',
  "    [ \"$(echo \"$1\" | sed -r 's/[^.]|^[a-zA-Z]|\\.[^txt|exe|dll]|\\.([^.]+){2}$|[0-9]{4}|^\\\
    .//g')\" ] && echo \"Yes\" || echo \"No\"", "\tlocal file_name=\"$1\"\n\techo\
    \ \"$file_name\" | grep -P '^[a-zA-Z]+\\.txt$\\|^[a-zA-Z]+\\.exe$\\|^[a-zA-Z]+\\\
    .dll$' > /dev/null && echo 'Yes' || echo 'No'", '    echo "No"', '    echo -n
    "Not Implemented"', "    local counter\n    local substring\n\n    counter=0\n\
    \    # Find the number of digits\n    for (( i=0; i<${#1}; i++ )); do\n      \
    \  if [[ ${1:$i:1} =~ [0-9] ]]; then\n            counter=$(( counter + 1 ))\n\
    \        fi\n    done\n    if [[ $counter -gt 3 ]]; then\n        echo \"No\"\n\
    \        return\n    fi\n\n    # Find the number of dots\n    if [[ ${1//[^.]/}\
    \ != \".\" ]]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check\
    \ the substring before the dot, and the substring after it\n    # Split the string\
    \ into two substrings, one before the dot, the other after it\n    substring=${1%%.*}\n\
    \    if [[ ! $substring =~ [a-zA-Z]+ ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    substring=${1#*.}\n    if [[ $substring != \"txt\" && $substring\
    \ != \"exe\" && $substring != \"dll\" ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    echo \"Yes\"", "    local -n f=$1\n    local front back\n    front=${f%%.*}\n\
    \    back=${f#*.}\n    if [[ ${front} =~ [^a-zA-Z0-9] ]]; then\n        echo \"\
    No\"\n        return\n    fi\n    if (( $(echo ${front} | wc -c) < 2 )); then\n\
    \        echo \"No\"\n        return\n    fi\n    if [[ ${back} =~ [^a-zA-Z0-9]\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n    if [[ ${back} =~\
    \ (txt|exe|dll) ]]; then\n        echo \"Yes\"\n        return\n    fi\n    echo\
    \ \"No\"", "\tif [ $# -ne 1 ]; then\n\t\techo \"Usage: file_name_check <filename>\"\
    \n\t\treturn 1\n\tfi\n\tfile_name=$1\n\tif [[ $file_name =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .txt$ || $file_name =~ ^[a-zA-Z]+[0-9]{0,3}\\.exe$ || $file_name =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .dll$ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "\tlocal -r\
    \ name=$1\n\tlocal -r number_of_digits=$(echo $name | sed -r 's/([0-9])/\\1/g'\
    \ | wc -c)\n\tlocal -r number_of_dots=$(echo $name | sed -r 's/\\./\\./g' | wc\
    \ -c)\n\tlocal -r first_letter=$(echo $name | sed -r 's/^([a-zA-Z]).*$/\\1/')\n\
    \tlocal -r last_part=$(echo $name | sed -r 's/^.*\\.//')\n\tif [ $number_of_digits\
    \ -gt 3 ] || [ $number_of_dots -ne 1 ] || [ \"$first_letter\" = \"\" ] || [ \"\
    $last_part\" != \"txt\" ] && [ \"$last_part\" != \"exe\" ] && [ \"$last_part\"\
    \ != \"dll\" ]; then\n\t\techo \"No\"\n\telse\n\t\techo \"Yes\"\n\tfi", "  local\
    \ filename=$1\n  if [ \"$(echo \"$filename\" | grep -E '^[a-zA-Z][a-zA-Z0-9]*\\\
    .[txd]{1,3}$')\" = \"\" ]; then\n    echo \"No\"\n  else\n    echo \"Yes\"\n \
    \ fi", "    # TODO: Write your code here\n    # Check the number of arguments\n\
    \    if [ $# -ne 1 ]; then\n        echo \"Error: illegal number of parameters\"\
    \n        return 1\n    fi\n\n    # Split the string by '.'\n    name=(${1//./\
    \ })\n    file_name=${name[0]}\n    extension=${name[1]}\n\n    # Check 1: Check\
    \ the file name\n    if [ -z \"$file_name\" ]; then\n        echo \"No\"\n   \
    \     return 1\n    fi\n\n    # Check 2: Check the number of digits in the file\
    \ name\n    number_of_digits=$(echo \"$file_name\" | grep -o '[0-9]' | wc -l)\n\
    \    if [ $number_of_digits -gt 3 ]; then\n        echo \"No\"\n        return\
    \ 1\n    fi\n\n    # Check 3: Check the first character of the file name\n   \
    \ first_char=$(echo \"$file_name\" | head -c 1)\n    if [[ \"$first_char\" =~\
    \ [a-zA-Z] ]]; then\n        echo \"Yes\"\n        return 0\n    else\n      \
    \  echo \"No\"\n        return 1\n    fi", "\t# TODO: Write a function which takes\
    \ a string as a parameter, and checks\n\t# whether the file's name is valid or\
    \ not.\n\t# Hint: Use Bash's built-in regex and comparison functions.\n\t# Hint:\
    \ You can use the command \"echo\" to check your results.\n\t# Example:\n\t# $\
    \ echo \"$(file_name_check \"example.txt\")\"\n\t# \"Yes\"\n\t# TODO: Replace\
    \ the first line with your code.\n\treturn", '  return 0;', "    local file_name=$1\n\
    \    local first_part=\"\"\n    local second_part=\"\"\n    # Check for the first\
    \ condition (no more than 3 digits)\n    for (( i=0; i<${#file_name}; i++ ));\
    \ do\n        if [[ ${file_name:$i:1} =~ ^[0-9]$ ]]; then\n            if [[ \"\
    ${#file_name}\" -ge 5 ]]; then\n                echo \"No\"\n                return\n\
    \            fi\n        fi\n    done\n    # Check for the second condition (contains\
    \ exactly one dot)\n    local num_of_dots=0\n    for (( i=0; i<${#file_name};\
    \ i++ )); do\n        if [[ ${file_name:$i:1} == \".\" ]]; then\n            ((\
    \ num_of_dots++ ))\n        fi\n    done\n    if [[ \"$num_of_dots\" -ne 1 ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n    # Check for the third\
    \ condition (substring before the dot should start with a\n    # latin letter,\
    \ and substring after the dot should be one of ['txt', 'exe', 'dll'])\n    if\
    \ [[ $file_name =~ ^([a-zA-Z])(.*)(\\..*)$ ]]; then\n        first_part=${BASH_REMATCH[1]}\n\
    \        second_part=${BASH_REMATCH[3]}\n        if [[ \"$second_part\" == \"\
    .txt\" || \"$second_part\" == \".exe\" || \"$second_part\" == \".dll\" ]]; then\n\
    \            echo \"Yes\"\n            return\n        fi\n    fi\n    echo \"\
    No\"", "\t# TODO implement this function\n\tresult='no'\n\tif [[ \"$1\" =~ ^[a-zA-Z][0-9]{0,3}(\\\
    .[a-zA-Z]{3}|\\.[a-zA-Z]{3})$ ]]; then\n\t\t[[ \"$1\" =~ ^[a-zA-Z] ]] && [[ \"\
    $1\" =~ ^[a-zA-Z][0-9]{0,3}$ ]] && [[ \"$1\" =~ ^[a-zA-Z][0-9]{0,3}\\.[a-zA-Z]{3}$\
    \ ]] && [[ \"$1\" =~ \\.[a-zA-Z]{3}$ ]] && [[ \"$1\" =~ ^[a-zA-Z][0-9]{0,3}\\\
    .[a-zA-Z]{3}$ ]] && [[ \"$1\" =~ ^[a-zA-Z][0-9]{0,3}\\.[a-zA-Z]{3}$ ]] && [[ \"\
    $1\" =~ \\.[a-zA-Z]{3}$ ]] && [[ \"$1\" =~ ^[a-zA-Z][0-9]{0,3}\\.[a-zA-Z]{3}$\
    \ ]] && [[ \"$1\" =~ \\.[a-zA-Z]{3}$ ]] && [[ \"$1\" =~ \\.[a-zA-Z]{3}$ ]] &&\
    \ [[ \"$1\" =~ \\.[a-zA-Z]{3}$ ]] && [[ \"$1\" =~ \\.[a-zA-Z]{3}$ ]] && [[ \"\
    $1\" =~ \\.[a-zA-Z]{3}$ ]] && [[ \"$1\" =~ \\.[a-zA-Z]{3}$ ]] && [[ \"$1\" =~\
    \ \\.[a-zA-Z]{3}$ ]] && [[ \"$1\" =~ \\.[a-zA-Z]{3}$ ]] && [[ \"$1\" =~ \\.[a-zA-Z]{3",
  "    if [[ $1 =~ ^[a-zA-Z]+[^0-9]+[^0-9][^0-9]*\\.(txt|exe|dll)$ ]]; then\n    \
    \    echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  local str=$1\n \
    \ # check if file name contains at most 3 numbers\n  if [[ \"${str}\" =~ ^([a-zA-Z]+[0-9]{0,3})\\\
    .(txt|exe|dll)$ ]]; then\n    # check if file name starts with a letter\n    if\
    \ [[ \"${BASH_REMATCH[1]}\" =~ ^[a-zA-Z]+[0-9]*$ ]]; then\n      echo \"Yes\"\n\
    \    else\n      echo \"No\"\n    fi\n  else\n    echo \"No\"\n  fi", "    # First\
    \ check if the number of digits is greater than 3\n    digits=$(echo $1 | sed\
    \ 's/[^0-9]//g' | wc -c)\n    if [ $digits -gt 3 ]; then\n        echo \"No\"\n\
    \        return\n    fi\n\n    # Check if there is only one dot in the string\n\
    \    dotCount=$(echo $1 | sed 's/[^.]//g' | wc -c)\n    if [ $dotCount -ne 1 ];\
    \ then\n        echo \"No\"\n        return\n    fi\n\n    # Check if the sub\
    \ string before the dot starts with a letter\n    beforeDot=$(echo $1 | cut -d\
    \ '.' -f 1)\n    if [[ ! $beforeDot =~ ^[a-zA-Z] ]]; then\n        echo \"No\"\
    \n        return\n    fi\n\n    # Check if the substring after the dot is valid\n\
    \    afterDot=$(echo $1 | cut -d '.' -f 2)\n    if [[ ! $afterDot =~ ^(txt|exe|dll)$\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n\n    echo \"Yes\"",
  "    # TODO your code here\n    local is_valid=0\n    local fname=$1\n    local\
    \ fname_part=${fname%.*}\n    local fname_ext=${fname##*.}\n    # there should\
    \ not be more than three digits ('0'-'9') in the file's name\n    # using regex\
    \ for this one\n    [[ $fname =~ [0-9]{4} ]] && return 1\n    # the file's name\
    \ contains exactly one dot '.'\n    # find the number of times the dot character\
    \ appears in the string\n    if [[ $(echo $fname | grep -o \"\\.\" | wc -l) -ne\
    \ 1 ]]; then\n        return 1\n    fi\n    # the substring before the dot should\
    \ not be empty, and it starts with a letter from the latin alphapet ('a'-'z' and\
    \ 'A'-'Z')\n    # check if there is something before the . and that the first\
    \ character is a letter\n    [[ ${#fname_part} -eq 0 ]] && return 1\n    [[ !\
    \ $fname_part =~ ^[a-zA-Z] ]] && return 1\n    # the substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll']\n    # use an array and loop through\
    \ it\n    local -a fname_ext_arr=(\"txt\" \"exe\" \"dll\")\n    for fname_ext_valid\
    \ in \"${fname_ext_arr[@]}\"; do\n        if [[ $fname_ext_valid == $fname_ext\
    \ ]]; then\n            is_valid=1\n            break\n        fi\n    done\n\
    \    [[ $is_valid -eq 0 ]] && return 1\n    echo \"Yes\"", "\t\n\t# check if the\
    \ file name contains more than 3 digits\n\tif [[ $1 =~ [0-9]{4} ]]; then\n\t\t\
    return \"No\"\n\tfi\n\n\t# check if the file name contains only one dot\n\tdot_count=$(echo\
    \ $1 | grep -o \"\\.\" | wc -l)\n\tif [[ $dot_count -gt 1 ]]; then\n\t\treturn\
    \ \"No\"\n\tfi\n\n\t# check if the substring before the dot is not empty and starts\
    \ with a letter\n\t# from the latin alphabet\n\tbefore_dot=$(echo $1 | cut -d\
    \ '.' -f 1)\n\tif [[ $before_dot =~ [a-zA-Z]+ ]]; then\n\t\t# check if the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n\t\tif [[ $1 =~ txt$ ||\
    \ $1 =~ exe$ || $1 =~ dll$ ]]; then\n\t\t\treturn \"Yes\"\n\t\tfi\n\tfi\n\n\t\
    return \"No\"", '    # Write your code here...', "\tlocal str=$1\n\t# check if\
    \ the substring before the dot is empty\n\tif [[ ! -z ${str%%.*} ]]; then\n\t\t\
    # check if the file name is valid\n\t\tif [[ ${str} =~ ^([a-zA-Z]{1}[a-zA-Z0-9]{0,3})\\\
    .(txt|exe|dll)$ ]]; then\n\t\t\techo \"Yes\"\n\t\telse\n\t\t\techo \"No\"\n\t\t\
    fi\n\telse\n\t\techo \"No\"\n\tfi", "    if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[tT][xX][tT]$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[eE][xX][eE]$ ]]; then\n        echo \"Yes\"\n    elif [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .[dD][lL][lL]$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi", "    local fileName=\"$1\"\n    if [[ ${fileName: -4} != \".txt\" &&\
    \ ${fileName: -4} != \".exe\" && ${fileName: -4} != \".dll\" ]]; then\n      \
    \  echo \"No\"\n        return 1\n    fi\n    if [[ ! ${fileName:0:1} =~ [a-zA-Z]\
    \ ]]; then\n        echo \"No\"\n        return 1\n    fi\n    if [[ ${fileName}\
    \ =~ [[:digit:]]{4} ]]; then\n        echo \"No\"\n        return 1\n    fi\n\
    \    if [[ ${fileName} =~ [^.]{2,}\\. ]]; then\n        echo \"No\"\n        return\
    \ 1\n    fi\n    echo \"Yes\"\n    return 0", "\t# check the number of dots\n\t\
    num_of_dots=$(grep -o \"\\.\" <<< $1 | wc -l)\n\tif [ $num_of_dots -ne 1 ]; then\n\
    \t\techo \"No\"\n\t\treturn\n\tfi\n\n\t# check that the substring before the dot\
    \ starts with a latin letter\n\tsubstr_before_dot=$(cut -d '.' -f 1 <<< $1)\n\t\
    substr_before_dot_first_char=$(head -c 1 <<< $substr_before_dot)\n\tsubstr_before_dot_valid_chars=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n\
    \tif [[ $substr_before_dot_valid_chars != *$substr_before_dot_first_char* ]];\
    \ then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\t# check that the substring after\
    \ the dot is one of ['txt', 'exe', 'dll']\n\tsubstr_after_dot=$(cut -d '.' -f\
    \ 2 <<< $1)\n\tif [[ $substr_after_dot != 'txt' && $substr_after_dot != 'exe'\
    \ && $substr_after_dot != 'dll' ]]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\
    \t# check that there are no more than 3 digits\n\tnum_of_digits=$(grep -o \"[0-9]\"\
    \ <<< $1 | wc -l)\n\tif [ $num_of_digits -gt 3 ]; then\n\t\techo \"No\"\n\t\t\
    return\n\tfi\n\n\techo \"Yes\"", "    # Write your code here\n    if [[ \"$1\"\
    \ =~ ^[a-zA-Z]{1}[^.{2}]*\\.txt$ ]]; then\n        echo \"Yes\"\n    elif [[ \"\
    $1\" =~ ^[a-zA-Z]{1}[^.{2}]*\\.exe$ ]]; then\n        echo \"Yes\"\n    elif [[\
    \ \"$1\" =~ ^[a-zA-Z]{1}[^.{2}]*\\.dll$ ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi", "\tcount=0\n\tfor (( i=0; i<${#1}; i++ )); do\n\
    \t\tif [ $1[$i] -eq '.' ]; then\n\t\t\tif [ $count -gt 3 ]; then\n\t\t\t\treturn\
    \ \"No\"\n\t\t\tfi\n\t\tfi\n\t\tif [ $1[$i] -eq '.' ]; then\n\t\t\tif [ $1[i+1]\
    \ -eq 't' ] || [ $1[i+1] -eq 'e' ] || [ $1[i+1] -eq 'd' ]; then\n\t\t\t\treturn\
    \ \"Yes\"\n\t\t\tfi\n\t\tfi\n\t\tif [ $1[$i] -eq '.' ]; then\n\t\t\tif [ $1[i-1]\
    \ -eq '0' ] || [ $1[i-1] -eq '1' ] || [ $1[i-1] -eq '2' ] || [ $1[i-1] -eq '3'\
    \ ] || [ $1[i-1] -eq '4' ] || [ $1[i-1] -eq '5' ] || [ $1[i-1] -eq '6' ] || [\
    \ $1[i-1] -eq '7' ] || [ $1[i-1] -eq '8' ] || [ $1[i-1] -eq '9' ]; then\n\t\t\t\
    \tcount=$((count+1))\n\t\t\tfi\n\t\tfi\n\tdone", "    file_name=$1\n    if echo\
    \ $file_name | egrep '^[a-zA-Z]\\w{0,10}[.]txt$|^[a-zA-Z]\\w{0,10}[.]exe$|^[a-zA-Z]\\\
    w{0,10}[.]dll$' > /dev/null\n    then\n        echo \"Yes\"\n    else\n      \
    \  echo \"No\"\n    fi", "    local file=$1\n    local basename=$(basename \"\
    $file\")\n    if [[ ! $basename =~ ^[a-zA-Z]\\w{1,2}\\.txt$ ]] && [[ ! $basename\
    \ =~ ^[a-zA-Z]\\w{1,2}\\.exe$ ]] && [[ ! $basename =~ ^[a-zA-Z]\\w{1,2}\\.dll$\
    \ ]]; then\n        echo \"No\"\n    else\n        echo \"Yes\"\n    fi", "  \
    \  if [[ $1 =~ ^[a-zA-Z]\\w{1,8}[0-9]{0,3}\\.(txt|exe|dll)$ ]]; then\n       \
    \ echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    # Check if there\
    \ are more than 3 digits\n    if [[ $(echo $1 | grep -o [0-9] | wc -l) -gt 3 ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n\n    # Check if there is\
    \ more than one dot\n    if [[ $(echo $1 | grep -o \\. | wc -l) -ne 1 ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n\n    # Find the substring before\
    \ the dot\n    file_name=$(echo $1 | cut -d \".\" -f 1)\n\n    # Check if the\
    \ substring before the dot is empty, or contains non alphapet characters\n   \
    \ if [[ -z $file_name ]] || [[ $(echo $file_name | grep -v [a-zA-Z] | wc -l) -ne\
    \ 0 ]]; then\n        echo \"No\"\n        return\n    fi\n\n    # Check if the\
    \ substring after the dot is one of the wanted ones\n    if [[ $(echo $1 | cut\
    \ -d \".\" -f 2) != \"txt\" ]] && [[ $(echo $1 | cut -d \".\" -f 2) != \"exe\"\
    \ ]] && [[ $(echo $1 | cut -d \".\" -f 2) != \"dll\" ]]; then\n        echo \"\
    No\"\n        return\n    fi\n\n    echo \"Yes\"", "    file_name=$1\n\n    if\
    \ [[ $file_name =~ ^[a-zA-Z][0-9]{0,3}(\\.[txd]{3})$ ]]; then\n        echo \"\
    Yes\"\n    else\n        echo \"No\"\n    fi", "  local name=$1\n  if [[ $name\
    \ =~ ^[a-zA-Z]+(\\.[a-zA-Z]+)+$ ]]; then\n    if [[ $name =~ (\\.txt$)|(\\.exe$)|(\\\
    .dll$) ]]; then\n      echo \"Yes\"\n    else\n      echo \"No\"\n    fi\n  else\n\
    \    echo \"No\"\n  fi", "    if [[ ! $1 =~ ([a-zA-Z]+)([0-9]{0,3})\\.(txt|exe|dll)\
    \ ]]; then\n        echo \"No\"\n    else\n        echo \"Yes\"\n    fi", "  \
    \  declare -i count\n    count=0\n    for (( i=0; i<${#1}; i++ )); do\n      \
    \  if [[ ${1:$i:1} =~ [0-9] ]]; then\n            count=$((count+1))\n       \
    \ fi\n    done\n    echo $count\n    if [[ $count -gt 3 ]]; then\n        echo\
    \ \"No\"\n        return\n    fi\n    if [[ ${1##*.} != \"txt\" && ${1##*.} !=\
    \ \"exe\" && ${1##*.} != \"dll\" ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    if [[ ${1%.*} =~ ^[a-zA-Z] ]]; then\n        echo \"Yes\"\n    else\n\
    \        echo \"No\"\n    fi", "    # this is the main function.\n    # your code\
    \ goes here.\n    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.txt$ || $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\\
    .exe$ || $1 =~ ^[a-zA-Z]+[0-9]{0,3}\\.dll$ ]]; then\n        echo \"Yes\"\n  \
    \  else\n        echo \"No\"\n    fi", "    if [[ $1 =~ ^([a-zA-Z]+[0-9]{0,3})\\\
    .(txt|exe|dll)$ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n\
    \    fi", "    # write your solution here\n    if [[ \"$1\" =~ ^[a-zA-Z]+[a-zA-Z0-9]*(\\\
    .txt|\\.exe|\\.dll)$ ]]; then\n\t    local name=${1%%.*} #save the substring before\
    \ the dot\n\t    if [[ \"$name\" =~ ^[a-zA-Z]+[a-zA-Z0-9]*$ ]]; then\n\t\t   \
    \ local i=0\n\t\t    for ((j=0; j<${#name}; j++)); do\n\t\t\t    if [[ \"${name:$j:1}\"\
    \ =~ ^[0-9]$ ]]; then\n\t\t\t\t    i=$((i+1))\n\t\t\t    fi\n\t\t    done\n\t\t\
    \    if [[ $i -le 3 ]]; then\n\t\t\t    echo \"Yes\"\n\t\t    else\n\t\t\t   \
    \ echo \"No\"\n\t\t    fi\n\t    else\n\t\t    echo \"No\"\n\t    fi\n    else\n\
    \t    echo \"No\"\n    fi", "    if [[ ! $1 =~ ^[a-zA-Z][a-zA-Z0-9]*.[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]?$\
    \ ]]; then\n        echo \"No\"\n    elif [[ ! $1 =~ ^[a-zA-Z]+(.[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]?)?$\
    \ ]]; then\n        echo \"No\"\n    elif [[ ! $1 =~ [a-zA-Z0-9]+.[txt|exe|dll]$\
    \ ]]; then\n        echo \"No\"\n    else\n        echo \"Yes\"\n    fi", "  \
    \  # not_allowed_characters are all the characters that are not in the latin alphabet\n\
    \    not_allowed_characters=\"1234567890!@#$%^&*()-_+=~`[]\\{}|;:'\\\",<>?/\"\n\
    \    # if the file's name contains no digits, and it contains exactly one dot,\
    \ and \n    # it contains no other characters than the latin alphabet, the digits\
    \ and the dot,\n    # then the name is valid.\n    if [[ \"$1\" =~ ^[^[:digit:]]*[0-9]{1,3}[^[:digit:]]*[.]{1}[^[:digit:]]*$\
    \ ]] && \\\n       [[ \"$1\" =~ [^[:alnum:]] ]] && \\\n       [[ ! \"$1\" =~ [[:punct:]]\
    \ ]]\n    then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi",
  "\t(( $(echo \"$1\" | tr -cd 0-9 | wc -c) > 3 )) && echo \"No\" && return\n\tcount=$(echo\
    \ \"$1\" | grep -o -E \"\\..*\" | grep -o -E \"\\.\" | wc -l)\n\tif (( count >\
    \ 1 ))\n\tthen\n\t\techo \"No\"\n\t\treturn\n\tfi\n\tprefix=$(echo \"$1\" | grep\
    \ -o -E \"^[a-zA-Z]+\")\n\tsuffix=$(echo \"$1\" | grep -o -E \"\\..*\" | grep\
    \ -o -E \"[a-zA-Z]+\")\n\tif [[ -z \"$prefix\" || -z \"$suffix\" ]]\n\tthen\n\t\
    \techo \"No\"\n\t\treturn\n\tfi\n\tif [[ \"$suffix\" != \"txt\" && \"$suffix\"\
    \ != \"exe\" && \"$suffix\" != \"dll\" ]]\n\tthen\n\t\techo \"No\"\n\t\treturn\n\
    \tfi\n\techo \"Yes\"", "  if [ $# -ne 1 ]; then\n    echo \"Usage: file_name_check\
    \ <filename>\"\n    return 1\n  fi\n  if [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}\\\
    .txt$ ]]; then\n    echo \"Yes\"\n  elif [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}\\\
    .exe$ ]]; then\n    echo \"Yes\"\n  elif [[ $1 =~ ^[a-zA-Z][^0-9]*[0-9]{0,3}\\\
    .dll$ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi", "    # Add your\
    \ code here\n    echo \"\"", "    local file_name=\"$1\"\n    # Check if the file\
    \ name contains more than three digits.\n    if [[ \"$file_name\" =~ [0-9]{4}\
    \ ]]; then\n        echo \"No\"\n        return\n    fi\n    # Check if the file\
    \ name contains one dot.\n    if [[ \"$file_name\" =~ \\. ]]; then\n        local\
    \ start=${file_name%%.*}\n        local end=${file_name#*.}\n        # Check if\
    \ the substring before the dot is empty.\n        if [[ -z \"$start\" ]]; then\n\
    \            echo \"No\"\n            return\n        fi\n        # Check if the\
    \ substring before the dot starts with a letter from the latin alphabet.\n   \
    \     if [[ \"$start\" =~ ^[a-zA-Z] ]]; then\n            # Check if the substring\
    \ after the dot is one of these: ['txt', 'exe', 'dll']\n            if [[ \"$end\"\
    \ =~ txt|exe|dll ]]; then\n                echo \"Yes\"\n                return\n\
    \            fi\n        fi\n    fi\n    echo \"No\"", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}(\\\
    .[a-zA-Z]{3})$ ]]; then\n        string=${BASH_REMATCH[1]}\n        if [[ $string\
    \ == \".txt\" || $string == \".exe\" || $string == \".dll\" ]]; then\n       \
    \     echo \"Yes\"\n        else\n            echo \"No\"\n        fi\n    else\n\
    \        echo \"No\"\n    fi", "    # the first part is a regex that takes any\
    \ string\n    # until the first \".\" and checks it meets the following conditions:\n\
    \    # - a string that is not empty starts with a letter\n    # - followed by\
    \ at most three numbers\n    # and it should be captured in the first group\n\
    \    #\n    # the second part is a regex that takes any string\n    # after the\
    \ first \".\" and checks it meets the following conditions:\n    # - it is one\
    \ of the following strings:\n    #   - \"txt\"\n    #   - \"exe\"\n    #   - \"\
    dll\"\n    # and it should be captured in the second group\n    echo \"$1\" |\
    \ grep -E '^([a-zA-Z]+[0-9]{0,3})\\.(txt|exe|dll)$' > /dev/null\n    if [ $? -eq\
    \ 0 ]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", " \
    \   # Check if a string has more than three digits ('0'-'9')\n    # $1 is a string\n\
    \    has_three_digits() {\n        if [ -z \"$(echo \"$1\" | grep -E '^[^0-9]*[0-9][^0-9]*[0-9][^0-9]*[0-9][^0-9]*$')\"\
    \ ]; then\n            echo \"false\"\n        else\n            echo \"true\"\
    \n        fi\n    }\n\n    # Check if a string has exactly one dot '.'\n    #\
    \ $1 is a string\n    has_one_dot() {\n        if [ -z \"$(echo \"$1\" | grep\
    \ -E '^[^.]*\\.[^.]*$')\" ]; then\n            echo \"false\"\n        else\n\
    \            echo \"true\"\n        fi\n    }\n\n    # Check if a string starts\
    \ with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n    # $1 is a string\n\
    \    starts_with_letter() {\n        if [ -z \"$(echo \"$1\" | grep -E '^[a-zA-Z]')\"\
    \ ]; then\n            echo \"false\"\n        else\n            echo \"true\"\
    \n        fi\n    }\n\n    # Check if a string ends with one of these: ['txt',\
    \ 'exe', 'dll']\n    # $1 is a string\n    ends_with_valid_extension() {\n   \
    \     if [ -z \"$(echo \"$1\" | grep -E '(txt|exe|dll)$')\" ]; then\n        \
    \    echo \"false\"\n        else\n            echo \"true\"\n        fi\n   \
    \ }\n\n    if [ $(has_three_digits \"$1\") = \"true\" ]; then\n        echo \"\
    No\"\n    elif [ $(has_one_dot \"$1\") = \"false\" ]; then\n        echo \"No\"\
    \n    elif [ $(starts_with_letter \"$(echo \"$1\" | cut -d'.' -f1)\") = \"false\"\
    \ ]; then\n        echo \"No\"\n    elif [ $(ends_with_valid_extension \"$1\"\
    ) = \"false\" ]; then\n       ", "    local file_name=$1\n\n    ## Validating\
    \ the number of digits in the file's name.\n    [[ \"${file_name}\" =~ ^([^0-9]*[0-9]){4,}\
    \ ]] && return 1\n\n    ## Validating the file's name contains exactly one dot\
    \ '.'\n    [[ \"${file_name}\" =~ ^.*\\..*\\..*$ ]] && return 1\n    [[ ! \"${file_name}\"\
    \ =~ ^.*\\..*$ ]] && return 1\n\n    ## Validating the substring before the dot\
    \ is not empty, and it starts with a letter\n    [[ ! \"${file_name}\" =~ ^[a-zA-Z].*\\\
    ..*$ ]] && return 1\n\n    ## Validating the substring after the dot is one of\
    \ ['txt', 'exe', 'dll']\n    [[ ! \"${file_name}\" =~ ^.*\\.(txt|exe|dll)$ ]]\
    \ && return 1\n\n    return 0", "\tif [[ ! \"$1\" =~ ^[a-zA-Z]+[0-9]{0,3}(\\.[a-zA-Z]+|\\\
    .[a-zA-Z]+\\.[a-zA-Z]+)$ ]]; then\n\t\techo \"No\"\n\telse\n\t\techo \"Yes\"\n\
    \tfi", "    local FILE_NAME=$1\n    local -r NUMBERS='[0-9]'\n    local -r ALPHA='[a-zA-Z]'\n\
    \    local -r ALPHANUMERIC='[a-zA-Z0-9]'\n    local -r DOT='\\.'\n    local -r\
    \ ACCEPTABLE_EXTENSIONS='(txt|exe|dll)'\n    local -r REGEX=\"^$ALPHA$ALPHANUMERIC{0,100}$DOT$ACCEPTABLE_EXTENSIONS$\"\
    \n    local REGEX_MATCH\n\n    # echo $FILE_NAME\n    # echo $REGEX\n    REGEX_MATCH=$(echo\
    \ $FILE_NAME | grep -qE \"$REGEX\")\n    # echo \"REGEX_MATCH: $REGEX_MATCH\"\n\
    \    if [[ \"$REGEX_MATCH\" = \"\" ]]; then\n        echo \"No\"\n    else\n \
    \       echo \"Yes\"\n    fi", "    file_name=$1\n\n    # [a-z] === [abcdefghijklmnopqrstuvwxyz]\n\
    \    # [A-Z] === [ABCDEFGHIJKLMNOPQRSTUVWXYZ]\n    # [[:digit:]] === [0-9]\n \
    \   # *:0 or more\n    # +:1 or more\n    # ?:0 or 1\n    # .: Any single character\
    \ except newline(\n    # ^: Match at the beginning of a line\n    # $: Match at\
    \ the end of a line\n    if [[ $file_name =~ ^[a-zA-Z][a-zA-Z0-9]*[.](txt|exe|dll)$\
    \ ]]; then\n        echo 'Yes'\n    else\n        echo 'No'\n    fi", "    # regex:\
    \ start with a letter, followed by zero or more letters and digits, \n    # followed\
    \ by exactly one dot, followed by three letters.\n    echo \"$1\" | grep -q -E\
    \ '^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z][a-zA-Z][a-zA-Z]$'\n    if [ $? -eq 0 ]; then\n\
    \        echo \"$1\" | grep -q -E '[0-9]{4}'\n        if [ $? -eq 0 ]; then\n\
    \            echo \"No\"\n        else\n            echo \"Yes\"\n        fi\n\
    \    else\n        echo \"No\"\n    fi", "\tif [ ! -z \"$1\" ]; then\n\t\t# echo\
    \ \"$1\"\n\t\tfile_name=$(echo \"$1\" | cut -d \".\" -f 1)\n\t\textension=$(echo\
    \ \"$1\" | cut -d \".\" -f 2)\n\t\t# if [ -z \"$file_name\" ]; then\n\t\t# \t\
    return 0\n\t\t# fi\n\t\t# echo \"file_name=$file_name\"\n\t\t# echo \"extension=$extension\"\
    \n\t\tif ! [[ \"$file_name\" =~ ^[a-zA-Z]+$ ]]; then\n\t\t\techo \"No\"\n\t\t\
    elif ! [[ \"$file_name\" =~ ^[a-zA-Z]+[0-9]{0,3}$ ]]; then\n\t\t\techo \"No\"\n\
    \t\telif [ \"$extension\" != \"txt\" ] && [ \"$extension\" != \"exe\" ] && [ \"\
    $extension\" != \"dll\" ]; then\n\t\t\techo \"No\"\n\t\telse\n\t\t\techo \"Yes\"\
    \n\t\tfi\n\tfi", "    # Write your code here\n    #\n    local name=$1\n    local\
    \ name_pattern=\"^[a-zA-Z][^0-9]*[0-9]{0,3}(\\.[a-zA-Z][^0-9]*[0-9]{0,3}){0,1}\\\
    .(txt|exe|dll)$\"\n    if [[ \"$name\" =~ $name_pattern ]]; then\n        echo\
    \ \"Yes\"\n    else\n        echo \"No\"\n    fi", "    SUBSTRING_BEFORE_DOT=${1%.*}\n\
    \    SUBSTRING_AFTER_DOT=${1#*.}\n    echo $SUBSTRING_BEFORE_DOT\n    echo $SUBSTRING_AFTER_DOT\n\
    \    if [[ $SUBSTRING_BEFORE_DOT =~ ^[a-zA-Z]{1}[a-zA-Z0-9]*$ ]] && \\\n     \
    \  [[ $SUBSTRING_AFTER_DOT =~ ^(txt|exe|dll)$ ]] && \\\n       [[ $SUBSTRING_BEFORE_DOT\
    \ =~ [0-9]{4}$ ]] && \\\n       [[ $SUBSTRING_BEFORE_DOT =~ ^[^.]*$ ]] && \\\n\
    \       [[ $SUBSTRING_AFTER_DOT =~ ^[^.]*$ ]] && \\\n       [[ $SUBSTRING_BEFORE_DOT\
    \ =~ ^[^-]*$ ]] && \\\n       [[ $SUBSTRING_AFTER_DOT =~ ^[^-]*$ ]] && \\\n  \
    \     [[ $SUBSTRING_BEFORE_DOT =~ ^[^_]*$ ]] && \\\n       [[ $SUBSTRING_AFTER_DOT\
    \ =~ ^[^_]*$ ]]\n    then\n        echo \"Yes\"\n    else\n        echo \"No\"\
    \n    fi", "  local file_name=\"$1\"\n  if [ -z \"$file_name\" ]; then\n    echo\
    \ \"No\"\n    return\n  fi\n  local substring_after_dot=\"${file_name##*.}\"\n\
    \  if [ \"$substring_after_dot\" != \"txt\" ] && [ \"$substring_after_dot\" !=\
    \ \"exe\" ] &&\n    [ \"$substring_after_dot\" != \"dll\" ]; then\n    echo \"\
    No\"\n    return\n  fi\n  local substring_before_dot=\"${file_name%.*}\"\n  if\
    \ [[ \"$substring_before_dot\" =~ ^[a-zA-Z]+$ ]]; then\n    echo \"Yes\"\n   \
    \ return\n  fi\n  echo \"No\"", "\t# Your code goes here...", "  # Write your\
    \ code here\n  # Your code should return \"Yes\" or \"No\"", "\t# Find all the\
    \ digits in the given string\n\tdigits=\"$(echo \"$1\" | grep -o '[0-9]')\"\n\t\
    # Check if the number of digits is greater than three\n\tif [ \"${#digits}\" -gt\
    \ 3 ]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\t# Check if the number of dots\
    \ is greater than one\n\tif [ \"$(echo \"$1\" | grep -o '\\.' | wc -l)\" -gt 1\
    \ ]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\t# Check if the number of dots\
    \ is less than one\n\tif [ \"$(echo \"$1\" | grep -o '\\.' | wc -l)\" -lt 1 ];\
    \ then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\t# Check if the substring after the\
    \ dot is none of these: ['txt', 'exe', 'dll']\n\tsubstring_after_dot=\"$(echo\
    \ \"$1\" | grep -o '\\.[a-zA-Z]*$')\"\n\tif [ \"$substring_after_dot\" != \".txt\"\
    \ ] && [ \"$substring_after_dot\" != \".exe\" ] &&\n\t\t\t[ \"$substring_after_dot\"\
    \ != \".dll\" ]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\t# Check if the substring\
    \ before the dot is empty, or starts with a non-alphabetical\n\t# character\n\t\
    substring_before_dot=\"$(echo \"$1\" | grep -o '^[a-zA-Z]*')\"\n\tif [ -z \"$substring_before_dot\"\
    \ ] || \n\t\t\t[ \"$(echo \"$substring_before_dot\" | grep -o '^[a-zA-Z]')\" ==\
    \ \"\" ]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\techo \"Yes\"", "\t# put you\
    \ code here\n    match=0\n    regex1='^[a-zA-Z]+[a-zA-Z0-9]*\\.txt$'\n    regex2='^[a-zA-Z]+[a-zA-Z0-9]*\\\
    .exe$'\n    regex3='^[a-zA-Z]+[a-zA-Z0-9]*\\.dll$'\n    if [[ $1 =~ $regex1 ]]\n\
    \    then\n        match=1\n    elif [[ $1 =~ $regex2 ]]\n    then\n        match=1\n\
    \    elif [[ $1 =~ $regex3 ]]\n    then\n        match=1\n    fi\n    if [ $match\
    \ -eq 1 ]\n    then\n        echo \"Yes\"\n    else\n        echo \"No\"\n   \
    \ fi\n    return 0", "  i=0\n  end=0\n  b=0\n  if [ -z \"$1\" ]; then\n    echo\
    \ \"No\"\n    return 0\n  fi\n  if [[ $1 == *\"..\"* ]]; then\n    echo \"No\"\
    \n    return 0\n  fi\n  for (( c=0; c<${#1}; c++ )); do\n    if [ ${1:$c:1} ==\
    \ \".\" ]; then\n      if [ $i -eq 0 ]; then\n        echo \"No\"\n        return\
    \ 0\n      fi\n      i=0\n      end=0\n      b=1\n    elif [ $b -eq 0 ]; then\n\
    \      if [[ ${1:$c:1} =~ [0-9] ]]; then\n        i=$((i+1))\n      fi\n     \
    \ if [ $i -gt 3 ]; then\n        echo \"No\"\n        return 0\n      fi\n   \
    \ elif [ $b -eq 1 ]; then\n      if [[ ! \"${1:$c:3}\" =~ ^(txt|exe|dll)$ ]];\
    \ then\n        echo \"No\"\n        return 0\n      fi\n      end=1\n      break\n\
    \    fi\n  done\n  if [ $end -eq 0 ]; then\n    echo \"No\"\n    return 0\n  fi\n\
    \  if [[ ! ${1:0:1} =~ [a-zA-Z] ]]; then\n    echo \"No\"\n    return 0\n  fi\n\
    \  echo \"Yes\"", "\tcheck_number=$(echo \"$1\" | sed 's/[^0-9]//g' | wc -c)\n\
    \tif [ $check_number -gt 3 ]; then\n\t\techo \"No\"\n\t\treturn 1\n\tfi\n\tif\
    \ [ $(echo \"$1\" | grep -c '\\.') -ne 1 ]; then\n\t\techo \"No\"\n\t\treturn\
    \ 1\n\tfi\n\tif [ $(echo \"$1\" | grep -c '^[a-zA-Z]') -ne 1 ]; then\n\t\techo\
    \ \"No\"\n\t\treturn 1\n\tfi\n\tif [ $(echo \"$1\" | grep -c '\\.[a-zA-Z][a-zA-Z][a-zA-Z]$')\
    \ -ne 1 ]; then\n\t\techo \"No\"\n\t\treturn 1\n\tfi\n\tif [ $(echo \"$1\" | grep\
    \ -c '\\.[a-zA-Z][a-zA-Z][a-zA-Z]$') -ne 1 ]; then\n\t\techo \"No\"\n\t\treturn\
    \ 1\n\tfi\n\tif [ $(echo \"$1\" | grep -c '\\.[a-zA-Z][a-zA-Z][a-zA-Z]$') -ne\
    \ 1 ]; then\n\t\techo \"No\"\n\t\treturn 1\n\tfi\n\techo \"Yes\"\n\treturn 0",
  "    local name=\"$1\"\n    # $2 is the number of the digits in the string.\n  \
    \  local dig_num=$(expr $2 : '[0-9]*')\n    # $3 is the number of dots in the\
    \ string.\n    local dot_num=$(expr $3 : '[.]*')\n    # $4 is the number of letter\
    \ in the string.\n    local let_num=$(expr $4 : '[a-zA-Z]*')\n    # $5 is the\
    \ string before the dot.\n    local str_pre_dot=$5\n    # $6 is the string after\
    \ the dot.\n    local str_post_dot=$6\n    if [ $dig_num -gt 3 ]\n    then\n \
    \       echo \"No\"\n    elif [ $dot_num -ne 1 ]\n    then\n        echo \"No\"\
    \n    elif [ -z $str_pre_dot ] || [ -z $let_num ]\n    then\n        echo \"No\"\
    \n    elif [[ $str_post_dot != \"txt\" ]] && [[ $str_post_dot != \"exe\" ]] &&\
    \ [[ $str_post_dot != \"dll\" ]]\n    then\n        echo \"No\"\n    else\n  \
    \      echo \"Yes\"\n    fi", "  # write your code here\n  local file_name=\"\
    $1\"\n  if [[ \"${file_name//[0-9]}\" == \"$file_name\" ]]; then\n    echo \"\
    No\"\n    return\n  fi\n  local digits_count=${#file_name}\n  digits_count=${#file_name//[^0-9]}\n\
    \  if [[ \"$digits_count\" -gt 3 ]]; then\n    echo \"No\"\n    return\n  fi\n\
    \  if [[ \"${file_name//\\.}\" == \"$file_name\" ]]; then\n    echo \"No\"\n \
    \   return\n  fi\n  if [[ \"${file_name//\\.*\\.}\" != \"$file_name\" ]]; then\n\
    \    echo \"No\"\n    return\n  fi\n  local prefix=\"${file_name%%.*}\"\n  if\
    \ [[ \"${prefix//[a-zA-Z]}\" != \"$prefix\" ]]; then\n    echo \"No\"\n    return\n\
    \  fi\n  local suffix=\"${file_name##*.}\"\n  if [[ \"$suffix\" != \"txt\" &&\
    \ \"$suffix\" != \"exe\" && \"$suffix\" != \"dll\" ]]; then\n    echo \"No\"\n\
    \    return\n  fi\n  echo \"Yes\"", "    echo \"Enter file name\"\n    read filename\n\
    \    # substring= echo \"$filename\" | cut -d'.' -f1\n    count=0\n    for ((\
    \ i=0; i<${#filename}; i++ )); do\n        if [[ ${filename:$i:1} =~ [0-9] ]];\
    \ then\n            ((count++))\n        fi\n    done\n    if [[ $count -gt 3\
    \ ]]; then\n        echo \"No\"\n    else\n        if [[ \"$filename\" =~ ^[a-zA-Z]\
    \ ]]; then\n            extension=${filename#*.}\n            if [[ $extension\
    \ =~ \"txt\" || $extension =~ \"exe\" || $extension =~ \"dll\" ]]; then\n    \
    \            echo \"Yes\"\n            else\n                echo \"No\"\n   \
    \         fi\n        else\n            echo \"No\"\n        fi\n    fi", "  \
    \  local num_digits=$(echo \"$1\" | sed -E 's/[^0-9]//g' | wc -c)\n    local num_dots=$(echo\
    \ \"$1\" | grep -oE '\\.' | wc -l)\n    local pre_dot=$(echo \"$1\" | cut -d '.'\
    \ -f 1)\n    local post_dot=$(echo \"$1\" | cut -d '.' -f 2)\n    if [[ $num_digits\
    \ -gt 3 || $num_dots -ne 1 || !($pre_dot =~ ^[a-zA-Z]*$) || \\\n          !($post_dot\
    \ =~ ^txt$|^exe$|^dll$) ]]; then\n        echo \"No\"\n    else\n        echo\
    \ \"Yes\"\n    fi", "\tif [ $(echo $1 | grep -E -o \"[[:digit:]]{4}\" | wc -l)\
    \ -gt 3 ]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\tif [ $(echo $1 | grep -E\
    \ -o \"\\.\" | wc -l) -ne 1 ]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\tif [[\
    \ $(echo $1 | cut -d'.' -f1) =~ ^[a-zA-Z]+[0-9]*$ ]]; then\n\t\tif [[ $1 =~ \\\
    .txt$ ]] || [[ $1 =~ \\.exe$ ]] || [[ $1 =~ \\.dll$ ]]; then\n\t\t\techo \"Yes\"\
    \n\t\telse\n\t\t\techo \"No\"\n\t\tfi\n\telse\n\t\techo \"No\"\n\tfi", "\t# TODO:\
    \ Write your code here.\n\tif [ -f $1 ];then\n\t\t#if [ $(echo \"$1\" | grep -o\
    \ -P \"[0-9]\" | wc -l) -gt 3 ];then\n\t\tif [ $(echo \"$1\" | grep -o -P \"^[a-zA-Z]+\"\
    \ | wc -l) -ne 1 ];then\n\t\t\t#echo \"No\"; return\n\t\t\techo \"No\"\n\t\telif\
    \ [ $(echo \"$1\" | grep -o -P \"\\.\" | wc -l) -ne 1 ];then\n\t\t\t#echo \"No\"\
    ; return\n\t\t\techo \"No\"\n\t\telif [ $(echo \"$1\" | grep -o -P \"^[a-zA-Z]+\"\
    \ | wc -l) -ne 1 ];then\n\t\t\t#echo \"No\"; return\n\t\t\techo \"No\"\n\t\telif\
    \ [ $(echo \"$1\" | grep -o -P \"^[a-zA-Z]+\" | wc -l) -ne 1 ];then\n\t\t\t#echo\
    \ \"No\"; return\n\t\t\techo \"No\"\n\t\telse\n\t\t\t#echo \"Yes\"; return\n\t\
    \t\techo \"Yes\"\n\t\tfi\n\telse\n\t\techo \"No\"\n\tfi", "\tif [[ \"$1\" =~ ^([a-zA-Z][^0-9]*)([0-9]{1,3})*\\\
    .(txt|exe|dll)$ ]]; then\n\t\tprintf \"Yes\"\n\telse\n\t\tprintf \"No\"\n\tfi",
  "    FILE=$1\n    if [[ $FILE =~ ^[a-zA-Z]+[0-9]{0,3}[a-zA-Z]+[.](txt|exe|dll)$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  count_digits=$(echo $1 | grep -o '[0-9]' | wc -l)\n    count_dots=$(echo $1\
    \ | grep -o '\\.' | wc -l)\n    extension=$(echo $1 | cut -d'.' -f2)\n    substr_before_dot=$(echo\
    \ $1 | cut -d'.' -f1)\n    first_char_before_dot=$(echo $substr_before_dot | head\
    \ -c 1)\n    case $extension in\n        \"txt\" | \"exe\" | \"dll\")\n      \
    \      if [[ $count_digits -gt 3 || $count_dots -ne 1 ||\n                   \
    \ -z $substr_before_dot ||\n                    ! $first_char_before_dot =~ [a-zA-Z]\
    \ ]]; then\n                echo \"No\"\n            else\n                echo\
    \ \"Yes\"\n            fi\n            ;;\n        *)\n            echo \"No\"\
    \n            ;;\n    esac", "    if [[ $1 =~ ^([a-zA-Z]+)([0-9]{0,3})([.])([txt]|[exe]|[dll])$\
    \ ]]; then\n        echo 'Yes'\n    else\n        echo 'No'\n    fi", "  printf\
    \ \"%s\\n\" \"$1\" | grep -Eq '^[a-zA-Z][a-zA-Z0-9]{0,2}\\.[txt|exe|dll]$' &&\
    \ printf \"Yes\\n\" || printf \"No\\n\"", "    file_name=$1\n    regex=\"^([a-zA-Z]+[0-9]*[0-9]*[0-9]*)\\\
    .([txt|exe|dll])$\"\n    if [[ $file_name =~ $regex ]]; then\n        echo \"\
    Yes\"\n    else\n        echo \"No\"\n    fi", "\tlocal -r file_name=\"$1\"\n\n\
    \t# Check if the count of digits is greater than 3\n\tlocal -r digit_count=$(grep\
    \ -o '[0-9]' <<< \"$file_name\" | wc -l)\n\tif [[ $digit_count -gt 3 ]]; then\n\
    \t\techo \"No\"\n\t\treturn\n\tfi\n\n\t# Check if the extension is not one of\
    \ the valid extensions\n\tlocal -r extension=$(cut -d '.' -f 2 <<< \"$file_name\"\
    )\n\tif [[ \"$extension\" != \"txt\" && \"$extension\" != \"exe\" && \"$extension\"\
    \ != \"dll\" ]]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\t# Check if the dot\
    \ count is not equal to 1\n\tlocal -r dot_count=$(grep -o '\\.' <<< \"$file_name\"\
    \ | wc -l)\n\tif [[ $dot_count -ne 1 ]]; then\n\t\techo \"No\"\n\t\treturn\n\t\
    fi\n\n\t# Check if the substring before the dot is empty\n\tlocal -r string_before_dot=$(cut\
    \ -d '.' -f 1 <<< \"$file_name\")\n\tif [[ -z \"$string_before_dot\" ]]; then\n\
    \t\techo \"No\"\n\t\treturn\n\tfi\n\n\t# Check if the substring before the dot\
    \ is not starting with a letter\n\tlocal -r letter_pattern='^[a-zA-Z]'\n\tif !\
    \ [[ \"$string_before_dot\" =~ $letter_pattern ]]; then\n\t\techo \"No\"\n\t\t\
    return\n\tfi\n\n\techo \"Yes\"", "    if [[ $1 =~ ^[a-zA-Z]+[0-9]{0,3}.[txed]+$\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "  \
    \  local file_name=$1\n    # is it empty?\n    if [[ -z $file_name ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n    # check number of digits\n \
    \   local number_of_digits=$(echo $file_name | grep -o \"[0-9]\" | wc -l)\n  \
    \  if [[ $number_of_digits -gt 3 ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    # check number of dots\n    local number_of_dots=$(echo $file_name\
    \ | grep -o \"\\.\" | wc -l)\n    if [[ $number_of_dots -ne 1 ]]; then\n     \
    \   echo \"No\"\n        return\n    fi\n    # check extension\n    local extension=$(echo\
    \ $file_name | cut -d'.' -f2)\n    if [[ $extension != \"txt\" && $extension !=\
    \ \"exe\" && $extension != \"dll\" ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n    # check name\n    local name=$(echo $file_name | cut -d'.' -f1)\n\
    \    if [[ -z $name ]]; then\n        echo \"No\"\n        return\n    fi\n  \
    \  # check if it starts with a latin letter\n    if [[ ! $name =~ ^[a-zA-Z] ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"", "  local\
    \ file_name=$1\n  file_name_pattern=\"^[a-zA-Z]+(.[tT][xX][tT]|.[eE][xX][eE]|.[dD][lL][lL])$\"\
    \n  if [[ $file_name =~ $file_name_pattern ]]; then\n    echo \"Yes\"\n  else\n\
    \    echo \"No\"\n  fi", '    # Write your code here.', "\t#echo \"$1\"\n\tlocal\
    \ c=$(echo \"$1\" | cut -d \".\" -f 1)\n\tlocal e=$(echo \"$1\" | cut -d \".\"\
    \ -f 2)\n\t#echo \"$c\"\n\t#echo \"$e\"\n\tif [[ \"$1\" =~ [0-9]{4} ]]; then\n\
    \t\techo \"No\"\n\telif [[ \"$c\" =~ [^a-zA-Z] ]]; then\n\t\techo \"No\"\n\telif\
    \ [[ \"$e\" != \"txt\" && \"$e\" != \"exe\" && \"$e\" != \"dll\" ]]; then\n\t\t\
    echo \"No\"\n\telse\n\t\techo \"Yes\"\n\tfi", "  if [[ $1 =~ ^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .(txt|exe|dll)$ ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi", " \
    \   if echo \"$1\" | grep -q '[0-9]\\{4\\}'; then\n        echo \"No\"\n     \
    \   return\n    fi\n    if ! echo \"$1\" | grep -q -E '^[a-zA-Z]+[0-9]*\\.[a-zA-Z]+$';\
    \ then\n        echo \"No\"\n        return\n    fi\n    if ! echo \"$1\" | grep\
    \ -q -E '\\.(txt|exe|dll)$'; then\n        echo \"No\"\n        return\n    fi\n\
    \    echo \"Yes\"", "    if [[ $(echo $1 | grep -E '^[a-zA-Z][a-zA-Z0-9]*\\.txt$')\
    \ ]]; then\n        echo 'Yes'\n    elif [[ $(echo $1 | grep -E '^[a-zA-Z][a-zA-Z0-9]*\\\
    .exe$') ]]; then\n        echo 'Yes'\n    elif [[ $(echo $1 | grep -E '^[a-zA-Z][a-zA-Z0-9]*\\\
    .dll$') ]]; then\n        echo 'Yes'\n    else\n        echo 'No'\n    fi", "\t\
    # Your code goes here\n\t# Use if statement to check the file name\n\tif echo\
    \ \"$1\" | grep -qE '^[[:alpha:]]{1}[[:alnum:]]*\\.(txt|exe|dll)$'; then\n\t\t\
    printf 'Yes\\n'\n\telse\n\t\tprintf 'No\\n'\n\tfi", "\tif [[ ! \"$1\" =~ ^[a-zA-Z]+([0-9][0-9][0-9])*[.]txt$\
    \ ]] && [[ ! \"$1\" =~ ^[a-zA-Z]+([0-9][0-9][0-9])*[.]exe$ ]] && [[ ! \"$1\" =~\
    \ ^[a-zA-Z]+([0-9][0-9][0-9])*[.]dll$ ]]; then\n\t\techo \"No\"\n\telse\n\t\t\
    echo \"Yes\"\n\tfi", "\t# TODO implement this function\n\tfile=$1\n\tif [[ $file\
    \ =~ [a-zA-Z]{1}[a-zA-Z0-9]*.(txt|exe|dll) ]]; then\n\t\techo \"Yes\"\n\telse\n\
    \t\techo \"No\"\n\tfi", "  local fname=$1\n  # Check if there are more than 3\
    \ digits in the file name\n  if [ $(echo \"$fname\" | grep -E -o '[0-9]' | wc\
    \ -l) -gt 3 ]; then\n    echo \"No\"\n    return\n  fi\n  # Check if the file's\
    \ name contains exactly one dot\n  if [ $(echo \"$fname\" | grep -E -o '[\\.]'\
    \ | wc -l) -ne 1 ]; then\n    echo \"No\"\n    return\n  fi\n  # Check if the\
    \ substring before the dot is not empty and starts with a letter from \n  # the\
    \ latin alphapet\n  if [[ $(echo \"$fname\" | sed -r 's/([a-zA-Z]+)\\..*/\\1/')\
    \ == \"\" ]] || \\\n     [[ $(echo \"$fname\" | sed -r 's/([a-zA-Z]+)\\..*/\\\
    1/') =~ [^a-zA-Z] ]]; then\n    echo \"No\"\n    return\n  fi\n  # Check if the\
    \ substring after the dot is one of these: ['txt', 'exe', 'dll']\n  if [[ $(echo\
    \ \"$fname\" | sed -r 's/[a-zA-Z]+(\\..*)/\\1/') != \".txt\" ]] && \\\n     [[\
    \ $(echo \"$fname\" | sed -r 's/[a-zA-Z]+(\\..*)/\\1/') != \".exe\" ]] && \\\n\
    \     [[ $(echo \"$fname\" | sed -r 's/[a-zA-Z]+(\\..*)/\\1/') != \".dll\" ]];\
    \ then\n    echo \"No\"\n    return\n  fi\n  echo \"Yes\"", "\tif [ $(echo $1\
    \ | egrep \"\\..*\\.|^\\.|\\.$|\\..*\\.txt$|\\..*\\.exe$|\\..*\\.dll$|[0-9]{4}|.{0,1}[^\\\
    .]+\\.$\" | wc -l) -gt 0 ]; then\n\t\techo No\n\telse\n\t\techo Yes\n\tfi", '    #
    Write your code here', "    # regex for digit\n    digit='^[0-9]+$'\n    # regex\
    \ for letters\n    letters='^[a-zA-Z]+$'\n    # split the string by dot to get\
    \ the substring before and after the dot\n    IFS='.'\n    read -ra parts <<<\
    \ \"$1\"\n    before_dot=${parts[0]}\n    after_dot=${parts[1]}\n    # check if\
    \ there are more than 3 digits in the filename\n    if [[ $before_dot =~ $digit\
    \ ]]; then\n        if [[ ${#before_dot} -gt 3 ]]; then\n            echo \"No\"\
    \n            return\n        fi\n    fi\n    # check if the filename has exactly\
    \ one dot\n    if [[ ${#parts[@]} -ne 2 ]]; then\n        echo \"No\"\n      \
    \  return\n    fi\n    # check if the substring before the dot is empty or it\
    \ does not start with a letter\n    if [[ -z $before_dot ]] || [[ ! $before_dot\
    \ =~ $letters ]]; then\n        echo \"No\"\n        return\n    fi\n    # check\
    \ if the substring after the dot is not one of the allowed ones\n    if [[ $after_dot\
    \ != \"txt\" ]] && [[ $after_dot != \"exe\" ]] && [[ $after_dot != \"dll\" ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n    echo \"Yes\"", "\tlocal\
    \ s=$1\n\t# TODO: write your code here\n\t# Check for syntax errors\n\tif [[ !\
    \ $s =~ (^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$) ]]; then\n\t\techo \"No\"\n\t\t\
    return 0\n\tfi\n\t# Count the number of digits\n\tif [ ${#s} -eq 1 ]; then\n\t\
    \tif [[ $s =~ (^[a-zA-Z]$) ]]; then\n\t\t\techo \"Yes\"\n\t\t\treturn 0\n\t\t\
    fi\n\telif [ ${#s} -eq 2 ]; then\n\t\tif [[ $s =~ (^[a-zA-Z][a-zA-Z]$) ]]; then\n\
    \t\t\techo \"Yes\"\n\t\t\treturn 0\n\t\tfi\n\telif [ ${#s} -eq 3 ]; then\n\t\t\
    if [[ $s =~ (^[a-zA-Z][a-zA-Z][a-zA-Z]$) ]]; then\n\t\t\techo \"Yes\"\n\t\t\t\
    return 0\n\t\tfi\n\telif [ ${#s} -gt 3 ]; then\n\t\tif [[ $s =~ (^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z]{3}$) ]]; then\n\t\t\techo \"Yes\"\n\t\t\treturn 0\n\t\tfi\n\tfi\n\t\
    echo \"No\"\n\treturn 0", "    # Write your answer between the two lines of asterisks.\n\
    \    # *******************************************************************\n \
    \   # *******************************************************************\n  \
    \  echo \"No\"", "    first=${1%%.*}\n    second=${1#*.}\n    first_test=`echo\
    \ $first | grep -E \"^[a-zA-Z]+[0-9]{0,3}$\"`\n    if [ -z \"$first_test\" ];\
    \ then\n        echo \"No\"\n        return\n    fi\n    second_test=`echo $second\
    \ | grep -E \"[a-zA-Z]{2,3}\"`\n    if [ -z \"$second_test\" ]; then\n       \
    \ echo \"No\"\n        return\n    fi\n    echo \"Yes\"", "    #my own function\n\
    \    my_name_checker $1", "    # Check if the number of digits in the file's name\
    \ is more than three\n    if [[ $(echo $1 | tr -d -c '[0-9]') -gt 3 ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n\n    # Check if the file's name\
    \ contains exactly one dot\n    if [[ $(echo $1 | tr -d -c '.') -ne 1 ]]; then\n\
    \        echo \"No\"\n        return\n    fi\n\n    # Check if the substring before\
    \ the dot is empty or doesn't start with a letter from\n    # the latin alphapet\n\
    \    if [[ $(echo $1 | cut -d'.' -f1 | tr -d -c '[a-zA-Z]') -eq 0 ]]; then\n \
    \       echo \"No\"\n        return\n    fi\n\n    # Check if the substring after\
    \ the dot is one of these: ['txt', 'exe', 'dll']\n    if [[ $(echo $1 | cut -d'.'\
    \ -f2) != \"txt\" && $(echo $1 | cut -d'.' -f2) != \"exe\" && \\\n          $(echo\
    \ $1 | cut -d'.' -f2) != \"dll\" ]]; then\n        echo \"No\"\n        return\n\
    \    fi\n\n    echo \"Yes\"", "    local alpha_pattern='^[a-zA-Z]'\n    local\
    \ digit_pattern='[0-9]*'\n    local dot_pattern='\\.'\n    local extension_pattern='[txt|exe|dll]'\n\
    \    local file_name=$1\n    local extension=\"${file_name##*.}\"\n    local name=\"\
    ${file_name%.*}\"\n    local count_digits=\"$(echo ${name} | grep -o ${digit_pattern}\
    \ | wc -l)\"\n    local before_dot=\"${name%%.*}\"\n    local retval\n\n    if\
    \ [[ ${count_digits} -gt 3 ]]; then\n        retval='No'\n    elif [[ ${file_name}\
    \ =~ ${alpha_pattern} ]] && [[ ${file_name} =~ ${dot_pattern} ]] && [[ ${extension}\
    \ =~ ${extension_pattern} ]]; then\n        retval='Yes'\n    else\n        retval='No'\n\
    \    fi\n\n    echo ${retval}", "  if [[ !($1 =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,}[.](txt|exe|dll)$)\
    \ ]]; then\n    echo \"No\"\n  else\n    echo \"Yes\"\n  fi", "    # convert the\
    \ string to lower case\n    FILE_NAME=$(echo $1 | tr [:upper:] [:lower:])\n  \
    \  # check if the file name is empty\n    if [ -z \"$FILE_NAME\" ]; then\n   \
    \     echo \"No\"\n        return\n    fi\n    # check if the file name contains\
    \ more than 3 digits\n    if [ $(echo \"$FILE_NAME\" | grep -o \"[0-9]\" | wc\
    \ -l) -gt 3 ]; then\n        echo \"No\"\n        return\n    fi\n    # check\
    \ if the file name contains more than one dot\n    if [ $(echo \"$FILE_NAME\"\
    \ | grep -o \"\\.\" | wc -l) -ne 1 ]; then\n        echo \"No\"\n        return\n\
    \    fi\n    # separate the substring before and after the dot\n    BEFORE_DOT=$(echo\
    \ \"$FILE_NAME\" | cut -d\".\" -f1)\n    AFTER_DOT=$(echo \"$FILE_NAME\" | cut\
    \ -d\".\" -f2)\n    # check if the substring before the dot is empty or doesn't\
    \ start with a letter\n    if [ -z \"$BEFORE_DOT\" ] || [ $(echo \"$BEFORE_DOT\"\
    \ | grep -Eo \"^[a-zA-Z]\" | wc -l) -ne 1 ]; then\n        echo \"No\"\n     \
    \   return\n    fi\n    # check if the substring after the dot is not one of these:\
    \ ['txt', 'exe', 'dll']\n    if [ \"$AFTER_DOT\" != \"txt\" ] && [ \"$AFTER_DOT\"\
    \ != \"exe\" ] && [ \"$AFTER_DOT\" != \"dll\" ]; then\n        echo \"No\"\n \
    \       return\n    fi\n    echo \"Yes\"", "    # place your code here\n    name=$1\n\
    \    # $name is the filename\n    dot_count=0\n    digit_count=0\n    if [ \"\
    ${name:0:1}\" == [a-zA-Z] ]; then\n        for (( i=0; i<${#name}; i++ )); do\n\
    \            if [ \"${name:$i:1}\" == \".\" ]; then\n                ((dot_count++))\n\
    \            elif [ \"${name:$i:1}\" == [0-9] ]; then\n                ((digit_count++))\n\
    \            fi\n        done\n        if [ $dot_count -eq 1 ] && [ $digit_count\
    \ -le 3 ]; then\n            if [ ${name:(( ${#name} - 4 )):4} == \".txt\" ] ||\
    \ \\\n               [ ${name:(( ${#name} - 4 )):4} == \".exe\" ] || \\\n    \
    \           [ ${name:(( ${#name} - 4 )):4} == \".dll\" ]; then\n             \
    \   echo \"Yes\"\n            else\n                echo \"No\"\n            fi\n\
    \        else\n            echo \"No\"\n        fi\n    else\n        echo \"\
    No\"\n    fi", "  local valid_extensions=(\"txt\" \"exe\" \"dll\")\n  for ext\
    \ in \"${valid_extensions[@]}\"; do\n    if [[ \"$1\" == *\".\"$ext ]]; then\n\
    \      local digits_count=$(echo \"$1\" | tr -cd '[0-9]' | wc -c)\n      if [[\
    \ $digits_count -lt 4 ]]; then\n        local sub_str=$(echo \"$1\" | cut -d '.'\
    \ -f 1)\n        if [[ -n $sub_str ]]; then\n          if [[ $sub_str =~ ^[a-zA-Z]\
    \ ]]; then\n            echo \"Yes\"\n            return\n          fi\n     \
    \   fi\n      fi\n    fi\n  done\n  echo \"No\"", '    echo "to be written"',
  "    # TODO: Write your code here\n    # Please use the above example as a guideline\n\
    \    if [ -z \"$1\" ]; then \n        echo \"No\"\n        return\n    fi\n  \
    \  check=$(echo \"$1\" | grep -E '^[a-zA-Z]+[a-zA-Z0-9]*(\\.[a-zA-Z]+)?$')\n \
    \   if [ -z \"$check\" ]; then\n        echo \"No\"\n        return\n    fi\n\
    \    if [[ \"$1\" =~ ([a-zA-Z]+[a-zA-Z0-9]*)(\\.(txt|exe|dll)) ]]; then\n    \
    \    echo \"${BASH_REMATCH[1]}\"\n        if [ ${#BASH_REMATCH[1]} -gt 3 ]; then\n\
    \            echo \"No\"\n            return\n        fi\n        if [ \"${BASH_REMATCH[2]}\"\
    \ == \".txt\" ] || [ \"${BASH_REMATCH[2]}\" == \".exe\" ] || [ \"${BASH_REMATCH[2]}\"\
    \ == \".dll\" ]; then\n            echo \"Yes\"\n            return\n        fi\n\
    \    fi\n    echo \"No\"", "    if [[ $1 =~ [A-Za-z]+([0-9]{3})+\\.[txt|exe|dll]\
    \ ]]; then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", '  #
    insert your code here', "  local fileName=$1\n  local extension=${fileName##*.}\n\
    \  local isValid=false\n  local validExtensions=(txt exe dll)\n  local numberOfDigits=0\n\
    \  local oneDot=false\n  local subStringBeforeDot=false\n  local latinAlphabet=false\n\
    \  local isValidExtension=false\n\n  if [[ $fileName =~ [0-9] ]]; then\n    numberOfDigits=$(echo\
    \ $fileName | grep -o [0-9] | wc -l)\n  fi\n\n  if [[ $fileName =~ [.] ]]; then\n\
    \    oneDot=true\n  fi\n\n  if [[ $fileName =~ [^.]* ]]; then\n    subStringBeforeDot=true\n\
    \  fi\n\n  if [[ $fileName =~ [A-Za-z] ]]; then\n    latinAlphabet=true\n  fi\n\
    \n  for i in \"${validExtensions[@]}\"; do\n    if [[ $i == $extension ]]; then\n\
    \      isValidExtension=true\n    fi\n  done\n\n  if [[ $numberOfDigits -le 3\
    \ && $oneDot == true && $subStringBeforeDot == true && $latinAlphabet == true\
    \ && $isValidExtension == true ]]; then\n    isValid=true\n  fi\n\n  if [[ $isValid\
    \ == true ]]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi", "    local\
    \ file_name=$1\n    # The file's name contains exactly one dot '.'\n    if [[\
    \ \"$file_name\" != *.* ]]; then\n        echo 'No'\n        return\n    fi\n\
    \    local prefix=\"${file_name%%.*}\"\n    local suffix=\"${file_name#*.}\"\n\
    \    # The substring before the dot should not be empty, and it starts with a\
    \ letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n    if [[ -z \"$prefix\"\
    \ || \"$prefix\" != [a-zA-Z]* ]]; then\n        echo 'No'\n        return\n  \
    \  fi\n    # The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n    if [[ \"$suffix\" != \"txt\" && \"$suffix\" != \"exe\" && \"$suffix\"\
    \ != \"dll\" ]]; then\n        echo 'No'\n        return\n    fi\n    # There\
    \ should not be more than three digits ('0'-'9') in the file's name.\n    if [[\
    \ \"${file_name//[^0-9]/}\" != \"\" && ${#file_name//[^0-9]/} -gt 3 ]]; then\n\
    \        echo 'No'\n        return\n    fi\n    echo 'Yes'", "    # Check whether\
    \ the file name contains more than three digits.\n    if [[ $1 =~ ([0-9]){4} ]];\
    \ then\n        echo \"No\"\n        return\n    fi\n\n    # Check whether the\
    \ file name contains exactly one dot.\n    if [[ $1 =~ \\. ]]; then\n        if\
    \ [[ \"${#BASH_REMATCH[@]}\" -ne 1 ]]; then\n            echo \"No\"\n       \
    \     return\n        fi\n    else\n        echo \"No\"\n        return\n    fi\n\
    \n    # Check whether the substring before the dot is valid.\n    if [[ $1 =~\
    \ [a-zA-Z]+ ]]; then\n        if [[ \"${#BASH_REMATCH[@]}\" -ne 1 ]]; then\n \
    \           echo \"No\"\n            return\n        fi\n    else\n        echo\
    \ \"No\"\n        return\n    fi\n\n    # Check whether the substring after the\
    \ dot is valid.\n    if [[ $1 =~ ([0-9a-zA-Z]*)\\.(txt|exe|dll) ]]; then\n   \
    \     if [[ \"${#BASH_REMATCH[@]}\" -ne 2 ]]; then\n            echo \"No\"\n\
    \            return\n        fi\n    else\n        echo \"No\"\n        return\n\
    \    fi\n\n    echo \"Yes\"", "\t# Check number of digits\n\tif [[ $(echo $1 |\
    \ tr -cd '0-9' | wc -c) -gt 3 ]]; then\n\t\techo \"No\"\n\t\treturn\n\tfi\n\n\t\
    # Number of dots\n\tif [[ $(echo $1 | tr -cd '.' | wc -c) -ne 1 ]]; then\n\t\t\
    echo \"No\"\n\t\treturn\n\tfi\n\n\t# The substring before the dot\n\tpre_dot=$(echo\
    \ $1 | cut -d. -f1)\n\tif [[ -z $pre_dot ]]; then\n\t\techo \"No\"\n\t\treturn\n\
    \tfi\n\tif [[ $pre_dot =~ ^[a-zA-Z] ]]; then\n\t\t:\n\telse\n\t\techo \"No\"\n\
    \t\treturn\n\tfi\n\n\t# The substring after the dot\n\tpost_dot=$(echo $1 | cut\
    \ -d. -f2)\n\tcase $post_dot in\n\t\t\"txt\" | \"exe\" | \"dll\")\n\t\t\techo\
    \ \"Yes\"\n\t\t\t;;\n\t\t*)\n\t\t\techo \"No\"\n\t\t\t;;\n\tesac", "\tlocal file_name=$1\n\
    \tpattern_no_more_than_three_digits='[0-9]{4}'\n\tpattern_one_dot='[.]'\n\tpattern_not_empty_and_first_character_is_letter='^[a-zA-Z]+[^0-9]'\n\
    \tpattern_extension_is_valid='(\\.txt|\\.exe|\\.dll)$'\n\tif [[ $file_name =~\
    \ $pattern_no_more_than_three_digits ]]; then\n\t\techo 'No'\n\telif [[ $file_name\
    \ =~ $pattern_one_dot ]]; then\n\t\tfile_name_without_extension=${file_name%.*}\n\
    \t\tif [[ $file_name_without_extension =~ $pattern_not_empty_and_first_character_is_letter\
    \ ]]; then\n\t\t\tif [[ $file_name =~ $pattern_extension_is_valid ]]; then\n\t\
    \t\t\techo 'Yes'\n\t\t\telse\n\t\t\t\techo 'No'\n\t\t\tfi\n\t\telse\n\t\t\techo\
    \ 'No'\n\t\tfi\n\telse\n\t\techo 'No'\n\tfi", "\tif [[ $1 =~ [a-zA-Z]+[0-9]{0,3}[.](txt|exe|dll)\
    \ ]]; then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "    if [[ $1 =~\
    \ ([a-zA-Z]+)([0-9]{1,3})?(\\.[tT][xX][tT]|\\.[eE][xX][eE]|\\.[dD][lL][lL]) ]];\
    \ then\n        echo \"Yes\"\n    else\n        echo \"No\"\n    fi", "    # This\
    \ variable contains all the substring after the dot\n    local -a arr=(${1/*./})\n\
    \    # This variable contains all the substring before the dot\n    local file_name=\"\
    ${1/${arr[0]}/}\"\n    # Check if the file's name contains exactly one dot\n \
    \   if [[ ${file_name} =~ \"[^.]\" ]]; then\n        # Check if the substring\
    \ before the dot starts with a letter from the latin alphapet\n        if [[ ${file_name%%.*}\
    \ =~ ^[a-zA-Z] ]]; then\n            # Check if the substring after the dot is\
    \ equal to one of these: ['txt', 'exe', 'dll']\n            if [[ \"${arr[0]}\"\
    \ =~ ^(txt|exe|dll)$ ]]; then\n                # Check if there are not more than\
    \ three digits ('0'-'9') in the file's name\n                if [[ ${1} =~ \"\
    ^[^0-9]*([0-9]{3}|[0-9]{2}|[0-9])[^0-9]*$\" ]]; then\n                    echo\
    \ \"Yes\"\n                else\n                    echo \"No\"\n           \
    \     fi\n            else\n                echo \"No\"\n            fi\n    \
    \    else\n            echo \"No\"\n        fi\n    else\n        echo \"No\"\n\
    \    fi", "    if [[ \"$1\" =~ ([A-Za-z]*)[.](txt|exe|dll) ]]; then\n        if\
    \ [ \"${#BASH_REMATCH[1]}\" -gt 3 ]; then\n            echo \"No\"\n        else\n\
    \            echo \"Yes\"\n        fi\n    else\n        echo \"No\"\n    fi",
  "\tname=$1\n\tif [[ ${name} =~ ^[a-zA-Z]{1}[a-zA-Z0-9]{0,10}[.](txt|exe|dll)$ ]];\
    \ then\n\t\techo \"Yes\"\n\telse\n\t\techo \"No\"\n\tfi", "    if [[ ! $1 =~ ^[a-zA-Z][^0-9]*([0-9]{0,3})\\\
    .(txt|exe|dll)$ ]]; then\n        echo \"No\"\n    else\n        echo \"Yes\"\n\
    \    fi", "  num_digits=$(echo \"$1\" | sed 's/[^0-9]//g' | wc -c)\n  if [ $num_digits\
    \ -gt 3 ]; then\n    echo \"No\"\n    return\n  fi\n  pre_dot=$(echo \"$1\" |\
    \ sed 's/\\..*//')\n  post_dot=$(echo \"$1\" | sed 's/.*\\.//')\n  if [ -z $pre_dot\
    \ ] || [ -z $post_dot ]; then\n    echo \"No\"\n    return\n  fi\n  latin_char=$(echo\
    \ \"$pre_dot\" | sed 's/[^a-zA-Z]//g')\n  if [ -z $latin_char ]; then\n    echo\
    \ \"No\"\n    return\n  fi\n  if [ $post_dot != \"txt\" ] && [ $post_dot != \"\
    exe\" ] && [ $post_dot != \"dll\" ]; then\n    echo \"No\"\n    return\n  fi\n\
    \  echo \"Yes\"", "  if [[ -z $1 ]]; then\n    echo \"No\"\n    return\n  fi\n\
    \  if [[ ! $1 =~ ^[[:alpha:]]{1}[[:alnum:]]*\\.{1}(txt|exe|dll)$ ]]; then\n  \
    \  echo \"No\"\n    return\n  fi\n  if [[ ${#1} -le 2 ]]; then\n    echo \"No\"\
    \n    return\n  fi\n  local filename=${1%%.*}\n  local suffix=${1#*.}\n  if [[\
    \ ${#filename} -ge 4 ]]; then\n    echo \"No\"\n    return\n  fi\n  for char in\
    \ ${filename}; do\n    if [[ ! $char =~ ^[[:alpha:]]$ ]]; then\n      echo \"\
    No\"\n      return\n    fi\n  done\n  echo \"Yes\"", "    valid=false\n    # Check\
    \ if string not empty\n    if [ ! -z \"$1\" ]; then\n        # Check if file exists\n\
    \        if [ -f \"$1\" ]; then\n            # Get file name and extension\n \
    \           fname=$(basename -- \"$1\")\n            ext=\"${fname##*.}\"\n  \
    \          fname=\"${fname%.*}\"\n            # Check if extension is one of the\
    \ permited types\n            if [[ $ext == \"txt\" || $ext == \"exe\" || $ext\
    \ == \"dll\" ]]; then\n                # Check if filename starts with a letter\n\
    \                if [[ $fname =~ ^[a-zA-Z] ]]; then\n                    # Check\
    \ if filename contains only one dot\n                    if [[ \"$fname\" =~ ^[^.]*\\\
    .[^.]*$ ]]; then\n                        # Check if filename contains more than\
    \ 3 digits\n                        if [[ \"$fname\" =~ ^[^0-9]*[0-9]{4}[^0-9]*$\
    \ ]]; then\n                            valid=true\n                        fi\n\
    \                    fi\n                fi\n            fi\n        fi\n    fi\n\
    \    if [ \"$valid\" = true ]; then\n        echo \"Yes\"\n    else\n        echo\
    \ \"No\"\n    fi", "    local res=\"\"\n    if [[ ! $1 =~ ^[a-zA-Z]+[a-zA-Z0-9]*\\\
    .[a-zA-Z]{3}$ ]]; then\n        res=\"No\"\n    elif [[ $1 =~ \\.[tT][xX][tT]$\
    \ ]]; then\n        res=\"Yes\"\n    elif [[ $1 =~ \\.[eE][xX][eE]$ ]]; then\n\
    \        res=\"Yes\"\n    elif [[ $1 =~ \\.[dD][lL][lL]$ ]]; then\n        res=\"\
    Yes\"\n    else\n        res=\"No\"\n    fi\n    echo $res", "    # Write your\
    \ code here\n    # -----------------------------------\n    # Do NOT modify the\
    \ code above\n\n    # Valid\n    # The substring after the dot should be one of\
    \ these: ['txt', 'exe', 'dll']\n    if [[ $1 =~ .*\\.(txt|exe|dll)$ ]]; then\n\
    \        # Valid\n        # The substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \        if [[ $1 =~ ^[a-zA-Z]+.*\\..*$ ]]; then\n            # Valid\n      \
    \      # There should not be more than three digits ('0'-'9') in the file's name.\n\
    \            if [[ ! $1 =~ .*[0-9]{4,}.* ]]; then\n                # Valid\n \
    \               # The file's name contains exactly one dot '.'\n             \
    \   if [[ $1 =~ ^.*\\..*$ ]]; then\n                    echo \"Yes\"\n       \
    \         else\n                    echo \"No\"\n                fi\n        \
    \    else\n                echo \"No\"\n            fi\n        else\n       \
    \     echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi\n\n    #\
    \ -----------------------------------\n    # Do NOT modify the code below", " \
    \   # write your code here\n    if [ \"$(echo \"$1\" | grep -E -c '^[a-zA-Z][0-9]{0,3}[a-zA-Z]{0,1}[.][a-zA-Z]{3}$')\"\
    \ -eq 1 ]; then\n        #substring=$(echo \"$1\" | grep -E '^[a-zA-Z][0-9]{0,3}[a-zA-Z]{0,1}[.][a-zA-Z]{3}$')\n\
    \        substring=$(echo \"$1\" | sed -E 's/[a-zA-Z]+[0-9]{0,3}[a-zA-Z]*[.]//g')\n\
    \        if [ \"$substring\" == \"txt\" ] || [ \"$substring\" == \"exe\" ] ||\
    \ [ \"$substring\" == \"dll\" ]; then\n            echo \"Yes\"\n        else\n\
    \            echo \"No\"\n        fi\n    else\n        echo \"No\"\n    fi",
  "\t# Your code here\n\tname=$1\n\tstr=${name:0:1}\n\tstr2=${name: -4}\n\tstr3=${name:\
    \ -3}\n\tstr4=${name: -3:1}\n\tif [[ \"$str\" =~ [a-zA-Z] ]] && [[ \"$name\" =~\
    \ \\. ]] && [[ \"$name\" =~ [0-9] ]] && ([[ \"$str2\" == \".txt\" ]] || [[ \"\
    $str2\" == \".exe\" ]] || [[ \"$str2\" == \".dll\" ]]) && [[ \"$str4\" == \".\"\
    \ ]] && [[ \"${#name}\" -le 8 ]]\n\tthen \n\t\techo \"Yes\"\n\telse\n\t\techo\
    \ \"No\"\n\tfi"]
stop_tokens:
- "\n}"
